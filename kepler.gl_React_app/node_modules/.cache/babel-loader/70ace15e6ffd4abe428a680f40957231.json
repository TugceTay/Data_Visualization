{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport View from './view';\nimport Viewport from '../viewports/viewport';\nimport { Matrix4 } from 'math.gl';\nimport OrbitController from '../controllers/orbit-controller';\nvar DEGREES_TO_RADIANS = Math.PI / 180;\nfunction getViewMatrix(_ref) {\n  var height = _ref.height,\n    fovy = _ref.fovy,\n    orbitAxis = _ref.orbitAxis,\n    rotationX = _ref.rotationX,\n    rotationOrbit = _ref.rotationOrbit,\n    zoom = _ref.zoom;\n  var distance = 0.5 / Math.tan(fovy * DEGREES_TO_RADIANS / 2);\n  var up = orbitAxis === 'Z' ? [0, 0, 1] : [0, 1, 0];\n  var eye = orbitAxis === 'Z' ? [0, -distance, 0] : [0, 0, distance];\n  var viewMatrix = new Matrix4().lookAt({\n    eye: eye,\n    up: up\n  });\n  viewMatrix.rotateX(rotationX * DEGREES_TO_RADIANS);\n  if (orbitAxis === 'Z') {\n    viewMatrix.rotateZ(rotationOrbit * DEGREES_TO_RADIANS);\n  } else {\n    viewMatrix.rotateY(rotationOrbit * DEGREES_TO_RADIANS);\n  }\n  var projectionScale = Math.pow(2, zoom) / (height || 1);\n  viewMatrix.scale(projectionScale);\n  return viewMatrix;\n}\nvar OrbitViewport = function (_Viewport) {\n  _inherits(OrbitViewport, _Viewport);\n  function OrbitViewport(props) {\n    _classCallCheck(this, OrbitViewport);\n    var id = props.id,\n      x = props.x,\n      y = props.y,\n      width = props.width,\n      height = props.height,\n      _props$fovy = props.fovy,\n      fovy = _props$fovy === void 0 ? 50 : _props$fovy,\n      near = props.near,\n      far = props.far,\n      _props$orbitAxis = props.orbitAxis,\n      orbitAxis = _props$orbitAxis === void 0 ? 'Z' : _props$orbitAxis,\n      _props$target = props.target,\n      target = _props$target === void 0 ? [0, 0, 0] : _props$target,\n      _props$rotationX = props.rotationX,\n      rotationX = _props$rotationX === void 0 ? 0 : _props$rotationX,\n      _props$rotationOrbit = props.rotationOrbit,\n      rotationOrbit = _props$rotationOrbit === void 0 ? 0 : _props$rotationOrbit,\n      _props$zoom = props.zoom,\n      zoom = _props$zoom === void 0 ? 0 : _props$zoom;\n    return _possibleConstructorReturn(this, _getPrototypeOf(OrbitViewport).call(this, {\n      id: id,\n      viewMatrix: getViewMatrix({\n        height: height,\n        fovy: fovy,\n        orbitAxis: orbitAxis,\n        rotationX: rotationX,\n        rotationOrbit: rotationOrbit,\n        zoom: zoom\n      }),\n      fovy: fovy,\n      near: near,\n      far: far,\n      x: x,\n      y: y,\n      position: target,\n      width: width,\n      height: height,\n      zoom: zoom\n    }));\n  }\n  return OrbitViewport;\n}(Viewport);\nvar OrbitView = function (_View) {\n  _inherits(OrbitView, _View);\n  function OrbitView(props) {\n    _classCallCheck(this, OrbitView);\n    return _possibleConstructorReturn(this, _getPrototypeOf(OrbitView).call(this, Object.assign({}, props, {\n      type: OrbitViewport\n    })));\n  }\n  _createClass(OrbitView, [{\n    key: \"controller\",\n    get: function get() {\n      return this._getControllerProps({\n        type: OrbitController\n      });\n    }\n  }]);\n  return OrbitView;\n}(View);\nexport { OrbitView as default };\nOrbitView.displayName = 'OrbitView';","map":{"version":3,"sources":["../../../src/views/orbit-view.js"],"names":["View","Viewport","Matrix4","OrbitController","DEGREES_TO_RADIANS","Math","PI","getViewMatrix","height","fovy","orbitAxis","rotationX","rotationOrbit","zoom","distance","tan","up","eye","viewMatrix","lookAt","rotateX","rotateZ","rotateY","projectionScale","pow","scale","OrbitViewport","props","id","x","y","width","near","far","target","position","OrbitView","assign","type","_getControllerProps","displayName"],"mappings":"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","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\n\nimport {Matrix4} from 'math.gl';\nimport OrbitController from '../controllers/orbit-controller';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction getViewMatrix({height, fovy, orbitAxis, rotationX, rotationOrbit, zoom}) {\n  // We position the camera so that one common space unit (world space unit scaled by zoom)\n  // at the target maps to one screen pixel.\n  // This is a similar technique to that used in web mercator projection\n  // By doing so we are able to convert between common space and screen space sizes efficiently\n  // in the vertex shader.\n  const distance = 0.5 / Math.tan((fovy * DEGREES_TO_RADIANS) / 2);\n  const up = orbitAxis === 'Z' ? [0, 0, 1] : [0, 1, 0];\n  const eye = orbitAxis === 'Z' ? [0, -distance, 0] : [0, 0, distance];\n\n  const viewMatrix = new Matrix4().lookAt({eye, up});\n\n  viewMatrix.rotateX(rotationX * DEGREES_TO_RADIANS);\n  if (orbitAxis === 'Z') {\n    viewMatrix.rotateZ(rotationOrbit * DEGREES_TO_RADIANS);\n  } else {\n    viewMatrix.rotateY(rotationOrbit * DEGREES_TO_RADIANS);\n  }\n\n  // When height increases, we need to increase the distance from the camera to the target to\n  // keep the 1:1 mapping. However, this also changes the projected depth of each position by\n  // moving them further away between the near/far plane.\n  // Without modifying the default near/far planes, we instead scale down the common space to\n  // remove the distortion to the depth field.\n  const projectionScale = Math.pow(2, zoom) / (height || 1);\n  viewMatrix.scale(projectionScale);\n\n  return viewMatrix;\n}\n\nclass OrbitViewport extends Viewport {\n  constructor(props) {\n    const {\n      id,\n      x,\n      y,\n      width,\n      height,\n\n      fovy = 50, // From eye position to lookAt\n      near,\n      far,\n      orbitAxis = 'Z', // Orbit axis with 360 degrees rotating freedom, can only be 'Y' or 'Z'\n      target = [0, 0, 0], // Which point is camera looking at, default origin\n\n      rotationX = 0, // Rotating angle around X axis\n      rotationOrbit = 0, // Rotating angle around orbit axis\n\n      zoom = 0\n    } = props;\n\n    super({\n      id,\n      viewMatrix: getViewMatrix({\n        height,\n        fovy,\n        orbitAxis,\n        rotationX,\n        rotationOrbit,\n        zoom\n      }),\n      fovy,\n      near,\n      far,\n      x,\n      y,\n      position: target,\n      width,\n      height,\n      zoom\n    });\n  }\n}\n\nexport default class OrbitView extends View {\n  constructor(props) {\n    super(\n      Object.assign({}, props, {\n        type: OrbitViewport\n      })\n    );\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: OrbitController\n    });\n  }\n}\n\nOrbitView.displayName = 'OrbitView';\n"]},"metadata":{},"sourceType":"module"}