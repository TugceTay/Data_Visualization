{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { ClipSpace, withParameters, clear } from '@luma.gl/core';\nimport Pass from './pass';\nvar ScreenPass = function (_Pass) {\n  _inherits(ScreenPass, _Pass);\n  function ScreenPass(gl) {\n    var _this;\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, ScreenPass);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ScreenPass).call(this, gl, props));\n    var module = props.module,\n      fs = props.fs,\n      id = props.id;\n    _this.model = new ClipSpace(gl, {\n      id: id,\n      fs: fs,\n      modules: [module]\n    });\n    return _this;\n  }\n  _createClass(ScreenPass, [{\n    key: \"render\",\n    value: function render(params) {\n      var _this2 = this;\n      var gl = this.gl;\n      withParameters(gl, {\n        framebuffer: params.outputBuffer,\n        clearColor: [0, 0, 0, 0]\n      }, function () {\n        return _this2._renderPass(gl, params);\n      });\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      this.model[\"delete\"]();\n      this.model = null;\n    }\n  }, {\n    key: \"_renderPass\",\n    value: function _renderPass(gl, _ref) {\n      var inputBuffer = _ref.inputBuffer,\n        outputBuffer = _ref.outputBuffer;\n      clear(gl, {\n        color: true\n      });\n      this.model.draw({\n        moduleSettings: this.props.moduleSettings,\n        uniforms: {\n          texture: inputBuffer,\n          texSize: [inputBuffer.width, inputBuffer.height]\n        },\n        parameters: {\n          depthWrite: false,\n          depthTest: false\n        }\n      });\n    }\n  }]);\n  return ScreenPass;\n}(Pass);\nexport { ScreenPass as default };","map":{"version":3,"sources":["../../../src/passes/screen-pass.js"],"names":["ClipSpace","withParameters","clear","Pass","ScreenPass","gl","props","module","fs","id","model","modules","params","framebuffer","outputBuffer","clearColor","_renderPass","inputBuffer","color","draw","moduleSettings","uniforms","texture","texSize","width","height","parameters","depthWrite","depthTest"],"mappings":";;;;;AAMA,SAAQA,SAAR,EAAmBC,cAAnB,EAAmCC,KAAnC,QAA+C,eAA/C;AACA,OAAOC,IAAP,MAAiB,QAAjB;IAEqBC,U;;EACnB,SAAA,UAAA,CAAYC,EAAZ,EAA4B;IAAA,IAAA,KAAA;IAAA,IAAZC,KAAY,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,CAAA,CAAI;IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA;IAC1B,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,UAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAMD,EAAN,EAAUC,KAAV,CAAA,CAAA;IAD0B,IAEnBC,MAFmB,GAEDD,KAFC,CAEnBC,MAFmB;MAEXC,EAFW,GAEDF,KAFC,CAEXE,EAFW;MAEPC,EAFO,GAEDH,KAFC,CAEPG,EAFO;IAG1B,KAAA,CAAKC,KAAL,GAAa,IAAIV,SAAJ,CAAcK,EAAd,EAAkB;MAACI,EAAE,EAAFA,EAAD;MAAKD,EAAE,EAAFA,EAAL;MAASG,OAAO,EAAE,CAACJ,MAAD;IAAlB,CAAlB,CAAb;IAH0B,OAAA,KAAA;EAI3B;;;2BAEMK,M,EAAQ;MAAA,IAAA,MAAA,GAAA,IAAA;MACb,IAAMP,EAAE,GAAG,IAAA,CAAKA,EAAhB;MAEAJ,cAAc,CAACI,EAAD,EAAK;QAACQ,WAAW,EAAED,MAAM,CAACE,YAArB;QAAmCC,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;MAA/C,CAAL,EAAmE,YAAA;QAAA,OAC/E,MAAI,CAACC,WAAL,CAAiBX,EAAjB,EAAqBO,MAArB,CAD+E;MAAA,CAAnE,CAAdX;IAGD;;;8BAEQ;MACP,IAAA,CAAKS,KAAL,CAAA,QAAA,CAAA,EAAA;MACA,IAAA,CAAKA,KAAL,GAAa,IAAb;IACD;;;gCAUWL,E,QAAiC;MAAA,IAA5BY,WAA4B,GAAA,IAAA,CAA5BA,WAA4B;QAAfH,YAAe,GAAA,IAAA,CAAfA,YAAe;MAC3CZ,KAAK,CAACG,EAAD,EAAK;QAACa,KAAK,EAAE;MAAR,CAAL,CAALhB;MACA,IAAA,CAAKQ,KAAL,CAAWS,IAAX,CAAgB;QACdC,cAAc,EAAE,IAAA,CAAKd,KAAL,CAAWc,cADb;QAEdC,QAAQ,EAAE;UACRC,OAAO,EAAEL,WADD;UAERM,OAAO,EAAE,CAACN,WAAW,CAACO,KAAb,EAAoBP,WAAW,CAACQ,MAAhC;QAFD,CAFI;QAMdC,UAAU,EAAE;UACVC,UAAU,EAAE,KADF;UAEVC,SAAS,EAAE;QAFD;MANE,CAAhB,CAAA;IAWD;;;EAzCqCzB,I;SAAnBC,U","sourcesContent":["//\n// A base render pass.\n//\n// Attribution: This class and the multipass system were inspired by\n// the THREE.js EffectComposer and *Pass classes\n\nimport {ClipSpace, withParameters, clear} from '@luma.gl/core';\nimport Pass from './pass';\n\nexport default class ScreenPass extends Pass {\n  constructor(gl, props = {}) {\n    super(gl, props);\n    const {module, fs, id} = props;\n    this.model = new ClipSpace(gl, {id, fs, modules: [module]});\n  }\n\n  render(params) {\n    const gl = this.gl;\n\n    withParameters(gl, {framebuffer: params.outputBuffer, clearColor: [0, 0, 0, 0]}, () =>\n      this._renderPass(gl, params)\n    );\n  }\n\n  delete() {\n    this.model.delete();\n    this.model = null;\n  }\n\n  // Private methods\n\n  /**\n   * Renders the pass.\n   * This is an abstract method that should be overridden.\n   * @param {Framebuffer} inputBuffer - Frame buffer that contains the result of the previous pass\n   * @param {Framebuffer} outputBuffer - Frame buffer that serves as the output render target\n   */\n  _renderPass(gl, {inputBuffer, outputBuffer}) {\n    clear(gl, {color: true});\n    this.model.draw({\n      moduleSettings: this.props.moduleSettings,\n      uniforms: {\n        texture: inputBuffer,\n        texSize: [inputBuffer.width, inputBuffer.height]\n      },\n      parameters: {\n        depthWrite: false,\n        depthTest: false\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}