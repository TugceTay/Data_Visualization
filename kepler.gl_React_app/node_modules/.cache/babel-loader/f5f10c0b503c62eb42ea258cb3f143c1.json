{"ast":null,"code":"import Buffer from './buffer';\nimport Framebuffer from './framebuffer';\nimport Texture from './texture';\nimport { assertWebGL2Context, withParameters, log } from '@luma.gl/gltools';\nimport { flipRows, scalePixels } from '../webgl-utils/typed-array-utils';\nimport { getTypedArrayFromGLType, getGLTypeFromTypedArray } from '../webgl-utils/typed-array-utils';\nimport { glFormatToComponents, glTypeToBytes } from '../webgl-utils/format-utils';\nimport { toFramebuffer } from '../webgl-utils/texture-utils';\nimport { assert } from '../utils/assert';\nexport function readPixelsToArray(source) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    sourceX = 0,\n    sourceY = 0,\n    sourceFormat = 6408\n  } = options;\n  let {\n    sourceAttachment = 36064,\n    target = null,\n    sourceWidth,\n    sourceHeight,\n    sourceType\n  } = options;\n  const {\n    framebuffer,\n    deleteFramebuffer\n  } = getFramebuffer(source);\n  assert(framebuffer);\n  const {\n    gl,\n    handle,\n    attachments\n  } = framebuffer;\n  sourceWidth = sourceWidth || framebuffer.width;\n  sourceHeight = sourceHeight || framebuffer.height;\n  if (sourceAttachment === 36064 && handle === null) {\n    sourceAttachment = 1028;\n  }\n  assert(attachments[sourceAttachment]);\n  sourceType = sourceType || attachments[sourceAttachment].type;\n  target = getPixelArray(target, sourceType, sourceFormat, sourceWidth, sourceHeight);\n  sourceType = sourceType || getGLTypeFromTypedArray(target);\n  const prevHandle = gl.bindFramebuffer(36160, handle);\n  gl.readPixels(sourceX, sourceY, sourceWidth, sourceHeight, sourceFormat, sourceType, target);\n  gl.bindFramebuffer(36160, prevHandle || null);\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n  return target;\n}\nexport function readPixelsToBuffer(source, _ref) {\n  let {\n    sourceX = 0,\n    sourceY = 0,\n    sourceFormat = 6408,\n    target = null,\n    targetByteOffset = 0,\n    sourceWidth,\n    sourceHeight,\n    sourceType\n  } = _ref;\n  const {\n    framebuffer,\n    deleteFramebuffer\n  } = getFramebuffer(source);\n  assert(framebuffer);\n  sourceWidth = sourceWidth || framebuffer.width;\n  sourceHeight = sourceHeight || framebuffer.height;\n  const gl2 = assertWebGL2Context(framebuffer.gl);\n  sourceType = sourceType || (target ? target.type : 5121);\n  if (!target) {\n    const components = glFormatToComponents(sourceFormat);\n    const byteCount = glTypeToBytes(sourceType);\n    const byteLength = targetByteOffset + sourceWidth * sourceHeight * components * byteCount;\n    target = new Buffer(gl2, {\n      byteLength,\n      accessor: {\n        type: sourceType,\n        size: components\n      }\n    });\n  }\n  target.bind({\n    target: 35051\n  });\n  withParameters(gl2, {\n    framebuffer\n  }, () => {\n    gl2.readPixels(sourceX, sourceY, sourceWidth, sourceHeight, sourceFormat, sourceType, targetByteOffset);\n  });\n  target.unbind({\n    target: 35051\n  });\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n  return target;\n}\nexport function copyToDataUrl(source) {\n  let {\n    sourceAttachment = 36064,\n    targetMaxHeight = Number.MAX_SAFE_INTEGER\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let data = readPixelsToArray(source, {\n    sourceAttachment\n  });\n  let {\n    width,\n    height\n  } = source;\n  while (height > targetMaxHeight) {\n    ({\n      data,\n      width,\n      height\n    } = scalePixels({\n      data,\n      width,\n      height\n    }));\n  }\n  flipRows({\n    data,\n    width,\n    height\n  });\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  const context = canvas.getContext('2d');\n  const imageData = context.createImageData(width, height);\n  imageData.data.set(data);\n  context.putImageData(imageData, 0, 0);\n  return canvas.toDataURL();\n}\nexport function copyToImage(source) {\n  let {\n    sourceAttachment = 36064,\n    targetImage = null\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const dataUrl = copyToDataUrl(source, {\n    sourceAttachment\n  });\n  targetImage = targetImage || new Image();\n  targetImage.src = dataUrl;\n  return targetImage;\n}\nexport function copyToTexture(source, target) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    sourceX = 0,\n    sourceY = 0,\n    targetMipmaplevel = 0,\n    targetInternalFormat = 6408\n  } = options;\n  let {\n    targetX,\n    targetY,\n    targetZ,\n    width,\n    height\n  } = options;\n  const {\n    framebuffer,\n    deleteFramebuffer\n  } = getFramebuffer(source);\n  assert(framebuffer);\n  const {\n    gl,\n    handle\n  } = framebuffer;\n  const isSubCopy = typeof targetX !== 'undefined' || typeof targetY !== 'undefined' || typeof targetZ !== 'undefined';\n  targetX = targetX || 0;\n  targetY = targetY || 0;\n  targetZ = targetZ || 0;\n  const prevHandle = gl.bindFramebuffer(36160, handle);\n  assert(target);\n  let texture = null;\n  if (target instanceof Texture) {\n    texture = target;\n    width = Number.isFinite(width) ? width : texture.width;\n    height = Number.isFinite(height) ? height : texture.height;\n    texture.bind(0);\n    target = texture.target;\n  }\n  if (!isSubCopy) {\n    gl.copyTexImage2D(target, targetMipmaplevel, targetInternalFormat, sourceX, sourceY, width, height, 0);\n  } else {\n    switch (target) {\n      case 3553:\n      case 34067:\n        gl.copyTexSubImage2D(target, targetMipmaplevel, targetX, targetY, sourceX, sourceY, width, height);\n        break;\n      case 35866:\n      case 32879:\n        const gl2 = assertWebGL2Context(gl);\n        gl2.copyTexSubImage3D(target, targetMipmaplevel, targetX, targetY, targetZ, sourceX, sourceY, width, height);\n        break;\n      default:\n    }\n  }\n  if (texture) {\n    texture.unbind();\n  }\n  gl.bindFramebuffer(36160, prevHandle || null);\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n  return texture;\n}\nexport function blit(source, target) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    sourceX0 = 0,\n    sourceY0 = 0,\n    targetX0 = 0,\n    targetY0 = 0,\n    color = true,\n    depth = false,\n    stencil = false,\n    filter = 9728\n  } = options;\n  let {\n    sourceX1,\n    sourceY1,\n    targetX1,\n    targetY1,\n    sourceAttachment = 36064,\n    mask = 0\n  } = options;\n  const {\n    framebuffer: srcFramebuffer,\n    deleteFramebuffer: deleteSrcFramebuffer\n  } = getFramebuffer(source);\n  const {\n    framebuffer: dstFramebuffer,\n    deleteFramebuffer: deleteDstFramebuffer\n  } = getFramebuffer(target);\n  assert(srcFramebuffer);\n  assert(dstFramebuffer);\n  const {\n    gl,\n    handle,\n    width,\n    height,\n    readBuffer\n  } = dstFramebuffer;\n  const gl2 = assertWebGL2Context(gl);\n  if (!srcFramebuffer.handle && sourceAttachment === 36064) {\n    sourceAttachment = 1028;\n  }\n  if (color) {\n    mask |= 16384;\n  }\n  if (depth) {\n    mask |= 256;\n  }\n  if (stencil) {\n    mask |= 1024;\n  }\n  if (deleteSrcFramebuffer || deleteDstFramebuffer) {\n    if (mask & (256 | 1024)) {\n      mask = 16384;\n      log.warn('Blitting from or into a Texture object, forcing mask to GL.COLOR_BUFFER_BIT')();\n    }\n  }\n  assert(mask);\n  sourceX1 = sourceX1 === undefined ? srcFramebuffer.width : sourceX1;\n  sourceY1 = sourceY1 === undefined ? srcFramebuffer.height : sourceY1;\n  targetX1 = targetX1 === undefined ? width : targetX1;\n  targetY1 = targetY1 === undefined ? height : targetY1;\n  const prevDrawHandle = gl.bindFramebuffer(36009, handle);\n  const prevReadHandle = gl.bindFramebuffer(36008, srcFramebuffer.handle);\n  gl2.readBuffer(sourceAttachment);\n  gl2.blitFramebuffer(sourceX0, sourceY0, sourceX1, sourceY1, targetX0, targetY0, targetX1, targetY1, mask, filter);\n  gl2.readBuffer(readBuffer);\n  gl2.bindFramebuffer(36008, prevReadHandle || null);\n  gl2.bindFramebuffer(36009, prevDrawHandle || null);\n  if (deleteSrcFramebuffer) {\n    srcFramebuffer.delete();\n  }\n  if (deleteDstFramebuffer) {\n    dstFramebuffer.delete();\n  }\n  return dstFramebuffer;\n}\nfunction getFramebuffer(source) {\n  if (!(source instanceof Framebuffer)) {\n    return {\n      framebuffer: toFramebuffer(source),\n      deleteFramebuffer: true\n    };\n  }\n  return {\n    framebuffer: source,\n    deleteFramebuffer: false\n  };\n}\nfunction getPixelArray(pixelArray, type, format, width, height) {\n  if (pixelArray) {\n    return pixelArray;\n  }\n  type = type || 5121;\n  const ArrayType = getTypedArrayFromGLType(type, {\n    clamped: false\n  });\n  const components = glFormatToComponents(format);\n  return new ArrayType(width * height * components);\n}","map":{"version":3,"sources":["../../../src/classes/copy-and-blit.js"],"names":["Buffer","Framebuffer","Texture","assertWebGL2Context","withParameters","log","flipRows","scalePixels","getTypedArrayFromGLType","getGLTypeFromTypedArray","glFormatToComponents","glTypeToBytes","toFramebuffer","assert","readPixelsToArray","source","options","sourceX","sourceY","sourceFormat","sourceAttachment","target","sourceWidth","sourceHeight","sourceType","framebuffer","deleteFramebuffer","getFramebuffer","gl","handle","attachments","width","height","type","getPixelArray","prevHandle","bindFramebuffer","readPixels","delete","readPixelsToBuffer","targetByteOffset","gl2","components","byteCount","byteLength","accessor","size","bind","unbind","copyToDataUrl","targetMaxHeight","Number","MAX_SAFE_INTEGER","data","canvas","document","createElement","context","getContext","imageData","createImageData","set","putImageData","toDataURL","copyToImage","targetImage","dataUrl","Image","src","copyToTexture","targetMipmaplevel","targetInternalFormat","targetX","targetY","targetZ","isSubCopy","texture","isFinite","copyTexImage2D","copyTexSubImage2D","copyTexSubImage3D","blit","sourceX0","sourceY0","targetX0","targetY0","color","depth","stencil","filter","sourceX1","sourceY1","targetX1","targetY1","mask","srcFramebuffer","deleteSrcFramebuffer","dstFramebuffer","deleteDstFramebuffer","readBuffer","warn","undefined","prevDrawHandle","prevReadHandle","blitFramebuffer","pixelArray","format","ArrayType","clamped"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport Buffer from './buffer';\nimport Framebuffer from './framebuffer';\nimport Texture from './texture';\nimport {assertWebGL2Context, withParameters, log} from '@luma.gl/gltools';\nimport {flipRows, scalePixels} from '../webgl-utils/typed-array-utils';\nimport {getTypedArrayFromGLType, getGLTypeFromTypedArray} from '../webgl-utils/typed-array-utils';\nimport {glFormatToComponents, glTypeToBytes} from '../webgl-utils/format-utils';\nimport {toFramebuffer} from '../webgl-utils/texture-utils';\nimport {assert} from '../utils/assert';\n\n// NOTE: Slow requires roundtrip to GPU\n// Copies data from a Framebuffer or a Texture object into ArrayBuffer object.\n// App can provide targetPixelArray or have it auto allocated by this method\n// @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n//  newly allocated by this method unless provided by app.\nexport function readPixelsToArray(source, options = {}) {\n  const {sourceX = 0, sourceY = 0, sourceFormat = GL.RGBA} = options;\n  let {\n    sourceAttachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    target = null,\n    // following parameters are auto deduced if not provided\n    sourceWidth,\n    sourceHeight,\n    sourceType\n  } = options;\n\n  const {framebuffer, deleteFramebuffer} = getFramebuffer(source);\n  assert(framebuffer);\n  const {gl, handle, attachments} = framebuffer;\n  sourceWidth = sourceWidth || framebuffer.width;\n  sourceHeight = sourceHeight || framebuffer.height;\n\n  // TODO - Set and unset gl.readBuffer\n  if (sourceAttachment === GL.COLOR_ATTACHMENT0 && handle === null) {\n    sourceAttachment = GL.FRONT;\n  }\n\n  assert(attachments[sourceAttachment]);\n\n  // Deduce the type from color attachment if not provided.\n  sourceType = sourceType || attachments[sourceAttachment].type;\n\n  // Deduce type and allocated pixelArray if needed\n  target = getPixelArray(target, sourceType, sourceFormat, sourceWidth, sourceHeight);\n\n  // Pixel array available, if necessary, deduce type from it.\n  sourceType = sourceType || getGLTypeFromTypedArray(target);\n\n  const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  gl.readPixels(sourceX, sourceY, sourceWidth, sourceHeight, sourceFormat, sourceType, target);\n  // @ts-ignore\n  gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n  return target;\n}\n\n// NOTE: doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.\n// Copies data from a Framebuffer or a Texture object into a Buffer object.\nexport function readPixelsToBuffer(\n  source,\n  {\n    sourceX = 0,\n    sourceY = 0,\n    sourceFormat = GL.RGBA,\n    target = null, // A new Buffer object is created when not provided.\n    targetByteOffset = 0, // byte offset in buffer object\n    // following parameters are auto deduced if not provided\n    sourceWidth,\n    sourceHeight,\n    sourceType\n  }\n) {\n  const {framebuffer, deleteFramebuffer} = getFramebuffer(source);\n  assert(framebuffer);\n  sourceWidth = sourceWidth || framebuffer.width;\n  sourceHeight = sourceHeight || framebuffer.height;\n\n  // Asynchronus read (PIXEL_PACK_BUFFER) is WebGL2 only feature\n  const gl2 = assertWebGL2Context(framebuffer.gl);\n\n  // deduce type if not available.\n  sourceType = sourceType || (target ? target.type : GL.UNSIGNED_BYTE);\n\n  if (!target) {\n    // Create new buffer with enough size\n    const components = glFormatToComponents(sourceFormat);\n    const byteCount = glTypeToBytes(sourceType);\n    const byteLength = targetByteOffset + sourceWidth * sourceHeight * components * byteCount;\n    target = new Buffer(gl2, {byteLength, accessor: {type: sourceType, size: components}});\n  }\n\n  target.bind({target: GL.PIXEL_PACK_BUFFER});\n  withParameters(gl2, {framebuffer}, () => {\n    gl2.readPixels(\n      sourceX,\n      sourceY,\n      sourceWidth,\n      sourceHeight,\n      sourceFormat,\n      sourceType,\n      targetByteOffset\n    );\n  });\n  target.unbind({target: GL.PIXEL_PACK_BUFFER});\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n\n  return target;\n}\n\n// Reads pixels from a Framebuffer or Texture object to a dataUrl\nexport function copyToDataUrl(\n  source,\n  {\n    sourceAttachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    targetMaxHeight = Number.MAX_SAFE_INTEGER\n  } = {}\n) {\n  let data = readPixelsToArray(source, {sourceAttachment});\n\n  // Scale down\n  let {width, height} = source;\n  while (height > targetMaxHeight) {\n    ({data, width, height} = scalePixels({data, width, height}));\n  }\n\n  // Flip to top down coordinate system\n  flipRows({data, width, height});\n\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  const context = canvas.getContext('2d');\n\n  // Copy the pixels to a 2D canvas\n  const imageData = context.createImageData(width, height);\n  imageData.data.set(data);\n  context.putImageData(imageData, 0, 0);\n\n  return canvas.toDataURL();\n}\n\n// Reads pixels from a Framebuffer or Texture object into an HTML Image\nexport function copyToImage(\n  source,\n  {\n    sourceAttachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    targetImage = null\n  } = {}\n) {\n  const dataUrl = copyToDataUrl(source, {sourceAttachment});\n  targetImage = targetImage || new Image();\n  targetImage.src = dataUrl;\n  return targetImage;\n}\n\n// Copy a rectangle from a Framebuffer or Texture object into a texture (at an offset)\n// eslint-disable-next-line complexity, max-statements\nexport function copyToTexture(source, target, options = {}) {\n  const {\n    sourceX = 0,\n    sourceY = 0,\n    // attachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    targetMipmaplevel = 0,\n    targetInternalFormat = GL.RGBA\n  } = options;\n  let {\n    targetX,\n    targetY,\n    targetZ,\n    width, // defaults to target width\n    height // defaults to target height\n  } = options;\n\n  const {framebuffer, deleteFramebuffer} = getFramebuffer(source);\n  assert(framebuffer);\n  const {gl, handle} = framebuffer;\n  const isSubCopy =\n    typeof targetX !== 'undefined' ||\n    typeof targetY !== 'undefined' ||\n    typeof targetZ !== 'undefined';\n  targetX = targetX || 0;\n  targetY = targetY || 0;\n  targetZ = targetZ || 0;\n  const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  // TODO - support gl.readBuffer (WebGL2 only)\n  // const prevBuffer = gl.readBuffer(attachment);\n  assert(target);\n  let texture = null;\n  if (target instanceof Texture) {\n    texture = target;\n    width = Number.isFinite(width) ? width : texture.width;\n    height = Number.isFinite(height) ? height : texture.height;\n    texture.bind(0);\n    target = texture.target;\n  }\n\n  if (!isSubCopy) {\n    gl.copyTexImage2D(\n      target,\n      targetMipmaplevel,\n      targetInternalFormat,\n      sourceX,\n      sourceY,\n      width,\n      height,\n      0 /* border must be 0 */\n    );\n  } else {\n    switch (target) {\n      case GL.TEXTURE_2D:\n      case GL.TEXTURE_CUBE_MAP:\n        gl.copyTexSubImage2D(\n          target,\n          targetMipmaplevel,\n          targetX,\n          targetY,\n          sourceX,\n          sourceY,\n          width,\n          height\n        );\n        break;\n      case GL.TEXTURE_2D_ARRAY:\n      case GL.TEXTURE_3D:\n        const gl2 = assertWebGL2Context(gl);\n        gl2.copyTexSubImage3D(\n          target,\n          targetMipmaplevel,\n          targetX,\n          targetY,\n          targetZ,\n          sourceX,\n          sourceY,\n          width,\n          height\n        );\n        break;\n      default:\n    }\n  }\n  if (texture) {\n    texture.unbind();\n  }\n  // @ts-ignore\n  gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n  return texture;\n}\n\n// NOTE: WEBLG2 only\n// Copies a rectangle of pixels between Framebuffer or Texture objects\n// eslint-disable-next-line max-statements, complexity\nexport function blit(source, target, options = {}) {\n  const {\n    sourceX0 = 0,\n    sourceY0 = 0,\n    targetX0 = 0,\n    targetY0 = 0,\n    color = true,\n    depth = false,\n    stencil = false,\n    filter = GL.NEAREST\n  } = options;\n\n  let {\n    sourceX1,\n    sourceY1,\n    targetX1,\n    targetY1,\n    sourceAttachment = GL.COLOR_ATTACHMENT0,\n    mask = 0\n  } = options;\n\n  const {framebuffer: srcFramebuffer, deleteFramebuffer: deleteSrcFramebuffer} = getFramebuffer(\n    source\n  );\n  const {framebuffer: dstFramebuffer, deleteFramebuffer: deleteDstFramebuffer} = getFramebuffer(\n    target\n  );\n\n  assert(srcFramebuffer);\n  assert(dstFramebuffer);\n  // @ts-ignore\n  const {gl, handle, width, height, readBuffer} = dstFramebuffer;\n  const gl2 = assertWebGL2Context(gl);\n\n  if (!srcFramebuffer.handle && sourceAttachment === GL.COLOR_ATTACHMENT0) {\n    sourceAttachment = GL.FRONT;\n  }\n\n  if (color) {\n    mask |= GL.COLOR_BUFFER_BIT;\n  }\n  if (depth) {\n    mask |= GL.DEPTH_BUFFER_BIT;\n  }\n  if (stencil) {\n    mask |= GL.STENCIL_BUFFER_BIT;\n  }\n\n  if (deleteSrcFramebuffer || deleteDstFramebuffer) {\n    // Either source or destiantion was a texture object, which is wrapped in a Framebuffer objecgt as color attachment.\n    // Overwrite the mask to `COLOR_BUFFER_BIT`\n    if (mask & (GL.DEPTH_BUFFER_BIT | GL.STENCIL_BUFFER_BIT)) {\n      mask = GL.COLOR_BUFFER_BIT;\n      log.warn('Blitting from or into a Texture object, forcing mask to GL.COLOR_BUFFER_BIT')();\n    }\n  }\n  assert(mask);\n\n  sourceX1 = sourceX1 === undefined ? srcFramebuffer.width : sourceX1;\n  sourceY1 = sourceY1 === undefined ? srcFramebuffer.height : sourceY1;\n  targetX1 = targetX1 === undefined ? width : targetX1;\n  targetY1 = targetY1 === undefined ? height : targetY1;\n\n  const prevDrawHandle = gl.bindFramebuffer(GL.DRAW_FRAMEBUFFER, handle);\n  const prevReadHandle = gl.bindFramebuffer(GL.READ_FRAMEBUFFER, srcFramebuffer.handle);\n  gl2.readBuffer(sourceAttachment);\n  gl2.blitFramebuffer(\n    sourceX0,\n    sourceY0,\n    sourceX1,\n    sourceY1,\n    targetX0,\n    targetY0,\n    targetX1,\n    targetY1,\n    mask,\n    filter\n  );\n  gl2.readBuffer(readBuffer);\n  // @ts-ignore\n  gl2.bindFramebuffer(GL.READ_FRAMEBUFFER, prevReadHandle || null);\n  // @ts-ignore\n  gl2.bindFramebuffer(GL.DRAW_FRAMEBUFFER, prevDrawHandle || null);\n  if (deleteSrcFramebuffer) {\n    srcFramebuffer.delete();\n  }\n  if (deleteDstFramebuffer) {\n    dstFramebuffer.delete();\n  }\n\n  return dstFramebuffer;\n}\n\n// Helper methods\n\nfunction getFramebuffer(source) {\n  if (!(source instanceof Framebuffer)) {\n    return {framebuffer: toFramebuffer(source), deleteFramebuffer: true};\n  }\n  return {framebuffer: source, deleteFramebuffer: false};\n}\n\nfunction getPixelArray(pixelArray, type, format, width, height) {\n  if (pixelArray) {\n    return pixelArray;\n  }\n  // Allocate pixel array if not already available, using supplied type\n  type = type || GL.UNSIGNED_BYTE;\n  const ArrayType = getTypedArrayFromGLType(type, {clamped: false});\n  const components = glFormatToComponents(format);\n  // TODO - check for composite type (components = 1).\n  return new ArrayType(width * height * components);\n}\n"]},"metadata":{},"sourceType":"module"}