{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _parameters;\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport { getBounds, boundsContain, packVertices, scaleToAspectRatio, getTextureCoordinates, getTextureParams } from './heatmap-layer-utils';\nimport { Buffer, Texture2D, Transform, getParameters, FEATURES, hasFeatures, isWebGL2 } from '@luma.gl/core';\nimport { AttributeManager, COORDINATE_SYSTEM, log, _mergeShaders as mergeShaders, project32 } from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport AggregationLayer from '../aggregation-layer';\nimport { defaultColorRange, colorRangeToFlatArray } from '../utils/color-utils';\nimport weights_vs from './weights-vs.glsl';\nimport weights_fs from './weights-fs.glsl';\nimport vs_max from './max-vs.glsl';\nvar RESOLUTION = 2;\nvar SIZE_2K = 2048;\nvar ZOOM_DEBOUNCE = 500;\nvar TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: (_parameters = {}, _defineProperty(_parameters, 10240, 9729), _defineProperty(_parameters, 10241, 9729), _defineProperty(_parameters, 10242, 33071), _defineProperty(_parameters, 10243, 33071), _parameters),\n  dataFormat: 6408\n};\nvar DEFAULT_COLOR_DOMAIN = [0, 0];\nvar defaultProps = {\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  intensity: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusPixels: {\n    type: 'number',\n    min: 1,\n    max: 100,\n    value: 50\n  },\n  colorRange: defaultColorRange,\n  threshold: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 0.05\n  },\n  colorDomain: {\n    type: 'array',\n    value: null,\n    optional: true\n  }\n};\nvar REQUIRED_FEATURES = [FEATURES.BLEND_EQUATION_MINMAX, FEATURES.TEXTURE_FLOAT];\nvar DIMENSIONS = {\n  data: {\n    props: ['radiusPixels']\n  }\n};\nvar HeatmapLayer = function (_AggregationLayer) {\n  _inherits(HeatmapLayer, _AggregationLayer);\n  function HeatmapLayer() {\n    _classCallCheck(this, HeatmapLayer);\n    return _possibleConstructorReturn(this, _getPrototypeOf(HeatmapLayer).apply(this, arguments));\n  }\n  _createClass(HeatmapLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var gl = this.context.gl;\n      if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n        this.setState({\n          supported: false\n        });\n        log.error(\"HeatmapLayer: \".concat(this.id, \" is not supported on this browser\"))();\n        return;\n      }\n      _get(_getPrototypeOf(HeatmapLayer.prototype), \"initializeState\", this).call(this, DIMENSIONS);\n      this.setState({\n        supported: true\n      });\n      this._setupTextureParams();\n      this._setupAttributes();\n      this._setupResources();\n    }\n  }, {\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref) {\n      var changeFlags = _ref.changeFlags;\n      return changeFlags.somethingChanged;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      if (!this.state.supported) {\n        return;\n      }\n      _get(_getPrototypeOf(HeatmapLayer.prototype), \"updateState\", this).call(this, opts);\n      var props = opts.props,\n        oldProps = opts.oldProps;\n      var changeFlags = this._getChangeFlags(opts);\n      if (changeFlags.viewportChanged) {\n        changeFlags.boundsChanged = this._updateBounds();\n      }\n      if (changeFlags.dataChanged || changeFlags.boundsChanged) {\n        this._updateWeightmap();\n      } else if (changeFlags.viewportZoomChanged) {\n        this._debouncedUpdateWeightmap();\n      }\n      if (props.colorRange !== oldProps.colorRange) {\n        this._updateColorTexture(opts);\n      }\n      if (changeFlags.viewportChanged) {\n        this._updateTextureRenderingBounds();\n      }\n      if (oldProps.colorDomain !== props.colorDomain || changeFlags.viewportChanged) {\n        var viewport = this.context.viewport;\n        var weightsScale = this.state.weightsScale;\n        var domainScale = (viewport ? 1024 / viewport.scale : 1) * weightsScale;\n        var colorDomain = props.colorDomain ? props.colorDomain.map(function (x) {\n          return x * domainScale;\n        }) : DEFAULT_COLOR_DOMAIN;\n        if (colorDomain[1] > 0 && weightsScale < 1) {\n          var max = Math.min(colorDomain[1], 1);\n          colorDomain[0] *= max / colorDomain[1];\n          colorDomain[1] = max;\n        }\n        this.setState({\n          colorDomain: colorDomain\n        });\n      }\n      this.setState({\n        zoom: opts.context.viewport.zoom\n      });\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      if (!this.state.supported) {\n        return [];\n      }\n      var _this$state = this.state,\n        weightsTexture = _this$state.weightsTexture,\n        triPositionBuffer = _this$state.triPositionBuffer,\n        triTexCoordBuffer = _this$state.triTexCoordBuffer,\n        maxWeightsTexture = _this$state.maxWeightsTexture,\n        colorTexture = _this$state.colorTexture,\n        colorDomain = _this$state.colorDomain;\n      var _this$props = this.props,\n        updateTriggers = _this$props.updateTriggers,\n        intensity = _this$props.intensity,\n        threshold = _this$props.threshold;\n      var TriangleLayerClass = this.getSubLayerClass('triangle', TriangleLayer);\n      return new TriangleLayerClass(this.getSubLayerProps({\n        id: 'triangle-layer',\n        updateTriggers: updateTriggers\n      }), {\n        data: {\n          attributes: {\n            positions: triPositionBuffer,\n            texCoords: triTexCoordBuffer\n          }\n        },\n        vertexCount: 4,\n        maxTexture: maxWeightsTexture,\n        colorTexture: colorTexture,\n        texture: weightsTexture,\n        intensity: intensity,\n        threshold: threshold,\n        colorDomain: colorDomain\n      });\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      _get(_getPrototypeOf(HeatmapLayer.prototype), \"finalizeState\", this).call(this);\n      var _this$state2 = this.state,\n        weightsTransform = _this$state2.weightsTransform,\n        weightsTexture = _this$state2.weightsTexture,\n        maxWeightTransform = _this$state2.maxWeightTransform,\n        maxWeightsTexture = _this$state2.maxWeightsTexture,\n        triPositionBuffer = _this$state2.triPositionBuffer,\n        triTexCoordBuffer = _this$state2.triTexCoordBuffer,\n        colorTexture = _this$state2.colorTexture,\n        updateTimer = _this$state2.updateTimer;\n      weightsTransform && weightsTransform[\"delete\"]();\n      weightsTexture && weightsTexture[\"delete\"]();\n      maxWeightTransform && maxWeightTransform[\"delete\"]();\n      maxWeightsTexture && maxWeightsTexture[\"delete\"]();\n      triPositionBuffer && triPositionBuffer[\"delete\"]();\n      triTexCoordBuffer && triTexCoordBuffer[\"delete\"]();\n      colorTexture && colorTexture[\"delete\"]();\n      updateTimer && clearTimeout(updateTimer);\n    }\n  }, {\n    key: \"_getAttributeManager\",\n    value: function _getAttributeManager() {\n      return new AttributeManager(this.context.gl, {\n        id: this.props.id,\n        stats: this.context.stats\n      });\n    }\n  }, {\n    key: \"_getChangeFlags\",\n    value: function _getChangeFlags(opts) {\n      var changeFlags = {};\n      var dimensions = this.state.dimensions;\n      changeFlags.dataChanged = this.isAttributeChanged() || this.isAggregationDirty(opts, {\n        compareAll: true,\n        dimension: dimensions.data\n      });\n      changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n      var zoom = this.state.zoom;\n      if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n        changeFlags.viewportZoomChanged = true;\n      }\n      return changeFlags;\n    }\n  }, {\n    key: \"_createTextures\",\n    value: function _createTextures() {\n      var gl = this.context.gl;\n      var _this$state3 = this.state,\n        textureSize = _this$state3.textureSize,\n        format = _this$state3.format,\n        type = _this$state3.type;\n      this.setState({\n        weightsTexture: new Texture2D(gl, _objectSpread({\n          width: textureSize,\n          height: textureSize,\n          format: format,\n          type: type\n        }, TEXTURE_OPTIONS)),\n        maxWeightsTexture: new Texture2D(gl, _objectSpread({\n          format: format,\n          type: type\n        }, TEXTURE_OPTIONS))\n      });\n    }\n  }, {\n    key: \"_setupAttributes\",\n    value: function _setupAttributes() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add({\n        positions: {\n          size: 3,\n          accessor: 'getPosition'\n        },\n        weights: {\n          size: 1,\n          accessor: 'getWeight'\n        }\n      });\n      this.setState({\n        positionAttributeName: 'positions'\n      });\n    }\n  }, {\n    key: \"_setupTextureParams\",\n    value: function _setupTextureParams() {\n      var gl = this.context.gl;\n      var textureSize = Math.min(SIZE_2K, getParameters(gl, 3379));\n      var floatTargetSupport = hasFeatures(gl, FEATURES.COLOR_ATTACHMENT_RGBA32F);\n      var _getTextureParams = getTextureParams({\n          gl: gl,\n          floatTargetSupport: floatTargetSupport\n        }),\n        format = _getTextureParams.format,\n        type = _getTextureParams.type;\n      var weightsScale = floatTargetSupport ? 1 : 1 / 255;\n      this.setState({\n        textureSize: textureSize,\n        format: format,\n        type: type,\n        weightsScale: weightsScale\n      });\n      if (!floatTargetSupport) {\n        log.warn(\"HeatmapLayer: \".concat(this.id, \" rendering to float texture not supported, fallingback to low precession format\"))();\n      }\n    }\n  }, {\n    key: \"_createWeightsTransform\",\n    value: function _createWeightsTransform() {\n      var shaderOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var gl = this.context.gl;\n      var weightsTransform = this.state.weightsTransform;\n      var weightsTexture = this.state.weightsTexture;\n      if (weightsTransform) {\n        weightsTransform[\"delete\"]();\n      }\n      var shaders = mergeShaders({\n        vs: weights_vs,\n        _fs: weights_fs,\n        modules: [project32]\n      }, shaderOptions);\n      weightsTransform = new Transform(gl, _objectSpread({\n        id: \"\".concat(this.id, \"-weights-transform\"),\n        elementCount: 1,\n        _targetTexture: weightsTexture,\n        _targetTextureVarying: 'weightsTexture'\n      }, shaders));\n      this.setState({\n        weightsTransform: weightsTransform\n      });\n    }\n  }, {\n    key: \"_setupResources\",\n    value: function _setupResources() {\n      var gl = this.context.gl;\n      this._createTextures();\n      var _this$state4 = this.state,\n        textureSize = _this$state4.textureSize,\n        weightsTexture = _this$state4.weightsTexture,\n        maxWeightsTexture = _this$state4.maxWeightsTexture;\n      this._createWeightsTransform();\n      var maxWeightTransform = new Transform(gl, {\n        id: \"\".concat(this.id, \"-max-weights-transform\"),\n        _sourceTextures: {\n          inTexture: weightsTexture\n        },\n        _targetTexture: maxWeightsTexture,\n        _targetTextureVarying: 'outTexture',\n        vs: vs_max,\n        elementCount: textureSize * textureSize\n      });\n      this.setState({\n        weightsTexture: weightsTexture,\n        maxWeightsTexture: maxWeightsTexture,\n        maxWeightTransform: maxWeightTransform,\n        zoom: null,\n        triPositionBuffer: new Buffer(gl, {\n          byteLength: 48,\n          accessor: {\n            size: 3\n          }\n        }),\n        triTexCoordBuffer: new Buffer(gl, {\n          byteLength: 48,\n          accessor: {\n            size: 2\n          }\n        })\n      });\n    }\n  }, {\n    key: \"updateShaders\",\n    value: function updateShaders(shaderOptions) {\n      this._createWeightsTransform(shaderOptions);\n    }\n  }, {\n    key: \"_updateMaxWeightValue\",\n    value: function _updateMaxWeightValue() {\n      var maxWeightTransform = this.state.maxWeightTransform;\n      maxWeightTransform.run({\n        parameters: {\n          blend: true,\n          depthTest: false,\n          blendFunc: [1, 1],\n          blendEquation: 32776\n        }\n      });\n    }\n  }, {\n    key: \"_updateBounds\",\n    value: function _updateBounds() {\n      var forceUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var viewport = this.context.viewport;\n      var viewportCorners = [viewport.unproject([0, 0]), viewport.unproject([viewport.width, 0]), viewport.unproject([viewport.width, viewport.height]), viewport.unproject([0, viewport.height])];\n      var visibleWorldBounds = getBounds(viewportCorners);\n      var newState = {\n        visibleWorldBounds: visibleWorldBounds,\n        viewportCorners: viewportCorners\n      };\n      var boundsChanged = false;\n      if (forceUpdate || !this.state.worldBounds || !boundsContain(this.state.worldBounds, visibleWorldBounds)) {\n        var scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n        var worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n        if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n          worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n          worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n          worldBounds[0] = Math.max(worldBounds[0], -360);\n          worldBounds[2] = Math.min(worldBounds[2], 360);\n        }\n        var normalizedCommonBounds = this._worldToCommonBounds(worldBounds);\n        newState.worldBounds = worldBounds;\n        newState.normalizedCommonBounds = normalizedCommonBounds;\n        boundsChanged = true;\n      }\n      this.setState(newState);\n      return boundsChanged;\n    }\n  }, {\n    key: \"_updateTextureRenderingBounds\",\n    value: function _updateTextureRenderingBounds() {\n      var _this$state5 = this.state,\n        triPositionBuffer = _this$state5.triPositionBuffer,\n        triTexCoordBuffer = _this$state5.triTexCoordBuffer,\n        normalizedCommonBounds = _this$state5.normalizedCommonBounds,\n        viewportCorners = _this$state5.viewportCorners;\n      var viewport = this.context.viewport;\n      triPositionBuffer.subData(packVertices(viewportCorners, 3));\n      var textureBounds = viewportCorners.map(function (p) {\n        return getTextureCoordinates(viewport.projectPosition(p), normalizedCommonBounds);\n      });\n      triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n    }\n  }, {\n    key: \"_updateColorTexture\",\n    value: function _updateColorTexture(opts) {\n      var colorRange = opts.props.colorRange;\n      var colorTexture = this.state.colorTexture;\n      var colors = colorRangeToFlatArray(colorRange, true);\n      if (colorTexture) {\n        colorTexture.setImageData({\n          data: colors,\n          width: colorRange.length\n        });\n      } else {\n        colorTexture = new Texture2D(this.context.gl, _objectSpread({\n          data: colors,\n          width: colorRange.length,\n          height: 1,\n          format: isWebGL2(this.context.gl) ? 34836 : 6408,\n          type: 5126\n        }, TEXTURE_OPTIONS));\n      }\n      this.setState({\n        colorTexture: colorTexture\n      });\n    }\n  }, {\n    key: \"_updateWeightmap\",\n    value: function _updateWeightmap() {\n      var _weightsTexture$setPa;\n      var radiusPixels = this.props.radiusPixels;\n      var _this$state6 = this.state,\n        weightsTransform = _this$state6.weightsTransform,\n        worldBounds = _this$state6.worldBounds,\n        textureSize = _this$state6.textureSize,\n        weightsTexture = _this$state6.weightsTexture,\n        weightsScale = _this$state6.weightsScale;\n      var commonBounds = this._worldToCommonBounds(worldBounds, {\n        useLayerCoordinateSystem: true\n      });\n      var uniforms = {\n        radiusPixels: radiusPixels,\n        commonBounds: commonBounds,\n        textureWidth: textureSize,\n        weightsScale: weightsScale\n      };\n      weightsTransform.update({\n        elementCount: this.getNumInstances()\n      });\n      weightsTransform.run({\n        uniforms: uniforms,\n        parameters: {\n          blend: true,\n          depthTest: false,\n          blendFunc: [1, 1],\n          blendEquation: 32774\n        },\n        clearRenderTarget: true,\n        attributes: this.getAttributes(),\n        moduleSettings: this.getModuleSettings()\n      });\n      this._updateMaxWeightValue();\n      weightsTexture.setParameters((_weightsTexture$setPa = {}, _defineProperty(_weightsTexture$setPa, 10240, 9729), _defineProperty(_weightsTexture$setPa, 10241, 9729), _weightsTexture$setPa));\n      this.setState({\n        lastUpdate: Date.now()\n      });\n    }\n  }, {\n    key: \"_debouncedUpdateWeightmap\",\n    value: function _debouncedUpdateWeightmap() {\n      var fromTimer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var updateTimer = this.state.updateTimer;\n      var timeSinceLastUpdate = Date.now() - this.state.lastUpdate;\n      if (fromTimer) {\n        updateTimer = null;\n      }\n      if (timeSinceLastUpdate >= ZOOM_DEBOUNCE) {\n        this._updateBounds(true);\n        this._updateWeightmap();\n        this._updateTextureRenderingBounds();\n      } else if (!updateTimer) {\n        updateTimer = setTimeout(this._debouncedUpdateWeightmap.bind(this, true), ZOOM_DEBOUNCE - timeSinceLastUpdate);\n      }\n      this.setState({\n        updateTimer: updateTimer\n      });\n    }\n  }, {\n    key: \"_worldToCommonBounds\",\n    value: function _worldToCommonBounds(worldBounds) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _opts$useLayerCoordin = opts.useLayerCoordinateSystem,\n        useLayerCoordinateSystem = _opts$useLayerCoordin === void 0 ? false : _opts$useLayerCoordin;\n      var _worldBounds = _slicedToArray(worldBounds, 4),\n        minLong = _worldBounds[0],\n        minLat = _worldBounds[1],\n        maxLong = _worldBounds[2],\n        maxLat = _worldBounds[3];\n      var viewport = this.context.viewport;\n      var textureSize = this.state.textureSize;\n      var size = textureSize * RESOLUTION / viewport.scale;\n      var bottomLeftCommon;\n      var topRightCommon;\n      if (useLayerCoordinateSystem) {\n        bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);\n        topRightCommon = this.projectPosition([maxLong, maxLat, 0]);\n      } else {\n        bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);\n        topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);\n      }\n      var commonBounds = bottomLeftCommon.slice(0, 2).concat(topRightCommon.slice(0, 2));\n      commonBounds = scaleToAspectRatio(commonBounds, size, size);\n      return commonBounds;\n    }\n  }, {\n    key: \"_commonToWorldBounds\",\n    value: function _commonToWorldBounds(commonBounds) {\n      var _commonBounds = _slicedToArray(commonBounds, 4),\n        xMin = _commonBounds[0],\n        yMin = _commonBounds[1],\n        xMax = _commonBounds[2],\n        yMax = _commonBounds[3];\n      var viewport = this.context.viewport;\n      var bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);\n      var topRightWorld = viewport.unprojectPosition([xMax, yMax]);\n      return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));\n    }\n  }]);\n  return HeatmapLayer;\n}(AggregationLayer);\nexport { HeatmapLayer as default };\nHeatmapLayer.layerName = 'HeatmapLayer';\nHeatmapLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/heatmap-layer/heatmap-layer.js"],"names":["getBounds","boundsContain","packVertices","scaleToAspectRatio","getTextureCoordinates","getTextureParams","Buffer","Texture2D","Transform","getParameters","FEATURES","hasFeatures","isWebGL2","AttributeManager","COORDINATE_SYSTEM","log","_mergeShaders","mergeShaders","project32","TriangleLayer","AggregationLayer","defaultColorRange","colorRangeToFlatArray","weights_vs","weights_fs","vs_max","RESOLUTION","SIZE_2K","ZOOM_DEBOUNCE","TEXTURE_OPTIONS","mipmaps","parameters","dataFormat","DEFAULT_COLOR_DOMAIN","defaultProps","getPosition","type","value","x","position","getWeight","intensity","min","radiusPixels","max","colorRange","threshold","colorDomain","optional","REQUIRED_FEATURES","BLEND_EQUATION_MINMAX","TEXTURE_FLOAT","DIMENSIONS","data","props","HeatmapLayer","gl","context","setState","supported","error","id","_setupTextureParams","_setupAttributes","_setupResources","changeFlags","somethingChanged","opts","state","oldProps","_getChangeFlags","viewportChanged","boundsChanged","_updateBounds","dataChanged","_updateWeightmap","viewportZoomChanged","_debouncedUpdateWeightmap","_updateColorTexture","_updateTextureRenderingBounds","viewport","weightsScale","domainScale","scale","map","Math","zoom","weightsTexture","triPositionBuffer","triTexCoordBuffer","maxWeightsTexture","colorTexture","updateTriggers","TriangleLayerClass","getSubLayerClass","getSubLayerProps","attributes","positions","texCoords","vertexCount","maxTexture","texture","weightsTransform","maxWeightTransform","updateTimer","clearTimeout","stats","dimensions","isAttributeChanged","isAggregationDirty","compareAll","dimension","textureSize","format","width","height","attributeManager","getAttributeManager","add","size","accessor","weights","positionAttributeName","floatTargetSupport","COLOR_ATTACHMENT_RGBA32F","warn","shaderOptions","shaders","vs","_fs","modules","elementCount","_targetTexture","_targetTextureVarying","_createTextures","_createWeightsTransform","_sourceTextures","inTexture","byteLength","run","blend","depthTest","blendFunc","blendEquation","forceUpdate","viewportCorners","unproject","visibleWorldBounds","newState","worldBounds","scaledCommonBounds","_worldToCommonBounds","_commonToWorldBounds","coordinateSystem","LNGLAT","normalizedCommonBounds","subData","textureBounds","projectPosition","p","colors","setImageData","length","commonBounds","useLayerCoordinateSystem","uniforms","textureWidth","update","getNumInstances","clearRenderTarget","getAttributes","moduleSettings","getModuleSettings","_updateMaxWeightValue","setParameters","lastUpdate","Date","now","fromTimer","timeSinceLastUpdate","setTimeout","bind","minLong","minLat","maxLong","maxLat","bottomLeftCommon","topRightCommon","slice","concat","xMin","yMin","xMax","yMax","bottomLeftWorld","unprojectPosition","topRightWorld","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global setTimeout clearTimeout */\nimport GL from '@luma.gl/constants';\nimport {\n  getBounds,\n  boundsContain,\n  packVertices,\n  scaleToAspectRatio,\n  getTextureCoordinates,\n  getTextureParams\n} from './heatmap-layer-utils';\nimport {\n  Buffer,\n  Texture2D,\n  Transform,\n  getParameters,\n  FEATURES,\n  hasFeatures,\n  isWebGL2\n} from '@luma.gl/core';\nimport {\n  AttributeManager,\n  COORDINATE_SYSTEM,\n  log,\n  _mergeShaders as mergeShaders,\n  project32\n} from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport AggregationLayer from '../aggregation-layer';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport weights_vs from './weights-vs.glsl';\nimport weights_fs from './weights-fs.glsl';\nimport vs_max from './max-vs.glsl';\n\nconst RESOLUTION = 2; // (number of common space pixels) / (number texels)\nconst SIZE_2K = 2048;\nconst ZOOM_DEBOUNCE = 500; // milliseconds\nconst TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: {\n    [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n    [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n  },\n  dataFormat: GL.RGBA\n};\nconst DEFAULT_COLOR_DOMAIN = [0, 0];\n\nconst defaultProps = {\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: 1},\n  intensity: {type: 'number', min: 0, value: 1},\n  radiusPixels: {type: 'number', min: 1, max: 100, value: 50},\n  colorRange: defaultColorRange,\n  threshold: {type: 'number', min: 0, max: 1, value: 0.05},\n  colorDomain: {type: 'array', value: null, optional: true}\n};\n\nconst REQUIRED_FEATURES = [\n  FEATURES.BLEND_EQUATION_MINMAX, // max weight calculation\n  FEATURES.TEXTURE_FLOAT // weight-map as texture\n  // FEATURES.FLOAT_BLEND, // implictly supported when TEXTURE_FLOAT is supported\n];\n\nconst DIMENSIONS = {\n  data: {\n    props: ['radiusPixels']\n  }\n};\n\nexport default class HeatmapLayer extends AggregationLayer {\n  initializeState() {\n    const {gl} = this.context;\n    if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n      this.setState({supported: false});\n      log.error(`HeatmapLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    super.initializeState(DIMENSIONS);\n    this.setState({supported: true});\n    this._setupTextureParams();\n    this._setupAttributes();\n    this._setupResources();\n  }\n\n  shouldUpdateState({changeFlags}) {\n    // Need to be updated when viewport changes\n    return changeFlags.somethingChanged;\n  }\n\n  /* eslint-disable complexity */\n  updateState(opts) {\n    if (!this.state.supported) {\n      return;\n    }\n    super.updateState(opts);\n    const {props, oldProps} = opts;\n    const changeFlags = this._getChangeFlags(opts);\n\n    if (changeFlags.viewportChanged) {\n      changeFlags.boundsChanged = this._updateBounds();\n    }\n\n    if (changeFlags.dataChanged || changeFlags.boundsChanged) {\n      this._updateWeightmap();\n    } else if (changeFlags.viewportZoomChanged) {\n      this._debouncedUpdateWeightmap();\n    }\n\n    if (props.colorRange !== oldProps.colorRange) {\n      this._updateColorTexture(opts);\n    }\n\n    if (changeFlags.viewportChanged) {\n      this._updateTextureRenderingBounds();\n    }\n\n    if (oldProps.colorDomain !== props.colorDomain || changeFlags.viewportChanged) {\n      const {viewport} = this.context;\n      const {weightsScale} = this.state;\n      const domainScale = (viewport ? 1024 / viewport.scale : 1) * weightsScale;\n      const colorDomain = props.colorDomain\n        ? props.colorDomain.map(x => x * domainScale)\n        : DEFAULT_COLOR_DOMAIN;\n      if (colorDomain[1] > 0 && weightsScale < 1) {\n        // Hack - when low precision texture is used, aggregated weights are in the [0, 1]\n        // range. Scale colorDomain to fit.\n        const max = Math.min(colorDomain[1], 1);\n        colorDomain[0] *= max / colorDomain[1];\n        colorDomain[1] = max;\n      }\n      this.setState({colorDomain});\n    }\n\n    this.setState({zoom: opts.context.viewport.zoom});\n  }\n  /* eslint-enable complexity */\n\n  renderLayers() {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {\n      weightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      maxWeightsTexture,\n      colorTexture,\n      colorDomain\n    } = this.state;\n    const {updateTriggers, intensity, threshold} = this.props;\n\n    const TriangleLayerClass = this.getSubLayerClass('triangle', TriangleLayer);\n\n    return new TriangleLayerClass(\n      this.getSubLayerProps({\n        id: 'triangle-layer',\n        updateTriggers\n      }),\n      {\n        data: {\n          attributes: {\n            positions: triPositionBuffer,\n            texCoords: triTexCoordBuffer\n          }\n        },\n        vertexCount: 4,\n        maxTexture: maxWeightsTexture,\n        colorTexture,\n        texture: weightsTexture,\n        intensity,\n        threshold,\n        colorDomain\n      }\n    );\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    const {\n      weightsTransform,\n      weightsTexture,\n      maxWeightTransform,\n      maxWeightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      colorTexture,\n      updateTimer\n    } = this.state;\n    /* eslint-disable no-unused-expressions */\n    weightsTransform && weightsTransform.delete();\n    weightsTexture && weightsTexture.delete();\n    maxWeightTransform && maxWeightTransform.delete();\n    maxWeightsTexture && maxWeightsTexture.delete();\n    triPositionBuffer && triPositionBuffer.delete();\n    triTexCoordBuffer && triTexCoordBuffer.delete();\n    colorTexture && colorTexture.delete();\n    updateTimer && clearTimeout(updateTimer);\n    /* eslint-enable no-unused-expressions */\n  }\n\n  // PRIVATE\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n  _getChangeFlags(opts) {\n    const changeFlags = {};\n    const {dimensions} = this.state;\n    changeFlags.dataChanged =\n      this.isAttributeChanged() || // if any attribute is changed\n      this.isAggregationDirty(opts, {\n        compareAll: true,\n        dimension: dimensions.data\n      });\n    changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n\n    const {zoom} = this.state;\n    if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n      changeFlags.viewportZoomChanged = true;\n    }\n\n    return changeFlags;\n  }\n\n  _createTextures() {\n    const {gl} = this.context;\n    const {textureSize, format, type} = this.state;\n\n    this.setState({\n      weightsTexture: new Texture2D(gl, {\n        width: textureSize,\n        height: textureSize,\n        format,\n        type,\n        ...TEXTURE_OPTIONS\n      }),\n      maxWeightsTexture: new Texture2D(gl, {format, type, ...TEXTURE_OPTIONS}) // 1 X 1 texture,\n    });\n  }\n\n  _setupAttributes() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, accessor: 'getPosition'},\n      weights: {size: 1, accessor: 'getWeight'}\n    });\n    this.setState({positionAttributeName: 'positions'});\n  }\n\n  _setupTextureParams() {\n    const {gl} = this.context;\n    const textureSize = Math.min(SIZE_2K, getParameters(gl, gl.MAX_TEXTURE_SIZE));\n    const floatTargetSupport = hasFeatures(gl, FEATURES.COLOR_ATTACHMENT_RGBA32F);\n    const {format, type} = getTextureParams({gl, floatTargetSupport});\n    const weightsScale = floatTargetSupport ? 1 : 1 / 255;\n    this.setState({textureSize, format, type, weightsScale});\n    if (!floatTargetSupport) {\n      log.warn(\n        `HeatmapLayer: ${\n          this.id\n        } rendering to float texture not supported, fallingback to low precession format`\n      )();\n    }\n  }\n\n  _createWeightsTransform(shaderOptions = {}) {\n    const {gl} = this.context;\n    let {weightsTransform} = this.state;\n    const {weightsTexture} = this.state;\n    if (weightsTransform) {\n      weightsTransform.delete();\n    }\n    const shaders = mergeShaders(\n      {\n        vs: weights_vs,\n        _fs: weights_fs,\n        modules: [project32]\n      },\n      shaderOptions\n    );\n\n    weightsTransform = new Transform(gl, {\n      id: `${this.id}-weights-transform`,\n      elementCount: 1,\n      _targetTexture: weightsTexture,\n      _targetTextureVarying: 'weightsTexture',\n      ...shaders\n    });\n    this.setState({weightsTransform});\n  }\n\n  _setupResources() {\n    const {gl} = this.context;\n    this._createTextures();\n    const {textureSize, weightsTexture, maxWeightsTexture} = this.state;\n    this._createWeightsTransform();\n    const maxWeightTransform = new Transform(gl, {\n      id: `${this.id}-max-weights-transform`,\n      _sourceTextures: {\n        inTexture: weightsTexture\n      },\n      _targetTexture: maxWeightsTexture,\n      _targetTextureVarying: 'outTexture',\n      vs: vs_max,\n      elementCount: textureSize * textureSize\n    });\n\n    this.setState({\n      weightsTexture,\n      maxWeightsTexture,\n      maxWeightTransform,\n      zoom: null,\n      triPositionBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 3}\n      }),\n      triTexCoordBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 2}\n      })\n    });\n  }\n\n  // overwrite super class method to update transform model\n  updateShaders(shaderOptions) {\n    // sahder params (modules, injects) changed, update model object\n    this._createWeightsTransform(shaderOptions);\n  }\n\n  _updateMaxWeightValue() {\n    const {maxWeightTransform} = this.state;\n    maxWeightTransform.run({\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.MAX\n      }\n    });\n  }\n\n  // Computes world bounds area that needs to be processed for generate heatmap\n  _updateBounds(forceUpdate = false) {\n    const {viewport} = this.context;\n\n    // Unproject all 4 corners of the current screen coordinates into world coordinates (lng/lat)\n    // Takes care of viewport has non zero bearing/pitch (i.e axis not aligned with world coordiante system)\n    const viewportCorners = [\n      viewport.unproject([0, 0]),\n      viewport.unproject([viewport.width, 0]),\n      viewport.unproject([viewport.width, viewport.height]),\n      viewport.unproject([0, viewport.height])\n    ];\n\n    // #1: get world bounds for current viewport extends\n    const visibleWorldBounds = getBounds(viewportCorners); // TODO: Change to visible bounds\n\n    const newState = {visibleWorldBounds, viewportCorners};\n    let boundsChanged = false;\n\n    if (\n      forceUpdate ||\n      !this.state.worldBounds ||\n      !boundsContain(this.state.worldBounds, visibleWorldBounds)\n    ) {\n      // #2 : convert world bounds to common (Flat) bounds\n      // #3 : extend common bounds to match aspect ratio with viewport\n      const scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n\n      // #4 :convert aligned common bounds to world bounds\n      const worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n\n      // Clip webmercator projection limits\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n        worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n        worldBounds[0] = Math.max(worldBounds[0], -360);\n        worldBounds[2] = Math.min(worldBounds[2], 360);\n      }\n\n      // #5: now convert world bounds to common using Layer's coordiante system and origin\n      const normalizedCommonBounds = this._worldToCommonBounds(worldBounds);\n\n      newState.worldBounds = worldBounds;\n      newState.normalizedCommonBounds = normalizedCommonBounds;\n\n      boundsChanged = true;\n    }\n    this.setState(newState);\n    return boundsChanged;\n  }\n\n  _updateTextureRenderingBounds() {\n    // Just render visible portion of the texture\n    const {\n      triPositionBuffer,\n      triTexCoordBuffer,\n      normalizedCommonBounds,\n      viewportCorners\n    } = this.state;\n\n    const {viewport} = this.context;\n\n    triPositionBuffer.subData(packVertices(viewportCorners, 3));\n\n    const textureBounds = viewportCorners.map(p =>\n      getTextureCoordinates(viewport.projectPosition(p), normalizedCommonBounds)\n    );\n    triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n  }\n\n  _updateColorTexture(opts) {\n    const {colorRange} = opts.props;\n    let {colorTexture} = this.state;\n    const colors = colorRangeToFlatArray(colorRange, true);\n\n    if (colorTexture) {\n      colorTexture.setImageData({\n        data: colors,\n        width: colorRange.length\n      });\n    } else {\n      colorTexture = new Texture2D(this.context.gl, {\n        data: colors,\n        width: colorRange.length,\n        height: 1,\n        format: isWebGL2(this.context.gl) ? GL.RGBA32F : GL.RGBA,\n        type: GL.FLOAT,\n        ...TEXTURE_OPTIONS\n      });\n    }\n    this.setState({colorTexture});\n  }\n\n  _updateWeightmap() {\n    const {radiusPixels} = this.props;\n    const {weightsTransform, worldBounds, textureSize, weightsTexture, weightsScale} = this.state;\n\n    // #5: convert world bounds to common using Layer's coordiante system and origin\n    const commonBounds = this._worldToCommonBounds(worldBounds, {\n      useLayerCoordinateSystem: true\n    });\n\n    const uniforms = {\n      radiusPixels,\n      commonBounds,\n      textureWidth: textureSize,\n      weightsScale\n    };\n    // Attribute manager sets data array count as instaceCount on model\n    // we need to set that as elementCount on 'weightsTransform'\n    weightsTransform.update({\n      elementCount: this.getNumInstances()\n    });\n    weightsTransform.run({\n      uniforms,\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.FUNC_ADD\n      },\n      clearRenderTarget: true,\n      attributes: this.getAttributes(),\n      moduleSettings: this.getModuleSettings()\n    });\n    this._updateMaxWeightValue();\n\n    // reset filtering parameters (TODO: remove once luma issue#1193 is fixed)\n    weightsTexture.setParameters({\n      [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n      [GL.TEXTURE_MIN_FILTER]: GL.LINEAR\n    });\n\n    this.setState({lastUpdate: Date.now()});\n  }\n\n  _debouncedUpdateWeightmap(fromTimer = false) {\n    let {updateTimer} = this.state;\n    const timeSinceLastUpdate = Date.now() - this.state.lastUpdate;\n\n    if (fromTimer) {\n      updateTimer = null;\n    }\n\n    if (timeSinceLastUpdate >= ZOOM_DEBOUNCE) {\n      // update\n      this._updateBounds(true);\n      this._updateWeightmap();\n      this._updateTextureRenderingBounds();\n    } else if (!updateTimer) {\n      updateTimer = setTimeout(\n        this._debouncedUpdateWeightmap.bind(this, true),\n        ZOOM_DEBOUNCE - timeSinceLastUpdate\n      );\n    }\n\n    this.setState({updateTimer});\n  }\n\n  // input: worldBounds: [minLong, minLat, maxLong, maxLat]\n  // input: opts.useLayerCoordinateSystem : layers coordiante system is used\n  // optput: commonBounds: [minX, minY, maxX, maxY] scaled to fit the current texture\n  _worldToCommonBounds(worldBounds, opts = {}) {\n    const {useLayerCoordinateSystem = false} = opts;\n    const [minLong, minLat, maxLong, maxLat] = worldBounds;\n    const {viewport} = this.context;\n    const {textureSize} = this.state;\n\n    const size = (textureSize * RESOLUTION) / viewport.scale;\n\n    let bottomLeftCommon;\n    let topRightCommon;\n\n    // Y-axis is flipped between World and Common bounds\n    if (useLayerCoordinateSystem) {\n      bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);\n      topRightCommon = this.projectPosition([maxLong, maxLat, 0]);\n    } else {\n      bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);\n      topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);\n    }\n    // Ignore z component\n    let commonBounds = bottomLeftCommon.slice(0, 2).concat(topRightCommon.slice(0, 2));\n    commonBounds = scaleToAspectRatio(commonBounds, size, size);\n    return commonBounds;\n  }\n\n  // input commonBounds: [xMin, yMin, xMax, yMax]\n  // output worldBounds: [minLong, minLat, maxLong, maxLat]\n  _commonToWorldBounds(commonBounds) {\n    const [xMin, yMin, xMax, yMax] = commonBounds;\n    const {viewport} = this.context;\n    const bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);\n    const topRightWorld = viewport.unprojectPosition([xMax, yMax]);\n\n    return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));\n  }\n}\n\nHeatmapLayer.layerName = 'HeatmapLayer';\nHeatmapLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}