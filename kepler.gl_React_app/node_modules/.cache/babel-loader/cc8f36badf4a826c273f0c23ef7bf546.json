{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport React, { createElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { Deck, _memoize as memoize } from '@deck.gl/core';\nimport extractJSXLayers from './utils/extract-jsx-layers';\nimport positionChildrenUnderViews from './utils/position-children-under-views';\nimport extractStyles from './utils/extract-styles';\nvar propTypes = Deck.getPropTypes(PropTypes);\nvar defaultProps = Deck.defaultProps;\nvar DeckGL = function (_React$Component) {\n  _inherits(DeckGL, _React$Component);\n  function DeckGL(props) {\n    var _this;\n    _classCallCheck(this, DeckGL);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DeckGL).call(this, props));\n    _this.viewports = null;\n    _this.children = null;\n    _this._needsRedraw = null;\n    _this._containerRef = React.createRef();\n    _this._canvasRef = React.createRef();\n    _this.pickObject = _this.pickObject.bind(_assertThisInitialized(_this));\n    _this.pickMultipleObjects = _this.pickMultipleObjects.bind(_assertThisInitialized(_this));\n    _this.pickObjects = _this.pickObjects.bind(_assertThisInitialized(_this));\n    _this._extractJSXLayers = memoize(extractJSXLayers);\n    _this._positionChildrenUnderViews = memoize(positionChildrenUnderViews);\n    _this._extractStyles = memoize(extractStyles);\n    return _this;\n  }\n  _createClass(DeckGL, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var DeckClass = this.props.Deck || Deck;\n      this.deck = this.deck || new DeckClass(Object.assign({}, this.props, {\n        parent: this._containerRef.current,\n        canvas: this._canvasRef.current,\n        style: null,\n        width: '100%',\n        height: '100%',\n        _customRender: this._customRender.bind(this)\n      }));\n      this._updateFromProps(this.props);\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      this._updateFromProps(nextProps);\n      var childrenChanged = this.children !== this._parseJSX(nextProps).children;\n      var viewsChanged = this.deck.viewManager && this.deck.viewManager.needsRedraw();\n      return childrenChanged && !viewsChanged;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this._redrawDeck();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.deck.finalize();\n    }\n  }, {\n    key: \"pickObject\",\n    value: function pickObject(opts) {\n      return this.deck.pickObject(opts);\n    }\n  }, {\n    key: \"pickMultipleObjects\",\n    value: function pickMultipleObjects(opts) {\n      return this.deck.pickMultipleObjects(opts);\n    }\n  }, {\n    key: \"pickObjects\",\n    value: function pickObjects(opts) {\n      return this.deck.pickObjects(opts);\n    }\n  }, {\n    key: \"_redrawDeck\",\n    value: function _redrawDeck() {\n      if (this._needsRedraw) {\n        this.deck._drawLayers(this._needsRedraw);\n        this._needsRedraw = null;\n      }\n    }\n  }, {\n    key: \"_customRender\",\n    value: function _customRender(redrawReason) {\n      this._needsRedraw = redrawReason;\n      var viewports = this.deck.viewManager.getViewports();\n      if (viewports !== this.viewports) {\n        this.forceUpdate();\n      } else {\n        this._redrawDeck();\n      }\n    }\n  }, {\n    key: \"_parseJSX\",\n    value: function _parseJSX(props) {\n      return this._extractJSXLayers({\n        layers: props.layers,\n        views: props.views,\n        children: props.children\n      });\n    }\n  }, {\n    key: \"_updateFromProps\",\n    value: function _updateFromProps(props) {\n      var _this$_parseJSX = this._parseJSX(props),\n        layers = _this$_parseJSX.layers,\n        views = _this$_parseJSX.views;\n      var deckProps = Object.assign({}, props, {\n        style: null,\n        width: '100%',\n        height: '100%',\n        layers: layers,\n        views: views\n      });\n      this.deck.setProps(deckProps);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        ContextProvider = _this$props.ContextProvider,\n        width = _this$props.width,\n        height = _this$props.height,\n        style = _this$props.style;\n      var _ref = this.deck || {},\n        viewManager = _ref.viewManager;\n      this.viewports = viewManager && viewManager.getViewports();\n      this.children = this._parseJSX(this.props).children;\n      var children = this._positionChildrenUnderViews({\n        children: this.children,\n        viewports: this.viewports,\n        deck: this.deck,\n        ContextProvider: ContextProvider\n      });\n      var _this$_extractStyles = this._extractStyles({\n          width: width,\n          height: height,\n          style: style\n        }),\n        containerStyle = _this$_extractStyles.containerStyle,\n        canvasStyle = _this$_extractStyles.canvasStyle;\n      var canvas = createElement('canvas', {\n        key: 'canvas',\n        ref: this._canvasRef,\n        style: canvasStyle\n      });\n      return createElement('div', {\n        id: 'deckgl-wrapper',\n        ref: this._containerRef,\n        style: containerStyle\n      }, [canvas, children]);\n    }\n  }]);\n  return DeckGL;\n}(React.Component);\nexport { DeckGL as default };\nDeckGL.propTypes = propTypes;\nDeckGL.defaultProps = defaultProps;","map":{"version":3,"sources":["../../src/deckgl.js"],"names":["React","createElement","PropTypes","Deck","_memoize","memoize","extractJSXLayers","positionChildrenUnderViews","extractStyles","propTypes","getPropTypes","defaultProps","DeckGL","Component","props","viewports","children","_needsRedraw","_containerRef","createRef","_canvasRef","pickObject","bind","pickMultipleObjects","pickObjects","_extractJSXLayers","_positionChildrenUnderViews","_extractStyles","DeckClass","deck","assign","parent","current","canvas","style","width","height","_customRender","_updateFromProps","nextProps","childrenChanged","_parseJSX","viewsChanged","viewManager","needsRedraw","_redrawDeck","finalize","opts","_drawLayers","redrawReason","getViewports","forceUpdate","layers","views","deckProps","setProps","ContextProvider","containerStyle","canvasStyle","key","ref","id"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport React, {createElement} from 'react';\nimport PropTypes from 'prop-types';\nimport {Deck, _memoize as memoize} from '@deck.gl/core';\n\nimport extractJSXLayers from './utils/extract-jsx-layers';\nimport positionChildrenUnderViews from './utils/position-children-under-views';\nimport extractStyles from './utils/extract-styles';\n\nconst propTypes = Deck.getPropTypes(PropTypes);\n\nconst defaultProps = Deck.defaultProps;\n\nexport default class DeckGL extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.viewports = null;\n    this.children = null;\n\n    // The redraw flag of deck\n    this._needsRedraw = null;\n\n    // Refs\n    this._containerRef = React.createRef();\n    this._canvasRef = React.createRef();\n\n    // Bind public methods\n    this.pickObject = this.pickObject.bind(this);\n    this.pickMultipleObjects = this.pickMultipleObjects.bind(this);\n    this.pickObjects = this.pickObjects.bind(this);\n\n    // Memoized functions\n    this._extractJSXLayers = memoize(extractJSXLayers);\n    this._positionChildrenUnderViews = memoize(positionChildrenUnderViews);\n    this._extractStyles = memoize(extractStyles);\n  }\n\n  componentDidMount() {\n    // Allows a subclass of Deck to be used\n    // TODO - update propTypes / defaultProps?\n    const DeckClass = this.props.Deck || Deck;\n\n    // DEVTOOLS can cause this to be called twice\n    this.deck =\n      this.deck ||\n      new DeckClass(\n        Object.assign({}, this.props, {\n          parent: this._containerRef.current,\n          canvas: this._canvasRef.current,\n          style: null,\n          width: '100%',\n          height: '100%',\n          // The Deck's animation loop is independent from React's render cycle, causing potential\n          // synchronization issues. We provide this custom render function to make sure that React\n          // and Deck update on the same schedule.\n          _customRender: this._customRender.bind(this)\n        })\n      );\n    this._updateFromProps(this.props);\n  }\n\n  // This method checks if React needs to call `render`.\n  // Props changes may lead to 3 types of updates:\n  // 1. Only the WebGL context - updated in Deck's render cycle (next animation frame)\n  // 2. Only the DOM - updated in React's lifecycle (now)\n  // 3. Both the WebGL context and the DOM - defer React rerender to next animation frame just\n  //    before Deck redraw to ensure perfect synchronization & avoid excessive redraw\n  //    This is because multiple changes may happen to Deck between two frames e.g. transition\n  shouldComponentUpdate(nextProps) {\n    // Update Deck's props. If Deck needs redraw, this will trigger a call to `_customRender` in\n    // the next animation frame.\n    this._updateFromProps(nextProps);\n\n    // If the child components have changed, React needs to rerender (case 2 or 3)\n    const childrenChanged = this.children !== this._parseJSX(nextProps).children;\n    // If the views have changed, both React and WebGL context need update (case 3)\n    const viewsChanged = this.deck.viewManager && this.deck.viewManager.needsRedraw();\n\n    // Only call `render` right away in case 2\n    return childrenChanged && !viewsChanged;\n  }\n\n  componentDidUpdate() {\n    // render has just been called. The children are positioned based on the current view state.\n    // Redraw Deck canvas immediately, if necessary, using the current view state, so that it\n    // matches the child components.\n    this._redrawDeck();\n  }\n\n  componentWillUnmount() {\n    this.deck.finalize();\n  }\n\n  // Public API\n\n  pickObject(opts) {\n    return this.deck.pickObject(opts);\n  }\n\n  pickMultipleObjects(opts) {\n    return this.deck.pickMultipleObjects(opts);\n  }\n\n  pickObjects(opts) {\n    return this.deck.pickObjects(opts);\n  }\n\n  // Callbacks\n  _redrawDeck() {\n    if (this._needsRedraw) {\n      // Only redraw it we have received a dirty flag\n      this.deck._drawLayers(this._needsRedraw);\n      this._needsRedraw = null;\n    }\n  }\n\n  _customRender(redrawReason) {\n    // Save the dirty flag for later\n    this._needsRedraw = redrawReason;\n\n    // Viewport/view state is passed to child components as props.\n    // If they have changed, we need to trigger a React rerender to update children props.\n    const viewports = this.deck.viewManager.getViewports();\n    if (viewports !== this.viewports) {\n      // Viewports have changed, update children props first.\n      // This will delay the Deck canvas redraw till after React update (in componentDidUpdate)\n      // so that the canvas does not get rendered before the child components update.\n      this.forceUpdate();\n    } else {\n      this._redrawDeck();\n    }\n  }\n\n  // Private Helpers\n\n  _parseJSX(props) {\n    return this._extractJSXLayers({\n      layers: props.layers,\n      views: props.views,\n      children: props.children\n    });\n  }\n\n  // 1. Extract any JSX layers from the react children\n  // 2. Handle any backwards compatiblity props for React layer\n  // Needs to be called both from initial mount, and when new props are received\n  _updateFromProps(props) {\n    // extract any deck.gl layers masquerading as react elements from props.children\n    const {layers, views} = this._parseJSX(props);\n    const deckProps = Object.assign({}, props, {\n      // Override user styling props. We will set the canvas style in render()\n      style: null,\n      width: '100%',\n      height: '100%',\n      layers,\n      views\n    });\n\n    this.deck.setProps(deckProps);\n  }\n\n  render() {\n    const {ContextProvider, width, height, style} = this.props;\n    // Save the viewports and children used for this render\n    const {viewManager} = this.deck || {};\n    this.viewports = viewManager && viewManager.getViewports();\n    this.children = this._parseJSX(this.props).children;\n\n    // Render the background elements (typically react-map-gl instances)\n    // using the view descriptors\n    const children = this._positionChildrenUnderViews({\n      children: this.children,\n      viewports: this.viewports,\n      deck: this.deck,\n      ContextProvider\n    });\n\n    const {containerStyle, canvasStyle} = this._extractStyles({width, height, style});\n\n    const canvas = createElement('canvas', {\n      key: 'canvas',\n      ref: this._canvasRef,\n      style: canvasStyle\n    });\n\n    // Render deck.gl as the last child\n    return createElement(\n      'div',\n      {id: 'deckgl-wrapper', ref: this._containerRef, style: containerStyle},\n      [canvas, children]\n    );\n  }\n}\n\nDeckGL.propTypes = propTypes;\nDeckGL.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}