{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport { getAccessorTypeFromSize, getComponentTypeFromArray } from './gltf-utils';\nexport function getGLTFAccessors(attributes) {\n  var jsonAccessors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var accessors = {};\n  for (var name in attributes) {\n    var attribute = attributes[name];\n    if (name !== 'indices') {\n      var glTFAccessor = getGLTFAccessor(attribute, jsonAccessors[name] || {});\n      accessors[name] = glTFAccessor;\n    }\n  }\n  return accessors;\n}\nexport function getGLTFAccessor(attribute) {\n  var jsonAccessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _getAccessorData = getAccessorData(attribute),\n    buffer = _getAccessorData.buffer,\n    size = _getAccessorData.size,\n    count = _getAccessorData.count;\n  var glTFAccessor = _objectSpread(_objectSpread({}, jsonAccessor), {}, {\n    value: buffer,\n    size: size,\n    bufferView: null,\n    byteOffset: 0,\n    count: count,\n    type: getAccessorTypeFromSize(size),\n    componentType: getComponentTypeFromArray(buffer)\n  });\n  return glTFAccessor;\n}\nexport function getGLTFAttribute(data, gltfAttributeName) {\n  return data.attributes[data.glTFAttributeMap[gltfAttributeName]];\n}\nfunction getAccessorData(attribute) {\n  var buffer = attribute;\n  var size = 1;\n  var count = 0;\n  if (attribute && attribute.value) {\n    buffer = attribute.value;\n    size = attribute.size || 1;\n  }\n  if (buffer) {\n    if (!ArrayBuffer.isView(buffer)) {\n      buffer = toTypedArray(buffer, Float32Array);\n    }\n    count = buffer.length / size;\n  }\n  return {\n    buffer: buffer,\n    size: size,\n    count: count\n  };\n}\nfunction toTypedArray(array, ArrayType) {\n  var convertTypedArrays = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (!array) {\n    return null;\n  }\n  if (Array.isArray(array)) {\n    return new ArrayType(array);\n  }\n  if (convertTypedArrays && !(array instanceof ArrayType)) {\n    return new ArrayType(array);\n  }\n  return array;\n}","map":{"version":3,"sources":["../../../../src/lib/gltf-utils/gltf-attribute-utils.js"],"names":["getAccessorTypeFromSize","getComponentTypeFromArray","getGLTFAccessors","attributes","jsonAccessors","accessors","name","attribute","glTFAccessor","getGLTFAccessor","jsonAccessor","buffer","size","count","getAccessorData","value","bufferView","byteOffset","type","componentType","getGLTFAttribute","data","gltfAttributeName","glTFAttributeMap","ArrayBuffer","isView","toTypedArray","Float32Array","length","array","ArrayType","convertTypedArrays","Array","isArray"],"mappings":"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","sourcesContent":["// TODO - remove\nimport {getAccessorTypeFromSize, getComponentTypeFromArray} from './gltf-utils';\n\n// Returns a fresh attributes object with glTF-standardized attributes names\n// Attributes that cannot be identified will not be included\n// Removes `indices` if present, as it should be stored separately from the attributes\nexport function getGLTFAccessors(attributes, jsonAccessors = {}) {\n  const accessors = {};\n  for (const name in attributes) {\n    const attribute = attributes[name];\n    if (name !== 'indices') {\n      const glTFAccessor = getGLTFAccessor(attribute, jsonAccessors[name] || {});\n      accessors[name] = glTFAccessor;\n    }\n  }\n  return accessors;\n}\n\n// Fix up a single accessor.\n// Input: typed array or a partial accessor object\n// Return: accessor object\nexport function getGLTFAccessor(attribute, jsonAccessor = {}) {\n  const {buffer, size, count} = getAccessorData(attribute);\n\n  const glTFAccessor = {\n    ...jsonAccessor,\n    // TODO: Deprecate `value` in favor of bufferView?\n    value: buffer,\n    size, // Decoded `type` (e.g. SCALAR)\n\n    // glTF Accessor values\n    // TODO: Instead of a bufferView index we could have an actual buffer (typed array)\n    bufferView: null,\n    byteOffset: 0,\n    count,\n    type: getAccessorTypeFromSize(size),\n    componentType: getComponentTypeFromArray(buffer)\n  };\n\n  return glTFAccessor;\n}\n\nexport function getGLTFAttribute(data, gltfAttributeName) {\n  return data.attributes[data.glTFAttributeMap[gltfAttributeName]];\n}\n\nfunction getAccessorData(attribute) {\n  let buffer = attribute;\n  let size = 1;\n  let count = 0;\n\n  if (attribute && attribute.value) {\n    buffer = attribute.value;\n    size = attribute.size || 1;\n  }\n\n  if (buffer) {\n    if (!ArrayBuffer.isView(buffer)) {\n      buffer = toTypedArray(buffer, Float32Array);\n    }\n    count = buffer.length / size;\n  }\n\n  return {buffer, size, count};\n}\n\n// Convert non-typed arrays to arrays of specified format\nfunction toTypedArray(array, ArrayType, convertTypedArrays = false) {\n  if (!array) {\n    return null;\n  }\n  if (Array.isArray(array)) {\n    return new ArrayType(array);\n  }\n  if (convertTypedArrays && !(array instanceof ArrayType)) {\n    return new ArrayType(array);\n  }\n  return array;\n}\n"]},"metadata":{},"sourceType":"module"}