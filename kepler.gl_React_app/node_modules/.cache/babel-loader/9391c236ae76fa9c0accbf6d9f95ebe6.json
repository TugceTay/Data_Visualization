{"ast":null,"code":"import { assert } from '../utils/assert';\nexport function getKeyValue(gl, name) {\n  if (typeof name !== 'string') {\n    return name;\n  }\n  const number = Number(name);\n  if (!isNaN(number)) {\n    return number;\n  }\n  name = name.replace(/^.*\\./, '');\n  const value = gl[name];\n  assert(value !== undefined, \"Accessing undefined constant GL.\".concat(name));\n  return value;\n}\nexport function getKey(gl, value) {\n  value = Number(value);\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return \"GL.\".concat(key);\n    }\n  }\n  return String(value);\n}\nexport function getKeyType(gl, value) {\n  assert(value !== undefined, 'undefined key');\n  value = Number(value);\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return \"GL.\".concat(key);\n    }\n  }\n  return String(value);\n}","map":{"version":3,"sources":["../../../src/webgl-utils/constants-to-keys.js"],"names":["assert","getKeyValue","gl","name","number","Number","isNaN","replace","value","undefined","getKey","key","String","getKeyType"],"mappings":"AAAA,SAAQA,MAAR,QAAqB,iBAArB;AAGA,OAAO,SAASC,WAAT,CAAqBC,EAArB,EAAyBC,IAAzB,EAA+B;EAEpC,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;IAC5B,OAAOA,IAAP;EACD;EAGD,MAAMC,MAAM,GAAGC,MAAM,CAACF,IAAD,CAArB;EACA,IAAI,CAACG,KAAK,CAACF,MAAD,CAAV,EAAoB;IAClB,OAAOA,MAAP;EACD;EAGDD,IAAI,GAAGA,IAAI,CAACI,OAALJ,CAAa,OAAbA,EAAsB,EAAtBA,CAAPA;EACA,MAAMK,KAAK,GAAGN,EAAE,CAACC,IAAD,CAAhB;EACAH,MAAM,CAACQ,KAAK,KAAKC,SAAX,EAAA,kCAAA,CAAA,MAAA,CAAyDN,IAAzD,CAAA,CAANH;EACA,OAAOQ,KAAP;AACD;AAED,OAAO,SAASE,MAAT,CAAgBR,EAAhB,EAAoBM,KAApB,EAA2B;EAChCA,KAAK,GAAGH,MAAM,CAACG,KAAD,CAAdA;EACA,KAAK,MAAMG,GAAX,IAAkBT,EAAlB,EAAsB;IACpB,IAAIA,EAAE,CAACS,GAAD,CAAFT,KAAYM,KAAhB,EAAuB;MACrB,OAAA,KAAA,CAAA,MAAA,CAAaG,GAAb,CAAA;IACD;EACF;EACD,OAAOC,MAAM,CAACJ,KAAD,CAAb;AACD;AAED,OAAO,SAASK,UAAT,CAAoBX,EAApB,EAAwBM,KAAxB,EAA+B;EACpCR,MAAM,CAACQ,KAAK,KAAKC,SAAX,EAAsB,eAAtB,CAANT;EACAQ,KAAK,GAAGH,MAAM,CAACG,KAAD,CAAdA;EACA,KAAK,MAAMG,GAAX,IAAkBT,EAAlB,EAAsB;IACpB,IAAIA,EAAE,CAACS,GAAD,CAAFT,KAAYM,KAAhB,EAAuB;MACrB,OAAA,KAAA,CAAA,MAAA,CAAaG,GAAb,CAAA;IACD;EACF;EACD,OAAOC,MAAM,CAACJ,KAAD,CAAb;AACD","sourcesContent":["import {assert} from '../utils/assert';\n\n// Resolve a WebGL enumeration name (returns itself if already a number)\nexport function getKeyValue(gl, name) {\n  // If not a string, return (assume number)\n  if (typeof name !== 'string') {\n    return name;\n  }\n\n  // If string converts to number, return number\n  const number = Number(name);\n  if (!isNaN(number)) {\n    return number;\n  }\n\n  // Look up string, after removing any 'GL.' or 'gl.' prefix\n  name = name.replace(/^.*\\./, '');\n  const value = gl[name];\n  assert(value !== undefined, `Accessing undefined constant GL.${name}`);\n  return value;\n}\n\nexport function getKey(gl, value) {\n  value = Number(value);\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return `GL.${key}`;\n    }\n  }\n  return String(value);\n}\n\nexport function getKeyType(gl, value) {\n  assert(value !== undefined, 'undefined key');\n  value = Number(value);\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return `GL.${key}`;\n    }\n  }\n  return String(value);\n}\n"]},"metadata":{},"sourceType":"module"}