{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _GL_TYPE_TO_ARRAY_TYP;\nimport { GL_TYPE as GL } from '../constants';\nvar GL_TYPE_TO_ARRAY_TYPE = (_GL_TYPE_TO_ARRAY_TYP = {}, _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.DOUBLE, Float64Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.FLOAT, Float32Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.UNSIGNED_SHORT, Uint16Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.UNSIGNED_INT, Uint32Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.UNSIGNED_BYTE, Uint8Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.BYTE, Int8Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.SHORT, Int16Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.INT, Int32Array), _GL_TYPE_TO_ARRAY_TYP);\nvar NAME_TO_GL_TYPE = {\n  DOUBLE: GL.DOUBLE,\n  FLOAT: GL.FLOAT,\n  UNSIGNED_SHORT: GL.UNSIGNED_SHORT,\n  UNSIGNED_INT: GL.UNSIGNED_INT,\n  UNSIGNED_BYTE: GL.UNSIGNED_BYTE,\n  BYTE: GL.BYTE,\n  SHORT: GL.SHORT,\n  INT: GL.INT\n};\nvar ERR_TYPE_CONVERSION = 'Failed to convert GL type';\nvar GLType = function () {\n  function GLType() {\n    _classCallCheck(this, GLType);\n  }\n  _createClass(GLType, null, [{\n    key: \"fromTypedArray\",\n    value: function fromTypedArray(arrayOrType) {\n      arrayOrType = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n      for (var glType in GL_TYPE_TO_ARRAY_TYPE) {\n        var ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n        if (ArrayType === arrayOrType) {\n          return glType;\n        }\n      }\n      throw new Error(ERR_TYPE_CONVERSION);\n    }\n  }, {\n    key: \"fromName\",\n    value: function fromName(name) {\n      var glType = NAME_TO_GL_TYPE[name];\n      if (!glType) {\n        throw new Error(ERR_TYPE_CONVERSION);\n      }\n      return glType;\n    }\n  }, {\n    key: \"getArrayType\",\n    value: function getArrayType(glType) {\n      var clamped = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      switch (glType) {\n        case GL.UNSIGNED_SHORT_5_6_5:\n        case GL.UNSIGNED_SHORT_4_4_4_4:\n        case GL.UNSIGNED_SHORT_5_5_5_1:\n          return Uint16Array;\n        default:\n          var ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n          if (!ArrayType) {\n            throw new Error(ERR_TYPE_CONVERSION);\n          }\n          return ArrayType;\n      }\n    }\n  }, {\n    key: \"getByteSize\",\n    value: function getByteSize(glType) {\n      var ArrayType = GLType.getArrayType(glType);\n      return ArrayType.BYTES_PER_ELEMENT;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(glType) {\n      return Boolean(GLType.getArrayType(glType));\n    }\n  }, {\n    key: \"createTypedArray\",\n    value: function createTypedArray(glType, buffer) {\n      var byteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var length = arguments.length > 3 ? arguments[3] : undefined;\n      if (length === undefined) {\n        length = (buffer.byteLength - byteOffset) / GLType.getByteSize(glType);\n      }\n      var ArrayType = GLType.getArrayType(glType);\n      return new ArrayType(buffer, byteOffset, length);\n    }\n  }]);\n  return GLType;\n}();\nexport { GLType as default };","map":{"version":3,"sources":["../../../../src/geometry/gl/gl-type.js"],"names":["GL_TYPE","GL","GL_TYPE_TO_ARRAY_TYPE","DOUBLE","Float64Array","FLOAT","Float32Array","UNSIGNED_SHORT","Uint16Array","UNSIGNED_INT","Uint32Array","UNSIGNED_BYTE","Uint8Array","BYTE","Int8Array","SHORT","Int16Array","INT","Int32Array","NAME_TO_GL_TYPE","ERR_TYPE_CONVERSION","GLType","arrayOrType","ArrayBuffer","isView","constructor","glType","ArrayType","Error","name","clamped","UNSIGNED_SHORT_5_6_5","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","getArrayType","BYTES_PER_ELEMENT","Boolean","buffer","byteOffset","length","undefined","byteLength","getByteSize"],"mappings":"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","sourcesContent":["import {GL_TYPE as GL} from '../constants';\n\nconst GL_TYPE_TO_ARRAY_TYPE = {\n  [GL.DOUBLE]: Float64Array,\n  [GL.FLOAT]: Float32Array,\n  [GL.UNSIGNED_SHORT]: Uint16Array,\n  [GL.UNSIGNED_INT]: Uint32Array,\n  [GL.UNSIGNED_BYTE]: Uint8Array,\n  [GL.BYTE]: Int8Array,\n  [GL.SHORT]: Int16Array,\n  [GL.INT]: Int32Array\n};\n\nconst NAME_TO_GL_TYPE = {\n  DOUBLE: GL.DOUBLE,\n  FLOAT: GL.FLOAT,\n  UNSIGNED_SHORT: GL.UNSIGNED_SHORT,\n  UNSIGNED_INT: GL.UNSIGNED_INT,\n  UNSIGNED_BYTE: GL.UNSIGNED_BYTE,\n  BYTE: GL.BYTE,\n  SHORT: GL.SHORT,\n  INT: GL.INT\n};\n\nconst ERR_TYPE_CONVERSION = 'Failed to convert GL type';\n\n// Converts TYPED ARRAYS to corresponding GL constant\n// Used to auto deduce gl parameter types\nexport default class GLType {\n  // Signature: fromTypedArray(new Uint8Array())\n  // Signature: fromTypedArray(Uint8Array)\n  static fromTypedArray(arrayOrType) {\n    // If typed array, look up constructor\n    arrayOrType = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n    for (const glType in GL_TYPE_TO_ARRAY_TYPE) {\n      const ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n      if (ArrayType === arrayOrType) {\n        return glType;\n      }\n    }\n    throw new Error(ERR_TYPE_CONVERSION);\n  }\n\n  static fromName(name) {\n    const glType = NAME_TO_GL_TYPE[name];\n    if (!glType) {\n      throw new Error(ERR_TYPE_CONVERSION);\n    }\n    return glType;\n  }\n\n  // Converts GL constant to corresponding typed array type\n  // eslint-disable-next-line complexity\n  static getArrayType(glType, clamped = false) {\n    switch (glType) {\n      case GL.UNSIGNED_SHORT_5_6_5:\n      case GL.UNSIGNED_SHORT_4_4_4_4:\n      case GL.UNSIGNED_SHORT_5_5_5_1:\n        return Uint16Array;\n\n      default:\n        const ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n        if (!ArrayType) {\n          throw new Error(ERR_TYPE_CONVERSION);\n        }\n        return ArrayType;\n    }\n  }\n\n  static getByteSize(glType) {\n    const ArrayType = GLType.getArrayType(glType);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n\n  static validate(glType) {\n    return Boolean(GLType.getArrayType(glType));\n  }\n\n  static createTypedArray(glType, buffer, byteOffset = 0, length) {\n    if (length === undefined) {\n      length = (buffer.byteLength - byteOffset) / GLType.getByteSize(glType);\n    }\n\n    const ArrayType = GLType.getArrayType(glType);\n\n    return new ArrayType(buffer, byteOffset, length);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}