{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keplerGlInit = exports.receiveMapConfig = exports.resetMapConfig = exports.addDataToMap = void 0;\nvar _actionTypes = _interopRequireDefault(require(\"../constants/action-types\"));\nvar _reduxActions = require(\"redux-actions\");\n\n// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/**\n * Add data to kepler.gl reducer, prepare map with preset configuration if config is passed.\n * Kepler.gl provides a handy set of utils to parse data from different formats to the `data` object required in dataset. You rarely need to manually format the data obejct.\n *\n * Use `KeplerGlSchema.getConfigToSave` to generate a json blob of the currents instance config.\n * The config object value will always have higher precedence than the options properties.\n *\n * Kepler.gl uses `dataId` in the config to match with loaded dataset. If you pass a config object, you need\n * to match the `info.id` of your dataset to the `dataId` in each `layer`, `filter` and `interactionConfig.tooltips.fieldsToShow`\n *\n * @memberof main\n * @param {Object} data\n * @param {Array<Object>|Object} data.datasets - ***required** datasets can be a dataset or an array of datasets\n * Each dataset object needs to have `info` and `data` property.\n * @param {Object} data.datasets.info -info of a dataset\n * @param {string} data.datasets.info.id - id of this dataset. If config is defined, `id` should matches the `dataId` in config.\n * @param {string} data.datasets.info.label - A display name of this dataset\n * @param {Object} data.datasets.data - ***required** The data object, in a tabular format with 2 properties `fields` and `rows`\n * @param {Array<Object>} data.datasets.data.fields - ***required** Array of fields,\n * @param {string} data.datasets.data.fields.name - ***required** Name of the field,\n * @param {Array<Array>} data.datasets.data.rows - ***required** Array of rows, in a tabular format with `fields` and `rows`\n *\n * @param {Object} data.options\n * @param {boolean} data.options.centerMap `default: true` if `centerMap` is set to `true` kepler.gl will\n * place the map view within the data points boundaries.  `options.centerMap` will override `config.mapState` if passed in.\n * @param {boolean} data.options.readOnly `default: false` if `readOnly` is set to `true`\n * the left setting panel will be hidden\n * @param {boolean} data.options.keepExistingConfig whether to keep exiting map data and associated layer filter  interaction config `default: false`.\n * @param {Object} data.config this object will contain the full kepler.gl instance configuration {mapState, mapStyle, visState}\n * @public\n * @example\n *\n * // app.js\n * import {addDataToMap} from 'kepler.gl/actions';\n *\n * const sampleTripData = {\n *  fields: [\n *    {name: 'tpep_pickup_datetime', format: 'YYYY-M-D H:m:s', type: 'timestamp'},\n *    {name: 'pickup_longitude', format: '', type: 'real'},\n *    {name: 'pickup_latitude', format: '', type: 'real'}\n *  ],\n *  rows: [\n *    ['2015-01-15 19:05:39 +00:00', -73.99389648, 40.75011063],\n *    ['2015-01-15 19:05:39 +00:00', -73.97642517, 40.73981094],\n *    ['2015-01-15 19:05:40 +00:00', -73.96870422, 40.75424576],\n *  ]\n * };\n *\n * const sampleConfig = {\n *   visState: {\n *     filters: [\n *       {\n *         id: 'me',\n *         dataId: 'test_trip_data',\n *         name: 'tpep_pickup_datetime',\n *         type: 'timeRange',\n *         enlarged: true\n *       }\n *     ]\n *   }\n * }\n *\n * this.props.dispatch(\n *   addDataToMap({\n *     datasets: {\n *       info: {\n *         label: 'Sample Taxi Trips in New York City',\n *         id: 'test_trip_data'\n *       },\n *       data: sampleTripData\n *     },\n *     options: {\n *       centerMap: true,\n *       readOnly: false,\n *       keepExistingConfig: false\n *     },\n *     info: {\n *       title: 'Taro and Blue',\n *       description: 'This is my map'\n *     },\n *     config: sampleConfig\n *   })\n * );\n */\nvar addDataToMap = (0, _reduxActions.createAction)(_actionTypes[\"default\"].ADD_DATA_TO_MAP, function (data) {\n  return data;\n});\n/**\n * Reset all sub-reducers to its initial state. This can be used to clear out all configuration in the reducer.\n * @memberof main\n * @public\n */\n\nexports.addDataToMap = addDataToMap;\nvar resetMapConfig = (0, _reduxActions.createAction)(_actionTypes[\"default\"].RESET_MAP_CONFIG);\n/**\n * Pass config to kepler.gl instance, prepare the state with preset configs.\n * Calling `KeplerGlSchema.parseSavedConfig` to convert saved config before passing it in is required.\n *\n * You can call `receiveMapConfig` before passing in any data. The reducer will store layer and filter config, waiting for\n * data to come in. When data arrives, you can call `addDataToMap` without passing any config, and the reducer will try to match\n * preloaded configs. This behavior is designed to allow asynchronous data loading.\n *\n * It is also useful when you want to prepare the kepler.gl instance with some preset layer and filter settings.\n * **Note** Sequence is important, `receiveMapConfig` needs to be called __before__ data is loaded. Currently kepler.gl doesn't allow calling `receiveMapConfig` after data is loaded.\n * It will reset current configuration first then apply config to it.\n * @memberof main\n * @param {Object} config - ***required** The Config Object\n * @param {Object} options - ***optional** The Option object\n * @param {boolean} options.centerMap `default: true` if `centerMap` is set to `true` kepler.gl will\n * place the map view within the data points boundaries\n * @param {boolean} options.readOnly `default: false` if `readOnly` is set to `true`\n * the left setting panel will be hidden\n * @param {boolean} options.keepExistingConfig whether to keep exiting layer filter and interaction config `default: false`.\n * @param {boolean} options.autoCreateLayers whether to automatically create layers based on dataset columns `default: true`.\n * @public\n * @example\n * import {receiveMapConfig} from 'kepler.gl/actions';\n * import KeplerGlSchema from 'kepler.gl/schemas';\n *\n * const parsedConfig = KeplerGlSchema.parseSavedConfig(config);\n * this.props.dispatch(receiveMapConfig(parsedConfig));\n */\n\nexports.resetMapConfig = resetMapConfig;\nvar receiveMapConfig = (0, _reduxActions.createAction)(_actionTypes[\"default\"].RECEIVE_MAP_CONFIG, function (config, options) {\n  return {\n    config: config,\n    options: options\n  };\n});\n/**\n * Initialize kepler.gl reducer. It is used to pass in `mapboxApiAccessToken` to `mapStyle` reducer.\n * @memberof main\n * @param {object} payload\n * @param payload.mapboxApiAccessToken - mapboxApiAccessToken to be saved to mapStyle reducer\n * @param payload.mapboxApiUrl - mapboxApiUrl to be saved to mapStyle reducer.\n * @param payload.mapStylesReplaceDefault - mapStylesReplaceDefault to be saved to mapStyle reducer\n * @param payload.initialUiState - initial ui state\n * @type {typeof import('./actions').keplerGlInit}\n * @public\n */\n\nexports.receiveMapConfig = receiveMapConfig;\nvar keplerGlInit = (0, _reduxActions.createAction)(_actionTypes[\"default\"].INIT,\n// @ts-ignore\nfunction (payload) {\n  return payload;\n});\n/**\n * This declaration is needed to group actions in docs\n */\n\n/**\n * Main kepler.gl actions, these actions handles loading data and config into kepler.gl reducer. These actions\n * is listened by all subreducers,\n * @public\n */\n\n/* eslint-disable no-unused-vars */\n// @ts-ignore\n\nexports.keplerGlInit = keplerGlInit;\nvar main = null;\n/* eslint-enable no-unused-vars */","map":{"version":3,"sources":["../../src/actions/actions.js"],"names":["addDataToMap","ActionTypes","ADD_DATA_TO_MAP","data","resetMapConfig","RESET_MAP_CONFIG","receiveMapConfig","RECEIVE_MAP_CONFIG","config","options","keplerGlInit","INIT","payload","main"],"mappings":";;;;;;;AAoBA,IAAA,YAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,2BAAA,CAAA,CAAA;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAraAAA,CAAA,YAAA,EAAaC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYC,eAAzB,EAA0C,UAAA,IAAI,EAAA;EAAA,OAAIC,IAAJ;AAAA,CAA9C,CAArB;AAEP;AACA;AACA;AACA;AACA;;;AACO,IAAMC,cAAc,GAAG,CAAA,CAAA,EAAA,aAAA,CAAA,YAAA,EAAaH,YAAAA,CAAAA,SAAAA,CAAAA,CAAYI,gBAAzB,CAAvB;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,IAAMC,gBAAgB,GAAG,CAAA,CAAA,EAAA,aAAA,CAAA,YAAA,EAAaL,YAAAA,CAAAA,SAAAA,CAAAA,CAAYM,kBAAzB,EAA6C,UAACC,MAAD,EAASC,OAAT,EAAA;EAAA,OAAsB;IACjGD,MAAM,EAANA,MADiG;IAEjGC,OAAO,EAAPA;EAFiG,CAAtB;AAAA,CAA7C,CAAzB;AAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,IAAMC,YAAY,GAAG,CAAA,CAAA,EAAA,aAAA,CAAA,YAAA,EAC1BT,YAAAA,CAAAA,SAAAA,CAAAA,CAAYU,IADc;AAE1B;AACA,UAAA,OAAO,EAAA;EAAA,OAAIC,OAAJ;AAAA,CAHmB,CAArB;AAMP;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;;AACA,IAAMC,IAAI,GAAG,IAAb;AACA","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport ActionTypes from 'constants/action-types';\nimport {createAction} from 'redux-actions';\n\n/**\n * Add data to kepler.gl reducer, prepare map with preset configuration if config is passed.\n * Kepler.gl provides a handy set of utils to parse data from different formats to the `data` object required in dataset. You rarely need to manually format the data obejct.\n *\n * Use `KeplerGlSchema.getConfigToSave` to generate a json blob of the currents instance config.\n * The config object value will always have higher precedence than the options properties.\n *\n * Kepler.gl uses `dataId` in the config to match with loaded dataset. If you pass a config object, you need\n * to match the `info.id` of your dataset to the `dataId` in each `layer`, `filter` and `interactionConfig.tooltips.fieldsToShow`\n *\n * @memberof main\n * @param {Object} data\n * @param {Array<Object>|Object} data.datasets - ***required** datasets can be a dataset or an array of datasets\n * Each dataset object needs to have `info` and `data` property.\n * @param {Object} data.datasets.info -info of a dataset\n * @param {string} data.datasets.info.id - id of this dataset. If config is defined, `id` should matches the `dataId` in config.\n * @param {string} data.datasets.info.label - A display name of this dataset\n * @param {Object} data.datasets.data - ***required** The data object, in a tabular format with 2 properties `fields` and `rows`\n * @param {Array<Object>} data.datasets.data.fields - ***required** Array of fields,\n * @param {string} data.datasets.data.fields.name - ***required** Name of the field,\n * @param {Array<Array>} data.datasets.data.rows - ***required** Array of rows, in a tabular format with `fields` and `rows`\n *\n * @param {Object} data.options\n * @param {boolean} data.options.centerMap `default: true` if `centerMap` is set to `true` kepler.gl will\n * place the map view within the data points boundaries.  `options.centerMap` will override `config.mapState` if passed in.\n * @param {boolean} data.options.readOnly `default: false` if `readOnly` is set to `true`\n * the left setting panel will be hidden\n * @param {boolean} data.options.keepExistingConfig whether to keep exiting map data and associated layer filter  interaction config `default: false`.\n * @param {Object} data.config this object will contain the full kepler.gl instance configuration {mapState, mapStyle, visState}\n * @public\n * @example\n *\n * // app.js\n * import {addDataToMap} from 'kepler.gl/actions';\n *\n * const sampleTripData = {\n *  fields: [\n *    {name: 'tpep_pickup_datetime', format: 'YYYY-M-D H:m:s', type: 'timestamp'},\n *    {name: 'pickup_longitude', format: '', type: 'real'},\n *    {name: 'pickup_latitude', format: '', type: 'real'}\n *  ],\n *  rows: [\n *    ['2015-01-15 19:05:39 +00:00', -73.99389648, 40.75011063],\n *    ['2015-01-15 19:05:39 +00:00', -73.97642517, 40.73981094],\n *    ['2015-01-15 19:05:40 +00:00', -73.96870422, 40.75424576],\n *  ]\n * };\n *\n * const sampleConfig = {\n *   visState: {\n *     filters: [\n *       {\n *         id: 'me',\n *         dataId: 'test_trip_data',\n *         name: 'tpep_pickup_datetime',\n *         type: 'timeRange',\n *         enlarged: true\n *       }\n *     ]\n *   }\n * }\n *\n * this.props.dispatch(\n *   addDataToMap({\n *     datasets: {\n *       info: {\n *         label: 'Sample Taxi Trips in New York City',\n *         id: 'test_trip_data'\n *       },\n *       data: sampleTripData\n *     },\n *     options: {\n *       centerMap: true,\n *       readOnly: false,\n *       keepExistingConfig: false\n *     },\n *     info: {\n *       title: 'Taro and Blue',\n *       description: 'This is my map'\n *     },\n *     config: sampleConfig\n *   })\n * );\n */\nexport const addDataToMap = createAction(ActionTypes.ADD_DATA_TO_MAP, data => data);\n\n/**\n * Reset all sub-reducers to its initial state. This can be used to clear out all configuration in the reducer.\n * @memberof main\n * @public\n */\nexport const resetMapConfig = createAction(ActionTypes.RESET_MAP_CONFIG);\n\n/**\n * Pass config to kepler.gl instance, prepare the state with preset configs.\n * Calling `KeplerGlSchema.parseSavedConfig` to convert saved config before passing it in is required.\n *\n * You can call `receiveMapConfig` before passing in any data. The reducer will store layer and filter config, waiting for\n * data to come in. When data arrives, you can call `addDataToMap` without passing any config, and the reducer will try to match\n * preloaded configs. This behavior is designed to allow asynchronous data loading.\n *\n * It is also useful when you want to prepare the kepler.gl instance with some preset layer and filter settings.\n * **Note** Sequence is important, `receiveMapConfig` needs to be called __before__ data is loaded. Currently kepler.gl doesn't allow calling `receiveMapConfig` after data is loaded.\n * It will reset current configuration first then apply config to it.\n * @memberof main\n * @param {Object} config - ***required** The Config Object\n * @param {Object} options - ***optional** The Option object\n * @param {boolean} options.centerMap `default: true` if `centerMap` is set to `true` kepler.gl will\n * place the map view within the data points boundaries\n * @param {boolean} options.readOnly `default: false` if `readOnly` is set to `true`\n * the left setting panel will be hidden\n * @param {boolean} options.keepExistingConfig whether to keep exiting layer filter and interaction config `default: false`.\n * @param {boolean} options.autoCreateLayers whether to automatically create layers based on dataset columns `default: true`.\n * @public\n * @example\n * import {receiveMapConfig} from 'kepler.gl/actions';\n * import KeplerGlSchema from 'kepler.gl/schemas';\n *\n * const parsedConfig = KeplerGlSchema.parseSavedConfig(config);\n * this.props.dispatch(receiveMapConfig(parsedConfig));\n */\nexport const receiveMapConfig = createAction(ActionTypes.RECEIVE_MAP_CONFIG, (config, options) => ({\n  config,\n  options\n}));\n\n/**\n * Initialize kepler.gl reducer. It is used to pass in `mapboxApiAccessToken` to `mapStyle` reducer.\n * @memberof main\n * @param {object} payload\n * @param payload.mapboxApiAccessToken - mapboxApiAccessToken to be saved to mapStyle reducer\n * @param payload.mapboxApiUrl - mapboxApiUrl to be saved to mapStyle reducer.\n * @param payload.mapStylesReplaceDefault - mapStylesReplaceDefault to be saved to mapStyle reducer\n * @param payload.initialUiState - initial ui state\n * @type {typeof import('./actions').keplerGlInit}\n * @public\n */\nexport const keplerGlInit = createAction(\n  ActionTypes.INIT,\n  // @ts-ignore\n  payload => payload\n);\n\n/**\n * This declaration is needed to group actions in docs\n */\n/**\n * Main kepler.gl actions, these actions handles loading data and config into kepler.gl reducer. These actions\n * is listened by all subreducers,\n * @public\n */\n/* eslint-disable no-unused-vars */\n// @ts-ignore\nconst main = null;\n/* eslint-enable no-unused-vars */\n"]},"metadata":{},"sourceType":"script"}