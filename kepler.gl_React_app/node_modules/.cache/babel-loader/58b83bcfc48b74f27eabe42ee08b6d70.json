{"ast":null,"code":"import { cutPolylineByGrid, cutPolygonByGrid } from './cut-by-grid';\nimport { getPointAtIndex, push } from './utils';\nconst DEFAULT_MAX_LATITUDE = 85.051129;\nexport function cutPolylineByMercatorBounds(positions, options) {\n  const {\n    size = 2,\n    startIndex = 0,\n    endIndex = positions.length,\n    normalize = true\n  } = options || {};\n  const newPositions = positions.slice(startIndex, endIndex);\n  wrapLongitudesForShortestPath(newPositions, size, 0, endIndex - startIndex);\n  const parts = cutPolylineByGrid(newPositions, {\n    size,\n    broken: true,\n    gridResolution: 360,\n    gridOffset: [-180, -180]\n  });\n  if (normalize) {\n    for (const part of parts) {\n      shiftLongitudesIntoRange(part, size);\n    }\n  }\n  return parts;\n}\nexport function cutPolygonByMercatorBounds(positions) {\n  let holeIndices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let options = arguments.length > 2 ? arguments[2] : undefined;\n  const {\n    size = 2,\n    normalize = true,\n    edgeTypes = false\n  } = options || {};\n  holeIndices = holeIndices || [];\n  const newPositions = [];\n  const newHoleIndices = [];\n  let srcStartIndex = 0;\n  let targetIndex = 0;\n  for (let ringIndex = 0; ringIndex <= holeIndices.length; ringIndex++) {\n    const srcEndIndex = holeIndices[ringIndex] || positions.length;\n    const targetStartIndex = targetIndex;\n    const splitIndex = findSplitIndex(positions, size, srcStartIndex, srcEndIndex);\n    for (let i = splitIndex; i < srcEndIndex; i++) {\n      newPositions[targetIndex++] = positions[i];\n    }\n    for (let i = srcStartIndex; i < splitIndex; i++) {\n      newPositions[targetIndex++] = positions[i];\n    }\n    wrapLongitudesForShortestPath(newPositions, size, targetStartIndex, targetIndex);\n    insertPoleVertices(newPositions, size, targetStartIndex, targetIndex, options === null || options === void 0 ? void 0 : options.maxLatitude);\n    srcStartIndex = srcEndIndex;\n    newHoleIndices[ringIndex] = targetIndex;\n  }\n  newHoleIndices.pop();\n  const parts = cutPolygonByGrid(newPositions, newHoleIndices, {\n    size,\n    gridResolution: 360,\n    gridOffset: [-180, -180],\n    edgeTypes\n  });\n  if (normalize) {\n    for (const part of parts) {\n      shiftLongitudesIntoRange(part.positions, size);\n    }\n  }\n  return parts;\n}\nfunction findSplitIndex(positions, size, startIndex, endIndex) {\n  let maxLat = -1;\n  let pointIndex = -1;\n  for (let i = startIndex + 1; i < endIndex; i += size) {\n    const lat = Math.abs(positions[i]);\n    if (lat > maxLat) {\n      maxLat = lat;\n      pointIndex = i - 1;\n    }\n  }\n  return pointIndex;\n}\nfunction insertPoleVertices(positions, size, startIndex, endIndex) {\n  let maxLatitude = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : DEFAULT_MAX_LATITUDE;\n  const firstLng = positions[startIndex];\n  const lastLng = positions[endIndex - size];\n  if (Math.abs(firstLng - lastLng) > 180) {\n    const p = getPointAtIndex(positions, 0, size, startIndex);\n    p[0] += Math.round((lastLng - firstLng) / 360) * 360;\n    push(positions, p);\n    p[1] = Math.sign(p[1]) * maxLatitude;\n    push(positions, p);\n    p[0] = firstLng;\n    push(positions, p);\n  }\n}\nfunction wrapLongitudesForShortestPath(positions, size, startIndex, endIndex) {\n  let prevLng = positions[0];\n  let lng;\n  for (let i = startIndex; i < endIndex; i += size) {\n    lng = positions[i];\n    const delta = lng - prevLng;\n    if (delta > 180 || delta < -180) {\n      lng -= Math.round(delta / 360) * 360;\n    }\n    positions[i] = prevLng = lng;\n  }\n}\nfunction shiftLongitudesIntoRange(positions, size) {\n  let refLng;\n  const pointCount = positions.length / size;\n  for (let i = 0; i < pointCount; i++) {\n    refLng = positions[i * size];\n    if ((refLng + 180) % 360 !== 0) {\n      break;\n    }\n  }\n  const delta = -Math.round(refLng / 360) * 360;\n  if (delta === 0) {\n    return;\n  }\n  for (let i = 0; i < pointCount; i++) {\n    positions[i * size] += delta;\n  }\n}","map":{"version":3,"sources":["../../src/cut-by-mercator-bounds.ts"],"names":["cutPolylineByGrid","cutPolygonByGrid","getPointAtIndex","push","DEFAULT_MAX_LATITUDE","cutPolylineByMercatorBounds","positions","options","size","startIndex","endIndex","length","normalize","newPositions","slice","wrapLongitudesForShortestPath","parts","broken","gridResolution","gridOffset","part","shiftLongitudesIntoRange","cutPolygonByMercatorBounds","holeIndices","edgeTypes","newHoleIndices","srcStartIndex","targetIndex","ringIndex","srcEndIndex","targetStartIndex","splitIndex","findSplitIndex","i","insertPoleVertices","maxLatitude","pop","maxLat","pointIndex","lat","Math","abs","firstLng","lastLng","p","round","sign","prevLng","lng","delta","refLng","pointCount"],"mappings":"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","sourcesContent":["import {cutPolylineByGrid, cutPolygonByGrid} from './cut-by-grid';\nimport {getPointAtIndex, push} from './utils';\nimport type {Polygon} from './cut-by-grid';\nimport type {NumericArray} from '@math.gl/core';\n\n// https://en.wikipedia.org/wiki/Web_Mercator_projection\nconst DEFAULT_MAX_LATITUDE = 85.051129;\n\n/** https://user-images.githubusercontent.com/2059298/78465769-938b7a00-76ae-11ea-9b95-1f4c26425ab9.png */\nexport function cutPolylineByMercatorBounds(\n  positions: Readonly<NumericArray>,\n  options?: {\n    size?: number;\n    startIndex?: number;\n    endIndex?: number;\n    normalize?: boolean;\n  }\n): number[][] {\n  const {size = 2, startIndex = 0, endIndex = positions.length, normalize = true} = options || {};\n\n  // Remap longitudes so that each segment takes the shorter path\n  const newPositions = positions.slice(startIndex, endIndex);\n  wrapLongitudesForShortestPath(newPositions, size, 0, endIndex - startIndex);\n\n  const parts = cutPolylineByGrid(newPositions, {\n    size,\n    broken: true,\n    gridResolution: 360,\n    gridOffset: [-180, -180]\n  }) as number[][];\n\n  if (normalize) {\n    // Each part is guaranteed to be in a single copy of the world\n    // Map longitudes back to [-180, 180]\n    for (const part of parts) {\n      shiftLongitudesIntoRange(part, size);\n    }\n  }\n  return parts;\n}\n\n/** https://user-images.githubusercontent.com/2059298/78465770-94241080-76ae-11ea-809a-6a8534dac1d9.png */\nexport function cutPolygonByMercatorBounds(\n  positions: Readonly<NumericArray>,\n  holeIndices: Readonly<NumericArray> | null = null,\n  options?: {\n    size?: number;\n    normalize?: boolean;\n    maxLatitude?: number;\n    edgeTypes?: boolean;\n  }\n): Polygon[] {\n  const {size = 2, normalize = true, edgeTypes = false} = options || {};\n  holeIndices = holeIndices || [];\n  const newPositions: number[] = [];\n  const newHoleIndices: number[] = [];\n  let srcStartIndex = 0;\n  let targetIndex = 0;\n\n  for (let ringIndex = 0; ringIndex <= holeIndices.length; ringIndex++) {\n    // srcStartIndex/srcEndIndex define the ring in the original positions\n    const srcEndIndex = holeIndices[ringIndex] || positions.length;\n    // targetStartIndex/targetIndex define the ring in newPositions\n    const targetStartIndex = targetIndex;\n\n    // In case the ring contains a pole (e.g. Antarctica), we'll have to insert vertices\n    // The insertion point is defined by the vertex closest to the pole\n    // Split the the ring by the insertion point when copying to newPositions\n    const splitIndex = findSplitIndex(positions, size, srcStartIndex, srcEndIndex);\n    for (let i = splitIndex; i < srcEndIndex; i++) {\n      newPositions[targetIndex++] = positions[i];\n    }\n    for (let i = srcStartIndex; i < splitIndex; i++) {\n      newPositions[targetIndex++] = positions[i];\n    }\n\n    // Remap longitudes so that each segment takes the shorter path\n    wrapLongitudesForShortestPath(newPositions, size, targetStartIndex, targetIndex);\n\n    // Handle the case when the ring contains a pole\n    insertPoleVertices(newPositions, size, targetStartIndex, targetIndex, options?.maxLatitude);\n\n    srcStartIndex = srcEndIndex;\n    newHoleIndices[ringIndex] = targetIndex;\n  }\n  newHoleIndices.pop();\n\n  const parts = cutPolygonByGrid(newPositions, newHoleIndices, {\n    size,\n    gridResolution: 360,\n    gridOffset: [-180, -180],\n    edgeTypes\n  });\n\n  if (normalize) {\n    // Each part is guaranteed to be in a single copy of the world\n    // Map longitudes back to [-180, 180]\n    for (const part of parts) {\n      // @ts-expect-error (mutates readonly array) May mutate newPositions, which is created by us\n      shiftLongitudesIntoRange(part.positions, size);\n    }\n  }\n  return parts;\n}\n\n/* Helpers */\n\n// See comments for insertPoleVertices\nfunction findSplitIndex(\n  positions: Readonly<NumericArray>,\n  size: number,\n  startIndex: number,\n  endIndex: number\n): number {\n  let maxLat = -1;\n  let pointIndex = -1;\n  for (let i = startIndex + 1; i < endIndex; i += size) {\n    const lat = Math.abs(positions[i]);\n    if (lat > maxLat) {\n      maxLat = lat;\n      pointIndex = i - 1;\n    }\n  }\n  return pointIndex;\n}\n\n// https://user-images.githubusercontent.com/2059298/78857483-5987e400-79de-11ea-98fc-0631287a8431.png\n//\n// If the polygon contains a pole, to tesselate it correctly, we need to insert the edge\n// of map into the polygon. This requires adding two vertices that represent the pole, by\n// drawing a perpendicular line to the Mercator map edge from a selected vertex on the ring.\n//\n// We select the insertion position carefully so that the inserted line segments do not\n// intersect with the ring itself. This is ensured by findSplitIndex, which returns the\n// vertex closest to the pole.\nfunction insertPoleVertices(\n  positions: number[],\n  size: number,\n  startIndex: number,\n  endIndex: number,\n  maxLatitude: number = DEFAULT_MAX_LATITUDE\n): void {\n  // Check if the ring contains a pole\n  const firstLng = positions[startIndex];\n  const lastLng = positions[endIndex - size];\n  if (Math.abs(firstLng - lastLng) > 180) {\n    // The ring does not make a round trip\n    // Add the nearest pole to the vertices so that the polygon tesselates correctly\n    const p = getPointAtIndex(positions, 0, size, startIndex);\n    // Copy the first vertex to the world of the last vertex\n    p[0] += Math.round((lastLng - firstLng) / 360) * 360;\n    push(positions, p);\n    // Project the copied vertex to the edge of the map\n    p[1] = Math.sign(p[1]) * maxLatitude;\n    push(positions, p);\n    // Project the first vertex to the edge of the map\n    p[0] = firstLng;\n    push(positions, p);\n  }\n}\n\nfunction wrapLongitudesForShortestPath(\n  positions: NumericArray,\n  size: number,\n  startIndex: number,\n  endIndex: number\n): void {\n  let prevLng: number = positions[0];\n  let lng: number;\n  for (let i = startIndex; i < endIndex; i += size) {\n    lng = positions[i];\n    const delta = lng - prevLng;\n    if (delta > 180 || delta < -180) {\n      lng -= Math.round(delta / 360) * 360;\n    }\n    positions[i] = prevLng = lng;\n  }\n}\n\nfunction shiftLongitudesIntoRange(positions: NumericArray, size: number): void {\n  let refLng: number;\n  const pointCount = positions.length / size;\n\n  // Find a longitude that is not on the edge of a world\n  // Which we will use to determine which world copy it is\n  for (let i = 0; i < pointCount; i++) {\n    refLng = positions[i * size];\n    if ((refLng + 180) % 360 !== 0) {\n      break;\n    }\n  }\n\n  const delta = -Math.round(refLng / 360) * 360;\n  if (delta === 0) {\n    return;\n  }\n  for (let i = 0; i < pointCount; i++) {\n    positions[i * size] += delta;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}