{"ast":null,"code":"import assert from '../env-utils/assert';\nvar VERSION = typeof \"2.3.13\" !== 'undefined' ? \"2.3.13\" : '';\nexport function validateLoaderVersion(loader) {\n  var coreVersion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : VERSION;\n  assert(loader, 'no loader provided');\n  var loaderVersion = loader.version;\n  if (!coreVersion || !loaderVersion) {\n    return;\n  }\n  coreVersion = parseVersion(coreVersion);\n  loaderVersion = parseVersion(loaderVersion);\n}\nfunction parseVersion(version) {\n  var parts = version.split('.').map(Number);\n  return {\n    major: parts[0],\n    minor: parts[1]\n  };\n}","map":{"version":3,"sources":["../../../../src/lib/worker-loader-utils/validate-loader-version.js"],"names":["assert","VERSION","validateLoaderVersion","loader","coreVersion","loaderVersion","version","parseVersion","parts","split","map","Number","major","minor"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,qBAAnB;AAKA,IAAMC,OAAO,GAAG,OAAA,QAAA,KAAuB,WAAvB,GAAA,QAAA,GAAmD,EAAnE;AAGA,OAAO,SAASC,qBAAT,CAA+BC,MAA/B,EAA8D;EAAA,IAAvBC,WAAuB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAATH,OAAS;EACnED,MAAM,CAACG,MAAD,EAAS,oBAAT,CAANH;EAEA,IAAIK,aAAa,GAAGF,MAAM,CAACG,OAA3B;EACA,IAAI,CAACF,WAAD,IAAgB,CAACC,aAArB,EAAoC;IAClC;EACD;EAEDD,WAAW,GAAGG,YAAY,CAACH,WAAD,CAA1BA;EACAC,aAAa,GAAGE,YAAY,CAACF,aAAD,CAA5BA;AASD;AAED,SAASE,YAAT,CAAsBD,OAAtB,EAA+B;EAC7B,IAAME,KAAK,GAAGF,OAAO,CAACG,KAARH,CAAc,GAAdA,CAAAA,CAAmBI,GAAnBJ,CAAuBK,MAAvBL,CAAd;EACA,OAAO;IAACM,KAAK,EAAEJ,KAAK,CAAC,CAAD,CAAb;IAAkBK,KAAK,EAAEL,KAAK,CAAC,CAAD;EAA9B,CAAP;AACD","sourcesContent":["import assert from '../env-utils/assert';\n\n// __VERSION__ is injected by babel-plugin-version-inline\n\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : '';\n\n// Returns `true` if the two versions are compatible\nexport function validateLoaderVersion(loader, coreVersion = VERSION) {\n  assert(loader, 'no loader provided');\n\n  let loaderVersion = loader.version;\n  if (!coreVersion || !loaderVersion) {\n    return;\n  }\n\n  coreVersion = parseVersion(coreVersion);\n  loaderVersion = parseVersion(loaderVersion);\n\n  // TODO enable when fix the __version__ injection\n  // assert(\n  //   coreVersion.major === loaderVersion.major && coreVersion.minor <= loaderVersion.minor,\n  //   `loader: ${loader.name} is not compatible. ${coreVersion.major}.${\n  //     coreVersion.minor\n  //   }+ is required.`\n  // );\n}\n\nfunction parseVersion(version) {\n  const parts = version.split('.').map(Number);\n  return {major: parts[0], minor: parts[1]};\n}\n"]},"metadata":{},"sourceType":"module"}