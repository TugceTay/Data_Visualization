{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\nvar _styledComponents = require(\"../common/styled-components\");\nvar _icons = require(\"../common/icons\");\nvar _mapLayerSelector = _interopRequireDefault(require(\"../common/map-layer-selector\"));\nvar _mapControlTooltip = _interopRequireDefault(require(\"./map-control-tooltip\"));\nvar _mapControlPanel = _interopRequireDefault(require(\"./map-control-panel\"));\n\n// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nLayerSelectorPanelFactory.deps = [_mapControlTooltip[\"default\"], _mapControlPanel[\"default\"]];\nfunction LayerSelectorPanelFactory(MapControlTooltip, MapControlPanel) {\n  /** @type {import('./layer-selector-panel').LayerSelectorPanelComponent} */\n  var LayerSelectorPanel = function LayerSelectorPanel(_ref) {\n    var onMapToggleLayer = _ref.onMapToggleLayer,\n      onToggleMapControl = _ref.onToggleMapControl,\n      layers = _ref.layers,\n      layersToRender = _ref.layersToRender,\n      isSplit = _ref.isSplit,\n      mapControls = _ref.mapControls,\n      readOnly = _ref.readOnly;\n    var visibleLayers = (mapControls === null || mapControls === void 0 ? void 0 : mapControls.visibleLayers) || {};\n    var _ref2 = visibleLayers || {},\n      isActive = _ref2.active,\n      show = _ref2.show,\n      disableClose = _ref2.disableClose;\n    var legendLayers = (0, _react.useMemo)(function () {\n      return layers.filter(function (_ref3) {\n        var config = _ref3.config;\n        return config.isVisible;\n      }).map(function (_ref4) {\n        var id = _ref4.id,\n          config = _ref4.config;\n        return {\n          id: id,\n          name: config.label,\n          // layer\n          isVisible: layersToRender[id]\n        };\n      });\n    }, [layers, layersToRender]);\n    var isVisible = (0, _react.useMemo)(function () {\n      return isSplit && show && readOnly !== true;\n    }, [isSplit, show, readOnly]);\n    var onToggleMenuPanel = (0, _react.useCallback)(function (event) {\n      event.preventDefault();\n      onToggleMapControl('visibleLayers');\n    }, [onToggleMapControl]);\n    return isVisible ? !isActive ? /*#__PURE__*/_react[\"default\"].createElement(_styledComponents.MapControlButton, {\n      key: 1,\n      onClick: onToggleMenuPanel,\n      className: (0, _classnames[\"default\"])('map-control-button', 'toggle-layer', {\n        isActive: isActive\n      }),\n      \"data-tip\": true,\n      \"data-for\": \"toggle-layer\"\n    }, /*#__PURE__*/_react[\"default\"].createElement(_icons.Layers, {\n      height: \"22px\"\n    }), /*#__PURE__*/_react[\"default\"].createElement(MapControlTooltip, {\n      id: \"toggle-layer\",\n      message: isActive ? 'tooltip.hideLayerPanel' : 'tooltip.showLayerPanel'\n    })) : /*#__PURE__*/_react[\"default\"].createElement(MapControlPanel, {\n      header: \"header.visibleLayers\",\n      onClick: onToggleMenuPanel,\n      disableClose: disableClose\n    }, /*#__PURE__*/_react[\"default\"].createElement(_mapLayerSelector[\"default\"], {\n      layers: legendLayers,\n      onMapToggleLayer: onMapToggleLayer\n    })) : null;\n  };\n  LayerSelectorPanel.displayName = 'LayerSelectorPanel';\n  return /*#__PURE__*/_react[\"default\"].memo(LayerSelectorPanel);\n}\nvar _default = LayerSelectorPanelFactory;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../../../src/components/map/layer-selector-panel.js"],"names":["LayerSelectorPanelFactory","deps","MapControlTooltipFactory","MapControlPanelFactory","MapControlTooltip","MapControlPanel","LayerSelectorPanel","onMapToggleLayer","onToggleMapControl","layers","layersToRender","isSplit","mapControls","readOnly","visibleLayers","active","isActive","show","disableClose","legendLayers","filter","config","isVisible","map","id","name","label","onToggleMenuPanel","event","preventDefault","displayName","React","memo"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport React, {useCallback, useMemo} from 'react';\nimport classnames from 'classnames';\n\nimport {MapControlButton} from 'components/common/styled-components';\nimport {Layers} from '../common/icons';\nimport MapLayerSelector from '../common/map-layer-selector';\nimport MapControlTooltipFactory from './map-control-tooltip';\nimport MapControlPanelFactory from './map-control-panel';\n\nLayerSelectorPanelFactory.deps = [MapControlTooltipFactory, MapControlPanelFactory];\n\nfunction LayerSelectorPanelFactory(MapControlTooltip, MapControlPanel) {\n  /** @type {import('./layer-selector-panel').LayerSelectorPanelComponent} */\n  const LayerSelectorPanel = ({\n    onMapToggleLayer,\n    onToggleMapControl,\n    layers,\n    layersToRender,\n    isSplit,\n    mapControls,\n    readOnly\n  }) => {\n    const visibleLayers = mapControls?.visibleLayers || {};\n    const {active: isActive, show, disableClose} = visibleLayers || {};\n\n    const legendLayers = useMemo(\n      () =>\n        layers\n          .filter(({config}) => config.isVisible)\n          .map(({id, config}) => ({\n            id,\n            name: config.label,\n            // layer\n            isVisible: layersToRender[id]\n          })),\n      [layers, layersToRender]\n    );\n\n    const isVisible = useMemo(() => isSplit && show && readOnly !== true, [\n      isSplit,\n      show,\n      readOnly\n    ]);\n\n    const onToggleMenuPanel = useCallback(\n      event => {\n        event.preventDefault();\n        onToggleMapControl('visibleLayers');\n      },\n      [onToggleMapControl]\n    );\n\n    return isVisible ? (\n      (!isActive ? (\n        <MapControlButton\n          key={1}\n          onClick={onToggleMenuPanel}\n          className={classnames('map-control-button', 'toggle-layer', {isActive})}\n          data-tip\n          data-for=\"toggle-layer\"\n        >\n          <Layers height=\"22px\" />\n          <MapControlTooltip\n            id=\"toggle-layer\"\n            message={isActive ? 'tooltip.hideLayerPanel' : 'tooltip.showLayerPanel'}\n          />\n        </MapControlButton>\n      ) : (\n        <MapControlPanel\n          header=\"header.visibleLayers\"\n          onClick={onToggleMenuPanel}\n          disableClose={disableClose}\n        >\n          <MapLayerSelector layers={legendLayers} onMapToggleLayer={onMapToggleLayer} />\n        </MapControlPanel>\n      ))\n    ) : null;\n  };\n\n  LayerSelectorPanel.displayName = 'LayerSelectorPanel';\n\n  return React.memo(LayerSelectorPanel);\n}\n\nexport default LayerSelectorPanelFactory;\n"]},"metadata":{},"sourceType":"script"}