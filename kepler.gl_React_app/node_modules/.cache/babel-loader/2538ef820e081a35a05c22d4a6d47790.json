{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.layerConfigChange = layerConfigChange;\nexports.layerTextLabelChange = layerTextLabelChange;\nexports.layerTypeChange = layerTypeChange;\nexports.layerVisualChannelConfigChange = layerVisualChannelConfigChange;\nexports.layerVisConfigChange = layerVisConfigChange;\nexports.layerColorUIChange = layerColorUIChange;\nexports.updateLayerBlending = updateLayerBlending;\nexports.interactionConfigChange = interactionConfigChange;\nexports.setFilter = setFilter;\nexports.setFilterAnimationTime = setFilterAnimationTime;\nexports.setFilterAnimationWindow = setFilterAnimationWindow;\nexports.addFilter = addFilter;\nexports.addLayer = addLayer;\nexports.reorderLayer = reorderLayer;\nexports.removeFilter = removeFilter;\nexports.removeLayer = removeLayer;\nexports.duplicateLayer = duplicateLayer;\nexports.removeDataset = removeDataset;\nexports.showDatasetTable = showDatasetTable;\nexports.sortTableColumn = sortTableColumn;\nexports.pinTableColumn = pinTableColumn;\nexports.copyTableColumn = copyTableColumn;\nexports.updateVisData = updateVisData;\nexports.renameDataset = renameDataset;\nexports.toggleFilterAnimation = toggleFilterAnimation;\nexports.updateFilterAnimationSpeed = updateFilterAnimationSpeed;\nexports.setLayerAnimationTime = setLayerAnimationTime;\nexports.updateLayerAnimationSpeed = updateLayerAnimationSpeed;\nexports.toggleLayerAnimation = toggleLayerAnimation;\nexports.toggleLayerAnimationControl = toggleLayerAnimationControl;\nexports.enlargeFilter = enlargeFilter;\nexports.toggleFilterFeature = toggleFilterFeature;\nexports.onLayerHover = onLayerHover;\nexports.onLayerClick = onLayerClick;\nexports.onMapClick = onMapClick;\nexports.onMouseMove = onMouseMove;\nexports.toggleLayerForMap = toggleLayerForMap;\nexports.setFilterPlot = setFilterPlot;\nexports.setMapInfo = setMapInfo;\nexports.loadFiles = loadFiles;\nexports.loadNextFile = loadNextFile;\nexports.loadFilesSuccess = loadFilesSuccess;\nexports.loadFileStepSuccess = loadFileStepSuccess;\nexports.loadFilesErr = loadFilesErr;\nexports.setFeatures = setFeatures;\nexports.setPolygonFilterLayer = setPolygonFilterLayer;\nexports.setSelectedFeature = setSelectedFeature;\nexports.deleteFeature = deleteFeature;\nexports.setEditorMode = setEditorMode;\nexports.applyCPUFilter = applyCPUFilter;\nexports.toggleEditorVisibility = toggleEditorVisibility;\nexports.nextFileBatch = nextFileBatch;\nexports.processFileContent = processFileContent;\nexports.setLayerAnimationTimeConfig = setLayerAnimationTimeConfig;\nexports.setFilterAnimationTimeConfig = setFilterAnimationTimeConfig;\nvar _actionTypes = _interopRequireDefault(require(\"../constants/action-types\"));\n\n// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n// vis-state-reducer\n\n/**\n * Update layer base config: dataId, label, column, isVisible\n * @param oldLayer - layer to be updated\n * @param newConfig - new config to be merged with old config\n * @returns action\n * @type {typeof import('./vis-state-actions').layerConfigChange}\n * @public\n */\nfunction layerConfigChange(oldLayer, newConfig) {\n  return {\n    type: _actionTypes[\"default\"].LAYER_CONFIG_CHANGE,\n    oldLayer: oldLayer,\n    newConfig: newConfig\n  };\n}\n/**\n * Update layer text label\n * @param oldLayer - layer to be updated\n * @param idx -`idx` of text label to be updated\n * @param prop - `prop` of text label, e,g, `anchor`, `alignment`, `color`, `size`, `field`\n * @param value - new value\n * @returns action\n * @type {typeof import('./vis-state-actions').layerTextLabelChange}\n * @public\n */\n\nfunction layerTextLabelChange(oldLayer, idx, prop, value) {\n  return {\n    type: _actionTypes[\"default\"].LAYER_TEXT_LABEL_CHANGE,\n    oldLayer: oldLayer,\n    idx: idx,\n    prop: prop,\n    value: value\n  };\n}\n/**\n * Update layer type. Previews layer config will be copied if applicable.\n * @param oldLayer - layer to be updated\n * @param newType - new type\n * @returns action\n * @type {typeof import('./vis-state-actions').layerTypeChange}\n * @public\n */\n\nfunction layerTypeChange(oldLayer, newType) {\n  return {\n    type: _actionTypes[\"default\"].LAYER_TYPE_CHANGE,\n    oldLayer: oldLayer,\n    newType: newType\n  };\n}\n/**\n * Update layer visual channel\n * @memberof visStateActions\n * @param oldLayer - layer to be updated\n * @param newConfig - new visual channel config\n * @param channel - channel to be updated\n * @returns action\n * @type {typeof import('./vis-state-actions').layerVisualChannelConfigChange}\n * @public\n */\n\nfunction layerVisualChannelConfigChange(oldLayer, newConfig, channel) {\n  return {\n    type: _actionTypes[\"default\"].LAYER_VISUAL_CHANNEL_CHANGE,\n    oldLayer: oldLayer,\n    newConfig: newConfig,\n    channel: channel\n  };\n}\n/**\n * Update layer `visConfig`\n * @memberof visStateActions\n * @param oldLayer - layer to be updated\n * @param newVisConfig - new visConfig as a key value map: e.g. `{opacity: 0.8}`\n * @returns action\n * @type {typeof import('./vis-state-actions').layerVisConfigChange}\n * @public\n */\n\nfunction layerVisConfigChange(oldLayer, newVisConfig) {\n  return {\n    type: _actionTypes[\"default\"].LAYER_VIS_CONFIG_CHANGE,\n    oldLayer: oldLayer,\n    newVisConfig: newVisConfig\n  };\n}\n/**\n * Set the color palette ui for layer color\n * @memberOf visStateActions\n * @param oldLayer - layer to be updated\n * @param prop - which color prop\n * @param newConfig - to be merged\n * @returns action\n * @type {typeof import('./vis-state-actions').layerColorUIChange}\n * @public\n */\n\nfunction layerColorUIChange(oldLayer, prop, newConfig) {\n  return {\n    type: _actionTypes[\"default\"].LAYER_COLOR_UI_CHANGE,\n    oldLayer: oldLayer,\n    prop: prop,\n    newConfig: newConfig\n  };\n}\n/**\n * Update layer blending mode\n * @memberof visStateActions\n * @param mode one of `additive`, `normal` and `subtractive`\n * @returns action\n * @type {typeof import('./vis-state-actions').updateLayerBlending}\n * @public\n */\n\nfunction updateLayerBlending(mode) {\n  return {\n    type: _actionTypes[\"default\"].UPDATE_LAYER_BLENDING,\n    mode: mode\n  };\n}\n/**\n * Update `interactionConfig`\n * @memberof visStateActions\n * @param config - new config as key value map: `{tooltip: {enabled: true}}`\n * @returns action\n * @type {typeof import('./vis-state-actions').interactionConfigChange}\n * @public\n */\n\nfunction interactionConfigChange(config) {\n  return {\n    type: _actionTypes[\"default\"].INTERACTION_CONFIG_CHANGE,\n    config: config\n  };\n}\n/**\n * Update filter property\n * @memberof visStateActions\n * @param idx -`idx` of filter to be updated\n * @param prop - `prop` of filter, e,g, `dataId`, `name`, `value`\n * @param value - new value\n * @param valueIndex - dataId index\n * @returns action\n * @type {typeof import('./vis-state-actions').setFilter}\n * @public\n */\n\nfunction setFilter(idx, prop, value, valueIndex) {\n  return {\n    type: _actionTypes[\"default\"].SET_FILTER,\n    idx: idx,\n    prop: prop,\n    value: value,\n    valueIndex: valueIndex\n  };\n}\n/**\n * Same as Update filter\n * @memberof visStateActions\n * @param idx -`idx` of filter to be updated\n * @param prop - `prop` of filter, e,g, `dataId`, `name`, `value`\n * @param value - new value\n * @param valueIndex - dataId index\n * @returns action\n * @type {typeof import('./vis-state-actions').setFilterAnimationTime}\n * @public\n */\n\nfunction setFilterAnimationTime(idx, prop, value, valueIndex) {\n  return {\n    type: _actionTypes[\"default\"].SET_FILTER_ANIMATION_TIME,\n    idx: idx,\n    prop: prop,\n    value: value,\n    valueIndex: valueIndex\n  };\n}\n/**\n * Same as Update filter\n * @memberof visStateActions\n * @type {typeof import('./vis-state-actions').setFilterAnimationWindow}\n * @public\n */\n\nfunction setFilterAnimationWindow(_ref) {\n  var id = _ref.id,\n    animationWindow = _ref.animationWindow;\n  return {\n    type: _actionTypes[\"default\"].SET_FILTER_ANIMATION_WINDOW,\n    id: id,\n    animationWindow: animationWindow\n  };\n}\n/**\n * Add a new filter\n * @memberof visStateActions\n * @param dataId - dataset `id` this new filter is associated with\n * @returns action\n * @type {typeof import('./vis-state-actions').addFilter}\n * @public\n */\n\nfunction addFilter(dataId) {\n  return {\n    type: _actionTypes[\"default\"].ADD_FILTER,\n    dataId: dataId\n  };\n}\n/**\n * Add a new layer\n * @memberof visStateActions\n * @param config - new layer config\n * @returns action\n * @type {typeof import('./vis-state-actions').addLayer}\n * @public\n */\n\nfunction addLayer(config) {\n  return {\n    type: _actionTypes[\"default\"].ADD_LAYER,\n    config: config\n  };\n}\n/**\n * Reorder layer, order is an array of layer indexes, index 0 will be the one at the bottom\n * @memberof visStateActions\n * @param order an array of layer indexes\n * @returns action\n * @type {typeof import('./vis-state-actions').reorderLayer}\n * @public\n * @example\n *\n * // bring `layers[1]` below `layers[0]`, the sequence layers will be rendered is `1`, `0`, `2`, `3`.\n * // `1` will be at the bottom, `3` will be at the top.\n * this.props.dispatch(reorderLayer([1, 0, 2, 3]));\n */\n\nfunction reorderLayer(order) {\n  return {\n    type: _actionTypes[\"default\"].REORDER_LAYER,\n    order: order\n  };\n}\n/**\n * Remove a filter from `visState.filters`, once a filter is removed, data will be re-filtered and layer will be updated\n * @memberof visStateActions\n * @param idx idx of filter to be removed\n * @returns action\n * @type {typeof import('./vis-state-actions').removeFilter}\n * @public\n */\n\nfunction removeFilter(idx) {\n  return {\n    type: _actionTypes[\"default\"].REMOVE_FILTER,\n    idx: idx\n  };\n}\n/**\n * Remove a layer\n * @memberof visStateActions\n * @param idx idx of layer to be removed\n * @returns action\n * @type {typeof import('./vis-state-actions').removeLayer}\n * @public\n */\n\nfunction removeLayer(idx) {\n  return {\n    type: _actionTypes[\"default\"].REMOVE_LAYER,\n    idx: idx\n  };\n}\n/**\n * Duplicate a layer\n * @memberof visStateActions\n * @param idx idx of layer to be duplicated\n * @returns action\n * @type {typeof import('./vis-state-actions').duplicateLayer}\n * @public\n */\n\nfunction duplicateLayer(idx) {\n  return {\n    type: _actionTypes[\"default\"].DUPLICATE_LAYER,\n    idx: idx\n  };\n}\n/**\n * Remove a dataset and all layers, filters, tooltip configs that based on it\n * @memberof visStateActions\n * @param dataId dataset id\n * @returns action\n * @type {typeof import('./vis-state-actions').removeDataset}\n * @public\n */\n\nfunction removeDataset(dataId) {\n  return {\n    type: _actionTypes[\"default\"].REMOVE_DATASET,\n    dataId: dataId\n  };\n}\n/**\n * Display dataset table in a modal\n * @memberof visStateActions\n * @param dataId dataset id to show in table\n * @returns action\n * @type {typeof import('./vis-state-actions').showDatasetTable}\n * @public\n */\n\nfunction showDatasetTable(dataId) {\n  return {\n    type: _actionTypes[\"default\"].SHOW_DATASET_TABLE,\n    dataId: dataId\n  };\n}\n/**\n * Sort dataset column, for table display\n * @memberof visStateActions\n * @param dataId\n * @param column\n * @param mode\n * @returns action\n * @type {typeof import('./vis-state-actions').sortTableColumn}\n * @public\n */\n\nfunction sortTableColumn(dataId, column, mode) {\n  return {\n    type: _actionTypes[\"default\"].SORT_TABLE_COLUMN,\n    dataId: dataId,\n    column: column,\n    mode: mode\n  };\n}\n/**\n * Pin dataset column, for table display\n * @param dataId\n * @param column\n * @returns action\n * @type {typeof import('./vis-state-actions').pinTableColumn}\n * @public\n */\n\nfunction pinTableColumn(dataId, column) {\n  return {\n    type: _actionTypes[\"default\"].PIN_TABLE_COLUMN,\n    dataId: dataId,\n    column: column\n  };\n}\n/**\n * Copy column, for table display\n * @param dataId\n * @param column\n * @returns action\n * @type {typeof import('./vis-state-actions').copyTableColumn}\n * @public\n */\n\nfunction copyTableColumn(dataId, column) {\n  return {\n    type: _actionTypes[\"default\"].COPY_TABLE_COLUMN,\n    dataId: dataId,\n    column: column\n  };\n} // * @param dataset.info -info of a dataset\n// * @param dataset.info.id - id of this dataset. If config is defined, `id` should matches the `dataId` in config.\n// * @param dataset.info.label - A display name of this dataset\n// * @param dataset.data - ***required** The data object, in a tabular format with 2 properties `fields` and `rows`\n// * @param dataset.data.fields - ***required** Array of fields,\n// * @param dataset.data.fields.name - ***required** Name of the field,\n// * @param dataset.data.rows - ***required** Array of rows, in a tabular format with `fields` and `rows`\n\n/**\n * Add new dataset to `visState`, with option to load a map config along with the datasets\n * @memberof visStateActions\n * @param datasets - ***required** datasets can be a dataset or an array of datasets\n * Each dataset object needs to have `info` and `data` property.\n * @param {object} options\n * @param options.centerMap `default: true` if `centerMap` is set to `true` kepler.gl will\n * place the map view within the data points boundaries\n * @param options.readOnly `default: false` if `readOnly` is set to `true`\n * the left setting panel will be hidden\n * @param config this object will contain the full kepler.gl instance configuration {mapState, mapStyle, visState}\n * @returns action\n * @type {typeof import('./vis-state-actions').updateVisData}\n * @public\n */\n\nfunction updateVisData(datasets, options, config) {\n  return {\n    type: _actionTypes[\"default\"].UPDATE_VIS_DATA,\n    datasets: datasets,\n    options: options,\n    config: config\n  };\n}\n/**\n * Rename an existing dataset in `visState`\n * @memberof visStateActions\n * @param dataId - ***required** Id of the dataset to update\n * @param label - ***required** New name for the dataset\n * @returns action\n * @type {typeof import('./vis-state-actions').renameDataset}\n * @public\n */\n\nfunction renameDataset(dataId, label) {\n  return {\n    type: _actionTypes[\"default\"].RENAME_DATASET,\n    dataId: dataId,\n    label: label\n  };\n}\n/**\n * Start and end filter animation\n * @memberof visStateActions\n * @param {Number} idx of filter\n * @type {typeof import('./vis-state-actions').toggleFilterAnimation}\n * @returns action\n * @public\n */\n\nfunction toggleFilterAnimation(idx) {\n  return {\n    type: _actionTypes[\"default\"].TOGGLE_FILTER_ANIMATION,\n    idx: idx\n  };\n}\n/**\n * Change filter animation speed\n * @memberof visStateActions\n * @param idx -  `idx` of filter\n * @param speed - `speed` to change it to. `speed` is a multiplier\n * @type {typeof import('./vis-state-actions').updateFilterAnimationSpeed}\n * @returns action\n * @public\n */\n\nfunction updateFilterAnimationSpeed(idx, speed) {\n  return {\n    type: _actionTypes[\"default\"].UPDATE_FILTER_ANIMATION_SPEED,\n    idx: idx,\n    speed: speed\n  };\n}\n/**\n * Reset animation\n * @memberof visStateActions\n * @param value -  Current value of the slider\n * @type {typeof import('./vis-state-actions').setLayerAnimationTime}\n * @returns action\n * @public\n */\n\nfunction setLayerAnimationTime(value) {\n  return {\n    type: _actionTypes[\"default\"].SET_LAYER_ANIMATION_TIME,\n    value: value\n  };\n}\n/**\n * update trip layer animation speed\n * @memberof visStateActions\n * @param speed - `speed` to change it to. `speed` is a multiplier\n * @type {typeof import('./vis-state-actions').updateLayerAnimationSpeed}\n * @returns action\n * @public\n */\n\nfunction updateLayerAnimationSpeed(speed) {\n  return {\n    type: _actionTypes[\"default\"].UPDATE_LAYER_ANIMATION_SPEED,\n    speed: speed\n  };\n}\n/**\n * start end end layer animation\n * @memberof visStateActions\n * @type {typeof import('./vis-state-actions').toggleLayerAnimation}\n * @returns action\n * @public\n */\n\nfunction toggleLayerAnimation() {\n  return {\n    type: _actionTypes[\"default\"].TOGGLE_LAYER_ANIMATION\n  };\n}\n/**\n * hide and show layer animation control\n * @memberof visStateActions\n * @type {typeof import('./vis-state-actions').toggleLayerAnimationControl}\n * @returns action\n * @public\n */\n\nfunction toggleLayerAnimationControl() {\n  return {\n    type: _actionTypes[\"default\"].TOGGLE_LAYER_ANIMATION_CONTROL\n  };\n}\n/**\n * Show larger time filter at bottom for time playback (apply to time filter only)\n * @memberof visStateActions\n * @param idx - index of filter to enlarge\n * @type {typeof import('./vis-state-actions').enlargeFilter}\n * @returns action\n * @public\n */\n\nfunction enlargeFilter(idx) {\n  return {\n    type: _actionTypes[\"default\"].ENLARGE_FILTER,\n    idx: idx\n  };\n}\n/**\n * Show/hide filter feature on map\n * @memberof visStateActions\n * @param idx - index of filter feature to show/hide\n * @type {typeof import('./vis-state-actions').toggleFilterFeature}\n * @return action\n */\n\nfunction toggleFilterFeature(idx) {\n  return {\n    type: _actionTypes[\"default\"].TOGGLE_FILTER_FEATURE,\n    idx: idx\n  };\n}\n/**\n * Trigger layer hover event with hovered object\n * @memberof visStateActions\n * @param info - Object hovered, returned by deck.gl\n * @type {typeof import('./vis-state-actions').onLayerHover}\n * @returns action\n * @public\n */\n\nfunction onLayerHover(info) {\n  return {\n    type: _actionTypes[\"default\"].LAYER_HOVER,\n    info: info\n  };\n}\n/**\n * Trigger layer click event with clicked object\n * @memberof visStateActions\n * @param info - Object clicked, returned by deck.gl\n * @type {typeof import('./vis-state-actions').onLayerClick}\n * @returns action\n * @public\n */\n\nfunction onLayerClick(info) {\n  return {\n    type: _actionTypes[\"default\"].LAYER_CLICK,\n    info: info\n  };\n}\n/**\n * Trigger map click event, unselect clicked object\n * @memberof visStateActions\n * @type {typeof import('./vis-state-actions').onMapClick}\n * @returns action\n * @public\n */\n\nfunction onMapClick() {\n  return {\n    type: _actionTypes[\"default\"].MAP_CLICK\n  };\n}\n/**\n * Trigger map mouse moveevent, payload would be\n * React-map-gl PointerEvent\n * https://uber.github.io/react-map-gl/#/documentation/api-reference/pointer-event\n *\n * @memberof visStateActions\n * @param evt - PointerEvent\n * @type {typeof import('./vis-state-actions').onMouseMove}\n * @returns action\n * @public\n */\n\nfunction onMouseMove(evt) {\n  return {\n    type: _actionTypes[\"default\"].MOUSE_MOVE,\n    evt: evt\n  };\n}\n/**\n * Toggle visibility of a layer in a split map\n * @memberof visStateActions\n * @param mapIndex - index of the split map\n * @param layerId - id of the layer\n * @type {typeof import('./vis-state-actions').toggleLayerForMap}\n * @returns action\n * @public\n */\n\nfunction toggleLayerForMap(mapIndex, layerId) {\n  return {\n    type: _actionTypes[\"default\"].TOGGLE_LAYER_FOR_MAP,\n    mapIndex: mapIndex,\n    layerId: layerId\n  };\n}\n/**\n * Set the property of a filter plot\n * @memberof visStateActions\n * @param idx\n * @param newProp key value mapping of new prop `{yAxis: 'histogram'}`\n * @param valueIndex dataId index\n * @type {typeof import('./vis-state-actions').setFilterPlot}\n * @returns action\n * @public\n */\n\nfunction setFilterPlot(idx, newProp, valueIndex) {\n  return {\n    type: _actionTypes[\"default\"].SET_FILTER_PLOT,\n    idx: idx,\n    newProp: newProp,\n    valueIndex: valueIndex\n  };\n}\n/**\n * Set the property of a filter plot\n * @memberof visStateActions\n * @param info\n * @type {typeof import('./vis-state-actions').setMapInfo}\n * @returns action\n * @public\n */\n\nfunction setMapInfo(info) {\n  return {\n    type: _actionTypes[\"default\"].SET_MAP_INFO,\n    info: info\n  };\n}\n/**\n * Trigger file loading dispatch `addDataToMap` if succeed, or `loadFilesErr` if failed\n * @memberof visStateActions\n * @param files array of fileblob\n * @type {typeof import('./vis-state-actions').loadFiles}\n * @returns action\n * @public\n */\n\nfunction loadFiles(files, onFinish) {\n  return {\n    type: _actionTypes[\"default\"].LOAD_FILES,\n    files: files,\n    onFinish: onFinish\n  };\n}\n/**\n * Called with next file to load\n * @memberof visStateActions\n * @type {typeof import('./vis-state-actions').loadNextFile}\n * @returns action\n * @public\n */\n\nfunction loadNextFile() {\n  return {\n    type: _actionTypes[\"default\"].LOAD_NEXT_FILE\n  };\n}\n/**\n * called when all files are processed and loaded\n * @memberof visStateActions\n * @param result\n * @type {typeof import('./vis-state-actions').loadFilesSuccess}\n * @returns action\n */\n\nfunction loadFilesSuccess(result) {\n  return {\n    type: _actionTypes[\"default\"].LOAD_FILES_SUCCESS,\n    result: result\n  };\n}\n/**\n * called when successfully loaded one file, ready to move on to the next one\n * @memberof visStateActions\n * @param result\n * @type {typeof import('./vis-state-actions').loadFileStepSuccess}\n * @returns action\n */\n\nfunction loadFileStepSuccess(_ref2) {\n  var fileName = _ref2.fileName,\n    fileCache = _ref2.fileCache;\n  return {\n    type: _actionTypes[\"default\"].LOAD_FILE_STEP_SUCCESS,\n    fileName: fileName,\n    fileCache: fileCache\n  };\n}\n/**\n * Trigger loading file error\n * @memberof visStateActions\n * @param  error\n * @type {typeof import('./vis-state-actions').loadFilesErr}\n * @returns action\n * @public\n */\n\nfunction loadFilesErr(fileName, error) {\n  return {\n    type: _actionTypes[\"default\"].LOAD_FILES_ERR,\n    fileName: fileName,\n    error: error\n  };\n}\n/**\n * Store features to state\n * @memberof visStateActions\n * @param features\n * @type {typeof import('./vis-state-actions').setFeatures}\n * @returns action\n */\n\nfunction setFeatures(features) {\n  return {\n    type: _actionTypes[\"default\"].SET_FEATURES,\n    features: features\n  };\n}\n/**\n * It will apply the provide feature as filter to the given layer.\n * If the given feature is already applied as filter to the layer, it will remove the layer from the filter\n * @memberof visStateActions\n * @param layer\n * @param feature\n * @type {typeof import('./vis-state-actions').setPolygonFilterLayer}\n * @returns action\n */\n\nfunction setPolygonFilterLayer(layer, feature) {\n  return {\n    type: _actionTypes[\"default\"].SET_POLYGON_FILTER_LAYER,\n    layer: layer,\n    feature: feature\n  };\n}\n/**\n * Set the current feature to be edited/deleted\n * @memberof visStateActions\n * @param feature\n * @type {typeof import('./vis-state-actions').setSelectedFeature}\n * @returns action\n */\n\nfunction setSelectedFeature(feature) {\n  return {\n    type: _actionTypes[\"default\"].SET_SELECTED_FEATURE,\n    feature: feature\n  };\n}\n/**\n * Delete the given feature\n * @memberof visStateActions\n * @param feature\n * @type {typeof import('./vis-state-actions').deleteFeature}\n * @returns action\n */\n\nfunction deleteFeature(feature) {\n  return {\n    type: _actionTypes[\"default\"].DELETE_FEATURE,\n    feature: feature\n  };\n}\n/** Set the map mode\n * @memberof visStateActions\n * @param mode one of EDITOR_MODES\n * @type {typeof import('./vis-state-actions').setEditorMode}\n * @returns action\n * @public\n * @example\n * import {setMapMode} from 'kepler.gl/actions';\n * import {EDITOR_MODES} from 'kepler.gl/constants';\n *\n * this.props.dispatch(setMapMode(EDITOR_MODES.DRAW_POLYGON));\n */\n\nfunction setEditorMode(mode) {\n  return {\n    type: _actionTypes[\"default\"].SET_EDITOR_MODE,\n    mode: mode\n  };\n}\n/**\n * Trigger CPU filter of selected dataset\n * @memberof visStateActions\n * @param dataId - single dataId or an array of dataIds\n * @type {typeof import('./vis-state-actions').applyCPUFilter}\n * @returns action\n * @public\n */\n\nfunction applyCPUFilter(dataId) {\n  return {\n    type: _actionTypes[\"default\"].APPLY_CPU_FILTER,\n    dataId: dataId\n  };\n}\n/**\n * Toggle editor layer visibility\n * @memberof visStateActions\n * @type {typeof import('./vis-state-actions').toggleEditorVisibility}\n * @return action\n */\n\nfunction toggleEditorVisibility() {\n  return {\n    type: _actionTypes[\"default\"].TOGGLE_EDITOR_VISIBILITY\n  };\n}\n/**\n * Process the next file batch\n * @memberof visStateActions\n * @param payload - batch payload\n * @type {typeof import('./vis-state-actions').nextFileBatch}\n * @return action\n */\n\nfunction nextFileBatch(payload) {\n  return {\n    type: _actionTypes[\"default\"].NEXT_FILE_BATCH,\n    payload: payload\n  };\n}\n/**\n * Process the file content\n * @memberof visStateActions\n * @param payload - the file content\n * @type {typeof import('./vis-state-actions').processFileContent}\n * @return action\n */\n\nfunction processFileContent(payload) {\n  return {\n    type: _actionTypes[\"default\"].PROCESS_FILE_CONTENT,\n    payload: payload\n  };\n}\n/**\n * Set layer animation time format and timezone\n * @memberof visStateActions\n * @param config - {timeFormat: string, timezone: string}\n * @type {typeof import('./vis-state-actions').setLayerAnimationTimeConfig}\n * @return action\n */\n\nfunction setLayerAnimationTimeConfig(config) {\n  return {\n    type: _actionTypes[\"default\"].SET_LAYER_ANIMATION_TIME_CONFIG,\n    config: config\n  };\n}\n/**\n * Set Filter animation time format and timezone\n * @memberof visStateActions\n * @param idx\n * @param config\n * @type {typeof import('./vis-state-actions').setFilterAnimationTimeConfig}\n * @return action\n */\n\nfunction setFilterAnimationTimeConfig(idx, config) {\n  return {\n    type: _actionTypes[\"default\"].SET_FILTER_ANIMATION_TIME_CONFIG,\n    idx: idx,\n    config: config\n  };\n}\n/**\n * This declaration is needed to group actions in docs\n */\n\n/**\n * Actions handled mostly by `visState` reducer.\n * They manage how data is processed, filtered and displayed on the map by operates on layers,\n * filters and interaction settings.\n *\n * @public\n */\n\n/* eslint-disable no-unused-vars */\n// @ts-ignore\n\nvar visStateActions = null;\n/* eslint-enable no-unused-vars */","map":{"version":3,"sources":["../../src/actions/vis-state-actions.js"],"names":["layerConfigChange","oldLayer","newConfig","type","ActionTypes","LAYER_CONFIG_CHANGE","layerTextLabelChange","idx","prop","value","LAYER_TEXT_LABEL_CHANGE","layerTypeChange","newType","LAYER_TYPE_CHANGE","layerVisualChannelConfigChange","channel","LAYER_VISUAL_CHANNEL_CHANGE","layerVisConfigChange","newVisConfig","LAYER_VIS_CONFIG_CHANGE","layerColorUIChange","LAYER_COLOR_UI_CHANGE","updateLayerBlending","mode","UPDATE_LAYER_BLENDING","interactionConfigChange","config","INTERACTION_CONFIG_CHANGE","setFilter","valueIndex","SET_FILTER","setFilterAnimationTime","SET_FILTER_ANIMATION_TIME","setFilterAnimationWindow","id","animationWindow","SET_FILTER_ANIMATION_WINDOW","addFilter","dataId","ADD_FILTER","addLayer","ADD_LAYER","reorderLayer","order","REORDER_LAYER","removeFilter","REMOVE_FILTER","removeLayer","REMOVE_LAYER","duplicateLayer","DUPLICATE_LAYER","removeDataset","REMOVE_DATASET","showDatasetTable","SHOW_DATASET_TABLE","sortTableColumn","column","SORT_TABLE_COLUMN","pinTableColumn","PIN_TABLE_COLUMN","copyTableColumn","COPY_TABLE_COLUMN","updateVisData","datasets","options","UPDATE_VIS_DATA","renameDataset","label","RENAME_DATASET","toggleFilterAnimation","TOGGLE_FILTER_ANIMATION","updateFilterAnimationSpeed","speed","UPDATE_FILTER_ANIMATION_SPEED","setLayerAnimationTime","SET_LAYER_ANIMATION_TIME","updateLayerAnimationSpeed","UPDATE_LAYER_ANIMATION_SPEED","toggleLayerAnimation","TOGGLE_LAYER_ANIMATION","toggleLayerAnimationControl","TOGGLE_LAYER_ANIMATION_CONTROL","enlargeFilter","ENLARGE_FILTER","toggleFilterFeature","TOGGLE_FILTER_FEATURE","onLayerHover","info","LAYER_HOVER","onLayerClick","LAYER_CLICK","onMapClick","MAP_CLICK","onMouseMove","evt","MOUSE_MOVE","toggleLayerForMap","mapIndex","layerId","TOGGLE_LAYER_FOR_MAP","setFilterPlot","newProp","SET_FILTER_PLOT","setMapInfo","SET_MAP_INFO","loadFiles","files","onFinish","LOAD_FILES","loadNextFile","LOAD_NEXT_FILE","loadFilesSuccess","result","LOAD_FILES_SUCCESS","loadFileStepSuccess","fileName","fileCache","LOAD_FILE_STEP_SUCCESS","loadFilesErr","error","LOAD_FILES_ERR","setFeatures","features","SET_FEATURES","setPolygonFilterLayer","layer","feature","SET_POLYGON_FILTER_LAYER","setSelectedFeature","SET_SELECTED_FEATURE","deleteFeature","DELETE_FEATURE","setEditorMode","SET_EDITOR_MODE","applyCPUFilter","APPLY_CPU_FILTER","toggleEditorVisibility","TOGGLE_EDITOR_VISIBILITY","nextFileBatch","payload","NEXT_FILE_BATCH","processFileContent","PROCESS_FILE_CONTENT","setLayerAnimationTimeConfig","SET_LAYER_ANIMATION_TIME_CONFIG","setFilterAnimationTimeConfig","SET_FILTER_ANIMATION_TIME_CONFIG","visStateActions"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAA,YAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,2BAAA,CAAA,CAAA;;AArBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,iBAAT,CAA2BC,QAA3B,EAAqCC,SAArC,EAAgD;EACrD,OAAO;IACLC,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYC,mBADb;IAELJ,QAAQ,EAARA,QAFK;IAGLC,SAAS,EAATA;EAHK,CAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASI,oBAAT,CAA8BL,QAA9B,EAAwCM,GAAxC,EAA6CC,IAA7C,EAAmDC,KAAnD,EAA0D;EAC/D,OAAO;IACLN,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYM,uBADb;IAELT,QAAQ,EAARA,QAFK;IAGLM,GAAG,EAAHA,GAHK;IAILC,IAAI,EAAJA,IAJK;IAKLC,KAAK,EAALA;EALK,CAAP;AAOD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASE,eAAT,CAAyBV,QAAzB,EAAmCW,OAAnC,EAA4C;EACjD,OAAO;IACLT,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYS,iBADb;IAELZ,QAAQ,EAARA,QAFK;IAGLW,OAAO,EAAPA;EAHK,CAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASE,8BAAT,CAAwCb,QAAxC,EAAkDC,SAAlD,EAA6Da,OAA7D,EAAsE;EAC3E,OAAO;IACLZ,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYY,2BADb;IAELf,QAAQ,EAARA,QAFK;IAGLC,SAAS,EAATA,SAHK;IAILa,OAAO,EAAPA;EAJK,CAAP;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASE,oBAAT,CAA8BhB,QAA9B,EAAwCiB,YAAxC,EAAsD;EAC3D,OAAO;IACLf,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYe,uBADb;IAELlB,QAAQ,EAARA,QAFK;IAGLiB,YAAY,EAAZA;EAHK,CAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASE,kBAAT,CAA4BnB,QAA5B,EAAsCO,IAAtC,EAA4CN,SAA5C,EAAuD;EAC5D,OAAO;IACLC,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYiB,qBADb;IAELpB,QAAQ,EAARA,QAFK;IAGLO,IAAI,EAAJA,IAHK;IAILN,SAAS,EAATA;EAJK,CAAP;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASoB,mBAAT,CAA6BC,IAA7B,EAAmC;EACxC,OAAO;IACLpB,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYoB,qBADb;IAELD,IAAI,EAAJA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASE,uBAAT,CAAiCC,MAAjC,EAAyC;EAC9C,OAAO;IACLvB,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYuB,yBADb;IAELD,MAAM,EAANA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASE,SAAT,CAAmBrB,GAAnB,EAAwBC,IAAxB,EAA8BC,KAA9B,EAAqCoB,UAArC,EAAiD;EACtD,OAAO;IACL1B,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAY0B,UADb;IAELvB,GAAG,EAAHA,GAFK;IAGLC,IAAI,EAAJA,IAHK;IAILC,KAAK,EAALA,KAJK;IAKLoB,UAAU,EAAVA;EALK,CAAP;AAOD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASE,sBAAT,CAAgCxB,GAAhC,EAAqCC,IAArC,EAA2CC,KAA3C,EAAkDoB,UAAlD,EAA8D;EACnE,OAAO;IACL1B,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAY4B,yBADb;IAELzB,GAAG,EAAHA,GAFK;IAGLC,IAAI,EAAJA,IAHK;IAILC,KAAK,EAALA,KAJK;IAKLoB,UAAU,EAAVA;EALK,CAAP;AAOD;AAED;AACA;AACA;AACA;AACA;AACA;;AACO,SAASI,wBAAT,CAAA,IAAA,EAAyD;EAAA,IAAtBC,EAAsB,GAAA,IAAA,CAAtBA,EAAsB;IAAlBC,eAAkB,GAAA,IAAA,CAAlBA,eAAkB;EAC9D,OAAO;IACLhC,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYgC,2BADb;IAELF,EAAE,EAAFA,EAFK;IAGLC,eAAe,EAAfA;EAHK,CAAP;AAKD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASE,SAAT,CAAmBC,MAAnB,EAA2B;EAChC,OAAO;IACLnC,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYmC,UADb;IAELD,MAAM,EAANA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASE,QAAT,CAAkBd,MAAlB,EAA0B;EAC/B,OAAO;IACLvB,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYqC,SADb;IAELf,MAAM,EAANA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASgB,YAAT,CAAsBC,KAAtB,EAA6B;EAClC,OAAO;IACLxC,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYwC,aADb;IAELD,KAAK,EAALA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASE,YAAT,CAAsBtC,GAAtB,EAA2B;EAChC,OAAO;IACLJ,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAY0C,aADb;IAELvC,GAAG,EAAHA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASwC,WAAT,CAAqBxC,GAArB,EAA0B;EAC/B,OAAO;IACLJ,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAY4C,YADb;IAELzC,GAAG,EAAHA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAAS0C,cAAT,CAAwB1C,GAAxB,EAA6B;EAClC,OAAO;IACLJ,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAY8C,eADb;IAEL3C,GAAG,EAAHA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAAS4C,aAAT,CAAuBb,MAAvB,EAA+B;EACpC,OAAO;IACLnC,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYgD,cADb;IAELd,MAAM,EAANA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASe,gBAAT,CAA0Bf,MAA1B,EAAkC;EACvC,OAAO;IACLnC,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYkD,kBADb;IAELhB,MAAM,EAANA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASiB,eAAT,CAAyBjB,MAAzB,EAAiCkB,MAAjC,EAAyCjC,IAAzC,EAA+C;EACpD,OAAO;IACLpB,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYqD,iBADb;IAELnB,MAAM,EAANA,MAFK;IAGLkB,MAAM,EAANA,MAHK;IAILjC,IAAI,EAAJA;EAJK,CAAP;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASmC,cAAT,CAAwBpB,MAAxB,EAAgCkB,MAAhC,EAAwC;EAC7C,OAAO;IACLrD,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYuD,gBADb;IAELrB,MAAM,EAANA,MAFK;IAGLkB,MAAM,EAANA;EAHK,CAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASI,eAAT,CAAyBtB,MAAzB,EAAiCkB,MAAjC,EAAyC;EAC9C,OAAO;IACLrD,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYyD,iBADb;IAELvB,MAAM,EAANA,MAFK;IAGLkB,MAAM,EAANA;EAHK,CAAP;AAKD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASM,aAAT,CAAuBC,QAAvB,EAAiCC,OAAjC,EAA0CtC,MAA1C,EAAkD;EACvD,OAAO;IACLvB,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAY6D,eADb;IAELF,QAAQ,EAARA,QAFK;IAGLC,OAAO,EAAPA,OAHK;IAILtC,MAAM,EAANA;EAJK,CAAP;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASwC,aAAT,CAAuB5B,MAAvB,EAA+B6B,KAA/B,EAAsC;EAC3C,OAAO;IACLhE,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYgE,cADb;IAEL9B,MAAM,EAANA,MAFK;IAGL6B,KAAK,EAALA;EAHK,CAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASE,qBAAT,CAA+B9D,GAA/B,EAAoC;EACzC,OAAO;IACLJ,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYkE,uBADb;IAEL/D,GAAG,EAAHA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASgE,0BAAT,CAAoChE,GAApC,EAAyCiE,KAAzC,EAAgD;EACrD,OAAO;IACLrE,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYqE,6BADb;IAELlE,GAAG,EAAHA,GAFK;IAGLiE,KAAK,EAALA;EAHK,CAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASE,qBAAT,CAA+BjE,KAA/B,EAAsC;EAC3C,OAAO;IACLN,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYuE,wBADb;IAELlE,KAAK,EAALA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASmE,yBAAT,CAAmCJ,KAAnC,EAA0C;EAC/C,OAAO;IACLrE,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYyE,4BADb;IAELL,KAAK,EAALA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASM,oBAAT,GAAgC;EACrC,OAAO;IACL3E,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAY2E;EADb,CAAP;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASC,2BAAT,GAAuC;EAC5C,OAAO;IACL7E,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAY6E;EADb,CAAP;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASC,aAAT,CAAuB3E,GAAvB,EAA4B;EACjC,OAAO;IACLJ,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAY+E,cADb;IAEL5E,GAAG,EAAHA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAAS6E,mBAAT,CAA6B7E,GAA7B,EAAkC;EACvC,OAAO;IACLJ,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYiF,qBADb;IAEL9E,GAAG,EAAHA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAAS+E,YAAT,CAAsBC,IAAtB,EAA4B;EACjC,OAAO;IACLpF,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYoF,WADb;IAELD,IAAI,EAAJA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASE,YAAT,CAAsBF,IAAtB,EAA4B;EACjC,OAAO;IACLpF,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYsF,WADb;IAELH,IAAI,EAAJA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASI,UAAT,GAAsB;EAC3B,OAAO;IACLxF,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYwF;EADb,CAAP;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASC,WAAT,CAAqBC,GAArB,EAA0B;EAC/B,OAAO;IACL3F,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAY2F,UADb;IAELD,GAAG,EAAHA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASE,iBAAT,CAA2BC,QAA3B,EAAqCC,OAArC,EAA8C;EACnD,OAAO;IACL/F,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAY+F,oBADb;IAELF,QAAQ,EAARA,QAFK;IAGLC,OAAO,EAAPA;EAHK,CAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASE,aAAT,CAAuB7F,GAAvB,EAA4B8F,OAA5B,EAAqCxE,UAArC,EAAiD;EACtD,OAAO;IACL1B,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYkG,eADb;IAEL/F,GAAG,EAAHA,GAFK;IAGL8F,OAAO,EAAPA,OAHK;IAILxE,UAAU,EAAVA;EAJK,CAAP;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAAS0E,UAAT,CAAoBhB,IAApB,EAA0B;EAC/B,OAAO;IACLpF,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYoG,YADb;IAELjB,IAAI,EAAJA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASkB,SAAT,CAAmBC,KAAnB,EAA0BC,QAA1B,EAAoC;EACzC,OAAO;IACLxG,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYwG,UADb;IAELF,KAAK,EAALA,KAFK;IAGLC,QAAQ,EAARA;EAHK,CAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASE,YAAT,GAAwB;EAC7B,OAAO;IACL1G,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAY0G;EADb,CAAP;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASC,gBAAT,CAA0BC,MAA1B,EAAkC;EACvC,OAAO;IACL7G,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAY6G,kBADb;IAELD,MAAM,EAANA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASE,mBAAT,CAAA,KAAA,EAAoD;EAAA,IAAtBC,QAAsB,GAAA,KAAA,CAAtBA,QAAsB;IAAZC,SAAY,GAAA,KAAA,CAAZA,SAAY;EACzD,OAAO;IACLjH,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYiH,sBADb;IAELF,QAAQ,EAARA,QAFK;IAGLC,SAAS,EAATA;EAHK,CAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASE,YAAT,CAAsBH,QAAtB,EAAgCI,KAAhC,EAAuC;EAC5C,OAAO;IACLpH,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYoH,cADb;IAELL,QAAQ,EAARA,QAFK;IAGLI,KAAK,EAALA;EAHK,CAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASE,WAAT,CAAqBC,QAArB,EAA+B;EACpC,OAAO;IACLvH,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYuH,YADb;IAELD,QAAQ,EAARA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASE,qBAAT,CAA+BC,KAA/B,EAAsCC,OAAtC,EAA+C;EACpD,OAAO;IACL3H,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAY2H,wBADb;IAELF,KAAK,EAALA,KAFK;IAGLC,OAAO,EAAPA;EAHK,CAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASE,kBAAT,CAA4BF,OAA5B,EAAqC;EAC1C,OAAO;IACL3H,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAY6H,oBADb;IAELH,OAAO,EAAPA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASI,aAAT,CAAuBJ,OAAvB,EAAgC;EACrC,OAAO;IACL3H,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAY+H,cADb;IAELL,OAAO,EAAPA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASM,aAAT,CAAuB7G,IAAvB,EAA6B;EAClC,OAAO;IACLpB,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYiI,eADb;IAEL9G,IAAI,EAAJA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAAS+G,cAAT,CAAwBhG,MAAxB,EAAgC;EACrC,OAAO;IACLnC,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYmI,gBADb;IAELjG,MAAM,EAANA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;;AACO,SAASkG,sBAAT,GAAkC;EACvC,OAAO;IACLrI,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYqI;EADb,CAAP;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASC,aAAT,CAAuBC,OAAvB,EAAgC;EACrC,OAAO;IACLxI,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYwI,eADb;IAELD,OAAO,EAAPA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASE,kBAAT,CAA4BF,OAA5B,EAAqC;EAC1C,OAAO;IACLxI,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAY0I,oBADb;IAELH,OAAO,EAAPA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASI,2BAAT,CAAqCrH,MAArC,EAA6C;EAClD,OAAO;IACLvB,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAY4I,+BADb;IAELtH,MAAM,EAANA;EAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASuH,4BAAT,CAAsC1I,GAAtC,EAA2CmB,MAA3C,EAAmD;EACxD,OAAO;IACLvB,IAAI,EAAEC,YAAAA,CAAAA,SAAAA,CAAAA,CAAY8I,gCADb;IAEL3I,GAAG,EAAHA,GAFK;IAGLmB,MAAM,EAANA;EAHK,CAAP;AAKD;AAED;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA,IAAMyH,eAAe,GAAG,IAAxB;AACA","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// vis-state-reducer\nimport ActionTypes from 'constants/action-types';\n\n/**\n * Update layer base config: dataId, label, column, isVisible\n * @param oldLayer - layer to be updated\n * @param newConfig - new config to be merged with old config\n * @returns action\n * @type {typeof import('./vis-state-actions').layerConfigChange}\n * @public\n */\nexport function layerConfigChange(oldLayer, newConfig) {\n  return {\n    type: ActionTypes.LAYER_CONFIG_CHANGE,\n    oldLayer,\n    newConfig\n  };\n}\n\n/**\n * Update layer text label\n * @param oldLayer - layer to be updated\n * @param idx -`idx` of text label to be updated\n * @param prop - `prop` of text label, e,g, `anchor`, `alignment`, `color`, `size`, `field`\n * @param value - new value\n * @returns action\n * @type {typeof import('./vis-state-actions').layerTextLabelChange}\n * @public\n */\nexport function layerTextLabelChange(oldLayer, idx, prop, value) {\n  return {\n    type: ActionTypes.LAYER_TEXT_LABEL_CHANGE,\n    oldLayer,\n    idx,\n    prop,\n    value\n  };\n}\n\n/**\n * Update layer type. Previews layer config will be copied if applicable.\n * @param oldLayer - layer to be updated\n * @param newType - new type\n * @returns action\n * @type {typeof import('./vis-state-actions').layerTypeChange}\n * @public\n */\nexport function layerTypeChange(oldLayer, newType) {\n  return {\n    type: ActionTypes.LAYER_TYPE_CHANGE,\n    oldLayer,\n    newType\n  };\n}\n\n/**\n * Update layer visual channel\n * @memberof visStateActions\n * @param oldLayer - layer to be updated\n * @param newConfig - new visual channel config\n * @param channel - channel to be updated\n * @returns action\n * @type {typeof import('./vis-state-actions').layerVisualChannelConfigChange}\n * @public\n */\nexport function layerVisualChannelConfigChange(oldLayer, newConfig, channel) {\n  return {\n    type: ActionTypes.LAYER_VISUAL_CHANNEL_CHANGE,\n    oldLayer,\n    newConfig,\n    channel\n  };\n}\n\n/**\n * Update layer `visConfig`\n * @memberof visStateActions\n * @param oldLayer - layer to be updated\n * @param newVisConfig - new visConfig as a key value map: e.g. `{opacity: 0.8}`\n * @returns action\n * @type {typeof import('./vis-state-actions').layerVisConfigChange}\n * @public\n */\nexport function layerVisConfigChange(oldLayer, newVisConfig) {\n  return {\n    type: ActionTypes.LAYER_VIS_CONFIG_CHANGE,\n    oldLayer,\n    newVisConfig\n  };\n}\n\n/**\n * Set the color palette ui for layer color\n * @memberOf visStateActions\n * @param oldLayer - layer to be updated\n * @param prop - which color prop\n * @param newConfig - to be merged\n * @returns action\n * @type {typeof import('./vis-state-actions').layerColorUIChange}\n * @public\n */\nexport function layerColorUIChange(oldLayer, prop, newConfig) {\n  return {\n    type: ActionTypes.LAYER_COLOR_UI_CHANGE,\n    oldLayer,\n    prop,\n    newConfig\n  };\n}\n\n/**\n * Update layer blending mode\n * @memberof visStateActions\n * @param mode one of `additive`, `normal` and `subtractive`\n * @returns action\n * @type {typeof import('./vis-state-actions').updateLayerBlending}\n * @public\n */\nexport function updateLayerBlending(mode) {\n  return {\n    type: ActionTypes.UPDATE_LAYER_BLENDING,\n    mode\n  };\n}\n\n/**\n * Update `interactionConfig`\n * @memberof visStateActions\n * @param config - new config as key value map: `{tooltip: {enabled: true}}`\n * @returns action\n * @type {typeof import('./vis-state-actions').interactionConfigChange}\n * @public\n */\nexport function interactionConfigChange(config) {\n  return {\n    type: ActionTypes.INTERACTION_CONFIG_CHANGE,\n    config\n  };\n}\n\n/**\n * Update filter property\n * @memberof visStateActions\n * @param idx -`idx` of filter to be updated\n * @param prop - `prop` of filter, e,g, `dataId`, `name`, `value`\n * @param value - new value\n * @param valueIndex - dataId index\n * @returns action\n * @type {typeof import('./vis-state-actions').setFilter}\n * @public\n */\nexport function setFilter(idx, prop, value, valueIndex) {\n  return {\n    type: ActionTypes.SET_FILTER,\n    idx,\n    prop,\n    value,\n    valueIndex\n  };\n}\n\n/**\n * Same as Update filter\n * @memberof visStateActions\n * @param idx -`idx` of filter to be updated\n * @param prop - `prop` of filter, e,g, `dataId`, `name`, `value`\n * @param value - new value\n * @param valueIndex - dataId index\n * @returns action\n * @type {typeof import('./vis-state-actions').setFilterAnimationTime}\n * @public\n */\nexport function setFilterAnimationTime(idx, prop, value, valueIndex) {\n  return {\n    type: ActionTypes.SET_FILTER_ANIMATION_TIME,\n    idx,\n    prop,\n    value,\n    valueIndex\n  };\n}\n\n/**\n * Same as Update filter\n * @memberof visStateActions\n * @type {typeof import('./vis-state-actions').setFilterAnimationWindow}\n * @public\n */\nexport function setFilterAnimationWindow({id, animationWindow}) {\n  return {\n    type: ActionTypes.SET_FILTER_ANIMATION_WINDOW,\n    id,\n    animationWindow\n  };\n}\n/**\n * Add a new filter\n * @memberof visStateActions\n * @param dataId - dataset `id` this new filter is associated with\n * @returns action\n * @type {typeof import('./vis-state-actions').addFilter}\n * @public\n */\nexport function addFilter(dataId) {\n  return {\n    type: ActionTypes.ADD_FILTER,\n    dataId\n  };\n}\n\n/**\n * Add a new layer\n * @memberof visStateActions\n * @param config - new layer config\n * @returns action\n * @type {typeof import('./vis-state-actions').addLayer}\n * @public\n */\nexport function addLayer(config) {\n  return {\n    type: ActionTypes.ADD_LAYER,\n    config\n  };\n}\n\n/**\n * Reorder layer, order is an array of layer indexes, index 0 will be the one at the bottom\n * @memberof visStateActions\n * @param order an array of layer indexes\n * @returns action\n * @type {typeof import('./vis-state-actions').reorderLayer}\n * @public\n * @example\n *\n * // bring `layers[1]` below `layers[0]`, the sequence layers will be rendered is `1`, `0`, `2`, `3`.\n * // `1` will be at the bottom, `3` will be at the top.\n * this.props.dispatch(reorderLayer([1, 0, 2, 3]));\n */\nexport function reorderLayer(order) {\n  return {\n    type: ActionTypes.REORDER_LAYER,\n    order\n  };\n}\n\n/**\n * Remove a filter from `visState.filters`, once a filter is removed, data will be re-filtered and layer will be updated\n * @memberof visStateActions\n * @param idx idx of filter to be removed\n * @returns action\n * @type {typeof import('./vis-state-actions').removeFilter}\n * @public\n */\nexport function removeFilter(idx) {\n  return {\n    type: ActionTypes.REMOVE_FILTER,\n    idx\n  };\n}\n\n/**\n * Remove a layer\n * @memberof visStateActions\n * @param idx idx of layer to be removed\n * @returns action\n * @type {typeof import('./vis-state-actions').removeLayer}\n * @public\n */\nexport function removeLayer(idx) {\n  return {\n    type: ActionTypes.REMOVE_LAYER,\n    idx\n  };\n}\n\n/**\n * Duplicate a layer\n * @memberof visStateActions\n * @param idx idx of layer to be duplicated\n * @returns action\n * @type {typeof import('./vis-state-actions').duplicateLayer}\n * @public\n */\nexport function duplicateLayer(idx) {\n  return {\n    type: ActionTypes.DUPLICATE_LAYER,\n    idx\n  };\n}\n\n/**\n * Remove a dataset and all layers, filters, tooltip configs that based on it\n * @memberof visStateActions\n * @param dataId dataset id\n * @returns action\n * @type {typeof import('./vis-state-actions').removeDataset}\n * @public\n */\nexport function removeDataset(dataId) {\n  return {\n    type: ActionTypes.REMOVE_DATASET,\n    dataId\n  };\n}\n\n/**\n * Display dataset table in a modal\n * @memberof visStateActions\n * @param dataId dataset id to show in table\n * @returns action\n * @type {typeof import('./vis-state-actions').showDatasetTable}\n * @public\n */\nexport function showDatasetTable(dataId) {\n  return {\n    type: ActionTypes.SHOW_DATASET_TABLE,\n    dataId\n  };\n}\n\n/**\n * Sort dataset column, for table display\n * @memberof visStateActions\n * @param dataId\n * @param column\n * @param mode\n * @returns action\n * @type {typeof import('./vis-state-actions').sortTableColumn}\n * @public\n */\nexport function sortTableColumn(dataId, column, mode) {\n  return {\n    type: ActionTypes.SORT_TABLE_COLUMN,\n    dataId,\n    column,\n    mode\n  };\n}\n\n/**\n * Pin dataset column, for table display\n * @param dataId\n * @param column\n * @returns action\n * @type {typeof import('./vis-state-actions').pinTableColumn}\n * @public\n */\nexport function pinTableColumn(dataId, column) {\n  return {\n    type: ActionTypes.PIN_TABLE_COLUMN,\n    dataId,\n    column\n  };\n}\n\n/**\n * Copy column, for table display\n * @param dataId\n * @param column\n * @returns action\n * @type {typeof import('./vis-state-actions').copyTableColumn}\n * @public\n */\nexport function copyTableColumn(dataId, column) {\n  return {\n    type: ActionTypes.COPY_TABLE_COLUMN,\n    dataId,\n    column\n  };\n}\n\n// * @param dataset.info -info of a dataset\n// * @param dataset.info.id - id of this dataset. If config is defined, `id` should matches the `dataId` in config.\n// * @param dataset.info.label - A display name of this dataset\n// * @param dataset.data - ***required** The data object, in a tabular format with 2 properties `fields` and `rows`\n// * @param dataset.data.fields - ***required** Array of fields,\n// * @param dataset.data.fields.name - ***required** Name of the field,\n// * @param dataset.data.rows - ***required** Array of rows, in a tabular format with `fields` and `rows`\n/**\n * Add new dataset to `visState`, with option to load a map config along with the datasets\n * @memberof visStateActions\n * @param datasets - ***required** datasets can be a dataset or an array of datasets\n * Each dataset object needs to have `info` and `data` property.\n * @param {object} options\n * @param options.centerMap `default: true` if `centerMap` is set to `true` kepler.gl will\n * place the map view within the data points boundaries\n * @param options.readOnly `default: false` if `readOnly` is set to `true`\n * the left setting panel will be hidden\n * @param config this object will contain the full kepler.gl instance configuration {mapState, mapStyle, visState}\n * @returns action\n * @type {typeof import('./vis-state-actions').updateVisData}\n * @public\n */\nexport function updateVisData(datasets, options, config) {\n  return {\n    type: ActionTypes.UPDATE_VIS_DATA,\n    datasets,\n    options,\n    config\n  };\n}\n\n/**\n * Rename an existing dataset in `visState`\n * @memberof visStateActions\n * @param dataId - ***required** Id of the dataset to update\n * @param label - ***required** New name for the dataset\n * @returns action\n * @type {typeof import('./vis-state-actions').renameDataset}\n * @public\n */\nexport function renameDataset(dataId, label) {\n  return {\n    type: ActionTypes.RENAME_DATASET,\n    dataId,\n    label\n  };\n}\n\n/**\n * Start and end filter animation\n * @memberof visStateActions\n * @param {Number} idx of filter\n * @type {typeof import('./vis-state-actions').toggleFilterAnimation}\n * @returns action\n * @public\n */\nexport function toggleFilterAnimation(idx) {\n  return {\n    type: ActionTypes.TOGGLE_FILTER_ANIMATION,\n    idx\n  };\n}\n\n/**\n * Change filter animation speed\n * @memberof visStateActions\n * @param idx -  `idx` of filter\n * @param speed - `speed` to change it to. `speed` is a multiplier\n * @type {typeof import('./vis-state-actions').updateFilterAnimationSpeed}\n * @returns action\n * @public\n */\nexport function updateFilterAnimationSpeed(idx, speed) {\n  return {\n    type: ActionTypes.UPDATE_FILTER_ANIMATION_SPEED,\n    idx,\n    speed\n  };\n}\n\n/**\n * Reset animation\n * @memberof visStateActions\n * @param value -  Current value of the slider\n * @type {typeof import('./vis-state-actions').setLayerAnimationTime}\n * @returns action\n * @public\n */\nexport function setLayerAnimationTime(value) {\n  return {\n    type: ActionTypes.SET_LAYER_ANIMATION_TIME,\n    value\n  };\n}\n\n/**\n * update trip layer animation speed\n * @memberof visStateActions\n * @param speed - `speed` to change it to. `speed` is a multiplier\n * @type {typeof import('./vis-state-actions').updateLayerAnimationSpeed}\n * @returns action\n * @public\n */\nexport function updateLayerAnimationSpeed(speed) {\n  return {\n    type: ActionTypes.UPDATE_LAYER_ANIMATION_SPEED,\n    speed\n  };\n}\n\n/**\n * start end end layer animation\n * @memberof visStateActions\n * @type {typeof import('./vis-state-actions').toggleLayerAnimation}\n * @returns action\n * @public\n */\nexport function toggleLayerAnimation() {\n  return {\n    type: ActionTypes.TOGGLE_LAYER_ANIMATION\n  };\n}\n\n/**\n * hide and show layer animation control\n * @memberof visStateActions\n * @type {typeof import('./vis-state-actions').toggleLayerAnimationControl}\n * @returns action\n * @public\n */\nexport function toggleLayerAnimationControl() {\n  return {\n    type: ActionTypes.TOGGLE_LAYER_ANIMATION_CONTROL\n  };\n}\n\n/**\n * Show larger time filter at bottom for time playback (apply to time filter only)\n * @memberof visStateActions\n * @param idx - index of filter to enlarge\n * @type {typeof import('./vis-state-actions').enlargeFilter}\n * @returns action\n * @public\n */\nexport function enlargeFilter(idx) {\n  return {\n    type: ActionTypes.ENLARGE_FILTER,\n    idx\n  };\n}\n\n/**\n * Show/hide filter feature on map\n * @memberof visStateActions\n * @param idx - index of filter feature to show/hide\n * @type {typeof import('./vis-state-actions').toggleFilterFeature}\n * @return action\n */\nexport function toggleFilterFeature(idx) {\n  return {\n    type: ActionTypes.TOGGLE_FILTER_FEATURE,\n    idx\n  };\n}\n\n/**\n * Trigger layer hover event with hovered object\n * @memberof visStateActions\n * @param info - Object hovered, returned by deck.gl\n * @type {typeof import('./vis-state-actions').onLayerHover}\n * @returns action\n * @public\n */\nexport function onLayerHover(info) {\n  return {\n    type: ActionTypes.LAYER_HOVER,\n    info\n  };\n}\n\n/**\n * Trigger layer click event with clicked object\n * @memberof visStateActions\n * @param info - Object clicked, returned by deck.gl\n * @type {typeof import('./vis-state-actions').onLayerClick}\n * @returns action\n * @public\n */\nexport function onLayerClick(info) {\n  return {\n    type: ActionTypes.LAYER_CLICK,\n    info\n  };\n}\n\n/**\n * Trigger map click event, unselect clicked object\n * @memberof visStateActions\n * @type {typeof import('./vis-state-actions').onMapClick}\n * @returns action\n * @public\n */\nexport function onMapClick() {\n  return {\n    type: ActionTypes.MAP_CLICK\n  };\n}\n\n/**\n * Trigger map mouse moveevent, payload would be\n * React-map-gl PointerEvent\n * https://uber.github.io/react-map-gl/#/documentation/api-reference/pointer-event\n *\n * @memberof visStateActions\n * @param evt - PointerEvent\n * @type {typeof import('./vis-state-actions').onMouseMove}\n * @returns action\n * @public\n */\nexport function onMouseMove(evt) {\n  return {\n    type: ActionTypes.MOUSE_MOVE,\n    evt\n  };\n}\n\n/**\n * Toggle visibility of a layer in a split map\n * @memberof visStateActions\n * @param mapIndex - index of the split map\n * @param layerId - id of the layer\n * @type {typeof import('./vis-state-actions').toggleLayerForMap}\n * @returns action\n * @public\n */\nexport function toggleLayerForMap(mapIndex, layerId) {\n  return {\n    type: ActionTypes.TOGGLE_LAYER_FOR_MAP,\n    mapIndex,\n    layerId\n  };\n}\n\n/**\n * Set the property of a filter plot\n * @memberof visStateActions\n * @param idx\n * @param newProp key value mapping of new prop `{yAxis: 'histogram'}`\n * @param valueIndex dataId index\n * @type {typeof import('./vis-state-actions').setFilterPlot}\n * @returns action\n * @public\n */\nexport function setFilterPlot(idx, newProp, valueIndex) {\n  return {\n    type: ActionTypes.SET_FILTER_PLOT,\n    idx,\n    newProp,\n    valueIndex\n  };\n}\n\n/**\n * Set the property of a filter plot\n * @memberof visStateActions\n * @param info\n * @type {typeof import('./vis-state-actions').setMapInfo}\n * @returns action\n * @public\n */\nexport function setMapInfo(info) {\n  return {\n    type: ActionTypes.SET_MAP_INFO,\n    info\n  };\n}\n\n/**\n * Trigger file loading dispatch `addDataToMap` if succeed, or `loadFilesErr` if failed\n * @memberof visStateActions\n * @param files array of fileblob\n * @type {typeof import('./vis-state-actions').loadFiles}\n * @returns action\n * @public\n */\nexport function loadFiles(files, onFinish) {\n  return {\n    type: ActionTypes.LOAD_FILES,\n    files,\n    onFinish\n  };\n}\n\n/**\n * Called with next file to load\n * @memberof visStateActions\n * @type {typeof import('./vis-state-actions').loadNextFile}\n * @returns action\n * @public\n */\nexport function loadNextFile() {\n  return {\n    type: ActionTypes.LOAD_NEXT_FILE\n  };\n}\n\n/**\n * called when all files are processed and loaded\n * @memberof visStateActions\n * @param result\n * @type {typeof import('./vis-state-actions').loadFilesSuccess}\n * @returns action\n */\nexport function loadFilesSuccess(result) {\n  return {\n    type: ActionTypes.LOAD_FILES_SUCCESS,\n    result\n  };\n}\n\n/**\n * called when successfully loaded one file, ready to move on to the next one\n * @memberof visStateActions\n * @param result\n * @type {typeof import('./vis-state-actions').loadFileStepSuccess}\n * @returns action\n */\nexport function loadFileStepSuccess({fileName, fileCache}) {\n  return {\n    type: ActionTypes.LOAD_FILE_STEP_SUCCESS,\n    fileName,\n    fileCache\n  };\n}\n\n/**\n * Trigger loading file error\n * @memberof visStateActions\n * @param  error\n * @type {typeof import('./vis-state-actions').loadFilesErr}\n * @returns action\n * @public\n */\nexport function loadFilesErr(fileName, error) {\n  return {\n    type: ActionTypes.LOAD_FILES_ERR,\n    fileName,\n    error\n  };\n}\n\n/**\n * Store features to state\n * @memberof visStateActions\n * @param features\n * @type {typeof import('./vis-state-actions').setFeatures}\n * @returns action\n */\nexport function setFeatures(features) {\n  return {\n    type: ActionTypes.SET_FEATURES,\n    features\n  };\n}\n\n/**\n * It will apply the provide feature as filter to the given layer.\n * If the given feature is already applied as filter to the layer, it will remove the layer from the filter\n * @memberof visStateActions\n * @param layer\n * @param feature\n * @type {typeof import('./vis-state-actions').setPolygonFilterLayer}\n * @returns action\n */\nexport function setPolygonFilterLayer(layer, feature) {\n  return {\n    type: ActionTypes.SET_POLYGON_FILTER_LAYER,\n    layer,\n    feature\n  };\n}\n\n/**\n * Set the current feature to be edited/deleted\n * @memberof visStateActions\n * @param feature\n * @type {typeof import('./vis-state-actions').setSelectedFeature}\n * @returns action\n */\nexport function setSelectedFeature(feature) {\n  return {\n    type: ActionTypes.SET_SELECTED_FEATURE,\n    feature\n  };\n}\n\n/**\n * Delete the given feature\n * @memberof visStateActions\n * @param feature\n * @type {typeof import('./vis-state-actions').deleteFeature}\n * @returns action\n */\nexport function deleteFeature(feature) {\n  return {\n    type: ActionTypes.DELETE_FEATURE,\n    feature\n  };\n}\n\n/** Set the map mode\n * @memberof visStateActions\n * @param mode one of EDITOR_MODES\n * @type {typeof import('./vis-state-actions').setEditorMode}\n * @returns action\n * @public\n * @example\n * import {setMapMode} from 'kepler.gl/actions';\n * import {EDITOR_MODES} from 'kepler.gl/constants';\n *\n * this.props.dispatch(setMapMode(EDITOR_MODES.DRAW_POLYGON));\n */\nexport function setEditorMode(mode) {\n  return {\n    type: ActionTypes.SET_EDITOR_MODE,\n    mode\n  };\n}\n\n/**\n * Trigger CPU filter of selected dataset\n * @memberof visStateActions\n * @param dataId - single dataId or an array of dataIds\n * @type {typeof import('./vis-state-actions').applyCPUFilter}\n * @returns action\n * @public\n */\nexport function applyCPUFilter(dataId) {\n  return {\n    type: ActionTypes.APPLY_CPU_FILTER,\n    dataId\n  };\n}\n\n/**\n * Toggle editor layer visibility\n * @memberof visStateActions\n * @type {typeof import('./vis-state-actions').toggleEditorVisibility}\n * @return action\n */\nexport function toggleEditorVisibility() {\n  return {\n    type: ActionTypes.TOGGLE_EDITOR_VISIBILITY\n  };\n}\n\n/**\n * Process the next file batch\n * @memberof visStateActions\n * @param payload - batch payload\n * @type {typeof import('./vis-state-actions').nextFileBatch}\n * @return action\n */\nexport function nextFileBatch(payload) {\n  return {\n    type: ActionTypes.NEXT_FILE_BATCH,\n    payload\n  };\n}\n\n/**\n * Process the file content\n * @memberof visStateActions\n * @param payload - the file content\n * @type {typeof import('./vis-state-actions').processFileContent}\n * @return action\n */\nexport function processFileContent(payload) {\n  return {\n    type: ActionTypes.PROCESS_FILE_CONTENT,\n    payload\n  };\n}\n\n/**\n * Set layer animation time format and timezone\n * @memberof visStateActions\n * @param config - {timeFormat: string, timezone: string}\n * @type {typeof import('./vis-state-actions').setLayerAnimationTimeConfig}\n * @return action\n */\nexport function setLayerAnimationTimeConfig(config) {\n  return {\n    type: ActionTypes.SET_LAYER_ANIMATION_TIME_CONFIG,\n    config\n  };\n}\n\n/**\n * Set Filter animation time format and timezone\n * @memberof visStateActions\n * @param idx\n * @param config\n * @type {typeof import('./vis-state-actions').setFilterAnimationTimeConfig}\n * @return action\n */\nexport function setFilterAnimationTimeConfig(idx, config) {\n  return {\n    type: ActionTypes.SET_FILTER_ANIMATION_TIME_CONFIG,\n    idx,\n    config\n  };\n}\n\n/**\n * This declaration is needed to group actions in docs\n */\n/**\n * Actions handled mostly by `visState` reducer.\n * They manage how data is processed, filtered and displayed on the map by operates on layers,\n * filters and interaction settings.\n *\n * @public\n */\n/* eslint-disable no-unused-vars */\n// @ts-ignore\nconst visStateActions = null;\n/* eslint-enable no-unused-vars */\n"]},"metadata":{},"sourceType":"script"}