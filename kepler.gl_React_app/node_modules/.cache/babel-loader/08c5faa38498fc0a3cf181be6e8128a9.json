{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _marked = _regeneratorRuntime.mark(makePrimitiveIterator);\nimport { GL } from '../constants';\nimport { getPrimitiveModeType } from '../primitives/modes';\nimport { assert } from '@loaders.gl/loader-utils';\nexport function makePrimitiveIterator(_ref) {\n  var indices, attributes, mode, _ref$start, start, end, info, i;\n  return _regeneratorRuntime.wrap(function makePrimitiveIterator$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          indices = _ref.indices, attributes = _ref.attributes, mode = _ref.mode, _ref$start = _ref.start, start = _ref$start === void 0 ? 0 : _ref$start, end = _ref.end;\n          if (indices) {\n            indices = indices.values || indices.value || indices;\n          }\n          if (end === undefined) {\n            end = indices ? indices.length : start;\n          }\n          info = {\n            attributes: attributes,\n            type: getPrimitiveModeType(mode),\n            i1: 0,\n            i2: 0,\n            i3: 0\n          };\n          i = start;\n        case 5:\n          if (!(i < end)) {\n            _context.next = 44;\n            break;\n          }\n          _context.t0 = mode;\n          _context.next = _context.t0 === GL.POINTS ? 9 : _context.t0 === GL.LINES ? 12 : _context.t0 === GL.LINE_STRIP ? 16 : _context.t0 === GL.LINE_LOOP ? 20 : _context.t0 === GL.TRIANGLES ? 24 : _context.t0 === GL.TRIANGLE_STRIP ? 29 : _context.t0 === GL.TRIANGLE_FAN ? 33 : 38;\n          break;\n        case 9:\n          info.i1 = i;\n          i += 1;\n          return _context.abrupt(\"break\", 39);\n        case 12:\n          info.i1 = i;\n          info.i2 = i + 1;\n          i += 2;\n          return _context.abrupt(\"break\", 39);\n        case 16:\n          info.i1 = i;\n          info.i2 = i + 1;\n          i += 1;\n          return _context.abrupt(\"break\", 39);\n        case 20:\n          info.i1 = i;\n          info.i2 = i + 1;\n          i += 1;\n          return _context.abrupt(\"break\", 39);\n        case 24:\n          info.i1 = i;\n          info.i2 = i + 1;\n          info.i3 = i + 2;\n          i += 3;\n          return _context.abrupt(\"break\", 39);\n        case 29:\n          info.i1 = i;\n          info.i2 = i + 1;\n          i += 1;\n          return _context.abrupt(\"break\", 39);\n        case 33:\n          info.i1 = 1;\n          info.i2 = i;\n          info.i3 = i + 1;\n          i += 1;\n          return _context.abrupt(\"break\", 39);\n        case 38:\n          assert(false);\n        case 39:\n          if (indices) {\n            if ('i1' in info) {\n              info.i1 = indices[info.i1];\n              info.i2 = indices[info.i2];\n              info.i3 = indices[info.i3];\n            }\n          }\n          _context.next = 42;\n          return info;\n        case 42:\n          _context.next = 5;\n          break;\n        case 44:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["../../../../src/geometry/iterators/primitive-iterator.js"],"names":["GL","getPrimitiveModeType","assert","makePrimitiveIterator","indices","attributes","mode","start","end","values","value","undefined","length","info","type","i1","i2","i3","i","POINTS","LINES","LINE_STRIP","LINE_LOOP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN"],"mappings":"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","sourcesContent":["/** @typedef {import('./primitive-iterator')} types */\nimport {GL} from '../constants';\nimport {getPrimitiveModeType} from '../primitives/modes';\nimport {assert} from '@loaders.gl/loader-utils';\n\n// Will iterate over each primitive, expanding (dereferencing) indices\n/** @type {types['makePrimitiveIterator']} */\n// eslint-disable-next-line complexity\nexport function* makePrimitiveIterator({indices, attributes, mode, start = 0, end}) {\n  // support indices being an object with a values array\n  if (indices) {\n    indices = indices.values || indices.value || indices;\n  }\n\n  // Autodeduce length from indices\n  if (end === undefined) {\n    end = indices ? indices.length : start;\n  }\n\n  // iteration info\n  const info = {\n    attributes,\n    type: getPrimitiveModeType(mode),\n    i1: 0,\n    i2: 0,\n    i3: 0\n  };\n\n  let i = start;\n  // @ts-ignore\n  while (i < end) {\n    switch (mode) {\n      case GL.POINTS: // draw single points.\n        info.i1 = i;\n        i += 1;\n        break;\n      case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 2;\n        break;\n      case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLES: // draw triangles. Each set of three vertices creates a separate triangle.\n        info.i1 = i;\n        info.i2 = i + 1;\n        info.i3 = i + 2;\n        i += 3;\n        break;\n      case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n        info.i1 = 1;\n        info.i2 = i;\n        info.i3 = i + 1;\n        i += 1;\n        break;\n\n      default:\n        assert(false);\n    }\n\n    // if indices are present, lookup actual vertices in indices\n    if (indices) {\n      if ('i1' in info) {\n        info.i1 = indices[info.i1];\n        info.i2 = indices[info.i2];\n        info.i3 = indices[info.i3];\n      }\n    }\n\n    yield info;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}