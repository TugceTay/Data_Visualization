{"ast":null,"code":"import { GL } from '../constants';\nimport assert from '../utils/assert';\nexport function getPrimitiveModeType(mode) {\n  switch (mode) {\n    case GL.POINTS:\n      return GL.POINTS;\n    case GL.LINES:\n    case GL.LINE_STRIP:\n    case GL.LINE_LOOP:\n      return GL.LINES;\n    case GL.TRIANGLES:\n    case GL.TRIANGLE_STRIP:\n    case GL.TRIANGLE_FAN:\n      return GL.TRIANGLES;\n    default:\n      return assert(false);\n  }\n}\nexport function isPrimitiveModeExpandable(mode) {\n  switch (mode) {\n    case GL.LINE_STRIP:\n    case GL.LINE_LOOP:\n    case GL.TRIANGLE_STRIP:\n    case GL.TRIANGLE_FAN:\n      return true;\n    default:\n      return false;\n  }\n}\nexport function getPrimitiveModeExpandedLength(mode, length) {\n  switch (mode) {\n    case GL.POINTS:\n      return length;\n    case GL.LINES:\n      return length;\n    case GL.LINE_STRIP:\n      return length;\n    case GL.LINE_LOOP:\n      return length + 1;\n    case GL.TRIANGLES:\n      return length;\n    case GL.TRIANGLE_STRIP:\n    case GL.TRIANGLE_FAN:\n      return (length - 2) * 3;\n    default:\n      return assert(false);\n  }\n}","map":{"version":3,"sources":["../../../../src/geometry/primitives/modes.js"],"names":["GL","assert","getPrimitiveModeType","mode","POINTS","LINES","LINE_STRIP","LINE_LOOP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","isPrimitiveModeExpandable","getPrimitiveModeExpandedLength","length"],"mappings":"AACA,SAAQA,EAAR,QAAiB,cAAjB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAGA,OAAO,SAASC,oBAAT,CAA8BC,IAA9B,EAAoC;EACzC,QAAQA,IAAR;IACE,KAAKH,EAAE,CAACI,MAAR;MACE,OAAOJ,EAAE,CAACI,MAAV;IACF,KAAKJ,EAAE,CAACK,KAAR;IACA,KAAKL,EAAE,CAACM,UAAR;IACA,KAAKN,EAAE,CAACO,SAAR;MACE,OAAOP,EAAE,CAACK,KAAV;IACF,KAAKL,EAAE,CAACQ,SAAR;IACA,KAAKR,EAAE,CAACS,cAAR;IACA,KAAKT,EAAE,CAACU,YAAR;MACE,OAAOV,EAAE,CAACQ,SAAV;IACF;MAEE,OAAOP,MAAM,CAAC,KAAD,CAAb;EAAA;AAEL;AAGD,OAAO,SAASU,yBAAT,CAAmCR,IAAnC,EAAyC;EAC9C,QAAQA,IAAR;IACE,KAAKH,EAAE,CAACM,UAAR;IACA,KAAKN,EAAE,CAACO,SAAR;IACA,KAAKP,EAAE,CAACS,cAAR;IACA,KAAKT,EAAE,CAACU,YAAR;MACE,OAAO,IAAP;IACF;MACE,OAAO,KAAP;EAAA;AAEL;AAGD,OAAO,SAASE,8BAAT,CAAwCT,IAAxC,EAA8CU,MAA9C,EAAsD;EAC3D,QAAQV,IAAR;IACE,KAAKH,EAAE,CAACI,MAAR;MACE,OAAOS,MAAP;IACF,KAAKb,EAAE,CAACK,KAAR;MACE,OAAOQ,MAAP;IACF,KAAKb,EAAE,CAACM,UAAR;MACE,OAAOO,MAAP;IACF,KAAKb,EAAE,CAACO,SAAR;MACE,OAAOM,MAAM,GAAG,CAAhB;IACF,KAAKb,EAAE,CAACQ,SAAR;MACE,OAAOK,MAAP;IACF,KAAKb,EAAE,CAACS,cAAR;IACA,KAAKT,EAAE,CAACU,YAAR;MACE,OAAO,CAACG,MAAM,GAAG,CAAV,IAAe,CAAtB;IACF;MAEE,OAAOZ,MAAM,CAAC,KAAD,CAAb;EAAA;AAEL","sourcesContent":["/** @typedef {import('./modes')} types */\nimport {GL} from '../constants';\nimport assert from '../utils/assert';\n\n/** @type {types['getPrimitiveModeType']} */\nexport function getPrimitiveModeType(mode) {\n  switch (mode) {\n    case GL.POINTS: // draw single points.\n      return GL.POINTS;\n    case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n    case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n    case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n      return GL.LINES;\n    case GL.TRIANGLES:\n    case GL.TRIANGLE_STRIP:\n    case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n      return GL.TRIANGLES;\n    default:\n      // @ts-ignore\n      return assert(false);\n  }\n}\n\n/** @type {types['isPrimitiveModeExpandable']} */\nexport function isPrimitiveModeExpandable(mode) {\n  switch (mode) {\n    case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n    case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n    case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n    case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n      return true;\n    default:\n      return false;\n  }\n}\n\n/** @type {types['getPrimitiveModeExpandedLength']} */\nexport function getPrimitiveModeExpandedLength(mode, length) {\n  switch (mode) {\n    case GL.POINTS: // draw single points.\n      return length;\n    case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n      return length;\n    case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n      return length;\n    case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n      return length + 1;\n    case GL.TRIANGLES: // draw triangles. Each set of three vertices creates a separate triangle.\n      return length;\n    case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n    case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n      return (length - 2) * 3;\n    default:\n      // @ts-ignore\n      return assert(false);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}