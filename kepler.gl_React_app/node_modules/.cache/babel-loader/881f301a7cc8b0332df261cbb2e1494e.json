{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction getStorage(type) {\n  try {\n    const storage = window[type];\n    const x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return storage;\n  } catch (e) {\n    return null;\n  }\n}\nexport class LocalStorage {\n  constructor(id, defaultConfig) {\n    let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'sessionStorage';\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"id\", void 0);\n    _defineProperty(this, \"config\", void 0);\n    this.storage = getStorage(type);\n    this.id = id;\n    this.config = defaultConfig;\n    this._loadConfiguration();\n  }\n  getConfiguration() {\n    return this.config;\n  }\n  setConfiguration(configuration) {\n    Object.assign(this.config, configuration);\n    if (this.storage) {\n      const serialized = JSON.stringify(this.config);\n      this.storage.setItem(this.id, serialized);\n    }\n  }\n  _loadConfiguration() {\n    let configuration = {};\n    if (this.storage) {\n      const serializedConfiguration = this.storage.getItem(this.id);\n      configuration = serializedConfiguration ? JSON.parse(serializedConfiguration) : {};\n    }\n    Object.assign(this.config, configuration);\n    return this;\n  }\n}","map":{"version":3,"sources":["../../../src/utils/local-storage.ts"],"names":["getStorage","type","storage","window","x","setItem","removeItem","e","LocalStorage","constructor","id","defaultConfig","config","_loadConfiguration","getConfiguration","setConfiguration","configuration","Object","assign","serialized","JSON","stringify","serializedConfiguration","getItem","parse"],"mappings":";AAEA,SAASA,UAAT,CAAoBC,IAApB,EAAmC;EACjC,IAAI;IAEF,MAAMC,OAAgB,GAAGC,MAAM,CAACF,IAAD,CAA/B;IACA,MAAMG,CAAC,GAAG,kBAAV;IACAF,OAAO,CAACG,OAARH,CAAgBE,CAAhBF,EAAmBE,CAAnBF,CAAAA;IACAA,OAAO,CAACI,UAARJ,CAAmBE,CAAnBF,CAAAA;IACA,OAAOA,OAAP;EACD,CAPD,CAOE,OAAOK,CAAP,EAAU;IACV,OAAO,IAAP;EACD;AACF;AAGD,OAAO,MAAMC,YAAN,CAA6C;EAKlDC,WAAW,CAACC,EAAD,EAAaC,aAAb,EAA8E;IAAA,IAAzBV,IAAyB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAlB,gBAAkB;IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,IAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAAA,KAAA,CAAA,CAAA;IACvF,IAAA,CAAKC,OAAL,GAAeF,UAAU,CAACC,IAAD,CAAzB;IACA,IAAA,CAAKS,EAAL,GAAUA,EAAV;IACA,IAAA,CAAKE,MAAL,GAAcD,aAAd;IACA,IAAA,CAAKE,kBAAL,EAAA;EACD;EAEDC,gBAAgB,GAA4B;IAC1C,OAAO,IAAA,CAAKF,MAAZ;EACD;EAEDG,gBAAgB,CAACC,aAAD,EAAqC;IACnDC,MAAM,CAACC,MAAPD,CAAc,IAAA,CAAKL,MAAnBK,EAA2BD,aAA3BC,CAAAA;IACA,IAAI,IAAA,CAAKf,OAAT,EAAkB;MAChB,MAAMiB,UAAU,GAAGC,IAAI,CAACC,SAALD,CAAe,IAAA,CAAKR,MAApBQ,CAAnB;MACA,IAAA,CAAKlB,OAAL,CAAaG,OAAb,CAAqB,IAAA,CAAKK,EAA1B,EAA8BS,UAA9B,CAAA;IACD;EACF;EAGDN,kBAAkB,GAAG;IACnB,IAAIG,aAAa,GAAG,CAAA,CAApB;IACA,IAAI,IAAA,CAAKd,OAAT,EAAkB;MAChB,MAAMoB,uBAAuB,GAAG,IAAA,CAAKpB,OAAL,CAAaqB,OAAb,CAAqB,IAAA,CAAKb,EAA1B,CAAhC;MACAM,aAAa,GAAGM,uBAAuB,GAAGF,IAAI,CAACI,KAALJ,CAAWE,uBAAXF,CAAH,GAAyC,CAAA,CAAhFJ;IACD;IACDC,MAAM,CAACC,MAAPD,CAAc,IAAA,CAAKL,MAAnBK,EAA2BD,aAA3BC,CAAAA;IACA,OAAO,IAAP;EACD;AAjCiD","sourcesContent":["// probe.gl, MIT license\n\nfunction getStorage(type): Storage {\n  try {\n    // @ts-expect-error\n    const storage: Storage = window[type];\n    const x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return storage;\n  } catch (e) {\n    return null;\n  }\n}\n\n// Store keys in local storage via simple interface\nexport class LocalStorage<Configuration extends {}> {\n  storage: Storage;\n  id: string;\n  config: Required<Configuration>;\n\n  constructor(id: string, defaultConfig: Required<Configuration>, type = 'sessionStorage') {\n    this.storage = getStorage(type);\n    this.id = id;\n    this.config = defaultConfig;\n    this._loadConfiguration();\n  }\n\n  getConfiguration(): Required<Configuration> {\n    return this.config;\n  }\n\n  setConfiguration(configuration: Configuration): void {\n    Object.assign(this.config, configuration);\n    if (this.storage) {\n      const serialized = JSON.stringify(this.config);\n      this.storage.setItem(this.id, serialized);\n    }\n  }\n\n  // Get config from persistent store, if available\n  _loadConfiguration() {\n    let configuration = {};\n    if (this.storage) {\n      const serializedConfiguration = this.storage.getItem(this.id);\n      configuration = serializedConfiguration ? JSON.parse(serializedConfiguration) : {};\n    }\n    Object.assign(this.config, configuration);\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}