{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport Viewport from './viewport';\nimport { zoomToScale, pixelsToWorld, lngLatToWorld, worldToLngLat, getProjectionMatrix, getDistanceScales, getViewMatrix } from './web-mercator-utils';\nimport _fitBounds from './fit-bounds';\nimport * as vec2 from 'gl-matrix/vec2';\nvar WebMercatorViewport = function (_Viewport) {\n  _inherits(WebMercatorViewport, _Viewport);\n  function WebMercatorViewport() {\n    var _this;\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      width = _ref.width,\n      height = _ref.height,\n      _ref$latitude = _ref.latitude,\n      latitude = _ref$latitude === void 0 ? 0 : _ref$latitude,\n      _ref$longitude = _ref.longitude,\n      longitude = _ref$longitude === void 0 ? 0 : _ref$longitude,\n      _ref$zoom = _ref.zoom,\n      zoom = _ref$zoom === void 0 ? 0 : _ref$zoom,\n      _ref$pitch = _ref.pitch,\n      pitch = _ref$pitch === void 0 ? 0 : _ref$pitch,\n      _ref$bearing = _ref.bearing,\n      bearing = _ref$bearing === void 0 ? 0 : _ref$bearing,\n      _ref$altitude = _ref.altitude,\n      altitude = _ref$altitude === void 0 ? 1.5 : _ref$altitude,\n      nearZMultiplier = _ref.nearZMultiplier,\n      farZMultiplier = _ref.farZMultiplier;\n    _classCallCheck(this, WebMercatorViewport);\n    width = width || 1;\n    height = height || 1;\n    var scale = zoomToScale(zoom);\n    altitude = Math.max(0.75, altitude);\n    var center = lngLatToWorld([longitude, latitude], scale);\n    center[2] = 0;\n    var projectionMatrix = getProjectionMatrix({\n      width: width,\n      height: height,\n      pitch: pitch,\n      bearing: bearing,\n      altitude: altitude,\n      nearZMultiplier: nearZMultiplier || 1 / height,\n      farZMultiplier: farZMultiplier || 1.01\n    });\n    var viewMatrix = getViewMatrix({\n      height: height,\n      center: center,\n      pitch: pitch,\n      bearing: bearing,\n      altitude: altitude,\n      flipY: true\n    });\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebMercatorViewport).call(this, {\n      width: width,\n      height: height,\n      viewMatrix: viewMatrix,\n      projectionMatrix: projectionMatrix\n    }));\n    _this.latitude = latitude;\n    _this.longitude = longitude;\n    _this.zoom = zoom;\n    _this.pitch = pitch;\n    _this.bearing = bearing;\n    _this.altitude = altitude;\n    _this.scale = scale;\n    _this.center = center;\n    _this.pixelsPerMeter = getDistanceScales(_assertThisInitialized(_assertThisInitialized(_this))).pixelsPerMeter[2];\n    Object.freeze(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  _createClass(WebMercatorViewport, [{\n    key: \"projectFlat\",\n    value: function projectFlat(lngLat) {\n      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.scale;\n      return lngLatToWorld(lngLat, scale);\n    }\n  }, {\n    key: \"unprojectFlat\",\n    value: function unprojectFlat(xy) {\n      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.scale;\n      return worldToLngLat(xy, scale);\n    }\n  }, {\n    key: \"getMapCenterByLngLatPosition\",\n    value: function getMapCenterByLngLatPosition(_ref2) {\n      var lngLat = _ref2.lngLat,\n        pos = _ref2.pos;\n      var fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n      var toLocation = lngLatToWorld(lngLat, this.scale);\n      var translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n      var newCenter = vec2.add([], this.center, translate);\n      return worldToLngLat(newCenter, this.scale);\n    }\n  }, {\n    key: \"getLocationAtPoint\",\n    value: function getLocationAtPoint(_ref3) {\n      var lngLat = _ref3.lngLat,\n        pos = _ref3.pos;\n      return this.getMapCenterByLngLatPosition({\n        lngLat: lngLat,\n        pos: pos\n      });\n    }\n  }, {\n    key: \"fitBounds\",\n    value: function fitBounds(bounds) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var width = this.width,\n        height = this.height;\n      var _fitBounds2 = _fitBounds(Object.assign({\n          width: width,\n          height: height,\n          bounds: bounds\n        }, options)),\n        longitude = _fitBounds2.longitude,\n        latitude = _fitBounds2.latitude,\n        zoom = _fitBounds2.zoom;\n      return new WebMercatorViewport({\n        width: width,\n        height: height,\n        longitude: longitude,\n        latitude: latitude,\n        zoom: zoom\n      });\n    }\n  }]);\n  return WebMercatorViewport;\n}(Viewport);\nexport { WebMercatorViewport as default };","map":{"version":3,"sources":["../../src/web-mercator-viewport.js"],"names":["Viewport","zoomToScale","pixelsToWorld","lngLatToWorld","worldToLngLat","getProjectionMatrix","getDistanceScales","getViewMatrix","fitBounds","vec2","WebMercatorViewport","width","height","latitude","longitude","zoom","pitch","bearing","altitude","nearZMultiplier","farZMultiplier","scale","Math","max","center","projectionMatrix","viewMatrix","flipY","pixelsPerMeter","Object","freeze","lngLat","xy","pos","fromLocation","pixelUnprojectionMatrix","toLocation","translate","add","negate","newCenter","getMapCenterByLngLatPosition","bounds","options","assign"],"mappings":"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","sourcesContent":["// View and Projection Matrix calculations for mapbox-js style map view properties\nimport Viewport from './viewport';\n\nimport {\n  zoomToScale,\n  pixelsToWorld,\n  lngLatToWorld,\n  worldToLngLat,\n  getProjectionMatrix,\n  getDistanceScales,\n  getViewMatrix\n} from './web-mercator-utils';\nimport fitBounds from './fit-bounds';\n\nimport * as vec2 from 'gl-matrix/vec2';\n\nexport default class WebMercatorViewport extends Viewport {\n  /**\n   * @classdesc\n   * Creates view/projection matrices from mercator params\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   *\n   * @class\n   * @param {Object} opt - options\n   *\n   * @param {Number} opt.width=1 - Width of \"viewport\" or window\n   * @param {Number} opt.height=1 - Height of \"viewport\" or window\n   * @param {Number} opt.scale=1 - Either use scale or zoom\n   * @param {Number} opt.pitch=0 - Camera angle in degrees (0 is straight down)\n   * @param {Number} opt.bearing=0 - Map rotation in degrees (0 means north is up)\n   * @param {Number} opt.altitude= - Altitude of camera in screen units\n   *\n   * Web mercator projection short-hand parameters\n   * @param {Number} opt.latitude - Center of viewport on map (alternative to opt.center)\n   * @param {Number} opt.longitude - Center of viewport on map (alternative to opt.center)\n   * @param {Number} opt.zoom - Scale = Math.pow(2,zoom) on map (alternative to opt.scale)\n\n   * Notes:\n   *  - Only one of center or [latitude, longitude] can be specified\n   *  - [latitude, longitude] can only be specified when \"mercator\" is true\n   *  - Altitude has a default value that matches assumptions in mapbox-gl\n   *  - width and height are forced to 1 if supplied as 0, to avoid\n   *    division by zero. This is intended to reduce the burden of apps to\n   *    to check values before instantiating a Viewport.\n   */\n  /* eslint-disable complexity */\n  constructor({\n    // Map state\n    width,\n    height,\n    latitude = 0,\n    longitude = 0,\n    zoom = 0,\n    pitch = 0,\n    bearing = 0,\n    altitude = 1.5,\n    nearZMultiplier,\n    farZMultiplier\n  } = {}) {\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    const scale = zoomToScale(zoom);\n    // Altitude - prevent division by 0\n    // TODO - just throw an Error instead?\n    altitude = Math.max(0.75, altitude);\n\n    const center = lngLatToWorld([longitude, latitude], scale);\n    center[2] = 0;\n\n    const projectionMatrix = getProjectionMatrix({\n      width,\n      height,\n      pitch,\n      bearing,\n      altitude,\n      nearZMultiplier: nearZMultiplier || (1 / height),\n      farZMultiplier: farZMultiplier || 1.01\n    });\n\n    const viewMatrix = getViewMatrix({\n      height,\n      center,\n      pitch,\n      bearing,\n      altitude,\n      flipY: true\n    });\n\n    super({width, height, viewMatrix, projectionMatrix});\n\n    // Save parameters\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n\n    this.scale = scale;\n    this.center = center;\n    this.pixelsPerMeter = getDistanceScales(this).pixelsPerMeter[2];\n\n    Object.freeze(this);\n  }\n  /* eslint-enable complexity */\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   *\n   * @param {Array} lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return {Array} [x,y] coordinates.\n   */\n  projectFlat(lngLat, scale = this.scale) {\n    return lngLatToWorld(lngLat, scale);\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   *\n   * @param {object|Vector} xy - object with {x,y} members\n   *  representing point on projected map plane\n   * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xy, scale = this.scale) {\n    return worldToLngLat(xy, scale);\n  }\n\n  /**\n   * Get the map center that place a given [lng, lat] coordinate at screen\n   * point [x, y]\n   *\n   * @param {Array} lngLat - [lng,lat] coordinates\n   *   Specifies a point on the sphere.\n   * @param {Array} pos - [x,y] coordinates\n   *   Specifies a point on the screen.\n   * @return {Array} [lng,lat] new map center.\n   */\n  getMapCenterByLngLatPosition({lngLat, pos}) {\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = lngLatToWorld(lngLat, this.scale);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return worldToLngLat(newCenter, this.scale);\n  }\n\n  // Legacy method name\n  getLocationAtPoint({lngLat, pos}) {\n    return this.getMapCenterByLngLatPosition({lngLat, pos});\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   * @param {Array} bounds - [[lon, lat], [lon, lat]]\n   * @param {Number} [options.padding] - The amount of padding in pixels to add to the given bounds.\n   * @param {Array} [options.offset] - The center of the given bounds relative to the map's center,\n   *    [x, y] measured in pixels.\n   * @returns {WebMercatorViewport}\n   */\n  fitBounds(bounds, options = {}) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds(Object.assign({width, height, bounds}, options));\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}