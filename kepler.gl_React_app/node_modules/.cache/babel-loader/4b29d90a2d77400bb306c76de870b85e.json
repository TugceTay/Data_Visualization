{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { LayerExtension } from '@deck.gl/core';\nimport shaderModule from './shader-module';\nvar defaultProps = {\n  getBrushingTarget: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  brushingTarget: 'source',\n  brushingEnabled: true,\n  brushingRadius: 10000\n};\nvar BrushingExtension = function (_LayerExtension) {\n  _inherits(BrushingExtension, _LayerExtension);\n  function BrushingExtension() {\n    _classCallCheck(this, BrushingExtension);\n    return _possibleConstructorReturn(this, _getPrototypeOf(BrushingExtension).apply(this, arguments));\n  }\n  _createClass(BrushingExtension, [{\n    key: \"getShaders\",\n    value: function getShaders(extension) {\n      return {\n        modules: [shaderModule]\n      };\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState(context, extension) {\n      var _this = this;\n      var attributeManager = this.getAttributeManager();\n      if (attributeManager) {\n        attributeManager.add({\n          brushingTargets: {\n            size: 2,\n            accessor: 'getBrushingTarget',\n            update: !this.props.getBrushingTarget && extension.useConstantTargetPositions,\n            shaderAttributes: {\n              brushingTargets: {\n                divisor: 0\n              },\n              instanceBrushingTargets: {\n                divisor: 1\n              }\n            }\n          }\n        });\n      }\n      extension.onMouseMove = function () {\n        _this.getCurrentLayer().setNeedsRedraw();\n      };\n      if (this.context.deck) {\n        this.context.deck.eventManager.on({\n          pointermove: extension.onMouseMove,\n          pointerleave: extension.onMouseMove\n        });\n      }\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState(extension) {\n      if (this.context.deck) {\n        this.context.deck.eventManager.off({\n          pointermove: extension.onMouseMove,\n          pointerleave: extension.onMouseMove\n        });\n      }\n    }\n  }, {\n    key: \"useConstantTargetPositions\",\n    value: function useConstantTargetPositions(attribute) {\n      attribute.constant = true;\n      attribute.value = new Float32Array(2);\n      return;\n    }\n  }]);\n  return BrushingExtension;\n}(LayerExtension);\nexport { BrushingExtension as default };\nBrushingExtension.extensionName = 'BrushingExtension';\nBrushingExtension.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/brushing/brushing.js"],"names":["LayerExtension","shaderModule","defaultProps","getBrushingTarget","type","value","brushingTarget","brushingEnabled","brushingRadius","BrushingExtension","extension","modules","context","attributeManager","getAttributeManager","add","brushingTargets","size","accessor","update","props","useConstantTargetPositions","shaderAttributes","divisor","instanceBrushingTargets","onMouseMove","getCurrentLayer","setNeedsRedraw","deck","eventManager","on","pointermove","pointerleave","off","attribute","constant","Float32Array","extensionName"],"mappings":";;;;;AAoBA,SAAQA,cAAR,QAA6B,eAA7B;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AAEA,IAAMC,YAAY,GAAG;EACnBC,iBAAiB,EAAE;IAACC,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;EAA1B,CADA;EAGnBC,cAAc,EAAE,QAHG;EAInBC,eAAe,EAAE,IAJE;EAKnBC,cAAc,EAAE;AALG,CAArB;IAQqBC,iB;;;;;;;;+BACRC,S,EAAW;MACpB,OAAO;QACLC,OAAO,EAAE,CAACV,YAAD;MADJ,CAAP;IAGD;;;oCAEeW,O,EAASF,S,EAAW;MAAA,IAAA,KAAA,GAAA,IAAA;MAClC,IAAMG,gBAAgB,GAAG,IAAA,CAAKC,mBAAL,EAAzB;MACA,IAAID,gBAAJ,EAAsB;QACpBA,gBAAgB,CAACE,GAAjBF,CAAqB;UACnBG,eAAe,EAAE;YACfC,IAAI,EAAE,CADS;YAEfC,QAAQ,EAAE,mBAFK;YAKfC,MAAM,EAAE,CAAC,IAAA,CAAKC,KAAL,CAAWjB,iBAAZ,IAAiCO,SAAS,CAACW,0BALpC;YAMfC,gBAAgB,EAAE;cAChBN,eAAe,EAAE;gBACfO,OAAO,EAAE;cADM,CADD;cAIhBC,uBAAuB,EAAE;gBACvBD,OAAO,EAAE;cADc;YAJT;UANH;QADE,CAArBV,CAAAA;MAiBD;MAIDH,SAAS,CAACe,WAAVf,GAAwB,YAAM;QAC5B,KAAI,CAACgB,eAAL,EAAA,CAAuBC,cAAvB,EAAA;MACD,CAFDjB;MAGA,IAAI,IAAA,CAAKE,OAAL,CAAagB,IAAjB,EAAuB;QACrB,IAAA,CAAKhB,OAAL,CAAagB,IAAb,CAAkBC,YAAlB,CAA+BC,EAA/B,CAAkC;UAChCC,WAAW,EAAErB,SAAS,CAACe,WADS;UAEhCO,YAAY,EAAEtB,SAAS,CAACe;QAFQ,CAAlC,CAAA;MAID;IACF;;;kCAEaf,S,EAAW;MAEvB,IAAI,IAAA,CAAKE,OAAL,CAAagB,IAAjB,EAAuB;QACrB,IAAA,CAAKhB,OAAL,CAAagB,IAAb,CAAkBC,YAAlB,CAA+BI,GAA/B,CAAmC;UACjCF,WAAW,EAAErB,SAAS,CAACe,WADU;UAEjCO,YAAY,EAAEtB,SAAS,CAACe;QAFS,CAAnC,CAAA;MAID;IACF;;;+CAE0BS,S,EAAW;MACpCA,SAAS,CAACC,QAAVD,GAAqB,IAArBA;MACAA,SAAS,CAAC7B,KAAV6B,GAAkB,IAAIE,YAAJ,CAAiB,CAAjB,CAAlBF;MACA;IACD;;;EAxD4ClC,c;SAA1BS,iB;AA2DrBA,iBAAiB,CAAC4B,aAAlB5B,GAAkC,mBAAlCA;AACAA,iBAAiB,CAACP,YAAlBO,GAAiCP,YAAjCO","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerExtension} from '@deck.gl/core';\nimport shaderModule from './shader-module';\n\nconst defaultProps = {\n  getBrushingTarget: {type: 'accessor', value: [0, 0]},\n\n  brushingTarget: 'source',\n  brushingEnabled: true,\n  brushingRadius: 10000\n};\n\nexport default class BrushingExtension extends LayerExtension {\n  getShaders(extension) {\n    return {\n      modules: [shaderModule]\n    };\n  }\n\n  initializeState(context, extension) {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.add({\n        brushingTargets: {\n          size: 2,\n          accessor: 'getBrushingTarget',\n          // Hack: extension's defaultProps is not merged with the layer's defaultProps,\n          // So we can't use the standard accessor when the prop is undefined\n          update: !this.props.getBrushingTarget && extension.useConstantTargetPositions,\n          shaderAttributes: {\n            brushingTargets: {\n              divisor: 0\n            },\n            instanceBrushingTargets: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n\n    // Trigger redraw when mouse moves\n    // TODO - expose this in a better way\n    extension.onMouseMove = () => {\n      this.getCurrentLayer().setNeedsRedraw();\n    };\n    if (this.context.deck) {\n      this.context.deck.eventManager.on({\n        pointermove: extension.onMouseMove,\n        pointerleave: extension.onMouseMove\n      });\n    }\n  }\n\n  finalizeState(extension) {\n    // Remove event listeners\n    if (this.context.deck) {\n      this.context.deck.eventManager.off({\n        pointermove: extension.onMouseMove,\n        pointerleave: extension.onMouseMove\n      });\n    }\n  }\n\n  useConstantTargetPositions(attribute) {\n    attribute.constant = true;\n    attribute.value = new Float32Array(2);\n    return;\n  }\n}\n\nBrushingExtension.extensionName = 'BrushingExtension';\nBrushingExtension.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}