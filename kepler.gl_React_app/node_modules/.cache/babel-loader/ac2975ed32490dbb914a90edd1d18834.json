{"ast":null,"code":"export function replaceInRange(_ref) {\n  var data = _ref.data,\n    getIndex = _ref.getIndex,\n    dataRange = _ref.dataRange,\n    replace = _ref.replace;\n  var _dataRange$startRow = dataRange.startRow,\n    startRow = _dataRange$startRow === void 0 ? 0 : _dataRange$startRow,\n    _dataRange$endRow = dataRange.endRow,\n    endRow = _dataRange$endRow === void 0 ? Infinity : _dataRange$endRow;\n  var count = data.length;\n  var replaceStart = count;\n  var replaceEnd = count;\n  for (var i = 0; i < count; i++) {\n    var row = getIndex(data[i]);\n    if (replaceStart > i && row >= startRow) {\n      replaceStart = i;\n    }\n    if (row >= endRow) {\n      replaceEnd = i;\n      break;\n    }\n  }\n  var index = replaceStart;\n  var dataLengthChanged = replaceEnd - replaceStart !== replace.length;\n  var endChunk = dataLengthChanged && data.slice(replaceEnd);\n  for (var _i = 0; _i < replace.length; _i++) {\n    data[index++] = replace[_i];\n  }\n  if (dataLengthChanged) {\n    for (var _i2 = 0; _i2 < endChunk.length; _i2++) {\n      data[index++] = endChunk[_i2];\n    }\n    data.length = index;\n  }\n  return {\n    startRow: replaceStart,\n    endRow: replaceStart + replace.length\n  };\n}","map":{"version":3,"sources":["../../src/utils.js"],"names":["replaceInRange","data","getIndex","dataRange","replace","startRow","endRow","Infinity","count","length","replaceStart","replaceEnd","i","row","index","dataLengthChanged","endChunk","slice"],"mappings":"AAIA,OAAO,SAASA,cAAT,CAAA,IAAA,EAA8D;EAAA,IAArCC,IAAqC,GAAA,IAAA,CAArCA,IAAqC;IAA/BC,QAA+B,GAAA,IAAA,CAA/BA,QAA+B;IAArBC,SAAqB,GAAA,IAAA,CAArBA,SAAqB;IAAVC,OAAU,GAAA,IAAA,CAAVA,OAAU;EAAA,IAAA,mBAAA,GACzBD,SADyB,CAC5DE,QAD4D;IAC5DA,QAD4D,GAAA,mBAAA,KAAA,KAAA,CAAA,GACjD,CADiD,GAAA,mBAAA;IAAA,iBAAA,GACzBF,SADyB,CAC9CG,MAD8C;IAC9CA,MAD8C,GAAA,iBAAA,KAAA,KAAA,CAAA,GACrCC,QADqC,GAAA,iBAAA;EAEnE,IAAMC,KAAK,GAAGP,IAAI,CAACQ,MAAnB;EACA,IAAIC,YAAY,GAAGF,KAAnB;EACA,IAAIG,UAAU,GAAGH,KAAjB;EACA,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAApB,EAA2BI,CAAC,EAA5B,EAAgC;IAC9B,IAAMC,GAAG,GAAGX,QAAQ,CAACD,IAAI,CAACW,CAAD,CAAL,CAApB;IACA,IAAIF,YAAY,GAAGE,CAAfF,IAAoBG,GAAG,IAAIR,QAA/B,EAAyC;MACvCK,YAAY,GAAGE,CAAfF;IACD;IACD,IAAIG,GAAG,IAAIP,MAAX,EAAmB;MACjBK,UAAU,GAAGC,CAAbD;MACA;IACD;EACF;EACD,IAAIG,KAAK,GAAGJ,YAAZ;EACA,IAAMK,iBAAiB,GAAGJ,UAAU,GAAGD,YAAbC,KAA8BP,OAAO,CAACK,MAAhE;EAEA,IAAMO,QAAQ,GAAGD,iBAAiB,IAAId,IAAI,CAACgB,KAALhB,CAAWU,UAAXV,CAAtC;EAEA,KAAK,IAAIW,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGR,OAAO,CAACK,MAA5B,EAAoCG,EAAC,EAArC,EAAyC;IACvCX,IAAI,CAACa,KAAK,EAAN,CAAJb,GAAgBG,OAAO,CAACQ,EAAD,CAAvBX;EACD;EACD,IAAIc,iBAAJ,EAAuB;IAErB,KAAK,IAAIH,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGI,QAAQ,CAACP,MAA7B,EAAqCG,GAAC,EAAtC,EAA0C;MACxCX,IAAI,CAACa,KAAK,EAAN,CAAJb,GAAgBe,QAAQ,CAACJ,GAAD,CAAxBX;IACD;IAEDA,IAAI,CAACQ,MAALR,GAAca,KAAdb;EACD;EAED,OAAO;IACLI,QAAQ,EAAEK,YADL;IAELJ,MAAM,EAAEI,YAAY,GAAGN,OAAO,CAACK;EAF1B,CAAP;AAID","sourcesContent":["// Assume data array is sorted by <accessor>\n// Replaces the specified range with a new subarray\n// Mutates the data array\n// Returns {startRow, endRow} of the inserted items\nexport function replaceInRange({data, getIndex, dataRange, replace}) {\n  const {startRow = 0, endRow = Infinity} = dataRange;\n  const count = data.length;\n  let replaceStart = count;\n  let replaceEnd = count;\n  for (let i = 0; i < count; i++) {\n    const row = getIndex(data[i]);\n    if (replaceStart > i && row >= startRow) {\n      replaceStart = i;\n    }\n    if (row >= endRow) {\n      replaceEnd = i;\n      break;\n    }\n  }\n  let index = replaceStart;\n  const dataLengthChanged = replaceEnd - replaceStart !== replace.length;\n  // Save the items after replaceEnd before we overwrite data\n  const endChunk = dataLengthChanged && data.slice(replaceEnd);\n  // Insert new items\n  for (let i = 0; i < replace.length; i++) {\n    data[index++] = replace[i];\n  }\n  if (dataLengthChanged) {\n    // Append items after replaceEnd\n    for (let i = 0; i < endChunk.length; i++) {\n      data[index++] = endChunk[i];\n    }\n    // Trim additional items\n    data.length = index;\n  }\n\n  return {\n    startRow: replaceStart,\n    endRow: replaceStart + replace.length\n  };\n}\n"]},"metadata":{},"sourceType":"module"}