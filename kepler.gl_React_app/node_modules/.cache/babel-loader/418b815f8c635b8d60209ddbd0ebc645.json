{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { COORDINATE_SYSTEM } from './constants';\nimport AttributeManager from './attribute/attribute-manager';\nimport UniformTransitionManager from './uniform-transition-manager';\nimport { diffProps as _diffProps, validateProps as _validateProps } from '../lifecycle/props';\nimport { count } from '../utils/count';\nimport log from '../utils/log';\nimport debug from '../debug';\nimport { withParameters, setParameters } from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport memoize from '../utils/memoize';\nimport { mergeShaders } from '../utils/shader';\nimport { projectPosition as _projectPosition, getWorldPosition } from '../shaderlib/project/project-functions';\nimport typedArrayManager from '../utils/typed-array-manager';\nimport Component from '../lifecycle/component';\nimport LayerState from './layer-state';\nimport { worldToPixels } from '@math.gl/web-mercator';\nimport { load } from '@loaders.gl/core';\nvar TRACE_CHANGE_FLAG = 'layer.changeFlag';\nvar TRACE_INITIALIZE = 'layer.initialize';\nvar TRACE_UPDATE = 'layer.update';\nvar TRACE_FINALIZE = 'layer.finalize';\nvar TRACE_MATCHED = 'layer.matched';\nvar EMPTY_ARRAY = Object.freeze([]);\nvar areViewportsEqual = memoize(function (_ref) {\n  var oldViewport = _ref.oldViewport,\n    viewport = _ref.viewport;\n  return oldViewport.equals(viewport);\n});\nvar pickingColorCache = new Uint8ClampedArray(0);\nvar defaultProps = {\n  data: {\n    type: 'data',\n    value: EMPTY_ARRAY,\n    async: true\n  },\n  dataComparator: null,\n  _dataDiff: {\n    type: 'function',\n    value: function value(data) {\n      return data && data.__diff;\n    },\n    compare: false,\n    optional: true\n  },\n  dataTransform: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onDataLoad: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  fetch: {\n    type: 'function',\n    value: function value(url, _ref2) {\n      var propName = _ref2.propName,\n        layer = _ref2.layer;\n      var resourceManager = layer.context.resourceManager;\n      var loadOptions = layer.getLoadOptions();\n      var inResourceManager = resourceManager.contains(url);\n      if (!inResourceManager && !loadOptions) {\n        resourceManager.add({\n          resourceId: url,\n          data: url,\n          persistent: false\n        });\n        inResourceManager = true;\n      }\n      if (inResourceManager) {\n        return resourceManager.subscribe({\n          resourceId: url,\n          onChange: function onChange(data) {\n            return layer.internalState.reloadAsyncProp(propName, data);\n          },\n          consumerId: layer.id,\n          requestId: propName\n        });\n      }\n      return load(url, loadOptions);\n    },\n    compare: false\n  },\n  updateTriggers: {},\n  visible: true,\n  pickable: false,\n  opacity: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  onHover: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onClick: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onDragStart: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onDrag: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onDragEnd: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n  coordinateOrigin: {\n    type: 'array',\n    value: [0, 0, 0],\n    compare: true\n  },\n  modelMatrix: {\n    type: 'array',\n    value: null,\n    compare: true,\n    optional: true\n  },\n  wrapLongitude: false,\n  positionFormat: 'XYZ',\n  colorFormat: 'RGBA',\n  parameters: {},\n  uniforms: {},\n  extensions: [],\n  getPolygonOffset: {\n    type: 'function',\n    value: function value(_ref3) {\n      var layerIndex = _ref3.layerIndex;\n      return [0, -layerIndex * 100];\n    },\n    compare: false\n  },\n  highlightedObjectIndex: null,\n  autoHighlight: false,\n  highlightColor: {\n    type: 'accessor',\n    value: [0, 0, 128, 128]\n  }\n};\nvar Layer = function (_Component) {\n  _inherits(Layer, _Component);\n  function Layer() {\n    _classCallCheck(this, Layer);\n    return _possibleConstructorReturn(this, _getPrototypeOf(Layer).apply(this, arguments));\n  }\n  _createClass(Layer, [{\n    key: \"toString\",\n    value: function toString() {\n      var className = this.constructor.layerName || this.constructor.name;\n      return \"\".concat(className, \"({id: '\").concat(this.props.id, \"'})\");\n    }\n  }, {\n    key: \"setState\",\n    value: function setState(updateObject) {\n      this.setChangeFlags({\n        stateChanged: true\n      });\n      Object.assign(this.state, updateObject);\n      this.setNeedsRedraw();\n    }\n  }, {\n    key: \"setNeedsRedraw\",\n    value: function setNeedsRedraw() {\n      var redraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (this.internalState) {\n        this.internalState.needsRedraw = redraw;\n      }\n    }\n  }, {\n    key: \"setNeedsUpdate\",\n    value: function setNeedsUpdate() {\n      this.context.layerManager.setNeedsUpdate(String(this));\n      this.internalState.needsUpdate = true;\n    }\n  }, {\n    key: \"getNeedsRedraw\",\n    value: function getNeedsRedraw() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        clearRedrawFlags: false\n      };\n      return this._getNeedsRedraw(opts);\n    }\n  }, {\n    key: \"needsUpdate\",\n    value: function needsUpdate() {\n      return this.internalState.needsUpdate || this.hasUniformTransition() || this.shouldUpdateState(this._getUpdateParams());\n    }\n  }, {\n    key: \"hasUniformTransition\",\n    value: function hasUniformTransition() {\n      return this.internalState.uniformTransitions.active;\n    }\n  }, {\n    key: \"isPickable\",\n    value: function isPickable() {\n      return this.props.pickable && this.props.visible;\n    }\n  }, {\n    key: \"getModels\",\n    value: function getModels() {\n      return this.state && (this.state.models || (this.state.model ? [this.state.model] : []));\n    }\n  }, {\n    key: \"getAttributeManager\",\n    value: function getAttributeManager() {\n      return this.internalState && this.internalState.attributeManager;\n    }\n  }, {\n    key: \"getCurrentLayer\",\n    value: function getCurrentLayer() {\n      return this.internalState && this.internalState.layer;\n    }\n  }, {\n    key: \"getLoadOptions\",\n    value: function getLoadOptions() {\n      return this.props.loadOptions;\n    }\n  }, {\n    key: \"project\",\n    value: function project(xyz) {\n      var viewport = this.context.viewport;\n      var worldPosition = getWorldPosition(xyz, {\n        viewport: viewport,\n        modelMatrix: this.props.modelMatrix,\n        coordinateOrigin: this.props.coordinateOrigin,\n        coordinateSystem: this.props.coordinateSystem\n      });\n      var _worldToPixels = worldToPixels(worldPosition, viewport.pixelProjectionMatrix),\n        _worldToPixels2 = _slicedToArray(_worldToPixels, 3),\n        x = _worldToPixels2[0],\n        y = _worldToPixels2[1],\n        z = _worldToPixels2[2];\n      return xyz.length === 2 ? [x, y] : [x, y, z];\n    }\n  }, {\n    key: \"unproject\",\n    value: function unproject(xy) {\n      var viewport = this.context.viewport;\n      return viewport.unproject(xy);\n    }\n  }, {\n    key: \"projectPosition\",\n    value: function projectPosition(xyz) {\n      return _projectPosition(xyz, {\n        viewport: this.context.viewport,\n        modelMatrix: this.props.modelMatrix,\n        coordinateOrigin: this.props.coordinateOrigin,\n        coordinateSystem: this.props.coordinateSystem\n      });\n    }\n  }, {\n    key: \"use64bitPositions\",\n    value: function use64bitPositions() {\n      var coordinateSystem = this.props.coordinateSystem;\n      return coordinateSystem === COORDINATE_SYSTEM.DEFAULT || coordinateSystem === COORDINATE_SYSTEM.LNGLAT || coordinateSystem === COORDINATE_SYSTEM.CARTESIAN;\n    }\n  }, {\n    key: \"onHover\",\n    value: function onHover(info, pickingEvent) {\n      if (this.props.onHover) {\n        return this.props.onHover(info, pickingEvent);\n      }\n      return false;\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(info, pickingEvent) {\n      if (this.props.onClick) {\n        return this.props.onClick(info, pickingEvent);\n      }\n      return false;\n    }\n  }, {\n    key: \"nullPickingColor\",\n    value: function nullPickingColor() {\n      return [0, 0, 0];\n    }\n  }, {\n    key: \"encodePickingColor\",\n    value: function encodePickingColor(i) {\n      var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      target[0] = i + 1 & 255;\n      target[1] = i + 1 >> 8 & 255;\n      target[2] = i + 1 >> 8 >> 8 & 255;\n      return target;\n    }\n  }, {\n    key: \"decodePickingColor\",\n    value: function decodePickingColor(color) {\n      assert(color instanceof Uint8Array);\n      var _color = _slicedToArray(color, 3),\n        i1 = _color[0],\n        i2 = _color[1],\n        i3 = _color[2];\n      var index = i1 + i2 * 256 + i3 * 65536 - 1;\n      return index;\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      throw new Error(\"Layer \".concat(this, \" has not defined initializeState\"));\n    }\n  }, {\n    key: \"getShaders\",\n    value: function getShaders(shaders) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n      try {\n        for (var _iterator = this.props.extensions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var extension = _step.value;\n          shaders = mergeShaders(shaders, extension.getShaders.call(this, extension));\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n      return shaders;\n    }\n  }, {\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref4) {\n      var oldProps = _ref4.oldProps,\n        props = _ref4.props,\n        context = _ref4.context,\n        changeFlags = _ref4.changeFlags;\n      return changeFlags.propsOrDataChanged;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref5) {\n      var oldProps = _ref5.oldProps,\n        props = _ref5.props,\n        context = _ref5.context,\n        changeFlags = _ref5.changeFlags;\n      var attributeManager = this.getAttributeManager();\n      if (changeFlags.dataChanged && attributeManager) {\n        var dataChanged = changeFlags.dataChanged;\n        if (Array.isArray(dataChanged)) {\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n          try {\n            for (var _iterator2 = dataChanged[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var dataRange = _step2.value;\n              attributeManager.invalidateAll(dataRange);\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n                _iterator2[\"return\"]();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        } else {\n          attributeManager.invalidateAll();\n        }\n      }\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n      try {\n        for (var _iterator3 = this.getModels()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var model = _step3.value;\n          model[\"delete\"]();\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3[\"return\"] != null) {\n            _iterator3[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n      var attributeManager = this.getAttributeManager();\n      if (attributeManager) {\n        attributeManager.finalize();\n      }\n      this.context.resourceManager.unsubscribe({\n        consumerId: this.id\n      });\n      this.internalState.uniformTransitions.clear();\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(opts) {\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n      try {\n        for (var _iterator4 = this.getModels()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var model = _step4.value;\n          model.draw(opts);\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4[\"return\"] != null) {\n            _iterator4[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref6) {\n      var info = _ref6.info,\n        mode = _ref6.mode;\n      var index = info.index;\n      if (index >= 0) {\n        if (Array.isArray(this.props.data)) {\n          info.object = this.props.data[index];\n        }\n      }\n      return info;\n    }\n  }, {\n    key: \"activateViewport\",\n    value: function activateViewport(viewport) {\n      var oldViewport = this.internalState.viewport;\n      this.internalState.viewport = viewport;\n      if (!oldViewport || !areViewportsEqual({\n        oldViewport: oldViewport,\n        viewport: viewport\n      })) {\n        this.setChangeFlags({\n          viewportChanged: true\n        });\n        this._update();\n      }\n    }\n  }, {\n    key: \"invalidateAttribute\",\n    value: function invalidateAttribute() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'all';\n      var diffReason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var attributeManager = this.getAttributeManager();\n      if (!attributeManager) {\n        return;\n      }\n      if (name === 'all') {\n        attributeManager.invalidateAll();\n      } else {\n        attributeManager.invalidate(name);\n      }\n    }\n  }, {\n    key: \"updateAttributes\",\n    value: function updateAttributes(changedAttributes) {\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n      try {\n        for (var _iterator5 = this.getModels()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var model = _step5.value;\n          this._setModelAttributes(model, changedAttributes);\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5[\"return\"] != null) {\n            _iterator5[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_updateAttributes\",\n    value: function _updateAttributes(props) {\n      var attributeManager = this.getAttributeManager();\n      if (!attributeManager) {\n        return;\n      }\n      var numInstances = this.getNumInstances(props);\n      var startIndices = this.getStartIndices(props);\n      attributeManager.update({\n        data: props.data,\n        numInstances: numInstances,\n        startIndices: startIndices,\n        props: props,\n        transitions: props.transitions,\n        buffers: props.data.attributes,\n        context: this,\n        ignoreUnknownAttributes: true\n      });\n      var changedAttributes = attributeManager.getChangedAttributes({\n        clearChangedFlags: true\n      });\n      this.updateAttributes(changedAttributes);\n    }\n  }, {\n    key: \"_updateAttributeTransition\",\n    value: function _updateAttributeTransition() {\n      var attributeManager = this.getAttributeManager();\n      if (attributeManager) {\n        attributeManager.updateTransition();\n      }\n    }\n  }, {\n    key: \"_updateUniformTransition\",\n    value: function _updateUniformTransition() {\n      var uniformTransitions = this.internalState.uniformTransitions;\n      if (uniformTransitions.active) {\n        var propsInTransition = uniformTransitions.update();\n        var props = Object.create(this.props);\n        for (var key in propsInTransition) {\n          Object.defineProperty(props, key, {\n            value: propsInTransition[key]\n          });\n        }\n        return props;\n      }\n      return this.props;\n    }\n  }, {\n    key: \"calculateInstancePickingColors\",\n    value: function calculateInstancePickingColors(attribute, _ref7) {\n      var numInstances = _ref7.numInstances;\n      var cacheSize = pickingColorCache.length / 3;\n      if (cacheSize < numInstances) {\n        pickingColorCache = typedArrayManager.allocate(pickingColorCache, numInstances, {\n          size: 3,\n          copy: true\n        });\n        var newCacheSize = pickingColorCache.length / 3;\n        var pickingColor = [];\n        assert(newCacheSize < 16777215, 'index out of picking color range');\n        for (var i = cacheSize; i < newCacheSize; i++) {\n          this.encodePickingColor(i, pickingColor);\n          pickingColorCache[i * 3 + 0] = pickingColor[0];\n          pickingColorCache[i * 3 + 1] = pickingColor[1];\n          pickingColorCache[i * 3 + 2] = pickingColor[2];\n        }\n      }\n      attribute.value = pickingColorCache.subarray(0, numInstances * 3);\n    }\n  }, {\n    key: \"_setModelAttributes\",\n    value: function _setModelAttributes(model, changedAttributes) {\n      var attributeManager = this.getAttributeManager();\n      var excludeAttributes = model.userData.excludeAttributes || {};\n      var shaderAttributes = attributeManager.getShaderAttributes(changedAttributes, excludeAttributes);\n      model.setAttributes(shaderAttributes);\n    }\n  }, {\n    key: \"clearPickingColor\",\n    value: function clearPickingColor(color) {\n      var _this$getAttributeMan = this.getAttributeManager().attributes,\n        pickingColors = _this$getAttributeMan.pickingColors,\n        instancePickingColors = _this$getAttributeMan.instancePickingColors;\n      var colors = pickingColors || instancePickingColors;\n      var i = this.decodePickingColor(color);\n      var start = colors.getVertexOffset(i);\n      var end = colors.getVertexOffset(i + 1);\n      colors.buffer.subData({\n        data: new Uint8Array(end - start),\n        offset: start\n      });\n    }\n  }, {\n    key: \"restorePickingColors\",\n    value: function restorePickingColors() {\n      var _this$getAttributeMan2 = this.getAttributeManager().attributes,\n        pickingColors = _this$getAttributeMan2.pickingColors,\n        instancePickingColors = _this$getAttributeMan2.instancePickingColors;\n      var colors = pickingColors || instancePickingColors;\n      colors.updateSubBuffer({\n        startOffset: 0\n      });\n    }\n  }, {\n    key: \"getNumInstances\",\n    value: function getNumInstances(props) {\n      props = props || this.props;\n      if (props.numInstances !== undefined) {\n        return props.numInstances;\n      }\n      if (this.state && this.state.numInstances !== undefined) {\n        return this.state.numInstances;\n      }\n      return count(props.data);\n    }\n  }, {\n    key: \"getStartIndices\",\n    value: function getStartIndices(props) {\n      props = props || this.props;\n      if (props.startIndices !== undefined) {\n        return props.startIndices;\n      }\n      if (this.state && this.state.startIndices) {\n        return this.state.startIndices;\n      }\n      return null;\n    }\n  }, {\n    key: \"_initialize\",\n    value: function _initialize() {\n      debug(TRACE_INITIALIZE, this);\n      this._initState();\n      this.initializeState(this.context);\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n      try {\n        for (var _iterator6 = this.props.extensions[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var extension = _step6.value;\n          extension.initializeState.call(this, this.context, extension);\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6[\"return\"] != null) {\n            _iterator6[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n      this.setChangeFlags({\n        dataChanged: true,\n        propsChanged: true,\n        viewportChanged: true,\n        extensionsChanged: true\n      });\n      this._updateState();\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      var stateNeedsUpdate = this.needsUpdate();\n      debug(TRACE_UPDATE, this, stateNeedsUpdate);\n      if (stateNeedsUpdate) {\n        this._updateState();\n      }\n    }\n  }, {\n    key: \"_updateState\",\n    value: function _updateState() {\n      var currentProps = this.props;\n      var currentViewport = this.context.viewport;\n      var propsInTransition = this._updateUniformTransition();\n      this.internalState.propsInTransition = propsInTransition;\n      this.context.viewport = this.internalState.viewport || currentViewport;\n      this.props = propsInTransition;\n      var updateParams = this._getUpdateParams();\n      if (this.context.gl) {\n        this.updateState(updateParams);\n      } else {\n        try {\n          this.updateState(updateParams);\n        } catch (error) {}\n      }\n      var _iteratorNormalCompletion7 = true;\n      var _didIteratorError7 = false;\n      var _iteratorError7 = undefined;\n      try {\n        for (var _iterator7 = this.props.extensions[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n          var extension = _step7.value;\n          extension.updateState.call(this, updateParams, extension);\n        }\n      } catch (err) {\n        _didIteratorError7 = true;\n        _iteratorError7 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion7 && _iterator7[\"return\"] != null) {\n            _iterator7[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError7) {\n            throw _iteratorError7;\n          }\n        }\n      }\n      this._updateModules(updateParams);\n      if (this.isComposite) {\n        this._renderLayers(updateParams);\n      } else {\n        this.setNeedsRedraw();\n        this._updateAttributes(this.props);\n        if (this.state.model) {\n          this.state.model.setInstanceCount(this.getNumInstances());\n        }\n      }\n      this.context.viewport = currentViewport;\n      this.props = currentProps;\n      this.clearChangeFlags();\n      this.internalState.needsUpdate = false;\n      this.internalState.resetOldProps();\n    }\n  }, {\n    key: \"_finalize\",\n    value: function _finalize() {\n      debug(TRACE_FINALIZE, this);\n      assert(this.internalState && this.state);\n      this.finalizeState(this.context);\n      var _iteratorNormalCompletion8 = true;\n      var _didIteratorError8 = false;\n      var _iteratorError8 = undefined;\n      try {\n        for (var _iterator8 = this.props.extensions[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n          var extension = _step8.value;\n          extension.finalizeState.call(this, extension);\n        }\n      } catch (err) {\n        _didIteratorError8 = true;\n        _iteratorError8 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion8 && _iterator8[\"return\"] != null) {\n            _iterator8[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError8) {\n            throw _iteratorError8;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"drawLayer\",\n    value: function drawLayer(_ref8) {\n      var _this = this;\n      var _ref8$moduleParameter = _ref8.moduleParameters,\n        moduleParameters = _ref8$moduleParameter === void 0 ? null : _ref8$moduleParameter,\n        _ref8$uniforms = _ref8.uniforms,\n        uniforms = _ref8$uniforms === void 0 ? {} : _ref8$uniforms,\n        _ref8$parameters = _ref8.parameters,\n        parameters = _ref8$parameters === void 0 ? {} : _ref8$parameters;\n      this._updateAttributeTransition();\n      var currentProps = this.props;\n      this.props = this.internalState.propsInTransition || currentProps;\n      var opacity = this.props.opacity;\n      uniforms.opacity = Math.pow(opacity, 1 / 2.2);\n      if (moduleParameters) {\n        this.setModuleParameters(moduleParameters);\n      }\n      var getPolygonOffset = this.props.getPolygonOffset;\n      var offsets = getPolygonOffset && getPolygonOffset(uniforms) || [0, 0];\n      setParameters(this.context.gl, {\n        polygonOffset: offsets\n      });\n      withParameters(this.context.gl, parameters, function () {\n        var opts = {\n          moduleParameters: moduleParameters,\n          uniforms: uniforms,\n          parameters: parameters,\n          context: _this.context\n        };\n        var _iteratorNormalCompletion9 = true;\n        var _didIteratorError9 = false;\n        var _iteratorError9 = undefined;\n        try {\n          for (var _iterator9 = _this.props.extensions[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n            var extension = _step9.value;\n            extension.draw.call(_this, opts, extension);\n          }\n        } catch (err) {\n          _didIteratorError9 = true;\n          _iteratorError9 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion9 && _iterator9[\"return\"] != null) {\n              _iterator9[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError9) {\n              throw _iteratorError9;\n            }\n          }\n        }\n        _this.draw(opts);\n      });\n      this.props = currentProps;\n    }\n  }, {\n    key: \"getChangeFlags\",\n    value: function getChangeFlags() {\n      return this.internalState.changeFlags;\n    }\n  }, {\n    key: \"setChangeFlags\",\n    value: function setChangeFlags(flags) {\n      var changeFlags = this.internalState.changeFlags;\n      for (var key in changeFlags) {\n        if (flags[key] && !changeFlags[key]) {\n          changeFlags[key] = flags[key];\n          debug(TRACE_CHANGE_FLAG, this, key, flags);\n        }\n      }\n      var propsOrDataChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged || changeFlags.propsChanged || changeFlags.extensionsChanged;\n      changeFlags.propsOrDataChanged = propsOrDataChanged;\n      changeFlags.somethingChanged = propsOrDataChanged || flags.viewportChanged || flags.stateChanged;\n    }\n  }, {\n    key: \"clearChangeFlags\",\n    value: function clearChangeFlags() {\n      this.internalState.changeFlags = {\n        dataChanged: false,\n        propsChanged: false,\n        updateTriggersChanged: false,\n        viewportChanged: false,\n        stateChanged: false,\n        extensionsChanged: false,\n        propsOrDataChanged: false,\n        somethingChanged: false\n      };\n    }\n  }, {\n    key: \"diffProps\",\n    value: function diffProps(newProps, oldProps) {\n      var changeFlags = _diffProps(newProps, oldProps);\n      if (changeFlags.updateTriggersChanged) {\n        for (var key in changeFlags.updateTriggersChanged) {\n          if (changeFlags.updateTriggersChanged[key]) {\n            this.invalidateAttribute(key);\n          }\n        }\n      }\n      if (changeFlags.transitionsChanged) {\n        for (var _key in changeFlags.transitionsChanged) {\n          this.internalState.uniformTransitions.add(_key, oldProps[_key], newProps[_key], newProps.transitions[_key]);\n        }\n      }\n      return this.setChangeFlags(changeFlags);\n    }\n  }, {\n    key: \"validateProps\",\n    value: function validateProps() {\n      _validateProps(this.props);\n    }\n  }, {\n    key: \"setModuleParameters\",\n    value: function setModuleParameters(moduleParameters) {\n      var _iteratorNormalCompletion10 = true;\n      var _didIteratorError10 = false;\n      var _iteratorError10 = undefined;\n      try {\n        for (var _iterator10 = this.getModels()[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n          var model = _step10.value;\n          model.updateModuleSettings(moduleParameters);\n        }\n      } catch (err) {\n        _didIteratorError10 = true;\n        _iteratorError10 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion10 && _iterator10[\"return\"] != null) {\n            _iterator10[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError10) {\n            throw _iteratorError10;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_updateModules\",\n    value: function _updateModules(_ref9) {\n      var props = _ref9.props,\n        oldProps = _ref9.oldProps;\n      var autoHighlight = props.autoHighlight,\n        highlightedObjectIndex = props.highlightedObjectIndex,\n        highlightColor = props.highlightColor;\n      if (oldProps.autoHighlight !== autoHighlight || oldProps.highlightedObjectIndex !== highlightedObjectIndex || oldProps.highlightColor !== highlightColor) {\n        var parameters = {};\n        if (!autoHighlight) {\n          parameters.pickingSelectedColor = null;\n        }\n        if (Array.isArray(highlightColor)) {\n          parameters.pickingHighlightColor = highlightColor;\n        }\n        if (Number.isInteger(highlightedObjectIndex)) {\n          parameters.pickingSelectedColor = highlightedObjectIndex >= 0 ? this.encodePickingColor(highlightedObjectIndex) : null;\n        }\n        this.setModuleParameters(parameters);\n      }\n    }\n  }, {\n    key: \"_getUpdateParams\",\n    value: function _getUpdateParams() {\n      return {\n        props: this.props,\n        oldProps: this.internalState.getOldProps(),\n        context: this.context,\n        changeFlags: this.internalState.changeFlags\n      };\n    }\n  }, {\n    key: \"_getNeedsRedraw\",\n    value: function _getNeedsRedraw(opts) {\n      if (!this.internalState) {\n        return false;\n      }\n      var redraw = false;\n      redraw = redraw || this.internalState.needsRedraw && this.id;\n      this.internalState.needsRedraw = this.internalState.needsRedraw && !opts.clearRedrawFlags;\n      var attributeManager = this.getAttributeManager();\n      var attributeManagerNeedsRedraw = attributeManager && attributeManager.getNeedsRedraw(opts);\n      redraw = redraw || attributeManagerNeedsRedraw;\n      return redraw;\n    }\n  }, {\n    key: \"_getAttributeManager\",\n    value: function _getAttributeManager() {\n      return new AttributeManager(this.context.gl, {\n        id: this.props.id,\n        stats: this.context.stats,\n        timeline: this.context.timeline\n      });\n    }\n  }, {\n    key: \"_initState\",\n    value: function _initState() {\n      assert(!this.internalState && !this.state);\n      assert(isFinite(this.props.coordinateSystem), \"\".concat(this.id, \": invalid coordinateSystem\"));\n      var attributeManager = this._getAttributeManager();\n      if (attributeManager) {\n        attributeManager.addInstanced({\n          instancePickingColors: {\n            type: 5121,\n            size: 3,\n            noAlloc: true,\n            update: this.calculateInstancePickingColors\n          }\n        });\n      }\n      this.internalState = new LayerState({\n        attributeManager: attributeManager,\n        layer: this\n      });\n      this.clearChangeFlags();\n      this.state = {};\n      Object.defineProperty(this.state, 'attributeManager', {\n        get: function get() {\n          log.deprecated('layer.state.attributeManager', 'layer.getAttributeManager()');\n          return attributeManager;\n        }\n      });\n      this.internalState.layer = this;\n      this.internalState.uniformTransitions = new UniformTransitionManager(this.context.timeline);\n      this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);\n      this.internalState.setAsyncProps(this.props);\n    }\n  }, {\n    key: \"_transferState\",\n    value: function _transferState(oldLayer) {\n      debug(TRACE_MATCHED, this, this === oldLayer);\n      var state = oldLayer.state,\n        internalState = oldLayer.internalState;\n      assert(state && internalState);\n      if (this === oldLayer) {\n        return;\n      }\n      this.internalState = internalState;\n      this.internalState.layer = this;\n      this.state = state;\n      this.internalState.setAsyncProps(this.props);\n      this.diffProps(this.props, this.internalState.getOldProps());\n    }\n  }, {\n    key: \"_onAsyncPropUpdated\",\n    value: function _onAsyncPropUpdated() {\n      this.diffProps(this.props, this.internalState.getOldProps());\n      this.setNeedsUpdate();\n    }\n  }, {\n    key: \"isLoaded\",\n    get: function get() {\n      return this.internalState && !this.internalState.isAsyncPropLoading();\n    }\n  }, {\n    key: \"wrapLongitude\",\n    get: function get() {\n      return this.props.wrapLongitude;\n    }\n  }]);\n  return Layer;\n}(Component);\nexport { Layer as default };\nLayer.layerName = 'Layer';\nLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/lib/layer.js"],"names":["COORDINATE_SYSTEM","AttributeManager","UniformTransitionManager","diffProps","validateProps","count","log","debug","withParameters","setParameters","assert","memoize","mergeShaders","projectPosition","getWorldPosition","typedArrayManager","Component","LayerState","worldToPixels","load","TRACE_CHANGE_FLAG","TRACE_INITIALIZE","TRACE_UPDATE","TRACE_FINALIZE","TRACE_MATCHED","EMPTY_ARRAY","Object","freeze","areViewportsEqual","oldViewport","viewport","equals","pickingColorCache","Uint8ClampedArray","defaultProps","data","type","value","async","dataComparator","_dataDiff","__diff","compare","optional","dataTransform","onDataLoad","fetch","url","propName","layer","resourceManager","context","loadOptions","getLoadOptions","inResourceManager","contains","add","resourceId","persistent","subscribe","onChange","internalState","reloadAsyncProp","consumerId","id","requestId","updateTriggers","visible","pickable","opacity","min","max","onHover","onClick","onDragStart","onDrag","onDragEnd","coordinateSystem","DEFAULT","coordinateOrigin","modelMatrix","wrapLongitude","positionFormat","colorFormat","parameters","uniforms","extensions","getPolygonOffset","layerIndex","highlightedObjectIndex","autoHighlight","highlightColor","Layer","className","constructor","layerName","name","props","updateObject","setChangeFlags","stateChanged","assign","state","setNeedsRedraw","redraw","needsRedraw","layerManager","setNeedsUpdate","String","needsUpdate","opts","clearRedrawFlags","_getNeedsRedraw","hasUniformTransition","shouldUpdateState","_getUpdateParams","uniformTransitions","active","isAsyncPropLoading","models","model","attributeManager","xyz","worldPosition","x","y","z","pixelProjectionMatrix","length","xy","unproject","LNGLAT","CARTESIAN","info","pickingEvent","i","target","color","Uint8Array","i1","i2","i3","index","Error","shaders","extension","getShaders","call","oldProps","changeFlags","propsOrDataChanged","getAttributeManager","dataChanged","Array","isArray","dataRange","invalidateAll","getModels","finalize","unsubscribe","clear","draw","mode","object","viewportChanged","_update","diffReason","invalidate","changedAttributes","_setModelAttributes","numInstances","getNumInstances","startIndices","getStartIndices","update","transitions","buffers","attributes","ignoreUnknownAttributes","getChangedAttributes","clearChangedFlags","updateAttributes","updateTransition","propsInTransition","create","key","defineProperty","attribute","cacheSize","allocate","size","copy","newCacheSize","pickingColor","encodePickingColor","subarray","excludeAttributes","userData","shaderAttributes","getShaderAttributes","setAttributes","pickingColors","instancePickingColors","colors","decodePickingColor","start","getVertexOffset","end","buffer","subData","offset","updateSubBuffer","startOffset","undefined","_initState","initializeState","propsChanged","extensionsChanged","_updateState","stateNeedsUpdate","currentProps","currentViewport","_updateUniformTransition","updateParams","gl","updateState","error","_updateModules","isComposite","_renderLayers","_updateAttributes","setInstanceCount","clearChangeFlags","resetOldProps","finalizeState","moduleParameters","_updateAttributeTransition","Math","pow","setModuleParameters","offsets","polygonOffset","flags","updateTriggersChanged","somethingChanged","newProps","invalidateAttribute","transitionsChanged","updateModuleSettings","pickingSelectedColor","pickingHighlightColor","Number","isInteger","getOldProps","attributeManagerNeedsRedraw","getNeedsRedraw","stats","timeline","isFinite","_getAttributeManager","addInstanced","noAlloc","calculateInstancePickingColors","get","deprecated","onAsyncPropUpdated","_onAsyncPropUpdated","bind","setAsyncProps","oldLayer"],"mappings":";;;;;;AAqBA,SAAQA,iBAAR,QAAgC,aAAhC;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,OAAOC,wBAAP,MAAqC,8BAArC;AACA,SAAQC,SAAS,IAATA,UAAR,EAAmBC,aAAa,IAAbA,cAAnB,QAAuC,oBAAvC;AACA,SAAQC,KAAR,QAAoB,gBAApB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,SAAQC,cAAR,EAAwBC,aAAxB,QAA4C,eAA5C;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAAQC,YAAR,QAA2B,iBAA3B;AACA,SAAQC,eAAe,IAAfA,gBAAR,EAAyBC,gBAAzB,QAAgD,wCAAhD;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AAEA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAEA,SAAQC,aAAR,QAA4B,uBAA5B;AAEA,SAAQC,IAAR,QAAmB,kBAAnB;AAEA,IAAMC,iBAAiB,GAAG,kBAA1B;AACA,IAAMC,gBAAgB,GAAG,kBAAzB;AACA,IAAMC,YAAY,GAAG,cAArB;AACA,IAAMC,cAAc,GAAG,gBAAvB;AACA,IAAMC,aAAa,GAAG,eAAtB;AAEA,IAAMC,WAAW,GAAGC,MAAM,CAACC,MAAPD,CAAc,EAAdA,CAApB;AAGA,IAAME,iBAAiB,GAAGjB,OAAO,CAAC,UAAA,IAAA,EAA6B;EAAA,IAA3BkB,WAA2B,GAAA,IAAA,CAA3BA,WAA2B;IAAdC,QAAc,GAAA,IAAA,CAAdA,QAAc;EAC7D,OAAOD,WAAW,CAACE,MAAZF,CAAmBC,QAAnBD,CAAP;AACD,CAFgC,CAAjC;AAIA,IAAIG,iBAAiB,GAAG,IAAIC,iBAAJ,CAAsB,CAAtB,CAAxB;AAEA,IAAMC,YAAY,GAAG;EAEnBC,IAAI,EAAE;IAACC,IAAI,EAAE,MAAP;IAAeC,KAAK,EAAEZ,WAAtB;IAAmCa,KAAK,EAAE;EAA1C,CAFa;EAGnBC,cAAc,EAAE,IAHG;EAInBC,SAAS,EAAE;IAACJ,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAE,SAAA,KAAA,CAAA,IAAI,EAAA;MAAA,OAAIF,IAAI,IAAIA,IAAI,CAACM,MAAjB;IAAA,CAA9B;IAAuDC,OAAO,EAAE,KAAhE;IAAuEC,QAAQ,EAAE;EAAjF,CAJQ;EAKnBC,aAAa,EAAE;IAACR,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAE,IAA1B;IAAgCK,OAAO,EAAE,KAAzC;IAAgDC,QAAQ,EAAE;EAA1D,CALI;EAMnBE,UAAU,EAAE;IAACT,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAE,IAA1B;IAAgCK,OAAO,EAAE,KAAzC;IAAgDC,QAAQ,EAAE;EAA1D,CANO;EAOnBG,KAAK,EAAE;IACLV,IAAI,EAAE,UADD;IAELC,KAAK,EAAE,SAAA,KAAA,CAACU,GAAD,EAAA,KAAA,EAA4B;MAAA,IAArBC,QAAqB,GAAA,KAAA,CAArBA,QAAqB;QAAXC,KAAW,GAAA,KAAA,CAAXA,KAAW;MAAA,IAC1BC,eAD0B,GACPD,KAAK,CAACE,OADC,CAC1BD,eAD0B;MAEjC,IAAME,WAAW,GAAGH,KAAK,CAACI,cAANJ,EAApB;MACA,IAAIK,iBAAiB,GAAGJ,eAAe,CAACK,QAAhBL,CAAyBH,GAAzBG,CAAxB;MAEA,IAAI,CAACI,iBAAD,IAAsB,CAACF,WAA3B,EAAwC;QAEtCF,eAAe,CAACM,GAAhBN,CAAoB;UAACO,UAAU,EAAEV,GAAb;UAAkBZ,IAAI,EAAEY,GAAxB;UAA6BW,UAAU,EAAE;QAAzC,CAApBR,CAAAA;QACAI,iBAAiB,GAAG,IAApBA;MACD;MACD,IAAIA,iBAAJ,EAAuB;QACrB,OAAO,eAAe,CAACK,SAAhB,CAA0B;UAC/BF,UAAU,EAAEV,GADmB;UAE/Ba,QAAQ,EAAE,SAAA,QAAA,CAAA,IAAI,EAAA;YAAA,OAAIX,KAAK,CAACY,aAANZ,CAAoBa,eAApBb,CAAoCD,QAApCC,EAA8Cd,IAA9Cc,CAAJ;UAAA,CAFiB;UAG/Bc,UAAU,EAAEd,KAAK,CAACe,EAHa;UAI/BC,SAAS,EAAEjB;QAJoB,CAA1B,CAAP;MAMD;MAED,OAAO7B,IAAI,CAAC4B,GAAD,EAAMK,WAAN,CAAX;IACD,CAtBI;IAuBLV,OAAO,EAAE;EAvBJ,CAPY;EAgCnBwB,cAAc,EAAE,CAAA,CAhCG;EAkCnBC,OAAO,EAAE,IAlCU;EAmCnBC,QAAQ,EAAE,KAnCS;EAoCnBC,OAAO,EAAE;IAACjC,IAAI,EAAE,QAAP;IAAiBkC,GAAG,EAAE,CAAtB;IAAyBC,GAAG,EAAE,CAA9B;IAAiClC,KAAK,EAAE;EAAxC,CApCU;EAsCnBmC,OAAO,EAAE;IAACpC,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAE,IAA1B;IAAgCK,OAAO,EAAE,KAAzC;IAAgDC,QAAQ,EAAE;EAA1D,CAtCU;EAuCnB8B,OAAO,EAAE;IAACrC,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAE,IAA1B;IAAgCK,OAAO,EAAE,KAAzC;IAAgDC,QAAQ,EAAE;EAA1D,CAvCU;EAwCnB+B,WAAW,EAAE;IAACtC,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAE,IAA1B;IAAgCK,OAAO,EAAE,KAAzC;IAAgDC,QAAQ,EAAE;EAA1D,CAxCM;EAyCnBgC,MAAM,EAAE;IAACvC,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAE,IAA1B;IAAgCK,OAAO,EAAE,KAAzC;IAAgDC,QAAQ,EAAE;EAA1D,CAzCW;EA0CnBiC,SAAS,EAAE;IAACxC,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAE,IAA1B;IAAgCK,OAAO,EAAE,KAAzC;IAAgDC,QAAQ,EAAE;EAA1D,CA1CQ;EA4CnBkC,gBAAgB,EAAE7E,iBAAiB,CAAC8E,OA5CjB;EA6CnBC,gBAAgB,EAAE;IAAC3C,IAAI,EAAE,OAAP;IAAgBC,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAvB;IAAkCK,OAAO,EAAE;EAA3C,CA7CC;EA8CnBsC,WAAW,EAAE;IAAC5C,IAAI,EAAE,OAAP;IAAgBC,KAAK,EAAE,IAAvB;IAA6BK,OAAO,EAAE,IAAtC;IAA4CC,QAAQ,EAAE;EAAtD,CA9CM;EA+CnBsC,aAAa,EAAE,KA/CI;EAgDnBC,cAAc,EAAE,KAhDG;EAiDnBC,WAAW,EAAE,MAjDM;EAmDnBC,UAAU,EAAE,CAAA,CAnDO;EAoDnBC,QAAQ,EAAE,CAAA,CApDS;EAqDnBC,UAAU,EAAE,EArDO;EA0DnBC,gBAAgB,EAAE;IAChBnD,IAAI,EAAE,UADU;IAEhBC,KAAK,EAAE,SAAA,KAAA,CAAA,KAAA,EAAA;MAAA,IAAEmD,UAAF,GAAA,KAAA,CAAEA,UAAF;MAAA,OAAkB,CAAC,CAAD,EAAI,CAACA,UAAD,GAAc,GAAlB,CAAlB;IAAA,CAFS;IAGhB9C,OAAO,EAAE;EAHO,CA1DC;EAiEnB+C,sBAAsB,EAAE,IAjEL;EAkEnBC,aAAa,EAAE,KAlEI;EAmEnBC,cAAc,EAAE;IAACvD,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,GAAP,EAAY,GAAZ;EAA1B;AAnEG,CAArB;IAsEqBuD,K;;;;;;;;+BACR;MACT,IAAMC,SAAS,GAAG,IAAA,CAAKC,WAAL,CAAiBC,SAAjB,IAA8B,IAAA,CAAKD,WAAL,CAAiBE,IAAjE;MACA,OAAA,EAAA,CAAA,MAAA,CAAUH,SAAV,EAAA,SAAA,CAAA,CAAA,MAAA,CAA6B,IAAA,CAAKI,KAAL,CAAWjC,EAAxC,EAAA,KAAA,CAAA;IACD;;;6BAKQkC,Y,EAAc;MACrB,IAAA,CAAKC,cAAL,CAAoB;QAACC,YAAY,EAAE;MAAf,CAApB,CAAA;MACA1E,MAAM,CAAC2E,MAAP3E,CAAc,IAAA,CAAK4E,KAAnB5E,EAA0BwE,YAA1BxE,CAAAA;MACA,IAAA,CAAK6E,cAAL,EAAA;IACD;;;qCAG6B;MAAA,IAAfC,MAAe,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAN,IAAM;MAC5B,IAAI,IAAA,CAAK3C,aAAT,EAAwB;QACtB,IAAA,CAAKA,aAAL,CAAmB4C,WAAnB,GAAiCD,MAAjC;MACD;IACF;;;qCAGgB;MACf,IAAA,CAAKrD,OAAL,CAAauD,YAAb,CAA0BC,cAA1B,CAAyCC,MAAM,CAAC,IAAD,CAA/C,CAAA;MACA,IAAA,CAAK/C,aAAL,CAAmBgD,WAAnB,GAAiC,IAAjC;IACD;;;qCAGgD;MAAA,IAAlCC,IAAkC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAA3B;QAACC,gBAAgB,EAAE;MAAnB,CAA2B;MAC/C,OAAO,IAAA,CAAKC,eAAL,CAAqBF,IAArB,CAAP;IACD;;;kCAGa;MAEZ,OACE,IAAA,CAAKjD,aAAL,CAAmBgD,WAAnB,IACA,IAAA,CAAKI,oBAAL,EADA,IAEA,IAAA,CAAKC,iBAAL,CAAuB,IAAA,CAAKC,gBAAL,EAAvB,CAHF;IAMD;;;2CAEsB;MACrB,OAAO,IAAA,CAAKtD,aAAL,CAAmBuD,kBAAnB,CAAsCC,MAA7C;IACD;;;iCAWY;MACX,OAAO,IAAA,CAAKpB,KAAL,CAAW7B,QAAX,IAAuB,IAAA,CAAK6B,KAAL,CAAW9B,OAAzC;IACD;;;gCAGW;MACV,OAAO,IAAA,CAAKmC,KAAL,KAAe,IAAA,CAAKA,KAAL,CAAWiB,MAAX,KAAsB,IAAA,CAAKjB,KAAL,CAAWkB,KAAX,GAAmB,CAAC,IAAA,CAAKlB,KAAL,CAAWkB,KAAZ,CAAnB,GAAwC,EAA9D,CAAf,CAAP;IACD;;;0CAEqB;MACpB,OAAO,IAAA,CAAK3D,aAAL,IAAsB,IAAA,CAAKA,aAAL,CAAmB4D,gBAAhD;IACD;;;sCAIiB;MAChB,OAAO,IAAA,CAAK5D,aAAL,IAAsB,IAAA,CAAKA,aAAL,CAAmBZ,KAAhD;IACD;;;qCAGgB;MACf,OAAO,IAAA,CAAKgD,KAAL,CAAW7C,WAAlB;IACD;;;4BAMOsE,G,EAAK;MAAA,IACJ5F,QADI,GACQ,IAAA,CAAKqB,OADb,CACJrB,QADI;MAEX,IAAM6F,aAAa,GAAG7G,gBAAgB,CAAC4G,GAAD,EAAM;QAC1C5F,QAAQ,EAARA,QAD0C;QAE1CkD,WAAW,EAAE,IAAA,CAAKiB,KAAL,CAAWjB,WAFkB;QAG1CD,gBAAgB,EAAE,IAAA,CAAKkB,KAAL,CAAWlB,gBAHa;QAI1CF,gBAAgB,EAAE,IAAA,CAAKoB,KAAL,CAAWpB;MAJa,CAAN,CAAtC;MAFW,IAAA,cAAA,GAQO3D,aAAa,CAACyG,aAAD,EAAgB7F,QAAQ,CAACiG,qBAAzB,CARpB;QAAA,eAAA,GAAA,cAAA,CAAA,cAAA,EAAA,CAAA,CAAA;QAQJH,CARI,GAAA,eAAA,CAAA,CAAA,CAAA;QAQDC,CARC,GAAA,eAAA,CAAA,CAAA,CAAA;QAQEC,CARF,GAAA,eAAA,CAAA,CAAA,CAAA;MASX,OAAOJ,GAAG,CAACM,MAAJN,KAAe,CAAfA,GAAmB,CAACE,CAAD,EAAIC,CAAJ,CAAnBH,GAA4B,CAACE,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAnC;IACD;;;8BAISG,E,EAAI;MAAA,IACLnG,QADK,GACO,IAAA,CAAKqB,OADZ,CACLrB,QADK;MAEZ,OAAOA,QAAQ,CAACoG,SAATpG,CAAmBmG,EAAnBnG,CAAP;IACD;;;oCAEe4F,G,EAAK;MACnB,OAAO7G,gBAAe,CAAC6G,GAAD,EAAM;QAC1B5F,QAAQ,EAAE,IAAA,CAAKqB,OAAL,CAAarB,QADG;QAE1BkD,WAAW,EAAE,IAAA,CAAKiB,KAAL,CAAWjB,WAFE;QAG1BD,gBAAgB,EAAE,IAAA,CAAKkB,KAAL,CAAWlB,gBAHH;QAI1BF,gBAAgB,EAAE,IAAA,CAAKoB,KAAL,CAAWpB;MAJH,CAAN,CAAtB;IAMD;;;wCAEmB;MAAA,IACXA,gBADW,GACS,IAAA,CAAKoB,KADd,CACXpB,gBADW;MAElB,OACEA,gBAAgB,KAAK7E,iBAAiB,CAAC8E,OAAvCD,IACAA,gBAAgB,KAAK7E,iBAAiB,CAACmI,MADvCtD,IAEAA,gBAAgB,KAAK7E,iBAAiB,CAACoI,SAHzC;IAKD;;;4BAGOC,I,EAAMC,Y,EAAc;MAC1B,IAAI,IAAA,CAAKrC,KAAL,CAAWzB,OAAf,EAAwB;QACtB,OAAO,IAAA,CAAKyB,KAAL,CAAWzB,OAAX,CAAmB6D,IAAnB,EAAyBC,YAAzB,CAAP;MACD;MACD,OAAO,KAAP;IACD;;;4BAEOD,I,EAAMC,Y,EAAc;MAC1B,IAAI,IAAA,CAAKrC,KAAL,CAAWxB,OAAf,EAAwB;QACtB,OAAO,IAAA,CAAKwB,KAAL,CAAWxB,OAAX,CAAmB4D,IAAnB,EAAyBC,YAAzB,CAAP;MACD;MACD,OAAO,KAAP;IACD;;;uCAKkB;MACjB,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAP;IACD;;;uCAIkBC,C,EAAgB;MAAA,IAAbC,MAAa,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;MACjCA,MAAM,CAAC,CAAD,CAANA,GAAaD,CAAC,GAAG,CAAL,GAAU,GAAtBC;MACAA,MAAM,CAAC,CAAD,CAANA,GAAcD,CAAC,GAAG,CAAL,IAAW,CAAZ,GAAiB,GAA7BC;MACAA,MAAM,CAAC,CAAD,CAANA,GAAeD,CAAC,GAAG,CAAL,IAAW,CAAZ,IAAkB,CAAnB,GAAwB,GAApCC;MACA,OAAOA,MAAP;IACD;;;uCAKkBC,K,EAAO;MACxB/H,MAAM,CAAC+H,KAAK,YAAYC,UAAlB,CAANhI;MADwB,IAAA,MAAA,GAAA,cAAA,CAEH+H,KAFG,EAAA,CAAA,CAAA;QAEjBE,EAFiB,GAAA,MAAA,CAAA,CAAA,CAAA;QAEbC,EAFa,GAAA,MAAA,CAAA,CAAA,CAAA;QAETC,EAFS,GAAA,MAAA,CAAA,CAAA,CAAA;MAIxB,IAAMC,KAAK,GAAGH,EAAE,GAAGC,EAAE,GAAG,GAAVD,GAAgBE,EAAE,GAAG,KAArBF,GAA6B,CAA3C;MACA,OAAOG,KAAP;IACD;;;sCAOiB;MAChB,MAAM,IAAIC,KAAJ,CAAA,QAAA,CAAA,MAAA,CAAmB,IAAnB,EAAA,kCAAA,CAAA,CAAN;IACD;;;+BAEUC,O,EAAS;MAAA,IAAA,yBAAA,GAAA,IAAA;MAAA,IAAA,iBAAA,GAAA,KAAA;MAAA,IAAA,cAAA,GAAA,SAAA;MAAA,IAAA;QAClB,KAAA,IAAA,SAAA,GAAwB,IAAA,CAAK/C,KAAL,CAAWX,UAAnC,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA,EAAA,yBAAA,GAAA,CAAA,KAAA,GAAA,SAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,yBAAA,GAAA,IAAA,EAA+C;UAAA,IAApC2D,SAAoC,GAAA,KAAA,CAAA,KAAA;UAC7CD,OAAO,GAAGpI,YAAY,CAACoI,OAAD,EAAUC,SAAS,CAACC,UAAVD,CAAqBE,IAArBF,CAA0B,IAA1BA,EAAgCA,SAAhCA,CAAV,CAAtBD;QACD;MAHiB,CAAA,CAAA,OAAA,GAAA,EAAA;QAAA,iBAAA,GAAA,IAAA;QAAA,cAAA,GAAA,GAAA;MAAA,CAAA,SAAA;QAAA,IAAA;UAAA,IAAA,CAAA,yBAAA,IAAA,SAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;YAAA,SAAA,CAAA,QAAA,CAAA,EAAA;UAAA;QAAA,CAAA,SAAA;UAAA,IAAA,iBAAA,EAAA;YAAA,MAAA,cAAA;UAAA;QAAA;MAAA;MAIlB,OAAOA,OAAP;IACD;;;6CAG0D;MAAA,IAAxCI,QAAwC,GAAA,KAAA,CAAxCA,QAAwC;QAA9BnD,KAA8B,GAAA,KAAA,CAA9BA,KAA8B;QAAvB9C,OAAuB,GAAA,KAAA,CAAvBA,OAAuB;QAAdkG,WAAc,GAAA,KAAA,CAAdA,WAAc;MACzD,OAAOA,WAAW,CAACC,kBAAnB;IACD;;;uCAKoD;MAAA,IAAxCF,QAAwC,GAAA,KAAA,CAAxCA,QAAwC;QAA9BnD,KAA8B,GAAA,KAAA,CAA9BA,KAA8B;QAAvB9C,OAAuB,GAAA,KAAA,CAAvBA,OAAuB;QAAdkG,WAAc,GAAA,KAAA,CAAdA,WAAc;MACnD,IAAM5B,gBAAgB,GAAG,IAAA,CAAK8B,mBAAL,EAAzB;MACA,IAAIF,WAAW,CAACG,WAAZH,IAA2B5B,gBAA/B,EAAiD;QAAA,IACxC+B,WADwC,GACzBH,WADyB,CACxCG,WADwC;QAE/C,IAAIC,KAAK,CAACC,OAAND,CAAcD,WAAdC,CAAJ,EAAgC;UAAA,IAAA,0BAAA,GAAA,IAAA;UAAA,IAAA,kBAAA,GAAA,KAAA;UAAA,IAAA,eAAA,GAAA,SAAA;UAAA,IAAA;YAE9B,KAAA,IAAA,UAAA,GAAwBD,WAAxB,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,EAAA,MAAA,EAAA,EAAA,0BAAA,GAAA,CAAA,MAAA,GAAA,UAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,0BAAA,GAAA,IAAA,EAAqC;cAAA,IAA1BG,SAA0B,GAAA,MAAA,CAAA,KAAA;cACnClC,gBAAgB,CAACmC,aAAjBnC,CAA+BkC,SAA/BlC,CAAAA;YACD;UAJ6B,CAAA,CAAA,OAAA,GAAA,EAAA;YAAA,kBAAA,GAAA,IAAA;YAAA,eAAA,GAAA,GAAA;UAAA,CAAA,SAAA;YAAA,IAAA;cAAA,IAAA,CAAA,0BAAA,IAAA,UAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;gBAAA,UAAA,CAAA,QAAA,CAAA,EAAA;cAAA;YAAA,CAAA,SAAA;cAAA,IAAA,kBAAA,EAAA;gBAAA,MAAA,eAAA;cAAA;YAAA;UAAA;QAK/B,CALD,MAKO;UACLA,gBAAgB,CAACmC,aAAjBnC,EAAAA;QACD;MACF;IACF;;;oCAIe;MAAA,IAAA,0BAAA,GAAA,IAAA;MAAA,IAAA,kBAAA,GAAA,KAAA;MAAA,IAAA,eAAA,GAAA,SAAA;MAAA,IAAA;QACd,KAAA,IAAA,UAAA,GAAoB,IAAA,CAAKoC,SAAL,EAApB,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,EAAA,MAAA,EAAA,EAAA,0BAAA,GAAA,CAAA,MAAA,GAAA,UAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,0BAAA,GAAA,IAAA,EAAsC;UAAA,IAA3BrC,KAA2B,GAAA,MAAA,CAAA,KAAA;UACpCA,KAAK,CAAA,QAAA,CAALA,EAAAA;QACD;MAHa,CAAA,CAAA,OAAA,GAAA,EAAA;QAAA,kBAAA,GAAA,IAAA;QAAA,eAAA,GAAA,GAAA;MAAA,CAAA,SAAA;QAAA,IAAA;UAAA,IAAA,CAAA,0BAAA,IAAA,UAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;YAAA,UAAA,CAAA,QAAA,CAAA,EAAA;UAAA;QAAA,CAAA,SAAA;UAAA,IAAA,kBAAA,EAAA;YAAA,MAAA,eAAA;UAAA;QAAA;MAAA;MAId,IAAMC,gBAAgB,GAAG,IAAA,CAAK8B,mBAAL,EAAzB;MACA,IAAI9B,gBAAJ,EAAsB;QACpBA,gBAAgB,CAACqC,QAAjBrC,EAAAA;MACD;MACD,IAAA,CAAKtE,OAAL,CAAaD,eAAb,CAA6B6G,WAA7B,CAAyC;QAAChG,UAAU,EAAE,IAAA,CAAKC;MAAlB,CAAzC,CAAA;MACA,IAAA,CAAKH,aAAL,CAAmBuD,kBAAnB,CAAsC4C,KAAtC,EAAA;IACD;;;yBAGIlD,I,EAAM;MAAA,IAAA,0BAAA,GAAA,IAAA;MAAA,IAAA,kBAAA,GAAA,KAAA;MAAA,IAAA,eAAA,GAAA,SAAA;MAAA,IAAA;QACT,KAAA,IAAA,UAAA,GAAoB,IAAA,CAAK+C,SAAL,EAApB,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,EAAA,MAAA,EAAA,EAAA,0BAAA,GAAA,CAAA,MAAA,GAAA,UAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,0BAAA,GAAA,IAAA,EAAsC;UAAA,IAA3BrC,KAA2B,GAAA,MAAA,CAAA,KAAA;UACpCA,KAAK,CAACyC,IAANzC,CAAWV,IAAXU,CAAAA;QACD;MAHQ,CAAA,CAAA,OAAA,GAAA,EAAA;QAAA,kBAAA,GAAA,IAAA;QAAA,eAAA,GAAA,GAAA;MAAA,CAAA,SAAA;QAAA,IAAA;UAAA,IAAA,CAAA,0BAAA,IAAA,UAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;YAAA,UAAA,CAAA,QAAA,CAAA,EAAA;UAAA;QAAA,CAAA,SAAA;UAAA,IAAA,kBAAA,EAAA;YAAA,MAAA,eAAA;UAAA;QAAA;MAAA;IAIV;;;0CAI4B;MAAA,IAAba,IAAa,GAAA,KAAA,CAAbA,IAAa;QAAP6B,IAAO,GAAA,KAAA,CAAPA,IAAO;MAAA,IACpBpB,KADoB,GACXT,IADW,CACpBS,KADoB;MAG3B,IAAIA,KAAK,IAAI,CAAb,EAAgB;QAEd,IAAIW,KAAK,CAACC,OAAND,CAAc,IAAA,CAAKxD,KAAL,CAAW9D,IAAzBsH,CAAJ,EAAoC;UAClCpB,IAAI,CAAC8B,MAAL9B,GAAc,IAAA,CAAKpC,KAAL,CAAW9D,IAAX,CAAgB2G,KAAhB,CAAdT;QACD;MACF;MAED,OAAOA,IAAP;IACD;;;qCAMgBvG,Q,EAAU;MACzB,IAAMD,WAAW,GAAG,IAAA,CAAKgC,aAAL,CAAmB/B,QAAvC;MACA,IAAA,CAAK+B,aAAL,CAAmB/B,QAAnB,GAA8BA,QAA9B;MAEA,IAAI,CAACD,WAAD,IAAgB,CAACD,iBAAiB,CAAC;QAACC,WAAW,EAAXA,WAAD;QAAcC,QAAQ,EAARA;MAAd,CAAD,CAAtC,EAAiE;QAC/D,IAAA,CAAKqE,cAAL,CAAoB;UAACiE,eAAe,EAAE;QAAlB,CAApB,CAAA;QACA,IAAA,CAAKC,OAAL,EAAA;MACD;IACF;;;0CAGkD;MAAA,IAA/BrE,IAA+B,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAxB,KAAwB;MAAA,IAAjBsE,UAAiB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;MACjD,IAAM7C,gBAAgB,GAAG,IAAA,CAAK8B,mBAAL,EAAzB;MACA,IAAI,CAAC9B,gBAAL,EAAuB;QACrB;MACD;MAED,IAAIzB,IAAI,KAAK,KAAb,EAAoB;QAClByB,gBAAgB,CAACmC,aAAjBnC,EAAAA;MACD,CAFD,MAEO;QACLA,gBAAgB,CAAC8C,UAAjB9C,CAA4BzB,IAA5ByB,CAAAA;MACD;IACF;;;qCAEgB+C,iB,EAAmB;MAAA,IAAA,0BAAA,GAAA,IAAA;MAAA,IAAA,kBAAA,GAAA,KAAA;MAAA,IAAA,eAAA,GAAA,SAAA;MAAA,IAAA;QAClC,KAAA,IAAA,UAAA,GAAoB,IAAA,CAAKX,SAAL,EAApB,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,EAAA,MAAA,EAAA,EAAA,0BAAA,GAAA,CAAA,MAAA,GAAA,UAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,0BAAA,GAAA,IAAA,EAAsC;UAAA,IAA3BrC,KAA2B,GAAA,MAAA,CAAA,KAAA;UACpC,IAAA,CAAKiD,mBAAL,CAAyBjD,KAAzB,EAAgCgD,iBAAhC,CAAA;QACD;MAHiC,CAAA,CAAA,OAAA,GAAA,EAAA;QAAA,kBAAA,GAAA,IAAA;QAAA,eAAA,GAAA,GAAA;MAAA,CAAA,SAAA;QAAA,IAAA;UAAA,IAAA,CAAA,0BAAA,IAAA,UAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;YAAA,UAAA,CAAA,QAAA,CAAA,EAAA;UAAA;QAAA,CAAA,SAAA;UAAA,IAAA,kBAAA,EAAA;YAAA,MAAA,eAAA;UAAA;QAAA;MAAA;IAInC;;;sCAGiBvE,K,EAAO;MACvB,IAAMwB,gBAAgB,GAAG,IAAA,CAAK8B,mBAAL,EAAzB;MACA,IAAI,CAAC9B,gBAAL,EAAuB;QACrB;MACD;MAGD,IAAMiD,YAAY,GAAG,IAAA,CAAKC,eAAL,CAAqB1E,KAArB,CAArB;MACA,IAAM2E,YAAY,GAAG,IAAA,CAAKC,eAAL,CAAqB5E,KAArB,CAArB;MAEAwB,gBAAgB,CAACqD,MAAjBrD,CAAwB;QACtBtF,IAAI,EAAE8D,KAAK,CAAC9D,IADU;QAEtBuI,YAAY,EAAZA,YAFsB;QAGtBE,YAAY,EAAZA,YAHsB;QAItB3E,KAAK,EAALA,KAJsB;QAKtB8E,WAAW,EAAE9E,KAAK,CAAC8E,WALG;QAMtBC,OAAO,EAAE/E,KAAK,CAAC9D,IAAN8D,CAAWgF,UANE;QAOtB9H,OAAO,EAAE,IAPa;QAStB+H,uBAAuB,EAAE;MATH,CAAxBzD,CAAAA;MAYA,IAAM+C,iBAAiB,GAAG,gBAAgB,CAACW,oBAAjB,CAAsC;QAACC,iBAAiB,EAAE;MAApB,CAAtC,CAA1B;MACA,IAAA,CAAKC,gBAAL,CAAsBb,iBAAtB,CAAA;IACD;;;iDAG4B;MAC3B,IAAM/C,gBAAgB,GAAG,IAAA,CAAK8B,mBAAL,EAAzB;MACA,IAAI9B,gBAAJ,EAAsB;QACpBA,gBAAgB,CAAC6D,gBAAjB7D,EAAAA;MACD;IACF;;;+CAG0B;MAAA,IAClBL,kBADkB,GACI,IAAA,CAAKvD,aADT,CAClBuD,kBADkB;MAEzB,IAAIA,kBAAkB,CAACC,MAAvB,EAA+B;QAE7B,IAAMkE,iBAAiB,GAAGnE,kBAAkB,CAAC0D,MAAnB1D,EAA1B;QACA,IAAMnB,KAAK,GAAGvE,MAAM,CAAC8J,MAAP9J,CAAc,IAAA,CAAKuE,KAAnBvE,CAAd;QACA,KAAK,IAAM+J,GAAX,IAAkBF,iBAAlB,EAAqC;UACnC7J,MAAM,CAACgK,cAAPhK,CAAsBuE,KAAtBvE,EAA6B+J,GAA7B/J,EAAkC;YAACW,KAAK,EAAEkJ,iBAAiB,CAACE,GAAD;UAAzB,CAAlC/J,CAAAA;QACD;QACD,OAAOuE,KAAP;MACD;MACD,OAAO,IAAA,CAAKA,KAAZ;IACD;;;mDAE8B0F,S,SAA2B;MAAA,IAAfjB,YAAe,GAAA,KAAA,CAAfA,YAAe;MAGxD,IAAMkB,SAAS,GAAG5J,iBAAiB,CAACgG,MAAlBhG,GAA2B,CAA7C;MAEA,IAAI4J,SAAS,GAAGlB,YAAhB,EAA8B;QAC5B1I,iBAAiB,GAAG,iBAAiB,CAAC6J,QAAlB,CAA2B7J,iBAA3B,EAA8C0I,YAA9C,EAA4D;UAC9EoB,IAAI,EAAE,CADwE;UAE9EC,IAAI,EAAE;QAFwE,CAA5D,CAApB/J;QAKA,IAAMgK,YAAY,GAAGhK,iBAAiB,CAACgG,MAAlBhG,GAA2B,CAAhD;QACA,IAAMiK,YAAY,GAAG,EAArB;QACAvL,MAAM,CAACsL,YAAY,GAAG,QAAhB,EAA0B,kCAA1B,CAANtL;QAEA,KAAK,IAAI6H,CAAC,GAAGqD,SAAb,EAAwBrD,CAAC,GAAGyD,YAA5B,EAA0CzD,CAAC,EAA3C,EAA+C;UAC7C,IAAA,CAAK2D,kBAAL,CAAwB3D,CAAxB,EAA2B0D,YAA3B,CAAA;UACAjK,iBAAiB,CAACuG,CAAC,GAAG,CAAJA,GAAQ,CAAT,CAAjBvG,GAA+BiK,YAAY,CAAC,CAAD,CAA3CjK;UACAA,iBAAiB,CAACuG,CAAC,GAAG,CAAJA,GAAQ,CAAT,CAAjBvG,GAA+BiK,YAAY,CAAC,CAAD,CAA3CjK;UACAA,iBAAiB,CAACuG,CAAC,GAAG,CAAJA,GAAQ,CAAT,CAAjBvG,GAA+BiK,YAAY,CAAC,CAAD,CAA3CjK;QACD;MACF;MAED2J,SAAS,CAACtJ,KAAVsJ,GAAkB3J,iBAAiB,CAACmK,QAAlBnK,CAA2B,CAA3BA,EAA8B0I,YAAY,GAAG,CAA7C1I,CAAlB2J;IACD;;;wCAEmBnE,K,EAAOgD,iB,EAAmB;MAC5C,IAAM/C,gBAAgB,GAAG,IAAA,CAAK8B,mBAAL,EAAzB;MACA,IAAM6C,iBAAiB,GAAG5E,KAAK,CAAC6E,QAAN7E,CAAe4E,iBAAf5E,IAAoC,CAAA,CAA9D;MACA,IAAM8E,gBAAgB,GAAG7E,gBAAgB,CAAC8E,mBAAjB9E,CACvB+C,iBADuB/C,EAEvB2E,iBAFuB3E,CAAzB;MAKAD,KAAK,CAACgF,aAANhF,CAAoB8E,gBAApB9E,CAAAA;IACD;;;sCAGiBiB,K,EAAO;MAAA,IAAA,qBAAA,GACwB,IAAA,CAAKc,mBAAL,EAAA,CAA2B0B,UADnD;QAChBwB,aADgB,GAAA,qBAAA,CAChBA,aADgB;QACDC,qBADC,GAAA,qBAAA,CACDA,qBADC;MAEvB,IAAMC,MAAM,GAAGF,aAAa,IAAIC,qBAAhC;MAEA,IAAMnE,CAAC,GAAG,IAAA,CAAKqE,kBAAL,CAAwBnE,KAAxB,CAAV;MACA,IAAMoE,KAAK,GAAGF,MAAM,CAACG,eAAPH,CAAuBpE,CAAvBoE,CAAd;MACA,IAAMI,GAAG,GAAGJ,MAAM,CAACG,eAAPH,CAAuBpE,CAAC,GAAG,CAA3BoE,CAAZ;MAGAA,MAAM,CAACK,MAAPL,CAAcM,OAAdN,CAAsB;QACpBxK,IAAI,EAAE,IAAIuG,UAAJ,CAAeqE,GAAG,GAAGF,KAArB,CADc;QAEpBK,MAAM,EAAEL;MAFY,CAAtBF,CAAAA;IAID;;;2CAEsB;MAAA,IAAA,sBAAA,GAC0B,IAAA,CAAKpD,mBAAL,EAAA,CAA2B0B,UADrD;QACdwB,aADc,GAAA,sBAAA,CACdA,aADc;QACCC,qBADD,GAAA,sBAAA,CACCA,qBADD;MAErB,IAAMC,MAAM,GAAGF,aAAa,IAAIC,qBAAhC;MACAC,MAAM,CAACQ,eAAPR,CAAuB;QAACS,WAAW,EAAE;MAAd,CAAvBT,CAAAA;IACD;;;oCAOe1G,K,EAAO;MACrBA,KAAK,GAAGA,KAAK,IAAI,IAAA,CAAKA,KAAtBA;MAGA,IAAIA,KAAK,CAACyE,YAANzE,KAAuBoH,SAA3B,EAAsC;QACpC,OAAOpH,KAAK,CAACyE,YAAb;MACD;MAGD,IAAI,IAAA,CAAKpE,KAAL,IAAc,IAAA,CAAKA,KAAL,CAAWoE,YAAX,KAA4B2C,SAA9C,EAAyD;QACvD,OAAO,IAAA,CAAK/G,KAAL,CAAWoE,YAAlB;MACD;MAGD,OAAOrK,KAAK,CAAC4F,KAAK,CAAC9D,IAAP,CAAZ;IACD;;;oCAMe8D,K,EAAO;MACrBA,KAAK,GAAGA,KAAK,IAAI,IAAA,CAAKA,KAAtBA;MAGA,IAAIA,KAAK,CAAC2E,YAAN3E,KAAuBoH,SAA3B,EAAsC;QACpC,OAAOpH,KAAK,CAAC2E,YAAb;MACD;MAGD,IAAI,IAAA,CAAKtE,KAAL,IAAc,IAAA,CAAKA,KAAL,CAAWsE,YAA7B,EAA2C;QACzC,OAAO,IAAA,CAAKtE,KAAL,CAAWsE,YAAlB;MACD;MAED,OAAO,IAAP;IACD;;;kCAOa;MACZrK,KAAK,CAACc,gBAAD,EAAmB,IAAnB,CAALd;MAEA,IAAA,CAAK+M,UAAL,EAAA;MAGA,IAAA,CAAKC,eAAL,CAAqB,IAAA,CAAKpK,OAA1B,CAAA;MANY,IAAA,0BAAA,GAAA,IAAA;MAAA,IAAA,kBAAA,GAAA,KAAA;MAAA,IAAA,eAAA,GAAA,SAAA;MAAA,IAAA;QAQZ,KAAA,IAAA,UAAA,GAAwB,IAAA,CAAK8C,KAAL,CAAWX,UAAnC,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,EAAA,MAAA,EAAA,EAAA,0BAAA,GAAA,CAAA,MAAA,GAAA,UAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,0BAAA,GAAA,IAAA,EAA+C;UAAA,IAApC2D,SAAoC,GAAA,MAAA,CAAA,KAAA;UAC7CA,SAAS,CAACsE,eAAVtE,CAA0BE,IAA1BF,CAA+B,IAA/BA,EAAqC,IAAA,CAAK9F,OAA1C8F,EAAmDA,SAAnDA,CAAAA;QACD;MAVW,CAAA,CAAA,OAAA,GAAA,EAAA;QAAA,kBAAA,GAAA,IAAA;QAAA,eAAA,GAAA,GAAA;MAAA,CAAA,SAAA;QAAA,IAAA;UAAA,IAAA,CAAA,0BAAA,IAAA,UAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;YAAA,UAAA,CAAA,QAAA,CAAA,EAAA;UAAA;QAAA,CAAA,SAAA;UAAA,IAAA,kBAAA,EAAA;YAAA,MAAA,eAAA;UAAA;QAAA;MAAA;MAcZ,IAAA,CAAK9C,cAAL,CAAoB;QAClBqD,WAAW,EAAE,IADK;QAElBgE,YAAY,EAAE,IAFI;QAGlBpD,eAAe,EAAE,IAHC;QAIlBqD,iBAAiB,EAAE;MAJD,CAApB,CAAA;MAOA,IAAA,CAAKC,YAAL,EAAA;IACD;;;8BAIS;MAER,IAAMC,gBAAgB,GAAG,IAAA,CAAK9G,WAAL,EAAzB;MAEAtG,KAAK,CAACe,YAAD,EAAe,IAAf,EAAqBqM,gBAArB,CAALpN;MAEA,IAAIoN,gBAAJ,EAAsB;QACpB,IAAA,CAAKD,YAAL,EAAA;MACD;IACF;;;mCAIc;MACb,IAAME,YAAY,GAAG,IAAA,CAAK3H,KAA1B;MACA,IAAM4H,eAAe,GAAG,IAAA,CAAK1K,OAAL,CAAarB,QAArC;MACA,IAAMyJ,iBAAiB,GAAG,IAAA,CAAKuC,wBAAL,EAA1B;MACA,IAAA,CAAKjK,aAAL,CAAmB0H,iBAAnB,GAAuCA,iBAAvC;MAIA,IAAA,CAAKpI,OAAL,CAAarB,QAAb,GAAwB,IAAA,CAAK+B,aAAL,CAAmB/B,QAAnB,IAA+B+L,eAAvD;MAEA,IAAA,CAAK5H,KAAL,GAAasF,iBAAb;MAEA,IAAMwC,YAAY,GAAG,IAAA,CAAK5G,gBAAL,EAArB;MAGA,IAAI,IAAA,CAAKhE,OAAL,CAAa6K,EAAjB,EAAqB;QACnB,IAAA,CAAKC,WAAL,CAAiBF,YAAjB,CAAA;MACD,CAFD,MAEO;QACL,IAAI;UACF,IAAA,CAAKE,WAAL,CAAiBF,YAAjB,CAAA;QACD,CAFD,CAEE,OAAOG,KAAP,EAAc,CAEf;MACF;MAvBY,IAAA,0BAAA,GAAA,IAAA;MAAA,IAAA,kBAAA,GAAA,KAAA;MAAA,IAAA,eAAA,GAAA,SAAA;MAAA,IAAA;QAyBb,KAAA,IAAA,UAAA,GAAwB,IAAA,CAAKjI,KAAL,CAAWX,UAAnC,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,EAAA,MAAA,EAAA,EAAA,0BAAA,GAAA,CAAA,MAAA,GAAA,UAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,0BAAA,GAAA,IAAA,EAA+C;UAAA,IAApC2D,SAAoC,GAAA,MAAA,CAAA,KAAA;UAC7CA,SAAS,CAACgF,WAAVhF,CAAsBE,IAAtBF,CAA2B,IAA3BA,EAAiC8E,YAAjC9E,EAA+CA,SAA/CA,CAAAA;QACD;MA3BY,CAAA,CAAA,OAAA,GAAA,EAAA;QAAA,kBAAA,GAAA,IAAA;QAAA,eAAA,GAAA,GAAA;MAAA,CAAA,SAAA;QAAA,IAAA;UAAA,IAAA,CAAA,0BAAA,IAAA,UAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;YAAA,UAAA,CAAA,QAAA,CAAA,EAAA;UAAA;QAAA,CAAA,SAAA;UAAA,IAAA,kBAAA,EAAA;YAAA,MAAA,eAAA;UAAA;QAAA;MAAA;MA4Bb,IAAA,CAAKkF,cAAL,CAAoBJ,YAApB,CAAA;MAGA,IAAI,IAAA,CAAKK,WAAT,EAAsB;QAEpB,IAAA,CAAKC,aAAL,CAAmBN,YAAnB,CAAA;MACD,CAHD,MAGO;QACL,IAAA,CAAKxH,cAAL,EAAA;QAEA,IAAA,CAAK+H,iBAAL,CAAuB,IAAA,CAAKrI,KAA5B,CAAA;QAGA,IAAI,IAAA,CAAKK,KAAL,CAAWkB,KAAf,EAAsB;UACpB,IAAA,CAAKlB,KAAL,CAAWkB,KAAX,CAAiB+G,gBAAjB,CAAkC,IAAA,CAAK5D,eAAL,EAAlC,CAAA;QACD;MACF;MAGD,IAAA,CAAKxH,OAAL,CAAarB,QAAb,GAAwB+L,eAAxB;MACA,IAAA,CAAK5H,KAAL,GAAa2H,YAAb;MACA,IAAA,CAAKY,gBAAL,EAAA;MACA,IAAA,CAAK3K,aAAL,CAAmBgD,WAAnB,GAAiC,KAAjC;MACA,IAAA,CAAKhD,aAAL,CAAmB4K,aAAnB,EAAA;IACD;;;gCAIW;MACVlO,KAAK,CAACgB,cAAD,EAAiB,IAAjB,CAALhB;MACAG,MAAM,CAAC,IAAA,CAAKmD,aAAL,IAAsB,IAAA,CAAKyC,KAA5B,CAAN5F;MAGA,IAAA,CAAKgO,aAAL,CAAmB,IAAA,CAAKvL,OAAxB,CAAA;MALU,IAAA,0BAAA,GAAA,IAAA;MAAA,IAAA,kBAAA,GAAA,KAAA;MAAA,IAAA,eAAA,GAAA,SAAA;MAAA,IAAA;QAOV,KAAA,IAAA,UAAA,GAAwB,IAAA,CAAK8C,KAAL,CAAWX,UAAnC,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,EAAA,MAAA,EAAA,EAAA,0BAAA,GAAA,CAAA,MAAA,GAAA,UAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,0BAAA,GAAA,IAAA,EAA+C;UAAA,IAApC2D,SAAoC,GAAA,MAAA,CAAA,KAAA;UAC7CA,SAAS,CAACyF,aAAVzF,CAAwBE,IAAxBF,CAA6B,IAA7BA,EAAmCA,SAAnCA,CAAAA;QACD;MATS,CAAA,CAAA,OAAA,GAAA,EAAA;QAAA,kBAAA,GAAA,IAAA;QAAA,eAAA,GAAA,GAAA;MAAA,CAAA,SAAA;QAAA,IAAA;UAAA,IAAA,CAAA,0BAAA,IAAA,UAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;YAAA,UAAA,CAAA,QAAA,CAAA,EAAA;UAAA;QAAA,CAAA,SAAA;UAAA,IAAA,kBAAA,EAAA;YAAA,MAAA,eAAA;UAAA;QAAA;MAAA;IAUX;;;qCAGoE;MAAA,IAAA,KAAA,GAAA,IAAA;MAAA,IAAA,qBAAA,GAAA,KAAA,CAA1D0F,gBAA0D;QAA1DA,gBAA0D,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAvC,IAAuC,GAAA,qBAAA;QAAA,cAAA,GAAA,KAAA,CAAjCtJ,QAAiC;QAAjCA,QAAiC,GAAA,cAAA,KAAA,KAAA,CAAA,GAAtB,CAAA,CAAsB,GAAA,cAAA;QAAA,gBAAA,GAAA,KAAA,CAAlBD,UAAkB;QAAlBA,UAAkB,GAAA,gBAAA,KAAA,KAAA,CAAA,GAAL,CAAA,CAAK,GAAA,gBAAA;MACnE,IAAA,CAAKwJ,0BAAL,EAAA;MAEA,IAAMhB,YAAY,GAAG,IAAA,CAAK3H,KAA1B;MAGA,IAAA,CAAKA,KAAL,GAAa,IAAA,CAAKpC,aAAL,CAAmB0H,iBAAnB,IAAwCqC,YAArD;MANmE,IAQ5DvJ,OAR4D,GAQjD,IAAA,CAAK4B,KAR4C,CAQ5D5B,OAR4D;MAUnEgB,QAAQ,CAAChB,OAATgB,GAAmBwJ,IAAI,CAACC,GAALD,CAASxK,OAATwK,EAAkB,CAAA,GAAI,GAAtBA,CAAnBxJ;MAGA,IAAIsJ,gBAAJ,EAAsB;QACpB,IAAA,CAAKI,mBAAL,CAAyBJ,gBAAzB,CAAA;MACD;MAfkE,IAmB5DpJ,gBAnB4D,GAmBxC,IAAA,CAAKU,KAnBmC,CAmB5DV,gBAnB4D;MAoBnE,IAAMyJ,OAAO,GAAIzJ,gBAAgB,IAAIA,gBAAgB,CAACF,QAAD,CAArC,IAAoD,CAAC,CAAD,EAAI,CAAJ,CAApE;MAEA5E,aAAa,CAAC,IAAA,CAAK0C,OAAL,CAAa6K,EAAd,EAAkB;QAACiB,aAAa,EAAED;MAAhB,CAAlB,CAAbvO;MAGAD,cAAc,CAAC,IAAA,CAAK2C,OAAL,CAAa6K,EAAd,EAAkB5I,UAAlB,EAA8B,YAAM;QAChD,IAAM0B,IAAI,GAAG;UAAC6H,gBAAgB,EAAhBA,gBAAD;UAAmBtJ,QAAQ,EAARA,QAAnB;UAA6BD,UAAU,EAAVA,UAA7B;UAAyCjC,OAAO,EAAE,KAAI,CAACA;QAAvD,CAAb;QADgD,IAAA,0BAAA,GAAA,IAAA;QAAA,IAAA,kBAAA,GAAA,KAAA;QAAA,IAAA,eAAA,GAAA,SAAA;QAAA,IAAA;UAIhD,KAAA,IAAA,UAAA,GAAwB,KAAI,CAAC8C,KAAL,CAAWX,UAAnC,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,EAAA,MAAA,EAAA,EAAA,0BAAA,GAAA,CAAA,MAAA,GAAA,UAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,0BAAA,GAAA,IAAA,EAA+C;YAAA,IAApC2D,SAAoC,GAAA,MAAA,CAAA,KAAA;YAC7CA,SAAS,CAACgB,IAAVhB,CAAeE,IAAfF,CAAoB,KAApBA,EAA0BnC,IAA1BmC,EAAgCA,SAAhCA,CAAAA;UACD;QAN+C,CAAA,CAAA,OAAA,GAAA,EAAA;UAAA,kBAAA,GAAA,IAAA;UAAA,eAAA,GAAA,GAAA;QAAA,CAAA,SAAA;UAAA,IAAA;YAAA,IAAA,CAAA,0BAAA,IAAA,UAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;cAAA,UAAA,CAAA,QAAA,CAAA,EAAA;YAAA;UAAA,CAAA,SAAA;YAAA,IAAA,kBAAA,EAAA;cAAA,MAAA,eAAA;YAAA;UAAA;QAAA;QAQhD,KAAI,CAACgB,IAAL,CAAUnD,IAAV,CAAA;MACD,CATa,CAAdtG;MAaA,IAAA,CAAKyF,KAAL,GAAa2H,YAAb;IACD;;;qCAGgB;MACf,OAAO,IAAA,CAAK/J,aAAL,CAAmBwF,WAA1B;IACD;;;mCAIc6F,K,EAAO;MAAA,IACb7F,WADa,GACE,IAAA,CAAKxF,aADP,CACbwF,WADa;MAGpB,KAAK,IAAMoC,GAAX,IAAkBpC,WAAlB,EAA+B;QAC7B,IAAI6F,KAAK,CAACzD,GAAD,CAALyD,IAAc,CAAC7F,WAAW,CAACoC,GAAD,CAA9B,EAAqC;UACnCpC,WAAW,CAACoC,GAAD,CAAXpC,GAAmB6F,KAAK,CAACzD,GAAD,CAAxBpC;UACA9I,KAAK,CAACa,iBAAD,EAAoB,IAApB,EAA0BqK,GAA1B,EAA+ByD,KAA/B,CAAL3O;QACD;MACF;MAGD,IAAM+I,kBAAkB,GACtBD,WAAW,CAACG,WAAZH,IACAA,WAAW,CAAC8F,qBADZ9F,IAEAA,WAAW,CAACmE,YAFZnE,IAGAA,WAAW,CAACoE,iBAJd;MAKApE,WAAW,CAACC,kBAAZD,GAAiCC,kBAAjCD;MACAA,WAAW,CAAC+F,gBAAZ/F,GACEC,kBAAkB,IAAI4F,KAAK,CAAC9E,eAA5Bd,IAA+C4F,KAAK,CAAC9I,YADvDiD;IAED;;;uCAIkB;MACjB,IAAA,CAAKxF,aAAL,CAAmBwF,WAAnB,GAAiC;QAE/BG,WAAW,EAAE,KAFkB;QAG/BgE,YAAY,EAAE,KAHiB;QAI/B2B,qBAAqB,EAAE,KAJQ;QAK/B/E,eAAe,EAAE,KALc;QAM/BhE,YAAY,EAAE,KANiB;QAO/BqH,iBAAiB,EAAE,KAPY;QAU/BnE,kBAAkB,EAAE,KAVW;QAW/B8F,gBAAgB,EAAE;MAXa,CAAjC;IAaD;;;8BAKSC,Q,EAAUjG,Q,EAAU;MAC5B,IAAMC,WAAW,GAAGlJ,UAAS,CAACkP,QAAD,EAAWjG,QAAX,CAA7B;MAGA,IAAIC,WAAW,CAAC8F,qBAAhB,EAAuC;QACrC,KAAK,IAAM1D,GAAX,IAAkBpC,WAAW,CAAC8F,qBAA9B,EAAqD;UACnD,IAAI9F,WAAW,CAAC8F,qBAAZ9F,CAAkCoC,GAAlCpC,CAAJ,EAA4C;YAC1C,IAAA,CAAKiG,mBAAL,CAAyB7D,GAAzB,CAAA;UACD;QACF;MACF;MAGD,IAAIpC,WAAW,CAACkG,kBAAhB,EAAoC;QAClC,KAAK,IAAM9D,IAAX,IAAkBpC,WAAW,CAACkG,kBAA9B,EAAkD;UAEhD,IAAA,CAAK1L,aAAL,CAAmBuD,kBAAnB,CAAsC5D,GAAtC,CACEiI,IADF,EAEErC,QAAQ,CAACqC,IAAD,CAFV,EAGE4D,QAAQ,CAAC5D,IAAD,CAHV,EAIE4D,QAAQ,CAACtE,WAATsE,CAAqB5D,IAArB4D,CAJF,CAAA;QAMD;MACF;MAED,OAAO,IAAA,CAAKlJ,cAAL,CAAoBkD,WAApB,CAAP;IACD;;;oCAGe;MACdjJ,cAAa,CAAC,IAAA,CAAK6F,KAAN,CAAb7F;IACD;;;wCAEmBuO,gB,EAAkB;MAAA,IAAA,2BAAA,GAAA,IAAA;MAAA,IAAA,mBAAA,GAAA,KAAA;MAAA,IAAA,gBAAA,GAAA,SAAA;MAAA,IAAA;QACpC,KAAA,IAAA,WAAA,GAAoB,IAAA,CAAK9E,SAAL,EAApB,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,EAAA,OAAA,EAAA,EAAA,2BAAA,GAAA,CAAA,OAAA,GAAA,WAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,2BAAA,GAAA,IAAA,EAAsC;UAAA,IAA3BrC,KAA2B,GAAA,OAAA,CAAA,KAAA;UACpCA,KAAK,CAACgI,oBAANhI,CAA2BmH,gBAA3BnH,CAAAA;QACD;MAHmC,CAAA,CAAA,OAAA,GAAA,EAAA;QAAA,mBAAA,GAAA,IAAA;QAAA,gBAAA,GAAA,GAAA;MAAA,CAAA,SAAA;QAAA,IAAA;UAAA,IAAA,CAAA,2BAAA,IAAA,WAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;YAAA,WAAA,CAAA,QAAA,CAAA,EAAA;UAAA;QAAA,CAAA,SAAA;UAAA,IAAA,mBAAA,EAAA;YAAA,MAAA,gBAAA;UAAA;QAAA;MAAA;IAIrC;;;0CAGiC;MAAA,IAAlBvB,KAAkB,GAAA,KAAA,CAAlBA,KAAkB;QAAXmD,QAAW,GAAA,KAAA,CAAXA,QAAW;MAAA,IAEzB1D,aAFyB,GAEgCO,KAFhC,CAEzBP,aAFyB;QAEVD,sBAFU,GAEgCQ,KAFhC,CAEVR,sBAFU;QAEcE,cAFd,GAEgCM,KAFhC,CAEcN,cAFd;MAGhC,IACEyD,QAAQ,CAAC1D,aAAT0D,KAA2B1D,aAA3B0D,IACAA,QAAQ,CAAC3D,sBAAT2D,KAAoC3D,sBADpC2D,IAEAA,QAAQ,CAACzD,cAATyD,KAA4BzD,cAH9B,EAIE;QACA,IAAMP,UAAU,GAAG,CAAA,CAAnB;QACA,IAAI,CAACM,aAAL,EAAoB;UAClBN,UAAU,CAACqK,oBAAXrK,GAAkC,IAAlCA;QACD;QACD,IAAIqE,KAAK,CAACC,OAAND,CAAc9D,cAAd8D,CAAJ,EAAmC;UACjCrE,UAAU,CAACsK,qBAAXtK,GAAmCO,cAAnCP;QACD;QAGD,IAAIuK,MAAM,CAACC,SAAPD,CAAiBlK,sBAAjBkK,CAAJ,EAA8C;UAC5CvK,UAAU,CAACqK,oBAAXrK,GACEK,sBAAsB,IAAI,CAA1BA,GAA8B,IAAA,CAAKyG,kBAAL,CAAwBzG,sBAAxB,CAA9BA,GAAgF,IADlFL;QAED;QAED,IAAA,CAAK2J,mBAAL,CAAyB3J,UAAzB,CAAA;MACD;IACF;;;uCAEkB;MACjB,OAAO;QACLa,KAAK,EAAE,IAAA,CAAKA,KADP;QAELmD,QAAQ,EAAE,IAAA,CAAKvF,aAAL,CAAmBgM,WAAnB,EAFL;QAGL1M,OAAO,EAAE,IAAA,CAAKA,OAHT;QAILkG,WAAW,EAAE,IAAA,CAAKxF,aAAL,CAAmBwF;MAJ3B,CAAP;IAMD;;;oCAGevC,I,EAAM;MAGpB,IAAI,CAAC,IAAA,CAAKjD,aAAV,EAAyB;QACvB,OAAO,KAAP;MACD;MAED,IAAI2C,MAAM,GAAG,KAAb;MACAA,MAAM,GAAGA,MAAM,IAAK,IAAA,CAAK3C,aAAL,CAAmB4C,WAAnB,IAAkC,IAAA,CAAKzC,EAA3DwC;MACA,IAAA,CAAK3C,aAAL,CAAmB4C,WAAnB,GAAiC,IAAA,CAAK5C,aAAL,CAAmB4C,WAAnB,IAAkC,CAACK,IAAI,CAACC,gBAAzE;MAGA,IAAMU,gBAAgB,GAAG,IAAA,CAAK8B,mBAAL,EAAzB;MACA,IAAMuG,2BAA2B,GAAGrI,gBAAgB,IAAIA,gBAAgB,CAACsI,cAAjBtI,CAAgCX,IAAhCW,CAAxD;MACAjB,MAAM,GAAGA,MAAM,IAAIsJ,2BAAnBtJ;MAEA,OAAOA,MAAP;IACD;;;2CAGsB;MACrB,OAAO,IAAIvG,gBAAJ,CAAqB,IAAA,CAAKkD,OAAL,CAAa6K,EAAlC,EAAsC;QAC3ChK,EAAE,EAAE,IAAA,CAAKiC,KAAL,CAAWjC,EAD4B;QAE3CgM,KAAK,EAAE,IAAA,CAAK7M,OAAL,CAAa6M,KAFuB;QAG3CC,QAAQ,EAAE,IAAA,CAAK9M,OAAL,CAAa8M;MAHoB,CAAtC,CAAP;IAKD;;;iCAEY;MACXvP,MAAM,CAAC,CAAC,IAAA,CAAKmD,aAAN,IAAuB,CAAC,IAAA,CAAKyC,KAA9B,CAAN5F;MACAA,MAAM,CAACwP,QAAQ,CAAC,IAAA,CAAKjK,KAAL,CAAWpB,gBAAZ,CAAT,EAAA,EAAA,CAAA,MAAA,CAA2C,IAAA,CAAKb,EAAhD,EAAA,4BAAA,CAAA,CAANtD;MAEA,IAAM+G,gBAAgB,GAAG,IAAA,CAAK0I,oBAAL,EAAzB;MAEA,IAAI1I,gBAAJ,EAAsB;QAIpBA,gBAAgB,CAAC2I,YAAjB3I,CAA8B;UAC5BiF,qBAAqB,EAAE;YACrBtK,IAAI,EAAA,IADiB;YAErB0J,IAAI,EAAE,CAFe;YAGrBuE,OAAO,EAAE,IAHY;YAIrBvF,MAAM,EAAE,IAAA,CAAKwF;UAJQ;QADK,CAA9B7I,CAAAA;MAQD;MAED,IAAA,CAAK5D,aAAL,GAAqB,IAAI5C,UAAJ,CAAe;QAClCwG,gBAAgB,EAAhBA,gBADkC;QAElCxE,KAAK,EAAE;MAF2B,CAAf,CAArB;MAIA,IAAA,CAAKuL,gBAAL,EAAA;MAEA,IAAA,CAAKlI,KAAL,GAAa,CAAA,CAAb;MAIA5E,MAAM,CAACgK,cAAPhK,CAAsB,IAAA,CAAK4E,KAA3B5E,EAAkC,kBAAlCA,EAAsD;QACpD6O,GAAG,EAAE,SAAA,GAAA,GAAM;UACTjQ,GAAG,CAACkQ,UAAJlQ,CAAe,8BAAfA,EAA+C,6BAA/CA,CAAAA;UACA,OAAOmH,gBAAP;QACD;MAJmD,CAAtD/F,CAAAA;MAQA,IAAA,CAAKmC,aAAL,CAAmBZ,KAAnB,GAA2B,IAA3B;MACA,IAAA,CAAKY,aAAL,CAAmBuD,kBAAnB,GAAwC,IAAIlH,wBAAJ,CAA6B,IAAA,CAAKiD,OAAL,CAAa8M,QAA1C,CAAxC;MACA,IAAA,CAAKpM,aAAL,CAAmB4M,kBAAnB,GAAwC,IAAA,CAAKC,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,CAAxC;MAGA,IAAA,CAAK9M,aAAL,CAAmB+M,aAAnB,CAAiC,IAAA,CAAK3K,KAAtC,CAAA;IACD;;;mCAGc4K,Q,EAAU;MACvBtQ,KAAK,CAACiB,aAAD,EAAgB,IAAhB,EAAsB,IAAA,KAASqP,QAA/B,CAALtQ;MADuB,IAGhB+F,KAHgB,GAGQuK,QAHR,CAGhBvK,KAHgB;QAGTzC,aAHS,GAGQgN,QAHR,CAGThN,aAHS;MAIvBnD,MAAM,CAAC4F,KAAK,IAAIzC,aAAV,CAANnD;MAEA,IAAI,IAAA,KAASmQ,QAAb,EAAuB;QACrB;MACD;MAGD,IAAA,CAAKhN,aAAL,GAAqBA,aAArB;MACA,IAAA,CAAKA,aAAL,CAAmBZ,KAAnB,GAA2B,IAA3B;MAGA,IAAA,CAAKqD,KAAL,GAAaA,KAAb;MAKA,IAAA,CAAKzC,aAAL,CAAmB+M,aAAnB,CAAiC,IAAA,CAAK3K,KAAtC,CAAA;MAEA,IAAA,CAAK9F,SAAL,CAAe,IAAA,CAAK8F,KAApB,EAA2B,IAAA,CAAKpC,aAAL,CAAmBgM,WAAnB,EAA3B,CAAA;IACD;;;0CAEqB;MACpB,IAAA,CAAK1P,SAAL,CAAe,IAAA,CAAK8F,KAApB,EAA2B,IAAA,CAAKpC,aAAL,CAAmBgM,WAAnB,EAA3B,CAAA;MACA,IAAA,CAAKlJ,cAAL,EAAA;IACD;;;wBArvBc;MACb,OAAO,IAAA,CAAK9C,aAAL,IAAsB,CAAC,IAAA,CAAKA,aAAL,CAAmByD,kBAAnB,EAA9B;IACD;;;wBAEmB;MAClB,OAAO,IAAA,CAAKrB,KAAL,CAAWhB,aAAlB;IACD;;;EAtDgCjE,S;SAAd4E,K;AAwyBrBA,KAAK,CAACG,SAANH,GAAkB,OAAlBA;AACAA,KAAK,CAAC1D,YAAN0D,GAAqB1D,YAArB0D","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable react/no-direct-mutation-state */\nimport {COORDINATE_SYSTEM} from './constants';\nimport AttributeManager from './attribute/attribute-manager';\nimport UniformTransitionManager from './uniform-transition-manager';\nimport {diffProps, validateProps} from '../lifecycle/props';\nimport {count} from '../utils/count';\nimport log from '../utils/log';\nimport debug from '../debug';\nimport GL from '@luma.gl/constants';\nimport {withParameters, setParameters} from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport memoize from '../utils/memoize';\nimport {mergeShaders} from '../utils/shader';\nimport {projectPosition, getWorldPosition} from '../shaderlib/project/project-functions';\nimport typedArrayManager from '../utils/typed-array-manager';\n\nimport Component from '../lifecycle/component';\nimport LayerState from './layer-state';\n\nimport {worldToPixels} from '@math.gl/web-mercator';\n\nimport {load} from '@loaders.gl/core';\n\nconst TRACE_CHANGE_FLAG = 'layer.changeFlag';\nconst TRACE_INITIALIZE = 'layer.initialize';\nconst TRACE_UPDATE = 'layer.update';\nconst TRACE_FINALIZE = 'layer.finalize';\nconst TRACE_MATCHED = 'layer.matched';\n\nconst EMPTY_ARRAY = Object.freeze([]);\n\n// Only compare the same two viewports once\nconst areViewportsEqual = memoize(({oldViewport, viewport}) => {\n  return oldViewport.equals(viewport);\n});\n\nlet pickingColorCache = new Uint8ClampedArray(0);\n\nconst defaultProps = {\n  // data: Special handling for null, see below\n  data: {type: 'data', value: EMPTY_ARRAY, async: true},\n  dataComparator: null,\n  _dataDiff: {type: 'function', value: data => data && data.__diff, compare: false, optional: true},\n  dataTransform: {type: 'function', value: null, compare: false, optional: true},\n  onDataLoad: {type: 'function', value: null, compare: false, optional: true},\n  fetch: {\n    type: 'function',\n    value: (url, {propName, layer}) => {\n      const {resourceManager} = layer.context;\n      const loadOptions = layer.getLoadOptions();\n      let inResourceManager = resourceManager.contains(url);\n\n      if (!inResourceManager && !loadOptions) {\n        // If there is no layer-specific load options, then attempt to cache this resource in the data manager\n        resourceManager.add({resourceId: url, data: url, persistent: false});\n        inResourceManager = true;\n      }\n      if (inResourceManager) {\n        return resourceManager.subscribe({\n          resourceId: url,\n          onChange: data => layer.internalState.reloadAsyncProp(propName, data),\n          consumerId: layer.id,\n          requestId: propName\n        });\n      }\n\n      return load(url, loadOptions);\n    },\n    compare: false\n  },\n  updateTriggers: {}, // Update triggers: a core change detection mechanism in deck.gl\n\n  visible: true,\n  pickable: false,\n  opacity: {type: 'number', min: 0, max: 1, value: 1},\n\n  onHover: {type: 'function', value: null, compare: false, optional: true},\n  onClick: {type: 'function', value: null, compare: false, optional: true},\n  onDragStart: {type: 'function', value: null, compare: false, optional: true},\n  onDrag: {type: 'function', value: null, compare: false, optional: true},\n  onDragEnd: {type: 'function', value: null, compare: false, optional: true},\n\n  coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n  coordinateOrigin: {type: 'array', value: [0, 0, 0], compare: true},\n  modelMatrix: {type: 'array', value: null, compare: true, optional: true},\n  wrapLongitude: false,\n  positionFormat: 'XYZ',\n  colorFormat: 'RGBA',\n\n  parameters: {},\n  uniforms: {},\n  extensions: [],\n\n  // Offset depth based on layer index to avoid z-fighting.\n  // Negative values pull layer towards the camera\n  // https://www.opengl.org/archives/resources/faq/technical/polygonoffset.htm\n  getPolygonOffset: {\n    type: 'function',\n    value: ({layerIndex}) => [0, -layerIndex * 100],\n    compare: false\n  },\n\n  // Selection/Highlighting\n  highlightedObjectIndex: null,\n  autoHighlight: false,\n  highlightColor: {type: 'accessor', value: [0, 0, 128, 128]}\n};\n\nexport default class Layer extends Component {\n  toString() {\n    const className = this.constructor.layerName || this.constructor.name;\n    return `${className}({id: '${this.props.id}'})`;\n  }\n\n  // Public API\n\n  // Updates selected state members and marks the object for redraw\n  setState(updateObject) {\n    this.setChangeFlags({stateChanged: true});\n    Object.assign(this.state, updateObject);\n    this.setNeedsRedraw();\n  }\n\n  // Sets the redraw flag for this layer, will trigger a redraw next animation frame\n  setNeedsRedraw(redraw = true) {\n    if (this.internalState) {\n      this.internalState.needsRedraw = redraw;\n    }\n  }\n\n  // This layer needs a deep update\n  setNeedsUpdate() {\n    this.context.layerManager.setNeedsUpdate(String(this));\n    this.internalState.needsUpdate = true;\n  }\n\n  // Checks state of attributes and model\n  getNeedsRedraw(opts = {clearRedrawFlags: false}) {\n    return this._getNeedsRedraw(opts);\n  }\n\n  // Checks if layer attributes needs updating\n  needsUpdate() {\n    // Call subclass lifecycle method\n    return (\n      this.internalState.needsUpdate ||\n      this.hasUniformTransition() ||\n      this.shouldUpdateState(this._getUpdateParams())\n    );\n    // End lifecycle method\n  }\n\n  hasUniformTransition() {\n    return this.internalState.uniformTransitions.active;\n  }\n\n  get isLoaded() {\n    return this.internalState && !this.internalState.isAsyncPropLoading();\n  }\n\n  get wrapLongitude() {\n    return this.props.wrapLongitude;\n  }\n\n  // Returns true if the layer is pickable and visible.\n  isPickable() {\n    return this.props.pickable && this.props.visible;\n  }\n\n  // Return an array of models used by this layer, can be overriden by layer subclass\n  getModels() {\n    return this.state && (this.state.models || (this.state.model ? [this.state.model] : []));\n  }\n\n  getAttributeManager() {\n    return this.internalState && this.internalState.attributeManager;\n  }\n\n  // Returns the most recent layer that matched to this state\n  // (When reacting to an async event, this layer may no longer be the latest)\n  getCurrentLayer() {\n    return this.internalState && this.internalState.layer;\n  }\n\n  // Returns the default parse options for async props\n  getLoadOptions() {\n    return this.props.loadOptions;\n  }\n\n  // PROJECTION METHODS\n\n  // Projects a point with current map state (lat, lon, zoom, pitch, bearing)\n  // From the current layer's coordinate system to screen\n  project(xyz) {\n    const {viewport} = this.context;\n    const worldPosition = getWorldPosition(xyz, {\n      viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem\n    });\n    const [x, y, z] = worldToPixels(worldPosition, viewport.pixelProjectionMatrix);\n    return xyz.length === 2 ? [x, y] : [x, y, z];\n  }\n\n  // Note: this does not reverse `project`.\n  // Always unprojects to the viewport's coordinate system\n  unproject(xy) {\n    const {viewport} = this.context;\n    return viewport.unproject(xy);\n  }\n\n  projectPosition(xyz) {\n    return projectPosition(xyz, {\n      viewport: this.context.viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem\n    });\n  }\n\n  use64bitPositions() {\n    const {coordinateSystem} = this.props;\n    return (\n      coordinateSystem === COORDINATE_SYSTEM.DEFAULT ||\n      coordinateSystem === COORDINATE_SYSTEM.LNGLAT ||\n      coordinateSystem === COORDINATE_SYSTEM.CARTESIAN\n    );\n  }\n\n  // Event handling\n  onHover(info, pickingEvent) {\n    if (this.props.onHover) {\n      return this.props.onHover(info, pickingEvent);\n    }\n    return false;\n  }\n\n  onClick(info, pickingEvent) {\n    if (this.props.onClick) {\n      return this.props.onClick(info, pickingEvent);\n    }\n    return false;\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  // @return {Array} - a black color\n  nullPickingColor() {\n    return [0, 0, 0];\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  encodePickingColor(i, target = []) {\n    target[0] = (i + 1) & 255;\n    target[1] = ((i + 1) >> 8) & 255;\n    target[2] = (((i + 1) >> 8) >> 8) & 255;\n    return target;\n  }\n\n  // Returns the index corresponding to a picking color that doesn't match any subfeature\n  // @param {Uint8Array} color - color array to be decoded\n  // @return {Array} - the decoded picking color\n  decodePickingColor(color) {\n    assert(color instanceof Uint8Array);\n    const [i1, i2, i3] = color;\n    // 1 was added to seperate from no selection\n    const index = i1 + i2 * 256 + i3 * 65536 - 1;\n    return index;\n  }\n\n  // //////////////////////////////////////////////////\n  // LIFECYCLE METHODS, overridden by the layer subclasses\n\n  // Called once to set up the initial state\n  // App can create WebGL resources\n  initializeState() {\n    throw new Error(`Layer ${this} has not defined initializeState`);\n  }\n\n  getShaders(shaders) {\n    for (const extension of this.props.extensions) {\n      shaders = mergeShaders(shaders, extension.getShaders.call(this, extension));\n    }\n    return shaders;\n  }\n\n  // Let's layer control if updateState should be called\n  shouldUpdateState({oldProps, props, context, changeFlags}) {\n    return changeFlags.propsOrDataChanged;\n  }\n\n  // Default implementation, all attributes will be invalidated and updated\n  // when data changes\n  /* eslint-disable-next-line complexity */\n  updateState({oldProps, props, context, changeFlags}) {\n    const attributeManager = this.getAttributeManager();\n    if (changeFlags.dataChanged && attributeManager) {\n      const {dataChanged} = changeFlags;\n      if (Array.isArray(dataChanged)) {\n        // is partial update\n        for (const dataRange of dataChanged) {\n          attributeManager.invalidateAll(dataRange);\n        }\n      } else {\n        attributeManager.invalidateAll();\n      }\n    }\n  }\n\n  // Called once when layer is no longer matched and state will be discarded\n  // App can destroy WebGL resources here\n  finalizeState() {\n    for (const model of this.getModels()) {\n      model.delete();\n    }\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.finalize();\n    }\n    this.context.resourceManager.unsubscribe({consumerId: this.id});\n    this.internalState.uniformTransitions.clear();\n  }\n\n  // If state has a model, draw it with supplied uniforms\n  draw(opts) {\n    for (const model of this.getModels()) {\n      model.draw(opts);\n    }\n  }\n\n  // called to populate the info object that is passed to the event handler\n  // @return null to cancel event\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n\n    if (index >= 0) {\n      // If props.data is an indexable array, get the object\n      if (Array.isArray(this.props.data)) {\n        info.object = this.props.data[index];\n      }\n    }\n\n    return info;\n  }\n\n  // END LIFECYCLE METHODS\n  // //////////////////////////////////////////////////\n\n  // INTERNAL METHODS\n  activateViewport(viewport) {\n    const oldViewport = this.internalState.viewport;\n    this.internalState.viewport = viewport;\n\n    if (!oldViewport || !areViewportsEqual({oldViewport, viewport})) {\n      this.setChangeFlags({viewportChanged: true});\n      this._update();\n    }\n  }\n\n  // Default implementation of attribute invalidation, can be redefined\n  invalidateAttribute(name = 'all', diffReason = '') {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    if (name === 'all') {\n      attributeManager.invalidateAll();\n    } else {\n      attributeManager.invalidate(name);\n    }\n  }\n\n  updateAttributes(changedAttributes) {\n    for (const model of this.getModels()) {\n      this._setModelAttributes(model, changedAttributes);\n    }\n  }\n\n  // Calls attribute manager to update any WebGL attributes\n  _updateAttributes(props) {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    // Figure out data length\n    const numInstances = this.getNumInstances(props);\n    const startIndices = this.getStartIndices(props);\n\n    attributeManager.update({\n      data: props.data,\n      numInstances,\n      startIndices,\n      props,\n      transitions: props.transitions,\n      buffers: props.data.attributes,\n      context: this,\n      // Don't worry about non-attribute props\n      ignoreUnknownAttributes: true\n    });\n\n    const changedAttributes = attributeManager.getChangedAttributes({clearChangedFlags: true});\n    this.updateAttributes(changedAttributes);\n  }\n\n  // Update attribute transitions. This is called in drawLayer, no model updates required.\n  _updateAttributeTransition() {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.updateTransition();\n    }\n  }\n\n  // Update uniform (prop) transitions. This is called in updateState, may result in model updates.\n  _updateUniformTransition() {\n    const {uniformTransitions} = this.internalState;\n    if (uniformTransitions.active) {\n      // clone props\n      const propsInTransition = uniformTransitions.update();\n      const props = Object.create(this.props);\n      for (const key in propsInTransition) {\n        Object.defineProperty(props, key, {value: propsInTransition[key]});\n      }\n      return props;\n    }\n    return this.props;\n  }\n\n  calculateInstancePickingColors(attribute, {numInstances}) {\n    // calculateInstancePickingColors always generates the same sequence.\n    // pickingColorCache saves the largest generated sequence for reuse\n    const cacheSize = pickingColorCache.length / 3;\n\n    if (cacheSize < numInstances) {\n      pickingColorCache = typedArrayManager.allocate(pickingColorCache, numInstances, {\n        size: 3,\n        copy: true\n      });\n      // If the attribute is larger than the cache, resize the cache and populate the missing chunk\n      const newCacheSize = pickingColorCache.length / 3;\n      const pickingColor = [];\n      assert(newCacheSize < 16777215, 'index out of picking color range');\n\n      for (let i = cacheSize; i < newCacheSize; i++) {\n        this.encodePickingColor(i, pickingColor);\n        pickingColorCache[i * 3 + 0] = pickingColor[0];\n        pickingColorCache[i * 3 + 1] = pickingColor[1];\n        pickingColorCache[i * 3 + 2] = pickingColor[2];\n      }\n    }\n\n    attribute.value = pickingColorCache.subarray(0, numInstances * 3);\n  }\n\n  _setModelAttributes(model, changedAttributes) {\n    const attributeManager = this.getAttributeManager();\n    const excludeAttributes = model.userData.excludeAttributes || {};\n    const shaderAttributes = attributeManager.getShaderAttributes(\n      changedAttributes,\n      excludeAttributes\n    );\n\n    model.setAttributes(shaderAttributes);\n  }\n\n  // Sets the specified instanced picking color to null picking color. Used for multi picking.\n  clearPickingColor(color) {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n\n    const i = this.decodePickingColor(color);\n    const start = colors.getVertexOffset(i);\n    const end = colors.getVertexOffset(i + 1);\n\n    // Fill the sub buffer with 0s\n    colors.buffer.subData({\n      data: new Uint8Array(end - start),\n      offset: start // 1 byte per element\n    });\n  }\n\n  restorePickingColors() {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n    colors.updateSubBuffer({startOffset: 0});\n  }\n\n  // Deduces numer of instances. Intention is to support:\n  // - Explicit setting of numInstances\n  // - Auto-deduction for ES6 containers that define a size member\n  // - Auto-deduction for Classic Arrays via the built-in length attribute\n  // - Auto-deduction via arrays\n  getNumInstances(props) {\n    props = props || this.props;\n\n    // First Check if app has provided an explicit value\n    if (props.numInstances !== undefined) {\n      return props.numInstances;\n    }\n\n    // Second check if the layer has set its own value\n    if (this.state && this.state.numInstances !== undefined) {\n      return this.state.numInstances;\n    }\n\n    // Use container library to get a count for any ES6 container or object\n    return count(props.data);\n  }\n\n  // Buffer layout describes how many attribute values are packed for each data object\n  // The default (null) is one value each object.\n  // Some data formats (e.g. paths, polygons) have various length. Their buffer layout\n  //  is in the form of [L0, L1, L2, ...]\n  getStartIndices(props) {\n    props = props || this.props;\n\n    // First Check if startIndices is provided as an explicit value\n    if (props.startIndices !== undefined) {\n      return props.startIndices;\n    }\n\n    // Second check if the layer has set its own value\n    if (this.state && this.state.startIndices) {\n      return this.state.startIndices;\n    }\n\n    return null;\n  }\n\n  // LAYER MANAGER API\n  // Should only be called by the deck.gl LayerManager class\n\n  // Called by layer manager when a new layer is found\n  /* eslint-disable max-statements */\n  _initialize() {\n    debug(TRACE_INITIALIZE, this);\n\n    this._initState();\n\n    // Call subclass lifecycle methods\n    this.initializeState(this.context);\n    // Initialize extensions\n    for (const extension of this.props.extensions) {\n      extension.initializeState.call(this, this.context, extension);\n    }\n    // End subclass lifecycle methods\n\n    // initializeState callback tends to clear state\n    this.setChangeFlags({\n      dataChanged: true,\n      propsChanged: true,\n      viewportChanged: true,\n      extensionsChanged: true\n    });\n\n    this._updateState();\n  }\n\n  // Called by layer manager\n  // if this layer is new (not matched with an existing layer) oldProps will be empty object\n  _update() {\n    // Call subclass lifecycle method\n    const stateNeedsUpdate = this.needsUpdate();\n    // End lifecycle method\n    debug(TRACE_UPDATE, this, stateNeedsUpdate);\n\n    if (stateNeedsUpdate) {\n      this._updateState();\n    }\n  }\n  /* eslint-enable max-statements */\n\n  // Common code for _initialize and _update\n  _updateState() {\n    const currentProps = this.props;\n    const currentViewport = this.context.viewport;\n    const propsInTransition = this._updateUniformTransition();\n    this.internalState.propsInTransition = propsInTransition;\n    // Overwrite this.context.viewport during update to use the last activated viewport on this layer\n    // In multi-view applications, a layer may only be drawn in one of the views\n    // Which would make the \"active\" viewport different from the shared context\n    this.context.viewport = this.internalState.viewport || currentViewport;\n    // Overwrite this.props during update to use in-transition prop values\n    this.props = propsInTransition;\n\n    const updateParams = this._getUpdateParams();\n\n    // Safely call subclass lifecycle methods\n    if (this.context.gl) {\n      this.updateState(updateParams);\n    } else {\n      try {\n        this.updateState(updateParams);\n      } catch (error) {\n        // ignore error if gl context is missing\n      }\n    }\n    // Execute extension updates\n    for (const extension of this.props.extensions) {\n      extension.updateState.call(this, updateParams, extension);\n    }\n    this._updateModules(updateParams);\n    // End subclass lifecycle methods\n\n    if (this.isComposite) {\n      // Render or update previously rendered sublayers\n      this._renderLayers(updateParams);\n    } else {\n      this.setNeedsRedraw();\n      // Add any subclass attributes\n      this._updateAttributes(this.props);\n\n      // Note: Automatic instance count update only works for single layers\n      if (this.state.model) {\n        this.state.model.setInstanceCount(this.getNumInstances());\n      }\n    }\n\n    // Restore shared context\n    this.context.viewport = currentViewport;\n    this.props = currentProps;\n    this.clearChangeFlags();\n    this.internalState.needsUpdate = false;\n    this.internalState.resetOldProps();\n  }\n\n  // Called by manager when layer is about to be disposed\n  // Note: not guaranteed to be called on application shutdown\n  _finalize() {\n    debug(TRACE_FINALIZE, this);\n    assert(this.internalState && this.state);\n\n    // Call subclass lifecycle method\n    this.finalizeState(this.context);\n    // Finalize extensions\n    for (const extension of this.props.extensions) {\n      extension.finalizeState.call(this, extension);\n    }\n  }\n\n  // Calculates uniforms\n  drawLayer({moduleParameters = null, uniforms = {}, parameters = {}}) {\n    this._updateAttributeTransition();\n\n    const currentProps = this.props;\n    // Overwrite this.props during redraw to use in-transition prop values\n    // `internalState.propsInTransition` could be missing if `updateState` failed\n    this.props = this.internalState.propsInTransition || currentProps;\n\n    const {opacity} = this.props;\n    // apply gamma to opacity to make it visually \"linear\"\n    uniforms.opacity = Math.pow(opacity, 1 / 2.2);\n\n    // TODO/ib - hack move to luma Model.draw\n    if (moduleParameters) {\n      this.setModuleParameters(moduleParameters);\n    }\n\n    // Apply polygon offset to avoid z-fighting\n    // TODO - move to draw-layers\n    const {getPolygonOffset} = this.props;\n    const offsets = (getPolygonOffset && getPolygonOffset(uniforms)) || [0, 0];\n\n    setParameters(this.context.gl, {polygonOffset: offsets});\n\n    // Call subclass lifecycle method\n    withParameters(this.context.gl, parameters, () => {\n      const opts = {moduleParameters, uniforms, parameters, context: this.context};\n\n      // extensions\n      for (const extension of this.props.extensions) {\n        extension.draw.call(this, opts, extension);\n      }\n\n      this.draw(opts);\n    });\n\n    // End lifecycle method\n\n    this.props = currentProps;\n  }\n\n  // Helper methods\n  getChangeFlags() {\n    return this.internalState.changeFlags;\n  }\n\n  // Dirty some change flags, will be handled by updateLayer\n  /* eslint-disable complexity */\n  setChangeFlags(flags) {\n    const {changeFlags} = this.internalState;\n\n    for (const key in changeFlags) {\n      if (flags[key] && !changeFlags[key]) {\n        changeFlags[key] = flags[key];\n        debug(TRACE_CHANGE_FLAG, this, key, flags);\n      }\n    }\n\n    // Update composite flags\n    const propsOrDataChanged =\n      changeFlags.dataChanged ||\n      changeFlags.updateTriggersChanged ||\n      changeFlags.propsChanged ||\n      changeFlags.extensionsChanged;\n    changeFlags.propsOrDataChanged = propsOrDataChanged;\n    changeFlags.somethingChanged =\n      propsOrDataChanged || flags.viewportChanged || flags.stateChanged;\n  }\n  /* eslint-enable complexity */\n\n  // Clear all changeFlags, typically after an update\n  clearChangeFlags() {\n    this.internalState.changeFlags = {\n      // Primary changeFlags, can be strings stating reason for change\n      dataChanged: false,\n      propsChanged: false,\n      updateTriggersChanged: false,\n      viewportChanged: false,\n      stateChanged: false,\n      extensionsChanged: false,\n\n      // Derived changeFlags\n      propsOrDataChanged: false,\n      somethingChanged: false\n    };\n  }\n\n  // Compares the layers props with old props from a matched older layer\n  // and extracts change flags that describe what has change so that state\n  // can be update correctly with minimal effort\n  diffProps(newProps, oldProps) {\n    const changeFlags = diffProps(newProps, oldProps);\n\n    // iterate over changedTriggers\n    if (changeFlags.updateTriggersChanged) {\n      for (const key in changeFlags.updateTriggersChanged) {\n        if (changeFlags.updateTriggersChanged[key]) {\n          this.invalidateAttribute(key);\n        }\n      }\n    }\n\n    // trigger uniform transitions\n    if (changeFlags.transitionsChanged) {\n      for (const key in changeFlags.transitionsChanged) {\n        // prop changed and transition is enabled\n        this.internalState.uniformTransitions.add(\n          key,\n          oldProps[key],\n          newProps[key],\n          newProps.transitions[key]\n        );\n      }\n    }\n\n    return this.setChangeFlags(changeFlags);\n  }\n\n  // Called by layer manager to validate props (in development)\n  validateProps() {\n    validateProps(this.props);\n  }\n\n  setModuleParameters(moduleParameters) {\n    for (const model of this.getModels()) {\n      model.updateModuleSettings(moduleParameters);\n    }\n  }\n\n  // PRIVATE METHODS\n  _updateModules({props, oldProps}) {\n    // Picking module parameters\n    const {autoHighlight, highlightedObjectIndex, highlightColor} = props;\n    if (\n      oldProps.autoHighlight !== autoHighlight ||\n      oldProps.highlightedObjectIndex !== highlightedObjectIndex ||\n      oldProps.highlightColor !== highlightColor\n    ) {\n      const parameters = {};\n      if (!autoHighlight) {\n        parameters.pickingSelectedColor = null;\n      }\n      if (Array.isArray(highlightColor)) {\n        parameters.pickingHighlightColor = highlightColor;\n      }\n\n      // highlightedObjectIndex will overwrite any settings from auto highlighting.\n      if (Number.isInteger(highlightedObjectIndex)) {\n        parameters.pickingSelectedColor =\n          highlightedObjectIndex >= 0 ? this.encodePickingColor(highlightedObjectIndex) : null;\n      }\n\n      this.setModuleParameters(parameters);\n    }\n  }\n\n  _getUpdateParams() {\n    return {\n      props: this.props,\n      oldProps: this.internalState.getOldProps(),\n      context: this.context,\n      changeFlags: this.internalState.changeFlags\n    };\n  }\n\n  // Checks state of attributes and model\n  _getNeedsRedraw(opts) {\n    // this method may be called by the render loop as soon a the layer\n    // has been created, so guard against uninitialized state\n    if (!this.internalState) {\n      return false;\n    }\n\n    let redraw = false;\n    redraw = redraw || (this.internalState.needsRedraw && this.id);\n    this.internalState.needsRedraw = this.internalState.needsRedraw && !opts.clearRedrawFlags;\n\n    // TODO - is attribute manager needed? - Model should be enough.\n    const attributeManager = this.getAttributeManager();\n    const attributeManagerNeedsRedraw = attributeManager && attributeManager.getNeedsRedraw(opts);\n    redraw = redraw || attributeManagerNeedsRedraw;\n\n    return redraw;\n  }\n\n  // Create new attribute manager\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats,\n      timeline: this.context.timeline\n    });\n  }\n\n  _initState() {\n    assert(!this.internalState && !this.state);\n    assert(isFinite(this.props.coordinateSystem), `${this.id}: invalid coordinateSystem`);\n\n    const attributeManager = this._getAttributeManager();\n\n    if (attributeManager) {\n      // All instanced layers get instancePickingColors attribute by default\n      // Their shaders can use it to render a picking scene\n      // TODO - this slightly slows down non instanced layers\n      attributeManager.addInstanced({\n        instancePickingColors: {\n          type: GL.UNSIGNED_BYTE,\n          size: 3,\n          noAlloc: true,\n          update: this.calculateInstancePickingColors\n        }\n      });\n    }\n\n    this.internalState = new LayerState({\n      attributeManager,\n      layer: this\n    });\n    this.clearChangeFlags(); // populate this.internalState.changeFlags\n\n    this.state = {};\n    // for backwards compatibility with older layers\n    // TODO - remove in next release\n    /* eslint-disable accessor-pairs */\n    Object.defineProperty(this.state, 'attributeManager', {\n      get: () => {\n        log.deprecated('layer.state.attributeManager', 'layer.getAttributeManager()');\n        return attributeManager;\n      }\n    });\n    /* eslint-enable accessor-pairs */\n\n    this.internalState.layer = this;\n    this.internalState.uniformTransitions = new UniformTransitionManager(this.context.timeline);\n    this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n  }\n\n  // Called by layer manager to transfer state from an old layer\n  _transferState(oldLayer) {\n    debug(TRACE_MATCHED, this, this === oldLayer);\n\n    const {state, internalState} = oldLayer;\n    assert(state && internalState);\n\n    if (this === oldLayer) {\n      return;\n    }\n\n    // Move internalState\n    this.internalState = internalState;\n    this.internalState.layer = this;\n\n    // Move state\n    this.state = state;\n    // We keep the state ref on old layers to support async actions\n    // oldLayer.state = null;\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n\n    this.diffProps(this.props, this.internalState.getOldProps());\n  }\n\n  _onAsyncPropUpdated() {\n    this.diffProps(this.props, this.internalState.getOldProps());\n    this.setNeedsUpdate();\n  }\n}\n\nLayer.layerName = 'Layer';\nLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}