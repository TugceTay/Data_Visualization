{"ast":null,"code":"import Model from '../lib/model';\nimport Geometry from '../geometry/geometry';\nconst CLIPSPACE_VERTEX_SHADER = \"attribute vec2 aClipSpacePosition;\\nattribute vec2 aTexCoord;\\nattribute vec2 aCoordinate;\\n\\nvarying vec2 position;\\nvarying vec2 coordinate;\\nvarying vec2 uv;\\n\\nvoid main(void) {\\n  gl_Position = vec4(aClipSpacePosition, 0., 1.);\\n  position = aClipSpacePosition;\\n  coordinate = aCoordinate;\\n  uv = aTexCoord;\\n}\\n\";\nconst POSITIONS = [-1, -1, 1, -1, -1, 1, 1, 1];\nexport default class ClipSpace extends Model {\n  constructor(gl, opts) {\n    const TEX_COORDS = POSITIONS.map(coord => coord === -1 ? 0 : coord);\n    super(gl, Object.assign({}, opts, {\n      vs: CLIPSPACE_VERTEX_SHADER,\n      geometry: new Geometry({\n        drawMode: 5,\n        vertexCount: 4,\n        attributes: {\n          aClipSpacePosition: {\n            size: 2,\n            value: new Float32Array(POSITIONS)\n          },\n          aTexCoord: {\n            size: 2,\n            value: new Float32Array(TEX_COORDS)\n          },\n          aCoordinate: {\n            size: 2,\n            value: new Float32Array(TEX_COORDS)\n          }\n        }\n      })\n    }));\n    this.setVertexCount(4);\n  }\n}","map":{"version":3,"sources":["../../../src/utils/clip-space.js"],"names":["Model","Geometry","CLIPSPACE_VERTEX_SHADER","POSITIONS","ClipSpace","constructor","gl","opts","TEX_COORDS","map","coord","assign","vs","geometry","drawMode","vertexCount","attributes","aClipSpacePosition","size","value","Float32Array","aTexCoord","aCoordinate","setVertexCount"],"mappings":"AAEA,OAAOA,KAAP,MAAkB,cAAlB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AAEA,MAAMC,uBAAuB,GAAA,iUAA7B;AAkBA,MAAMC,SAAS,GAAG,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAT,EAAY,CAAC,CAAb,EAAgB,CAAC,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,CAAlB;AAEA,eAAe,MAAMC,SAAN,SAAwBJ,KAAxB,CAA8B;EAC3CK,WAAW,CAACC,EAAD,EAAKC,IAAL,EAAW;IACpB,MAAMC,UAAU,GAAGL,SAAS,CAACM,GAAVN,CAAcO,KAAK,IAAKA,KAAK,KAAK,CAAC,CAAXA,GAAe,CAAfA,GAAmBA,KAA3CP,CAAnB;IAEA,KAAA,CACEG,EADF,EAEE,MAAM,CAACK,MAAP,CAAc,CAAA,CAAd,EAAkBJ,IAAlB,EAAwB;MACtBK,EAAE,EAAEV,uBADkB;MAEtBW,QAAQ,EAAE,IAAIZ,QAAJ,CAAa;QACrBa,QAAQ,EAAA,CADa;QAErBC,WAAW,EAAE,CAFQ;QAGrBC,UAAU,EAAE;UACVC,kBAAkB,EAAE;YAACC,IAAI,EAAE,CAAP;YAAUC,KAAK,EAAE,IAAIC,YAAJ,CAAiBjB,SAAjB;UAAjB,CADV;UAEVkB,SAAS,EAAE;YAACH,IAAI,EAAE,CAAP;YAAUC,KAAK,EAAE,IAAIC,YAAJ,CAAiBZ,UAAjB;UAAjB,CAFD;UAGVc,WAAW,EAAE;YAACJ,IAAI,EAAE,CAAP;YAAUC,KAAK,EAAE,IAAIC,YAAJ,CAAiBZ,UAAjB;UAAjB;QAHH;MAHS,CAAb;IAFY,CAAxB,CAFF,CAAA;IAeA,IAAA,CAAKe,cAAL,CAAoB,CAApB,CAAA;EACD;AApB0C","sourcesContent":["// ClipSpace\nimport GL from '@luma.gl/constants';\nimport Model from '../lib/model';\nimport Geometry from '../geometry/geometry';\n\nconst CLIPSPACE_VERTEX_SHADER = `\\\nattribute vec2 aClipSpacePosition;\nattribute vec2 aTexCoord;\nattribute vec2 aCoordinate;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main(void) {\n  gl_Position = vec4(aClipSpacePosition, 0., 1.);\n  position = aClipSpacePosition;\n  coordinate = aCoordinate;\n  uv = aTexCoord;\n}\n`;\n\n/* eslint-disable indent, no-multi-spaces */\nconst POSITIONS = [-1, -1, 1, -1, -1, 1, 1, 1];\n\nexport default class ClipSpace extends Model {\n  constructor(gl, opts) {\n    const TEX_COORDS = POSITIONS.map(coord => (coord === -1 ? 0 : coord));\n\n    super(\n      gl,\n      Object.assign({}, opts, {\n        vs: CLIPSPACE_VERTEX_SHADER,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_STRIP,\n          vertexCount: 4,\n          attributes: {\n            aClipSpacePosition: {size: 2, value: new Float32Array(POSITIONS)},\n            aTexCoord: {size: 2, value: new Float32Array(TEX_COORDS)},\n            aCoordinate: {size: 2, value: new Float32Array(TEX_COORDS)}\n          }\n        })\n      })\n    );\n    this.setVertexCount(4);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}