{"ast":null,"code":"import assert from '../env-utils/assert';\nvar workerURLCache = new Map();\nexport function getWorkerURL(workerSource) {\n  var workerName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Worker';\n  assert(typeof workerSource === 'string', 'worker source');\n  if (workerSource.startsWith('url(') && workerSource.endsWith(')')) {\n    var workerUrl = workerSource.match(/^url\\((.*)\\)$/)[1];\n    if (workerUrl && !workerUrl.startsWith('http')) {\n      return workerUrl;\n    }\n    workerSource = buildScript(workerUrl);\n  }\n  var workerURL = workerURLCache.get(workerSource);\n  if (!workerURL) {\n    var blob = new Blob([workerSource], {\n      type: 'application/javascript'\n    });\n    workerURL = URL.createObjectURL(blob);\n    workerURLCache.set(workerSource, workerURL);\n  }\n  return workerURL;\n}\nfunction buildScript(workerUrl) {\n  return \"try {\\n  importScripts('\".concat(workerUrl, \"');\\n} catch (error) {\\n  console.error(error);\\n}\");\n}","map":{"version":3,"sources":["../../../../src/lib/worker-utils/get-worker-url.js"],"names":["assert","workerURLCache","Map","getWorkerURL","workerSource","workerName","startsWith","endsWith","workerUrl","match","buildScript","workerURL","get","blob","Blob","type","URL","createObjectURL","set"],"mappings":"AACA,OAAOA,MAAP,MAAmB,qBAAnB;AAEA,IAAMC,cAAc,GAAG,IAAIC,GAAJ,EAAvB;AAIA,OAAO,SAASC,YAAT,CAAsBC,YAAtB,EAA2D;EAAA,IAAvBC,UAAuB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAV,QAAU;EAChEL,MAAM,CAAC,OAAOI,YAAP,KAAwB,QAAzB,EAAmC,eAAnC,CAANJ;EAKA,IAAII,YAAY,CAACE,UAAbF,CAAwB,MAAxBA,CAAAA,IAAmCA,YAAY,CAACG,QAAbH,CAAsB,GAAtBA,CAAvC,EAAmE;IACjE,IAAMI,SAAS,GAAGJ,YAAY,CAACK,KAAbL,CAAmB,eAAnBA,CAAAA,CAAoC,CAApCA,CAAlB;IAGA,IAAII,SAAS,IAAI,CAACA,SAAS,CAACF,UAAVE,CAAqB,MAArBA,CAAlB,EAAgD;MAC9C,OAAOA,SAAP;IACD;IAKDJ,YAAY,GAAGM,WAAW,CAACF,SAAD,CAA1BJ;EACD;EAED,IAAIO,SAAS,GAAGV,cAAc,CAACW,GAAfX,CAAmBG,YAAnBH,CAAhB;EAEA,IAAI,CAACU,SAAL,EAAgB;IAGd,IAAME,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACV,YAAD,CAAT,EAAyB;MAACW,IAAI,EAAE;IAAP,CAAzB,CAAb;IACAJ,SAAS,GAAGK,GAAG,CAACC,eAAJD,CAAoBH,IAApBG,CAAZL;IACAV,cAAc,CAACiB,GAAfjB,CAAmBG,YAAnBH,EAAiCU,SAAjCV,CAAAA;EACD;EAED,OAAOU,SAAP;AACD;AAGD,SAASD,WAAT,CAAqBF,SAArB,EAAgC;EAC9B,OAAA,0BAAA,CAAA,MAAA,CAEiBA,SAFjB,EAAA,oDAAA,CAAA;AAMD","sourcesContent":["/* global URL, Blob */\nimport assert from '../env-utils/assert';\n\nconst workerURLCache = new Map();\n\n// Creates a URL from worker source that can be used to create `Worker` instances\n// Packages (and then caches) the result of `webworkify` as an \"Object URL\"\nexport function getWorkerURL(workerSource, workerName = 'Worker') {\n  assert(typeof workerSource === 'string', 'worker source');\n\n  // CASE: url(./worker.js)\n  // This pattern is used to differentiate worker urls from worker source code\n  // Load from url is needed for testing, when using Webpack & webworker target\n  if (workerSource.startsWith('url(') && workerSource.endsWith(')')) {\n    const workerUrl = workerSource.match(/^url\\((.*)\\)$/)[1];\n\n    // A local script url, we can use it to initialize a Worker directly\n    if (workerUrl && !workerUrl.startsWith('http')) {\n      return workerUrl;\n    }\n\n    // Per spec, worker cannot be initialized with a script from a different origin\n    // However a local worker script can still import scripts from other origins,\n    // so we simply build a wrapper script\n    workerSource = buildScript(workerUrl);\n  }\n\n  let workerURL = workerURLCache.get(workerSource);\n\n  if (!workerURL) {\n    // NOTE: webworkify was previously used\n    // const blob = webworkify(workerSource, {bare: true});\n    const blob = new Blob([workerSource], {type: 'application/javascript'});\n    workerURL = URL.createObjectURL(blob);\n    workerURLCache.set(workerSource, workerURL);\n  }\n\n  return workerURL;\n}\n\n// Only use trusted sources!\nfunction buildScript(workerUrl) {\n  return `\\\ntry {\n  importScripts('${workerUrl}');\n} catch (error) {\n  console.error(error);\n}`;\n}\n"]},"metadata":{},"sourceType":"module"}