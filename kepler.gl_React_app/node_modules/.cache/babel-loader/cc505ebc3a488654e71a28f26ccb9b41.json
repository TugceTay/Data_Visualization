{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport { mod } from '../utils/math-utils';\nimport { Vector3, _SphericalCoordinates as SphericalCoordinates, clamp } from 'math.gl';\nvar MOVEMENT_SPEED = 20;\nvar DEFAULT_STATE = {\n  position: [0, 0, 0],\n  pitch: 0,\n  bearing: 0,\n  maxPitch: 90,\n  minPitch: -90\n};\nvar FirstPersonState = function (_ViewState) {\n  _inherits(FirstPersonState, _ViewState);\n  function FirstPersonState(_ref) {\n    var _this;\n    var width = _ref.width,\n      height = _ref.height,\n      _ref$position = _ref.position,\n      position = _ref$position === void 0 ? DEFAULT_STATE.position : _ref$position,\n      _ref$bearing = _ref.bearing,\n      bearing = _ref$bearing === void 0 ? DEFAULT_STATE.bearing : _ref$bearing,\n      _ref$pitch = _ref.pitch,\n      pitch = _ref$pitch === void 0 ? DEFAULT_STATE.pitch : _ref$pitch,\n      longitude = _ref.longitude,\n      latitude = _ref.latitude,\n      _ref$maxPitch = _ref.maxPitch,\n      maxPitch = _ref$maxPitch === void 0 ? DEFAULT_STATE.maxPitch : _ref$maxPitch,\n      _ref$minPitch = _ref.minPitch,\n      minPitch = _ref$minPitch === void 0 ? DEFAULT_STATE.minPitch : _ref$minPitch,\n      startBearing = _ref.startBearing,\n      startPitch = _ref.startPitch,\n      startZoomPosition = _ref.startZoomPosition,\n      startZoom = _ref.startZoom;\n    _classCallCheck(this, FirstPersonState);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FirstPersonState).call(this, {\n      width: width,\n      height: height,\n      position: position,\n      bearing: bearing,\n      pitch: pitch,\n      longitude: longitude,\n      latitude: latitude,\n      maxPitch: maxPitch,\n      minPitch: minPitch\n    }));\n    _this._interactiveState = {\n      startBearing: startBearing,\n      startPitch: startPitch,\n      startZoomPosition: startZoomPosition,\n      startZoom: startZoom\n    };\n    return _this;\n  }\n  _createClass(FirstPersonState, [{\n    key: \"getInteractiveState\",\n    value: function getInteractiveState() {\n      return this._interactiveState;\n    }\n  }, {\n    key: \"getDirection\",\n    value: function getDirection() {\n      var use2D = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var spherical = new SphericalCoordinates({\n        bearing: this._viewportProps.bearing,\n        pitch: use2D ? 90 : 90 + this._viewportProps.pitch\n      });\n      var direction = spherical.toVector3().normalize();\n      return direction;\n    }\n  }, {\n    key: \"panStart\",\n    value: function panStart() {\n      return this;\n    }\n  }, {\n    key: \"pan\",\n    value: function pan() {\n      return this;\n    }\n  }, {\n    key: \"panEnd\",\n    value: function panEnd() {\n      return this;\n    }\n  }, {\n    key: \"rotateStart\",\n    value: function rotateStart(_ref2) {\n      var pos = _ref2.pos;\n      return this._getUpdatedState({\n        startBearing: this._viewportProps.bearing,\n        startPitch: this._viewportProps.pitch\n      });\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(_ref3) {\n      var deltaScaleX = _ref3.deltaScaleX,\n        deltaScaleY = _ref3.deltaScaleY;\n      var _this$_interactiveSta = this._interactiveState,\n        startBearing = _this$_interactiveSta.startBearing,\n        startPitch = _this$_interactiveSta.startPitch;\n      if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n        return this;\n      }\n      return this._getUpdatedState({\n        bearing: startBearing - deltaScaleX * 180,\n        pitch: startPitch - deltaScaleY * 90\n      });\n    }\n  }, {\n    key: \"rotateEnd\",\n    value: function rotateEnd() {\n      return this._getUpdatedState({\n        startBearing: null,\n        startPitch: null\n      });\n    }\n  }, {\n    key: \"zoomStart\",\n    value: function zoomStart() {\n      return this._getUpdatedState({\n        startZoomPosition: this._viewportProps.position,\n        startZoom: this._viewportProps.zoom\n      });\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(_ref4) {\n      var scale = _ref4.scale;\n      var startZoomPosition = this._interactiveState.startZoomPosition;\n      if (!startZoomPosition) {\n        startZoomPosition = this._viewportProps.position;\n      }\n      var direction = this.getDirection();\n      return this._move(direction, Math.log2(scale), startZoomPosition);\n    }\n  }, {\n    key: \"zoomEnd\",\n    value: function zoomEnd() {\n      return this._getUpdatedState({\n        startZoomPosition: null,\n        startZoom: null\n      });\n    }\n  }, {\n    key: \"moveLeft\",\n    value: function moveLeft() {\n      var direction = this.getDirection(true);\n      return this._move(direction.rotateZ({\n        radians: Math.PI / 2\n      }));\n    }\n  }, {\n    key: \"moveRight\",\n    value: function moveRight() {\n      var direction = this.getDirection(true);\n      return this._move(direction.rotateZ({\n        radians: -Math.PI / 2\n      }));\n    }\n  }, {\n    key: \"moveUp\",\n    value: function moveUp() {\n      var direction = this.getDirection(true);\n      return this._move(direction);\n    }\n  }, {\n    key: \"moveDown\",\n    value: function moveDown() {\n      var direction = this.getDirection(true);\n      return this._move(direction.negate());\n    }\n  }, {\n    key: \"rotateLeft\",\n    value: function rotateLeft() {\n      return this._getUpdatedState({\n        bearing: this._viewportProps.bearing - 15\n      });\n    }\n  }, {\n    key: \"rotateRight\",\n    value: function rotateRight() {\n      return this._getUpdatedState({\n        bearing: this._viewportProps.bearing + 15\n      });\n    }\n  }, {\n    key: \"rotateUp\",\n    value: function rotateUp() {\n      return this._getUpdatedState({\n        pitch: this._viewportProps.pitch + 10\n      });\n    }\n  }, {\n    key: \"rotateDown\",\n    value: function rotateDown() {\n      return this._getUpdatedState({\n        pitch: this._viewportProps.pitch - 10\n      });\n    }\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn() {\n      return this.zoom({\n        scale: 2\n      });\n    }\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut() {\n      return this.zoom({\n        scale: 0.5\n      });\n    }\n  }, {\n    key: \"shortestPathFrom\",\n    value: function shortestPathFrom(viewState) {\n      var fromProps = viewState.getViewportProps();\n      var props = Object.assign({}, this._viewportProps);\n      var bearing = props.bearing,\n        longitude = props.longitude;\n      if (Math.abs(bearing - fromProps.bearing) > 180) {\n        props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n      }\n      if (Math.abs(longitude - fromProps.longitude) > 180) {\n        props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n      }\n      return props;\n    }\n  }, {\n    key: \"_move\",\n    value: function _move(direction) {\n      var speed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var fromPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._viewportProps.position;\n      var delta = direction.scale(speed * MOVEMENT_SPEED);\n      return this._getUpdatedState({\n        position: new Vector3(fromPosition).add(delta)\n      });\n    }\n  }, {\n    key: \"_getUpdatedState\",\n    value: function _getUpdatedState(newProps) {\n      return new FirstPersonState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n    }\n  }, {\n    key: \"_applyConstraints\",\n    value: function _applyConstraints(props) {\n      var pitch = props.pitch,\n        maxPitch = props.maxPitch,\n        minPitch = props.minPitch,\n        longitude = props.longitude,\n        bearing = props.bearing;\n      props.pitch = clamp(pitch, minPitch, maxPitch);\n      if (longitude < -180 || longitude > 180) {\n        props.longitude = mod(longitude + 180, 360) - 180;\n      }\n      if (bearing < -180 || bearing > 180) {\n        props.bearing = mod(bearing + 180, 360) - 180;\n      }\n      return props;\n    }\n  }]);\n  return FirstPersonState;\n}(ViewState);\nvar FirstPersonController = function (_Controller) {\n  _inherits(FirstPersonController, _Controller);\n  function FirstPersonController(props) {\n    _classCallCheck(this, FirstPersonController);\n    return _possibleConstructorReturn(this, _getPrototypeOf(FirstPersonController).call(this, FirstPersonState, props));\n  }\n  return FirstPersonController;\n}(Controller);\nexport { FirstPersonController as default };","map":{"version":3,"sources":["../../../src/controllers/first-person-controller.js"],"names":["Controller","ViewState","mod","Vector3","_SphericalCoordinates","SphericalCoordinates","clamp","MOVEMENT_SPEED","DEFAULT_STATE","position","pitch","bearing","maxPitch","minPitch","FirstPersonState","width","height","longitude","latitude","startBearing","startPitch","startZoomPosition","startZoom","_interactiveState","use2D","spherical","_viewportProps","direction","toVector3","normalize","pos","_getUpdatedState","deltaScaleX","deltaScaleY","Number","isFinite","zoom","scale","getDirection","_move","Math","log2","rotateZ","radians","PI","negate","viewState","fromProps","getViewportProps","props","Object","assign","abs","speed","fromPosition","delta","add","newProps","FirstPersonController"],"mappings":";;;;;AAAA,OAAOA,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAAQC,GAAR,QAAkB,qBAAlB;AAEA,SAAQC,OAAR,EAAiBC,qBAAqB,IAAIC,oBAA1C,EAAgEC,KAAhE,QAA4E,SAA5E;AAEA,IAAMC,cAAc,GAAG,EAAvB;AACA,IAAMC,aAAa,GAAG;EACpBC,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADU;EAEpBC,KAAK,EAAE,CAFa;EAGpBC,OAAO,EAAE,CAHW;EAIpBC,QAAQ,EAAE,EAJU;EAKpBC,QAAQ,EAAE,CAAC;AALS,CAAtB;IAQMC,gB;;EACJ,SAAA,gBAAA,CAAA,IAAA,EAuBG;IAAA,IAAA,KAAA;IAAA,IArBDC,KAqBC,GAAA,IAAA,CArBDA,KAqBC;MApBDC,MAoBC,GAAA,IAAA,CApBDA,MAoBC;MAAA,aAAA,GAAA,IAAA,CAjBDP,QAiBC;MAjBDA,QAiBC,GAAA,aAAA,KAAA,KAAA,CAAA,GAjBUD,aAAa,CAACC,QAiBxB,GAAA,aAAA;MAAA,YAAA,GAAA,IAAA,CAfDE,OAeC;MAfDA,OAeC,GAAA,YAAA,KAAA,KAAA,CAAA,GAfSH,aAAa,CAACG,OAevB,GAAA,YAAA;MAAA,UAAA,GAAA,IAAA,CAdDD,KAcC;MAdDA,KAcC,GAAA,UAAA,KAAA,KAAA,CAAA,GAdOF,aAAa,CAACE,KAcrB,GAAA,UAAA;MAXDO,SAWC,GAAA,IAAA,CAXDA,SAWC;MAVDC,QAUC,GAAA,IAAA,CAVDA,QAUC;MAAA,aAAA,GAAA,IAAA,CARDN,QAQC;MARDA,QAQC,GAAA,aAAA,KAAA,KAAA,CAAA,GARUJ,aAAa,CAACI,QAQxB,GAAA,aAAA;MAAA,aAAA,GAAA,IAAA,CAPDC,QAOC;MAPDA,QAOC,GAAA,aAAA,KAAA,KAAA,CAAA,GAPUL,aAAa,CAACK,QAOxB,GAAA,aAAA;MAJDM,YAIC,GAAA,IAAA,CAJDA,YAIC;MAHDC,UAGC,GAAA,IAAA,CAHDA,UAGC;MAFDC,iBAEC,GAAA,IAAA,CAFDA,iBAEC;MADDC,SACC,GAAA,IAAA,CADDA,SACC;IAAA,eAAA,CAAA,IAAA,EAAA,gBAAA,CAAA;IACD,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,gBAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAM;MACJP,KAAK,EAALA,KADI;MAEJC,MAAM,EAANA,MAFI;MAGJP,QAAQ,EAARA,QAHI;MAIJE,OAAO,EAAPA,OAJI;MAKJD,KAAK,EAALA,KALI;MAMJO,SAAS,EAATA,SANI;MAOJC,QAAQ,EAARA,QAPI;MAQJN,QAAQ,EAARA,QARI;MASJC,QAAQ,EAARA;IATI,CAAN,CAAA,CAAA;IAYA,KAAA,CAAKU,iBAAL,GAAyB;MACvBJ,YAAY,EAAZA,YADuB;MAEvBC,UAAU,EAAVA,UAFuB;MAGvBC,iBAAiB,EAAjBA,iBAHuB;MAIvBC,SAAS,EAATA;IAJuB,CAAzB;IAbC,OAAA,KAAA;EAmBF;;;0CAIqB;MACpB,OAAO,IAAA,CAAKC,iBAAZ;IACD;;;mCAE2B;MAAA,IAAfC,KAAe,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAP,KAAO;MAC1B,IAAMC,SAAS,GAAG,IAAIpB,oBAAJ,CAAyB;QACzCM,OAAO,EAAE,IAAA,CAAKe,cAAL,CAAoBf,OADY;QAEzCD,KAAK,EAAEc,KAAK,GAAG,EAAH,GAAQ,EAAA,GAAK,IAAA,CAAKE,cAAL,CAAoBhB;MAFJ,CAAzB,CAAlB;MAIA,IAAMiB,SAAS,GAAGF,SAAS,CAACG,SAAVH,EAAAA,CAAsBI,SAAtBJ,EAAlB;MACA,OAAOE,SAAP;IACD;;;+BAMU;MACT,OAAO,IAAP;IACD;;;0BAMK;MACJ,OAAO,IAAP;IACD;;;6BAMQ;MACP,OAAO,IAAP;IACD;;;uCAMkB;MAAA,IAANG,GAAM,GAAA,KAAA,CAANA,GAAM;MACjB,OAAO,IAAA,CAAKC,gBAAL,CAAsB;QAC3BZ,YAAY,EAAE,IAAA,CAAKO,cAAL,CAAoBf,OADP;QAE3BS,UAAU,EAAE,IAAA,CAAKM,cAAL,CAAoBhB;MAFL,CAAtB,CAAP;IAID;;;kCAMkC;MAAA,IAA3BsB,WAA2B,GAAA,KAAA,CAA3BA,WAA2B;QAAdC,WAAc,GAAA,KAAA,CAAdA,WAAc;MAAA,IAAA,qBAAA,GACE,IAAA,CAAKV,iBADP;QAC1BJ,YAD0B,GAAA,qBAAA,CAC1BA,YAD0B;QACZC,UADY,GAAA,qBAAA,CACZA,UADY;MAGjC,IAAI,CAACc,MAAM,CAACC,QAAPD,CAAgBf,YAAhBe,CAAD,IAAkC,CAACA,MAAM,CAACC,QAAPD,CAAgBd,UAAhBc,CAAvC,EAAoE;QAClE,OAAO,IAAP;MACD;MAED,OAAO,IAAA,CAAKH,gBAAL,CAAsB;QAC3BpB,OAAO,EAAEQ,YAAY,GAAGa,WAAW,GAAG,GADX;QAE3BtB,KAAK,EAAEU,UAAU,GAAGa,WAAW,GAAG;MAFP,CAAtB,CAAP;IAID;;;gCAMW;MACV,OAAO,IAAA,CAAKF,gBAAL,CAAsB;QAC3BZ,YAAY,EAAE,IADa;QAE3BC,UAAU,EAAE;MAFe,CAAtB,CAAP;IAID;;;gCAMW;MACV,OAAO,IAAA,CAAKW,gBAAL,CAAsB;QAC3BV,iBAAiB,EAAE,IAAA,CAAKK,cAAL,CAAoBjB,QADZ;QAE3Ba,SAAS,EAAE,IAAA,CAAKI,cAAL,CAAoBU;MAFJ,CAAtB,CAAP;IAID;;;gCAUa;MAAA,IAARC,KAAQ,GAAA,KAAA,CAARA,KAAQ;MAAA,IACPhB,iBADO,GACc,IAAA,CAAKE,iBADnB,CACPF,iBADO;MAEZ,IAAI,CAACA,iBAAL,EAAwB;QACtBA,iBAAiB,GAAG,IAAA,CAAKK,cAAL,CAAoBjB,QAAxCY;MACD;MAED,IAAMM,SAAS,GAAG,IAAA,CAAKW,YAAL,EAAlB;MACA,OAAO,IAAA,CAAKC,KAAL,CAAWZ,SAAX,EAAsBa,IAAI,CAACC,IAALD,CAAUH,KAAVG,CAAtB,EAAwCnB,iBAAxC,CAAP;IACD;;;8BAMS;MACR,OAAO,IAAA,CAAKU,gBAAL,CAAsB;QAC3BV,iBAAiB,EAAE,IADQ;QAE3BC,SAAS,EAAE;MAFgB,CAAtB,CAAP;IAID;;;+BAEU;MACT,IAAMK,SAAS,GAAG,IAAA,CAAKW,YAAL,CAAkB,IAAlB,CAAlB;MACA,OAAO,IAAA,CAAKC,KAAL,CAAW,SAAS,CAACG,OAAV,CAAkB;QAACC,OAAO,EAAEH,IAAI,CAACI,EAALJ,GAAU;MAApB,CAAlB,CAAX,CAAP;IACD;;;gCAEW;MACV,IAAMb,SAAS,GAAG,IAAA,CAAKW,YAAL,CAAkB,IAAlB,CAAlB;MACA,OAAO,IAAA,CAAKC,KAAL,CAAW,SAAS,CAACG,OAAV,CAAkB;QAACC,OAAO,EAAE,CAACH,IAAI,CAACI,EAAN,GAAW;MAArB,CAAlB,CAAX,CAAP;IACD;;;6BAGQ;MACP,IAAMjB,SAAS,GAAG,IAAA,CAAKW,YAAL,CAAkB,IAAlB,CAAlB;MACA,OAAO,IAAA,CAAKC,KAAL,CAAWZ,SAAX,CAAP;IACD;;;+BAGU;MACT,IAAMA,SAAS,GAAG,IAAA,CAAKW,YAAL,CAAkB,IAAlB,CAAlB;MACA,OAAO,IAAA,CAAKC,KAAL,CAAWZ,SAAS,CAACkB,MAAVlB,EAAX,CAAP;IACD;;;iCAEY;MACX,OAAO,IAAA,CAAKI,gBAAL,CAAsB;QAC3BpB,OAAO,EAAE,IAAA,CAAKe,cAAL,CAAoBf,OAApB,GAA8B;MADZ,CAAtB,CAAP;IAGD;;;kCAEa;MACZ,OAAO,IAAA,CAAKoB,gBAAL,CAAsB;QAC3BpB,OAAO,EAAE,IAAA,CAAKe,cAAL,CAAoBf,OAApB,GAA8B;MADZ,CAAtB,CAAP;IAGD;;;+BAEU;MACT,OAAO,IAAA,CAAKoB,gBAAL,CAAsB;QAC3BrB,KAAK,EAAE,IAAA,CAAKgB,cAAL,CAAoBhB,KAApB,GAA4B;MADR,CAAtB,CAAP;IAGD;;;iCAEY;MACX,OAAO,IAAA,CAAKqB,gBAAL,CAAsB;QAC3BrB,KAAK,EAAE,IAAA,CAAKgB,cAAL,CAAoBhB,KAApB,GAA4B;MADR,CAAtB,CAAP;IAGD;;;6BAEQ;MACP,OAAO,IAAA,CAAK0B,IAAL,CAAU;QAACC,KAAK,EAAE;MAAR,CAAV,CAAP;IACD;;;8BAES;MACR,OAAO,IAAA,CAAKD,IAAL,CAAU;QAACC,KAAK,EAAE;MAAR,CAAV,CAAP;IACD;;;qCAGgBS,S,EAAW;MAC1B,IAAMC,SAAS,GAAGD,SAAS,CAACE,gBAAVF,EAAlB;MACA,IAAMG,KAAK,GAAGC,MAAM,CAACC,MAAPD,CAAc,CAAA,CAAdA,EAAkB,IAAA,CAAKxB,cAAvBwB,CAAd;MAF0B,IAGnBvC,OAHmB,GAGGsC,KAHH,CAGnBtC,OAHmB;QAGVM,SAHU,GAGGgC,KAHH,CAGVhC,SAHU;MAK1B,IAAIuB,IAAI,CAACY,GAALZ,CAAS7B,OAAO,GAAGoC,SAAS,CAACpC,OAA7B6B,CAAAA,GAAwC,GAA5C,EAAiD;QAC/CS,KAAK,CAACtC,OAANsC,GAAgBtC,OAAO,GAAG,CAAVA,GAAcA,OAAO,GAAG,GAAxBA,GAA8BA,OAAO,GAAG,GAAxDsC;MACD;MACD,IAAIT,IAAI,CAACY,GAALZ,CAASvB,SAAS,GAAG8B,SAAS,CAAC9B,SAA/BuB,CAAAA,GAA4C,GAAhD,EAAqD;QACnDS,KAAK,CAAChC,SAANgC,GAAkBhC,SAAS,GAAG,CAAZA,GAAgBA,SAAS,GAAG,GAA5BA,GAAkCA,SAAS,GAAG,GAAhEgC;MACD;MACD,OAAOA,KAAP;IACD;;;0BAGKtB,S,EAAmE;MAAA,IAAxD0B,KAAwD,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAhD,CAAgD;MAAA,IAA7CC,YAA6C,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAA9B,IAAA,CAAK5B,cAAL,CAAoBjB,QAAU;MACvE,IAAM8C,KAAK,GAAG5B,SAAS,CAACU,KAAVV,CAAgB0B,KAAK,GAAG9C,cAAxBoB,CAAd;MACA,OAAO,IAAA,CAAKI,gBAAL,CAAsB;QAC3BtB,QAAQ,EAAE,IAAIN,OAAJ,CAAYmD,YAAZ,CAAA,CAA0BE,GAA1B,CAA8BD,KAA9B;MADiB,CAAtB,CAAP;IAGD;;;qCAEgBE,Q,EAAU;MAEzB,OAAO,IAAI3C,gBAAJ,CACLoC,MAAM,CAACC,MAAPD,CAAc,CAAA,CAAdA,EAAkB,IAAA,CAAKxB,cAAvBwB,EAAuC,IAAA,CAAK3B,iBAA5C2B,EAA+DO,QAA/DP,CADK,CAAP;IAGD;;;sCAGiBD,K,EAAO;MAAA,IAEhBvC,KAFgB,GAEiCuC,KAFjC,CAEhBvC,KAFgB;QAETE,QAFS,GAEiCqC,KAFjC,CAETrC,QAFS;QAECC,QAFD,GAEiCoC,KAFjC,CAECpC,QAFD;QAEWI,SAFX,GAEiCgC,KAFjC,CAEWhC,SAFX;QAEsBN,OAFtB,GAEiCsC,KAFjC,CAEsBtC,OAFtB;MAGvBsC,KAAK,CAACvC,KAANuC,GAAc3C,KAAK,CAACI,KAAD,EAAQG,QAAR,EAAkBD,QAAlB,CAAnBqC;MAGA,IAAIhC,SAAS,GAAG,CAAC,GAAbA,IAAoBA,SAAS,GAAG,GAApC,EAAyC;QACvCgC,KAAK,CAAChC,SAANgC,GAAkB/C,GAAG,CAACe,SAAS,GAAG,GAAb,EAAkB,GAAlB,CAAHf,GAA4B,GAA9C+C;MACD;MACD,IAAItC,OAAO,GAAG,CAAC,GAAXA,IAAkBA,OAAO,GAAG,GAAhC,EAAqC;QACnCsC,KAAK,CAACtC,OAANsC,GAAgB/C,GAAG,CAACS,OAAO,GAAG,GAAX,EAAgB,GAAhB,CAAHT,GAA0B,GAA1C+C;MACD;MAED,OAAOA,KAAP;IACD;;;EAtQ4BhD,S;IAyQVyD,qB;;EACnB,SAAA,qBAAA,CAAYT,KAAZ,EAAmB;IAAA,eAAA,CAAA,IAAA,EAAA,qBAAA,CAAA;IAAA,OAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,qBAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EACXnC,gBADW,EACOmC,KADP,CAAA,CAAA;EAElB;;EAHgDjD,U;SAA9B0D,qB","sourcesContent":["import Controller from './controller';\nimport ViewState from './view-state';\nimport {mod} from '../utils/math-utils';\n\nimport {Vector3, _SphericalCoordinates as SphericalCoordinates, clamp} from 'math.gl';\n\nconst MOVEMENT_SPEED = 20;\nconst DEFAULT_STATE = {\n  position: [0, 0, 0],\n  pitch: 0,\n  bearing: 0,\n  maxPitch: 90,\n  minPitch: -90\n};\n\nclass FirstPersonState extends ViewState {\n  constructor({\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n\n    // Position and orientation\n    position = DEFAULT_STATE.position, // typically in meters from anchor point\n\n    bearing = DEFAULT_STATE.bearing, // Rotation around y axis\n    pitch = DEFAULT_STATE.pitch, // Rotation around x axis\n\n    // Geospatial anchor\n    longitude,\n    latitude,\n\n    maxPitch = DEFAULT_STATE.maxPitch,\n    minPitch = DEFAULT_STATE.minPitch,\n\n    // Model state when the rotate operation first started\n    startBearing,\n    startPitch,\n    startZoomPosition,\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      position,\n      bearing,\n      pitch,\n      longitude,\n      latitude,\n      maxPitch,\n      minPitch\n    });\n\n    this._interactiveState = {\n      startBearing,\n      startPitch,\n      startZoomPosition,\n      startZoom\n    };\n  }\n\n  /* Public API */\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  getDirection(use2D = false) {\n    const spherical = new SphericalCoordinates({\n      bearing: this._viewportProps.bearing,\n      pitch: use2D ? 90 : 90 + this._viewportProps.pitch\n    });\n    const direction = spherical.toVector3().normalize();\n    return direction;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart() {\n    return this;\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan() {\n    return this;\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this;\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({deltaScaleX, deltaScaleY}) {\n    const {startBearing, startPitch} = this._interactiveState;\n\n    if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    return this._getUpdatedState({\n      bearing: startBearing - deltaScaleX * 180,\n      pitch: startPitch - deltaScaleY * 90\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart() {\n    return this._getUpdatedState({\n      startZoomPosition: this._viewportProps.position,\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({scale}) {\n    let {startZoomPosition} = this._interactiveState;\n    if (!startZoomPosition) {\n      startZoomPosition = this._viewportProps.position;\n    }\n\n    const direction = this.getDirection();\n    return this._move(direction, Math.log2(scale), startZoomPosition);\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startZoom: null\n    });\n  }\n\n  moveLeft() {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: Math.PI / 2}));\n  }\n\n  moveRight() {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: -Math.PI / 2}));\n  }\n\n  // forward\n  moveUp() {\n    const direction = this.getDirection(true);\n    return this._move(direction);\n  }\n\n  // backward\n  moveDown() {\n    const direction = this.getDirection(true);\n    return this._move(direction.negate());\n  }\n\n  rotateLeft() {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - 15\n    });\n  }\n\n  rotateRight() {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + 15\n    });\n  }\n\n  rotateUp() {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + 10\n    });\n  }\n\n  rotateDown() {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - 10\n    });\n  }\n\n  zoomIn() {\n    return this.zoom({scale: 2});\n  }\n\n  zoomOut() {\n    return this.zoom({scale: 0.5});\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = Object.assign({}, this._viewportProps);\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n  _move(direction, speed = 1, fromPosition = this._viewportProps.position) {\n    const delta = direction.scale(speed * MOVEMENT_SPEED);\n    return this._getUpdatedState({\n      position: new Vector3(fromPosition).add(delta)\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new FirstPersonState(\n      Object.assign({}, this._viewportProps, this._interactiveState, newProps)\n    );\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure pitch and zoom are within specified range\n    const {pitch, maxPitch, minPitch, longitude, bearing} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize degrees\n    if (longitude < -180 || longitude > 180) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n    if (bearing < -180 || bearing > 180) {\n      props.bearing = mod(bearing + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class FirstPersonController extends Controller {\n  constructor(props) {\n    super(FirstPersonState, props);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}