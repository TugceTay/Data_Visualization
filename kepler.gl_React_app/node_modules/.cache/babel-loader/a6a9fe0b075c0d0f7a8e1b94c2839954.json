{"ast":null,"code":"/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport * as React from 'react';\nimport FormattedMessage from './message';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\nclass FormattedHTMLMessage extends FormattedMessage {\n  render() {\n    return React.createElement(Context.Consumer, null, intl => {\n      if (!this.props.defaultMessage) {\n        invariantIntlContext(intl);\n      }\n      const {\n        formatHTMLMessage,\n        textComponent\n      } = intl;\n      const {\n        id,\n        description,\n        defaultMessage,\n        values: rawValues,\n        children\n      } = this.props;\n      let {\n        tagName: Component\n      } = this.props;\n      // This is bc of TS3.3 doesn't recognize `defaultProps`\n      if (!Component) {\n        Component = textComponent || 'span';\n      }\n      const descriptor = {\n        id,\n        description,\n        defaultMessage\n      };\n      const formattedHTMLMessage = formatHTMLMessage(descriptor, rawValues);\n      if (typeof children === 'function') {\n        return children(formattedHTMLMessage);\n      }\n      // Since the message presumably has HTML in it, we need to set\n      // `innerHTML` in order for it to be rendered and not escaped by React.\n      // To be safe, all string prop values were escaped when formatting the\n      // message. It is assumed that the message is not UGC, and came from the\n      // developer making it more like a template.\n      //\n      // Note: There's a perf impact of using this component since there's no\n      // way for React to do its virtual DOM diffing.\n      const html = {\n        __html: formattedHTMLMessage\n      };\n      return React.createElement(Component, {\n        dangerouslySetInnerHTML: html\n      });\n    });\n  }\n}\nFormattedHTMLMessage.displayName = 'FormattedHTMLMessage';\nFormattedHTMLMessage.defaultProps = Object.assign(Object.assign({}, FormattedMessage.defaultProps), {\n  tagName: 'span'\n});\nexport default FormattedHTMLMessage;","map":{"version":3,"names":["React","FormattedMessage","Context","invariantIntlContext","FormattedHTMLMessage","render","createElement","Consumer","intl","props","defaultMessage","formatHTMLMessage","textComponent","id","description","values","rawValues","children","tagName","Component","descriptor","formattedHTMLMessage","html","__html","dangerouslySetInnerHTML","displayName","defaultProps","Object","assign"],"sources":["C:/Users/tugcetay/Documents/github/Data_visualization/kepler.gl_React_app/my_app/node_modules/react-intl/lib/components/html-message.js"],"sourcesContent":["/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport * as React from 'react';\nimport FormattedMessage from './message';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\nclass FormattedHTMLMessage extends FormattedMessage {\n    render() {\n        return (React.createElement(Context.Consumer, null, (intl) => {\n            if (!this.props.defaultMessage) {\n                invariantIntlContext(intl);\n            }\n            const { formatHTMLMessage, textComponent } = intl;\n            const { id, description, defaultMessage, values: rawValues, children, } = this.props;\n            let { tagName: Component } = this.props;\n            // This is bc of TS3.3 doesn't recognize `defaultProps`\n            if (!Component) {\n                Component = textComponent || 'span';\n            }\n            const descriptor = { id, description, defaultMessage };\n            const formattedHTMLMessage = formatHTMLMessage(descriptor, rawValues);\n            if (typeof children === 'function') {\n                return children(formattedHTMLMessage);\n            }\n            // Since the message presumably has HTML in it, we need to set\n            // `innerHTML` in order for it to be rendered and not escaped by React.\n            // To be safe, all string prop values were escaped when formatting the\n            // message. It is assumed that the message is not UGC, and came from the\n            // developer making it more like a template.\n            //\n            // Note: There's a perf impact of using this component since there's no\n            // way for React to do its virtual DOM diffing.\n            const html = { __html: formattedHTMLMessage };\n            return React.createElement(Component, { dangerouslySetInnerHTML: html });\n        }));\n    }\n}\nFormattedHTMLMessage.displayName = 'FormattedHTMLMessage';\nFormattedHTMLMessage.defaultProps = Object.assign(Object.assign({}, FormattedMessage.defaultProps), { tagName: 'span' });\nexport default FormattedHTMLMessage;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,gBAAgB,MAAM,WAAW;AACxC,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,oBAAoB,QAAQ,UAAU;AAC/C,MAAMC,oBAAoB,SAASH,gBAAgB,CAAC;EAChDI,MAAM,GAAG;IACL,OAAQL,KAAK,CAACM,aAAa,CAACJ,OAAO,CAACK,QAAQ,EAAE,IAAI,EAAGC,IAAI,IAAK;MAC1D,IAAI,CAAC,IAAI,CAACC,KAAK,CAACC,cAAc,EAAE;QAC5BP,oBAAoB,CAACK,IAAI,CAAC;MAC9B;MACA,MAAM;QAAEG,iBAAiB;QAAEC;MAAc,CAAC,GAAGJ,IAAI;MACjD,MAAM;QAAEK,EAAE;QAAEC,WAAW;QAAEJ,cAAc;QAAEK,MAAM,EAAEC,SAAS;QAAEC;MAAU,CAAC,GAAG,IAAI,CAACR,KAAK;MACpF,IAAI;QAAES,OAAO,EAAEC;MAAU,CAAC,GAAG,IAAI,CAACV,KAAK;MACvC;MACA,IAAI,CAACU,SAAS,EAAE;QACZA,SAAS,GAAGP,aAAa,IAAI,MAAM;MACvC;MACA,MAAMQ,UAAU,GAAG;QAAEP,EAAE;QAAEC,WAAW;QAAEJ;MAAe,CAAC;MACtD,MAAMW,oBAAoB,GAAGV,iBAAiB,CAACS,UAAU,EAAEJ,SAAS,CAAC;MACrE,IAAI,OAAOC,QAAQ,KAAK,UAAU,EAAE;QAChC,OAAOA,QAAQ,CAACI,oBAAoB,CAAC;MACzC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,MAAMC,IAAI,GAAG;QAAEC,MAAM,EAAEF;MAAqB,CAAC;MAC7C,OAAOrB,KAAK,CAACM,aAAa,CAACa,SAAS,EAAE;QAAEK,uBAAuB,EAAEF;MAAK,CAAC,CAAC;IAC5E,CAAC,CAAC;EACN;AACJ;AACAlB,oBAAoB,CAACqB,WAAW,GAAG,sBAAsB;AACzDrB,oBAAoB,CAACsB,YAAY,GAAGC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE3B,gBAAgB,CAACyB,YAAY,CAAC,EAAE;EAAER,OAAO,EAAE;AAAO,CAAC,CAAC;AACxH,eAAed,oBAAoB"},"metadata":{},"sourceType":"module"}