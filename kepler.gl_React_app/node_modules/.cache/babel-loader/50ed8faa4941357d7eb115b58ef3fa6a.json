{"ast":null,"code":"export class KeyFrames {\n  constructor(keyFrames) {\n    this._lastTime = -1;\n    this.startIndex = -1;\n    this.endIndex = -1;\n    this.factor = 0;\n    this.times = [];\n    this.values = [];\n    this.setKeyFrames(keyFrames);\n    this.setTime(0);\n  }\n  setKeyFrames(keyFrames) {\n    const numKeys = keyFrames.length;\n    this.times.length = numKeys;\n    this.values.length = numKeys;\n    for (let i = 0; i < numKeys; ++i) {\n      this.times[i] = keyFrames[i][0];\n      this.values[i] = keyFrames[i][1];\n    }\n    this._calculateKeys(this._lastTime);\n  }\n  setTime(time) {\n    time = Math.max(0, time);\n    if (time !== this._lastTime) {\n      this._calculateKeys(time);\n      this._lastTime = time;\n    }\n  }\n  getStartTime() {\n    return this.times[this.startIndex];\n  }\n  getEndTime() {\n    return this.times[this.endIndex];\n  }\n  getStartData() {\n    return this.values[this.startIndex];\n  }\n  getEndData() {\n    return this.values[this.endIndex];\n  }\n  _calculateKeys(time) {\n    let index = 0;\n    const numKeys = this.times.length;\n    for (index = 0; index < numKeys - 2; ++index) {\n      if (this.times[index + 1] > time) {\n        break;\n      }\n    }\n    this.startIndex = index;\n    this.endIndex = index + 1;\n    const startTime = this.times[this.startIndex];\n    const endTime = this.times[this.endIndex];\n    this.factor = Math.min(Math.max(0, (time - startTime) / (endTime - startTime)), 1);\n  }\n}","map":{"version":3,"sources":["../../../src/animation/key-frames.js"],"names":["KeyFrames","constructor","keyFrames","_lastTime","startIndex","endIndex","factor","times","values","setKeyFrames","setTime","numKeys","length","i","_calculateKeys","time","Math","max","getStartTime","getEndTime","getStartData","getEndData","index","startTime","endTime","min"],"mappings":"AAEA,OAAO,MAAMA,SAAN,CAAgB;EACrBC,WAAW,CAACC,SAAD,EAAY;IACrB,IAAA,CAAKC,SAAL,GAAiB,CAAC,CAAlB;IACA,IAAA,CAAKC,UAAL,GAAkB,CAAC,CAAnB;IACA,IAAA,CAAKC,QAAL,GAAgB,CAAC,CAAjB;IACA,IAAA,CAAKC,MAAL,GAAc,CAAd;IACA,IAAA,CAAKC,KAAL,GAAa,EAAb;IACA,IAAA,CAAKC,MAAL,GAAc,EAAd;IACA,IAAA,CAAKC,YAAL,CAAkBP,SAAlB,CAAA;IACA,IAAA,CAAKQ,OAAL,CAAa,CAAb,CAAA;EACD;EAEDD,YAAY,CAACP,SAAD,EAAY;IACtB,MAAMS,OAAO,GAAGT,SAAS,CAACU,MAA1B;IACA,IAAA,CAAKL,KAAL,CAAWK,MAAX,GAAoBD,OAApB;IACA,IAAA,CAAKH,MAAL,CAAYI,MAAZ,GAAqBD,OAArB;IAEA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAApB,EAA6B,EAAEE,CAA/B,EAAkC;MAChC,IAAA,CAAKN,KAAL,CAAWM,CAAX,CAAA,GAAgBX,SAAS,CAACW,CAAD,CAATX,CAAa,CAAbA,CAAhB;MACA,IAAA,CAAKM,MAAL,CAAYK,CAAZ,CAAA,GAAiBX,SAAS,CAACW,CAAD,CAATX,CAAa,CAAbA,CAAjB;IACD;IAED,IAAA,CAAKY,cAAL,CAAoB,IAAA,CAAKX,SAAzB,CAAA;EACD;EAEDO,OAAO,CAACK,IAAD,EAAO;IACZA,IAAI,GAAGC,IAAI,CAACC,GAALD,CAAS,CAATA,EAAYD,IAAZC,CAAPD;IAEA,IAAIA,IAAI,KAAK,IAAA,CAAKZ,SAAlB,EAA6B;MAC3B,IAAA,CAAKW,cAAL,CAAoBC,IAApB,CAAA;MACA,IAAA,CAAKZ,SAAL,GAAiBY,IAAjB;IACD;EACF;EAEDG,YAAY,GAAG;IACb,OAAO,IAAA,CAAKX,KAAL,CAAW,IAAA,CAAKH,UAAhB,CAAP;EACD;EAEDe,UAAU,GAAG;IACX,OAAO,IAAA,CAAKZ,KAAL,CAAW,IAAA,CAAKF,QAAhB,CAAP;EACD;EAEDe,YAAY,GAAG;IACb,OAAO,IAAA,CAAKZ,MAAL,CAAY,IAAA,CAAKJ,UAAjB,CAAP;EACD;EAEDiB,UAAU,GAAG;IACX,OAAO,IAAA,CAAKb,MAAL,CAAY,IAAA,CAAKH,QAAjB,CAAP;EACD;EAEDS,cAAc,CAACC,IAAD,EAAO;IACnB,IAAIO,KAAK,GAAG,CAAZ;IACA,MAAMX,OAAO,GAAG,IAAA,CAAKJ,KAAL,CAAWK,MAA3B;IAEA,KAAKU,KAAK,GAAG,CAAb,EAAgBA,KAAK,GAAGX,OAAO,GAAG,CAAlC,EAAqC,EAAEW,KAAvC,EAA8C;MAC5C,IAAI,IAAA,CAAKf,KAAL,CAAWe,KAAK,GAAG,CAAnB,CAAA,GAAwBP,IAA5B,EAAkC;QAChC;MACD;IACF;IAED,IAAA,CAAKX,UAAL,GAAkBkB,KAAlB;IACA,IAAA,CAAKjB,QAAL,GAAgBiB,KAAK,GAAG,CAAxB;IAEA,MAAMC,SAAS,GAAG,IAAA,CAAKhB,KAAL,CAAW,IAAA,CAAKH,UAAhB,CAAlB;IACA,MAAMoB,OAAO,GAAG,IAAA,CAAKjB,KAAL,CAAW,IAAA,CAAKF,QAAhB,CAAhB;IACA,IAAA,CAAKC,MAAL,GAAcU,IAAI,CAACS,GAALT,CAASA,IAAI,CAACC,GAALD,CAAS,CAATA,EAAY,CAACD,IAAI,GAAGQ,SAAR,KAAsBC,OAAO,GAAGD,SAAhC,CAAZP,CAATA,EAAkE,CAAlEA,CAAd;EACD;AAlEoB","sourcesContent":["/** @type {import('@luma.gl/engine').KeyFrames} */\n\nexport class KeyFrames {\n  constructor(keyFrames) {\n    this._lastTime = -1;\n    this.startIndex = -1;\n    this.endIndex = -1;\n    this.factor = 0;\n    this.times = [];\n    this.values = [];\n    this.setKeyFrames(keyFrames);\n    this.setTime(0);\n  }\n\n  setKeyFrames(keyFrames) {\n    const numKeys = keyFrames.length;\n    this.times.length = numKeys;\n    this.values.length = numKeys;\n\n    for (let i = 0; i < numKeys; ++i) {\n      this.times[i] = keyFrames[i][0];\n      this.values[i] = keyFrames[i][1];\n    }\n\n    this._calculateKeys(this._lastTime);\n  }\n\n  setTime(time) {\n    time = Math.max(0, time);\n\n    if (time !== this._lastTime) {\n      this._calculateKeys(time);\n      this._lastTime = time;\n    }\n  }\n\n  getStartTime() {\n    return this.times[this.startIndex];\n  }\n\n  getEndTime() {\n    return this.times[this.endIndex];\n  }\n\n  getStartData() {\n    return this.values[this.startIndex];\n  }\n\n  getEndData() {\n    return this.values[this.endIndex];\n  }\n\n  _calculateKeys(time) {\n    let index = 0;\n    const numKeys = this.times.length;\n\n    for (index = 0; index < numKeys - 2; ++index) {\n      if (this.times[index + 1] > time) {\n        break;\n      }\n    }\n\n    this.startIndex = index;\n    this.endIndex = index + 1;\n\n    const startTime = this.times[this.startIndex];\n    const endTime = this.times[this.endIndex];\n    this.factor = Math.min(Math.max(0, (time - startTime) / (endTime - startTime)), 1);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}