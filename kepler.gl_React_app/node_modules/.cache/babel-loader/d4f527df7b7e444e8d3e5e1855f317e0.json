{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _layers = require(\"@deck.gl/layers\");\nvar _core = require(\"@luma.gl/core\");\nvar _constants = _interopRequireDefault(require(\"@luma.gl/constants\"));\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar DEFAULT_POS = [-1, -1, 0, -1, 1, 0, 1, 1, 0, 1, -1, 0];\nvar ScatterplotIconLayer = /*#__PURE__*/function (_ScatterplotLayer) {\n  (0, _inherits2[\"default\"])(ScatterplotIconLayer, _ScatterplotLayer);\n  var _super = _createSuper(ScatterplotIconLayer);\n  function ScatterplotIconLayer() {\n    (0, _classCallCheck2[\"default\"])(this, ScatterplotIconLayer);\n    return _super.apply(this, arguments);\n  }\n  (0, _createClass2[\"default\"])(ScatterplotIconLayer, [{\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      // use default scatterplot shaders\n      var shaders = this.getShaders();\n      var iconGeometry = this.props.iconGeometry;\n      var geometry = iconGeometry ? new _core.Geometry({\n        drawMode: _constants[\"default\"].TRIANGLES,\n        attributes: {\n          positions: new Float32Array(iconGeometry)\n        }\n      }) : new _core.Geometry({\n        drawMode: _constants[\"default\"].TRIANGLE_FAN,\n        attributes: {\n          positions: new Float32Array(DEFAULT_POS)\n        }\n      });\n      return new _core.Model(gl, _objectSpread(_objectSpread({}, shaders), {}, {\n        id: this.props.id,\n        geometry: geometry,\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      }));\n    }\n  }]);\n  return ScatterplotIconLayer;\n}(_layers.ScatterplotLayer);\nexports[\"default\"] = ScatterplotIconLayer;\nScatterplotIconLayer.layerName = 'ScatterplotIconLayer';","map":{"version":3,"sources":["../../../src/deckgl-layers/svg-icon-layer/scatterplot-icon-layer.js"],"names":["DEFAULT_POS","ScatterplotIconLayer","ScatterplotLayer","gl","shaders","getShaders","iconGeometry","props","geometry","Geometry","drawMode","GL","TRIANGLES","attributes","positions","Float32Array","TRIANGLE_FAN","Model","id","isInstanced","shaderCache","context","layerName"],"mappings":";;;;;;;;;;;;;AAoBA,IAAA,OAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,WAAW,GAAG,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAT,EAAY,CAAC,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAC,CAAnC,EAAsC,CAAtC,CAApB;IACqBC,oB;;;;;;;;;WACnB,SAAA,SAAA,CAAUE,EAAV,EAAc;MACZ;MACA,IAAMC,OAAO,GAAG,IAAA,CAAKC,UAAL,EAAhB;MAFY,IAILC,YAJK,GAIW,IAAA,CAAKC,KAJhB,CAILD,YAJK;MAMZ,IAAME,QAAQ,GAAGF,YAAY,GACzB,IAAIG,KAAAA,CAAAA,QAAJ,CAAa;QACXC,QAAQ,EAAEC,UAAAA,CAAAA,SAAAA,CAAAA,CAAGC,SADF;QAEXC,UAAU,EAAE;UACVC,SAAS,EAAE,IAAIC,YAAJ,CAAiBT,YAAjB;QADD;MAFD,CAAb,CADyB,GAOzB,IAAIG,KAAAA,CAAAA,QAAJ,CAAa;QACXC,QAAQ,EAAEC,UAAAA,CAAAA,SAAAA,CAAAA,CAAGK,YADF;QAEXH,UAAU,EAAE;UACVC,SAAS,EAAE,IAAIC,YAAJ,CAAiBf,WAAjB;QADD;MAFD,CAAb,CAPJ;MAcA,OAAO,IAAIiB,KAAAA,CAAAA,KAAJ,CAAUd,EAAV,EAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EACFC,OADE,CAAA,EAAA,CAAA,CAAA,EAAA;QAELc,EAAE,EAAE,IAAA,CAAKX,KAAL,CAAWW,EAFV;QAGLV,QAAQ,EAARA,QAHK;QAILW,WAAW,EAAE,IAJR;QAKLC,WAAW,EAAE,IAAA,CAAKC,OAAL,CAAaD;MALrB,CAAA,CAAA,CAAP;IAOD;;;EA5B+ClB,OAAAA,CAAAA,gB;;AA+BlDD,oBAAoB,CAACqB,SAArBrB,GAAiC,sBAAjCA","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {ScatterplotLayer} from '@deck.gl/layers';\nimport {Geometry, Model} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nconst DEFAULT_POS = [-1, -1, 0, -1, 1, 0, 1, 1, 0, 1, -1, 0];\nexport default class ScatterplotIconLayer extends ScatterplotLayer {\n  _getModel(gl) {\n    // use default scatterplot shaders\n    const shaders = this.getShaders();\n\n    const {iconGeometry} = this.props;\n\n    const geometry = iconGeometry\n      ? new Geometry({\n          drawMode: GL.TRIANGLES,\n          attributes: {\n            positions: new Float32Array(iconGeometry)\n          }\n        })\n      : new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            positions: new Float32Array(DEFAULT_POS)\n          }\n        });\n\n    return new Model(gl, {\n      ...shaders,\n      id: this.props.id,\n      geometry,\n      isInstanced: true,\n      shaderCache: this.context.shaderCache\n    });\n  }\n}\n\nScatterplotIconLayer.layerName = 'ScatterplotIconLayer';\n"]},"metadata":{},"sourceType":"script"}