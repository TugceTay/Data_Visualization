{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport { resolvePath } from '@loaders.gl/loader-utils';\nimport assert from '../utils/assert';\nexport function generateUrl(getUrl, options, urlOptions) {\n  var url = getUrl;\n  if (typeof getUrl === 'function') {\n    url = getUrl(_objectSpread(_objectSpread({}, options), urlOptions));\n  }\n  assert(typeof url === 'string');\n  var baseUrl = options.baseUrl;\n  if (baseUrl) {\n    url = baseUrl[baseUrl.length - 1] === '/' ? \"\".concat(baseUrl).concat(url) : \"\".concat(baseUrl, \"/\").concat(url);\n  }\n  return resolvePath(url);\n}","map":{"version":3,"sources":["../../../../src/lib/texture-api/generate-url.js"],"names":["resolvePath","assert","generateUrl","getUrl","options","urlOptions","url","baseUrl","length"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAQA,WAAR,QAA0B,0BAA1B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAGA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,OAA7B,EAAsCC,UAAtC,EAAkD;EAEvD,IAAIC,GAAG,GAAGH,MAAV;EACA,IAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC;IAChCG,GAAG,GAAGH,MAAM,CAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EAAKC,OAAL,CAAA,EAAiBC,UAAjB,CAAA,CAAZC;EACD;EACDL,MAAM,CAAC,OAAOK,GAAP,KAAe,QAAhB,CAANL;EANuD,IAShDM,OATgD,GASrCH,OATqC,CAShDG,OATgD;EAUvD,IAAIA,OAAJ,EAAa;IACXD,GAAG,GAAGC,OAAO,CAACA,OAAO,CAACC,MAARD,GAAiB,CAAlB,CAAPA,KAAgC,GAAhCA,GAAAA,EAAAA,CAAAA,MAAAA,CAAyCA,OAAzCA,CAAAA,CAAAA,MAAAA,CAAmDD,GAAnDC,CAAAA,GAAAA,EAAAA,CAAAA,MAAAA,CAA8DA,OAA9DA,EAAAA,GAAAA,CAAAA,CAAAA,MAAAA,CAAyED,GAAzEC,CAAND;EACD;EAED,OAAON,WAAW,CAACM,GAAD,CAAlB;AACD","sourcesContent":["import {resolvePath} from '@loaders.gl/loader-utils';\nimport assert from '../utils/assert';\n\n// Generate a url by calling getUrl with mix of options, applying options.baseUrl\nexport function generateUrl(getUrl, options, urlOptions) {\n  // Get url\n  let url = getUrl;\n  if (typeof getUrl === 'function') {\n    url = getUrl({...options, ...urlOptions});\n  }\n  assert(typeof url === 'string');\n\n  // Apply options.baseUrl\n  const {baseUrl} = options;\n  if (baseUrl) {\n    url = baseUrl[baseUrl.length - 1] === '/' ? `${baseUrl}${url}` : `${baseUrl}/${url}`;\n  }\n\n  return resolvePath(url);\n}\n"]},"metadata":{},"sourceType":"module"}