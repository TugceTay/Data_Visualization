{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Stat from './stat';\nexport default class Stats {\n  constructor(options) {\n    _defineProperty(this, \"id\", void 0);\n    _defineProperty(this, \"stats\", {});\n    this.id = options.id;\n    this.stats = {};\n    this._initializeStats(options.stats);\n    Object.seal(this);\n  }\n  get(name) {\n    let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'count';\n    return this._getOrCreate({\n      name,\n      type\n    });\n  }\n  get size() {\n    return Object.keys(this.stats).length;\n  }\n  reset() {\n    for (const key in this.stats) {\n      this.stats[key].reset();\n    }\n    return this;\n  }\n  forEach(fn) {\n    for (const key in this.stats) {\n      fn(this.stats[key]);\n    }\n  }\n  getTable() {\n    const table = {};\n    this.forEach(stat => {\n      table[stat.name] = {\n        time: stat.time || 0,\n        count: stat.count || 0,\n        average: stat.getAverageTime() || 0,\n        hz: stat.getHz() || 0\n      };\n    });\n    return table;\n  }\n  _initializeStats() {\n    let stats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    stats.forEach(stat => this._getOrCreate(stat));\n  }\n  _getOrCreate(stat) {\n    if (!stat || !stat.name) {\n      return null;\n    }\n    const {\n      name,\n      type\n    } = stat;\n    if (!this.stats[name]) {\n      if (stat instanceof Stat) {\n        this.stats[name] = stat;\n      } else {\n        this.stats[name] = new Stat(name, type);\n      }\n    }\n    return this.stats[name];\n  }\n}","map":{"version":3,"sources":["../../../src/lib/stats.ts"],"names":["Stat","Stats","constructor","options","id","stats","_initializeStats","Object","seal","get","name","type","_getOrCreate","size","keys","length","reset","key","forEach","fn","getTable","table","stat","time","count","average","getAverageTime","hz","getHz"],"mappings":"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","sourcesContent":["import Stat from './stat';\n\n/** A \"bag\" of `Stat` objects, can be visualized using `StatsWidget` */\nexport default class Stats {\n  readonly id: string;\n  readonly stats: Record<string, Stat> = {};\n\n  constructor(options: {id: string; stats?: Stats | Stat[] | {name: string; type?: string}[]}) {\n    this.id = options.id;\n    this.stats = {};\n\n    this._initializeStats(options.stats);\n\n    Object.seal(this);\n  }\n\n  /** Acquire a stat. Create if it doesn't exist. */\n  get(name: string, type: string = 'count'): Stat {\n    return this._getOrCreate({name, type});\n  }\n\n  get size(): number {\n    return Object.keys(this.stats).length;\n  }\n\n  /** Reset all stats */\n  reset(): this {\n    for (const key in this.stats) {\n      this.stats[key].reset();\n    }\n\n    return this;\n  }\n\n  forEach(fn: (stat: Stat) => void): void {\n    for (const key in this.stats) {\n      fn(this.stats[key]);\n    }\n  }\n\n  getTable(): Record<\n    string,\n    {\n      time: number;\n      count: number;\n      average: number;\n      hz: number;\n    }\n    > {\n    const table = {};\n    this.forEach(stat => {\n      table[stat.name] = {\n        time: stat.time || 0,\n        count: stat.count || 0,\n        average: stat.getAverageTime() || 0,\n        hz: stat.getHz() || 0\n      };\n    });\n\n    return table;\n  }\n\n  _initializeStats(stats: Stats | Stat[] | {name: string; type?: string}[] = []): void {\n    stats.forEach(stat => this._getOrCreate(stat));\n  }\n\n  _getOrCreate(stat): Stat {\n    if (!stat || !stat.name) {\n      return null;\n    }\n\n    const {name, type} = stat;\n    if (!this.stats[name]) {\n      if (stat instanceof Stat) {\n        this.stats[name] = stat;\n      } else {\n        this.stats[name] = new Stat(name, type);\n      }\n    }\n    return this.stats[name];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}