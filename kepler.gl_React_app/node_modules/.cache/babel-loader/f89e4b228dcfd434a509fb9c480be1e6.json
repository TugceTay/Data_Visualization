{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _mjolnir = require(\"mjolnir.js\");\nvar _reactMapGl = require(\"react-map-gl\");\nvar _uuid = _interopRequireDefault(require(\"uuid\"));\nvar _feature2 = _interopRequireDefault(require(\"./feature\"));\nvar _style = require(\"./style\");\nvar _constants = require(\"./constants\");\nvar _utils = require(\"./utils\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n  return target;\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar defaultProps = {\n  mode: _constants.MODES.READ_ONLY,\n  clickRadius: 0,\n  getEditHandleStyle: _style.getEditHandleStyle,\n  getFeatureStyle: _style.getFeatureStyle,\n  getFeatureShape: 'circle',\n  getEditHandleShape: 'circle',\n  onSelect: function onSelect() {}\n};\nvar UNCOMMITTED_ID = 'uncommitted';\nvar Editor = /*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Editor, _PureComponent);\n  function Editor(props) {\n    var _this;\n    _classCallCheck(this, Editor);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Editor).call(this, props));\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_containerRef\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_events\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_context\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_update\", function (features) {\n      if (features) {\n        _this.props.onUpdate(features.map(function (f) {\n          return f.toFeature();\n        }));\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_updateRectangle\", function (feature, options) {\n      var vertexIndex = options.vertexIndex,\n        lngLat = options.lngLat;\n      /*\n      *   p0.x, p0.y   ----------  diagonal.x, p0.y\n      *       |                             |\n      *       |                             |\n      *   p0.x, diagonal.y ----- diagonal.x, diagonal.y\n      */\n\n      var diagonal = vertexIndex;\n      var p0 = feature.points[(diagonal + 2) % 4];\n      feature.replacePoint(diagonal, [lngLat[0], lngLat[1]]);\n      feature.replacePoint((diagonal + 1) % 4, [lngLat[0], p0[1]]);\n      feature.replacePoint((diagonal + 3) % 4, [p0[0], lngLat[1]]);\n      _this._update(_this.state.features);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_updateFeature\", function (feature, mode, options) {\n      switch (mode) {\n        case 'vertex':\n          if (feature.renderType === _constants.RENDER_TYPE.RECTANGLE) {\n            _this._updateRectangle(feature, options);\n          } else {\n            feature.replacePoint(options.vertexIndex, [options.lngLat[0], options.lngLat[1]]);\n            _this._update(_this.state.features);\n          }\n          break;\n        case 'feature':\n          var dx = options.dx,\n            dy = options.dy;\n          feature.points = feature.points.map(function (lngLat) {\n            var pixels = _this._project(lngLat);\n            if (pixels) {\n              pixels[0] += dx;\n              pixels[1] += dy;\n              return _this._unproject(pixels);\n            }\n            return null;\n          }).filter(Boolean);\n          _this._update(_this.state.features);\n          break;\n        case 'Rectangle':\n          _this._updateRectangle(feature, options);\n          break;\n        default:\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_addPoint\", function (x, y, feature) {\n      var isNew = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      feature = feature || _this._getSelectedFeature();\n      if (!feature) {\n        return;\n      }\n      var lngLat = _this._unproject([x, y]);\n      if (!lngLat) {\n        return;\n      }\n      feature.addPoint([lngLat[0], lngLat[1]]);\n      var features = _this.state.features || [];\n      if (isNew) {\n        features.push(feature);\n      }\n      var validPath = feature.points && feature.points.length >= 2;\n      var _this$props = _this.props,\n        mode = _this$props.mode,\n        onSelect = _this$props.onSelect;\n      if (mode === _constants.MODES.DRAW_POINT || mode === _constants.MODES.DRAW_PATH && validPath) {\n        _this._update(features);\n        onSelect({\n          selectedFeatureId: feature && feature.id\n        });\n      } else {\n        _this.setState({\n          features: _toConsumableArray(features),\n          selectedFeatureId: feature && feature.id\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_clearCache\", function () {\n      _this.setState({\n        selectedFeatureId: null,\n        uncommittedLngLat: null,\n        hoveredFeatureId: null,\n        hoveredLngLat: null,\n        hoveredVertexIndex: -1,\n        draggingVertexIndex: -1,\n        startDragPos: null,\n        isDragging: false,\n        didDrag: false\n      });\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_closePath\", function () {\n      var selectedFeature = _this._getSelectedFeature();\n      if (selectedFeature) {\n        selectedFeature.closePath();\n        _this._update(_this.state.features);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_addFeature\", function (mode, point) {\n      var type = _constants.MODE_TO_GEOJSON_TYPE[mode];\n      var renderType = _constants.MODE_TO_RENDER_TYPE[mode];\n      var feature = new _feature2.default({\n        id: (0, _uuid.default)(),\n        type: type,\n        renderType: renderType\n      });\n      _this._addPoint(point.x, point.y, feature, true);\n      if (mode === _constants.MODES.DRAW_RECTANGLE) {\n        for (var i = 0; i < 3; i++) {\n          _this._addPoint(point.x, point.y, feature, false);\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_onEvent\", function (handler, evt, stopPropagation) {\n      var mode = _this.props.mode;\n      if (mode === _constants.MODES.READ_ONLY) {\n        return;\n      }\n      for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n        args[_key - 3] = arguments[_key];\n      }\n      handler.apply(void 0, [evt].concat(args));\n      if (stopPropagation) {\n        evt.stopImmediatePropagation();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_onMouseUp\", function (evt) {\n      _this.setState({\n        isDragging: false,\n        didDrag: false\n      });\n      var draggingVertexIndex = _this.state.draggingVertexIndex;\n      if (Number(draggingVertexIndex) >= 0) {\n        _this.setState({\n          draggingVertexIndex: -1\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_onMouseDown\", function (evt) {\n      var _this$_getEventPositi = _this._getEventPosition(evt),\n        x = _this$_getEventPositi.x,\n        y = _this$_getEventPositi.y;\n      var attributes = (0, _utils.parseElemDataAttributes)(evt.target); // click segment\n\n      if (attributes && attributes.type === _constants.ELEMENT_TYPE.VERTEX) {\n        var vertexIndex = attributes.vertexIndex;\n        _this.setState({\n          draggingVertexIndex: vertexIndex,\n          startDragPos: {\n            x: x,\n            y: y\n          },\n          isDragging: true\n        }); // click selected feature\n      } else if (_this._matchesFeature(attributes, _this._getSelectedFeature())) {\n        _this.setState({\n          startDragPos: {\n            x: x,\n            y: y\n          },\n          isDragging: true\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_onMouseMove\", function (evt) {\n      var attributes = (0, _utils.parseElemDataAttributes)(evt.target) || {};\n      var vertexIndex = attributes.vertexIndex,\n        featureIndex = attributes.featureIndex,\n        type = attributes.type;\n      var _this$state = _this.state,\n        startDragPos = _this$state.startDragPos,\n        isDragging = _this$state.isDragging,\n        didDrag = _this$state.didDrag;\n      var mode = _this.props.mode;\n      var _this$_getEventPositi2 = _this._getEventPosition(evt),\n        x = _this$_getEventPositi2.x,\n        y = _this$_getEventPositi2.y;\n      var lngLat = _this._unproject([x, y]);\n      if (isDragging && !didDrag && startDragPos) {\n        var dx = x - startDragPos.x;\n        var dy = y - startDragPos.y;\n        if (dx * dx + dy * dy > 5) {\n          _this.setState({\n            didDrag: true\n          });\n        }\n      }\n      var selectedFeature = _this._getSelectedFeature();\n      var isDrawing = _constants.DRAWING_MODES.indexOf(mode) !== -1;\n      var isEditing = mode === _constants.MODES.EDIT_VERTEX;\n      if (selectedFeature) {\n        // dragging\n        if (didDrag && startDragPos) {\n          var draggingVertexIndex = Number(_this.state.draggingVertexIndex);\n          if (draggingVertexIndex >= 0) {\n            // dragging vertex\n            _this._updateFeature(selectedFeature, 'vertex', {\n              vertexIndex: draggingVertexIndex,\n              lngLat: lngLat\n            });\n          } else {\n            // dragging feature\n            var _dx = x - startDragPos.x;\n            var _dy = y - startDragPos.y;\n            _this.setState({\n              startDragPos: {\n                x: x,\n                y: y\n              }\n            });\n            _this._updateFeature(selectedFeature, 'feature', {\n              dx: _dx,\n              dy: _dy\n            });\n          }\n        } else if (mode === _constants.MODES.DRAW_RECTANGLE) {\n          // drawing rectangle\n          _this._updateFeature(selectedFeature, 'Rectangle', {\n            vertexIndex: 2,\n            lngLat: lngLat\n          });\n        } else if (isDrawing) {\n          // drawing other shapes\n          _this.setState({\n            uncommittedLngLat: lngLat\n          });\n        } else if (isEditing) {\n          if ((selectedFeature.renderType === _constants.RENDER_TYPE.LINE_STRING || selectedFeature.renderType === _constants.RENDER_TYPE.POLYGON) && type === _constants.ELEMENT_TYPE.SEGMENT) {\n            // segmentId is start vertexIndex\n            var uncommittedLngLat = null;\n            if (lngLat && typeof vertexIndex === 'number') {\n              uncommittedLngLat = _this._getClosestPositionOnSegment(vertexIndex, lngLat, selectedFeature);\n            }\n            _this.setState({\n              uncommittedLngLat: uncommittedLngLat\n            });\n          } else {\n            _this.setState({\n              uncommittedLngLat: null\n            });\n          }\n        }\n      }\n      var _this$state2 = _this.state,\n        features = _this$state2.features,\n        selectedFeatureId = _this$state2.selectedFeatureId;\n      if (selectedFeatureId && type === _constants.ELEMENT_TYPE.VERTEX && typeof featureIndex === 'number') {\n        var feature = features && features[featureIndex];\n        if (selectedFeatureId === (feature && feature.id)) {\n          _this.setState({\n            hoveredVertexIndex: vertexIndex\n          });\n        }\n      } else if (type !== _constants.ELEMENT_TYPE.VERTEX) {\n        _this.setState({\n          hoveredVertexIndex: null\n        });\n      }\n      if (type === _constants.ELEMENT_TYPE.FEATURE && typeof featureIndex === 'number') {\n        var _feature = features && features[featureIndex];\n        _this.setState({\n          hoveredFeatureId: _feature && _feature.id\n        });\n      } else {\n        _this.setState({\n          hoveredFeatureId: null\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_onClickFeature\", function (evt, attributes) {\n      var featureIndex = attributes.featureIndex;\n      var features = _this.state.features;\n      var selectedFeature = features && typeof featureIndex === 'number' && features[featureIndex];\n      if (selectedFeature) {\n        _this.props.onSelect({\n          selectedFeatureId: selectedFeature.id,\n          sourceEvent: evt\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_onClickVertex\", function (evt, attributes) {\n      var mode = _this.props.mode;\n      var operation = attributes.operation;\n      if (operation === _constants.OPERATIONS.INTERSECT || operation === _constants.OPERATIONS.SET && mode === _constants.MODES.DRAW_RECTANGLE) {\n        _this._closePath();\n        _this._clearCache();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_onClickSegment\", function (evt, attributes) {\n      var feature = _this._getSelectedFeature();\n      if (feature && (feature.renderType === _constants.RENDER_TYPE.POLYGON || feature.renderType === _constants.RENDER_TYPE.LINE_STRING) && attributes) {\n        var vertexIndex = attributes.vertexIndex;\n        var uncommittedLngLat = _this.state.uncommittedLngLat;\n        var lngLat = uncommittedLngLat;\n        if (!lngLat && typeof vertexIndex === 'number') {\n          var _this$_getEventPositi3 = _this._getEventPosition(evt),\n            x = _this$_getEventPositi3.x,\n            y = _this$_getEventPositi3.y;\n          lngLat = _this._unproject([x, y]);\n          lngLat = _this._getClosestPositionOnSegment(vertexIndex, lngLat, feature);\n        }\n        if (lngLat) {\n          var insertPosition = (vertexIndex + 1) % feature.points.length;\n          feature.insertPoint(lngLat, insertPosition);\n          _this._update(_this.state.features);\n        }\n        _this.setState({\n          uncommittedLngLat: null,\n          hoveredLngLat: null\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_onClick\", function (evt) {\n      var mode = _this.props.mode;\n      var attributes = (0, _utils.parseElemDataAttributes)(evt.target);\n      if (attributes && attributes.type === _constants.ELEMENT_TYPE.VERTEX) {\n        _this._onClickVertex(evt, attributes);\n        return;\n      }\n      if (mode === _constants.MODES.EDIT_VERTEX && attributes && attributes.type === _constants.ELEMENT_TYPE.SEGMENT) {\n        _this._onClickSegment(evt, attributes);\n        return;\n      }\n      if ((mode === _constants.MODES.SELECT_FEATURE || mode === _constants.MODES.EDIT_VERTEX) && attributes && attributes.type === _constants.ELEMENT_TYPE.FEATURE) {\n        _this._onClickFeature(evt, attributes);\n        return;\n      }\n      var selectedFeature = _this._getSelectedFeature();\n      var _this$_getEventPositi4 = _this._getEventPosition(evt),\n        x = _this$_getEventPositi4.x,\n        y = _this$_getEventPositi4.y;\n      switch (mode) {\n        case _constants.MODES.EDIT_VERTEX:\n          if (selectedFeature) {\n            _this.props.onSelect({\n              selectedFeatureId: null,\n              sourceEvent: evt\n            });\n          }\n          break;\n        case _constants.MODES.DRAW_POINT:\n          _this._addFeature(mode, {\n            x: x,\n            y: y\n          });\n          break;\n        case _constants.MODES.DRAW_PATH:\n        case _constants.MODES.DRAW_POLYGON:\n          if (selectedFeature && selectedFeature.isClosed) {\n            // clicked outside\n            _this._clearCache();\n          } else if (selectedFeature) {\n            _this._addPoint(x, y, selectedFeature);\n          } else {\n            _this._addFeature(mode, {\n              x: x,\n              y: y\n            });\n          }\n          break;\n        case _constants.MODES.DRAW_RECTANGLE:\n          if (selectedFeature && selectedFeature.isClosed) {\n            // clicked outside\n            _this._clearCache();\n            _this.props.onSelect({\n              selectedFeatureId: null,\n              sourceEvent: evt\n            });\n          } else {\n            _this._addFeature(mode, {\n              x: x,\n              y: y\n            });\n          }\n          break;\n        default:\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_onPan\", function (evt) {\n      var attributes = (0, _utils.parseElemDataAttributes)(evt.target);\n      var type = attributes && attributes.type;\n      if (type === _constants.ELEMENT_TYPE.VERTEX || type === _constants.ELEMENT_TYPE.SEGMENT || _this.state.isDragging || _this.state.uncommittedLngLat !== null) {\n        evt.stopImmediatePropagation();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_project\", function (pt) {\n      return _this._context && _this._context.viewport && _this._context.viewport.project(pt);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_unproject\", function (pt) {\n      return _this._context && _this._context.viewport && _this._context.viewport.unproject(pt);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_matchesFeature\", function (attributes, feature) {\n      if (!attributes || attributes.type !== _constants.ELEMENT_TYPE.FEATURE || !feature) {\n        return false;\n      }\n      var featureIndex = attributes.featureIndex;\n      var features = _this.props.features;\n      var elemFeature = features && features[featureIndex];\n      return elemFeature && feature.id === elemFeature.id;\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_getClosestPositionOnSegment\", function (vertexIndex, pointLngLat, feature) {\n      var points = feature && feature.points;\n      if (!points || !points.length) {\n        return null;\n      } // segmentId is start vertexIndex\n\n      var startPos = points[vertexIndex];\n      var endPos = points[(vertexIndex + 1) % points.length];\n      return (0, _utils.findClosestPointOnLineSegment)(startPos, endPos, pointLngLat);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_getEventPosition\", function (evt) {\n      var _evt$offsetCenter = evt.offsetCenter,\n        x = _evt$offsetCenter.x,\n        y = _evt$offsetCenter.y;\n      return {\n        x: Number(x),\n        y: Number(y)\n      };\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_getSelectedFeature\", function () {\n      var _this$state3 = _this.state,\n        features = _this$state3.features,\n        selectedFeatureId = _this$state3.selectedFeatureId;\n      return features && features.find(function (f) {\n        return f.id === selectedFeatureId;\n      });\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_getEditHandleState\", function (index, renderState) {\n      var mode = _this.props.mode;\n      var _this$state4 = _this.state,\n        draggingVertexIndex = _this$state4.draggingVertexIndex,\n        hoveredVertexIndex = _this$state4.hoveredVertexIndex;\n      var selectedFeature = _this._getSelectedFeature();\n      var isSelected = index === draggingVertexIndex || selectedFeature && selectedFeature.renderType === _constants.RENDER_TYPE.POINT;\n      var isClosing = mode === _constants.MODES.DRAW_POLYGON && hoveredVertexIndex === 0 && index === -1;\n      if (renderState) {\n        return renderState;\n      }\n      if (isClosing) {\n        return _constants.RENDER_STATE.CLOSING;\n      }\n      if (isSelected) {\n        return _constants.RENDER_STATE.SELECTED;\n      }\n      switch (index) {\n        case hoveredVertexIndex:\n          return _constants.RENDER_STATE.HOVERED;\n        case UNCOMMITTED_ID:\n          return _constants.RENDER_STATE.UNCOMMITTED;\n        default:\n          return _constants.RENDER_STATE.INACTIVE;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_getFeatureRenderState\", function (id, renderState) {\n      var _this$state5 = _this.state,\n        selectedFeatureId = _this$state5.selectedFeatureId,\n        hoveredFeatureId = _this$state5.hoveredFeatureId;\n      if (renderState) {\n        return renderState;\n      }\n      switch (id) {\n        case selectedFeatureId:\n          return _constants.RENDER_STATE.SELECTED;\n        case hoveredFeatureId:\n          return _constants.RENDER_STATE.HOVERED;\n        case UNCOMMITTED_ID:\n          return _constants.RENDER_STATE.UNCOMMITTED;\n        default:\n          return _constants.RENDER_STATE.INACTIVE;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderVertex\", function (position, featureIndex, vertexIndex, operation, style, shape) {\n      /* eslint-enable max-params */\n      var p = _this._project(position);\n      if (!p) {\n        return null;\n      }\n      var clickRadius = _this.props.clickRadius;\n      var elemKey = \"\".concat(_constants.ELEMENT_TYPE.VERTEX, \".\").concat(featureIndex, \".\").concat(vertexIndex, \".\").concat(operation); // first <circle|rect> is to make path easily interacted with\n\n      switch (shape) {\n        case 'circle':\n          return _react.default.createElement(\"g\", {\n            key: elemKey,\n            transform: \"translate(\".concat(p[0], \", \").concat(p[1], \")\")\n          }, _react.default.createElement(\"circle\", {\n            \"data-type\": _constants.ELEMENT_TYPE.VERTEX,\n            \"data-feature-index\": featureIndex,\n            \"data-vertex-index\": vertexIndex,\n            \"data-operation\": operation,\n            key: \"\".concat(elemKey, \".hidden\"),\n            style: _objectSpread({}, style, _style.HIDDEN_CLICKABLE_STYLE, {\n              stroke: 'none'\n            }),\n            cx: 0,\n            cy: 0,\n            r: clickRadius\n          }), _react.default.createElement(\"circle\", {\n            \"data-type\": _constants.ELEMENT_TYPE.VERTEX,\n            \"data-feature-index\": featureIndex,\n            \"data-vertex-index\": vertexIndex,\n            \"data-operation\": operation,\n            key: elemKey,\n            style: style,\n            cx: 0,\n            cy: 0\n          }));\n        case 'rect':\n          return _react.default.createElement(\"g\", {\n            key: \"vertex.\".concat(vertexIndex),\n            transform: \"translate(\".concat(p[0], \", \").concat(p[1], \")\")\n          }, _react.default.createElement(\"rect\", {\n            \"data-type\": _constants.ELEMENT_TYPE.VERTEX,\n            \"data-feature-index\": featureIndex,\n            \"data-vertex-index\": vertexIndex,\n            \"data-operation\": operation,\n            key: \"\".concat(elemKey, \".hidden\"),\n            style: _objectSpread({}, style, _style.HIDDEN_CLICKABLE_STYLE, {\n              width: clickRadius,\n              height: clickRadius\n            })\n          }), _react.default.createElement(\"rect\", {\n            \"data-type\": _constants.ELEMENT_TYPE.VERTEX,\n            \"data-feature-index\": featureIndex,\n            \"data-vertex-index\": vertexIndex,\n            \"data-operation\": operation,\n            key: elemKey,\n            style: style\n          }));\n        default:\n          return null;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderSegment\", function (featureIndex, startVertexId, startPos, endPos) {\n      var style = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n      var clickRadius = _this.props.clickRadius;\n      var projected = _this._getProjectedData([startPos, endPos], _constants.RENDER_TYPE.LINE_STRING);\n      var radius = style.radius,\n        others = _objectWithoutProperties(style, [\"radius\"]);\n      var elemKey = \"\".concat(_constants.ELEMENT_TYPE.SEGMENT, \".\").concat(featureIndex, \".\").concat(startVertexId);\n      return _react.default.createElement(\"g\", {\n        key: elemKey\n      }, _react.default.createElement(\"path\", {\n        \"data-type\": _constants.ELEMENT_TYPE.SEGMENT,\n        \"data-feature-index\": featureIndex,\n        \"data-vertex-index\": startVertexId,\n        key: \"\".concat(elemKey, \".hidden\"),\n        style: _objectSpread({}, others, {\n          strokeWidth: clickRadius || radius,\n          opacity: 0\n        }),\n        d: projected\n      }), _react.default.createElement(\"path\", {\n        \"data-type\": _constants.ELEMENT_TYPE.SEGMENT,\n        \"data-feature-index\": featureIndex,\n        \"data-vertex-index\": startVertexId,\n        key: elemKey,\n        style: others,\n        d: projected\n      }));\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderCommittedStroke\", function (featureIndex, feature, style) {\n      var points = feature.points,\n        isClosed = feature.isClosed,\n        renderType = feature.renderType;\n      if (!points || points.length < 2 || renderType === _constants.RENDER_TYPE.RECTANGLE && !isClosed) {\n        return null;\n      }\n      var segments = [];\n      for (var i = 0; i < points.length - 1; i++) {\n        segments.push(_this._renderSegment(featureIndex, i, points[i], points[i + 1], style));\n      }\n      if (isClosed) {\n        var lastIndex = points.length - 1;\n        segments.push(_this._renderSegment(featureIndex, lastIndex, points[lastIndex], points[0], style));\n      }\n      return _react.default.createElement(\"g\", {\n        key: \"committed group\"\n      }, segments);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderUncommittedStrokes\", function (featureIndex, feature, style) {\n      var points = feature.points,\n        isClosed = feature.isClosed,\n        renderType = feature.renderType;\n      var mode = _this.props.mode;\n      var uncommittedLngLat = _this.state.uncommittedLngLat;\n      var isDrawing = _constants.DRAWING_MODES.find(function (m) {\n        return m === mode;\n      });\n      if (!points || isClosed || !isDrawing) {\n        return null;\n      }\n      var uncommittedSegments = [];\n      if (renderType === _constants.RENDER_TYPE.RECTANGLE) {\n        for (var i = 0; i < points.length - 1; i++) {\n          uncommittedSegments.push(_this._renderSegment(featureIndex, i, points[i], points[i + 1], style));\n        }\n        if (points.length === 4) {\n          uncommittedSegments.push(_this._renderSegment(featureIndex, 3, points[3], points[0], style));\n        }\n      }\n      if (!uncommittedLngLat) {\n        return uncommittedSegments.length ? uncommittedSegments : null;\n      }\n      /* eslint-disable no-inline-comments */\n\n      uncommittedSegments.push(_this._renderSegment(featureIndex, points.length - 1,\n      // id\n      points.slice(-1)[0],\n      // startPos\n      uncommittedLngLat,\n      // endPos\n      style));\n      /* eslint-enable no-inline-comments */\n\n      return uncommittedSegments.filter(Boolean);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderClosingStroke\", function (featureIndex, feature, style) {\n      var points = feature.points,\n        isClosed = feature.isClosed;\n      var mode = _this.props.mode;\n      var uncommittedLngLat = _this.state.uncommittedLngLat;\n      if (uncommittedLngLat && mode === _constants.MODES.DRAW_POLYGON && points.length > 2 && !isClosed) {\n        // from uncommitted position to the first point of the polygon\n        return _this._renderSegment(featureIndex, 'uncommitted-close', uncommittedLngLat, points[0], style);\n      }\n      return null;\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderFill\", function (index, feature, style) {\n      var mode = _this.props.mode;\n      var isDrawing = _constants.DRAWING_MODES.find(function (m) {\n        return m === mode;\n      });\n      var points = feature.points,\n        renderType = feature.renderType,\n        isClosed = feature.isClosed;\n      if (renderType !== _constants.RENDER_TYPE.POLYGON && renderType !== _constants.RENDER_TYPE.RECTANGLE) {\n        return null;\n      }\n      var uncommittedLngLat = _this.state.uncommittedLngLat;\n      var fillPoints = points;\n      if (uncommittedLngLat && isDrawing) {\n        fillPoints = _toConsumableArray(points).concat([uncommittedLngLat]);\n      }\n      var fillPath = _this._getProjectedData(fillPoints, renderType, isClosed);\n      return _react.default.createElement(\"path\", {\n        \"data-type\": _constants.ELEMENT_TYPE.FEATURE,\n        \"data-feature-index\": index,\n        key: \"\".concat(_constants.ELEMENT_TYPE.FEATURE, \".\").concat(index, \".fill\"),\n        style: _objectSpread({}, style, {\n          stroke: 'none'\n        }),\n        d: fillPath\n      });\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderCurrentPath\", function (feature, index) {\n      var points = feature.points,\n        renderType = feature.renderType;\n      if (!points || !points.length || renderType === _constants.RENDER_TYPE.POINT) {\n        return null;\n      }\n      var getFeatureStyle = _this.props.getFeatureStyle;\n      var geoJson = feature.toFeature();\n      var committedStyle = getFeatureStyle({\n        feature: geoJson,\n        state: _constants.RENDER_STATE.SELECTED\n      });\n      var uncommittedStyle = getFeatureStyle({\n        feature: geoJson,\n        state: _constants.RENDER_STATE.UNCOMMITTED\n      });\n      var closingStyle = getFeatureStyle({\n        feature: geoJson,\n        state: _constants.RENDER_STATE.CLOSING\n      });\n      var committedStroke = _this._renderCommittedStroke(index, feature, committedStyle);\n      var uncommittedStrokes = _this._renderUncommittedStrokes(index, feature, uncommittedStyle) || [];\n      var closingStroke = _this._renderClosingStroke(index, feature, closingStyle);\n      var fill = _this._renderFill(index, feature, uncommittedStyle);\n      return [fill, committedStroke].concat(_toConsumableArray(uncommittedStrokes), [closingStroke]).filter(Boolean);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderCommittedVertices\", function (featureIndex, feature, geoJson) {\n      var _this$props2 = _this.props,\n        mode = _this$props2.mode,\n        getEditHandleStyle = _this$props2.getEditHandleStyle,\n        getEditHandleShape = _this$props2.getEditHandleShape;\n      var isClosed = feature.isClosed,\n        points = feature.points;\n      var committedVertices = [];\n      for (var i = 0; i < points.length; i++) {\n        var p = points[i];\n        var operation = _constants.OPERATIONS.SET;\n        var style = getEditHandleStyle({\n          feature: geoJson,\n          index: i,\n          state: _this._getEditHandleState(i)\n        });\n        var shape = typeof getEditHandleShape === 'function' ? getEditHandleShape({\n          feature: geoJson,\n          index: i,\n          state: _this._getEditHandleState(i)\n        }) : getEditHandleShape;\n        if (isClosed) {\n          committedVertices.push(_this._renderVertex(p, featureIndex, i, operation, style, shape));\n        } else {\n          if (mode === _constants.MODES.DRAW_POLYGON && i === 0 && points.length > 2) {\n            operation = _constants.OPERATIONS.INTERSECT;\n          }\n          committedVertices.push(_this._renderVertex(p, featureIndex, i, operation, style, shape));\n        }\n      }\n      return committedVertices;\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderUncommittedVertex\", function (featureIndex, feature, geoJson) {\n      var _this$props3 = _this.props,\n        getEditHandleStyle = _this$props3.getEditHandleStyle,\n        getEditHandleShape = _this$props3.getEditHandleShape;\n      var _this$state6 = _this.state,\n        selectedFeatureId = _this$state6.selectedFeatureId,\n        uncommittedLngLat = _this$state6.uncommittedLngLat;\n      var id = feature.id;\n      var uncommittedVertex = null;\n      if (selectedFeatureId === id && uncommittedLngLat) {\n        var style = getEditHandleStyle({\n          feature: geoJson,\n          index: 'uncommitted',\n          state: _this._getEditHandleState(-1, _constants.RENDER_STATE.UNCOMMITTED)\n        });\n        var shape = typeof getEditHandleShape === 'function' ? getEditHandleShape({\n          feature: geoJson,\n          index: null,\n          state: _this._getEditHandleState(-1)\n        }) : getEditHandleShape;\n        uncommittedVertex = _this._renderVertex(uncommittedLngLat, featureIndex, 'uncommitted', _constants.OPERATIONS.INSERT, _objectSpread({}, style, {\n          pointerEvents: 'none'\n        }), shape);\n      }\n      return uncommittedVertex;\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderCurrentVertices\", function (feature, featureIndex) {\n      var points = feature.points;\n      if (!points || !points.length) {\n        return null;\n      }\n      var geoJson = feature.toFeature();\n      var committedVertices = _this._renderCommittedVertices(featureIndex, feature, geoJson);\n      var uncommittedVertex = _this._renderUncommittedVertex(featureIndex, feature, geoJson);\n      return _react.default.createElement(\"g\", {\n        key: \"edit-handles\"\n      }, committedVertices, uncommittedVertex);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderCurrent\", function () {\n      var features = _this.state.features;\n      var feature = _this._getSelectedFeature();\n      if (!features || !feature || !feature.points) {\n        return null;\n      }\n      var mode = _this.props.mode;\n      var index = features.findIndex(function (f) {\n        return f.id === feature.id;\n      });\n      return _react.default.createElement(\"g\", {\n        key: \"feature current\",\n        style: mode === _constants.MODES.READ_ONLY || mode === _constants.MODES.SELECT_FEATURE ? _constants.STATIC_STYLE : null\n      }, _this._renderCurrentPath(feature, index), _this._renderCurrentVertices(feature, index));\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderFeature\", function (feature, index) {\n      if (feature === _this._getSelectedFeature()) {\n        return null;\n      }\n      var clickRadius = _this.props.clickRadius;\n      var id = feature.id,\n        points = feature.points,\n        renderType = feature.renderType,\n        isClosed = feature.isClosed;\n      if (!points || !points.length) {\n        return null;\n      }\n      var projected = _this._getProjectedData(points, renderType, isClosed);\n      if (!projected) {\n        return null;\n      }\n      var geoJson = feature.toFeature();\n      var renderState = _this._getFeatureRenderState(id);\n      var _this$props4 = _this.props,\n        getFeatureStyle = _this$props4.getFeatureStyle,\n        getFeatureShape = _this$props4.getFeatureShape;\n      var style = getFeatureStyle({\n        feature: geoJson,\n        state: renderState\n      });\n      var shape = typeof getFeatureShape === 'function' ? getFeatureShape({\n        feature: geoJson,\n        state: renderState\n      }) : getFeatureShape;\n      var elemKey = \"\".concat(_constants.ELEMENT_TYPE.FEATURE, \".\").concat(index);\n      switch (renderType) {\n        case _constants.RENDER_TYPE.POINT:\n          if (shape === 'rect') {\n            return _react.default.createElement(\"g\", {\n              key: elemKey,\n              transform: \"translate(\".concat(projected[0][0], \", \").concat(projected[0][1], \")\")\n            }, _react.default.createElement(\"rect\", {\n              \"data-type\": _constants.ELEMENT_TYPE.FEATURE,\n              \"data-feature-index\": index,\n              key: \"\".concat(elemKey, \".hidden\"),\n              style: _objectSpread({}, style, _style.HIDDEN_CLICKABLE_STYLE, {\n                width: clickRadius,\n                height: clickRadius\n              })\n            }), _react.default.createElement(\"rect\", {\n              \"data-type\": _constants.ELEMENT_TYPE.FEATURE,\n              \"data-feature-index\": index,\n              key: elemKey,\n              style: style\n            }));\n          }\n          return _react.default.createElement(\"g\", {\n            key: elemKey,\n            transform: \"translate(\".concat(projected[0][0], \", \").concat(projected[0][1], \")\")\n          }, _react.default.createElement(\"circle\", {\n            \"data-type\": _constants.ELEMENT_TYPE.FEATURE,\n            \"data-feature-index\": index,\n            key: \"\".concat(elemKey, \".hidden\"),\n            style: _objectSpread({}, style, {\n              opacity: 0\n            }),\n            cx: 0,\n            cy: 0,\n            r: clickRadius\n          }), _react.default.createElement(\"circle\", {\n            \"data-type\": _constants.ELEMENT_TYPE.FEATURE,\n            \"data-feature-index\": index,\n            key: \"feature.\".concat(index),\n            style: style,\n            cx: 0,\n            cy: 0\n          }));\n        // first <path> is to make path easily interacted with\n\n        case _constants.RENDER_TYPE.LINE_STRING:\n          return _react.default.createElement(\"g\", {\n            key: elemKey\n          }, _react.default.createElement(\"path\", {\n            \"data-type\": _constants.ELEMENT_TYPE.FEATURE,\n            \"data-feature-index\": index,\n            key: \"\".concat(elemKey, \".hidden\"),\n            style: _objectSpread({}, style, {\n              strokeWidth: clickRadius,\n              opacity: 0\n            }),\n            d: projected\n          }), _react.default.createElement(\"path\", {\n            \"data-type\": _constants.ELEMENT_TYPE.FEATURE,\n            \"data-feature-index\": index,\n            key: elemKey,\n            style: style,\n            d: projected\n          }));\n        case 'Polygon':\n        case 'Rectangle':\n          return _react.default.createElement(\"path\", {\n            \"data-type\": _constants.ELEMENT_TYPE.FEATURE,\n            \"data-feature-index\": index,\n            key: elemKey,\n            style: style,\n            d: projected\n          });\n        default:\n          return null;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderFeatures\", function () {\n      var features = _this.state.features;\n      return features && features.map(_this._renderFeature);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderCanvas\", function () {\n      var _this$state7 = _this.state,\n        selectedFeatureId = _this$state7.selectedFeatureId,\n        features = _this$state7.features;\n      return _react.default.createElement(\"svg\", {\n        key: \"draw-canvas\",\n        width: \"100%\",\n        height: \"100%\"\n      }, features && features.length > 0 && _react.default.createElement(\"g\", {\n        key: \"feature-group\"\n      }, _this._renderFeatures()), selectedFeatureId && _this._renderCurrent());\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderEditor\", function () {\n      var viewport = _this._context && _this._context.viewport || {};\n      var style = _this.props.style;\n      var width = viewport.width,\n        height = viewport.height;\n      return _react.default.createElement(\"div\", {\n        id: \"editor\",\n        style: _objectSpread({\n          width: width,\n          height: height\n        }, style),\n        ref: function ref(_) {\n          _this._containerRef = _;\n        }\n      }, _this._renderCanvas());\n    });\n    _this.state = {\n      features: props.features ? props.features.map(function (f) {\n        return _feature2.default.fromFeature(f);\n      }).filter(Boolean) : null,\n      selectedFeatureId: -1,\n      hoveredFeatureId: null,\n      hoveredLngLat: null,\n      hoveredVertexIndex: -1,\n      // intermediate mouse position when drawing\n      uncommittedLngLat: null,\n      draggingVertexIndex: -1,\n      startDragPos: null,\n      isDragging: false,\n      didDrag: false\n    };\n    _this._containerRef = null;\n    _this._events = {};\n    _this._context = null;\n    return _this;\n  }\n  _createClass(Editor, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.mode && this.props.mode !== _constants.MODES.READ_ONLY) {\n        this._setupEvents();\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.props.mode !== nextProps.mode) {\n        if (!nextProps.mode || nextProps.mode === _constants.MODES.READ_ONLY) {\n          this._removeEvents();\n        }\n        if (!this.props.mode || this.props.mode === _constants.MODES.READ_ONLY) {\n          this._setupEvents();\n        }\n      }\n      if (this.props.mode !== nextProps.mode || this.props.features !== nextProps.features) {\n        this.setState({\n          features: nextProps.features && nextProps.features.map(function (f) {\n            return _feature2.default.fromFeature(f);\n          }).filter(Boolean)\n        });\n      }\n      if (this.props.mode !== nextProps.mode || this.props.selectedFeatureId !== nextProps.selectedFeatureId) {\n        this._clearCache();\n        this.setState({\n          selectedFeatureId: nextProps.selectedFeatureId\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._removeEvents();\n    }\n  }, {\n    key: \"_setupEvents\",\n    /* EVENTS */\n    value: function _setupEvents() {\n      var _this2 = this;\n      var ref = this._containerRef;\n      if (!ref || !this._context || !this._context.eventManager) {\n        return;\n      }\n      this._events = {\n        anyclick: function anyclick(evt) {\n          return _this2._onEvent(_this2._onClick, evt, true);\n        },\n        click: function click(evt) {\n          return evt.stopImmediatePropagation();\n        },\n        pointermove: function pointermove(evt) {\n          return _this2._onEvent(_this2._onMouseMove, evt, true);\n        },\n        pointerdown: function pointerdown(evt) {\n          return _this2._onEvent(_this2._onMouseDown, evt, true);\n        },\n        pointerup: function pointerup(evt) {\n          return _this2._onEvent(_this2._onMouseUp, evt, true);\n        },\n        panmove: function panmove(evt) {\n          return _this2._onEvent(_this2._onPan, evt, false);\n        },\n        panstart: function panstart(evt) {\n          return _this2._onEvent(_this2._onPan, evt, false);\n        },\n        panend: function panend(evt) {\n          return _this2._onEvent(_this2._onPan, evt, false);\n        }\n      };\n      this._context.eventManager.on(this._events, ref);\n    }\n  }, {\n    key: \"_removeEvents\",\n    value: function _removeEvents() {\n      if (!this._context || !this._context.eventManager || !this._events) {\n        return;\n      }\n      this._context.eventManager.off(this._events);\n      this._events = null;\n    }\n  }, {\n    key: \"_getProjectedData\",\n    value: function _getProjectedData(points, renderType) {\n      var _this3 = this;\n      var isClosed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (points.length === 0) {\n        return '';\n      }\n      var projected = points.map(function (p) {\n        return _this3._project(p);\n      });\n      switch (renderType) {\n        case _constants.RENDER_TYPE.POINT:\n          return projected;\n        case _constants.RENDER_TYPE.LINE_STRING:\n        case _constants.RENDER_TYPE.POLYGON:\n        case _constants.RENDER_TYPE.RECTANGLE:\n          var pathString = projected.map(function (p) {\n            return \"\".concat(p[0], \",\").concat(p[1]);\n          }).join('L');\n          return \"M \".concat(pathString, \" \").concat(isClosed ? 'z' : '');\n        default:\n          return null;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n      return _react.default.createElement(_reactMapGl._MapContext.Consumer, null, function (context) {\n        _this4._context = context;\n        var viewport = context && context.viewport;\n        if (!viewport || viewport.height <= 0 || viewport.width <= 0) {\n          return null;\n        }\n        return _this4._renderEditor();\n      });\n    }\n  }]);\n  return Editor;\n}(_react.PureComponent);\nexports.default = Editor;\n_defineProperty(Editor, \"defaultProps\", defaultProps);","map":{"version":3,"sources":["../src/editor.js"],"names":["defaultProps","mode","MODES","READ_ONLY","clickRadius","getEditHandleStyle","defaultGetEditHandleStyle","getFeatureStyle","defaultGetFeatureStyle","getFeatureShape","getEditHandleShape","onSelect","UNCOMMITTED_ID","Editor","PureComponent","props","state","features","map","Feature","fromFeature","f","filter","Boolean","selectedFeatureId","hoveredFeatureId","hoveredLngLat","hoveredVertexIndex","uncommittedLngLat","draggingVertexIndex","startDragPos","isDragging","didDrag","_containerRef","_events","_context","_setupEvents","nextProps","_removeEvents","setState","_clearCache","onUpdate","toFeature","feature","options","vertexIndex","lngLat","diagonal","p0","points","replacePoint","_update","renderType","RENDER_TYPE","RECTANGLE","_updateRectangle","dx","dy","pixels","_project","_unproject","x","y","isNew","_getSelectedFeature","addPoint","push","validPath","length","DRAW_POINT","DRAW_PATH","id","selectedFeature","closePath","point","type","MODE_TO_GEOJSON_TYPE","MODE_TO_RENDER_TYPE","_addPoint","DRAW_RECTANGLE","i","ref","eventManager","anyclick","_onEvent","_onClick","evt","click","stopImmediatePropagation","pointermove","_onMouseMove","pointerdown","_onMouseDown","pointerup","_onMouseUp","panmove","_onPan","panstart","panend","on","off","handler","stopPropagation","args","Number","_getEventPosition","attributes","target","ELEMENT_TYPE","VERTEX","_matchesFeature","featureIndex","isDrawing","DRAWING_MODES","indexOf","isEditing","EDIT_VERTEX","_updateFeature","LINE_STRING","POLYGON","SEGMENT","_getClosestPositionOnSegment","FEATURE","sourceEvent","operation","OPERATIONS","INTERSECT","SET","_closePath","insertPosition","insertPoint","_onClickVertex","_onClickSegment","SELECT_FEATURE","_onClickFeature","_addFeature","DRAW_POLYGON","isClosed","pt","viewport","project","unproject","elemFeature","pointLngLat","startPos","endPos","offsetCenter","projected","p","POINT","pathString","join","find","index","renderState","isSelected","isClosing","RENDER_STATE","CLOSING","SELECTED","HOVERED","UNCOMMITTED","INACTIVE","position","style","shape","elemKey","HIDDEN_CLICKABLE_STYLE","stroke","width","height","startVertexId","_getProjectedData","radius","others","strokeWidth","opacity","segments","_renderSegment","lastIndex","m","uncommittedSegments","slice","fillPoints","fillPath","geoJson","committedStyle","uncommittedStyle","closingStyle","committedStroke","_renderCommittedStroke","uncommittedStrokes","_renderUncommittedStrokes","closingStroke","_renderClosingStroke","fill","_renderFill","committedVertices","_getEditHandleState","_renderVertex","uncommittedVertex","INSERT","pointerEvents","_renderCommittedVertices","_renderUncommittedVertex","findIndex","STATIC_STYLE","_renderCurrentPath","_renderCurrentVertices","_getFeatureRenderState","_renderFeature","_renderFeatures","_renderCurrent","_","_renderCanvas","context","_renderEditor"],"mappings":"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","sourcesContent":["// @flow\nimport React, { PureComponent } from 'react';\nimport { MjolnirEvent } from 'mjolnir.js';\nimport type { Position, Feature as GeoJson } from '@nebula.gl/edit-modes';\nimport { _MapContext as MapContext } from 'react-map-gl';\nimport uuid from 'uuid';\n\nimport Feature from './feature';\nimport type { Id, ScreenCoordinates, Operation, RenderType } from './types';\nimport {\n  getEditHandleStyle as defaultGetEditHandleStyle,\n  getFeatureStyle as defaultGetFeatureStyle,\n  HIDDEN_CLICKABLE_STYLE\n} from './style';\n\nimport {\n  OPERATIONS,\n  MODES,\n  DRAWING_MODES,\n  MODE_TO_GEOJSON_TYPE,\n  MODE_TO_RENDER_TYPE,\n  RENDER_STATE,\n  RENDER_TYPE,\n  STATIC_STYLE,\n  ELEMENT_TYPE\n} from './constants';\nimport { parseElemDataAttributes, findClosestPointOnLineSegment } from './utils';\n\ntype EditorProps = {\n  features: ?Array<GeoJson>,\n  selectedFeatureId: ?Id,\n  mode: string,\n  clickRadius: ?number,\n  style: ?Object,\n\n  onSelect: Function,\n  onUpdate: Function,\n\n  getEditHandleStyle: Function,\n  getFeatureStyle: Function,\n  getFeatureShape: Function | string,\n  getEditHandleShape: Function | string\n};\n\ntype EditorState = {\n  features: ?Array<Feature>,\n  selectedFeatureId: ?Id,\n  uncommittedLngLat: ?Position,\n\n  hoveredFeatureId: ?Id,\n  hoveredLngLat: ?Position,\n  hoveredVertexIndex: ?Id,\n\n  draggingVertexIndex: ?number,\n  startDragPos: ?ScreenCoordinates,\n  isDragging: ?boolean,\n  didDrag: ?boolean\n};\n\nconst defaultProps = {\n  mode: MODES.READ_ONLY,\n  clickRadius: 0,\n  getEditHandleStyle: defaultGetEditHandleStyle,\n  getFeatureStyle: defaultGetFeatureStyle,\n  getFeatureShape: 'circle',\n  getEditHandleShape: 'circle',\n  onSelect: () => {}\n};\n\nconst UNCOMMITTED_ID = 'uncommitted';\n\nexport default class Editor extends PureComponent<EditorProps, EditorState> {\n  static defaultProps = defaultProps;\n\n  constructor(props: EditorProps) {\n    super(props);\n    this.state = {\n      features: props.features\n        ? props.features.map(f => Feature.fromFeature(f)).filter(Boolean)\n        : null,\n\n      selectedFeatureId: -1,\n\n      hoveredFeatureId: null,\n      hoveredLngLat: null,\n      hoveredVertexIndex: -1,\n\n      // intermediate mouse position when drawing\n      uncommittedLngLat: null,\n\n      draggingVertexIndex: -1,\n      startDragPos: null,\n      isDragging: false,\n      didDrag: false\n    };\n\n    this._containerRef = null;\n    this._events = {};\n    this._context = null;\n  }\n\n  componentDidMount() {\n    if (this.props.mode && this.props.mode !== MODES.READ_ONLY) {\n      this._setupEvents();\n    }\n  }\n\n  componentWillReceiveProps(nextProps: EditorProps) {\n    if (this.props.mode !== nextProps.mode) {\n      if (!nextProps.mode || nextProps.mode === MODES.READ_ONLY) {\n        this._removeEvents();\n      }\n      if (!this.props.mode || this.props.mode === MODES.READ_ONLY) {\n        this._setupEvents();\n      }\n    }\n\n    if (this.props.mode !== nextProps.mode || this.props.features !== nextProps.features) {\n      this.setState({\n        features:\n          nextProps.features && nextProps.features.map(f => Feature.fromFeature(f)).filter(Boolean)\n      });\n    }\n\n    if (\n      this.props.mode !== nextProps.mode ||\n      this.props.selectedFeatureId !== nextProps.selectedFeatureId\n    ) {\n      this._clearCache();\n      this.setState({\n        selectedFeatureId: nextProps.selectedFeatureId\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._removeEvents();\n  }\n\n  _containerRef: ?HTMLDivElement;\n  _events: any;\n  _context: ?MapContext;\n\n  /* FEATURE OPERATIONS */\n  _update = (features: ?Array<Feature>) => {\n    if (features) {\n      this.props.onUpdate(features.map(f => f.toFeature()));\n    }\n  };\n\n  _updateRectangle = (feature: Feature, options: any) => {\n    const { vertexIndex, lngLat } = options;\n    /*\n    *   p0.x, p0.y   ----------  diagonal.x, p0.y\n    *       |                             |\n    *       |                             |\n    *   p0.x, diagonal.y ----- diagonal.x, diagonal.y\n    */\n    const diagonal = vertexIndex;\n    const p0 = feature.points[(diagonal + 2) % 4];\n\n    feature.replacePoint(diagonal, [lngLat[0], lngLat[1]]);\n    feature.replacePoint((diagonal + 1) % 4, [lngLat[0], p0[1]]);\n    feature.replacePoint((diagonal + 3) % 4, [p0[0], lngLat[1]]);\n\n    this._update(this.state.features);\n  };\n\n  _updateFeature = (feature: any, mode: string, options: any) => {\n    switch (mode) {\n      case 'vertex':\n        if (feature.renderType === RENDER_TYPE.RECTANGLE) {\n          this._updateRectangle(feature, options);\n        } else {\n          feature.replacePoint(options.vertexIndex, [options.lngLat[0], options.lngLat[1]]);\n          this._update(this.state.features);\n        }\n        break;\n\n      case 'feature':\n        const { dx, dy } = options;\n        feature.points = feature.points\n          .map(lngLat => {\n            const pixels = this._project(lngLat);\n            if (pixels) {\n              pixels[0] += dx;\n              pixels[1] += dy;\n              return this._unproject(pixels);\n            }\n            return null;\n          })\n          .filter(Boolean);\n\n        this._update(this.state.features);\n        break;\n\n      case 'Rectangle':\n        this._updateRectangle(feature, options);\n        break;\n\n      default:\n    }\n  };\n\n  _addPoint = (x: number, y: number, feature: ?Feature, isNew: boolean = false) => {\n    feature = feature || this._getSelectedFeature();\n\n    if (!feature) {\n      return;\n    }\n\n    const lngLat = this._unproject([x, y]);\n    if (!lngLat) {\n      return;\n    }\n\n    feature.addPoint([lngLat[0], lngLat[1]]);\n\n    const features = this.state.features || [];\n    if (isNew) {\n      features.push(feature);\n    }\n\n    const validPath = feature.points && feature.points.length >= 2;\n    const { mode, onSelect } = this.props;\n\n    if (mode === MODES.DRAW_POINT || (mode === MODES.DRAW_PATH && validPath)) {\n      this._update(features);\n      onSelect({ selectedFeatureId: feature && feature.id });\n    } else {\n      this.setState({\n        features: [...features],\n        selectedFeatureId: feature && feature.id\n      });\n    }\n  };\n\n  _clearCache = () => {\n    this.setState({\n      selectedFeatureId: null,\n      uncommittedLngLat: null,\n\n      hoveredFeatureId: null,\n      hoveredLngLat: null,\n      hoveredVertexIndex: -1,\n\n      draggingVertexIndex: -1,\n      startDragPos: null,\n      isDragging: false,\n      didDrag: false\n    });\n  };\n\n  _closePath = () => {\n    const selectedFeature = this._getSelectedFeature();\n    if (selectedFeature) {\n      selectedFeature.closePath();\n      this._update(this.state.features);\n    }\n  };\n\n  _addFeature = (mode: string, point: ScreenCoordinates) => {\n    const type = MODE_TO_GEOJSON_TYPE[mode];\n    const renderType = MODE_TO_RENDER_TYPE[mode];\n\n    const feature = new Feature({\n      id: uuid(),\n      type,\n      renderType\n    });\n\n    this._addPoint(point.x, point.y, feature, true);\n\n    if (mode === MODES.DRAW_RECTANGLE) {\n      for (let i = 0; i < 3; i++) {\n        this._addPoint(point.x, point.y, feature, false);\n      }\n    }\n  };\n\n  /* EVENTS */\n  _setupEvents() {\n    const ref = this._containerRef;\n\n    if (!ref || !this._context || !this._context.eventManager) {\n      return;\n    }\n\n    this._events = {\n      anyclick: evt => this._onEvent(this._onClick, evt, true),\n      click: evt => evt.stopImmediatePropagation(),\n      pointermove: evt => this._onEvent(this._onMouseMove, evt, true),\n      pointerdown: evt => this._onEvent(this._onMouseDown, evt, true),\n      pointerup: evt => this._onEvent(this._onMouseUp, evt, true),\n      panmove: evt => this._onEvent(this._onPan, evt, false),\n      panstart: evt => this._onEvent(this._onPan, evt, false),\n      panend: evt => this._onEvent(this._onPan, evt, false)\n    };\n\n    this._context.eventManager.on(this._events, ref);\n  }\n\n  _removeEvents() {\n    if (!this._context || !this._context.eventManager || !this._events) {\n      return;\n    }\n    this._context.eventManager.off(this._events);\n    this._events = null;\n  }\n\n  _onEvent = (handler: Function, evt: MjolnirEvent, stopPropagation: boolean, ...args: any) => {\n    const { mode } = this.props;\n    if (mode === MODES.READ_ONLY) {\n      return;\n    }\n\n    handler(evt, ...args);\n\n    if (stopPropagation) {\n      evt.stopImmediatePropagation();\n    }\n  };\n\n  _onMouseUp = (evt: MjolnirEvent) => {\n    this.setState({\n      isDragging: false,\n      didDrag: false\n    });\n    const { draggingVertexIndex } = this.state;\n\n    if (Number(draggingVertexIndex) >= 0) {\n      this.setState({\n        draggingVertexIndex: -1\n      });\n    }\n  };\n\n  _onMouseDown = (evt: MjolnirEvent) => {\n    const { x, y } = this._getEventPosition(evt);\n    const attributes = parseElemDataAttributes(evt.target);\n\n    // click segment\n    if (attributes && attributes.type === ELEMENT_TYPE.VERTEX) {\n      const { vertexIndex } = attributes;\n      this.setState({\n        draggingVertexIndex: vertexIndex,\n        startDragPos: { x, y },\n        isDragging: true\n      });\n\n      // click selected feature\n    } else if (this._matchesFeature(attributes, this._getSelectedFeature())) {\n      this.setState({\n        startDragPos: { x, y },\n        isDragging: true\n      });\n    }\n  };\n\n  /* eslint-disable max-depth */\n  _onMouseMove = (evt: MjolnirEvent) => {\n    const attributes = parseElemDataAttributes(evt.target) || {};\n    const { vertexIndex, featureIndex, type } = attributes;\n\n    const { startDragPos, isDragging, didDrag } = this.state;\n    const { mode } = this.props;\n    const { x, y } = this._getEventPosition(evt);\n    const lngLat = this._unproject([x, y]);\n\n    if (isDragging && !didDrag && startDragPos) {\n      const dx = x - startDragPos.x;\n      const dy = y - startDragPos.y;\n      if (dx * dx + dy * dy > 5) {\n        this.setState({ didDrag: true });\n      }\n    }\n\n    const selectedFeature = this._getSelectedFeature();\n    const isDrawing = DRAWING_MODES.indexOf(mode) !== -1;\n    const isEditing = mode === MODES.EDIT_VERTEX;\n\n    if (selectedFeature) {\n      // dragging\n      if (didDrag && startDragPos) {\n        const draggingVertexIndex = Number(this.state.draggingVertexIndex);\n\n        if (draggingVertexIndex >= 0) {\n          // dragging vertex\n          this._updateFeature(selectedFeature, 'vertex', {\n            vertexIndex: draggingVertexIndex,\n            lngLat\n          });\n        } else {\n          // dragging feature\n          const dx = x - startDragPos.x;\n          const dy = y - startDragPos.y;\n          this.setState({ startDragPos: { x, y } });\n\n          this._updateFeature(selectedFeature, 'feature', { dx, dy });\n        }\n      } else if (mode === MODES.DRAW_RECTANGLE) {\n        // drawing rectangle\n        this._updateFeature(selectedFeature, 'Rectangle', { vertexIndex: 2, lngLat });\n      } else if (isDrawing) {\n        // drawing other shapes\n        this.setState({ uncommittedLngLat: lngLat });\n      } else if (isEditing) {\n        if (\n          (selectedFeature.renderType === RENDER_TYPE.LINE_STRING ||\n            selectedFeature.renderType === RENDER_TYPE.POLYGON) &&\n          type === ELEMENT_TYPE.SEGMENT\n        ) {\n          // segmentId is start vertexIndex\n          let uncommittedLngLat = null;\n          if (lngLat && typeof vertexIndex === 'number') {\n            uncommittedLngLat = this._getClosestPositionOnSegment(\n              vertexIndex,\n              lngLat,\n              selectedFeature\n            );\n          }\n\n          this.setState({\n            uncommittedLngLat\n          });\n        } else {\n          this.setState({\n            uncommittedLngLat: null\n          });\n        }\n      }\n    }\n\n    const { features, selectedFeatureId } = this.state;\n    if (selectedFeatureId && type === ELEMENT_TYPE.VERTEX && typeof featureIndex === 'number') {\n      const feature = features && features[featureIndex];\n      if (selectedFeatureId === (feature && feature.id)) {\n        this.setState({\n          hoveredVertexIndex: vertexIndex\n        });\n      }\n    } else if (type !== ELEMENT_TYPE.VERTEX) {\n      this.setState({\n        hoveredVertexIndex: null\n      });\n    }\n\n    if (type === ELEMENT_TYPE.FEATURE && typeof featureIndex === 'number') {\n      const feature = features && features[featureIndex];\n      this.setState({\n        hoveredFeatureId: feature && feature.id\n      });\n    } else {\n      this.setState({\n        hoveredFeatureId: null\n      });\n    }\n  };\n  /* eslint-enable max-depth */\n\n  _onClickFeature = (evt: MjolnirEvent, attributes: any) => {\n    const { featureIndex } = attributes;\n    const { features } = this.state;\n    const selectedFeature = features && typeof featureIndex === 'number' && features[featureIndex];\n\n    if (selectedFeature) {\n      this.props.onSelect({\n        selectedFeatureId: selectedFeature.id,\n        sourceEvent: evt\n      });\n    }\n  };\n\n  _onClickVertex = (evt: MjolnirEvent, attributes: any) => {\n    const { mode } = this.props;\n    const operation = attributes.operation;\n    if (\n      operation === OPERATIONS.INTERSECT ||\n      (operation === OPERATIONS.SET && mode === MODES.DRAW_RECTANGLE)\n    ) {\n      this._closePath();\n      this._clearCache();\n    }\n  };\n\n  _onClickSegment = (evt: MjolnirEvent, attributes: any) => {\n    const feature = this._getSelectedFeature();\n\n    if (\n      feature &&\n      (feature.renderType === RENDER_TYPE.POLYGON ||\n        feature.renderType === RENDER_TYPE.LINE_STRING) &&\n      attributes\n    ) {\n      const { vertexIndex } = attributes;\n\n      const { uncommittedLngLat } = this.state;\n\n      let lngLat = uncommittedLngLat;\n      if (!lngLat && typeof vertexIndex === 'number') {\n        const { x, y } = this._getEventPosition(evt);\n        lngLat = this._unproject([x, y]);\n        lngLat = this._getClosestPositionOnSegment(vertexIndex, lngLat, feature);\n      }\n\n      if (lngLat) {\n        const insertPosition = (vertexIndex + 1) % feature.points.length;\n        feature.insertPoint(lngLat, insertPosition);\n        this._update(this.state.features);\n      }\n\n      this.setState({\n        uncommittedLngLat: null,\n        hoveredLngLat: null\n      });\n    }\n  };\n\n  _onClick = (evt: MjolnirEvent) => {\n    const { mode } = this.props;\n    const attributes = parseElemDataAttributes(evt.target);\n\n    if (attributes && attributes.type === ELEMENT_TYPE.VERTEX) {\n      this._onClickVertex(evt, attributes);\n      return;\n    }\n\n    if (mode === MODES.EDIT_VERTEX && attributes && attributes.type === ELEMENT_TYPE.SEGMENT) {\n      this._onClickSegment(evt, attributes);\n      return;\n    }\n\n    if (\n      (mode === MODES.SELECT_FEATURE || mode === MODES.EDIT_VERTEX) &&\n      attributes &&\n      attributes.type === ELEMENT_TYPE.FEATURE\n    ) {\n      this._onClickFeature(evt, attributes);\n      return;\n    }\n\n    const selectedFeature = this._getSelectedFeature();\n    const { x, y } = this._getEventPosition(evt);\n\n    switch (mode) {\n      case MODES.EDIT_VERTEX:\n        if (selectedFeature) {\n          this.props.onSelect({\n            selectedFeatureId: null,\n            sourceEvent: evt\n          });\n        }\n        break;\n\n      case MODES.DRAW_POINT:\n        this._addFeature(mode, { x, y });\n        break;\n\n      case MODES.DRAW_PATH:\n      case MODES.DRAW_POLYGON:\n        if (selectedFeature && selectedFeature.isClosed) {\n          // clicked outside\n          this._clearCache();\n        } else if (selectedFeature) {\n          this._addPoint(x, y, selectedFeature);\n        } else {\n          this._addFeature(mode, { x, y });\n        }\n        break;\n\n      case MODES.DRAW_RECTANGLE:\n        if (selectedFeature && selectedFeature.isClosed) {\n          // clicked outside\n          this._clearCache();\n          this.props.onSelect({\n            selectedFeatureId: null,\n            sourceEvent: evt\n          });\n        } else {\n          this._addFeature(mode, { x, y });\n        }\n\n        break;\n\n      default:\n    }\n  };\n\n  // don't forward pan events to the underlying map when:\n  // - the pan target is a vertex/line/the currently selected feature\n  // - the user is dragging something around\n  // - there is currently an uncommitted position\n  // (i.e. the user is creating a feature/vertex/line)\n  _onPan = (evt: MjolnirEvent) => {\n    const attributes = parseElemDataAttributes(evt.target);\n    const type = attributes && attributes.type;\n    if (\n      type === ELEMENT_TYPE.VERTEX ||\n      type === ELEMENT_TYPE.SEGMENT ||\n      this.state.isDragging ||\n      this.state.uncommittedLngLat !== null\n    ) {\n      evt.stopImmediatePropagation();\n    }\n  };\n\n  /* HELPERS */\n  // lngLat to pixels\n  _project = (pt: Position) => {\n    return this._context && this._context.viewport && this._context.viewport.project(pt);\n  };\n\n  // pixels to lngLat\n  _unproject = (pt: Position) => {\n    return this._context && this._context.viewport && this._context.viewport.unproject(pt);\n  };\n\n  _matchesFeature = (attributes: any, feature: ?Feature) => {\n    if (!attributes || attributes.type !== ELEMENT_TYPE.FEATURE || !feature) {\n      return false;\n    }\n\n    const { featureIndex } = attributes;\n    const { features } = this.props;\n    const elemFeature = features && features[featureIndex];\n    return elemFeature && feature.id === elemFeature.id;\n  };\n\n  _getClosestPositionOnSegment = (vertexIndex: number, pointLngLat: Position, feature: Feature) => {\n    const points = feature && feature.points;\n    if (!points || !points.length) {\n      return null;\n    }\n\n    // segmentId is start vertexIndex\n    const startPos = points[vertexIndex];\n    const endPos = points[(vertexIndex + 1) % points.length];\n    return findClosestPointOnLineSegment(startPos, endPos, pointLngLat);\n  };\n\n  _getEventPosition = (evt: MjolnirEvent): { x: number, y: number } => {\n    const {\n      offsetCenter: { x, y }\n    } = evt;\n    return { x: Number(x), y: Number(y) };\n  };\n\n  _getProjectedData(points: any, renderType: ?RenderType | string, isClosed: ?boolean = false) {\n    if (points.length === 0) {\n      return '';\n    }\n\n    const projected = points.map(p => this._project(p));\n    switch (renderType) {\n      case RENDER_TYPE.POINT:\n        return projected;\n      case RENDER_TYPE.LINE_STRING:\n      case RENDER_TYPE.POLYGON:\n      case RENDER_TYPE.RECTANGLE:\n        const pathString = projected\n          .map(p => {\n            return `${p[0]},${p[1]}`;\n          })\n          .join('L');\n        return `M ${pathString} ${isClosed ? 'z' : ''}`;\n      default:\n        return null;\n    }\n  }\n\n  _getSelectedFeature = (): ?Feature => {\n    const { features, selectedFeatureId } = this.state;\n    return features && features.find(f => f.id === selectedFeatureId);\n  };\n\n  _getEditHandleState = (index: number, renderState: ?string) => {\n    const { mode } = this.props;\n    const { draggingVertexIndex, hoveredVertexIndex } = this.state;\n    const selectedFeature = this._getSelectedFeature();\n    const isSelected =\n      index === draggingVertexIndex ||\n      (selectedFeature && selectedFeature.renderType === RENDER_TYPE.POINT);\n    const isClosing = mode === MODES.DRAW_POLYGON && hoveredVertexIndex === 0 && index === -1;\n\n    if (renderState) {\n      return renderState;\n    }\n\n    if (isClosing) {\n      return RENDER_STATE.CLOSING;\n    }\n\n    if (isSelected) {\n      return RENDER_STATE.SELECTED;\n    }\n\n    switch (index) {\n      case hoveredVertexIndex:\n        return RENDER_STATE.HOVERED;\n      case UNCOMMITTED_ID:\n        return RENDER_STATE.UNCOMMITTED;\n      default:\n        return RENDER_STATE.INACTIVE;\n    }\n  };\n\n  _getFeatureRenderState = (id: Id, renderState: ?string) => {\n    const { selectedFeatureId, hoveredFeatureId } = this.state;\n    if (renderState) {\n      return renderState;\n    }\n    switch (id) {\n      case selectedFeatureId:\n        return RENDER_STATE.SELECTED;\n      case hoveredFeatureId:\n        return RENDER_STATE.HOVERED;\n      case UNCOMMITTED_ID:\n        return RENDER_STATE.UNCOMMITTED;\n      default:\n        return RENDER_STATE.INACTIVE;\n    }\n  };\n\n  /* RENDER */\n  /* eslint-disable max-params */\n  _renderVertex = (\n    position: Position,\n    featureIndex: number,\n    vertexIndex: Id,\n    operation: Operation,\n    style: any,\n    shape: string\n  ) => {\n    /* eslint-enable max-params */\n    const p = this._project(position);\n    if (!p) {\n      return null;\n    }\n\n    const { clickRadius } = this.props;\n\n    const elemKey = `${ELEMENT_TYPE.VERTEX}.${featureIndex}.${vertexIndex}.${operation}`;\n    // first <circle|rect> is to make path easily interacted with\n    switch (shape) {\n      case 'circle':\n        return (\n          <g key={elemKey} transform={`translate(${p[0]}, ${p[1]})`}>\n            <circle\n              data-type={ELEMENT_TYPE.VERTEX}\n              data-feature-index={featureIndex}\n              data-vertex-index={vertexIndex}\n              data-operation={operation}\n              key={`${elemKey}.hidden`}\n              style={{ ...style, ...HIDDEN_CLICKABLE_STYLE, stroke: 'none' }}\n              cx={0}\n              cy={0}\n              r={clickRadius}\n            />\n            <circle\n              data-type={ELEMENT_TYPE.VERTEX}\n              data-feature-index={featureIndex}\n              data-vertex-index={vertexIndex}\n              data-operation={operation}\n              key={elemKey}\n              style={style}\n              cx={0}\n              cy={0}\n            />\n          </g>\n        );\n      case 'rect':\n        return (\n          <g key={`vertex.${vertexIndex}`} transform={`translate(${p[0]}, ${p[1]})`}>\n            <rect\n              data-type={ELEMENT_TYPE.VERTEX}\n              data-feature-index={featureIndex}\n              data-vertex-index={vertexIndex}\n              data-operation={operation}\n              key={`${elemKey}.hidden`}\n              style={{\n                ...style,\n                ...HIDDEN_CLICKABLE_STYLE,\n                width: clickRadius,\n                height: clickRadius\n              }}\n            />\n            <rect\n              data-type={ELEMENT_TYPE.VERTEX}\n              data-feature-index={featureIndex}\n              data-vertex-index={vertexIndex}\n              data-operation={operation}\n              key={elemKey}\n              style={style}\n            />\n          </g>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  _renderSegment = (\n    featureIndex: number,\n    startVertexId: Id,\n    startPos: Position,\n    endPos: Position,\n    style: any = {}\n  ) => {\n    const { clickRadius } = this.props;\n    const projected = this._getProjectedData([startPos, endPos], RENDER_TYPE.LINE_STRING);\n    const { radius, ...others } = style;\n\n    const elemKey = `${ELEMENT_TYPE.SEGMENT}.${featureIndex}.${startVertexId}`;\n    return (\n      <g key={elemKey}>\n        <path\n          data-type={ELEMENT_TYPE.SEGMENT}\n          data-feature-index={featureIndex}\n          data-vertex-index={startVertexId}\n          key={`${elemKey}.hidden`}\n          style={{ ...others, strokeWidth: clickRadius || radius, opacity: 0 }}\n          d={projected}\n        />\n        <path\n          data-type={ELEMENT_TYPE.SEGMENT}\n          data-feature-index={featureIndex}\n          data-vertex-index={startVertexId}\n          key={elemKey}\n          style={others}\n          d={projected}\n        />\n      </g>\n    );\n  };\n\n  _renderCommittedStroke = (featureIndex: number, feature: Feature, style: any) => {\n    const { points, isClosed, renderType } = feature;\n    if (!points || points.length < 2 || (renderType === RENDER_TYPE.RECTANGLE && !isClosed)) {\n      return null;\n    }\n\n    const segments = [];\n    for (let i = 0; i < points.length - 1; i++) {\n      segments.push(this._renderSegment(featureIndex, i, points[i], points[i + 1], style));\n    }\n\n    if (isClosed) {\n      const lastIndex = points.length - 1;\n      segments.push(\n        this._renderSegment(featureIndex, lastIndex, points[lastIndex], points[0], style)\n      );\n    }\n\n    return <g key=\"committed group\">{segments}</g>;\n  };\n\n  _renderUncommittedStrokes = (featureIndex: number, feature: Feature, style: any) => {\n    const { points, isClosed, renderType } = feature;\n    const { mode } = this.props;\n    const { uncommittedLngLat } = this.state;\n    const isDrawing = DRAWING_MODES.find(m => m === mode);\n\n    if (!points || isClosed || !isDrawing) {\n      return null;\n    }\n\n    const uncommittedSegments = [];\n\n    if (renderType === RENDER_TYPE.RECTANGLE) {\n      for (let i = 0; i < points.length - 1; i++) {\n        uncommittedSegments.push(\n          this._renderSegment(featureIndex, i, points[i], points[i + 1], style)\n        );\n      }\n      if (points.length === 4) {\n        uncommittedSegments.push(this._renderSegment(featureIndex, 3, points[3], points[0], style));\n      }\n    }\n\n    if (!uncommittedLngLat) {\n      return uncommittedSegments.length ? uncommittedSegments : null;\n    }\n\n    /* eslint-disable no-inline-comments */\n    uncommittedSegments.push(\n      this._renderSegment(\n        featureIndex,\n        points.length - 1, // id\n        points.slice(-1)[0], // startPos\n        uncommittedLngLat, // endPos\n        style\n      )\n    );\n    /* eslint-enable no-inline-comments */\n\n    return uncommittedSegments.filter(Boolean);\n  };\n\n  _renderClosingStroke = (featureIndex: number, feature: Feature, style: any) => {\n    const { points, isClosed } = feature;\n    const { mode } = this.props;\n    const { uncommittedLngLat } = this.state;\n    if (uncommittedLngLat && mode === MODES.DRAW_POLYGON && points.length > 2 && !isClosed) {\n      // from uncommitted position to the first point of the polygon\n      return this._renderSegment(\n        featureIndex,\n        'uncommitted-close',\n        uncommittedLngLat,\n        points[0],\n        style\n      );\n    }\n    return null;\n  };\n\n  _renderFill = (index: number, feature: Feature, style: any) => {\n    const { mode } = this.props;\n    const isDrawing = DRAWING_MODES.find(m => m === mode);\n    const { points, renderType, isClosed } = feature;\n    if (renderType !== RENDER_TYPE.POLYGON && renderType !== RENDER_TYPE.RECTANGLE) {\n      return null;\n    }\n\n    const { uncommittedLngLat } = this.state;\n\n    let fillPoints = points;\n    if (uncommittedLngLat && isDrawing) {\n      fillPoints = [...points, uncommittedLngLat];\n    }\n\n    const fillPath = this._getProjectedData(fillPoints, renderType, isClosed);\n    return (\n      <path\n        data-type={ELEMENT_TYPE.FEATURE}\n        data-feature-index={index}\n        key={`${ELEMENT_TYPE.FEATURE}.${index}.fill`}\n        style={{ ...style, stroke: 'none' }}\n        d={fillPath}\n      />\n    );\n  };\n\n  _renderCurrentPath = (feature: Feature, index: number) => {\n    const { points, renderType } = feature;\n    if (!points || !points.length || renderType === RENDER_TYPE.POINT) {\n      return null;\n    }\n\n    const { getFeatureStyle } = this.props;\n    const geoJson = feature.toFeature();\n    const committedStyle = getFeatureStyle({ feature: geoJson, state: RENDER_STATE.SELECTED });\n    const uncommittedStyle = getFeatureStyle({ feature: geoJson, state: RENDER_STATE.UNCOMMITTED });\n    const closingStyle = getFeatureStyle({ feature: geoJson, state: RENDER_STATE.CLOSING });\n\n    const committedStroke = this._renderCommittedStroke(index, feature, committedStyle);\n    const uncommittedStrokes =\n      this._renderUncommittedStrokes(index, feature, uncommittedStyle) || [];\n    const closingStroke = this._renderClosingStroke(index, feature, closingStyle);\n    const fill = this._renderFill(index, feature, uncommittedStyle);\n\n    return [fill, committedStroke, ...uncommittedStrokes, closingStroke].filter(Boolean);\n  };\n\n  _renderCommittedVertices = (featureIndex: number, feature: Feature, geoJson: GeoJson) => {\n    const { mode, getEditHandleStyle, getEditHandleShape } = this.props;\n    const { isClosed, points } = feature;\n\n    const committedVertices = [];\n    for (let i = 0; i < points.length; i++) {\n      const p = points[i];\n      let operation = OPERATIONS.SET;\n\n      const style = getEditHandleStyle({\n        feature: geoJson,\n        index: i,\n        state: this._getEditHandleState(i)\n      });\n      const shape =\n        typeof getEditHandleShape === 'function'\n          ? getEditHandleShape({\n              feature: geoJson,\n              index: i,\n              state: this._getEditHandleState(i)\n            })\n          : getEditHandleShape;\n\n      if (isClosed) {\n        committedVertices.push(this._renderVertex(p, featureIndex, i, operation, style, shape));\n      } else {\n        if (mode === MODES.DRAW_POLYGON && i === 0 && points.length > 2) {\n          operation = OPERATIONS.INTERSECT;\n        }\n\n        committedVertices.push(this._renderVertex(p, featureIndex, i, operation, style, shape));\n      }\n    }\n\n    return committedVertices;\n  };\n\n  _renderUncommittedVertex = (featureIndex: number, feature: Feature, geoJson: GeoJson) => {\n    const { getEditHandleStyle, getEditHandleShape } = this.props;\n    const { selectedFeatureId, uncommittedLngLat } = this.state;\n    const { id } = feature;\n\n    let uncommittedVertex = null;\n    if (selectedFeatureId === id && uncommittedLngLat) {\n      const style = getEditHandleStyle({\n        feature: geoJson,\n        index: 'uncommitted',\n        state: this._getEditHandleState(-1, RENDER_STATE.UNCOMMITTED)\n      });\n\n      const shape =\n        typeof getEditHandleShape === 'function'\n          ? getEditHandleShape({\n              feature: geoJson,\n              index: null,\n              state: this._getEditHandleState(-1)\n            })\n          : getEditHandleShape;\n\n      uncommittedVertex = this._renderVertex(\n        uncommittedLngLat,\n        featureIndex,\n        'uncommitted',\n        OPERATIONS.INSERT,\n        { ...style, pointerEvents: 'none' },\n        shape\n      );\n    }\n\n    return uncommittedVertex;\n  };\n\n  _renderCurrentVertices = (feature: Feature, featureIndex: number) => {\n    const { points } = feature;\n\n    if (!points || !points.length) {\n      return null;\n    }\n\n    const geoJson = feature.toFeature();\n    const committedVertices = this._renderCommittedVertices(featureIndex, feature, geoJson);\n    const uncommittedVertex = this._renderUncommittedVertex(featureIndex, feature, geoJson);\n\n    return (\n      <g key=\"edit-handles\">\n        {committedVertices}\n        {uncommittedVertex}\n      </g>\n    );\n  };\n\n  _renderCurrent = () => {\n    const { features } = this.state;\n    const feature = this._getSelectedFeature();\n\n    if (!features || !feature || !feature.points) {\n      return null;\n    }\n\n    const { mode } = this.props;\n    const index = features.findIndex(f => f.id === feature.id);\n\n    return (\n      <g\n        key=\"feature current\"\n        style={mode === MODES.READ_ONLY || mode === MODES.SELECT_FEATURE ? STATIC_STYLE : null}\n      >\n        {this._renderCurrentPath(feature, index)}\n        {this._renderCurrentVertices(feature, index)}\n      </g>\n    );\n  };\n\n  _renderFeature = (feature: Feature, index: number) => {\n    if (feature === this._getSelectedFeature()) {\n      return null;\n    }\n\n    const { clickRadius } = this.props;\n    const { id, points, renderType, isClosed } = feature;\n    if (!points || !points.length) {\n      return null;\n    }\n\n    const projected = this._getProjectedData(points, renderType, isClosed);\n\n    if (!projected) {\n      return null;\n    }\n\n    const geoJson = feature.toFeature();\n    const renderState = this._getFeatureRenderState(id);\n    const { getFeatureStyle, getFeatureShape } = this.props;\n    const style = getFeatureStyle({ feature: geoJson, state: renderState });\n    const shape =\n      typeof getFeatureShape === 'function'\n        ? getFeatureShape({ feature: geoJson, state: renderState })\n        : getFeatureShape;\n\n    const elemKey = `${ELEMENT_TYPE.FEATURE}.${index}`;\n\n    switch (renderType) {\n      case RENDER_TYPE.POINT:\n        if (shape === 'rect') {\n          return (\n            <g key={elemKey} transform={`translate(${projected[0][0]}, ${projected[0][1]})`}>\n              <rect\n                data-type={ELEMENT_TYPE.FEATURE}\n                data-feature-index={index}\n                key={`${elemKey}.hidden`}\n                style={{\n                  ...style,\n                  ...HIDDEN_CLICKABLE_STYLE,\n                  width: clickRadius,\n                  height: clickRadius\n                }}\n              />\n              <rect\n                data-type={ELEMENT_TYPE.FEATURE}\n                data-feature-index={index}\n                key={elemKey}\n                style={style}\n              />\n            </g>\n          );\n        }\n\n        return (\n          <g key={elemKey} transform={`translate(${projected[0][0]}, ${projected[0][1]})`}>\n            <circle\n              data-type={ELEMENT_TYPE.FEATURE}\n              data-feature-index={index}\n              key={`${elemKey}.hidden`}\n              style={{\n                ...style,\n                opacity: 0\n              }}\n              cx={0}\n              cy={0}\n              r={clickRadius}\n            />\n            <circle\n              data-type={ELEMENT_TYPE.FEATURE}\n              data-feature-index={index}\n              key={`feature.${index}`}\n              style={style}\n              cx={0}\n              cy={0}\n            />\n          </g>\n        );\n\n      // first <path> is to make path easily interacted with\n      case RENDER_TYPE.LINE_STRING:\n        return (\n          <g key={elemKey}>\n            <path\n              data-type={ELEMENT_TYPE.FEATURE}\n              data-feature-index={index}\n              key={`${elemKey}.hidden`}\n              style={{\n                ...style,\n                strokeWidth: clickRadius,\n                opacity: 0\n              }}\n              d={projected}\n            />\n            <path\n              data-type={ELEMENT_TYPE.FEATURE}\n              data-feature-index={index}\n              key={elemKey}\n              style={style}\n              d={projected}\n            />\n          </g>\n        );\n\n      case 'Polygon':\n      case 'Rectangle':\n        return (\n          <path\n            data-type={ELEMENT_TYPE.FEATURE}\n            data-feature-index={index}\n            key={elemKey}\n            style={style}\n            d={projected}\n          />\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  _renderFeatures = () => {\n    const { features } = this.state;\n    return features && features.map(this._renderFeature);\n  };\n\n  _renderCanvas = () => {\n    const { selectedFeatureId, features } = this.state;\n\n    return (\n      <svg key=\"draw-canvas\" width=\"100%\" height=\"100%\">\n        {features && features.length > 0 && <g key=\"feature-group\">{this._renderFeatures()}</g>}\n        {selectedFeatureId && this._renderCurrent()}\n      </svg>\n    );\n  };\n\n  _renderEditor = () => {\n    const viewport = (this._context && this._context.viewport) || {};\n    const { style } = this.props;\n    const { width, height } = viewport;\n\n    return (\n      <div\n        id=\"editor\"\n        style={{\n          width,\n          height,\n          ...style\n        }}\n        ref={_ => {\n          this._containerRef = _;\n        }}\n      >\n        {this._renderCanvas()}\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <MapContext.Consumer>\n        {context => {\n          this._context = context;\n          const viewport = context && context.viewport;\n\n          if (!viewport || viewport.height <= 0 || viewport.width <= 0) {\n            return null;\n          }\n\n          return this._renderEditor();\n        }}\n      </MapContext.Consumer>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}