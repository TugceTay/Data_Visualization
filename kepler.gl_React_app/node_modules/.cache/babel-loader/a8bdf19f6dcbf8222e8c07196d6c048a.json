{"ast":null,"code":"import lightingShader from './lights.glsl';\nconst INITIAL_MODULE_OPTIONS = {\n  lightSources: {}\n};\nfunction convertColor() {\n  let {\n    color = [0, 0, 0],\n    intensity = 1.0\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return color.map(component => component * intensity / 255.0);\n}\nfunction getLightSourceUniforms(_ref) {\n  let {\n    ambientLight,\n    pointLights = [],\n    directionalLights = []\n  } = _ref;\n  const lightSourceUniforms = {};\n  if (ambientLight) {\n    lightSourceUniforms['lighting_uAmbientLight.color'] = convertColor(ambientLight);\n  } else {\n    lightSourceUniforms['lighting_uAmbientLight.color'] = [0, 0, 0];\n  }\n  pointLights.forEach((pointLight, index) => {\n    lightSourceUniforms[\"lighting_uPointLight[\".concat(index, \"].color\")] = convertColor(pointLight);\n    lightSourceUniforms[\"lighting_uPointLight[\".concat(index, \"].position\")] = pointLight.position;\n    lightSourceUniforms[\"lighting_uPointLight[\".concat(index, \"].attenuation\")] = pointLight.attenuation || [1, 0, 0];\n  });\n  lightSourceUniforms.lighting_uPointLightCount = pointLights.length;\n  directionalLights.forEach((directionalLight, index) => {\n    lightSourceUniforms[\"lighting_uDirectionalLight[\".concat(index, \"].color\")] = convertColor(directionalLight);\n    lightSourceUniforms[\"lighting_uDirectionalLight[\".concat(index, \"].direction\")] = directionalLight.direction;\n  });\n  lightSourceUniforms.lighting_uDirectionalLightCount = directionalLights.length;\n  return lightSourceUniforms;\n}\nfunction getUniforms() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_MODULE_OPTIONS;\n  if ('lightSources' in opts) {\n    const {\n      ambientLight,\n      pointLights,\n      directionalLights\n    } = opts.lightSources || {};\n    const hasLights = ambientLight || pointLights && pointLights.length > 0 || directionalLights && directionalLights.length > 0;\n    if (!hasLights) {\n      return {\n        lighting_uEnabled: false\n      };\n    }\n    return Object.assign({}, getLightSourceUniforms({\n      ambientLight,\n      pointLights,\n      directionalLights\n    }), {\n      lighting_uEnabled: true\n    });\n  }\n  if ('lights' in opts) {\n    const lightSources = {\n      pointLights: [],\n      directionalLights: []\n    };\n    for (const light of opts.lights || []) {\n      switch (light.type) {\n        case 'ambient':\n          lightSources.ambientLight = light;\n          break;\n        case 'directional':\n          lightSources.directionalLights.push(light);\n          break;\n        case 'point':\n          lightSources.pointLights.push(light);\n          break;\n        default:\n      }\n    }\n    return getUniforms({\n      lightSources\n    });\n  }\n  return {};\n}\nexport const lights = {\n  name: 'lights',\n  vs: lightingShader,\n  fs: lightingShader,\n  getUniforms,\n  defines: {\n    MAX_LIGHTS: 3\n  }\n};","map":{"version":3,"sources":["../../../../src/modules/lights/lights.js"],"names":["lightingShader","INITIAL_MODULE_OPTIONS","lightSources","convertColor","color","intensity","map","component","getLightSourceUniforms","ambientLight","pointLights","directionalLights","lightSourceUniforms","forEach","pointLight","index","position","attenuation","lighting_uPointLightCount","length","directionalLight","direction","lighting_uDirectionalLightCount","getUniforms","opts","hasLights","lighting_uEnabled","assign","light","lights","type","push","name","vs","fs","defines","MAX_LIGHTS"],"mappings":"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","sourcesContent":["/** @typedef {import('../../types').ShaderModule} ShaderModule */\n\nimport lightingShader from './lights.glsl';\n\nconst INITIAL_MODULE_OPTIONS = {\n  lightSources: {}\n};\n\n// Take color 0-255 and intensity as input and output 0.0-1.0 range\nfunction convertColor({color = [0, 0, 0], intensity = 1.0} = {}) {\n  return color.map(component => (component * intensity) / 255.0);\n}\n\nfunction getLightSourceUniforms({ambientLight, pointLights = [], directionalLights = []}) {\n  const lightSourceUniforms = {};\n\n  if (ambientLight) {\n    lightSourceUniforms['lighting_uAmbientLight.color'] = convertColor(ambientLight);\n  } else {\n    lightSourceUniforms['lighting_uAmbientLight.color'] = [0, 0, 0];\n  }\n\n  pointLights.forEach((pointLight, index) => {\n    lightSourceUniforms[`lighting_uPointLight[${index}].color`] = convertColor(pointLight);\n    lightSourceUniforms[`lighting_uPointLight[${index}].position`] = pointLight.position;\n    lightSourceUniforms[`lighting_uPointLight[${index}].attenuation`] = pointLight.attenuation || [\n      1,\n      0,\n      0\n    ];\n  });\n  lightSourceUniforms.lighting_uPointLightCount = pointLights.length;\n\n  directionalLights.forEach((directionalLight, index) => {\n    lightSourceUniforms[`lighting_uDirectionalLight[${index}].color`] = convertColor(\n      directionalLight\n    );\n    lightSourceUniforms[`lighting_uDirectionalLight[${index}].direction`] =\n      directionalLight.direction;\n  });\n  lightSourceUniforms.lighting_uDirectionalLightCount = directionalLights.length;\n\n  return lightSourceUniforms;\n}\n\n// eslint-disable-next-line complexity\nfunction getUniforms(opts = INITIAL_MODULE_OPTIONS) {\n  // Specify lights separately\n  if ('lightSources' in opts) {\n    const {ambientLight, pointLights, directionalLights} = opts.lightSources || {};\n    const hasLights =\n      ambientLight ||\n      (pointLights && pointLights.length > 0) ||\n      (directionalLights && directionalLights.length > 0);\n\n    if (!hasLights) {\n      return {lighting_uEnabled: false};\n    }\n\n    return Object.assign(\n      {},\n      getLightSourceUniforms({ambientLight, pointLights, directionalLights}),\n      {\n        lighting_uEnabled: true\n      }\n    );\n  }\n\n  // Support for array of lights. Type of light is detected by type field\n  if ('lights' in opts) {\n    const lightSources = {pointLights: [], directionalLights: []};\n    // @ts-ignore\n    for (const light of opts.lights || []) {\n      switch (light.type) {\n        case 'ambient':\n          // Note: Only uses last ambient light\n          // TODO - add ambient light sources on CPU?\n          lightSources.ambientLight = light;\n          break;\n        case 'directional':\n          lightSources.directionalLights.push(light);\n          break;\n        case 'point':\n          lightSources.pointLights.push(light);\n          break;\n        default:\n        // eslint-disable-next-line\n        // console.warn(light.type);\n      }\n    }\n\n    // Call the `opts.lightSources`` version\n    return getUniforms({lightSources});\n  }\n\n  return {};\n}\n\n/** @type {ShaderModule} */\nexport const lights = {\n  name: 'lights',\n  vs: lightingShader,\n  fs: lightingShader,\n  getUniforms,\n  defines: {\n    MAX_LIGHTS: 3\n  }\n};\n"]},"metadata":{},"sourceType":"module"}