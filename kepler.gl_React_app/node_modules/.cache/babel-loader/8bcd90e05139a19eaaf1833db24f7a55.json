{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { CompositeLayer } from '@deck.gl/core';\nimport { PolygonLayer } from '@deck.gl/layers';\nimport { getS2Polygon } from './s2-utils';\nvar defaultProps = Object.assign({\n  getS2Token: {\n    type: 'accessor',\n    value: function value(d) {\n      return d.token;\n    }\n  }\n}, PolygonLayer.defaultProps);\nvar S2Layer = function (_CompositeLayer) {\n  _inherits(S2Layer, _CompositeLayer);\n  function S2Layer() {\n    _classCallCheck(this, S2Layer);\n    return _possibleConstructorReturn(this, _getPrototypeOf(S2Layer).apply(this, arguments));\n  }\n  _createClass(S2Layer, [{\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props = this.props,\n        data = _this$props.data,\n        getS2Token = _this$props.getS2Token;\n      var _this$props2 = this.props,\n        elevationScale = _this$props2.elevationScale,\n        extruded = _this$props2.extruded,\n        wireframe = _this$props2.wireframe,\n        filled = _this$props2.filled,\n        stroked = _this$props2.stroked,\n        lineWidthUnits = _this$props2.lineWidthUnits,\n        lineWidthScale = _this$props2.lineWidthScale,\n        lineWidthMinPixels = _this$props2.lineWidthMinPixels,\n        lineWidthMaxPixels = _this$props2.lineWidthMaxPixels,\n        lineJointRounded = _this$props2.lineJointRounded,\n        lineMiterLimit = _this$props2.lineMiterLimit,\n        lineDashJustified = _this$props2.lineDashJustified,\n        getElevation = _this$props2.getElevation,\n        getFillColor = _this$props2.getFillColor,\n        getLineColor = _this$props2.getLineColor,\n        getLineWidth = _this$props2.getLineWidth,\n        getLineDashArray = _this$props2.getLineDashArray;\n      var _this$props3 = this.props,\n        updateTriggers = _this$props3.updateTriggers,\n        material = _this$props3.material;\n      var CellLayer = this.getSubLayerClass('cell', PolygonLayer);\n      return new CellLayer({\n        filled: filled,\n        wireframe: wireframe,\n        extruded: extruded,\n        elevationScale: elevationScale,\n        stroked: stroked,\n        lineWidthUnits: lineWidthUnits,\n        lineWidthScale: lineWidthScale,\n        lineWidthMinPixels: lineWidthMinPixels,\n        lineWidthMaxPixels: lineWidthMaxPixels,\n        lineJointRounded: lineJointRounded,\n        lineMiterLimit: lineMiterLimit,\n        lineDashJustified: lineDashJustified,\n        material: material,\n        getElevation: getElevation,\n        getFillColor: getFillColor,\n        getLineColor: getLineColor,\n        getLineWidth: getLineWidth,\n        getLineDashArray: getLineDashArray\n      }, this.getSubLayerProps({\n        id: 'cell',\n        updateTriggers: {\n          getElevation: updateTriggers.getElevation,\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor,\n          getLineWidth: updateTriggers.getLineWidth,\n          getLineDashArray: updateTriggers.getLineDashArray\n        }\n      }), {\n        data: data,\n        _normalize: false,\n        positionFormat: 'XY',\n        getPolygon: function getPolygon(x, objectInfo) {\n          return getS2Polygon(getS2Token(x, objectInfo));\n        }\n      });\n    }\n  }]);\n  return S2Layer;\n}(CompositeLayer);\nexport { S2Layer as default };\nS2Layer.layerName = 'S2Layer';\nS2Layer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/s2-layer/s2-layer.js"],"names":["CompositeLayer","PolygonLayer","getS2Polygon","defaultProps","assign","getS2Token","type","value","d","token","S2Layer","data","props","elevationScale","extruded","wireframe","filled","stroked","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","lineJointRounded","lineMiterLimit","lineDashJustified","getElevation","getFillColor","getLineColor","getLineWidth","getLineDashArray","updateTriggers","material","CellLayer","getSubLayerClass","getSubLayerProps","id","_normalize","positionFormat","getPolygon","x","objectInfo","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer} from '@deck.gl/core';\nimport {PolygonLayer} from '@deck.gl/layers';\n\nimport {getS2Polygon} from './s2-utils';\n\nconst defaultProps = Object.assign(\n  {\n    getS2Token: {type: 'accessor', value: d => d.token}\n  },\n  PolygonLayer.defaultProps\n);\n\nexport default class S2Layer extends CompositeLayer {\n  renderLayers() {\n    // Layer prop\n    const {data, getS2Token} = this.props;\n\n    // Rendering props underlying layer\n    const {\n      elevationScale,\n      extruded,\n      wireframe,\n      filled,\n      stroked,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {updateTriggers, material} = this.props;\n\n    // Filled Polygon Layer\n    const CellLayer = this.getSubLayerClass('cell', PolygonLayer);\n    return new CellLayer(\n      {\n        filled,\n        wireframe,\n\n        extruded,\n        elevationScale,\n\n        stroked,\n        lineWidthUnits,\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels,\n        lineJointRounded,\n        lineMiterLimit,\n        lineDashJustified,\n\n        material,\n\n        getElevation,\n        getFillColor,\n        getLineColor,\n        getLineWidth,\n        getLineDashArray\n      },\n      this.getSubLayerProps({\n        id: 'cell',\n        updateTriggers: {\n          getElevation: updateTriggers.getElevation,\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor,\n          getLineWidth: updateTriggers.getLineWidth,\n          getLineDashArray: updateTriggers.getLineDashArray\n        }\n      }),\n      {\n        data,\n        _normalize: false,\n        positionFormat: 'XY',\n        getPolygon: (x, objectInfo) => getS2Polygon(getS2Token(x, objectInfo))\n      }\n    );\n  }\n}\n\nS2Layer.layerName = 'S2Layer';\nS2Layer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}