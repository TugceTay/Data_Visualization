{"ast":null,"code":"import { uid, assert } from '@luma.gl/webgl';\nexport const DRAW_MODE = {\n  POINTS: 0x0000,\n  LINES: 0x0001,\n  LINE_LOOP: 0x0002,\n  LINE_STRIP: 0x0003,\n  TRIANGLES: 0x0004,\n  TRIANGLE_STRIP: 0x0005,\n  TRIANGLE_FAN: 0x0006\n};\nexport default class Geometry {\n  static get DRAW_MODE() {\n    return DRAW_MODE;\n  }\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      id = uid('geometry'),\n      drawMode = DRAW_MODE.TRIANGLES,\n      attributes = {},\n      indices = null,\n      vertexCount = null\n    } = props;\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n    this._setAttributes(attributes, indices);\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n  }\n  get mode() {\n    return this.drawMode;\n  }\n  getVertexCount() {\n    return this.vertexCount;\n  }\n  getAttributes() {\n    return this.indices ? {\n      indices: this.indices,\n      ...this.attributes\n    } : this.attributes;\n  }\n  _print(attributeName) {\n    return \"Geometry \".concat(this.id, \" attribute \").concat(attributeName);\n  }\n  _setAttributes(attributes, indices) {\n    if (indices) {\n      this.indices = ArrayBuffer.isView(indices) ? {\n        value: indices,\n        size: 1\n      } : indices;\n    }\n    for (const attributeName in attributes) {\n      let attribute = attributes[attributeName];\n      attribute = ArrayBuffer.isView(attribute) ? {\n        value: attribute\n      } : attribute;\n      assert(ArrayBuffer.isView(attribute.value), \"\".concat(this._print(attributeName), \": must be typed array or object with value as typed array\"));\n      if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {\n        attribute.size = 3;\n      }\n      if (attributeName === 'indices') {\n        assert(!this.indices);\n        this.indices = attribute;\n      } else {\n        this.attributes[attributeName] = attribute;\n      }\n    }\n    if (this.indices && this.indices.isIndexed !== undefined) {\n      this.indices = Object.assign({}, this.indices);\n      delete this.indices.isIndexed;\n    }\n    return this;\n  }\n  _calculateVertexCount(attributes, indices) {\n    if (indices) {\n      return indices.value.length;\n    }\n    let vertexCount = Infinity;\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const {\n        value,\n        size,\n        constant\n      } = attribute;\n      if (!constant && value && size >= 1) {\n        vertexCount = Math.min(vertexCount, value.length / size);\n      }\n    }\n    assert(Number.isFinite(vertexCount));\n    return vertexCount;\n  }\n}","map":{"version":3,"sources":["../../../src/geometry/geometry.js"],"names":["uid","assert","DRAW_MODE","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","Geometry","constructor","props","id","drawMode","attributes","indices","vertexCount","userData","_setAttributes","_calculateVertexCount","mode","getVertexCount","getAttributes","_print","attributeName","isView","value","size","attribute","ArrayBuffer","isIndexed","undefined","Object","assign","length","Infinity","constant","Math","min","Number","isFinite"],"mappings":"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","sourcesContent":["import {uid, assert} from '@luma.gl/webgl';\n\n// Rendering primitives - specify how to extract primitives from vertices.\n// NOTE: These are numerically identical to the corresponding WebGL/OpenGL constants\nexport const DRAW_MODE = {\n  POINTS: 0x0000, // draw single points.\n  LINES: 0x0001, // draw lines. Each vertex connects to the one after it.\n  LINE_LOOP: 0x0002, // draw lines. Each set of two vertices is treated as a separate line segment.\n  LINE_STRIP: 0x0003, // draw a connected group of line segments from the first vertex to the last\n  TRIANGLES: 0x0004, // draw triangles. Each set of three vertices creates a separate triangle.\n  TRIANGLE_STRIP: 0x0005, // draw a connected group of triangles.\n  TRIANGLE_FAN: 0x0006 // draw a connected group of triangles.\n  // Each vertex connects to the previous and the first vertex in the fan.\n};\n\nexport default class Geometry {\n  static get DRAW_MODE() {\n    return DRAW_MODE;\n  }\n\n  constructor(props = {}) {\n    const {\n      id = uid('geometry'),\n      drawMode = DRAW_MODE.TRIANGLES,\n      attributes = {},\n      indices = null,\n      vertexCount = null\n    } = props;\n\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n\n    this._setAttributes(attributes, indices);\n\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n\n    // stubRemovedMethods(this, [\n    //   'setNeedsRedraw', 'needsRedraw', 'setAttributes'\n    // ], 'Immutable');\n\n    // stubRemovedMethods(this, [\n    //   'hasAttribute', 'getAttribute', 'getArray'\n    // ], 'Use geometry.attributes and geometry.indices');\n\n    // deprecateMethods(this, ['getAttributes'])\n  }\n\n  get mode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  // Return an object with all attributes plus indices added as a field.\n  getAttributes() {\n    return this.indices ? {indices: this.indices, ...this.attributes} : this.attributes;\n  }\n\n  // PRIVATE\n\n  _print(attributeName) {\n    return `Geometry ${this.id} attribute ${attributeName}`;\n  }\n\n  // Attribute\n  // value: typed array\n  // type: indices, vertices, uvs\n  // size: elements per vertex\n  // target: WebGL buffer type (string or constant)\n  _setAttributes(attributes, indices) {\n    if (indices) {\n      this.indices = ArrayBuffer.isView(indices) ? {value: indices, size: 1} : indices;\n    }\n\n    for (const attributeName in attributes) {\n      let attribute = attributes[attributeName];\n\n      // Wrap \"unwrapped\" arrays and try to autodetect their type\n      attribute = ArrayBuffer.isView(attribute) ? {value: attribute} : attribute;\n\n      assert(\n        ArrayBuffer.isView(attribute.value),\n        `${this._print(attributeName)}: must be typed array or object with value as typed array`\n      );\n\n      if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {\n        attribute.size = 3;\n      }\n\n      // Move indices to separate field\n      if (attributeName === 'indices') {\n        assert(!this.indices);\n        this.indices = attribute;\n      } else {\n        this.attributes[attributeName] = attribute;\n      }\n    }\n\n    if (this.indices && this.indices.isIndexed !== undefined) {\n      this.indices = Object.assign({}, this.indices);\n      delete this.indices.isIndexed;\n    }\n\n    return this;\n  }\n\n  _calculateVertexCount(attributes, indices) {\n    if (indices) {\n      return indices.value.length;\n    }\n    let vertexCount = Infinity;\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const {value, size, constant} = attribute;\n      if (!constant && value && size >= 1) {\n        vertexCount = Math.min(vertexCount, value.length / size);\n      }\n    }\n\n    assert(Number.isFinite(vertexCount));\n    return vertexCount;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}