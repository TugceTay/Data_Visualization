{"ast":null,"code":"import { fp64 } from '@luma.gl/shadertools';\nvar fp64ify = fp64.fp64ify,\n  fp64ifyMatrix4 = fp64.fp64ifyMatrix4;\nimport { project, _memoize as memoize } from '@deck.gl/core';\nimport project64Shader from './project64.glsl';\nexport default {\n  name: 'project64',\n  dependencies: [project, fp64],\n  vs: project64Shader,\n  getUniforms: getUniforms\n};\nvar DEFAULT_MODULE_OPTIONS = {};\nvar getMemoizedUniforms = memoize(calculateUniforms);\nfunction getUniforms() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MODULE_OPTIONS;\n  if (opts.viewport) {\n    var _opts$viewport = opts.viewport,\n      viewProjectionMatrix = _opts$viewport.viewProjectionMatrix,\n      scale = _opts$viewport.scale;\n    return getMemoizedUniforms({\n      viewProjectionMatrix: viewProjectionMatrix,\n      scale: scale\n    });\n  }\n  return {};\n}\nfunction calculateUniforms(_ref) {\n  var viewProjectionMatrix = _ref.viewProjectionMatrix,\n    scale = _ref.scale;\n  var glViewProjectionMatrixFP64 = fp64ifyMatrix4(viewProjectionMatrix);\n  var scaleFP64 = fp64ify(scale);\n  return {\n    project_uViewProjectionMatrixFP64: glViewProjectionMatrixFP64,\n    project64_uViewProjectionMatrix: glViewProjectionMatrixFP64,\n    project64_uScale: scaleFP64\n  };\n}","map":{"version":3,"sources":["../../../src/fp64/project64.js"],"names":["fp64","fp64ify","fp64ifyMatrix4","project","_memoize","memoize","project64Shader","name","dependencies","vs","getUniforms","DEFAULT_MODULE_OPTIONS","getMemoizedUniforms","calculateUniforms","opts","viewport","viewProjectionMatrix","scale","glViewProjectionMatrixFP64","scaleFP64","project_uViewProjectionMatrixFP64","project64_uViewProjectionMatrix","project64_uScale"],"mappings":"AAoBA,SAAQA,IAAR,QAAmB,sBAAnB;IACOC,O,GAA2BD,I,CAA3BC,O;EAASC,c,GAAkBF,I,CAAlBE,c;AAChB,SAAQC,OAAR,EAAiBC,QAAQ,IAAIC,OAA7B,QAA2C,eAA3C;AAEA,OAAOC,eAAP,MAA4B,kBAA5B;AAEA,eAAe;EACbC,IAAI,EAAE,WADO;EAEbC,YAAY,EAAE,CAACL,OAAD,EAAUH,IAAV,CAFD;EAGbS,EAAE,EAAEH,eAHS;EAIbI,WAAW,EAAXA;AAJa,CAAf;AAUA,IAAMC,sBAAsB,GAAG,CAAA,CAA/B;AACA,IAAMC,mBAAmB,GAAGP,OAAO,CAACQ,iBAAD,CAAnC;AAEA,SAASH,WAAT,GAAoD;EAAA,IAA/BI,IAA+B,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAxBH,sBAAwB;EAClD,IAAIG,IAAI,CAACC,QAAT,EAAmB;IAAA,IAAA,cAAA,GACqBD,IAAI,CAACC,QAD1B;MACVC,oBADU,GAAA,cAAA,CACVA,oBADU;MACYC,KADZ,GAAA,cAAA,CACYA,KADZ;IAGjB,OAAOL,mBAAmB,CAAC;MAACI,oBAAoB,EAApBA,oBAAD;MAAuBC,KAAK,EAALA;IAAvB,CAAD,CAA1B;EACD;EACD,OAAO,CAAA,CAAP;AACD;AAED,SAASJ,iBAAT,CAAA,IAAA,EAA0D;EAAA,IAA9BG,oBAA8B,GAAA,IAAA,CAA9BA,oBAA8B;IAARC,KAAQ,GAAA,IAAA,CAARA,KAAQ;EACxD,IAAMC,0BAA0B,GAAGhB,cAAc,CAACc,oBAAD,CAAjD;EACA,IAAMG,SAAS,GAAGlB,OAAO,CAACgB,KAAD,CAAzB;EAEA,OAAO;IACLG,iCAAiC,EAAEF,0BAD9B;IAELG,+BAA+B,EAAEH,0BAF5B;IAGLI,gBAAgB,EAAEH;EAHb,CAAP;AAKD","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {fp64} from '@luma.gl/shadertools';\nconst {fp64ify, fp64ifyMatrix4} = fp64;\nimport {project, _memoize as memoize} from '@deck.gl/core';\n\nimport project64Shader from './project64.glsl';\n\nexport default {\n  name: 'project64',\n  dependencies: [project, fp64],\n  vs: project64Shader,\n  getUniforms\n};\n\n// TODO - this module should calculate the 64 bit uniforms\n// It is currently done by project to minimize duplicated work\n\nconst DEFAULT_MODULE_OPTIONS = {};\nconst getMemoizedUniforms = memoize(calculateUniforms);\n\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS) {\n  if (opts.viewport) {\n    const {viewProjectionMatrix, scale} = opts.viewport;\n    // We only need to update fp64 uniforms if fp32 projection is being updated\n    return getMemoizedUniforms({viewProjectionMatrix, scale});\n  }\n  return {};\n}\n\nfunction calculateUniforms({viewProjectionMatrix, scale}) {\n  const glViewProjectionMatrixFP64 = fp64ifyMatrix4(viewProjectionMatrix);\n  const scaleFP64 = fp64ify(scale);\n\n  return {\n    project_uViewProjectionMatrixFP64: glViewProjectionMatrixFP64,\n    project64_uViewProjectionMatrix: glViewProjectionMatrixFP64,\n    project64_uScale: scaleFP64\n  };\n}\n"]},"metadata":{},"sourceType":"module"}