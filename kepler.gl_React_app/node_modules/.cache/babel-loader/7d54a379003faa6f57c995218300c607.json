{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport function getErrorMessageFromResponseSync(response) {\n  return \"Failed to fetch resource \".concat(response.url, \"(\").concat(response.status, \"): \").concat(response.statusText, \" \");\n}\nexport function getErrorMessageFromResponse(_x) {\n  return _getErrorMessageFromResponse.apply(this, arguments);\n}\nfunction _getErrorMessageFromResponse() {\n  _getErrorMessageFromResponse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(response) {\n    var message, contentType;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            message = \"Failed to fetch resource \".concat(response.url, \" (\").concat(response.status, \"): \");\n            _context.prev = 1;\n            contentType = response.headers.get('Content-Type');\n            if (!contentType.includes('application/json')) {\n              _context.next = 10;\n              break;\n            }\n            _context.t0 = message;\n            _context.next = 7;\n            return response.text();\n          case 7:\n            message = _context.t0 += _context.sent;\n            _context.next = 11;\n            break;\n          case 10:\n            message += response.statusText;\n          case 11:\n            _context.next = 16;\n            break;\n          case 13:\n            _context.prev = 13;\n            _context.t1 = _context[\"catch\"](1);\n            return _context.abrupt(\"return\", message);\n          case 16:\n            return _context.abrupt(\"return\", message);\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 13]]);\n  }));\n  return _getErrorMessageFromResponse.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/fetch/fetch-error-message.js"],"names":["getErrorMessageFromResponseSync","response","url","status","statusText","getErrorMessageFromResponse","message","contentType","headers","get","includes","text"],"mappings":";;AAAA,OAAO,SAASA,+BAAT,CAAyCC,QAAzC,EAAmD;EACxD,OAAA,2BAAA,CAAA,MAAA,CAAmCA,QAAQ,CAACC,GAA5C,EAAA,GAAA,CAAA,CAAA,MAAA,CAAmDD,QAAQ,CAACE,MAA5D,EAAA,KAAA,CAAA,CAAA,MAAA,CAAwEF,QAAQ,CAACG,UAAjF,EAAA,GAAA,CAAA;AACD;AAED,OAAA,SAAsBC,2BAAtB,CAAA,EAAA,EAAA;EAAA,OAAA,4BAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;4EAAO,SAAA,OAAA,CAA2CJ,QAA3C,EAAA;IAAA,IAAA,OAAA,EAAA,WAAA;IAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YACDK,OADC,GAAA,2BAAA,CAAA,MAAA,CACqCL,QAAQ,CAACC,GAD9C,EAAA,IAAA,CAAA,CAAA,MAAA,CACsDD,QAAQ,CAACE,MAD/D,EAAA,KAAA,CAAA;YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;YAGGI,WAHH,GAGiBN,QAAQ,CAACO,OAATP,CAAiBQ,GAAjBR,CAAqB,cAArBA,CAHjB;YAAA,IAAA,CAICM,WAAW,CAACG,QAAZH,CAAqB,kBAArBA,CAJD,EAAA;cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;YAAA,QAAA,CAAA,EAAA,GAKDD,OALC;YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OAKgBL,QAAQ,CAACU,IAATV,EALhB;UAAA,KAAA,CAAA;YAKDK,OALC,GAAA,QAAA,CAAA,EAAA,IAAA,QAAA,CAAA,IAAA;YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;YAAA;UAAA,KAAA,EAAA;YAODA,OAAO,IAAIL,QAAQ,CAACG,UAApBE;UAPC,KAAA,EAAA;YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;YAAA;UAAA,KAAA,EAAA;YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;YAAA,QAAA,CAAA,EAAA,GAAA,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;YAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAWIA,OAXJ,CAAA;UAAA,KAAA,EAAA;YAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAaEA,OAbF,CAAA;UAAA,KAAA,EAAA;UAAA,KAAA,KAAA;YAAA,OAAA,QAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,OAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA;EAAA,C","sourcesContent":["export function getErrorMessageFromResponseSync(response) {\n  return `Failed to fetch resource ${response.url}(${response.status}): ${response.statusText} `;\n}\n\nexport async function getErrorMessageFromResponse(response) {\n  let message = `Failed to fetch resource ${response.url} (${response.status}): `;\n  try {\n    const contentType = response.headers.get('Content-Type');\n    if (contentType.includes('application/json')) {\n      message += await response.text();\n    } else {\n      message += response.statusText;\n    }\n  } catch (error) {\n    // eslint forbids return in finally statement\n    return message;\n  }\n  return message;\n}\n"]},"metadata":{},"sourceType":"module"}