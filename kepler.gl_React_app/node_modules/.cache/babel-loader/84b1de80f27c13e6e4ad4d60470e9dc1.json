{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { CompositeLayer, log } from '@deck.gl/core';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport { replaceInRange } from '../utils';\nimport { getGeojsonFeatures, separateGeojsonFeatures } from './geojson';\nvar defaultLineColor = [0, 0, 0, 255];\nvar defaultFillColor = [0, 0, 0, 255];\nvar defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n  elevationScale: 1,\n  pointRadiusUnits: 'meters',\n  pointRadiusScale: 1,\n  pointRadiusMinPixels: 0,\n  pointRadiusMaxPixels: Number.MAX_SAFE_INTEGER,\n  getLineColor: {\n    type: 'accessor',\n    value: defaultLineColor\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: defaultFillColor\n  },\n  getRadius: {\n    type: 'accessor',\n    value: 1\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  material: true\n};\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\nvar GeoJsonLayer = function (_CompositeLayer) {\n  _inherits(GeoJsonLayer, _CompositeLayer);\n  function GeoJsonLayer() {\n    _classCallCheck(this, GeoJsonLayer);\n    return _possibleConstructorReturn(this, _getPrototypeOf(GeoJsonLayer).apply(this, arguments));\n  }\n  _createClass(GeoJsonLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        features: {}\n      };\n      if (this.props.getLineDashArray) {\n        log.removed('getLineDashArray', 'PathStyleExtension')();\n      }\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n        changeFlags = _ref.changeFlags;\n      if (!changeFlags.dataChanged) {\n        return;\n      }\n      var features = getGeojsonFeatures(props.data);\n      var wrapFeature = this.getSubLayerRow.bind(this);\n      if (Array.isArray(changeFlags.dataChanged)) {\n        var oldFeatures = this.state.features;\n        var newFeatures = {};\n        var featuresDiff = {};\n        for (var key in oldFeatures) {\n          newFeatures[key] = oldFeatures[key].slice();\n          featuresDiff[key] = [];\n        }\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n        try {\n          for (var _iterator = changeFlags.dataChanged[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var dataRange = _step.value;\n            var partialFeatures = separateGeojsonFeatures(features, wrapFeature, dataRange);\n            for (var _key in oldFeatures) {\n              featuresDiff[_key].push(replaceInRange({\n                data: newFeatures[_key],\n                getIndex: function getIndex(f) {\n                  return f.__source.index;\n                },\n                dataRange: dataRange,\n                replace: partialFeatures[_key]\n              }));\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n        this.setState({\n          features: newFeatures,\n          featuresDiff: featuresDiff\n        });\n      } else {\n        this.setState({\n          features: separateGeojsonFeatures(features, wrapFeature),\n          featuresDiff: {}\n        });\n      }\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$state = this.state,\n        features = _this$state.features,\n        featuresDiff = _this$state.featuresDiff;\n      var pointFeatures = features.pointFeatures,\n        lineFeatures = features.lineFeatures,\n        polygonFeatures = features.polygonFeatures,\n        polygonOutlineFeatures = features.polygonOutlineFeatures;\n      var _this$props = this.props,\n        stroked = _this$props.stroked,\n        filled = _this$props.filled,\n        extruded = _this$props.extruded,\n        wireframe = _this$props.wireframe,\n        material = _this$props.material,\n        transitions = _this$props.transitions;\n      var _this$props2 = this.props,\n        lineWidthUnits = _this$props2.lineWidthUnits,\n        lineWidthScale = _this$props2.lineWidthScale,\n        lineWidthMinPixels = _this$props2.lineWidthMinPixels,\n        lineWidthMaxPixels = _this$props2.lineWidthMaxPixels,\n        lineJointRounded = _this$props2.lineJointRounded,\n        lineMiterLimit = _this$props2.lineMiterLimit,\n        pointRadiusUnits = _this$props2.pointRadiusUnits,\n        pointRadiusScale = _this$props2.pointRadiusScale,\n        pointRadiusMinPixels = _this$props2.pointRadiusMinPixels,\n        pointRadiusMaxPixels = _this$props2.pointRadiusMaxPixels,\n        elevationScale = _this$props2.elevationScale,\n        lineDashJustified = _this$props2.lineDashJustified;\n      var _this$props3 = this.props,\n        getLineColor = _this$props3.getLineColor,\n        getFillColor = _this$props3.getFillColor,\n        getRadius = _this$props3.getRadius,\n        getLineWidth = _this$props3.getLineWidth,\n        getLineDashArray = _this$props3.getLineDashArray,\n        getElevation = _this$props3.getElevation,\n        updateTriggers = _this$props3.updateTriggers;\n      var PolygonFillLayer = this.getSubLayerClass('polygons-fill', SolidPolygonLayer);\n      var PolygonStrokeLayer = this.getSubLayerClass('polygons-stroke', PathLayer);\n      var LineStringsLayer = this.getSubLayerClass('line-strings', PathLayer);\n      var PointsLayer = this.getSubLayerClass('points', ScatterplotLayer);\n      var polygonFillLayer = this.shouldRenderSubLayer('polygons-fill', polygonFeatures) && new PolygonFillLayer({\n        _dataDiff: featuresDiff.polygonFeatures && function () {\n          return featuresDiff.polygonFeatures;\n        },\n        extruded: extruded,\n        elevationScale: elevationScale,\n        filled: filled,\n        wireframe: wireframe,\n        material: material,\n        getElevation: this.getSubLayerAccessor(getElevation),\n        getFillColor: this.getSubLayerAccessor(getFillColor),\n        getLineColor: this.getSubLayerAccessor(getLineColor),\n        transitions: transitions && {\n          getPolygon: transitions.geometry,\n          getElevation: transitions.getElevation,\n          getFillColor: transitions.getFillColor,\n          getLineColor: transitions.getLineColor\n        }\n      }, this.getSubLayerProps({\n        id: 'polygons-fill',\n        updateTriggers: {\n          getElevation: updateTriggers.getElevation,\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor\n        }\n      }), {\n        data: polygonFeatures,\n        getPolygon: getCoordinates\n      });\n      var polygonLineLayer = !extruded && stroked && this.shouldRenderSubLayer('polygons-stroke', polygonOutlineFeatures) && new PolygonStrokeLayer({\n        _dataDiff: featuresDiff.polygonOutlineFeatures && function () {\n          return featuresDiff.polygonOutlineFeatures;\n        },\n        widthUnits: lineWidthUnits,\n        widthScale: lineWidthScale,\n        widthMinPixels: lineWidthMinPixels,\n        widthMaxPixels: lineWidthMaxPixels,\n        rounded: lineJointRounded,\n        miterLimit: lineMiterLimit,\n        dashJustified: lineDashJustified,\n        getColor: this.getSubLayerAccessor(getLineColor),\n        getWidth: this.getSubLayerAccessor(getLineWidth),\n        getDashArray: this.getSubLayerAccessor(getLineDashArray),\n        transitions: transitions && {\n          getPath: transitions.geometry,\n          getColor: transitions.getLineColor,\n          getWidth: transitions.getLineWidth\n        }\n      }, this.getSubLayerProps({\n        id: 'polygons-stroke',\n        updateTriggers: {\n          getColor: updateTriggers.getLineColor,\n          getWidth: updateTriggers.getLineWidth,\n          getDashArray: updateTriggers.getLineDashArray\n        }\n      }), {\n        data: polygonOutlineFeatures,\n        getPath: getCoordinates\n      });\n      var pathLayer = this.shouldRenderSubLayer('linestrings', lineFeatures) && new LineStringsLayer({\n        _dataDiff: featuresDiff.lineFeatures && function () {\n          return featuresDiff.lineFeatures;\n        },\n        widthUnits: lineWidthUnits,\n        widthScale: lineWidthScale,\n        widthMinPixels: lineWidthMinPixels,\n        widthMaxPixels: lineWidthMaxPixels,\n        rounded: lineJointRounded,\n        miterLimit: lineMiterLimit,\n        dashJustified: lineDashJustified,\n        getColor: this.getSubLayerAccessor(getLineColor),\n        getWidth: this.getSubLayerAccessor(getLineWidth),\n        getDashArray: this.getSubLayerAccessor(getLineDashArray),\n        transitions: transitions && {\n          getPath: transitions.geometry,\n          getColor: transitions.getLineColor,\n          getWidth: transitions.getLineWidth\n        }\n      }, this.getSubLayerProps({\n        id: 'line-strings',\n        updateTriggers: {\n          getColor: updateTriggers.getLineColor,\n          getWidth: updateTriggers.getLineWidth,\n          getDashArray: updateTriggers.getLineDashArray\n        }\n      }), {\n        data: lineFeatures,\n        getPath: getCoordinates\n      });\n      var pointLayer = this.shouldRenderSubLayer('points', pointFeatures) && new PointsLayer({\n        _dataDiff: featuresDiff.pointFeatures && function () {\n          return featuresDiff.pointFeatures;\n        },\n        stroked: stroked,\n        filled: filled,\n        radiusUnits: pointRadiusUnits,\n        radiusScale: pointRadiusScale,\n        radiusMinPixels: pointRadiusMinPixels,\n        radiusMaxPixels: pointRadiusMaxPixels,\n        lineWidthUnits: lineWidthUnits,\n        lineWidthScale: lineWidthScale,\n        lineWidthMinPixels: lineWidthMinPixels,\n        lineWidthMaxPixels: lineWidthMaxPixels,\n        getFillColor: this.getSubLayerAccessor(getFillColor),\n        getLineColor: this.getSubLayerAccessor(getLineColor),\n        getRadius: this.getSubLayerAccessor(getRadius),\n        getLineWidth: this.getSubLayerAccessor(getLineWidth),\n        transitions: transitions && {\n          getPosition: transitions.geometry,\n          getFillColor: transitions.getFillColor,\n          getLineColor: transitions.getLineColor,\n          getRadius: transitions.getRadius,\n          getLineWidth: transitions.getLineWidth\n        }\n      }, this.getSubLayerProps({\n        id: 'points',\n        updateTriggers: {\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor,\n          getRadius: updateTriggers.getRadius,\n          getLineWidth: updateTriggers.getLineWidth\n        }\n      }), {\n        data: pointFeatures,\n        getPosition: getCoordinates,\n        highlightedObjectIndex: this._getHighlightedIndex(pointFeatures)\n      });\n      return [!extruded && polygonFillLayer, polygonLineLayer, pathLayer, pointLayer, extruded && polygonFillLayer];\n    }\n  }, {\n    key: \"_getHighlightedIndex\",\n    value: function _getHighlightedIndex(data) {\n      var highlightedObjectIndex = this.props.highlightedObjectIndex;\n      return Number.isFinite(highlightedObjectIndex) ? data.findIndex(function (d) {\n        return d.__source.index === highlightedObjectIndex;\n      }) : null;\n    }\n  }]);\n  return GeoJsonLayer;\n}(CompositeLayer);\nexport { GeoJsonLayer as default };\nGeoJsonLayer.layerName = 'GeoJsonLayer';\nGeoJsonLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/geojson-layer/geojson-layer.js"],"names":["CompositeLayer","log","ScatterplotLayer","PathLayer","SolidPolygonLayer","replaceInRange","getGeojsonFeatures","separateGeojsonFeatures","defaultLineColor","defaultFillColor","defaultProps","stroked","filled","extruded","wireframe","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","elevationScale","pointRadiusUnits","pointRadiusScale","pointRadiusMinPixels","pointRadiusMaxPixels","getLineColor","type","value","getFillColor","getRadius","getLineWidth","getElevation","material","getCoordinates","f","geometry","coordinates","GeoJsonLayer","state","features","props","getLineDashArray","removed","changeFlags","dataChanged","data","wrapFeature","getSubLayerRow","bind","Array","isArray","oldFeatures","newFeatures","featuresDiff","key","slice","dataRange","partialFeatures","push","getIndex","__source","index","replace","setState","pointFeatures","lineFeatures","polygonFeatures","polygonOutlineFeatures","transitions","lineDashJustified","updateTriggers","PolygonFillLayer","getSubLayerClass","PolygonStrokeLayer","LineStringsLayer","PointsLayer","polygonFillLayer","shouldRenderSubLayer","_dataDiff","getSubLayerAccessor","getPolygon","getSubLayerProps","id","polygonLineLayer","widthUnits","widthScale","widthMinPixels","widthMaxPixels","rounded","miterLimit","dashJustified","getColor","getWidth","getDashArray","getPath","pathLayer","pointLayer","radiusUnits","radiusScale","radiusMinPixels","radiusMaxPixels","getPosition","highlightedObjectIndex","_getHighlightedIndex","isFinite","findIndex","d","layerName"],"mappings":";;;;;AAoBA,SAAQA,cAAR,EAAwBC,GAAxB,QAAkC,eAAlC;AACA,OAAOC,gBAAP,MAA6B,wCAA7B;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AAEA,OAAOC,iBAAP,MAA8B,4CAA9B;AACA,SAAQC,cAAR,QAA6B,UAA7B;AAEA,SAAQC,kBAAR,EAA4BC,uBAA5B,QAA0D,WAA1D;AAEA,IAAMC,gBAAgB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV,CAAzB;AACA,IAAMC,gBAAgB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV,CAAzB;AAEA,IAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE,IADU;EAEnBC,MAAM,EAAE,IAFW;EAGnBC,QAAQ,EAAE,KAHS;EAInBC,SAAS,EAAE,KAJQ;EAMnBC,cAAc,EAAE,QANG;EAOnBC,cAAc,EAAE,CAPG;EAQnBC,kBAAkB,EAAE,CARD;EASnBC,kBAAkB,EAAEC,MAAM,CAACC,gBATR;EAUnBC,gBAAgB,EAAE,KAVC;EAWnBC,cAAc,EAAE,CAXG;EAanBC,cAAc,EAAE,CAbG;EAenBC,gBAAgB,EAAE,QAfC;EAgBnBC,gBAAgB,EAAE,CAhBC;EAiBnBC,oBAAoB,EAAE,CAjBH;EAkBnBC,oBAAoB,EAAER,MAAM,CAACC,gBAlBV;EAqBnBQ,YAAY,EAAE;IAACC,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAEtB;EAA1B,CArBK;EAuBnBuB,YAAY,EAAE;IAACF,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAErB;EAA1B,CAvBK;EAyBnBuB,SAAS,EAAE;IAACH,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAE;EAA1B,CAzBQ;EA2BnBG,YAAY,EAAE;IAACJ,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAE;EAA1B,CA3BK;EA6BnBI,YAAY,EAAE;IAACL,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAE;EAA1B,CA7BK;EA+BnBK,QAAQ,EAAE;AA/BS,CAArB;AAkCA,SAASC,cAAT,CAAwBC,CAAxB,EAA2B;EACzB,OAAOA,CAAC,CAACC,QAAFD,CAAWE,WAAlB;AACD;IAEoBC,Y;;;;;;;;sCACD;MAChB,IAAA,CAAKC,KAAL,GAAa;QACXC,QAAQ,EAAE,CAAA;MADC,CAAb;MAIA,IAAI,IAAA,CAAKC,KAAL,CAAWC,gBAAf,EAAiC;QAC/B3C,GAAG,CAAC4C,OAAJ5C,CAAY,kBAAZA,EAAgC,oBAAhCA,CAAAA,EAAAA;MACD;IACF;;;sCAEiC;MAAA,IAArB0C,KAAqB,GAAA,IAAA,CAArBA,KAAqB;QAAdG,WAAc,GAAA,IAAA,CAAdA,WAAc;MAChC,IAAI,CAACA,WAAW,CAACC,WAAjB,EAA8B;QAC5B;MACD;MACD,IAAML,QAAQ,GAAGpC,kBAAkB,CAACqC,KAAK,CAACK,IAAP,CAAnC;MACA,IAAMC,WAAW,GAAG,IAAA,CAAKC,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAApB;MAEA,IAAIC,KAAK,CAACC,OAAND,CAAcN,WAAW,CAACC,WAA1BK,CAAJ,EAA4C;QAC1C,IAAME,WAAW,GAAG,IAAA,CAAKb,KAAL,CAAWC,QAA/B;QACA,IAAMa,WAAW,GAAG,CAAA,CAApB;QACA,IAAMC,YAAY,GAAG,CAAA,CAArB;QACA,KAAK,IAAMC,GAAX,IAAkBH,WAAlB,EAA+B;UAC7BC,WAAW,CAACE,GAAD,CAAXF,GAAmBD,WAAW,CAACG,GAAD,CAAXH,CAAiBI,KAAjBJ,EAAnBC;UACAC,YAAY,CAACC,GAAD,CAAZD,GAAoB,EAApBA;QACD;QAPyC,IAAA,yBAAA,GAAA,IAAA;QAAA,IAAA,iBAAA,GAAA,KAAA;QAAA,IAAA,cAAA,GAAA,SAAA;QAAA,IAAA;UAS1C,KAAA,IAAA,SAAA,GAAwBV,WAAW,CAACC,WAApC,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA,EAAA,yBAAA,GAAA,CAAA,KAAA,GAAA,SAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,yBAAA,GAAA,IAAA,EAAiD;YAAA,IAAtCY,SAAsC,GAAA,KAAA,CAAA,KAAA;YAC/C,IAAMC,eAAe,GAAGrD,uBAAuB,CAACmC,QAAD,EAAWO,WAAX,EAAwBU,SAAxB,CAA/C;YACA,KAAK,IAAMF,IAAX,IAAkBH,WAAlB,EAA+B;cAC7BE,YAAY,CAACC,IAAD,CAAZD,CAAkBK,IAAlBL,CACEnD,cAAc,CAAC;gBACb2C,IAAI,EAAEO,WAAW,CAACE,IAAD,CADJ;gBAEbK,QAAQ,EAAE,SAAA,QAAA,CAAA,CAAC,EAAA;kBAAA,OAAIzB,CAAC,CAAC0B,QAAF1B,CAAW2B,KAAf;gBAAA,CAFE;gBAGbL,SAAS,EAATA,SAHa;gBAIbM,OAAO,EAAEL,eAAe,CAACH,IAAD;cAJX,CAAD,CADhBD,CAAAA;YAQD;UACF;QArByC,CAAA,CAAA,OAAA,GAAA,EAAA;UAAA,iBAAA,GAAA,IAAA;UAAA,cAAA,GAAA,GAAA;QAAA,CAAA,SAAA;UAAA,IAAA;YAAA,IAAA,CAAA,yBAAA,IAAA,SAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;cAAA,SAAA,CAAA,QAAA,CAAA,EAAA;YAAA;UAAA,CAAA,SAAA;YAAA,IAAA,iBAAA,EAAA;cAAA,MAAA,cAAA;YAAA;UAAA;QAAA;QAsB1C,IAAA,CAAKU,QAAL,CAAc;UAACxB,QAAQ,EAAEa,WAAX;UAAwBC,YAAY,EAAZA;QAAxB,CAAd,CAAA;MACD,CAvBD,MAuBO;QACL,IAAA,CAAKU,QAAL,CAAc;UACZxB,QAAQ,EAAEnC,uBAAuB,CAACmC,QAAD,EAAWO,WAAX,CADrB;UAEZO,YAAY,EAAE,CAAA;QAFF,CAAd,CAAA;MAID;IACF;;;mCAGc;MAAA,IAAA,WAAA,GACoB,IAAA,CAAKf,KADzB;QACNC,QADM,GAAA,WAAA,CACNA,QADM;QACIc,YADJ,GAAA,WAAA,CACIA,YADJ;MAAA,IAENW,aAFM,GAEkEzB,QAFlE,CAENyB,aAFM;QAESC,YAFT,GAEkE1B,QAFlE,CAES0B,YAFT;QAEuBC,eAFvB,GAEkE3B,QAFlE,CAEuB2B,eAFvB;QAEwCC,sBAFxC,GAEkE5B,QAFlE,CAEwC4B,sBAFxC;MAAA,IAAA,WAAA,GAKyD,IAAA,CAAK3B,KAL9D;QAKNhC,OALM,GAAA,WAAA,CAKNA,OALM;QAKGC,MALH,GAAA,WAAA,CAKGA,MALH;QAKWC,QALX,GAAA,WAAA,CAKWA,QALX;QAKqBC,SALrB,GAAA,WAAA,CAKqBA,SALrB;QAKgCqB,QALhC,GAAA,WAAA,CAKgCA,QALhC;QAK0CoC,WAL1C,GAAA,WAAA,CAK0CA,WAL1C;MAAA,IAAA,YAAA,GAqBT,IAAA,CAAK5B,KArBI;QASX5B,cATW,GAAA,YAAA,CASXA,cATW;QAUXC,cAVW,GAAA,YAAA,CAUXA,cAVW;QAWXC,kBAXW,GAAA,YAAA,CAWXA,kBAXW;QAYXC,kBAZW,GAAA,YAAA,CAYXA,kBAZW;QAaXG,gBAbW,GAAA,YAAA,CAaXA,gBAbW;QAcXC,cAdW,GAAA,YAAA,CAcXA,cAdW;QAeXE,gBAfW,GAAA,YAAA,CAeXA,gBAfW;QAgBXC,gBAhBW,GAAA,YAAA,CAgBXA,gBAhBW;QAiBXC,oBAjBW,GAAA,YAAA,CAiBXA,oBAjBW;QAkBXC,oBAlBW,GAAA,YAAA,CAkBXA,oBAlBW;QAmBXJ,cAnBW,GAAA,YAAA,CAmBXA,cAnBW;QAoBXiD,iBApBW,GAAA,YAAA,CAoBXA,iBApBW;MAAA,IAAA,YAAA,GAgCT,IAAA,CAAK7B,KAhCI;QAyBXf,YAzBW,GAAA,YAAA,CAyBXA,YAzBW;QA0BXG,YA1BW,GAAA,YAAA,CA0BXA,YA1BW;QA2BXC,SA3BW,GAAA,YAAA,CA2BXA,SA3BW;QA4BXC,YA5BW,GAAA,YAAA,CA4BXA,YA5BW;QA6BXW,gBA7BW,GAAA,YAAA,CA6BXA,gBA7BW;QA8BXV,YA9BW,GAAA,YAAA,CA8BXA,YA9BW;QA+BXuC,cA/BW,GAAA,YAAA,CA+BXA,cA/BW;MAkCb,IAAMC,gBAAgB,GAAG,IAAA,CAAKC,gBAAL,CAAsB,eAAtB,EAAuCvE,iBAAvC,CAAzB;MACA,IAAMwE,kBAAkB,GAAG,IAAA,CAAKD,gBAAL,CAAsB,iBAAtB,EAAyCxE,SAAzC,CAA3B;MACA,IAAM0E,gBAAgB,GAAG,IAAA,CAAKF,gBAAL,CAAsB,cAAtB,EAAsCxE,SAAtC,CAAzB;MACA,IAAM2E,WAAW,GAAG,IAAA,CAAKH,gBAAL,CAAsB,QAAtB,EAAgCzE,gBAAhC,CAApB;MAGA,IAAM6E,gBAAgB,GACpB,IAAA,CAAKC,oBAAL,CAA0B,eAA1B,EAA2CX,eAA3C,CAAA,IACA,IAAIK,gBAAJ,CACE;QACEO,SAAS,EAAEzB,YAAY,CAACa,eAAbb,IAAiC,YAAA;UAAA,OAAMA,YAAY,CAACa,eAAnB;QAAA,CAD9C;QAGExD,QAAQ,EAARA,QAHF;QAIEU,cAAc,EAAdA,cAJF;QAKEX,MAAM,EAANA,MALF;QAMEE,SAAS,EAATA,SANF;QAOEqB,QAAQ,EAARA,QAPF;QAQED,YAAY,EAAE,IAAA,CAAKgD,mBAAL,CAAyBhD,YAAzB,CARhB;QASEH,YAAY,EAAE,IAAA,CAAKmD,mBAAL,CAAyBnD,YAAzB,CAThB;QAUEH,YAAY,EAAE,IAAA,CAAKsD,mBAAL,CAAyBtD,YAAzB,CAVhB;QAYE2C,WAAW,EAAEA,WAAW,IAAI;UAC1BY,UAAU,EAAEZ,WAAW,CAACjC,QADE;UAE1BJ,YAAY,EAAEqC,WAAW,CAACrC,YAFA;UAG1BH,YAAY,EAAEwC,WAAW,CAACxC,YAHA;UAI1BH,YAAY,EAAE2C,WAAW,CAAC3C;QAJA;MAZ9B,CADF,EAoBE,IAAA,CAAKwD,gBAAL,CAAsB;QACpBC,EAAE,EAAE,eADgB;QAEpBZ,cAAc,EAAE;UACdvC,YAAY,EAAEuC,cAAc,CAACvC,YADf;UAEdH,YAAY,EAAE0C,cAAc,CAAC1C,YAFf;UAGdH,YAAY,EAAE6C,cAAc,CAAC7C;QAHf;MAFI,CAAtB,CApBF,EA4BE;QACEoB,IAAI,EAAEqB,eADR;QAEEc,UAAU,EAAE/C;MAFd,CA5BF,CAFF;MAoCA,IAAMkD,gBAAgB,GACpB,CAACzE,QAAD,IACAF,OADA,IAEA,IAAA,CAAKqE,oBAAL,CAA0B,iBAA1B,EAA6CV,sBAA7C,CAFA,IAGA,IAAIM,kBAAJ,CACE;QACEK,SAAS,EACPzB,YAAY,CAACc,sBAAbd,IAAwC,YAAA;UAAA,OAAMA,YAAY,CAACc,sBAAnB;QAAA,CAF5C;QAIEiB,UAAU,EAAExE,cAJd;QAKEyE,UAAU,EAAExE,cALd;QAMEyE,cAAc,EAAExE,kBANlB;QAOEyE,cAAc,EAAExE,kBAPlB;QAQEyE,OAAO,EAAEtE,gBARX;QASEuE,UAAU,EAAEtE,cATd;QAUEuE,aAAa,EAAErB,iBAVjB;QAYEsB,QAAQ,EAAE,IAAA,CAAKZ,mBAAL,CAAyBtD,YAAzB,CAZZ;QAaEmE,QAAQ,EAAE,IAAA,CAAKb,mBAAL,CAAyBjD,YAAzB,CAbZ;QAcE+D,YAAY,EAAE,IAAA,CAAKd,mBAAL,CAAyBtC,gBAAzB,CAdhB;QAgBE2B,WAAW,EAAEA,WAAW,IAAI;UAC1B0B,OAAO,EAAE1B,WAAW,CAACjC,QADK;UAE1BwD,QAAQ,EAAEvB,WAAW,CAAC3C,YAFI;UAG1BmE,QAAQ,EAAExB,WAAW,CAACtC;QAHI;MAhB9B,CADF,EAuBE,IAAA,CAAKmD,gBAAL,CAAsB;QACpBC,EAAE,EAAE,iBADgB;QAEpBZ,cAAc,EAAE;UACdqB,QAAQ,EAAErB,cAAc,CAAC7C,YADX;UAEdmE,QAAQ,EAAEtB,cAAc,CAACxC,YAFX;UAGd+D,YAAY,EAAEvB,cAAc,CAAC7B;QAHf;MAFI,CAAtB,CAvBF,EA+BE;QACEI,IAAI,EAAEsB,sBADR;QAEE2B,OAAO,EAAE7D;MAFX,CA/BF,CAJF;MAyCA,IAAM8D,SAAS,GACb,IAAA,CAAKlB,oBAAL,CAA0B,aAA1B,EAAyCZ,YAAzC,CAAA,IACA,IAAIS,gBAAJ,CACE;QACEI,SAAS,EAAEzB,YAAY,CAACY,YAAbZ,IAA8B,YAAA;UAAA,OAAMA,YAAY,CAACY,YAAnB;QAAA,CAD3C;QAGEmB,UAAU,EAAExE,cAHd;QAIEyE,UAAU,EAAExE,cAJd;QAKEyE,cAAc,EAAExE,kBALlB;QAMEyE,cAAc,EAAExE,kBANlB;QAOEyE,OAAO,EAAEtE,gBAPX;QAQEuE,UAAU,EAAEtE,cARd;QASEuE,aAAa,EAAErB,iBATjB;QAWEsB,QAAQ,EAAE,IAAA,CAAKZ,mBAAL,CAAyBtD,YAAzB,CAXZ;QAYEmE,QAAQ,EAAE,IAAA,CAAKb,mBAAL,CAAyBjD,YAAzB,CAZZ;QAaE+D,YAAY,EAAE,IAAA,CAAKd,mBAAL,CAAyBtC,gBAAzB,CAbhB;QAeE2B,WAAW,EAAEA,WAAW,IAAI;UAC1B0B,OAAO,EAAE1B,WAAW,CAACjC,QADK;UAE1BwD,QAAQ,EAAEvB,WAAW,CAAC3C,YAFI;UAG1BmE,QAAQ,EAAExB,WAAW,CAACtC;QAHI;MAf9B,CADF,EAsBE,IAAA,CAAKmD,gBAAL,CAAsB;QACpBC,EAAE,EAAE,cADgB;QAEpBZ,cAAc,EAAE;UACdqB,QAAQ,EAAErB,cAAc,CAAC7C,YADX;UAEdmE,QAAQ,EAAEtB,cAAc,CAACxC,YAFX;UAGd+D,YAAY,EAAEvB,cAAc,CAAC7B;QAHf;MAFI,CAAtB,CAtBF,EA8BE;QACEI,IAAI,EAAEoB,YADR;QAEE6B,OAAO,EAAE7D;MAFX,CA9BF,CAFF;MAsCA,IAAM+D,UAAU,GACd,IAAA,CAAKnB,oBAAL,CAA0B,QAA1B,EAAoCb,aAApC,CAAA,IACA,IAAIW,WAAJ,CACE;QACEG,SAAS,EAAEzB,YAAY,CAACW,aAAbX,IAA+B,YAAA;UAAA,OAAMA,YAAY,CAACW,aAAnB;QAAA,CAD5C;QAGExD,OAAO,EAAPA,OAHF;QAIEC,MAAM,EAANA,MAJF;QAKEwF,WAAW,EAAE5E,gBALf;QAME6E,WAAW,EAAE5E,gBANf;QAOE6E,eAAe,EAAE5E,oBAPnB;QAQE6E,eAAe,EAAE5E,oBARnB;QASEZ,cAAc,EAAdA,cATF;QAUEC,cAAc,EAAdA,cAVF;QAWEC,kBAAkB,EAAlBA,kBAXF;QAYEC,kBAAkB,EAAlBA,kBAZF;QAcEa,YAAY,EAAE,IAAA,CAAKmD,mBAAL,CAAyBnD,YAAzB,CAdhB;QAeEH,YAAY,EAAE,IAAA,CAAKsD,mBAAL,CAAyBtD,YAAzB,CAfhB;QAgBEI,SAAS,EAAE,IAAA,CAAKkD,mBAAL,CAAyBlD,SAAzB,CAhBb;QAiBEC,YAAY,EAAE,IAAA,CAAKiD,mBAAL,CAAyBjD,YAAzB,CAjBhB;QAmBEsC,WAAW,EAAEA,WAAW,IAAI;UAC1BiC,WAAW,EAAEjC,WAAW,CAACjC,QADC;UAE1BP,YAAY,EAAEwC,WAAW,CAACxC,YAFA;UAG1BH,YAAY,EAAE2C,WAAW,CAAC3C,YAHA;UAI1BI,SAAS,EAAEuC,WAAW,CAACvC,SAJG;UAK1BC,YAAY,EAAEsC,WAAW,CAACtC;QALA;MAnB9B,CADF,EA4BE,IAAA,CAAKmD,gBAAL,CAAsB;QACpBC,EAAE,EAAE,QADgB;QAEpBZ,cAAc,EAAE;UACd1C,YAAY,EAAE0C,cAAc,CAAC1C,YADf;UAEdH,YAAY,EAAE6C,cAAc,CAAC7C,YAFf;UAGdI,SAAS,EAAEyC,cAAc,CAACzC,SAHZ;UAIdC,YAAY,EAAEwC,cAAc,CAACxC;QAJf;MAFI,CAAtB,CA5BF,EAqCE;QACEe,IAAI,EAAEmB,aADR;QAEEqC,WAAW,EAAEpE,cAFf;QAGEqE,sBAAsB,EAAE,IAAA,CAAKC,oBAAL,CAA0BvC,aAA1B;MAH1B,CArCF,CAFF;MA8CA,OAAO,CAEL,CAACtD,QAAD,IAAakE,gBAFR,EAGLO,gBAHK,EAILY,SAJK,EAKLC,UALK,EAOLtF,QAAQ,IAAIkE,gBAPP,CAAP;IASD;;;yCAGoB/B,I,EAAM;MAAA,IAClByD,sBADkB,GACQ,IAAA,CAAK9D,KADb,CAClB8D,sBADkB;MAEzB,OAAO,MAAM,CAACE,QAAP,CAAgBF,sBAAhB,CAAA,GACH,IAAI,CAACG,SAAL,CAAe,UAAA,CAAC,EAAA;QAAA,OAAIC,CAAC,CAAC9C,QAAF8C,CAAW7C,KAAX6C,KAAqBJ,sBAAzB;MAAA,CAAhB,CADG,GAEH,IAFJ;IAGD;;;EA5QuCzG,c;SAArBwC,Y;AA+QrBA,YAAY,CAACsE,SAAbtE,GAAyB,cAAzBA;AACAA,YAAY,CAAC9B,YAAb8B,GAA4B9B,YAA5B8B","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, log} from '@deck.gl/core';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport PathLayer from '../path-layer/path-layer';\n// Use primitive layer to avoid \"Composite Composite\" layers for now\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport {replaceInRange} from '../utils';\n\nimport {getGeojsonFeatures, separateGeojsonFeatures} from './geojson';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  elevationScale: 1,\n\n  pointRadiusUnits: 'meters',\n  pointRadiusScale: 1,\n  pointRadiusMinPixels: 0, //  min point radius in pixels\n  pointRadiusMaxPixels: Number.MAX_SAFE_INTEGER, // max point radius in pixels\n\n  // Line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Point and polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point radius\n  getRadius: {type: 'accessor', value: 1},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\nexport default class GeoJsonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      features: {}\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({props, changeFlags}) {\n    if (!changeFlags.dataChanged) {\n      return;\n    }\n    const features = getGeojsonFeatures(props.data);\n    const wrapFeature = this.getSubLayerRow.bind(this);\n\n    if (Array.isArray(changeFlags.dataChanged)) {\n      const oldFeatures = this.state.features;\n      const newFeatures = {};\n      const featuresDiff = {};\n      for (const key in oldFeatures) {\n        newFeatures[key] = oldFeatures[key].slice();\n        featuresDiff[key] = [];\n      }\n\n      for (const dataRange of changeFlags.dataChanged) {\n        const partialFeatures = separateGeojsonFeatures(features, wrapFeature, dataRange);\n        for (const key in oldFeatures) {\n          featuresDiff[key].push(\n            replaceInRange({\n              data: newFeatures[key],\n              getIndex: f => f.__source.index,\n              dataRange,\n              replace: partialFeatures[key]\n            })\n          );\n        }\n      }\n      this.setState({features: newFeatures, featuresDiff});\n    } else {\n      this.setState({\n        features: separateGeojsonFeatures(features, wrapFeature),\n        featuresDiff: {}\n      });\n    }\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    const {features, featuresDiff} = this.state;\n    const {pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures} = features;\n\n    // Layer composition props\n    const {stroked, filled, extruded, wireframe, material, transitions} = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      pointRadiusUnits,\n      pointRadiusScale,\n      pointRadiusMinPixels,\n      pointRadiusMaxPixels,\n      elevationScale,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getLineColor,\n      getFillColor,\n      getRadius,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      updateTriggers\n    } = this.props;\n\n    const PolygonFillLayer = this.getSubLayerClass('polygons-fill', SolidPolygonLayer);\n    const PolygonStrokeLayer = this.getSubLayerClass('polygons-stroke', PathLayer);\n    const LineStringsLayer = this.getSubLayerClass('line-strings', PathLayer);\n    const PointsLayer = this.getSubLayerClass('points', ScatterplotLayer);\n\n    // Filled Polygon Layer\n    const polygonFillLayer =\n      this.shouldRenderSubLayer('polygons-fill', polygonFeatures) &&\n      new PolygonFillLayer(\n        {\n          _dataDiff: featuresDiff.polygonFeatures && (() => featuresDiff.polygonFeatures),\n\n          extruded,\n          elevationScale,\n          filled,\n          wireframe,\n          material,\n          getElevation: this.getSubLayerAccessor(getElevation),\n          getFillColor: this.getSubLayerAccessor(getFillColor),\n          getLineColor: this.getSubLayerAccessor(getLineColor),\n\n          transitions: transitions && {\n            getPolygon: transitions.geometry,\n            getElevation: transitions.getElevation,\n            getFillColor: transitions.getFillColor,\n            getLineColor: transitions.getLineColor\n          }\n        },\n        this.getSubLayerProps({\n          id: 'polygons-fill',\n          updateTriggers: {\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data: polygonFeatures,\n          getPolygon: getCoordinates\n        }\n      );\n\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('polygons-stroke', polygonOutlineFeatures) &&\n      new PolygonStrokeLayer(\n        {\n          _dataDiff:\n            featuresDiff.polygonOutlineFeatures && (() => featuresDiff.polygonOutlineFeatures),\n\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray),\n\n          transitions: transitions && {\n            getPath: transitions.geometry,\n            getColor: transitions.getLineColor,\n            getWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'polygons-stroke',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: polygonOutlineFeatures,\n          getPath: getCoordinates\n        }\n      );\n\n    const pathLayer =\n      this.shouldRenderSubLayer('linestrings', lineFeatures) &&\n      new LineStringsLayer(\n        {\n          _dataDiff: featuresDiff.lineFeatures && (() => featuresDiff.lineFeatures),\n\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray),\n\n          transitions: transitions && {\n            getPath: transitions.geometry,\n            getColor: transitions.getLineColor,\n            getWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'line-strings',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: lineFeatures,\n          getPath: getCoordinates\n        }\n      );\n\n    const pointLayer =\n      this.shouldRenderSubLayer('points', pointFeatures) &&\n      new PointsLayer(\n        {\n          _dataDiff: featuresDiff.pointFeatures && (() => featuresDiff.pointFeatures),\n\n          stroked,\n          filled,\n          radiusUnits: pointRadiusUnits,\n          radiusScale: pointRadiusScale,\n          radiusMinPixels: pointRadiusMinPixels,\n          radiusMaxPixels: pointRadiusMaxPixels,\n          lineWidthUnits,\n          lineWidthScale,\n          lineWidthMinPixels,\n          lineWidthMaxPixels,\n\n          getFillColor: this.getSubLayerAccessor(getFillColor),\n          getLineColor: this.getSubLayerAccessor(getLineColor),\n          getRadius: this.getSubLayerAccessor(getRadius),\n          getLineWidth: this.getSubLayerAccessor(getLineWidth),\n\n          transitions: transitions && {\n            getPosition: transitions.geometry,\n            getFillColor: transitions.getFillColor,\n            getLineColor: transitions.getLineColor,\n            getRadius: transitions.getRadius,\n            getLineWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'points',\n          updateTriggers: {\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor,\n            getRadius: updateTriggers.getRadius,\n            getLineWidth: updateTriggers.getLineWidth\n          }\n        }),\n        {\n          data: pointFeatures,\n          getPosition: getCoordinates,\n          highlightedObjectIndex: this._getHighlightedIndex(pointFeatures)\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonFillLayer,\n      polygonLineLayer,\n      pathLayer,\n      pointLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonFillLayer\n    ];\n  }\n  /* eslint-enable complexity */\n\n  _getHighlightedIndex(data) {\n    const {highlightedObjectIndex} = this.props;\n    return Number.isFinite(highlightedObjectIndex)\n      ? data.findIndex(d => d.__source.index === highlightedObjectIndex)\n      : null;\n  }\n}\n\nGeoJsonLayer.layerName = 'GeoJsonLayer';\nGeoJsonLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}