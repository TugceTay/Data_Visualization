{"ast":null,"code":"export function formatTime(ms) {\n  let formatted;\n  if (ms < 10) {\n    formatted = \"\".concat(ms.toFixed(2), \"ms\");\n  } else if (ms < 100) {\n    formatted = \"\".concat(ms.toFixed(1), \"ms\");\n  } else if (ms < 1000) {\n    formatted = \"\".concat(ms.toFixed(0), \"ms\");\n  } else {\n    formatted = \"\".concat((ms / 1000).toFixed(2), \"s\");\n  }\n  return formatted;\n}\nexport function leftPad(string) {\n  let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  const padLength = Math.max(length - string.length, 0);\n  return \"\".concat(' '.repeat(padLength)).concat(string);\n}\nexport function rightPad(string) {\n  let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  const padLength = Math.max(length - string.length, 0);\n  return \"\".concat(string).concat(' '.repeat(padLength));\n}\nexport function formatValue(v) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const EPSILON = 1e-16;\n  const {\n    isInteger = false\n  } = opts;\n  if (Array.isArray(v) || ArrayBuffer.isView(v)) {\n    return formatArrayValue(v, opts);\n  }\n  if (!Number.isFinite(v)) {\n    return String(v);\n  }\n  if (Math.abs(v) < EPSILON) {\n    return isInteger ? '0' : '0.';\n  }\n  if (isInteger) {\n    return v.toFixed(0);\n  }\n  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {\n    return v.toFixed(0);\n  }\n  const string = v.toPrecision(2);\n  const decimal = string.indexOf('.0');\n  return decimal === string.length - 2 ? string.slice(0, -1) : string;\n}\nfunction formatArrayValue(v, opts) {\n  const {\n    maxElts = 16,\n    size = 1\n  } = opts;\n  let string = '[';\n  for (let i = 0; i < v.length && i < maxElts; ++i) {\n    if (i > 0) {\n      string += \",\".concat(i % size === 0 ? ' ' : '');\n    }\n    string += formatValue(v[i], opts);\n  }\n  const terminator = v.length > maxElts ? '...' : ']';\n  return \"\".concat(string).concat(terminator);\n}\nexport function formatImage(image, message, scale) {\n  let maxWidth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 600;\n  const imageUrl = image.src.replace(/\\(/g, '%28').replace(/\\)/g, '%29');\n  if (image.width > maxWidth) {\n    scale = Math.min(scale, maxWidth / image.width);\n  }\n  const width = image.width * scale;\n  const height = image.height * scale;\n  const style = ['font-size:1px;', \"padding:\".concat(Math.floor(height / 2), \"px \").concat(Math.floor(width / 2), \"px;\"), \"line-height:\".concat(height, \"px;\"), \"background:url(\".concat(imageUrl, \");\"), \"background-size:\".concat(width, \"px \").concat(height, \"px;\"), 'color:transparent;'].join('');\n  return [\"\".concat(message, \" %c+\"), style];\n}","map":{"version":3,"sources":["../../../src/utils/formatters.ts"],"names":["formatTime","ms","formatted","toFixed","leftPad","string","length","padLength","Math","max","repeat","rightPad","formatValue","v","opts","EPSILON","isInteger","Array","isArray","ArrayBuffer","isView","formatArrayValue","Number","isFinite","String","abs","toPrecision","decimal","indexOf","slice","maxElts","size","i","terminator","formatImage","image","message","scale","maxWidth","imageUrl","src","replace","width","min","height","style","floor","join"],"mappings":"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","sourcesContent":["// TODO: Currently unused, keeping in case we want it later for log formatting\nexport function formatTime(ms: number): string {\n  let formatted;\n  if (ms < 10) {\n    formatted = `${ms.toFixed(2)}ms`;\n  } else if (ms < 100) {\n    formatted = `${ms.toFixed(1)}ms`;\n  } else if (ms < 1000) {\n    formatted = `${ms.toFixed(0)}ms`;\n  } else {\n    formatted = `${(ms / 1000).toFixed(2)}s`;\n  }\n  return formatted;\n}\n\nexport function leftPad(string: string, length: number = 8): string {\n  const padLength = Math.max(length - string.length, 0);\n  return `${' '.repeat(padLength)}${string}`;\n}\n\nexport function rightPad(string: string, length: number = 8): string {\n  const padLength = Math.max(length - string.length, 0);\n  return `${string}${' '.repeat(padLength)}`;\n}\n\nexport function formatValue(v: unknown, opts: {isInteger?: boolean} = {}): string {\n  const EPSILON = 1e-16;\n  const {isInteger = false} = opts;\n  if (Array.isArray(v) || ArrayBuffer.isView(v)) {\n    return formatArrayValue(v, opts);\n  }\n  if (!Number.isFinite(v)) {\n    return String(v);\n  }\n  // @ts-expect-error\n  if (Math.abs(v) < EPSILON) {\n    return isInteger ? '0' : '0.';\n  }\n  if (isInteger) {\n    // @ts-expect-error\n    return v.toFixed(0);\n  }\n  // @ts-expect-error\n  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {\n    // @ts-expect-error\n    return v.toFixed(0);\n  }\n  // @ts-expect-error\n  const string = v.toPrecision(2);\n  const decimal = string.indexOf('.0');\n  return decimal === string.length - 2 ? string.slice(0, -1) : string;\n}\n\n/** Helper to formatValue */\nfunction formatArrayValue(v, opts) {\n  const {maxElts = 16, size = 1} = opts;\n  let string = '[';\n  for (let i = 0; i < v.length && i < maxElts; ++i) {\n    if (i > 0) {\n      string += `,${i % size === 0 ? ' ' : ''}`;\n    }\n    string += formatValue(v[i], opts);\n  }\n  const terminator = v.length > maxElts ? '...' : ']';\n  return `${string}${terminator}`;\n}\n\n/** Inspired by https://github.com/hughsk/console-image (MIT license) */\nexport function formatImage(image, message, scale, maxWidth = 600) {\n  const imageUrl = image.src.replace(/\\(/g, '%28').replace(/\\)/g, '%29');\n\n  if (image.width > maxWidth) {\n    scale = Math.min(scale, maxWidth / image.width);\n  }\n\n  const width = image.width * scale;\n  const height = image.height * scale;\n\n  const style = [\n    'font-size:1px;',\n    `padding:${Math.floor(height / 2)}px ${Math.floor(width / 2)}px;`,\n    `line-height:${height}px;`,\n    `background:url(${imageUrl});`,\n    `background-size:${width}px ${height}px;`,\n    'color:transparent;'\n  ].join('');\n\n  return [`${message} %c+`, style];\n}\n"]},"metadata":{},"sourceType":"module"}