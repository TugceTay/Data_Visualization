{"ast":null,"code":"import MathArray from './base/math-array';\nimport Quaternion from './quaternion';\nimport { clamp } from '../lib/common';\nimport { checkNumber } from '../lib/validators';\nconst ERR_UNKNOWN_ORDER = 'Unknown Euler angle order';\nconst ALMOST_ONE = 0.99999;\nvar RotationOrder;\n(function (RotationOrder) {\n  RotationOrder[RotationOrder[\"ZYX\"] = 0] = \"ZYX\";\n  RotationOrder[RotationOrder[\"YXZ\"] = 1] = \"YXZ\";\n  RotationOrder[RotationOrder[\"XZY\"] = 2] = \"XZY\";\n  RotationOrder[RotationOrder[\"ZXY\"] = 3] = \"ZXY\";\n  RotationOrder[RotationOrder[\"YZX\"] = 4] = \"YZX\";\n  RotationOrder[RotationOrder[\"XYZ\"] = 5] = \"XYZ\";\n})(RotationOrder || (RotationOrder = {}));\nexport default class Euler extends MathArray {\n  static get ZYX() {\n    return RotationOrder.ZYX;\n  }\n  static get YXZ() {\n    return RotationOrder.YXZ;\n  }\n  static get XZY() {\n    return RotationOrder.XZY;\n  }\n  static get ZXY() {\n    return RotationOrder.ZXY;\n  }\n  static get YZX() {\n    return RotationOrder.YZX;\n  }\n  static get XYZ() {\n    return RotationOrder.XYZ;\n  }\n  static get RollPitchYaw() {\n    return RotationOrder.ZYX;\n  }\n  static get DefaultOrder() {\n    return RotationOrder.ZYX;\n  }\n  static get RotationOrders() {\n    return RotationOrder;\n  }\n  static rotationOrder(order) {\n    return RotationOrder[order];\n  }\n  get ELEMENTS() {\n    return 4;\n  }\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Euler.DefaultOrder;\n    super(-0, -0, -0, -0);\n    if (arguments.length > 0 && Array.isArray(arguments[0])) {\n      this.fromVector3(...arguments);\n    } else {\n      this.set(x, y, z, order);\n    }\n  }\n  fromQuaternion(quaternion) {\n    const [x, y, z, w] = quaternion;\n    const ysqr = y * y;\n    const t0 = -2 * (ysqr + z * z) + 1;\n    const t1 = +2 * (x * y + w * z);\n    let t2 = -2 * (x * z - w * y);\n    const t3 = +2 * (y * z + w * x);\n    const t4 = -2 * (x * x + ysqr) + 1;\n    t2 = t2 > 1 ? 1 : t2;\n    t2 = t2 < -1 ? -1 : t2;\n    const roll = Math.atan2(t3, t4);\n    const pitch = Math.asin(t2);\n    const yaw = Math.atan2(t1, t0);\n    return this.set(roll, pitch, yaw, Euler.RollPitchYaw);\n  }\n  fromObject(object) {\n    throw new Error('not implemented');\n  }\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = Number.isFinite(array[3]) || this.order;\n    return this.check();\n  }\n  set() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let order = arguments.length > 3 ? arguments[3] : undefined;\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = Number.isFinite(order) ? order : this[3];\n    return this.check();\n  }\n  validate() {\n    return validateOrder(this[3]) && Number.isFinite(this[0]) && Number.isFinite(this[1]) && Number.isFinite(this[2]);\n  }\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    return array;\n  }\n  toArray4() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    array[offset + 3] = this[3];\n    return array;\n  }\n  toVector3() {\n    let result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0];\n    result[0] = this[0];\n    result[1] = this[1];\n    result[2] = this[2];\n    return result;\n  }\n  get x() {\n    return this[0];\n  }\n  set x(value) {\n    this[0] = checkNumber(value);\n  }\n  get y() {\n    return this[1];\n  }\n  set y(value) {\n    this[1] = checkNumber(value);\n  }\n  get z() {\n    return this[2];\n  }\n  set z(value) {\n    this[2] = checkNumber(value);\n  }\n  get alpha() {\n    return this[0];\n  }\n  set alpha(value) {\n    this[0] = checkNumber(value);\n  }\n  get beta() {\n    return this[1];\n  }\n  set beta(value) {\n    this[1] = checkNumber(value);\n  }\n  get gamma() {\n    return this[2];\n  }\n  set gamma(value) {\n    this[2] = checkNumber(value);\n  }\n  get phi() {\n    return this[0];\n  }\n  set phi(value) {\n    this[0] = checkNumber(value);\n  }\n  get theta() {\n    return this[1];\n  }\n  set theta(value) {\n    this[1] = checkNumber(value);\n  }\n  get psi() {\n    return this[2];\n  }\n  set psi(value) {\n    this[2] = checkNumber(value);\n  }\n  get roll() {\n    return this[0];\n  }\n  set roll(value) {\n    this[0] = checkNumber(value);\n  }\n  get pitch() {\n    return this[1];\n  }\n  set pitch(value) {\n    this[1] = checkNumber(value);\n  }\n  get yaw() {\n    return this[2];\n  }\n  set yaw(value) {\n    this[2] = checkNumber(value);\n  }\n  get order() {\n    return this[3];\n  }\n  set order(value) {\n    this[3] = checkOrder(value);\n  }\n  fromVector3(v, order) {\n    return this.set(v[0], v[1], v[2], Number.isFinite(order) ? order : this[3]);\n  }\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this[0] = array[0 + offset];\n    this[1] = array[1 + offset];\n    this[2] = array[2 + offset];\n    if (array[3] !== undefined) {\n      this[3] = array[3];\n    }\n    return this.check();\n  }\n  fromRollPitchYaw(roll, pitch, yaw) {\n    return this.set(roll, pitch, yaw, RotationOrder.ZYX);\n  }\n  fromRotationMatrix(m) {\n    let order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Euler.DefaultOrder;\n    this._fromRotationMatrix(m, order);\n    return this.check();\n  }\n  getRotationMatrix(m) {\n    return this._getRotationMatrix(m);\n  }\n  getQuaternion() {\n    const q = new Quaternion();\n    switch (this[4]) {\n      case RotationOrder.XYZ:\n        return q.rotateX(this[0]).rotateY(this[1]).rotateZ(this[2]);\n      case RotationOrder.YXZ:\n        return q.rotateY(this[0]).rotateX(this[1]).rotateZ(this[2]);\n      case RotationOrder.ZXY:\n        return q.rotateZ(this[0]).rotateX(this[1]).rotateY(this[2]);\n      case RotationOrder.ZYX:\n        return q.rotateZ(this[0]).rotateY(this[1]).rotateX(this[2]);\n      case RotationOrder.YZX:\n        return q.rotateY(this[0]).rotateZ(this[1]).rotateX(this[2]);\n      case RotationOrder.XZY:\n        return q.rotateX(this[0]).rotateZ(this[1]).rotateY(this[2]);\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n  }\n  _fromRotationMatrix(m) {\n    let order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Euler.DefaultOrder;\n    const m11 = m[0],\n      m12 = m[4],\n      m13 = m[8];\n    const m21 = m[1],\n      m22 = m[5],\n      m23 = m[9];\n    const m31 = m[2],\n      m32 = m[6],\n      m33 = m[10];\n    order = order || this[3];\n    switch (order) {\n      case Euler.XYZ:\n        this[1] = Math.asin(clamp(m13, -1, 1));\n        if (Math.abs(m13) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m33);\n          this[2] = Math.atan2(-m12, m11);\n        } else {\n          this[0] = Math.atan2(m32, m22);\n          this[2] = 0;\n        }\n        break;\n      case Euler.YXZ:\n        this[0] = Math.asin(-clamp(m23, -1, 1));\n        if (Math.abs(m23) < ALMOST_ONE) {\n          this[1] = Math.atan2(m13, m33);\n          this[2] = Math.atan2(m21, m22);\n        } else {\n          this[1] = Math.atan2(-m31, m11);\n          this[2] = 0;\n        }\n        break;\n      case Euler.ZXY:\n        this[0] = Math.asin(clamp(m32, -1, 1));\n        if (Math.abs(m32) < ALMOST_ONE) {\n          this[1] = Math.atan2(-m31, m33);\n          this[2] = Math.atan2(-m12, m22);\n        } else {\n          this[1] = 0;\n          this[2] = Math.atan2(m21, m11);\n        }\n        break;\n      case Euler.ZYX:\n        this[1] = Math.asin(-clamp(m31, -1, 1));\n        if (Math.abs(m31) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m33);\n          this[2] = Math.atan2(m21, m11);\n        } else {\n          this[0] = 0;\n          this[2] = Math.atan2(-m12, m22);\n        }\n        break;\n      case Euler.YZX:\n        this[2] = Math.asin(clamp(m21, -1, 1));\n        if (Math.abs(m21) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m22);\n          this[1] = Math.atan2(-m31, m11);\n        } else {\n          this[0] = 0;\n          this[1] = Math.atan2(m13, m33);\n        }\n        break;\n      case Euler.XZY:\n        this[2] = Math.asin(-clamp(m12, -1, 1));\n        if (Math.abs(m12) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m22);\n          this[1] = Math.atan2(m13, m11);\n        } else {\n          this[0] = Math.atan2(-m23, m33);\n          this[1] = 0;\n        }\n        break;\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n    this[3] = order;\n    return this;\n  }\n  _getRotationMatrix(result) {\n    const te = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const a = Math.cos(x);\n    const c = Math.cos(y);\n    const e = Math.cos(z);\n    const b = Math.sin(x);\n    const d = Math.sin(y);\n    const f = Math.sin(z);\n    switch (this[3]) {\n      case Euler.XYZ:\n        {\n          const ae = a * e,\n            af = a * f,\n            be = b * e,\n            bf = b * f;\n          te[0] = c * e;\n          te[4] = -c * f;\n          te[8] = d;\n          te[1] = af + be * d;\n          te[5] = ae - bf * d;\n          te[9] = -b * c;\n          te[2] = bf - ae * d;\n          te[6] = be + af * d;\n          te[10] = a * c;\n          break;\n        }\n      case Euler.YXZ:\n        {\n          const ce = c * e,\n            cf = c * f,\n            de = d * e,\n            df = d * f;\n          te[0] = ce + df * b;\n          te[4] = de * b - cf;\n          te[8] = a * d;\n          te[1] = a * f;\n          te[5] = a * e;\n          te[9] = -b;\n          te[2] = cf * b - de;\n          te[6] = df + ce * b;\n          te[10] = a * c;\n          break;\n        }\n      case Euler.ZXY:\n        {\n          const ce = c * e,\n            cf = c * f,\n            de = d * e,\n            df = d * f;\n          te[0] = ce - df * b;\n          te[4] = -a * f;\n          te[8] = de + cf * b;\n          te[1] = cf + de * b;\n          te[5] = a * e;\n          te[9] = df - ce * b;\n          te[2] = -a * d;\n          te[6] = b;\n          te[10] = a * c;\n          break;\n        }\n      case Euler.ZYX:\n        {\n          const ae = a * e,\n            af = a * f,\n            be = b * e,\n            bf = b * f;\n          te[0] = c * e;\n          te[4] = be * d - af;\n          te[8] = ae * d + bf;\n          te[1] = c * f;\n          te[5] = bf * d + ae;\n          te[9] = af * d - be;\n          te[2] = -d;\n          te[6] = b * c;\n          te[10] = a * c;\n          break;\n        }\n      case Euler.YZX:\n        {\n          const ac = a * c,\n            ad = a * d,\n            bc = b * c,\n            bd = b * d;\n          te[0] = c * e;\n          te[4] = bd - ac * f;\n          te[8] = bc * f + ad;\n          te[1] = f;\n          te[5] = a * e;\n          te[9] = -b * e;\n          te[2] = -d * e;\n          te[6] = ad * f + bc;\n          te[10] = ac - bd * f;\n          break;\n        }\n      case Euler.XZY:\n        {\n          const ac = a * c,\n            ad = a * d,\n            bc = b * c,\n            bd = b * d;\n          te[0] = c * e;\n          te[4] = -f;\n          te[8] = d * e;\n          te[1] = ac * f + bd;\n          te[5] = a * e;\n          te[9] = ad * f - bc;\n          te[2] = bc * f - ad;\n          te[6] = b * e;\n          te[10] = bd * f + ac;\n          break;\n        }\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = 0;\n    te[12] = 0;\n    te[13] = 0;\n    te[14] = 0;\n    te[15] = 1;\n    return te;\n  }\n  toQuaternion() {\n    const cy = Math.cos(this.yaw * 0.5);\n    const sy = Math.sin(this.yaw * 0.5);\n    const cr = Math.cos(this.roll * 0.5);\n    const sr = Math.sin(this.roll * 0.5);\n    const cp = Math.cos(this.pitch * 0.5);\n    const sp = Math.sin(this.pitch * 0.5);\n    const w = cy * cr * cp + sy * sr * sp;\n    const x = cy * sr * cp - sy * cr * sp;\n    const y = cy * cr * sp + sy * sr * cp;\n    const z = sy * cr * cp - cy * sr * sp;\n    return new Quaternion(x, y, z, w);\n  }\n}\nfunction validateOrder(value) {\n  return value >= 0 && value < 6;\n}\nfunction checkOrder(value) {\n  if (value < 0 && value >= 6) {\n    throw new Error(ERR_UNKNOWN_ORDER);\n  }\n  return value;\n}","map":{"version":3,"sources":["../../../src/classes/euler.ts"],"names":["MathArray","Quaternion","clamp","checkNumber","ERR_UNKNOWN_ORDER","ALMOST_ONE","RotationOrder","Euler","ZYX","YXZ","XZY","ZXY","YZX","XYZ","RollPitchYaw","DefaultOrder","RotationOrders","rotationOrder","order","ELEMENTS","constructor","x","y","z","arguments","length","Array","isArray","fromVector3","set","fromQuaternion","quaternion","w","ysqr","t0","t1","t2","t3","t4","roll","Math","atan2","pitch","asin","yaw","fromObject","object","Error","copy","array","Number","isFinite","check","validate","validateOrder","toArray","offset","toArray4","toVector3","result","value","alpha","beta","gamma","phi","theta","psi","checkOrder","v","fromArray","undefined","fromRollPitchYaw","fromRotationMatrix","m","_fromRotationMatrix","getRotationMatrix","_getRotationMatrix","getQuaternion","q","rotateX","rotateY","rotateZ","m11","m12","m13","m21","m22","m23","m31","m32","m33","abs","te","a","cos","c","e","b","sin","d","f","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","toQuaternion","cy","sy","cr","sr","cp","sp"],"mappings":"AAEA,OAAOA,SAAP,MAAsB,mBAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAGA,SAAQC,KAAR,QAAoB,eAApB;AACA,SAAQC,WAAR,QAA0B,mBAA1B;AAGA,MAAMC,iBAAiB,GAAG,2BAA1B;AACA,MAAMC,UAAU,GAAG,OAAnB;IAEKC,a;WAAAA,a;EAAAA,a,CAAAA,a;EAAAA,a,CAAAA,a;EAAAA,a,CAAAA,a;EAAAA,a,CAAAA,a;EAAAA,a,CAAAA,a;EAAAA,a,CAAAA,a;GAAAA,a,KAAAA,a;AASL,eAAe,MAAMC,KAAN,SAAoBP,SAApB,CAA8B;EAE7B,WAAHQ,GAAG,GAAkB;IAC9B,OAAOF,aAAa,CAACE,GAArB;EACD;EACa,WAAHC,GAAG,GAAkB;IAC9B,OAAOH,aAAa,CAACG,GAArB;EACD;EACa,WAAHC,GAAG,GAAkB;IAC9B,OAAOJ,aAAa,CAACI,GAArB;EACD;EACa,WAAHC,GAAG,GAAkB;IAC9B,OAAOL,aAAa,CAACK,GAArB;EACD;EACa,WAAHC,GAAG,GAAkB;IAC9B,OAAON,aAAa,CAACM,GAArB;EACD;EACa,WAAHC,GAAG,GAAkB;IAC9B,OAAOP,aAAa,CAACO,GAArB;EACD;EACsB,WAAZC,YAAY,GAAkB;IACvC,OAAOR,aAAa,CAACE,GAArB;EACD;EACsB,WAAZO,YAAY,GAAkB;IACvC,OAAOT,aAAa,CAACE,GAArB;EACD;EACwB,WAAdQ,cAAc,GAAyB;IAChD,OAAOV,aAAP;EACD;EACmB,OAAbW,aAAa,CAACC,KAAD,EAA+B;IACjD,OAAOZ,aAAa,CAACY,KAAD,CAApB;EACD;EACW,IAARC,QAAQ,GAAW;IACrB,OAAO,CAAP;EACD;EASDC,WAAW,GAAkD;IAAA,IAAjDC,CAAC,uEAAG,CAAL;IAAA,IAAQC,CAAC,uEAAG,CAAZ;IAAA,IAAeC,CAAC,uEAAG,CAAnB;IAAA,IAAsBL,KAAK,uEAAGX,KAAK,CAACQ,YAApC;IAET,KAAA,CAAM,CAAC,CAAP,EAAU,CAAC,CAAX,EAAc,CAAC,CAAf,EAAkB,CAAC,CAAnB,CAAA;IAEA,IAAIS,SAAS,CAACC,MAAVD,GAAmB,CAAnBA,IAAwBE,KAAK,CAACC,OAAND,CAAcF,SAAS,CAAC,CAAD,CAAvBE,CAA5B,EAAyD;MAGvD,IAAA,CAAKE,WAAL,CAAiB,GAAGJ,SAApB,CAAA;IACD,CAJD,MAIO;MACL,IAAA,CAAKK,GAAL,CAASR,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBL,KAAlB,CAAA;IACD;EACF;EAEDY,cAAc,CAACC,UAAD,EAA2C;IACvD,MAAM,CAACV,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUS,CAAV,CAAA,GAAeD,UAArB;IACA,MAAME,IAAI,GAAGX,CAAC,GAAGA,CAAjB;IACA,MAAMY,EAAE,GAAG,CAAC,CAAD,IAAMD,IAAI,GAAGV,CAAC,GAAGA,CAAjB,CAAA,GAAsB,CAAjC;IACA,MAAMY,EAAE,GAAG,CAAC,CAAD,IAAMd,CAAC,GAAGC,CAAJD,GAAQW,CAAC,GAAGT,CAAlB,CAAX;IACA,IAAIa,EAAE,GAAG,CAAC,CAAD,IAAMf,CAAC,GAAGE,CAAJF,GAAQW,CAAC,GAAGV,CAAlB,CAAT;IACA,MAAMe,EAAE,GAAG,CAAC,CAAD,IAAMf,CAAC,GAAGC,CAAJD,GAAQU,CAAC,GAAGX,CAAlB,CAAX;IACA,MAAMiB,EAAE,GAAG,CAAC,CAAD,IAAMjB,CAAC,GAAGA,CAAJA,GAAQY,IAAd,CAAA,GAAsB,CAAjC;IACAG,EAAE,GAAGA,EAAE,GAAG,CAALA,GAAS,CAATA,GAAaA,EAAlBA;IACAA,EAAE,GAAGA,EAAE,GAAG,CAAC,CAANA,GAAU,CAAC,CAAXA,GAAeA,EAApBA;IACA,MAAMG,IAAI,GAAGC,IAAI,CAACC,KAALD,CAAWH,EAAXG,EAAeF,EAAfE,CAAb;IACA,MAAME,KAAK,GAAGF,IAAI,CAACG,IAALH,CAAUJ,EAAVI,CAAd;IACA,MAAMI,GAAG,GAAGJ,IAAI,CAACC,KAALD,CAAWL,EAAXK,EAAeN,EAAfM,CAAZ;IACA,OAAO,IAAA,CAAKX,GAAL,CAASU,IAAT,EAAeG,KAAf,EAAsBE,GAAtB,EAA2BrC,KAAK,CAACO,YAAjC,CAAP;EACD;EAED+B,UAAU,CAACC,MAAD,EAAuB;IAC/B,MAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;EAED;EAODC,IAAI,CAACC,KAAD,EAAsC;IACxC,IAAA,CAAK,CAAL,CAAA,GAAUA,KAAK,CAAC,CAAD,CAAf;IACA,IAAA,CAAK,CAAL,CAAA,GAAUA,KAAK,CAAC,CAAD,CAAf;IACA,IAAA,CAAK,CAAL,CAAA,GAAUA,KAAK,CAAC,CAAD,CAAf;IAEA,IAAA,CAAK,CAAL,CAAA,GAAUC,MAAM,CAACC,QAAPD,CAAgBD,KAAK,CAAC,CAAD,CAArBC,CAAAA,IAA6B,IAAA,CAAKhC,KAA5C;IACA,OAAO,IAAA,CAAKkC,KAAL,EAAP;EACD;EAIDvB,GAAG,GAAkD;IAAA,IAAjDR,CAAC,uEAAG,CAAL;IAAA,IAAQC,CAAC,uEAAG,CAAZ;IAAA,IAAeC,CAAC,uEAAG,CAAnB;IAAA,IAAsBL,KAAtB;IACD,IAAA,CAAK,CAAL,CAAA,GAAUG,CAAV;IACA,IAAA,CAAK,CAAL,CAAA,GAAUC,CAAV;IACA,IAAA,CAAK,CAAL,CAAA,GAAUC,CAAV;IACA,IAAA,CAAK,CAAL,CAAA,GAAU2B,MAAM,CAACC,QAAPD,CAAgBhC,KAAhBgC,CAAAA,GAAyBhC,KAAzBgC,GAAiC,IAAA,CAAK,CAAL,CAA3C;IACA,OAAO,IAAA,CAAKE,KAAL,EAAP;EACD;EAEDC,QAAQ,GAAY;IAClB,OACEC,aAAa,CAAC,IAAA,CAAK,CAAL,CAAD,CAAbA,IACAJ,MAAM,CAACC,QAAPD,CAAgB,IAAA,CAAK,CAAL,CAAhBA,CADAI,IAEAJ,MAAM,CAACC,QAAPD,CAAgB,IAAA,CAAK,CAAL,CAAhBA,CAFAI,IAGAJ,MAAM,CAACC,QAAPD,CAAgB,IAAA,CAAK,CAAL,CAAhBA,CAJF;EAMD;EAGDK,OAAO,GAA6D;IAAA,IAA5DN,KAAmB,uEAAG,EAAvB;IAAA,IAA2BO,MAAc,uEAAG,CAA5C;IACLP,KAAK,CAACO,MAAD,CAALP,GAAgB,IAAA,CAAK,CAAL,CAAhBA;IACAA,KAAK,CAACO,MAAM,GAAG,CAAV,CAALP,GAAoB,IAAA,CAAK,CAAL,CAApBA;IACAA,KAAK,CAACO,MAAM,GAAG,CAAV,CAALP,GAAoB,IAAA,CAAK,CAAL,CAApBA;IACA,OAAOA,KAAP;EACD;EAGDQ,QAAQ,GAA6D;IAAA,IAA5DR,KAAmB,uEAAG,EAAvB;IAAA,IAA2BO,MAAc,uEAAG,CAA5C;IACNP,KAAK,CAACO,MAAD,CAALP,GAAgB,IAAA,CAAK,CAAL,CAAhBA;IACAA,KAAK,CAACO,MAAM,GAAG,CAAV,CAALP,GAAoB,IAAA,CAAK,CAAL,CAApBA;IACAA,KAAK,CAACO,MAAM,GAAG,CAAV,CAALP,GAAoB,IAAA,CAAK,CAAL,CAApBA;IACAA,KAAK,CAACO,MAAM,GAAG,CAAV,CAALP,GAAoB,IAAA,CAAK,CAAL,CAApBA;IACA,OAAOA,KAAP;EACD;EAEDS,SAAS,GAAoD;IAAA,IAAnDC,MAAoB,uEAAG,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAC,CAAV,CAAxB;IACPA,MAAM,CAAC,CAAD,CAANA,GAAY,IAAA,CAAK,CAAL,CAAZA;IACAA,MAAM,CAAC,CAAD,CAANA,GAAY,IAAA,CAAK,CAAL,CAAZA;IACAA,MAAM,CAAC,CAAD,CAANA,GAAY,IAAA,CAAK,CAAL,CAAZA;IACA,OAAOA,MAAP;EACD;EAII,IAADtC,CAAC,GAAW;IACd,OAAO,IAAA,CAAK,CAAL,CAAP;EACD;EACI,IAADA,CAAC,CAACuC,KAAD,EAAgB;IACnB,IAAA,CAAK,CAAL,CAAA,GAAUzD,WAAW,CAACyD,KAAD,CAArB;EACD;EAEI,IAADtC,CAAC,GAAW;IACd,OAAO,IAAA,CAAK,CAAL,CAAP;EACD;EACI,IAADA,CAAC,CAACsC,KAAD,EAAgB;IACnB,IAAA,CAAK,CAAL,CAAA,GAAUzD,WAAW,CAACyD,KAAD,CAArB;EACD;EAEI,IAADrC,CAAC,GAAW;IACd,OAAO,IAAA,CAAK,CAAL,CAAP;EACD;EACI,IAADA,CAAC,CAACqC,KAAD,EAAgB;IACnB,IAAA,CAAK,CAAL,CAAA,GAAUzD,WAAW,CAACyD,KAAD,CAArB;EACD;EAEQ,IAALC,KAAK,GAAW;IAClB,OAAO,IAAA,CAAK,CAAL,CAAP;EACD;EACQ,IAALA,KAAK,CAACD,KAAD,EAAgB;IACvB,IAAA,CAAK,CAAL,CAAA,GAAUzD,WAAW,CAACyD,KAAD,CAArB;EACD;EAEO,IAAJE,IAAI,GAAW;IACjB,OAAO,IAAA,CAAK,CAAL,CAAP;EACD;EACO,IAAJA,IAAI,CAACF,KAAD,EAAgB;IACtB,IAAA,CAAK,CAAL,CAAA,GAAUzD,WAAW,CAACyD,KAAD,CAArB;EACD;EAEQ,IAALG,KAAK,GAAW;IAClB,OAAO,IAAA,CAAK,CAAL,CAAP;EACD;EACQ,IAALA,KAAK,CAACH,KAAD,EAAgB;IACvB,IAAA,CAAK,CAAL,CAAA,GAAUzD,WAAW,CAACyD,KAAD,CAArB;EACD;EAGM,IAAHI,GAAG,GAAW;IAChB,OAAO,IAAA,CAAK,CAAL,CAAP;EACD;EACM,IAAHA,GAAG,CAACJ,KAAD,EAAgB;IACrB,IAAA,CAAK,CAAL,CAAA,GAAUzD,WAAW,CAACyD,KAAD,CAArB;EACD;EAEQ,IAALK,KAAK,GAAW;IAClB,OAAO,IAAA,CAAK,CAAL,CAAP;EACD;EACQ,IAALA,KAAK,CAACL,KAAD,EAAgB;IACvB,IAAA,CAAK,CAAL,CAAA,GAAUzD,WAAW,CAACyD,KAAD,CAArB;EACD;EAEM,IAAHM,GAAG,GAAW;IAChB,OAAO,IAAA,CAAK,CAAL,CAAP;EACD;EACM,IAAHA,GAAG,CAACN,KAAD,EAAgB;IACrB,IAAA,CAAK,CAAL,CAAA,GAAUzD,WAAW,CAACyD,KAAD,CAArB;EACD;EAGO,IAAJrB,IAAI,GAAW;IACjB,OAAO,IAAA,CAAK,CAAL,CAAP;EACD;EACO,IAAJA,IAAI,CAACqB,KAAD,EAAgB;IACtB,IAAA,CAAK,CAAL,CAAA,GAAUzD,WAAW,CAACyD,KAAD,CAArB;EACD;EAEQ,IAALlB,KAAK,GAAW;IAClB,OAAO,IAAA,CAAK,CAAL,CAAP;EACD;EACQ,IAALA,KAAK,CAACkB,KAAD,EAAgB;IACvB,IAAA,CAAK,CAAL,CAAA,GAAUzD,WAAW,CAACyD,KAAD,CAArB;EACD;EAEM,IAAHhB,GAAG,GAAW;IAChB,OAAO,IAAA,CAAK,CAAL,CAAP;EACD;EACM,IAAHA,GAAG,CAACgB,KAAD,EAAgB;IACrB,IAAA,CAAK,CAAL,CAAA,GAAUzD,WAAW,CAACyD,KAAD,CAArB;EACD;EAGQ,IAAL1C,KAAK,GAAkB;IACzB,OAAO,IAAA,CAAK,CAAL,CAAP;EACD;EACQ,IAALA,KAAK,CAAC0C,KAAD,EAAuB;IAC9B,IAAA,CAAK,CAAL,CAAA,GAAUO,UAAU,CAACP,KAAD,CAApB;EACD;EAGDhC,WAAW,CAACwC,CAAD,EAA4BlD,KAA5B,EAAwD;IACjE,OAAO,IAAA,CAAKW,GAAL,CAASuC,CAAC,CAAC,CAAD,CAAV,EAAeA,CAAC,CAAC,CAAD,CAAhB,EAAqBA,CAAC,CAAC,CAAD,CAAtB,EAA2BlB,MAAM,CAACC,QAAPD,CAAgBhC,KAAhBgC,CAAAA,GAAyBhC,KAAzBgC,GAAiC,IAAA,CAAK,CAAL,CAA5D,CAAP;EACD;EAGDmB,SAAS,CAACpB,KAAD,EAA0D;IAAA,IAA1BO,MAAc,uEAAG,CAAjD;IACP,IAAA,CAAK,CAAL,CAAA,GAAUP,KAAK,CAAC,CAAA,GAAIO,MAAL,CAAf;IACA,IAAA,CAAK,CAAL,CAAA,GAAUP,KAAK,CAAC,CAAA,GAAIO,MAAL,CAAf;IACA,IAAA,CAAK,CAAL,CAAA,GAAUP,KAAK,CAAC,CAAA,GAAIO,MAAL,CAAf;IACA,IAAIP,KAAK,CAAC,CAAD,CAALA,KAAaqB,SAAjB,EAA4B;MAC1B,IAAA,CAAK,CAAL,CAAA,GAAUrB,KAAK,CAAC,CAAD,CAAf;IACD;IACD,OAAO,IAAA,CAAKG,KAAL,EAAP;EACD;EAGDmB,gBAAgB,CAAChC,IAAD,EAAeG,KAAf,EAA8BE,GAA9B,EAAiD;IAC/D,OAAO,IAAA,CAAKf,GAAL,CAASU,IAAT,EAAeG,KAAf,EAAsBE,GAAtB,EAA2BtC,aAAa,CAACE,GAAzC,CAAP;EACD;EAEDgE,kBAAkB,CAACC,CAAD,EAA6E;IAAA,IAAjDvD,KAAoB,uEAAGX,KAAK,CAACQ,YAAzD;IAChB,IAAA,CAAK2D,mBAAL,CAAyBD,CAAzB,EAA4BvD,KAA5B,CAAA;IACA,OAAO,IAAA,CAAKkC,KAAL,EAAP;EACD;EAIDuB,iBAAiB,CAACF,CAAD,EAAgC;IAC/C,OAAO,IAAA,CAAKG,kBAAL,CAAwBH,CAAxB,CAAP;EACD;EAGDI,aAAa,GAAe;IAC1B,MAAMC,CAAC,GAAG,IAAI7E,UAAJ,EAAV;IACA,QAAQ,IAAA,CAAK,CAAL,CAAR;MACE,KAAKK,aAAa,CAACO,GAAnB;QACE,OAAOiE,CAAC,CAACC,OAAFD,CAAU,IAAA,CAAK,CAAL,CAAVA,CAAAA,CAAmBE,OAAnBF,CAA2B,IAAA,CAAK,CAAL,CAA3BA,CAAAA,CAAoCG,OAApCH,CAA4C,IAAA,CAAK,CAAL,CAA5CA,CAAP;MACF,KAAKxE,aAAa,CAACG,GAAnB;QACE,OAAOqE,CAAC,CAACE,OAAFF,CAAU,IAAA,CAAK,CAAL,CAAVA,CAAAA,CAAmBC,OAAnBD,CAA2B,IAAA,CAAK,CAAL,CAA3BA,CAAAA,CAAoCG,OAApCH,CAA4C,IAAA,CAAK,CAAL,CAA5CA,CAAP;MACF,KAAKxE,aAAa,CAACK,GAAnB;QACE,OAAOmE,CAAC,CAACG,OAAFH,CAAU,IAAA,CAAK,CAAL,CAAVA,CAAAA,CAAmBC,OAAnBD,CAA2B,IAAA,CAAK,CAAL,CAA3BA,CAAAA,CAAoCE,OAApCF,CAA4C,IAAA,CAAK,CAAL,CAA5CA,CAAP;MACF,KAAKxE,aAAa,CAACE,GAAnB;QACE,OAAOsE,CAAC,CAACG,OAAFH,CAAU,IAAA,CAAK,CAAL,CAAVA,CAAAA,CAAmBE,OAAnBF,CAA2B,IAAA,CAAK,CAAL,CAA3BA,CAAAA,CAAoCC,OAApCD,CAA4C,IAAA,CAAK,CAAL,CAA5CA,CAAP;MACF,KAAKxE,aAAa,CAACM,GAAnB;QACE,OAAOkE,CAAC,CAACE,OAAFF,CAAU,IAAA,CAAK,CAAL,CAAVA,CAAAA,CAAmBG,OAAnBH,CAA2B,IAAA,CAAK,CAAL,CAA3BA,CAAAA,CAAoCC,OAApCD,CAA4C,IAAA,CAAK,CAAL,CAA5CA,CAAP;MACF,KAAKxE,aAAa,CAACI,GAAnB;QACE,OAAOoE,CAAC,CAACC,OAAFD,CAAU,IAAA,CAAK,CAAL,CAAVA,CAAAA,CAAmBG,OAAnBH,CAA2B,IAAA,CAAK,CAAL,CAA3BA,CAAAA,CAAoCE,OAApCF,CAA4C,IAAA,CAAK,CAAL,CAA5CA,CAAP;MACF;QACE,MAAM,IAAI/B,KAAJ,CAAU3C,iBAAV,CAAN;IAAA;EAEL;EAUDsE,mBAAmB,CAACD,CAAD,EAA8D;IAAA,IAAlCvD,KAAK,uEAAGX,KAAK,CAACQ,YAA1C;IAEjB,MAAMmE,GAAG,GAAGT,CAAC,CAAC,CAAD,CAAb;MACEU,GAAG,GAAGV,CAAC,CAAC,CAAD,CADT;MAEEW,GAAG,GAAGX,CAAC,CAAC,CAAD,CAFT;IAGA,MAAMY,GAAG,GAAGZ,CAAC,CAAC,CAAD,CAAb;MACEa,GAAG,GAAGb,CAAC,CAAC,CAAD,CADT;MAEEc,GAAG,GAAGd,CAAC,CAAC,CAAD,CAFT;IAGA,MAAMe,GAAG,GAAGf,CAAC,CAAC,CAAD,CAAb;MACEgB,GAAG,GAAGhB,CAAC,CAAC,CAAD,CADT;MAEEiB,GAAG,GAAGjB,CAAC,CAAC,EAAD,CAFT;IAGAvD,KAAK,GAAGA,KAAK,IAAI,IAAA,CAAK,CAAL,CAAjBA;IACA,QAAQA,KAAR;MACE,KAAKX,KAAK,CAACM,GAAX;QACE,IAAA,CAAK,CAAL,CAAA,GAAU2B,IAAI,CAACG,IAALH,CAAUtC,KAAK,CAACkF,GAAD,EAAM,CAAC,CAAP,EAAU,CAAV,CAAf5C,CAAV;QACA,IAAIA,IAAI,CAACmD,GAALnD,CAAS4C,GAAT5C,CAAAA,GAAgBnC,UAApB,EAAgC;UAC9B,IAAA,CAAK,CAAL,CAAA,GAAUmC,IAAI,CAACC,KAALD,CAAW,CAAC+C,GAAZ/C,EAAiBkD,GAAjBlD,CAAV;UACA,IAAA,CAAK,CAAL,CAAA,GAAUA,IAAI,CAACC,KAALD,CAAW,CAAC2C,GAAZ3C,EAAiB0C,GAAjB1C,CAAV;QACD,CAHD,MAGO;UACL,IAAA,CAAK,CAAL,CAAA,GAAUA,IAAI,CAACC,KAALD,CAAWiD,GAAXjD,EAAgB8C,GAAhB9C,CAAV;UACA,IAAA,CAAK,CAAL,CAAA,GAAU,CAAV;QACD;QACD;MACF,KAAKjC,KAAK,CAACE,GAAX;QACE,IAAA,CAAK,CAAL,CAAA,GAAU+B,IAAI,CAACG,IAALH,CAAU,CAACtC,KAAK,CAACqF,GAAD,EAAM,CAAC,CAAP,EAAU,CAAV,CAAhB/C,CAAV;QACA,IAAIA,IAAI,CAACmD,GAALnD,CAAS+C,GAAT/C,CAAAA,GAAgBnC,UAApB,EAAgC;UAC9B,IAAA,CAAK,CAAL,CAAA,GAAUmC,IAAI,CAACC,KAALD,CAAW4C,GAAX5C,EAAgBkD,GAAhBlD,CAAV;UACA,IAAA,CAAK,CAAL,CAAA,GAAUA,IAAI,CAACC,KAALD,CAAW6C,GAAX7C,EAAgB8C,GAAhB9C,CAAV;QACD,CAHD,MAGO;UACL,IAAA,CAAK,CAAL,CAAA,GAAUA,IAAI,CAACC,KAALD,CAAW,CAACgD,GAAZhD,EAAiB0C,GAAjB1C,CAAV;UACA,IAAA,CAAK,CAAL,CAAA,GAAU,CAAV;QACD;QACD;MACF,KAAKjC,KAAK,CAACI,GAAX;QACE,IAAA,CAAK,CAAL,CAAA,GAAU6B,IAAI,CAACG,IAALH,CAAUtC,KAAK,CAACuF,GAAD,EAAM,CAAC,CAAP,EAAU,CAAV,CAAfjD,CAAV;QACA,IAAIA,IAAI,CAACmD,GAALnD,CAASiD,GAATjD,CAAAA,GAAgBnC,UAApB,EAAgC;UAC9B,IAAA,CAAK,CAAL,CAAA,GAAUmC,IAAI,CAACC,KAALD,CAAW,CAACgD,GAAZhD,EAAiBkD,GAAjBlD,CAAV;UACA,IAAA,CAAK,CAAL,CAAA,GAAUA,IAAI,CAACC,KAALD,CAAW,CAAC2C,GAAZ3C,EAAiB8C,GAAjB9C,CAAV;QACD,CAHD,MAGO;UACL,IAAA,CAAK,CAAL,CAAA,GAAU,CAAV;UACA,IAAA,CAAK,CAAL,CAAA,GAAUA,IAAI,CAACC,KAALD,CAAW6C,GAAX7C,EAAgB0C,GAAhB1C,CAAV;QACD;QACD;MACF,KAAKjC,KAAK,CAACC,GAAX;QACE,IAAA,CAAK,CAAL,CAAA,GAAUgC,IAAI,CAACG,IAALH,CAAU,CAACtC,KAAK,CAACsF,GAAD,EAAM,CAAC,CAAP,EAAU,CAAV,CAAhBhD,CAAV;QACA,IAAIA,IAAI,CAACmD,GAALnD,CAASgD,GAAThD,CAAAA,GAAgBnC,UAApB,EAAgC;UAC9B,IAAA,CAAK,CAAL,CAAA,GAAUmC,IAAI,CAACC,KAALD,CAAWiD,GAAXjD,EAAgBkD,GAAhBlD,CAAV;UACA,IAAA,CAAK,CAAL,CAAA,GAAUA,IAAI,CAACC,KAALD,CAAW6C,GAAX7C,EAAgB0C,GAAhB1C,CAAV;QACD,CAHD,MAGO;UACL,IAAA,CAAK,CAAL,CAAA,GAAU,CAAV;UACA,IAAA,CAAK,CAAL,CAAA,GAAUA,IAAI,CAACC,KAALD,CAAW,CAAC2C,GAAZ3C,EAAiB8C,GAAjB9C,CAAV;QACD;QACD;MACF,KAAKjC,KAAK,CAACK,GAAX;QACE,IAAA,CAAK,CAAL,CAAA,GAAU4B,IAAI,CAACG,IAALH,CAAUtC,KAAK,CAACmF,GAAD,EAAM,CAAC,CAAP,EAAU,CAAV,CAAf7C,CAAV;QACA,IAAIA,IAAI,CAACmD,GAALnD,CAAS6C,GAAT7C,CAAAA,GAAgBnC,UAApB,EAAgC;UAC9B,IAAA,CAAK,CAAL,CAAA,GAAUmC,IAAI,CAACC,KAALD,CAAW,CAAC+C,GAAZ/C,EAAiB8C,GAAjB9C,CAAV;UACA,IAAA,CAAK,CAAL,CAAA,GAAUA,IAAI,CAACC,KAALD,CAAW,CAACgD,GAAZhD,EAAiB0C,GAAjB1C,CAAV;QACD,CAHD,MAGO;UACL,IAAA,CAAK,CAAL,CAAA,GAAU,CAAV;UACA,IAAA,CAAK,CAAL,CAAA,GAAUA,IAAI,CAACC,KAALD,CAAW4C,GAAX5C,EAAgBkD,GAAhBlD,CAAV;QACD;QACD;MACF,KAAKjC,KAAK,CAACG,GAAX;QACE,IAAA,CAAK,CAAL,CAAA,GAAU8B,IAAI,CAACG,IAALH,CAAU,CAACtC,KAAK,CAACiF,GAAD,EAAM,CAAC,CAAP,EAAU,CAAV,CAAhB3C,CAAV;QACA,IAAIA,IAAI,CAACmD,GAALnD,CAAS2C,GAAT3C,CAAAA,GAAgBnC,UAApB,EAAgC;UAC9B,IAAA,CAAK,CAAL,CAAA,GAAUmC,IAAI,CAACC,KAALD,CAAWiD,GAAXjD,EAAgB8C,GAAhB9C,CAAV;UACA,IAAA,CAAK,CAAL,CAAA,GAAUA,IAAI,CAACC,KAALD,CAAW4C,GAAX5C,EAAgB0C,GAAhB1C,CAAV;QACD,CAHD,MAGO;UACL,IAAA,CAAK,CAAL,CAAA,GAAUA,IAAI,CAACC,KAALD,CAAW,CAAC+C,GAAZ/C,EAAiBkD,GAAjBlD,CAAV;UACA,IAAA,CAAK,CAAL,CAAA,GAAU,CAAV;QACD;QACD;MACF;QACE,MAAM,IAAIO,KAAJ,CAAU3C,iBAAV,CAAN;IAAA;IAEJ,IAAA,CAAK,CAAL,CAAA,GAAUc,KAAV;IACA,OAAO,IAAP;EACD;EAED0D,kBAAkB,CAACjB,MAAD,EAAqC;IACrD,MAAMiC,EAAE,GAAGjC,MAAM,IAAI,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAC,CAAV,EAAa,CAAC,CAAd,EAAiB,CAAC,CAAlB,EAAqB,CAAC,CAAtB,EAAyB,CAAC,CAA1B,EAA6B,CAAC,CAA9B,EAAiC,CAAC,CAAlC,EAAqC,CAAC,CAAtC,EAAyC,CAAC,CAA1C,EAA6C,CAAC,CAA9C,EAAiD,CAAC,CAAlD,EAAqD,CAAC,CAAtD,EAAyD,CAAC,CAA1D,EAA6D,CAAC,CAA9D,CAArB;IACA,MAAMtC,CAAC,GAAG,IAAA,CAAKA,CAAf;MACEC,CAAC,GAAG,IAAA,CAAKA,CADX;MAEEC,CAAC,GAAG,IAAA,CAAKA,CAFX;IAGA,MAAMsE,CAAC,GAAGrD,IAAI,CAACsD,GAALtD,CAASnB,CAATmB,CAAV;IACA,MAAMuD,CAAC,GAAGvD,IAAI,CAACsD,GAALtD,CAASlB,CAATkB,CAAV;IACA,MAAMwD,CAAC,GAAGxD,IAAI,CAACsD,GAALtD,CAASjB,CAATiB,CAAV;IACA,MAAMyD,CAAC,GAAGzD,IAAI,CAAC0D,GAAL1D,CAASnB,CAATmB,CAAV;IACA,MAAM2D,CAAC,GAAG3D,IAAI,CAAC0D,GAAL1D,CAASlB,CAATkB,CAAV;IACA,MAAM4D,CAAC,GAAG5D,IAAI,CAAC0D,GAAL1D,CAASjB,CAATiB,CAAV;IACA,QAAQ,IAAA,CAAK,CAAL,CAAR;MACE,KAAKjC,KAAK,CAACM,GAAX;QAAgB;UACd,MAAMwF,EAAE,GAAGR,CAAC,GAAGG,CAAf;YACEM,EAAE,GAAGT,CAAC,GAAGO,CADX;YAEEG,EAAE,GAAGN,CAAC,GAAGD,CAFX;YAGEQ,EAAE,GAAGP,CAAC,GAAGG,CAHX;UAIAR,EAAE,CAAC,CAAD,CAAFA,GAAQG,CAAC,GAAGC,CAAZJ;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQ,CAACG,CAAD,GAAKK,CAAbR;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQO,CAARP;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQU,EAAE,GAAGC,EAAE,GAAGJ,CAAlBP;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQS,EAAE,GAAGG,EAAE,GAAGL,CAAlBP;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQ,CAACK,CAAD,GAAKF,CAAbH;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQY,EAAE,GAAGH,EAAE,GAAGF,CAAlBP;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQW,EAAE,GAAGD,EAAE,GAAGH,CAAlBP;UACAA,EAAE,CAAC,EAAD,CAAFA,GAASC,CAAC,GAAGE,CAAbH;UACA;QACD;MACD,KAAKrF,KAAK,CAACE,GAAX;QAAgB;UACd,MAAMgG,EAAE,GAAGV,CAAC,GAAGC,CAAf;YACEU,EAAE,GAAGX,CAAC,GAAGK,CADX;YAEEO,EAAE,GAAGR,CAAC,GAAGH,CAFX;YAGEY,EAAE,GAAGT,CAAC,GAAGC,CAHX;UAIAR,EAAE,CAAC,CAAD,CAAFA,GAAQa,EAAE,GAAGG,EAAE,GAAGX,CAAlBL;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQe,EAAE,GAAGV,CAALU,GAASD,EAAjBd;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQC,CAAC,GAAGM,CAAZP;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQC,CAAC,GAAGO,CAAZR;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQC,CAAC,GAAGG,CAAZJ;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQ,CAACK,CAATL;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQc,EAAE,GAAGT,CAALS,GAASC,EAAjBf;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQgB,EAAE,GAAGH,EAAE,GAAGR,CAAlBL;UACAA,EAAE,CAAC,EAAD,CAAFA,GAASC,CAAC,GAAGE,CAAbH;UACA;QACD;MACD,KAAKrF,KAAK,CAACI,GAAX;QAAgB;UACd,MAAM8F,EAAE,GAAGV,CAAC,GAAGC,CAAf;YACEU,EAAE,GAAGX,CAAC,GAAGK,CADX;YAEEO,EAAE,GAAGR,CAAC,GAAGH,CAFX;YAGEY,EAAE,GAAGT,CAAC,GAAGC,CAHX;UAIAR,EAAE,CAAC,CAAD,CAAFA,GAAQa,EAAE,GAAGG,EAAE,GAAGX,CAAlBL;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQ,CAACC,CAAD,GAAKO,CAAbR;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQe,EAAE,GAAGD,EAAE,GAAGT,CAAlBL;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQc,EAAE,GAAGC,EAAE,GAAGV,CAAlBL;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQC,CAAC,GAAGG,CAAZJ;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQgB,EAAE,GAAGH,EAAE,GAAGR,CAAlBL;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQ,CAACC,CAAD,GAAKM,CAAbP;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQK,CAARL;UACAA,EAAE,CAAC,EAAD,CAAFA,GAASC,CAAC,GAAGE,CAAbH;UACA;QACD;MACD,KAAKrF,KAAK,CAACC,GAAX;QAAgB;UACd,MAAM6F,EAAE,GAAGR,CAAC,GAAGG,CAAf;YACEM,EAAE,GAAGT,CAAC,GAAGO,CADX;YAEEG,EAAE,GAAGN,CAAC,GAAGD,CAFX;YAGEQ,EAAE,GAAGP,CAAC,GAAGG,CAHX;UAIAR,EAAE,CAAC,CAAD,CAAFA,GAAQG,CAAC,GAAGC,CAAZJ;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQW,EAAE,GAAGJ,CAALI,GAASD,EAAjBV;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQS,EAAE,GAAGF,CAALE,GAASG,EAAjBZ;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQG,CAAC,GAAGK,CAAZR;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQY,EAAE,GAAGL,CAALK,GAASH,EAAjBT;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQU,EAAE,GAAGH,CAALG,GAASC,EAAjBX;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQ,CAACO,CAATP;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQK,CAAC,GAAGF,CAAZH;UACAA,EAAE,CAAC,EAAD,CAAFA,GAASC,CAAC,GAAGE,CAAbH;UACA;QACD;MACD,KAAKrF,KAAK,CAACK,GAAX;QAAgB;UACd,MAAMiG,EAAE,GAAGhB,CAAC,GAAGE,CAAf;YACEe,EAAE,GAAGjB,CAAC,GAAGM,CADX;YAEEY,EAAE,GAAGd,CAAC,GAAGF,CAFX;YAGEiB,EAAE,GAAGf,CAAC,GAAGE,CAHX;UAIAP,EAAE,CAAC,CAAD,CAAFA,GAAQG,CAAC,GAAGC,CAAZJ;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQoB,EAAE,GAAGH,EAAE,GAAGT,CAAlBR;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQmB,EAAE,GAAGX,CAALW,GAASD,EAAjBlB;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQQ,CAARR;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQC,CAAC,GAAGG,CAAZJ;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQ,CAACK,CAAD,GAAKD,CAAbJ;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQ,CAACO,CAAD,GAAKH,CAAbJ;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQkB,EAAE,GAAGV,CAALU,GAASC,EAAjBnB;UACAA,EAAE,CAAC,EAAD,CAAFA,GAASiB,EAAE,GAAGG,EAAE,GAAGZ,CAAnBR;UACA;QACD;MACD,KAAKrF,KAAK,CAACG,GAAX;QAAgB;UACd,MAAMmG,EAAE,GAAGhB,CAAC,GAAGE,CAAf;YACEe,EAAE,GAAGjB,CAAC,GAAGM,CADX;YAEEY,EAAE,GAAGd,CAAC,GAAGF,CAFX;YAGEiB,EAAE,GAAGf,CAAC,GAAGE,CAHX;UAIAP,EAAE,CAAC,CAAD,CAAFA,GAAQG,CAAC,GAAGC,CAAZJ;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQ,CAACQ,CAATR;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQO,CAAC,GAAGH,CAAZJ;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQiB,EAAE,GAAGT,CAALS,GAASG,EAAjBpB;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQC,CAAC,GAAGG,CAAZJ;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQkB,EAAE,GAAGV,CAALU,GAASC,EAAjBnB;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQmB,EAAE,GAAGX,CAALW,GAASD,EAAjBlB;UACAA,EAAE,CAAC,CAAD,CAAFA,GAAQK,CAAC,GAAGD,CAAZJ;UACAA,EAAE,CAAC,EAAD,CAAFA,GAASoB,EAAE,GAAGZ,CAALY,GAASH,EAAlBjB;UACA;QACD;MACD;QACE,MAAM,IAAI7C,KAAJ,CAAU3C,iBAAV,CAAN;IAAA;IAGJwF,EAAE,CAAC,CAAD,CAAFA,GAAQ,CAARA;IACAA,EAAE,CAAC,CAAD,CAAFA,GAAQ,CAARA;IACAA,EAAE,CAAC,EAAD,CAAFA,GAAS,CAATA;IAEAA,EAAE,CAAC,EAAD,CAAFA,GAAS,CAATA;IACAA,EAAE,CAAC,EAAD,CAAFA,GAAS,CAATA;IACAA,EAAE,CAAC,EAAD,CAAFA,GAAS,CAATA;IACAA,EAAE,CAAC,EAAD,CAAFA,GAAS,CAATA;IACA,OAAOA,EAAP;EACD;EAEDqB,YAAY,GAAe;IAEzB,MAAMC,EAAE,GAAG1E,IAAI,CAACsD,GAALtD,CAAS,IAAA,CAAKI,GAAL,GAAW,GAApBJ,CAAX;IACA,MAAM2E,EAAE,GAAG3E,IAAI,CAAC0D,GAAL1D,CAAS,IAAA,CAAKI,GAAL,GAAW,GAApBJ,CAAX;IACA,MAAM4E,EAAE,GAAG5E,IAAI,CAACsD,GAALtD,CAAS,IAAA,CAAKD,IAAL,GAAY,GAArBC,CAAX;IACA,MAAM6E,EAAE,GAAG7E,IAAI,CAAC0D,GAAL1D,CAAS,IAAA,CAAKD,IAAL,GAAY,GAArBC,CAAX;IACA,MAAM8E,EAAE,GAAG9E,IAAI,CAACsD,GAALtD,CAAS,IAAA,CAAKE,KAAL,GAAa,GAAtBF,CAAX;IACA,MAAM+E,EAAE,GAAG/E,IAAI,CAAC0D,GAAL1D,CAAS,IAAA,CAAKE,KAAL,GAAa,GAAtBF,CAAX;IACA,MAAMR,CAAC,GAAGkF,EAAE,GAAGE,EAALF,GAAUI,EAAVJ,GAAeC,EAAE,GAAGE,EAALF,GAAUI,EAAnC;IACA,MAAMlG,CAAC,GAAG6F,EAAE,GAAGG,EAALH,GAAUI,EAAVJ,GAAeC,EAAE,GAAGC,EAALD,GAAUI,EAAnC;IACA,MAAMjG,CAAC,GAAG4F,EAAE,GAAGE,EAALF,GAAUK,EAAVL,GAAeC,EAAE,GAAGE,EAALF,GAAUG,EAAnC;IACA,MAAM/F,CAAC,GAAG4F,EAAE,GAAGC,EAALD,GAAUG,EAAVH,GAAeD,EAAE,GAAGG,EAALH,GAAUK,EAAnC;IACA,OAAO,IAAItH,UAAJ,CAAeoB,CAAf,EAAkBC,CAAlB,EAAqBC,CAArB,EAAwBS,CAAxB,CAAP;EACD;AA3f0C;AAggB7C,SAASsB,aAAT,CAAuBM,KAAvB,EAA+C;EAC7C,OAAOA,KAAK,IAAI,CAATA,IAAcA,KAAK,GAAG,CAA7B;AACD;AAED,SAASO,UAAT,CAAoBP,KAApB,EAAmC;EACjC,IAAIA,KAAK,GAAG,CAARA,IAAaA,KAAK,IAAI,CAA1B,EAA6B;IAC3B,MAAM,IAAIb,KAAJ,CAAU3C,iBAAV,CAAN;EACD;EACD,OAAOwD,KAAP;AACD","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport MathArray from './base/math-array';\nimport Quaternion from './quaternion';\nimport {NumericArray} from '@math.gl/types';\n\nimport {clamp} from '../lib/common';\nimport {checkNumber} from '../lib/validators';\n\n// Internal constants\nconst ERR_UNKNOWN_ORDER = 'Unknown Euler angle order';\nconst ALMOST_ONE = 0.99999;\n\nenum RotationOrder {\n  ZYX = 0,\n  YXZ = 1,\n  XZY = 2,\n  ZXY = 3,\n  YZX = 4,\n  XYZ = 5\n}\n\nexport default class Euler extends MathArray {\n  // Constants\n  static get ZYX(): RotationOrder {\n    return RotationOrder.ZYX;\n  }\n  static get YXZ(): RotationOrder {\n    return RotationOrder.YXZ;\n  }\n  static get XZY(): RotationOrder {\n    return RotationOrder.XZY;\n  }\n  static get ZXY(): RotationOrder {\n    return RotationOrder.ZXY;\n  }\n  static get YZX(): RotationOrder {\n    return RotationOrder.YZX;\n  }\n  static get XYZ(): RotationOrder {\n    return RotationOrder.XYZ;\n  }\n  static get RollPitchYaw(): RotationOrder {\n    return RotationOrder.ZYX;\n  }\n  static get DefaultOrder(): RotationOrder {\n    return RotationOrder.ZYX;\n  }\n  static get RotationOrders(): typeof RotationOrder {\n    return RotationOrder;\n  }\n  static rotationOrder(order: RotationOrder): string {\n    return RotationOrder[order];\n  }\n  get ELEMENTS(): number {\n    return 4;\n  }\n\n  /**\n   * @class\n   * @param {Number | Number[]} x\n   * @param {Number=} [y]\n   * @param {Number=} [z]\n   * @param {Number=} [order]\n   */\n  constructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0);\n    // eslint-disable-next-line prefer-rest-params\n    if (arguments.length > 0 && Array.isArray(arguments[0])) {\n      // eslint-disable-next-line prefer-rest-params\n      // @ts-expect-error\n      this.fromVector3(...arguments);\n    } else {\n      this.set(x, y, z, order);\n    }\n  }\n\n  fromQuaternion(quaternion: Readonly<NumericArray>): this {\n    const [x, y, z, w] = quaternion;\n    const ysqr = y * y;\n    const t0 = -2 * (ysqr + z * z) + 1;\n    const t1 = +2 * (x * y + w * z);\n    let t2 = -2 * (x * z - w * y);\n    const t3 = +2 * (y * z + w * x);\n    const t4 = -2 * (x * x + ysqr) + 1;\n    t2 = t2 > 1 ? 1 : t2;\n    t2 = t2 < -1 ? -1 : t2;\n    const roll = Math.atan2(t3, t4);\n    const pitch = Math.asin(t2);\n    const yaw = Math.atan2(t1, t0);\n    return this.set(roll, pitch, yaw, Euler.RollPitchYaw);\n  }\n\n  fromObject(object: object): this {\n    throw new Error('not implemented');\n    //  return this.set(object.x, object.y, object.z, object.order);\n  }\n\n  // fromQuaternion(q, order) {\n  //   this._fromRotationMat[-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n  //   return this.check();\n  // }\n  // If copied array does contain fourth element, preserves currently set order\n  copy(array: Readonly<NumericArray>): this {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    // @ts-expect-error\n    this[3] = Number.isFinite(array[3]) || this.order;\n    return this.check();\n  }\n\n  // Sets the three angles, and optionally sets the rotation order\n  // If order is not specified, preserves currently set order\n  set(x = 0, y = 0, z = 0, order: RotationOrder): this {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = Number.isFinite(order) ? order : this[3];\n    return this.check();\n  }\n\n  validate(): boolean {\n    return (\n      validateOrder(this[3]) &&\n      Number.isFinite(this[0]) &&\n      Number.isFinite(this[1]) &&\n      Number.isFinite(this[2])\n    );\n  }\n\n  // Does not copy the orientation element\n  toArray(array: NumericArray = [], offset: number = 0): NumericArray {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    return array;\n  }\n\n  // Copies the orientation element\n  toArray4(array: NumericArray = [], offset: number = 0): NumericArray {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    array[offset + 3] = this[3];\n    return array;\n  }\n\n  toVector3(result: NumericArray = [-0, -0, -0]): NumericArray {\n    result[0] = this[0];\n    result[1] = this[1];\n    result[2] = this[2];\n    return result;\n  }\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  // x, y, z angle notation (note: only corresponds to axis in XYZ orientation)\n\n  get x(): number {\n    return this[0];\n  }\n  set x(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get y(): number {\n    return this[1];\n  }\n  set y(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get z(): number {\n    return this[2];\n  }\n  set z(value: number) {\n    this[2] = checkNumber(value);\n  }\n  // alpha, beta, gamma angle notation\n  get alpha(): number {\n    return this[0];\n  }\n  set alpha(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get beta(): number {\n    return this[1];\n  }\n  set beta(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get gamma(): number {\n    return this[2];\n  }\n  set gamma(value: number) {\n    this[2] = checkNumber(value);\n  }\n\n  // phi, theta, psi angle notation\n  get phi(): number {\n    return this[0];\n  }\n  set phi(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get theta(): number {\n    return this[1];\n  }\n  set theta(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get psi(): number {\n    return this[2];\n  }\n  set psi(value: number) {\n    this[2] = checkNumber(value);\n  }\n  // roll, pitch, yaw angle notation\n\n  get roll(): number {\n    return this[0];\n  }\n  set roll(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get pitch(): number {\n    return this[1];\n  }\n  set pitch(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get yaw(): number {\n    return this[2];\n  }\n  set yaw(value: number) {\n    this[2] = checkNumber(value);\n  }\n\n  // rotation order, in all three angle notations\n  get order(): RotationOrder {\n    return this[3];\n  }\n  set order(value: RotationOrder) {\n    this[3] = checkOrder(value);\n  }\n\n  // Constructors\n  fromVector3(v: Readonly<NumericArray>, order: RotationOrder): this {\n    return this.set(v[0], v[1], v[2], Number.isFinite(order) ? order : this[3]);\n  }\n\n  // TODO - with and without 4th element\n  fromArray(array: Readonly<NumericArray>, offset: number = 0): this {\n    this[0] = array[0 + offset];\n    this[1] = array[1 + offset];\n    this[2] = array[2 + offset];\n    if (array[3] !== undefined) {\n      this[3] = array[3];\n    }\n    return this.check();\n  }\n\n  // Common ZYX rotation order\n  fromRollPitchYaw(roll: number, pitch: number, yaw: number): this {\n    return this.set(roll, pitch, yaw, RotationOrder.ZYX);\n  }\n\n  fromRotationMatrix(m: Readonly<NumericArray>, order: RotationOrder = Euler.DefaultOrder): this {\n    this._fromRotationMatrix(m, order);\n    return this.check();\n  }\n\n  // ACCESSORS\n\n  getRotationMatrix(m: NumericArray): NumericArray {\n    return this._getRotationMatrix(m);\n  }\n\n  // TODO - move to Quaternion\n  getQuaternion(): Quaternion {\n    const q = new Quaternion();\n    switch (this[4]) {\n      case RotationOrder.XYZ:\n        return q.rotateX(this[0]).rotateY(this[1]).rotateZ(this[2]);\n      case RotationOrder.YXZ:\n        return q.rotateY(this[0]).rotateX(this[1]).rotateZ(this[2]);\n      case RotationOrder.ZXY:\n        return q.rotateZ(this[0]).rotateX(this[1]).rotateY(this[2]);\n      case RotationOrder.ZYX:\n        return q.rotateZ(this[0]).rotateY(this[1]).rotateX(this[2]);\n      case RotationOrder.YZX:\n        return q.rotateY(this[0]).rotateZ(this[1]).rotateX(this[2]);\n      case RotationOrder.XZY:\n        return q.rotateX(this[0]).rotateZ(this[1]).rotateY(this[2]);\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n  }\n\n  // INTERNAL METHODS\n  // Conversion from Euler to rotation matrix and from matrix to Euler\n  // Adapted from three.js under MIT license\n  // // WARNING: this discards revolution information -bhouston\n  // reorder(newOrder) {\n  //   const q = new Quaternion().setFromEuler(this);\n  //   return this.setFromQuaternion(q, newOrder);\n  /* eslint-disable complexity, max-statements, one-var */\n  _fromRotationMatrix(m: Readonly<NumericArray>, order = Euler.DefaultOrder): this {\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n    const m11 = m[0],\n      m12 = m[4],\n      m13 = m[8];\n    const m21 = m[1],\n      m22 = m[5],\n      m23 = m[9];\n    const m31 = m[2],\n      m32 = m[6],\n      m33 = m[10];\n    order = order || this[3];\n    switch (order) {\n      case Euler.XYZ:\n        this[1] = Math.asin(clamp(m13, -1, 1));\n        if (Math.abs(m13) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m33);\n          this[2] = Math.atan2(-m12, m11);\n        } else {\n          this[0] = Math.atan2(m32, m22);\n          this[2] = 0;\n        }\n        break;\n      case Euler.YXZ:\n        this[0] = Math.asin(-clamp(m23, -1, 1));\n        if (Math.abs(m23) < ALMOST_ONE) {\n          this[1] = Math.atan2(m13, m33);\n          this[2] = Math.atan2(m21, m22);\n        } else {\n          this[1] = Math.atan2(-m31, m11);\n          this[2] = 0;\n        }\n        break;\n      case Euler.ZXY:\n        this[0] = Math.asin(clamp(m32, -1, 1));\n        if (Math.abs(m32) < ALMOST_ONE) {\n          this[1] = Math.atan2(-m31, m33);\n          this[2] = Math.atan2(-m12, m22);\n        } else {\n          this[1] = 0;\n          this[2] = Math.atan2(m21, m11);\n        }\n        break;\n      case Euler.ZYX:\n        this[1] = Math.asin(-clamp(m31, -1, 1));\n        if (Math.abs(m31) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m33);\n          this[2] = Math.atan2(m21, m11);\n        } else {\n          this[0] = 0;\n          this[2] = Math.atan2(-m12, m22);\n        }\n        break;\n      case Euler.YZX:\n        this[2] = Math.asin(clamp(m21, -1, 1));\n        if (Math.abs(m21) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m22);\n          this[1] = Math.atan2(-m31, m11);\n        } else {\n          this[0] = 0;\n          this[1] = Math.atan2(m13, m33);\n        }\n        break;\n      case Euler.XZY:\n        this[2] = Math.asin(-clamp(m12, -1, 1));\n        if (Math.abs(m12) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m22);\n          this[1] = Math.atan2(m13, m11);\n        } else {\n          this[0] = Math.atan2(-m23, m33);\n          this[1] = 0;\n        }\n        break;\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n    this[3] = order;\n    return this;\n  }\n\n  _getRotationMatrix(result: NumericArray): NumericArray {\n    const te = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const a = Math.cos(x);\n    const c = Math.cos(y);\n    const e = Math.cos(z);\n    const b = Math.sin(x);\n    const d = Math.sin(y);\n    const f = Math.sin(z);\n    switch (this[3]) {\n      case Euler.XYZ: {\n        const ae = a * e,\n          af = a * f,\n          be = b * e,\n          bf = b * f;\n        te[0] = c * e;\n        te[4] = -c * f;\n        te[8] = d;\n        te[1] = af + be * d;\n        te[5] = ae - bf * d;\n        te[9] = -b * c;\n        te[2] = bf - ae * d;\n        te[6] = be + af * d;\n        te[10] = a * c;\n        break;\n      }\n      case Euler.YXZ: {\n        const ce = c * e,\n          cf = c * f,\n          de = d * e,\n          df = d * f;\n        te[0] = ce + df * b;\n        te[4] = de * b - cf;\n        te[8] = a * d;\n        te[1] = a * f;\n        te[5] = a * e;\n        te[9] = -b;\n        te[2] = cf * b - de;\n        te[6] = df + ce * b;\n        te[10] = a * c;\n        break;\n      }\n      case Euler.ZXY: {\n        const ce = c * e,\n          cf = c * f,\n          de = d * e,\n          df = d * f;\n        te[0] = ce - df * b;\n        te[4] = -a * f;\n        te[8] = de + cf * b;\n        te[1] = cf + de * b;\n        te[5] = a * e;\n        te[9] = df - ce * b;\n        te[2] = -a * d;\n        te[6] = b;\n        te[10] = a * c;\n        break;\n      }\n      case Euler.ZYX: {\n        const ae = a * e,\n          af = a * f,\n          be = b * e,\n          bf = b * f;\n        te[0] = c * e;\n        te[4] = be * d - af;\n        te[8] = ae * d + bf;\n        te[1] = c * f;\n        te[5] = bf * d + ae;\n        te[9] = af * d - be;\n        te[2] = -d;\n        te[6] = b * c;\n        te[10] = a * c;\n        break;\n      }\n      case Euler.YZX: {\n        const ac = a * c,\n          ad = a * d,\n          bc = b * c,\n          bd = b * d;\n        te[0] = c * e;\n        te[4] = bd - ac * f;\n        te[8] = bc * f + ad;\n        te[1] = f;\n        te[5] = a * e;\n        te[9] = -b * e;\n        te[2] = -d * e;\n        te[6] = ad * f + bc;\n        te[10] = ac - bd * f;\n        break;\n      }\n      case Euler.XZY: {\n        const ac = a * c,\n          ad = a * d,\n          bc = b * c,\n          bd = b * d;\n        te[0] = c * e;\n        te[4] = -f;\n        te[8] = d * e;\n        te[1] = ac * f + bd;\n        te[5] = a * e;\n        te[9] = ad * f - bc;\n        te[2] = bc * f - ad;\n        te[6] = b * e;\n        te[10] = bd * f + ac;\n        break;\n      }\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n    // last column\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = 0;\n    // bottom row\n    te[12] = 0;\n    te[13] = 0;\n    te[14] = 0;\n    te[15] = 1;\n    return te;\n  }\n\n  toQuaternion(): Quaternion {\n    // Abbreviations for the various angular functions\n    const cy = Math.cos(this.yaw * 0.5);\n    const sy = Math.sin(this.yaw * 0.5);\n    const cr = Math.cos(this.roll * 0.5);\n    const sr = Math.sin(this.roll * 0.5);\n    const cp = Math.cos(this.pitch * 0.5);\n    const sp = Math.sin(this.pitch * 0.5);\n    const w = cy * cr * cp + sy * sr * sp;\n    const x = cy * sr * cp - sy * cr * sp;\n    const y = cy * cr * sp + sy * sr * cp;\n    const z = sy * cr * cp - cy * sr * sp;\n    return new Quaternion(x, y, z, w);\n  }\n}\n\n// HELPER FUNCTIONS\n\nfunction validateOrder(value: number): boolean {\n  return value >= 0 && value < 6;\n}\n\nfunction checkOrder(value: number) {\n  if (value < 0 && value >= 6) {\n    throw new Error(ERR_UNKNOWN_ORDER);\n  }\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}