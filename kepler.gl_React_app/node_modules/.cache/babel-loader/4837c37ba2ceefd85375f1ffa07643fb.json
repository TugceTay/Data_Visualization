{"ast":null,"code":"import { MODULE_INJECTORS_VS, MODULE_INJECTORS_FS } from '../modules/module-injectors';\nimport { VERTEX_SHADER, FRAGMENT_SHADER } from './constants';\nimport { assert } from '../utils';\nconst MODULE_INJECTORS = {\n  [VERTEX_SHADER]: MODULE_INJECTORS_VS,\n  [FRAGMENT_SHADER]: MODULE_INJECTORS_FS\n};\nexport const DECLARATION_INJECT_MARKER = '__LUMA_INJECT_DECLARATIONS__';\nconst REGEX_START_OF_MAIN = /void\\s+main\\s*\\([^)]*\\)\\s*\\{\\n?/;\nconst REGEX_END_OF_MAIN = /}\\n?[^{}]*$/;\nconst fragments = [];\nexport default function injectShader(source, type, inject) {\n  let injectStandardStubs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const isVertex = type === VERTEX_SHADER;\n  for (const key in inject) {\n    const fragmentData = inject[key];\n    fragmentData.sort((a, b) => a.order - b.order);\n    fragments.length = fragmentData.length;\n    for (let i = 0, len = fragmentData.length; i < len; ++i) {\n      fragments[i] = fragmentData[i].injection;\n    }\n    const fragmentString = \"\".concat(fragments.join('\\n'), \"\\n\");\n    switch (key) {\n      case 'vs:#decl':\n        if (isVertex) {\n          source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);\n        }\n        break;\n      case 'vs:#main-start':\n        if (isVertex) {\n          source = source.replace(REGEX_START_OF_MAIN, match => match + fragmentString);\n        }\n        break;\n      case 'vs:#main-end':\n        if (isVertex) {\n          source = source.replace(REGEX_END_OF_MAIN, match => fragmentString + match);\n        }\n        break;\n      case 'fs:#decl':\n        if (!isVertex) {\n          source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);\n        }\n        break;\n      case 'fs:#main-start':\n        if (!isVertex) {\n          source = source.replace(REGEX_START_OF_MAIN, match => match + fragmentString);\n        }\n        break;\n      case 'fs:#main-end':\n        if (!isVertex) {\n          source = source.replace(REGEX_END_OF_MAIN, match => fragmentString + match);\n        }\n        break;\n      default:\n        source = source.replace(key, match => match + fragmentString);\n    }\n  }\n  source = source.replace(DECLARATION_INJECT_MARKER, '');\n  if (injectStandardStubs) {\n    source = source.replace(/\\}\\s*$/, match => match + MODULE_INJECTORS[type]);\n  }\n  return source;\n}\nexport function combineInjects(injects) {\n  const result = {};\n  assert(Array.isArray(injects) && injects.length > 1);\n  injects.forEach(inject => {\n    for (const key in inject) {\n      result[key] = result[key] ? \"\".concat(result[key], \"\\n\").concat(inject[key]) : inject[key];\n    }\n  });\n  return result;\n}","map":{"version":3,"sources":["../../../src/lib/inject-shader.js"],"names":["MODULE_INJECTORS_VS","MODULE_INJECTORS_FS","VERTEX_SHADER","FRAGMENT_SHADER","assert","MODULE_INJECTORS","DECLARATION_INJECT_MARKER","REGEX_START_OF_MAIN","REGEX_END_OF_MAIN","fragments","injectShader","source","type","inject","injectStandardStubs","isVertex","key","fragmentData","sort","a","b","order","length","i","len","injection","fragmentString","join","replace","match","combineInjects","injects","result","Array","isArray","forEach"],"mappings":"AAAA,SAAQA,mBAAR,EAA6BC,mBAA7B,QAAuD,6BAAvD;AACA,SAAQC,aAAR,EAAuBC,eAAvB,QAA6C,aAA7C;AACA,SAAQC,MAAR,QAAqB,UAArB;AAGA,MAAMC,gBAAgB,GAAG;EACvB,CAACH,aAAD,GAAiBF,mBADM;EAEvB,CAACG,eAAD,GAAmBF;AAFI,CAAzB;AAKA,OAAO,MAAMK,yBAAyB,GAAG,8BAAlC;AAEP,MAAMC,mBAAmB,GAAG,iCAA5B;AACA,MAAMC,iBAAiB,GAAG,aAA1B;AACA,MAAMC,SAAS,GAAG,EAAlB;AAKA,eAAe,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,IAA9B,EAAoCC,MAApC,EAAyE;EAAA,IAA7BC,mBAA6B,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAP,KAAO;EACtF,MAAMC,QAAQ,GAAGH,IAAI,KAAKV,aAA1B;EAEA,KAAK,MAAMc,GAAX,IAAkBH,MAAlB,EAA0B;IACxB,MAAMI,YAAY,GAAGJ,MAAM,CAACG,GAAD,CAA3B;IACAC,YAAY,CAACC,IAAbD,CAAkB,CAACE,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,KAAFF,GAAUC,CAAC,CAACC,KAAxCJ,CAAAA;IACAR,SAAS,CAACa,MAAVb,GAAmBQ,YAAY,CAACK,MAAhCb;IACA,KAAK,IAAIc,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGP,YAAY,CAACK,MAAnC,EAA2CC,CAAC,GAAGC,GAA/C,EAAoD,EAAED,CAAtD,EAAyD;MACvDd,SAAS,CAACc,CAAD,CAATd,GAAeQ,YAAY,CAACM,CAAD,CAAZN,CAAgBQ,SAA/BhB;IACD;IACD,MAAMiB,cAAc,GAAA,EAAA,CAAA,MAAA,CAAMjB,SAAS,CAACkB,IAAVlB,CAAe,IAAfA,CAAN,EAAA,IAAA,CAApB;IACA,QAAQO,GAAR;MAEE,KAAK,UAAL;QACE,IAAID,QAAJ,EAAc;UACZJ,MAAM,GAAGA,MAAM,CAACiB,OAAPjB,CAAeL,yBAAfK,EAA0Ce,cAA1Cf,CAATA;QACD;QACD;MAEF,KAAK,gBAAL;QACE,IAAII,QAAJ,EAAc;UACZJ,MAAM,GAAGA,MAAM,CAACiB,OAAPjB,CAAeJ,mBAAfI,EAAoCkB,KAAK,IAAIA,KAAK,GAAGH,cAArDf,CAATA;QACD;QACD;MAEF,KAAK,cAAL;QACE,IAAII,QAAJ,EAAc;UACZJ,MAAM,GAAGA,MAAM,CAACiB,OAAPjB,CAAeH,iBAAfG,EAAkCkB,KAAK,IAAIH,cAAc,GAAGG,KAA5DlB,CAATA;QACD;QACD;MAEF,KAAK,UAAL;QACE,IAAI,CAACI,QAAL,EAAe;UACbJ,MAAM,GAAGA,MAAM,CAACiB,OAAPjB,CAAeL,yBAAfK,EAA0Ce,cAA1Cf,CAATA;QACD;QACD;MAEF,KAAK,gBAAL;QACE,IAAI,CAACI,QAAL,EAAe;UACbJ,MAAM,GAAGA,MAAM,CAACiB,OAAPjB,CAAeJ,mBAAfI,EAAoCkB,KAAK,IAAIA,KAAK,GAAGH,cAArDf,CAATA;QACD;QACD;MAEF,KAAK,cAAL;QACE,IAAI,CAACI,QAAL,EAAe;UACbJ,MAAM,GAAGA,MAAM,CAACiB,OAAPjB,CAAeH,iBAAfG,EAAkCkB,KAAK,IAAIH,cAAc,GAAGG,KAA5DlB,CAATA;QACD;QACD;MAEF;QAIEA,MAAM,GAAGA,MAAM,CAACiB,OAAPjB,CAAeK,GAAfL,EAAoBkB,KAAK,IAAIA,KAAK,GAAGH,cAArCf,CAATA;IAAAA;EAEL;EAGDA,MAAM,GAAGA,MAAM,CAACiB,OAAPjB,CAAeL,yBAAfK,EAA0C,EAA1CA,CAATA;EAGA,IAAIG,mBAAJ,EAAyB;IACvBH,MAAM,GAAGA,MAAM,CAACiB,OAAPjB,CAAe,QAAfA,EAAyBkB,KAAK,IAAIA,KAAK,GAAGxB,gBAAgB,CAACO,IAAD,CAA1DD,CAATA;EACD;EAED,OAAOA,MAAP;AACD;AAKD,OAAO,SAASmB,cAAT,CAAwBC,OAAxB,EAAiC;EACtC,MAAMC,MAAM,GAAG,CAAA,CAAf;EACA5B,MAAM,CAAC6B,KAAK,CAACC,OAAND,CAAcF,OAAdE,CAAAA,IAA0BF,OAAO,CAACT,MAARS,GAAiB,CAA5C,CAAN3B;EACA2B,OAAO,CAACI,OAARJ,CAAgBlB,MAAM,IAAI;IACxB,KAAK,MAAMG,GAAX,IAAkBH,MAAlB,EAA0B;MACxBmB,MAAM,CAAChB,GAAD,CAANgB,GAAcA,MAAM,CAAChB,GAAD,CAANgB,GAAAA,EAAAA,CAAAA,MAAAA,CAAiBA,MAAM,CAAChB,GAAD,CAAvBgB,EAAAA,IAAAA,CAAAA,CAAAA,MAAAA,CAAiCnB,MAAM,CAACG,GAAD,CAAvCgB,CAAAA,GAAiDnB,MAAM,CAACG,GAAD,CAArEgB;IACD;EACF,CAJDD,CAAAA;EAKA,OAAOC,MAAP;AACD","sourcesContent":["import {MODULE_INJECTORS_VS, MODULE_INJECTORS_FS} from '../modules/module-injectors';\nimport {VERTEX_SHADER, FRAGMENT_SHADER} from './constants';\nimport {assert} from '../utils';\n\n// TODO - experimental\nconst MODULE_INJECTORS = {\n  [VERTEX_SHADER]: MODULE_INJECTORS_VS,\n  [FRAGMENT_SHADER]: MODULE_INJECTORS_FS\n};\n\nexport const DECLARATION_INJECT_MARKER = '__LUMA_INJECT_DECLARATIONS__'; // Uniform/attribute declarations\n\nconst REGEX_START_OF_MAIN = /void\\s+main\\s*\\([^)]*\\)\\s*\\{\\n?/; // Beginning of main\nconst REGEX_END_OF_MAIN = /}\\n?[^{}]*$/; // End of main, assumes main is last function\nconst fragments = [];\n\n// A minimal shader injection/templating system.\n// RFC: https://github.com/visgl/luma.gl/blob/7.0-release/dev-docs/RFCs/v6.0/shader-injection-rfc.md\n/* eslint-disable complexity */\nexport default function injectShader(source, type, inject, injectStandardStubs = false) {\n  const isVertex = type === VERTEX_SHADER;\n\n  for (const key in inject) {\n    const fragmentData = inject[key];\n    fragmentData.sort((a, b) => a.order - b.order);\n    fragments.length = fragmentData.length;\n    for (let i = 0, len = fragmentData.length; i < len; ++i) {\n      fragments[i] = fragmentData[i].injection;\n    }\n    const fragmentString = `${fragments.join('\\n')}\\n`;\n    switch (key) {\n      // declarations are injected before the main function\n      case 'vs:#decl':\n        if (isVertex) {\n          source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);\n        }\n        break;\n      // inject code at the beginning of the main function\n      case 'vs:#main-start':\n        if (isVertex) {\n          source = source.replace(REGEX_START_OF_MAIN, match => match + fragmentString);\n        }\n        break;\n      // inject code at the end of main function\n      case 'vs:#main-end':\n        if (isVertex) {\n          source = source.replace(REGEX_END_OF_MAIN, match => fragmentString + match);\n        }\n        break;\n      // declarations are injected before the main function\n      case 'fs:#decl':\n        if (!isVertex) {\n          source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);\n        }\n        break;\n      // inject code at the beginning of the main function\n      case 'fs:#main-start':\n        if (!isVertex) {\n          source = source.replace(REGEX_START_OF_MAIN, match => match + fragmentString);\n        }\n        break;\n      // inject code at the end of main function\n      case 'fs:#main-end':\n        if (!isVertex) {\n          source = source.replace(REGEX_END_OF_MAIN, match => fragmentString + match);\n        }\n        break;\n\n      default:\n        // TODO(Tarek): I think this usage should be deprecated.\n\n        // inject code after key, leaving key in place\n        source = source.replace(key, match => match + fragmentString);\n    }\n  }\n\n  // Remove if it hasn't already been replaced\n  source = source.replace(DECLARATION_INJECT_MARKER, '');\n\n  // Finally, if requested, insert an automatic module injector chunk\n  if (injectStandardStubs) {\n    source = source.replace(/\\}\\s*$/, match => match + MODULE_INJECTORS[type]);\n  }\n\n  return source;\n}\n\n/* eslint-enable complexity */\n\n// Takes an array of inject objects and combines them into one\nexport function combineInjects(injects) {\n  const result = {};\n  assert(Array.isArray(injects) && injects.length > 1);\n  injects.forEach(inject => {\n    for (const key in inject) {\n      result[key] = result[key] ? `${result[key]}\\n${inject[key]}` : inject[key];\n    }\n  });\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}