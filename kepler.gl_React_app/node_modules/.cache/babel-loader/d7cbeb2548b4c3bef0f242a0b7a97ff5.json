{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _DEFAULT_TEXTURE_PARA;\nimport { LayerExtension } from '@deck.gl/core';\nimport { Texture2D } from '@luma.gl/core';\nimport { patternShaders } from './shaders.glsl';\nvar defaultProps = {\n  fillPatternEnabled: true,\n  fillPatternAtlas: null,\n  fillPatternMapping: null,\n  fillPatternMask: true,\n  getFillPattern: {\n    type: 'accessor',\n    value: function value(d) {\n      return d.pattern;\n    }\n  },\n  getFillPatternScale: {\n    type: 'accessor',\n    value: 1\n  },\n  getFillPatternOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  }\n};\nvar DEFAULT_TEXTURE_PARAMETERS = (_DEFAULT_TEXTURE_PARA = {}, _defineProperty(_DEFAULT_TEXTURE_PARA, 10241, 9729), _defineProperty(_DEFAULT_TEXTURE_PARA, 10240, 9729), _defineProperty(_DEFAULT_TEXTURE_PARA, 10242, 33071), _defineProperty(_DEFAULT_TEXTURE_PARA, 10243, 33071), _DEFAULT_TEXTURE_PARA);\nvar FillStyleExtension = function (_LayerExtension) {\n  _inherits(FillStyleExtension, _LayerExtension);\n  function FillStyleExtension() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$pattern = _ref.pattern,\n      pattern = _ref$pattern === void 0 ? false : _ref$pattern;\n    _classCallCheck(this, FillStyleExtension);\n    return _possibleConstructorReturn(this, _getPrototypeOf(FillStyleExtension).call(this, {\n      pattern: pattern\n    }));\n  }\n  _createClass(FillStyleExtension, [{\n    key: \"isEnabled\",\n    value: function isEnabled(layer) {\n      return layer.getAttributeManager() && !layer.state.pathTesselator;\n    }\n  }, {\n    key: \"getShaders\",\n    value: function getShaders(extension) {\n      if (!extension.isEnabled(this)) {\n        return null;\n      }\n      return {\n        modules: [extension.opts.pattern && patternShaders].filter(Boolean)\n      };\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState(context, extension) {\n      if (!extension.isEnabled(this)) {\n        return;\n      }\n      var attributeManager = this.getAttributeManager();\n      if (extension.opts.pattern) {\n        attributeManager.add({\n          fillPatternFrames: {\n            size: 4,\n            accessor: 'getFillPattern',\n            transform: extension.getPatternFrame.bind(this),\n            shaderAttributes: {\n              fillPatternFrames: {\n                divisor: 0\n              },\n              instanceFillPatternFrames: {\n                divisor: 1\n              }\n            }\n          },\n          fillPatternScales: {\n            size: 1,\n            accessor: 'getFillPatternScale',\n            defaultValue: 1,\n            shaderAttributes: {\n              fillPatternScales: {\n                divisor: 0\n              },\n              instanceFillPatternScales: {\n                divisor: 1\n              }\n            }\n          },\n          fillPatternOffsets: {\n            size: 2,\n            accessor: 'getFillPatternOffset',\n            shaderAttributes: {\n              fillPatternOffsets: {\n                divisor: 0\n              },\n              instanceFillPatternOffsets: {\n                divisor: 1\n              }\n            }\n          }\n        });\n      }\n      this.setState({\n        emptyTexture: new Texture2D(this.context.gl, {\n          data: new Uint8Array(4),\n          width: 1,\n          height: 1\n        })\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref2, extension) {\n      var props = _ref2.props,\n        oldProps = _ref2.oldProps;\n      if (!extension.isEnabled(this)) {\n        return;\n      }\n      if (props.fillPatternAtlas && props.fillPatternAtlas !== oldProps.fillPatternAtlas) {\n        extension.loadPatternAtlas.call(this, props);\n      }\n      if (props.fillPatternMapping && props.fillPatternMapping !== oldProps.fillPatternMapping) {\n        extension.loadPatternMapping.call(this, props);\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(params, extension) {\n      if (!extension.isEnabled(this)) {\n        return;\n      }\n      var patternTexture = this.state.patternTexture;\n      this.setModuleParameters({\n        fillPatternTexture: patternTexture || this.state.emptyTexture\n      });\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      var _this$state = this.state,\n        patternTexture = _this$state.patternTexture,\n        emptyTexture = _this$state.emptyTexture;\n      if (patternTexture) {\n        patternTexture[\"delete\"]();\n      }\n      if (emptyTexture) {\n        emptyTexture[\"delete\"]();\n      }\n    }\n  }, {\n    key: \"loadPatternAtlas\",\n    value: function () {\n      var _loadPatternAtlas = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(_ref3) {\n        var fillPatternAtlas, fetch, image, patternTexture;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                fillPatternAtlas = _ref3.fillPatternAtlas, fetch = _ref3.fetch;\n                if (this.state.patternTexture) {\n                  this.state.patternTexture[\"delete\"]();\n                }\n                this.setState({\n                  patternTexture: null\n                });\n                image = fillPatternAtlas;\n                if (!(typeof image === 'string')) {\n                  _context.next = 8;\n                  break;\n                }\n                _context.next = 7;\n                return fetch(image, {\n                  propName: 'fillPatternAtlas',\n                  layer: this\n                });\n              case 7:\n                image = _context.sent;\n              case 8:\n                patternTexture = image instanceof Texture2D ? image : new Texture2D(this.context.gl, {\n                  data: image,\n                  parameters: DEFAULT_TEXTURE_PARAMETERS\n                });\n                this.setState({\n                  patternTexture: patternTexture\n                });\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function loadPatternAtlas(_x) {\n        return _loadPatternAtlas.apply(this, arguments);\n      }\n      return loadPatternAtlas;\n    }()\n  }, {\n    key: \"loadPatternMapping\",\n    value: function () {\n      var _loadPatternMapping = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(_ref4) {\n        var fillPatternMapping, fetch, patternMapping;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                fillPatternMapping = _ref4.fillPatternMapping, fetch = _ref4.fetch;\n                this.setState({\n                  patternMapping: null\n                });\n                patternMapping = fillPatternMapping;\n                if (!(typeof patternMapping === 'string')) {\n                  _context2.next = 7;\n                  break;\n                }\n                _context2.next = 6;\n                return fetch(patternMapping, {\n                  propName: 'fillPatternMapping',\n                  layer: this\n                });\n              case 6:\n                patternMapping = _context2.sent;\n              case 7:\n                this.setState({\n                  patternMapping: patternMapping\n                });\n                this.getAttributeManager().invalidate('getFillPattern');\n                this.setNeedsUpdate();\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function loadPatternMapping(_x2) {\n        return _loadPatternMapping.apply(this, arguments);\n      }\n      return loadPatternMapping;\n    }()\n  }, {\n    key: \"getPatternFrame\",\n    value: function getPatternFrame(name) {\n      var patternMapping = this.state.patternMapping;\n      var def = patternMapping && patternMapping[name];\n      return def ? [def.x, def.y, def.width, def.height] : [0, 0, 0, 0];\n    }\n  }]);\n  return FillStyleExtension;\n}(LayerExtension);\nexport { FillStyleExtension as default };\nFillStyleExtension.extensionName = 'FillStyleExtension';\nFillStyleExtension.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/fill-style/fill-style.js"],"names":["LayerExtension","Texture2D","patternShaders","defaultProps","fillPatternEnabled","fillPatternAtlas","fillPatternMapping","fillPatternMask","getFillPattern","type","value","d","pattern","getFillPatternScale","getFillPatternOffset","DEFAULT_TEXTURE_PARAMETERS","FillStyleExtension","layer","getAttributeManager","state","pathTesselator","extension","isEnabled","modules","opts","filter","Boolean","context","attributeManager","add","fillPatternFrames","size","accessor","transform","getPatternFrame","bind","shaderAttributes","divisor","instanceFillPatternFrames","fillPatternScales","defaultValue","instanceFillPatternScales","fillPatternOffsets","instanceFillPatternOffsets","setState","emptyTexture","gl","data","Uint8Array","width","height","props","oldProps","loadPatternAtlas","call","loadPatternMapping","params","patternTexture","setModuleParameters","fillPatternTexture","fetch","image","propName","parameters","patternMapping","invalidate","setNeedsUpdate","name","def","x","y","extensionName"],"mappings":"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","sourcesContent":["import {LayerExtension} from '@deck.gl/core';\nimport {Texture2D} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nimport {patternShaders} from './shaders.glsl';\n\nconst defaultProps = {\n  fillPatternEnabled: true,\n  fillPatternAtlas: null,\n  fillPatternMapping: null,\n  fillPatternMask: true,\n  getFillPattern: {type: 'accessor', value: d => d.pattern},\n  getFillPatternScale: {type: 'accessor', value: 1},\n  getFillPatternOffset: {type: 'accessor', value: [0, 0]}\n};\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n  // GL.LINEAR is the default value but explicitly set it here\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  // for texture boundary artifact\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\nexport default class FillStyleExtension extends LayerExtension {\n  constructor({pattern = false} = {}) {\n    super({pattern});\n  }\n\n  isEnabled(layer) {\n    return layer.getAttributeManager() && !layer.state.pathTesselator;\n  }\n\n  getShaders(extension) {\n    if (!extension.isEnabled(this)) {\n      return null;\n    }\n\n    return {\n      modules: [extension.opts.pattern && patternShaders].filter(Boolean)\n    };\n  }\n\n  initializeState(context, extension) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (extension.opts.pattern) {\n      attributeManager.add({\n        fillPatternFrames: {\n          size: 4,\n          accessor: 'getFillPattern',\n          transform: extension.getPatternFrame.bind(this),\n          shaderAttributes: {\n            fillPatternFrames: {\n              divisor: 0\n            },\n            instanceFillPatternFrames: {\n              divisor: 1\n            }\n          }\n        },\n        fillPatternScales: {\n          size: 1,\n          accessor: 'getFillPatternScale',\n          defaultValue: 1,\n          shaderAttributes: {\n            fillPatternScales: {\n              divisor: 0\n            },\n            instanceFillPatternScales: {\n              divisor: 1\n            }\n          }\n        },\n        fillPatternOffsets: {\n          size: 2,\n          accessor: 'getFillPatternOffset',\n          shaderAttributes: {\n            fillPatternOffsets: {\n              divisor: 0\n            },\n            instanceFillPatternOffsets: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n    this.setState({\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState({props, oldProps}, extension) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    if (props.fillPatternAtlas && props.fillPatternAtlas !== oldProps.fillPatternAtlas) {\n      extension.loadPatternAtlas.call(this, props);\n    }\n    if (props.fillPatternMapping && props.fillPatternMapping !== oldProps.fillPatternMapping) {\n      extension.loadPatternMapping.call(this, props);\n    }\n  }\n\n  draw(params, extension) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    const {patternTexture} = this.state;\n    this.setModuleParameters({\n      fillPatternTexture: patternTexture || this.state.emptyTexture\n    });\n  }\n\n  finalizeState() {\n    const {patternTexture, emptyTexture} = this.state;\n    if (patternTexture) {\n      patternTexture.delete();\n    }\n    if (emptyTexture) {\n      emptyTexture.delete();\n    }\n  }\n\n  async loadPatternAtlas({fillPatternAtlas, fetch}) {\n    if (this.state.patternTexture) {\n      this.state.patternTexture.delete();\n    }\n    this.setState({patternTexture: null});\n    let image = fillPatternAtlas;\n    if (typeof image === 'string') {\n      image = await fetch(image, {propName: 'fillPatternAtlas', layer: this});\n    }\n    const patternTexture =\n      image instanceof Texture2D\n        ? image\n        : new Texture2D(this.context.gl, {\n            data: image,\n            parameters: DEFAULT_TEXTURE_PARAMETERS\n          });\n    this.setState({patternTexture});\n  }\n\n  async loadPatternMapping({fillPatternMapping, fetch}) {\n    this.setState({patternMapping: null});\n    let patternMapping = fillPatternMapping;\n    if (typeof patternMapping === 'string') {\n      patternMapping = await fetch(patternMapping, {\n        propName: 'fillPatternMapping',\n        layer: this\n      });\n    }\n    this.setState({patternMapping});\n    this.getAttributeManager().invalidate('getFillPattern');\n    this.setNeedsUpdate();\n  }\n\n  getPatternFrame(name) {\n    const {patternMapping} = this.state;\n    const def = patternMapping && patternMapping[name];\n    return def ? [def.x, def.y, def.width, def.height] : [0, 0, 0, 0];\n  }\n}\n\nFillStyleExtension.extensionName = 'FillStyleExtension';\nFillStyleExtension.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}