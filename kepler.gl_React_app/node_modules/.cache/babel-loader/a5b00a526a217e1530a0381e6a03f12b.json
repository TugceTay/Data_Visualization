{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.set3dBuildingColor = exports.loadCustomMapStyle = exports.mapStyleChange = exports.loadMapStyleErr = exports.loadMapStyles = exports.requestMapStyles = exports.mapConfigChange = exports.inputMapStyle = exports.addCustomMapStyle = void 0;\nvar _reduxActions = require(\"redux-actions\");\nvar _actionTypes = _interopRequireDefault(require(\"../constants/action-types\"));\n\n// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/**\n * Add map style from user input to reducer and set it to current style\n * This action is called when user click confirm after putting in a valid style url in the custom map style dialog.\n * It should not be called from outside kepler.gl without a valid `inputStyle` in the `mapStyle` reducer.\n * param {void}\n * @memberof mapStyleActions\n * @type {typeof import('./map-style-actions').addCustomMapStyle}\n * @public\n */\nvar addCustomMapStyle = (0, _reduxActions.createAction)(_actionTypes[\"default\"].ADD_CUSTOM_MAP_STYLE);\n/**\n * Input a custom map style object\n * @memberof mapStyleActions\n * @param inputStyle\n * @param inputStyle.url - style url e.g. `'mapbox://styles/heshan/xxxxxyyyyzzz'`\n * @param inputStyle.id - style id e.g. `'custom_style_1'`\n * @param inputStyle.style - actual mapbox style json\n * @param inputStyle.label - style name\n * @param inputStyle.accessToken - mapbox access token\n * @param inputStyle.icon - icon image data url\n * @param [mapState] - mapState is optional\n * @type {typeof import('./map-style-actions').inputMapStyle}\n * @public\n */\n\nexports.addCustomMapStyle = addCustomMapStyle;\nvar inputMapStyle = (0, _reduxActions.createAction)(_actionTypes[\"default\"].INPUT_MAP_STYLE, function (inputStyle, mapState) {\n  return {\n    inputStyle: inputStyle,\n    mapState: mapState\n  };\n});\n/**\n * Update `visibleLayerGroups`to change layer group visibility\n * @memberof mapStyleActions\n * @param mapStyle new config `{visibleLayerGroups: {label: false, road: true, background: true}}`\n * @type {typeof import('./map-style-actions').mapConfigChange}\n * @public\n */\n\nexports.inputMapStyle = inputMapStyle;\nvar mapConfigChange = (0, _reduxActions.createAction)(_actionTypes[\"default\"].MAP_CONFIG_CHANGE, function (mapStyle) {\n  return mapStyle;\n});\n/**\n * Request map style style object based on style.url.\n * @memberof mapStyleActions\n * @type {typeof import('./map-style-actions').requestMapStyles}\n * @public\n */\n\nexports.mapConfigChange = mapConfigChange;\nvar requestMapStyles = (0, _reduxActions.createAction)(_actionTypes[\"default\"].REQUEST_MAP_STYLES, function (mapStyles) {\n  return mapStyles;\n});\n/**\n * Callback when load map style success\n * @memberof mapStyleActions\n * @param newStyles a `{[id]: style}` mapping\n * @type {typeof import('./map-style-actions').loadMapStyles}\n * @public\n */\n\nexports.requestMapStyles = requestMapStyles;\nvar loadMapStyles = (0, _reduxActions.createAction)(_actionTypes[\"default\"].LOAD_MAP_STYLES, function (newStyles) {\n  return newStyles;\n});\n/**\n * Callback when load map style error\n * @memberof mapStyleActions\n * @param error\n * @type {typeof import('./map-style-actions').loadMapStyleErr}\n * @public\n */\n\nexports.loadMapStyles = loadMapStyles;\nvar loadMapStyleErr = (0, _reduxActions.createAction)(_actionTypes[\"default\"].LOAD_MAP_STYLE_ERR, function (error) {\n  return error;\n});\n/**\n * Change to another map style. The selected style should already been loaded into `mapStyle.mapStyles`\n * @memberof mapStyleActions\n * @param styleType the style to change to\n * @type {typeof import('./map-style-actions').mapStyleChange}\n * @public\n */\n\nexports.loadMapStyleErr = loadMapStyleErr;\nvar mapStyleChange = (0, _reduxActions.createAction)(_actionTypes[\"default\"].MAP_STYLE_CHANGE, function (styleType) {\n  return styleType;\n});\n/**\n * Callback when a custom map style object is received\n * @memberof mapStyleActions\n * @param customMapStyle\n * @param customMapStyle.icon\n * @param customMapStyle.style\n * @param customMapStyle.error\n * @type {typeof import('./map-style-actions').loadCustomMapStyle}\n * @public\n */\n\nexports.mapStyleChange = mapStyleChange;\nvar loadCustomMapStyle = (0, _reduxActions.createAction)(_actionTypes[\"default\"].LOAD_CUSTOM_MAP_STYLE, function (customMapStyle) {\n  return customMapStyle;\n}); // SET_3D_BUILDING_COLOR\n\n/**\n * Set 3d building layer group color\n * @memberof mapStyleActions\n * @param color - [r, g, b]\n * @type {typeof import('./map-style-actions').set3dBuildingColor}\n * @public\n */\n\nexports.loadCustomMapStyle = loadCustomMapStyle;\nvar set3dBuildingColor = (0, _reduxActions.createAction)(_actionTypes[\"default\"].SET_3D_BUILDING_COLOR, function (color) {\n  return color;\n});\n/**\n * Actions handled mostly by  `mapStyle` reducer.\n * They manage the display of base map, such as loading and receiving base map styles,\n * hiding and showing map layers, user input of custom map style url.\n *\n * @public\n */\n\n/* eslint-disable no-unused-vars */\n// @ts-ignore\n\nexports.set3dBuildingColor = set3dBuildingColor;\nvar mapStyleActions = null;\n/* eslint-enable no-unused-vars */","map":{"version":3,"sources":["../../src/actions/map-style-actions.js"],"names":["addCustomMapStyle","ActionTypes","ADD_CUSTOM_MAP_STYLE","inputMapStyle","INPUT_MAP_STYLE","inputStyle","mapState","mapConfigChange","MAP_CONFIG_CHANGE","mapStyle","requestMapStyles","REQUEST_MAP_STYLES","mapStyles","loadMapStyles","LOAD_MAP_STYLES","newStyles","loadMapStyleErr","LOAD_MAP_STYLE_ERR","error","mapStyleChange","MAP_STYLE_CHANGE","styleType","loadCustomMapStyle","LOAD_CUSTOM_MAP_STYLE","customMapStyle","set3dBuildingColor","SET_3D_BUILDING_COLOR","color","mapStyleActions"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {createAction} from 'redux-actions';\nimport ActionTypes from 'constants/action-types';\n\n/**\n * Add map style from user input to reducer and set it to current style\n * This action is called when user click confirm after putting in a valid style url in the custom map style dialog.\n * It should not be called from outside kepler.gl without a valid `inputStyle` in the `mapStyle` reducer.\n * param {void}\n * @memberof mapStyleActions\n * @type {typeof import('./map-style-actions').addCustomMapStyle}\n * @public\n */\nexport const addCustomMapStyle = createAction(ActionTypes.ADD_CUSTOM_MAP_STYLE);\n\n/**\n * Input a custom map style object\n * @memberof mapStyleActions\n * @param inputStyle\n * @param inputStyle.url - style url e.g. `'mapbox://styles/heshan/xxxxxyyyyzzz'`\n * @param inputStyle.id - style id e.g. `'custom_style_1'`\n * @param inputStyle.style - actual mapbox style json\n * @param inputStyle.label - style name\n * @param inputStyle.accessToken - mapbox access token\n * @param inputStyle.icon - icon image data url\n * @param [mapState] - mapState is optional\n * @type {typeof import('./map-style-actions').inputMapStyle}\n * @public\n */\nexport const inputMapStyle = createAction(ActionTypes.INPUT_MAP_STYLE, (inputStyle, mapState) => ({\n  inputStyle,\n  mapState\n}));\n\n/**\n * Update `visibleLayerGroups`to change layer group visibility\n * @memberof mapStyleActions\n * @param mapStyle new config `{visibleLayerGroups: {label: false, road: true, background: true}}`\n * @type {typeof import('./map-style-actions').mapConfigChange}\n * @public\n */\nexport const mapConfigChange = createAction(ActionTypes.MAP_CONFIG_CHANGE, mapStyle => mapStyle);\n\n/**\n * Request map style style object based on style.url.\n * @memberof mapStyleActions\n * @type {typeof import('./map-style-actions').requestMapStyles}\n * @public\n */\nexport const requestMapStyles = createAction(\n  ActionTypes.REQUEST_MAP_STYLES,\n  mapStyles => mapStyles\n);\n/**\n * Callback when load map style success\n * @memberof mapStyleActions\n * @param newStyles a `{[id]: style}` mapping\n * @type {typeof import('./map-style-actions').loadMapStyles}\n * @public\n */\nexport const loadMapStyles = createAction(ActionTypes.LOAD_MAP_STYLES, newStyles => newStyles);\n\n/**\n * Callback when load map style error\n * @memberof mapStyleActions\n * @param error\n * @type {typeof import('./map-style-actions').loadMapStyleErr}\n * @public\n */\nexport const loadMapStyleErr = createAction(ActionTypes.LOAD_MAP_STYLE_ERR, error => error);\n\n/**\n * Change to another map style. The selected style should already been loaded into `mapStyle.mapStyles`\n * @memberof mapStyleActions\n * @param styleType the style to change to\n * @type {typeof import('./map-style-actions').mapStyleChange}\n * @public\n */\nexport const mapStyleChange = createAction(ActionTypes.MAP_STYLE_CHANGE, styleType => styleType);\n\n/**\n * Callback when a custom map style object is received\n * @memberof mapStyleActions\n * @param customMapStyle\n * @param customMapStyle.icon\n * @param customMapStyle.style\n * @param customMapStyle.error\n * @type {typeof import('./map-style-actions').loadCustomMapStyle}\n * @public\n */\nexport const loadCustomMapStyle = createAction(\n  ActionTypes.LOAD_CUSTOM_MAP_STYLE,\n  customMapStyle => customMapStyle\n);\n\n// SET_3D_BUILDING_COLOR\n/**\n * Set 3d building layer group color\n * @memberof mapStyleActions\n * @param color - [r, g, b]\n * @type {typeof import('./map-style-actions').set3dBuildingColor}\n * @public\n */\nexport const set3dBuildingColor = createAction(ActionTypes.SET_3D_BUILDING_COLOR, color => color);\n\n/**\n * Actions handled mostly by  `mapStyle` reducer.\n * They manage the display of base map, such as loading and receiving base map styles,\n * hiding and showing map layers, user input of custom map style url.\n *\n * @public\n */\n/* eslint-disable no-unused-vars */\n// @ts-ignore\nconst mapStyleActions = null;\n/* eslint-enable no-unused-vars */\n"]},"metadata":{},"sourceType":"script"}