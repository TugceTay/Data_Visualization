{"ast":null,"code":"import { cutPolylineByGrid, cutPolylineByMercatorBounds } from '@math.gl/polygon';\nexport function normalizePath(path, size, gridResolution, wrapLongitude) {\n  var flatPath = path;\n  if (Array.isArray(path[0])) {\n    var length = path.length * size;\n    flatPath = new Array(length);\n    for (var i = 0; i < path.length; i++) {\n      for (var j = 0; j < size; j++) {\n        flatPath[i * size + j] = path[i][j] || 0;\n      }\n    }\n  }\n  if (gridResolution) {\n    return cutPolylineByGrid(flatPath, {\n      size: size,\n      gridResolution: gridResolution\n    });\n  }\n  if (wrapLongitude) {\n    return cutPolylineByMercatorBounds(flatPath, {\n      size: size\n    });\n  }\n  return flatPath;\n}","map":{"version":3,"sources":["../../../src/path-layer/path.js"],"names":["cutPolylineByGrid","cutPolylineByMercatorBounds","normalizePath","path","size","gridResolution","wrapLongitude","flatPath","Array","isArray","length","i","j"],"mappings":"AAAA,SAAQA,iBAAR,EAA2BC,2BAA3B,QAA6D,kBAA7D;AAMA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,IAA7B,EAAmCC,cAAnC,EAAmDC,aAAnD,EAAkE;EACvE,IAAIC,QAAQ,GAAGJ,IAAf;EACA,IAAIK,KAAK,CAACC,OAAND,CAAcL,IAAI,CAAC,CAAD,CAAlBK,CAAJ,EAA4B;IAC1B,IAAME,MAAM,GAAGP,IAAI,CAACO,MAALP,GAAcC,IAA7B;IACAG,QAAQ,GAAG,IAAIC,KAAJ,CAAUE,MAAV,CAAXH;IACA,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,IAAI,CAACO,MAAzB,EAAiCC,CAAC,EAAlC,EAAsC;MACpC,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,IAApB,EAA0BQ,CAAC,EAA3B,EAA+B;QAC7BL,QAAQ,CAACI,CAAC,GAAGP,IAAJO,GAAWC,CAAZ,CAARL,GAAyBJ,IAAI,CAACQ,CAAD,CAAJR,CAAQS,CAART,CAAAA,IAAc,CAAvCI;MACD;IACF;EACF;EACD,IAAIF,cAAJ,EAAoB;IAClB,OAAOL,iBAAiB,CAACO,QAAD,EAAW;MAACH,IAAI,EAAJA,IAAD;MAAOC,cAAc,EAAdA;IAAP,CAAX,CAAxB;EACD;EACD,IAAIC,aAAJ,EAAmB;IACjB,OAAOL,2BAA2B,CAACM,QAAD,EAAW;MAACH,IAAI,EAAJA;IAAD,CAAX,CAAlC;EACD;EACD,OAAOG,QAAP;AACD","sourcesContent":["import {cutPolylineByGrid, cutPolylineByMercatorBounds} from '@math.gl/polygon';\n\n/** Returns a flat array of path positions\n * Flattens a nested path object\n * Cut the feature if needed (globe projection, wrap longitude, etc.)\n */\nexport function normalizePath(path, size, gridResolution, wrapLongitude) {\n  let flatPath = path;\n  if (Array.isArray(path[0])) {\n    const length = path.length * size;\n    flatPath = new Array(length);\n    for (let i = 0; i < path.length; i++) {\n      for (let j = 0; j < size; j++) {\n        flatPath[i * size + j] = path[i][j] || 0;\n      }\n    }\n  }\n  if (gridResolution) {\n    return cutPolylineByGrid(flatPath, {size, gridResolution});\n  }\n  if (wrapLongitude) {\n    return cutPolylineByMercatorBounds(flatPath, {size});\n  }\n  return flatPath;\n}\n"]},"metadata":{},"sourceType":"module"}