{"ast":null,"code":"/* Constants */\nconst DOWN_EVENT = 1;\nconst MOVE_EVENT = 2;\nconst UP_EVENT = 4;\nconst MOUSE_EVENTS = {\n  pointerdown: DOWN_EVENT,\n  pointermove: MOVE_EVENT,\n  pointerup: UP_EVENT,\n  mousedown: DOWN_EVENT,\n  mousemove: MOVE_EVENT,\n  mouseup: UP_EVENT\n};\n// MouseEvent.which https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/which\nconst MOUSE_EVENT_WHICH_LEFT = 1;\nconst MOUSE_EVENT_WHICH_MIDDLE = 2;\nconst MOUSE_EVENT_WHICH_RIGHT = 3;\n// MouseEvent.button https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\nconst MOUSE_EVENT_BUTTON_LEFT = 0;\nconst MOUSE_EVENT_BUTTON_MIDDLE = 1;\nconst MOUSE_EVENT_BUTTON_RIGHT = 2;\n// MouseEvent.buttons https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\nconst MOUSE_EVENT_BUTTONS_LEFT_MASK = 1;\nconst MOUSE_EVENT_BUTTONS_RIGHT_MASK = 2;\nconst MOUSE_EVENT_BUTTONS_MIDDLE_MASK = 4;\n/**\n * Extract the involved mouse button\n */\nexport function whichButtons(event) {\n  const eventType = MOUSE_EVENTS[event.srcEvent.type];\n  if (!eventType) {\n    // Not a mouse evet\n    return null;\n  }\n  const {\n    buttons,\n    button,\n    which\n  } = event.srcEvent;\n  let leftButton = false;\n  let middleButton = false;\n  let rightButton = false;\n  if (\n  // button is up, need to find out which one was pressed before\n  eventType === UP_EVENT ||\n  // moving but does not support `buttons` API\n  eventType === MOVE_EVENT && !Number.isFinite(buttons)) {\n    leftButton = which === MOUSE_EVENT_WHICH_LEFT;\n    middleButton = which === MOUSE_EVENT_WHICH_MIDDLE;\n    rightButton = which === MOUSE_EVENT_WHICH_RIGHT;\n  } else if (eventType === MOVE_EVENT) {\n    leftButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_LEFT_MASK);\n    middleButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_MIDDLE_MASK);\n    rightButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_RIGHT_MASK);\n  } else if (eventType === DOWN_EVENT) {\n    leftButton = button === MOUSE_EVENT_BUTTON_LEFT;\n    middleButton = button === MOUSE_EVENT_BUTTON_MIDDLE;\n    rightButton = button === MOUSE_EVENT_BUTTON_RIGHT;\n  }\n  return {\n    leftButton,\n    middleButton,\n    rightButton\n  };\n}\n/**\n * Calculate event position relative to the root element\n */\nexport function getOffsetPosition(event, rootElement) {\n  const center = event.center;\n  // `center` is a hammer.js event property\n  if (!center) {\n    // Not a gestural event\n    return null;\n  }\n  const rect = rootElement.getBoundingClientRect();\n  // Fix scale for map affected by a CSS transform.\n  // See https://stackoverflow.com/a/26893663/3528533\n  const scaleX = rect.width / rootElement.offsetWidth || 1;\n  const scaleY = rect.height / rootElement.offsetHeight || 1;\n  // Calculate center relative to the root element\n  const offsetCenter = {\n    x: (center.x - rect.left - rootElement.clientLeft) / scaleX,\n    y: (center.y - rect.top - rootElement.clientTop) / scaleY\n  };\n  return {\n    center,\n    offsetCenter\n  };\n}","map":{"version":3,"sources":["../../../src/utils/event-utils.ts"],"names":[],"mappings":"AAEA;AACA,MAAM,UAAU,GAAG,CAAC;AACpB,MAAM,UAAU,GAAG,CAAC;AACpB,MAAM,QAAQ,GAAG,CAAC;AAClB,MAAM,YAAY,GAAG;EACnB,WAAW,EAAE,UAAU;EACvB,WAAW,EAAE,UAAU;EACvB,SAAS,EAAE,QAAQ;EACnB,SAAS,EAAE,UAAU;EACrB,SAAS,EAAE,UAAU;EACrB,OAAO,EAAE;CACV;AAED;AACA,MAAM,sBAAsB,GAAG,CAAC;AAChC,MAAM,wBAAwB,GAAG,CAAC;AAClC,MAAM,uBAAuB,GAAG,CAAC;AACjC;AACA,MAAM,uBAAuB,GAAG,CAAC;AACjC,MAAM,yBAAyB,GAAG,CAAC;AACnC,MAAM,wBAAwB,GAAG,CAAC;AAClC;AACA,MAAM,6BAA6B,GAAG,CAAC;AACvC,MAAM,8BAA8B,GAAG,CAAC;AACxC,MAAM,+BAA+B,GAAG,CAAC;AAEzC;;AAEG;AACH,OAAM,SAAU,YAAY,CAAC,KAAsB,EAAA;EAKjD,MAAM,SAAS,GAAG,YAAY,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC;EACnD,IAAI,CAAC,SAAS,EAAE;IACd;IACA,OAAO,IAAI;EACZ;EAED,MAAM;IAAC,OAAO;IAAE,MAAM;IAAE;EAAK,CAAC,GAAG,KAAK,CAAC,QAAwB;EAC/D,IAAI,UAAU,GAAG,KAAK;EACtB,IAAI,YAAY,GAAG,KAAK;EACxB,IAAI,WAAW,GAAG,KAAK;EAEvB;EACE;EACA,SAAS,KAAK,QAAQ;EACtB;EACC,SAAS,KAAK,UAAU,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAE,EACvD;IACA,UAAU,GAAG,KAAK,KAAK,sBAAsB;IAC7C,YAAY,GAAG,KAAK,KAAK,wBAAwB;IACjD,WAAW,GAAG,KAAK,KAAK,uBAAuB;GAChD,MAAM,IAAI,SAAS,KAAK,UAAU,EAAE;IACnC,UAAU,GAAG,OAAO,CAAC,OAAO,GAAG,6BAA6B,CAAC;IAC7D,YAAY,GAAG,OAAO,CAAC,OAAO,GAAG,+BAA+B,CAAC;IACjE,WAAW,GAAG,OAAO,CAAC,OAAO,GAAG,8BAA8B,CAAC;GAChE,MAAM,IAAI,SAAS,KAAK,UAAU,EAAE;IACnC,UAAU,GAAG,MAAM,KAAK,uBAAuB;IAC/C,YAAY,GAAG,MAAM,KAAK,yBAAyB;IACnD,WAAW,GAAG,MAAM,KAAK,wBAAwB;EAClD;EAED,OAAO;IAAC,UAAU;IAAE,YAAY;IAAE;EAAW,CAAC;AAChD;AAEA;;AAEG;AACH,OAAM,SAAU,iBAAiB,CAC/B,KAAsB,EACtB,WAAwB,EAAA;EAKxB,MAAM,MAAM,GAAI,KAAqB,CAAC,MAAM;EAE5C;EACA,IAAI,CAAC,MAAM,EAAE;IACX;IACA,OAAO,IAAI;EACZ;EAED,MAAM,IAAI,GAAG,WAAW,CAAC,qBAAqB,EAAE;EAEhD;EACA;EACA,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,WAAW,IAAI,CAAC;EACxD,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,YAAY,IAAI,CAAC;EAE1D;EACA,MAAM,YAAY,GAAG;IACnB,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,UAAU,IAAI,MAAM;IAC3D,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,WAAW,CAAC,SAAS,IAAI;GACpD;EAED,OAAO;IAAC,MAAM;IAAE;EAAY,CAAC;AAC/B","sourceRoot":"","sourcesContent":["/* Constants */\nconst DOWN_EVENT = 1;\nconst MOVE_EVENT = 2;\nconst UP_EVENT = 4;\nconst MOUSE_EVENTS = {\n    pointerdown: DOWN_EVENT,\n    pointermove: MOVE_EVENT,\n    pointerup: UP_EVENT,\n    mousedown: DOWN_EVENT,\n    mousemove: MOVE_EVENT,\n    mouseup: UP_EVENT\n};\n// MouseEvent.which https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/which\nconst MOUSE_EVENT_WHICH_LEFT = 1;\nconst MOUSE_EVENT_WHICH_MIDDLE = 2;\nconst MOUSE_EVENT_WHICH_RIGHT = 3;\n// MouseEvent.button https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\nconst MOUSE_EVENT_BUTTON_LEFT = 0;\nconst MOUSE_EVENT_BUTTON_MIDDLE = 1;\nconst MOUSE_EVENT_BUTTON_RIGHT = 2;\n// MouseEvent.buttons https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\nconst MOUSE_EVENT_BUTTONS_LEFT_MASK = 1;\nconst MOUSE_EVENT_BUTTONS_RIGHT_MASK = 2;\nconst MOUSE_EVENT_BUTTONS_MIDDLE_MASK = 4;\n/**\n * Extract the involved mouse button\n */\nexport function whichButtons(event) {\n    const eventType = MOUSE_EVENTS[event.srcEvent.type];\n    if (!eventType) {\n        // Not a mouse evet\n        return null;\n    }\n    const { buttons, button, which } = event.srcEvent;\n    let leftButton = false;\n    let middleButton = false;\n    let rightButton = false;\n    if (\n    // button is up, need to find out which one was pressed before\n    eventType === UP_EVENT ||\n        // moving but does not support `buttons` API\n        (eventType === MOVE_EVENT && !Number.isFinite(buttons))) {\n        leftButton = which === MOUSE_EVENT_WHICH_LEFT;\n        middleButton = which === MOUSE_EVENT_WHICH_MIDDLE;\n        rightButton = which === MOUSE_EVENT_WHICH_RIGHT;\n    }\n    else if (eventType === MOVE_EVENT) {\n        leftButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_LEFT_MASK);\n        middleButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_MIDDLE_MASK);\n        rightButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_RIGHT_MASK);\n    }\n    else if (eventType === DOWN_EVENT) {\n        leftButton = button === MOUSE_EVENT_BUTTON_LEFT;\n        middleButton = button === MOUSE_EVENT_BUTTON_MIDDLE;\n        rightButton = button === MOUSE_EVENT_BUTTON_RIGHT;\n    }\n    return { leftButton, middleButton, rightButton };\n}\n/**\n * Calculate event position relative to the root element\n */\nexport function getOffsetPosition(event, rootElement) {\n    const center = event.center;\n    // `center` is a hammer.js event property\n    if (!center) {\n        // Not a gestural event\n        return null;\n    }\n    const rect = rootElement.getBoundingClientRect();\n    // Fix scale for map affected by a CSS transform.\n    // See https://stackoverflow.com/a/26893663/3528533\n    const scaleX = rect.width / rootElement.offsetWidth || 1;\n    const scaleY = rect.height / rootElement.offsetHeight || 1;\n    // Calculate center relative to the root element\n    const offsetCenter = {\n        x: (center.x - rect.left - rootElement.clientLeft) / scaleX,\n        y: (center.y - rect.top - rootElement.clientTop) / scaleY\n    };\n    return { center, offsetCenter };\n}\n//# sourceMappingURL=event-utils.js.map"]},"metadata":{},"sourceType":"module"}