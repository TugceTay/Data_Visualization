{"ast":null,"code":"export var AGGREGATION_OPERATION = {\n  SUM: 1,\n  MEAN: 2,\n  MIN: 3,\n  MAX: 4\n};\nfunction sumReducer(accu, cur) {\n  return accu + cur;\n}\nfunction maxReducer(accu, cur) {\n  return cur > accu ? cur : accu;\n}\nfunction minReducer(accu, cur) {\n  return cur < accu ? cur : accu;\n}\nexport function getMean(pts, accessor) {\n  var filtered = pts.map(accessor).filter(Number.isFinite);\n  return filtered.length ? filtered.reduce(sumReducer, 0) / filtered.length : null;\n}\nexport function getSum(pts, accessor) {\n  var filtered = pts.map(accessor).filter(Number.isFinite);\n  return filtered.length ? filtered.reduce(sumReducer, 0) : null;\n}\nexport function getMax(pts, accessor) {\n  var filtered = pts.map(accessor).filter(Number.isFinite);\n  return filtered.length ? filtered.reduce(maxReducer, -Infinity) : null;\n}\nexport function getMin(pts, accessor) {\n  var filtered = pts.map(accessor).filter(Number.isFinite);\n  return filtered.length ? filtered.reduce(minReducer, Infinity) : null;\n}\nexport function getValueFunc(aggregation, accessor) {\n  var op = AGGREGATION_OPERATION[aggregation] || AGGREGATION_OPERATION.SUM;\n  switch (op) {\n    case AGGREGATION_OPERATION.MIN:\n      return function (pts) {\n        return getMin(pts, accessor);\n      };\n    case AGGREGATION_OPERATION.SUM:\n      return function (pts) {\n        return getSum(pts, accessor);\n      };\n    case AGGREGATION_OPERATION.MEAN:\n      return function (pts) {\n        return getMean(pts, accessor);\n      };\n    case AGGREGATION_OPERATION.MAX:\n      return function (pts) {\n        return getMax(pts, accessor);\n      };\n    default:\n      return null;\n  }\n}","map":{"version":3,"sources":["../../../src/utils/aggregation-operation-utils.js"],"names":["AGGREGATION_OPERATION","SUM","MEAN","MIN","MAX","sumReducer","accu","cur","maxReducer","minReducer","getMean","pts","accessor","filtered","map","filter","Number","isFinite","length","reduce","getSum","getMax","Infinity","getMin","getValueFunc","aggregation","op"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport const AGGREGATION_OPERATION = {\n  SUM: 1,\n  MEAN: 2,\n  MIN: 3,\n  MAX: 4\n};\n\nfunction sumReducer(accu, cur) {\n  return accu + cur;\n}\n\nfunction maxReducer(accu, cur) {\n  return cur > accu ? cur : accu;\n}\n\nfunction minReducer(accu, cur) {\n  return cur < accu ? cur : accu;\n}\n\nexport function getMean(pts, accessor) {\n  const filtered = pts.map(accessor).filter(Number.isFinite);\n\n  return filtered.length ? filtered.reduce(sumReducer, 0) / filtered.length : null;\n}\n\nexport function getSum(pts, accessor) {\n  const filtered = pts.map(accessor).filter(Number.isFinite);\n\n  return filtered.length ? filtered.reduce(sumReducer, 0) : null;\n}\n\nexport function getMax(pts, accessor) {\n  const filtered = pts.map(accessor).filter(Number.isFinite);\n\n  return filtered.length ? filtered.reduce(maxReducer, -Infinity) : null;\n}\n\nexport function getMin(pts, accessor) {\n  const filtered = pts.map(accessor).filter(Number.isFinite);\n\n  return filtered.length ? filtered.reduce(minReducer, Infinity) : null;\n}\n\n// Function to convert from aggregation/accessor props (like colorAggregation and getColorWeight) to getValue prop (like getColorValue)\nexport function getValueFunc(aggregation, accessor) {\n  const op = AGGREGATION_OPERATION[aggregation] || AGGREGATION_OPERATION.SUM;\n  switch (op) {\n    case AGGREGATION_OPERATION.MIN:\n      return pts => getMin(pts, accessor);\n    case AGGREGATION_OPERATION.SUM:\n      return pts => getSum(pts, accessor);\n    case AGGREGATION_OPERATION.MEAN:\n      return pts => getMean(pts, accessor);\n    case AGGREGATION_OPERATION.MAX:\n      return pts => getMax(pts, accessor);\n    default:\n      return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}