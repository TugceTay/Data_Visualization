{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport parseMVT from './lib/parse-mvt';\nvar VERSION = typeof \"2.3.13\" !== 'undefined' ? \"2.3.13\" : 'latest';\nexport var MVTWorkerLoader = {\n  id: 'mvt',\n  name: 'Mapbox Vector Tile',\n  version: VERSION,\n  extensions: ['mvt', 'pbf'],\n  mimeTypes: ['application/vnd.mapbox-vector-tile', 'application/x-protobuf'],\n  category: 'geometry',\n  options: {\n    mvt: {\n      coordinates: 'local',\n      layerProperty: 'layerName',\n      layers: null,\n      tileIndex: null,\n      _format: 'geojson',\n      workerUrl: \"https://unpkg.com/@loaders.gl/mvt@\".concat(VERSION, \"/dist/mvt-loader.worker.js\")\n    }\n  }\n};\nexport var MVTLoader = _objectSpread(_objectSpread({}, MVTWorkerLoader), {}, {\n  parse: function () {\n    var _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer, options) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", parseMVT(arrayBuffer, options));\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    function parse(_x, _x2) {\n      return _parse.apply(this, arguments);\n    }\n    return parse;\n  }(),\n  parseSync: parseMVT,\n  binary: true\n});","map":{"version":3,"sources":["../../src/mvt-loader.js"],"names":["parseMVT","VERSION","MVTWorkerLoader","id","name","version","extensions","mimeTypes","category","options","mvt","coordinates","layerProperty","layers","tileIndex","_format","workerUrl","MVTLoader","parse","arrayBuffer","parseSync","binary"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAOA,QAAP,MAAqB,iBAArB;AAIA,IAAMC,OAAO,GAAG,OAAA,QAAA,KAAuB,WAAvB,GAAA,QAAA,GAAmD,QAAnE;AAGA,OAAO,IAAMC,eAAe,GAAG;EAC7BC,EAAE,EAAE,KADyB;EAE7BC,IAAI,EAAE,oBAFuB;EAG7BC,OAAO,EAAEJ,OAHoB;EAK7BK,UAAU,EAAE,CAAC,KAAD,EAAQ,KAAR,CALiB;EAM7BC,SAAS,EAAE,CACT,oCADS,EAET,wBAFS,CANkB;EAW7BC,QAAQ,EAAE,UAXmB;EAY7BC,OAAO,EAAE;IACPC,GAAG,EAAE;MACHC,WAAW,EAAE,OADV;MAEHC,aAAa,EAAE,WAFZ;MAGHC,MAAM,EAAE,IAHL;MAIHC,SAAS,EAAE,IAJR;MAKHC,OAAO,EAAE,SALN;MAMHC,SAAS,EAAA,oCAAA,CAAA,MAAA,CAAuCf,OAAvC,EAAA,4BAAA;IANN;EADE;AAZoB,CAAxB;AAyBP,OAAO,IAAMgB,SAAS,GAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EACjBf,eADiB,CAAA,EAAA,CAAA,CAAA,EAAA;EAEpBgB,KAAK,EAAA,YAAA;IAAA,IAAA,MAAA,GAAA,iBAAA,CAAA,mBAAA,CAAA,IAAA,CAAE,SAAA,OAAA,CAAOC,WAAP,EAAoBV,OAApB,EAAA;MAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;QAAA,OAAA,CAAA,EAAA;UAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;YAAA,KAAA,CAAA;cAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAgCT,QAAQ,CAACmB,WAAD,EAAcV,OAAd,CAAxC,CAAA;YAAA,KAAA,CAAA;YAAA,KAAA,KAAA;cAAA,OAAA,QAAA,CAAA,IAAA,EAAA;UAAA;QAAA;MAAA,CAAA,EAAA,OAAA,CAAA;IAAA,CAAF,CAAA,CAAA;IAAA,SAAA,KAAA,CAAA,EAAA,EAAA,GAAA,EAAA;MAAA,OAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;IAAA;IAAA,OAAA,KAAA;EAAA,CAAA,EAFe;EAGpBW,SAAS,EAAEpB,QAHS;EAIpBqB,MAAM,EAAE;AAJY,CAAA,CAAf","sourcesContent":["/** @typedef {import('@loaders.gl/loader-utils').LoaderObject} LoaderObject */\n/** @typedef {import('@loaders.gl/loader-utils').WorkerLoaderObject} WorkerLoaderObject */\nimport parseMVT from './lib/parse-mvt';\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\n/** @type {WorkerLoaderObject} */\nexport const MVTWorkerLoader = {\n  id: 'mvt',\n  name: 'Mapbox Vector Tile',\n  version: VERSION,\n  // Note: ArcGIS uses '.pbf' extension and 'application/octet-stream'\n  extensions: ['mvt', 'pbf'],\n  mimeTypes: [\n    'application/vnd.mapbox-vector-tile',\n    'application/x-protobuf'\n    // 'application/octet-stream'\n  ],\n  category: 'geometry',\n  options: {\n    mvt: {\n      coordinates: 'local',\n      layerProperty: 'layerName',\n      layers: null,\n      tileIndex: null,\n      _format: 'geojson',\n      workerUrl: `https://unpkg.com/@loaders.gl/mvt@${VERSION}/dist/mvt-loader.worker.js`\n    }\n  }\n};\n\n/** @type {LoaderObject} */\nexport const MVTLoader = {\n  ...MVTWorkerLoader,\n  parse: async (arrayBuffer, options) => parseMVT(arrayBuffer, options),\n  parseSync: parseMVT,\n  binary: true\n};\n"]},"metadata":{},"sourceType":"module"}