{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hexagonToPolygonGeo = hexagonToPolygonGeo;\nvar _core = require(\"@deck.gl/core\");\nvar _console = _interopRequireDefault(require(\"global/console\"));\n\n// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nfunction hexagonToPolygonGeo(object, properties, radius, mapState) {\n  var viewport = new _core.WebMercatorViewport(mapState);\n  if (!Array.isArray(object.position)) {\n    return null;\n  }\n  var screenCenter = viewport.projectFlat(object.position);\n  var _viewport$getDistance = viewport.getDistanceScales(object.position),\n    unitsPerMeter = _viewport$getDistance.unitsPerMeter;\n  if (!Array.isArray(unitsPerMeter)) {\n    _console[\"default\"].warn(\"unitsPerMeter is undefined\");\n    return null;\n  }\n  var pixRadius = radius * unitsPerMeter[0];\n  var coordinates = [];\n  for (var i = 0; i < 6; i++) {\n    var vertex = hex_corner(screenCenter, pixRadius, i);\n    coordinates.push(viewport.unprojectFlat(vertex));\n  }\n  coordinates.push(coordinates[0]);\n  return {\n    geometry: {\n      coordinates: coordinates,\n      type: 'LineString'\n    },\n    properties: properties\n  };\n}\nfunction hex_corner(center, radius, i) {\n  var angle_deg = 60 * i + 30;\n  var angle_rad = Math.PI / 180 * angle_deg;\n  return [center[0] + radius * Math.cos(angle_rad), center[1] + radius * Math.sin(angle_rad)];\n}","map":{"version":3,"sources":["../../../src/layers/hexagon-layer/hexagon-utils.js"],"names":["hexagonToPolygonGeo","object","properties","radius","mapState","viewport","WebMercatorViewport","Array","isArray","position","screenCenter","projectFlat","unitsPerMeter","getDistanceScales","Console","warn","pixRadius","coordinates","i","vertex","hex_corner","push","unprojectFlat","geometry","type","center","angle_deg","angle_rad","Math","PI","cos","sin"],"mappings":";;;;;;;AAoBA,IAAA,KAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AACA,IAAA,QAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;AArBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKO,SAASA,mBAAT,CAA6BC,MAA7B,EAAqCC,UAArC,EAAiDC,MAAjD,EAAyDC,QAAzD,EAAmE;EACxE,IAAMC,QAAQ,GAAG,IAAIC,KAAAA,CAAAA,mBAAJ,CAAwBF,QAAxB,CAAjB;EACA,IAAI,CAACG,KAAK,CAACC,OAAND,CAAcN,MAAM,CAACQ,QAArBF,CAAL,EAAqC;IACnC,OAAO,IAAP;EACD;EAED,IAAMG,YAAY,GAAGL,QAAQ,CAACM,WAATN,CAAqBJ,MAAM,CAACQ,QAA5BJ,CAArB;EANwE,IAAA,qBAAA,GAOhDA,QAAQ,CAACQ,iBAATR,CAA2BJ,MAAM,CAACQ,QAAlCJ,CAPgD;IAOjEO,aAPiE,GAAA,qBAAA,CAOjEA,aAPiE;EASxE,IAAI,CAACL,KAAK,CAACC,OAAND,CAAcK,aAAdL,CAAL,EAAmC;IACjCO,QAAAA,CAAAA,SAAAA,CAAAA,CAAQC,IAARD,CAAAA,4BAAAA,CAAAA;IACA,OAAO,IAAP;EACD;EAED,IAAME,SAAS,GAAGb,MAAM,GAAGS,aAAa,CAAC,CAAD,CAAxC;EAEA,IAAMK,WAAW,GAAG,EAApB;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;IAC1B,IAAMC,MAAM,GAAGC,UAAU,CAACV,YAAD,EAAeM,SAAf,EAA0BE,CAA1B,CAAzB;IACAD,WAAW,CAACI,IAAZJ,CAAiBZ,QAAQ,CAACiB,aAATjB,CAAuBc,MAAvBd,CAAjBY,CAAAA;EACD;EAEDA,WAAW,CAACI,IAAZJ,CAAiBA,WAAW,CAAC,CAAD,CAA5BA,CAAAA;EAEA,OAAO;IACLM,QAAQ,EAAE;MACRN,WAAW,EAAXA,WADQ;MAERO,IAAI,EAAE;IAFE,CADL;IAKLtB,UAAU,EAAVA;EALK,CAAP;AAOD;AAED,SAASkB,UAAT,CAAoBK,MAApB,EAA4BtB,MAA5B,EAAoCe,CAApC,EAAuC;EACrC,IAAMQ,SAAS,GAAG,EAAA,GAAKR,CAAL,GAAS,EAA3B;EACA,IAAMS,SAAS,GAAIC,IAAI,CAACC,EAALD,GAAU,GAAX,GAAkBF,SAApC;EAEA,OAAO,CAACD,MAAM,CAAC,CAAD,CAANA,GAAYtB,MAAM,GAAGyB,IAAI,CAACE,GAALF,CAASD,SAATC,CAAtB,EAA2CH,MAAM,CAAC,CAAD,CAANA,GAAYtB,MAAM,GAAGyB,IAAI,CAACG,GAALH,CAASD,SAATC,CAAhE,CAAP;AACD","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {WebMercatorViewport} from '@deck.gl/core';\nimport Console from 'global/console';\n\nexport function hexagonToPolygonGeo(object, properties, radius, mapState) {\n  const viewport = new WebMercatorViewport(mapState);\n  if (!Array.isArray(object.position)) {\n    return null;\n  }\n\n  const screenCenter = viewport.projectFlat(object.position);\n  const {unitsPerMeter} = viewport.getDistanceScales(object.position);\n\n  if (!Array.isArray(unitsPerMeter)) {\n    Console.warn(`unitsPerMeter is undefined`);\n    return null;\n  }\n\n  const pixRadius = radius * unitsPerMeter[0];\n\n  const coordinates = [];\n\n  for (let i = 0; i < 6; i++) {\n    const vertex = hex_corner(screenCenter, pixRadius, i);\n    coordinates.push(viewport.unprojectFlat(vertex));\n  }\n\n  coordinates.push(coordinates[0]);\n\n  return {\n    geometry: {\n      coordinates,\n      type: 'LineString'\n    },\n    properties\n  };\n}\n\nfunction hex_corner(center, radius, i) {\n  const angle_deg = 60 * i + 30;\n  const angle_rad = (Math.PI / 180) * angle_deg;\n\n  return [center[0] + radius * Math.cos(angle_rad), center[1] + radius * Math.sin(angle_rad)];\n}\n"]},"metadata":{},"sourceType":"script"}