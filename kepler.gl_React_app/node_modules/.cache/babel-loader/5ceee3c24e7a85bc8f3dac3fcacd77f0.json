{"ast":null,"code":"import encodeGLBSync from './lib/encode-glb';\nexport default {\n  name: 'GLB',\n  extensions: ['glb'],\n  mimeTypes: ['model/gltf-binary'],\n  encodeSync: encodeSync,\n  binary: true,\n  options: {\n    glb: {}\n  }\n};\nfunction encodeSync(glb, options) {\n  var _options$byteOffset = options.byteOffset,\n    byteOffset = _options$byteOffset === void 0 ? 0 : _options$byteOffset;\n  var byteLength = encodeGLBSync(glb, null, byteOffset, options);\n  var arrayBuffer = new ArrayBuffer(byteLength);\n  var dataView = new DataView(arrayBuffer);\n  encodeGLBSync(glb, dataView, byteOffset, options);\n  return arrayBuffer;\n}","map":{"version":3,"sources":["../../src/glb-writer.js"],"names":["encodeGLBSync","name","extensions","mimeTypes","encodeSync","binary","options","glb","byteOffset","byteLength","arrayBuffer","ArrayBuffer","dataView","DataView"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,kBAA1B;AAEA,eAAe;EACbC,IAAI,EAAE,KADO;EAEbC,UAAU,EAAE,CAAC,KAAD,CAFC;EAGbC,SAAS,EAAE,CAAC,mBAAD,CAHE;EAIbC,UAAU,EAAVA,UAJa;EAKbC,MAAM,EAAE,IALK;EAMbC,OAAO,EAAE;IACPC,GAAG,EAAE,CAAA;EADE;AANI,CAAf;AAWA,SAASH,UAAT,CAAoBG,GAApB,EAAyBD,OAAzB,EAAkC;EAAA,IAAA,mBAAA,GACPA,OADO,CACzBE,UADyB;IACzBA,UADyB,GAAA,mBAAA,KAAA,KAAA,CAAA,GACZ,CADY,GAAA,mBAAA;EAIhC,IAAMC,UAAU,GAAGT,aAAa,CAACO,GAAD,EAAM,IAAN,EAAYC,UAAZ,EAAwBF,OAAxB,CAAhC;EACA,IAAMI,WAAW,GAAG,IAAIC,WAAJ,CAAgBF,UAAhB,CAApB;EAGA,IAAMG,QAAQ,GAAG,IAAIC,QAAJ,CAAaH,WAAb,CAAjB;EACAV,aAAa,CAACO,GAAD,EAAMK,QAAN,EAAgBJ,UAAhB,EAA4BF,OAA5B,CAAbN;EAEA,OAAOU,WAAP;AACD","sourcesContent":["import encodeGLBSync from './lib/encode-glb';\n\nexport default {\n  name: 'GLB',\n  extensions: ['glb'],\n  mimeTypes: ['model/gltf-binary'],\n  encodeSync,\n  binary: true,\n  options: {\n    glb: {}\n  }\n};\n\nfunction encodeSync(glb, options) {\n  const {byteOffset = 0} = options;\n\n  // Calculate length and allocate buffer\n  const byteLength = encodeGLBSync(glb, null, byteOffset, options);\n  const arrayBuffer = new ArrayBuffer(byteLength);\n\n  // Encode into buffer\n  const dataView = new DataView(arrayBuffer);\n  encodeGLBSync(glb, dataView, byteOffset, options);\n\n  return arrayBuffer;\n}\n"]},"metadata":{},"sourceType":"module"}