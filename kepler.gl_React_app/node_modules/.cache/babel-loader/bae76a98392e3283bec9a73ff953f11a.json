{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport View from './view';\nimport Viewport from '../viewports/viewport';\nimport { getMeterZoom } from '@math.gl/web-mercator';\nimport { Matrix4, _SphericalCoordinates as SphericalCoordinates } from 'math.gl';\nimport FirstPersonController from '../controllers/first-person-controller';\nfunction getDirectionFromBearingAndPitch(_ref) {\n  var bearing = _ref.bearing,\n    pitch = _ref.pitch;\n  var spherical = new SphericalCoordinates({\n    bearing: bearing,\n    pitch: pitch\n  });\n  var direction = spherical.toVector3().normalize();\n  return direction;\n}\nvar FirstPersonView = function (_View) {\n  _inherits(FirstPersonView, _View);\n  function FirstPersonView() {\n    _classCallCheck(this, FirstPersonView);\n    return _possibleConstructorReturn(this, _getPrototypeOf(FirstPersonView).apply(this, arguments));\n  }\n  _createClass(FirstPersonView, [{\n    key: \"_getViewport\",\n    value: function _getViewport(props) {\n      var _props$modelMatrix = props.modelMatrix,\n        modelMatrix = _props$modelMatrix === void 0 ? null : _props$modelMatrix,\n        _props$bearing = props.bearing,\n        bearing = _props$bearing === void 0 ? 0 : _props$bearing,\n        _props$pitch = props.pitch,\n        pitch = _props$pitch === void 0 ? 0 : _props$pitch,\n        _props$up = props.up,\n        up = _props$up === void 0 ? [0, 0, 1] : _props$up;\n      var dir = getDirectionFromBearingAndPitch({\n        bearing: bearing,\n        pitch: 90 + pitch\n      });\n      var center = modelMatrix ? modelMatrix.transformDirection(dir) : dir;\n      var zoom = getMeterZoom(props);\n      var scale = Math.pow(2, zoom);\n      var viewMatrix = new Matrix4().lookAt({\n        eye: [0, 0, 0],\n        center: center,\n        up: up\n      }).scale(scale);\n      return new Viewport(Object.assign({}, props, {\n        zoom: zoom,\n        viewMatrix: viewMatrix\n      }));\n    }\n  }, {\n    key: \"controller\",\n    get: function get() {\n      return this._getControllerProps({\n        type: FirstPersonController\n      });\n    }\n  }]);\n  return FirstPersonView;\n}(View);\nexport { FirstPersonView as default };\nFirstPersonView.displayName = 'FirstPersonView';","map":{"version":3,"sources":["../../../src/views/first-person-view.js"],"names":["View","Viewport","getMeterZoom","Matrix4","_SphericalCoordinates","SphericalCoordinates","FirstPersonController","getDirectionFromBearingAndPitch","bearing","pitch","spherical","direction","toVector3","normalize","FirstPersonView","_getControllerProps","type","props","modelMatrix","up","dir","center","transformDirection","zoom","scale","Math","pow","viewMatrix","lookAt","eye","assign","displayName"],"mappings":";;;;;AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAAQC,YAAR,QAA2B,uBAA3B;AACA,SAAQC,OAAR,EAAiBC,qBAAqB,IAAIC,oBAA1C,QAAqE,SAArE;AACA,OAAOC,qBAAP,MAAkC,wCAAlC;AAEA,SAASC,+BAAT,CAAA,IAAA,EAA2D;EAAA,IAAjBC,OAAiB,GAAA,IAAA,CAAjBA,OAAiB;IAARC,KAAQ,GAAA,IAAA,CAARA,KAAQ;EACzD,IAAMC,SAAS,GAAG,IAAIL,oBAAJ,CAAyB;IAACG,OAAO,EAAPA,OAAD;IAAUC,KAAK,EAALA;EAAV,CAAzB,CAAlB;EACA,IAAME,SAAS,GAAGD,SAAS,CAACE,SAAVF,EAAAA,CAAsBG,SAAtBH,EAAlB;EACA,OAAOC,SAAP;AACD;IAEoBG,e;;;;;;;;iCAONG,K,EAAO;MAAA,IAAA,kBAAA,GAQdA,KARc,CAIhBC,WAJgB;QAIhBA,WAJgB,GAAA,kBAAA,KAAA,KAAA,CAAA,GAIF,IAJE,GAAA,kBAAA;QAAA,cAAA,GAQdD,KARc,CAKhBT,OALgB;QAKhBA,OALgB,GAAA,cAAA,KAAA,KAAA,CAAA,GAKN,CALM,GAAA,cAAA;QAAA,YAAA,GAQdS,KARc,CAMhBR,KANgB;QAMhBA,KANgB,GAAA,YAAA,KAAA,KAAA,CAAA,GAMR,CANQ,GAAA,YAAA;QAAA,SAAA,GAQdQ,KARc,CAOhBE,EAPgB;QAOhBA,EAPgB,GAAA,SAAA,KAAA,KAAA,CAAA,GAOX,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAPW,GAAA,SAAA;MAWlB,IAAMC,GAAG,GAAGb,+BAA+B,CAAC;QAC1CC,OAAO,EAAPA,OAD0C;QAE1CC,KAAK,EAAE,EAAA,GAAKA;MAF8B,CAAD,CAA3C;MAMA,IAAMY,MAAM,GAAGH,WAAW,GAAGA,WAAW,CAACI,kBAAZJ,CAA+BE,GAA/BF,CAAH,GAAyCE,GAAnE;MAGA,IAAMG,IAAI,GAAGrB,YAAY,CAACe,KAAD,CAAzB;MACA,IAAMO,KAAK,GAAGC,IAAI,CAACC,GAALD,CAAS,CAATA,EAAYF,IAAZE,CAAd;MACA,IAAME,UAAU,GAAG,IAAIxB,OAAJ,EAAA,CAAcyB,MAAd,CAAqB;QAACC,GAAG,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAN;QAAiBR,MAAM,EAANA,MAAjB;QAAyBF,EAAE,EAAFA;MAAzB,CAArB,CAAA,CAAmDK,KAAnD,CAAyDA,KAAzD,CAAnB;MAEA,OAAO,IAAIvB,QAAJ,CACL,MAAM,CAAC6B,MAAP,CAAc,CAAA,CAAd,EAAkBb,KAAlB,EAAyB;QACvBM,IAAI,EAAJA,IADuB;QAEvBI,UAAU,EAAVA;MAFuB,CAAzB,CADK,CAAP;IAMD;;;wBApCgB;MACf,OAAO,IAAA,CAAKZ,mBAAL,CAAyB;QAC9BC,IAAI,EAAEV;MADwB,CAAzB,CAAP;IAGD;;;EAL0CN,I;SAAxBc,e;AAwCrBA,eAAe,CAACiB,WAAhBjB,GAA8B,iBAA9BA","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\nimport {getMeterZoom} from '@math.gl/web-mercator';\nimport {Matrix4, _SphericalCoordinates as SphericalCoordinates} from 'math.gl';\nimport FirstPersonController from '../controllers/first-person-controller';\n\nfunction getDirectionFromBearingAndPitch({bearing, pitch}) {\n  const spherical = new SphericalCoordinates({bearing, pitch});\n  const direction = spherical.toVector3().normalize();\n  return direction;\n}\n\nexport default class FirstPersonView extends View {\n  get controller() {\n    return this._getControllerProps({\n      type: FirstPersonController\n    });\n  }\n\n  _getViewport(props) {\n    // TODO - push direction handling into Matrix4.lookAt\n    const {\n      // view matrix arguments\n      modelMatrix = null,\n      bearing = 0,\n      pitch = 0,\n      up = [0, 0, 1] // Defines up direction, default positive z axis,\n    } = props;\n\n    // Always calculate direction from bearing and pitch\n    const dir = getDirectionFromBearingAndPitch({\n      bearing,\n      pitch: 90 + pitch\n    });\n\n    // Direction is relative to model coordinates, of course\n    const center = modelMatrix ? modelMatrix.transformDirection(dir) : dir;\n\n    // Just the direction. All the positioning is done in viewport.js\n    const zoom = getMeterZoom(props);\n    const scale = Math.pow(2, zoom);\n    const viewMatrix = new Matrix4().lookAt({eye: [0, 0, 0], center, up}).scale(scale);\n\n    return new Viewport(\n      Object.assign({}, props, {\n        zoom,\n        viewMatrix\n      })\n    );\n  }\n}\n\nFirstPersonView.displayName = 'FirstPersonView';\n"]},"metadata":{},"sourceType":"module"}