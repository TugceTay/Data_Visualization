{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport { Stats } from '@probe.gl/stats';\nvar STAT_QUEUED_REQUESTS = 'Queued Requests';\nvar STAT_ACTIVE_REQUESTS = 'Active Requests';\nvar STAT_CANCELLED_REQUESTS = 'Cancelled Requests';\nvar STAT_QUEUED_REQUESTS_EVER = 'Queued Requests Ever';\nvar STAT_ACTIVE_REQUESTS_EVER = 'Active Requests Ever';\nvar DEFAULT_PROPS = {\n  id: 'request-scheduler',\n  throttleRequests: true,\n  maxRequests: 6\n};\nvar RequestScheduler = function () {\n  function RequestScheduler() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, RequestScheduler);\n    this.props = _objectSpread(_objectSpread({}, DEFAULT_PROPS), props);\n    this.requestQueue = [];\n    this.activeRequestCount = 0;\n    this.requestMap = new Map();\n    this.stats = new Stats({\n      id: props.id\n    });\n    this.stats.get(STAT_QUEUED_REQUESTS);\n    this.stats.get(STAT_ACTIVE_REQUESTS);\n    this.stats.get(STAT_CANCELLED_REQUESTS);\n    this.stats.get(STAT_QUEUED_REQUESTS_EVER);\n    this.stats.get(STAT_ACTIVE_REQUESTS_EVER);\n    this._deferredUpdate = null;\n  }\n  _createClass(RequestScheduler, [{\n    key: \"scheduleRequest\",\n    value: function scheduleRequest(handle) {\n      var getPriority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {\n        return 0;\n      };\n      if (!this.props.throttleRequests) {\n        return Promise.resolve({\n          done: function done() {}\n        });\n      }\n      if (this.requestMap.has(handle)) {\n        return this.requestMap.get(handle);\n      }\n      var request = {\n        handle: handle,\n        getPriority: getPriority\n      };\n      var promise = new Promise(function (resolve) {\n        request.resolve = resolve;\n        return request;\n      });\n      this.requestQueue.push(request);\n      this.requestMap.set(handle, promise);\n      this._issueNewRequests();\n      return promise;\n    }\n  }, {\n    key: \"_issueRequest\",\n    value: function _issueRequest(request) {\n      var _this = this;\n      var handle = request.handle,\n        resolve = request.resolve;\n      var isDone = false;\n      var done = function done() {\n        if (!isDone) {\n          isDone = true;\n          _this.requestMap[\"delete\"](handle);\n          _this.activeRequestCount--;\n          _this._issueNewRequests();\n        }\n      };\n      this.activeRequestCount++;\n      return resolve ? resolve({\n        done: done\n      }) : Promise.resolve({\n        done: done\n      });\n    }\n  }, {\n    key: \"_issueNewRequests\",\n    value: function _issueNewRequests() {\n      var _this2 = this;\n      if (!this._deferredUpdate) {\n        this._deferredUpdate = setTimeout(function () {\n          return _this2._issueNewRequestsAsync();\n        }, 0);\n      }\n    }\n  }, {\n    key: \"_issueNewRequestsAsync\",\n    value: function _issueNewRequestsAsync() {\n      this._deferredUpdate = null;\n      var freeSlots = Math.max(this.props.maxRequests - this.activeRequestCount, 0);\n      if (freeSlots === 0) {\n        return;\n      }\n      this._updateAllRequests();\n      for (var i = 0; i < freeSlots; ++i) {\n        if (this.requestQueue.length > 0) {\n          var request = this.requestQueue.shift();\n          this._issueRequest(request);\n        }\n      }\n    }\n  }, {\n    key: \"_updateAllRequests\",\n    value: function _updateAllRequests() {\n      var requestQueue = this.requestQueue;\n      for (var i = 0; i < requestQueue.length; ++i) {\n        var request = requestQueue[i];\n        if (!this._updateRequest(request)) {\n          requestQueue.splice(i, 1);\n          this.requestMap[\"delete\"](request.handle);\n          i--;\n        }\n      }\n      requestQueue.sort(function (a, b) {\n        return a.priority - b.priority;\n      });\n    }\n  }, {\n    key: \"_updateRequest\",\n    value: function _updateRequest(request) {\n      request.priority = request.getPriority(request.handle);\n      if (request.priority < 0) {\n        request.resolve(null);\n        return false;\n      }\n      return true;\n    }\n  }]);\n  return RequestScheduler;\n}();\nexport { RequestScheduler as default };","map":{"version":3,"sources":["../../../../src/lib/request-utils/request-scheduler.js"],"names":["Stats","STAT_QUEUED_REQUESTS","STAT_ACTIVE_REQUESTS","STAT_CANCELLED_REQUESTS","STAT_QUEUED_REQUESTS_EVER","STAT_ACTIVE_REQUESTS_EVER","DEFAULT_PROPS","id","throttleRequests","maxRequests","RequestScheduler","props","requestQueue","activeRequestCount","requestMap","Map","stats","get","_deferredUpdate","handle","getPriority","resolve","done","has","request","promise","Promise","push","set","_issueNewRequests","isDone","setTimeout","_issueNewRequestsAsync","freeSlots","Math","max","_updateAllRequests","i","length","shift","_issueRequest","_updateRequest","splice","sort","a","b","priority"],"mappings":"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","sourcesContent":["// TODO - this should move to core when test cases are more complete\n\n/* global setTimeout */\nimport {Stats} from '@probe.gl/stats';\n\nconst STAT_QUEUED_REQUESTS = 'Queued Requests';\nconst STAT_ACTIVE_REQUESTS = 'Active Requests';\nconst STAT_CANCELLED_REQUESTS = 'Cancelled Requests';\nconst STAT_QUEUED_REQUESTS_EVER = 'Queued Requests Ever';\nconst STAT_ACTIVE_REQUESTS_EVER = 'Active Requests Ever';\n\nconst DEFAULT_PROPS = {\n  id: 'request-scheduler',\n  // Specifies if the request scheduler should throttle incoming requests, mainly for comparative testing\n  throttleRequests: true,\n  // The maximum number of simultaneous active requests. Un-throttled requests do not observe this limit.\n  maxRequests: 6\n};\n\n// TODO - Track requests globally, across multiple servers\nexport default class RequestScheduler {\n  constructor(props = {}) {\n    this.props = {...DEFAULT_PROPS, ...props};\n\n    // Tracks the number of active requests and prioritizes/cancels queued requests.\n    this.requestQueue = [];\n    this.activeRequestCount = 0;\n    this.requestMap = new Map();\n\n    // Returns the statistics used by the request scheduler.\n    this.stats = new Stats({id: props.id});\n    this.stats.get(STAT_QUEUED_REQUESTS);\n    this.stats.get(STAT_ACTIVE_REQUESTS);\n    this.stats.get(STAT_CANCELLED_REQUESTS);\n    this.stats.get(STAT_QUEUED_REQUESTS_EVER);\n    this.stats.get(STAT_ACTIVE_REQUESTS_EVER);\n\n    this._deferredUpdate = null;\n  }\n\n  // Called by an application that wants to issue a request, without having it deeply queued\n  // Parameter `getPriority` will be called when request \"slots\" open up,\n  //    allowing the caller to update priority or cancel the request\n  //    Highest priority executes first, priority < 0 cancels the request\n  // Returns: a promise that resolves to a request token when the request can be issued without queueing,\n  //    or `false` if the request has been cancelled (by getPriority)\n  scheduleRequest(handle, getPriority = () => 0) {\n    // Allows throttling to be disabled\n    if (!this.props.throttleRequests) {\n      return Promise.resolve({done: () => {}});\n    }\n\n    // dedupe\n    if (this.requestMap.has(handle)) {\n      return this.requestMap.get(handle);\n    }\n\n    const request = {handle, getPriority};\n    const promise = new Promise(resolve => {\n      request.resolve = resolve;\n      return request;\n    });\n\n    this.requestQueue.push(request);\n    this.requestMap.set(handle, promise);\n    this._issueNewRequests();\n    return promise;\n  }\n\n  // PRIVATE\n\n  _issueRequest(request) {\n    const {handle, resolve} = request;\n    let isDone = false;\n\n    const done = () => {\n      // can only be called once\n      if (!isDone) {\n        isDone = true;\n\n        // Stop tracking a request - it has completed, failed, cancelled etc\n        this.requestMap.delete(handle);\n        this.activeRequestCount--;\n        // A slot just freed up, see if any queued requests are waiting\n        this._issueNewRequests();\n      }\n    };\n\n    // Track this request\n    this.activeRequestCount++;\n\n    return resolve ? resolve({done}) : Promise.resolve({done});\n  }\n\n  // We check requests asynchronously, to prevent multiple updates\n  _issueNewRequests() {\n    if (!this._deferredUpdate) {\n      this._deferredUpdate = setTimeout(() => this._issueNewRequestsAsync(), 0);\n    }\n  }\n\n  // Refresh all requests and\n  _issueNewRequestsAsync() {\n    this._deferredUpdate = null;\n\n    const freeSlots = Math.max(this.props.maxRequests - this.activeRequestCount, 0);\n\n    if (freeSlots === 0) {\n      return;\n    }\n\n    this._updateAllRequests();\n\n    // Resolve pending promises for the top-priority requests\n    for (let i = 0; i < freeSlots; ++i) {\n      if (this.requestQueue.length > 0) {\n        const request = this.requestQueue.shift();\n        this._issueRequest(request);\n      }\n    }\n\n    // Uncomment to debug\n    // console.log(`${freeSlots} free slots, ${this.requestQueue.length} queued requests`);\n  }\n\n  // Ensure all requests have updated priorities, and that no longer valid requests are cancelled\n  _updateAllRequests() {\n    const requestQueue = this.requestQueue;\n    for (let i = 0; i < requestQueue.length; ++i) {\n      const request = requestQueue[i];\n      if (!this._updateRequest(request)) {\n        // Remove the element and make sure to adjust the counter to account for shortened array\n        requestQueue.splice(i, 1);\n        this.requestMap.delete(request.handle);\n        i--;\n      }\n    }\n\n    // Sort the remaining requests based on priority\n    requestQueue.sort((a, b) => a.priority - b.priority);\n  }\n\n  // Update a single request by calling the callback\n  _updateRequest(request) {\n    request.priority = request.getPriority(request.handle); // eslint-disable-line callback-return\n\n    // by returning a negative priority, the callback cancels the request\n    if (request.priority < 0) {\n      request.resolve(null);\n      return false;\n    }\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}