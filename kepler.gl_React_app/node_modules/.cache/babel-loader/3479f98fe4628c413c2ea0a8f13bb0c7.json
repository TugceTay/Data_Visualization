{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { padTo4Bytes, copyToArray } from '@loaders.gl/loader-utils';\nimport { isImage as _isImage } from '@loaders.gl/images';\nimport { getAccessorTypeFromSize, getComponentTypeFromArray } from '../gltf-utils/gltf-utils';\nimport encodeGLBSync from '../encode-glb';\nvar GLBBuilder = function () {\n  function GLBBuilder() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, GLBBuilder);\n    this.byteLength = 0;\n    this.json = {\n      buffers: [{\n        byteLength: 0\n      }],\n      bufferViews: [],\n      accessors: [],\n      images: [],\n      meshes: []\n    };\n    this.sourceBuffers = [];\n    this.log = options.log || console;\n  }\n  _createClass(GLBBuilder, [{\n    key: \"getByteLength\",\n    value: function getByteLength() {\n      return this.byteLength;\n    }\n  }, {\n    key: \"isImage\",\n    value: function isImage(imageData) {\n      return _isImage(imageData);\n    }\n  }, {\n    key: \"encodeSync\",\n    value: function encodeSync() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.encodeAsGLB(options);\n    }\n  }, {\n    key: \"encodeAsGLB\",\n    value: function encodeAsGLB() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this._packBinaryChunk();\n      if (options.magic) {\n        console.warn('Custom glTF magic number no longer supported');\n      }\n      var glb = {\n        version: 2,\n        json: this.json,\n        binary: this.arrayBuffer\n      };\n      var byteLength = encodeGLBSync(glb, null, 0, options);\n      var glbArrayBuffer = new ArrayBuffer(byteLength);\n      var dataView = new DataView(glbArrayBuffer);\n      encodeGLBSync(glb, dataView, 0, options);\n      return glbArrayBuffer;\n    }\n  }, {\n    key: \"addApplicationData\",\n    value: function addApplicationData(key, data) {\n      var packOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      this.json[key] = data;\n      return this;\n    }\n  }, {\n    key: \"addBuffer\",\n    value: function addBuffer(sourceBuffer) {\n      var accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        size: 3\n      };\n      var bufferViewIndex = this.addBufferView(sourceBuffer);\n      var accessorDefaults = {\n        size: accessor.size,\n        componentType: getComponentTypeFromArray(sourceBuffer),\n        count: Math.round(sourceBuffer.length / accessor.size)\n      };\n      return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));\n    }\n  }, {\n    key: \"addBufferView\",\n    value: function addBufferView(buffer) {\n      var byteLength = buffer.byteLength || buffer.length;\n      this.json.bufferViews.push({\n        buffer: 0,\n        byteOffset: this.byteLength,\n        byteLength: byteLength\n      });\n      this.byteLength += padTo4Bytes(byteLength);\n      this.sourceBuffers.push(buffer);\n      return this.json.bufferViews.length - 1;\n    }\n  }, {\n    key: \"addAccessor\",\n    value: function addAccessor(bufferViewIndex, accessor) {\n      this.json.accessors.push({\n        bufferView: bufferViewIndex,\n        type: getAccessorTypeFromSize(accessor.size),\n        componentType: accessor.componentType,\n        count: accessor.count\n      });\n      return this.json.accessors.length - 1;\n    }\n  }, {\n    key: \"_pack\",\n    value: function _pack() {\n      this._packBinaryChunk();\n      return {\n        arrayBuffer: this.arrayBuffer,\n        json: this.json\n      };\n    }\n  }, {\n    key: \"_packBinaryChunk\",\n    value: function _packBinaryChunk() {\n      if (this.arrayBuffer) {\n        return;\n      }\n      var totalByteLength = this.byteLength;\n      var arrayBuffer = new ArrayBuffer(totalByteLength);\n      var targetArray = new Uint8Array(arrayBuffer);\n      var dstByteOffset = 0;\n      for (var i = 0; i < this.sourceBuffers.length; i++) {\n        var sourceBuffer = this.sourceBuffers[i];\n        dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);\n      }\n      this.json.buffers[0].byteLength = totalByteLength;\n      this.arrayBuffer = arrayBuffer;\n      this.sourceBuffers = [];\n    }\n  }, {\n    key: \"_getInternalCounts\",\n    value: function _getInternalCounts() {\n      return {\n        buffers: this.json.buffers.length,\n        bufferViews: this.json.bufferViews.length,\n        accessors: this.json.accessors.length,\n        images: this.json.images.length\n      };\n    }\n  }]);\n  return GLBBuilder;\n}();\nexport { GLBBuilder as default };","map":{"version":3,"sources":["../../../../src/lib/deprecated/glb-builder.js"],"names":["padTo4Bytes","copyToArray","isImage","getAccessorTypeFromSize","getComponentTypeFromArray","encodeGLBSync","GLBBuilder","options","byteLength","json","buffers","bufferViews","accessors","images","meshes","sourceBuffers","log","console","imageData","encodeAsGLB","_packBinaryChunk","magic","warn","glb","version","binary","arrayBuffer","glbArrayBuffer","ArrayBuffer","dataView","DataView","key","data","packOptions","sourceBuffer","accessor","size","bufferViewIndex","addBufferView","accessorDefaults","componentType","count","Math","round","length","addAccessor","Object","assign","buffer","push","byteOffset","bufferView","type","totalByteLength","targetArray","Uint8Array","dstByteOffset","i"],"mappings":";;AAGA,SAAQA,WAAR,EAAqBC,WAArB,QAAuC,0BAAvC;AACA,SAAQC,OAAO,IAAPA,QAAR,QAAsB,oBAAtB;AACA,SAAQC,uBAAR,EAAiCC,yBAAjC,QAAiE,0BAAjE;AACA,OAAOC,aAAP,MAA0B,eAA1B;IAEqBC,U;EACnB,SAAA,UAAA,GAA0B;IAAA,IAAdC,OAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,CAAA,CAAI;IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA;IAGxB,IAAA,CAAKC,UAAL,GAAkB,CAAlB;IAEA,IAAA,CAAKC,IAAL,GAAY;MACVC,OAAO,EAAE,CACP;QAEEF,UAAU,EAAE;MAFd,CADO,CADC;MAOVG,WAAW,EAAE,EAPH;MAQVC,SAAS,EAAE,EARD;MASVC,MAAM,EAAE,EATE;MAUVC,MAAM,EAAE;IAVE,CAAZ;IAeA,IAAA,CAAKC,aAAL,GAAqB,EAArB;IAEA,IAAA,CAAKC,GAAL,GAAWT,OAAO,CAACS,GAART,IAAeU,OAA1B;EACD;;;oCAIe;MACd,OAAO,IAAA,CAAKT,UAAZ;IACD;;;4BAGOU,S,EAAW;MACjB,OAAOhB,QAAO,CAACgB,SAAD,CAAd;IACD;;;iCAGwB;MAAA,IAAdX,OAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,CAAA,CAAI;MACvB,OAAO,IAAA,CAAKY,WAAL,CAAiBZ,OAAjB,CAAP;IACD;;;kCAOyB;MAAA,IAAdA,OAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,CAAA,CAAI;MAExB,IAAA,CAAKa,gBAAL,EAAA;MAEA,IAAIb,OAAO,CAACc,KAAZ,EAAmB;QACjBJ,OAAO,CAACK,IAARL,CAAa,8CAAbA,CAAAA;MACD;MAED,IAAMM,GAAG,GAAG;QACVC,OAAO,EAAE,CADC;QAEVf,IAAI,EAAE,IAAA,CAAKA,IAFD;QAGVgB,MAAM,EAAE,IAAA,CAAKC;MAHH,CAAZ;MAOA,IAAMlB,UAAU,GAAGH,aAAa,CAACkB,GAAD,EAAM,IAAN,EAAY,CAAZ,EAAehB,OAAf,CAAhC;MACA,IAAMoB,cAAc,GAAG,IAAIC,WAAJ,CAAgBpB,UAAhB,CAAvB;MAGA,IAAMqB,QAAQ,GAAG,IAAIC,QAAJ,CAAaH,cAAb,CAAjB;MACAtB,aAAa,CAACkB,GAAD,EAAMM,QAAN,EAAgB,CAAhB,EAAmBtB,OAAnB,CAAbF;MAEA,OAAOsB,cAAP;IACD;;;uCAIkBI,G,EAAKC,I,EAAwB;MAAA,IAAlBC,WAAkB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,CAAA,CAAI;MAC9C,IAAA,CAAKxB,IAAL,CAAUsB,GAAV,CAAA,GAAiBC,IAAjB;MACA,OAAO,IAAP;IACD;;;8BAKSE,Y,EAAoC;MAAA,IAAtBC,QAAsB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAX;QAACC,IAAI,EAAE;MAAP,CAAW;MAC5C,IAAMC,eAAe,GAAG,IAAA,CAAKC,aAAL,CAAmBJ,YAAnB,CAAxB;MAEA,IAAMK,gBAAgB,GAAG;QACvBH,IAAI,EAAED,QAAQ,CAACC,IADQ;QAEvBI,aAAa,EAAEpC,yBAAyB,CAAC8B,YAAD,CAFjB;QAGvBO,KAAK,EAAEC,IAAI,CAACC,KAALD,CAAWR,YAAY,CAACU,MAAbV,GAAsBC,QAAQ,CAACC,IAA1CM;MAHgB,CAAzB;MAMA,OAAO,IAAA,CAAKG,WAAL,CAAiBR,eAAjB,EAAkCS,MAAM,CAACC,MAAPD,CAAcP,gBAAdO,EAAgCX,QAAhCW,CAAlC,CAAP;IACD;;;kCAQaE,M,EAAQ;MACpB,IAAMxC,UAAU,GAAGwC,MAAM,CAACxC,UAAPwC,IAAqBA,MAAM,CAACJ,MAA/C;MAGA,IAAA,CAAKnC,IAAL,CAAUE,WAAV,CAAsBsC,IAAtB,CAA2B;QACzBD,MAAM,EAAE,CADiB;QAGzBE,UAAU,EAAE,IAAA,CAAK1C,UAHQ;QAIzBA,UAAU,EAAVA;MAJyB,CAA3B,CAAA;MASA,IAAA,CAAKA,UAAL,IAAmBR,WAAW,CAACQ,UAAD,CAA9B;MAGA,IAAA,CAAKO,aAAL,CAAmBkC,IAAnB,CAAwBD,MAAxB,CAAA;MAGA,OAAO,IAAA,CAAKvC,IAAL,CAAUE,WAAV,CAAsBiC,MAAtB,GAA+B,CAAtC;IACD;;;gCAGWP,e,EAAiBF,Q,EAAU;MAErC,IAAA,CAAK1B,IAAL,CAAUG,SAAV,CAAoBqC,IAApB,CAAyB;QACvBE,UAAU,EAAEd,eADW;QAEvBe,IAAI,EAAEjD,uBAAuB,CAACgC,QAAQ,CAACC,IAAV,CAFN;QAGvBI,aAAa,EAAEL,QAAQ,CAACK,aAHD;QAIvBC,KAAK,EAAEN,QAAQ,CAACM;MAJO,CAAzB,CAAA;MAOA,OAAO,IAAA,CAAKhC,IAAL,CAAUG,SAAV,CAAoBgC,MAApB,GAA6B,CAApC;IACD;;;4BAKO;MACN,IAAA,CAAKxB,gBAAL,EAAA;MACA,OAAO;QAACM,WAAW,EAAE,IAAA,CAAKA,WAAnB;QAAgCjB,IAAI,EAAE,IAAA,CAAKA;MAA3C,CAAP;IACD;;;uCAGkB;MAEjB,IAAI,IAAA,CAAKiB,WAAT,EAAsB;QACpB;MACD;MAGD,IAAM2B,eAAe,GAAG,IAAA,CAAK7C,UAA7B;MACA,IAAMkB,WAAW,GAAG,IAAIE,WAAJ,CAAgByB,eAAhB,CAApB;MACA,IAAMC,WAAW,GAAG,IAAIC,UAAJ,CAAe7B,WAAf,CAApB;MAGA,IAAI8B,aAAa,GAAG,CAApB;MACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,IAAA,CAAK1C,aAAL,CAAmB6B,MAAvC,EAA+Ca,CAAC,EAAhD,EAAoD;QAClD,IAAMvB,YAAY,GAAG,IAAA,CAAKnB,aAAL,CAAmB0C,CAAnB,CAArB;QACAD,aAAa,GAAGvD,WAAW,CAACiC,YAAD,EAAeoB,WAAf,EAA4BE,aAA5B,CAA3BA;MACD;MAGD,IAAA,CAAK/C,IAAL,CAAUC,OAAV,CAAkB,CAAlB,CAAA,CAAqBF,UAArB,GAAkC6C,eAAlC;MAGA,IAAA,CAAK3B,WAAL,GAAmBA,WAAnB;MAGA,IAAA,CAAKX,aAAL,GAAqB,EAArB;IACD;;;yCAGoB;MACnB,OAAO;QACLL,OAAO,EAAE,IAAA,CAAKD,IAAL,CAAUC,OAAV,CAAkBkC,MADtB;QAELjC,WAAW,EAAE,IAAA,CAAKF,IAAL,CAAUE,WAAV,CAAsBiC,MAF9B;QAGLhC,SAAS,EAAE,IAAA,CAAKH,IAAL,CAAUG,SAAV,CAAoBgC,MAH1B;QAIL/B,MAAM,EAAE,IAAA,CAAKJ,IAAL,CAAUI,MAAV,CAAiB+B;MAJpB,CAAP;IAMD;;;;SApLkBtC,U","sourcesContent":["// @ts-nocheck\n\n/* eslint-disable camelcase, max-statements */\nimport {padTo4Bytes, copyToArray} from '@loaders.gl/loader-utils';\nimport {isImage} from '@loaders.gl/images';\nimport {getAccessorTypeFromSize, getComponentTypeFromArray} from '../gltf-utils/gltf-utils';\nimport encodeGLBSync from '../encode-glb';\n\nexport default class GLBBuilder {\n  constructor(options = {}) {\n    // Lets us keep track of how large the body will be, as well as the offset for each of the\n    // original buffers.\n    this.byteLength = 0;\n\n    this.json = {\n      buffers: [\n        {\n          // Just the single BIN chunk buffer\n          byteLength: 0 // Updated at end of conversion\n        }\n      ],\n      bufferViews: [],\n      accessors: [],\n      images: [],\n      meshes: []\n    };\n\n    // list of binary buffers to be written to the BIN chunk\n    // (Each call to addBuffer, addImage etc adds an entry here)\n    this.sourceBuffers = [];\n\n    this.log = options.log || console; // eslint-disable-line\n  }\n\n  // ACCESSORS\n\n  getByteLength() {\n    return this.byteLength;\n  }\n\n  // Checks if a binary buffer is a recognized image format (PNG, JPG, GIF, ...)\n  isImage(imageData) {\n    return isImage(imageData);\n  }\n\n  // MODIFERS\n  encodeSync(options = {}) {\n    return this.encodeAsGLB(options);\n  }\n\n  // Encode the full glTF file as a binary GLB file\n  // Returns an ArrayBuffer that represents the complete GLB image that can be saved to file\n  // Encode the full GLB buffer with header etc\n  // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#\n  // glb-file-format-specification\n  encodeAsGLB(options = {}) {\n    // TODO - avoid double array buffer creation\n    this._packBinaryChunk();\n\n    if (options.magic) {\n      console.warn('Custom glTF magic number no longer supported'); // eslint-disable-line\n    }\n\n    const glb = {\n      version: 2,\n      json: this.json,\n      binary: this.arrayBuffer\n    };\n\n    // Calculate length and allocate buffer\n    const byteLength = encodeGLBSync(glb, null, 0, options);\n    const glbArrayBuffer = new ArrayBuffer(byteLength);\n\n    // Encode into buffer\n    const dataView = new DataView(glbArrayBuffer);\n    encodeGLBSync(glb, dataView, 0, options);\n\n    return glbArrayBuffer;\n  }\n\n  // Add an extra application-defined key to the top-level data structure\n  // By default packs JSON by extracting binary data and replacing it with JSON pointers\n  addApplicationData(key, data, packOptions = {}) {\n    this.json[key] = data;\n    return this;\n  }\n\n  // Add a binary buffer. Builds glTF \"JSON metadata\" and saves buffer reference\n  // Buffer will be copied into BIN chunk during \"pack\"\n  // Currently encodes buffers as glTF accessors, but this could be optimized\n  addBuffer(sourceBuffer, accessor = {size: 3}) {\n    const bufferViewIndex = this.addBufferView(sourceBuffer);\n\n    const accessorDefaults = {\n      size: accessor.size,\n      componentType: getComponentTypeFromArray(sourceBuffer),\n      count: Math.round(sourceBuffer.length / accessor.size)\n    };\n\n    return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));\n  }\n\n  // Basic glTF adders: basic memory buffer/image type fields\n  // Scenegraph specific adders are placed in glTFBuilder\n  // TODO: These should be moved to glTFBuilder once addBuffer\n  // have been rewritten to not depend on these.\n\n  // Add one untyped source buffer, create a matching glTF `bufferView`, and return its index\n  addBufferView(buffer) {\n    const byteLength = buffer.byteLength || buffer.length;\n\n    // Add a bufferView indicating start and length of this binary sub-chunk\n    this.json.bufferViews.push({\n      buffer: 0,\n      // Write offset from the start of the binary body\n      byteOffset: this.byteLength,\n      byteLength\n    });\n\n    // We've now written the contents to the body, so update the total length\n    // Every sub-chunk needs to be 4-byte aligned\n    this.byteLength += padTo4Bytes(byteLength);\n\n    // Add this buffer to the list of buffers to be written to the body.\n    this.sourceBuffers.push(buffer);\n\n    // Return the index to the just created bufferView\n    return this.json.bufferViews.length - 1;\n  }\n\n  // Adds an accessor to a bufferView\n  addAccessor(bufferViewIndex, accessor) {\n    // Add an accessor pointing to the new buffer view\n    this.json.accessors.push({\n      bufferView: bufferViewIndex,\n      type: getAccessorTypeFromSize(accessor.size),\n      componentType: accessor.componentType,\n      count: accessor.count\n    });\n\n    return this.json.accessors.length - 1;\n  }\n\n  // PRIVATE\n\n  // For testing\n  _pack() {\n    this._packBinaryChunk();\n    return {arrayBuffer: this.arrayBuffer, json: this.json};\n  }\n\n  // Pack the binary chunk\n  _packBinaryChunk() {\n    // Already packed\n    if (this.arrayBuffer) {\n      return;\n    }\n\n    // Allocate total array\n    const totalByteLength = this.byteLength;\n    const arrayBuffer = new ArrayBuffer(totalByteLength);\n    const targetArray = new Uint8Array(arrayBuffer);\n\n    // Copy each array into\n    let dstByteOffset = 0;\n    for (let i = 0; i < this.sourceBuffers.length; i++) {\n      const sourceBuffer = this.sourceBuffers[i];\n      dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);\n    }\n\n    // Update the glTF BIN CHUNK byte length\n    this.json.buffers[0].byteLength = totalByteLength;\n\n    // Save generated arrayBuffer\n    this.arrayBuffer = arrayBuffer;\n\n    // Clear out sourceBuffers\n    this.sourceBuffers = [];\n  }\n\n  // Report internal buffer sizes for debug and testing purposes\n  _getInternalCounts() {\n    return {\n      buffers: this.json.buffers.length,\n      bufferViews: this.json.bufferViews.length,\n      accessors: this.json.accessors.length,\n      images: this.json.images.length\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}