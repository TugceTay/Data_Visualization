{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { CompositeLayer, AttributeManager, _compareProps as compareProps } from '@deck.gl/core';\nimport { cssToDeviceRatio } from '@luma.gl/core';\nimport { filterProps } from './utils/prop-utils';\nvar AggregationLayer = function (_CompositeLayer) {\n  _inherits(AggregationLayer, _CompositeLayer);\n  function AggregationLayer() {\n    _classCallCheck(this, AggregationLayer);\n    return _possibleConstructorReturn(this, _getPrototypeOf(AggregationLayer).apply(this, arguments));\n  }\n  _createClass(AggregationLayer, [{\n    key: \"initializeState\",\n    value: function initializeState(dimensions) {\n      _get(_getPrototypeOf(AggregationLayer.prototype), \"initializeState\", this).call(this);\n      this.setState({\n        ignoreProps: filterProps(this.constructor._propTypes, dimensions.data.props),\n        dimensions: dimensions\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      _get(_getPrototypeOf(AggregationLayer.prototype), \"updateState\", this).call(this, opts);\n      var changeFlags = opts.changeFlags;\n      if (changeFlags.extensionsChanged) {\n        var shaders = this.getShaders({});\n        if (shaders && shaders.defines) {\n          shaders.defines.NON_INSTANCED_MODEL = 1;\n        }\n        this.updateShaders(shaders);\n      }\n      this._updateAttributes(opts.props);\n    }\n  }, {\n    key: \"updateAttributes\",\n    value: function updateAttributes(changedAttributes) {\n      this.setState({\n        changedAttributes: changedAttributes\n      });\n    }\n  }, {\n    key: \"getAttributes\",\n    value: function getAttributes() {\n      return this.getAttributeManager().getShaderAttributes();\n    }\n  }, {\n    key: \"getModuleSettings\",\n    value: function getModuleSettings() {\n      var _this$context = this.context,\n        viewport = _this$context.viewport,\n        mousePosition = _this$context.mousePosition,\n        gl = _this$context.gl;\n      var moduleSettings = Object.assign(Object.create(this.props), {\n        viewport: viewport,\n        mousePosition: mousePosition,\n        pickingActive: 0,\n        devicePixelRatio: cssToDeviceRatio(gl)\n      });\n      return moduleSettings;\n    }\n  }, {\n    key: \"updateShaders\",\n    value: function updateShaders(shaders) {}\n  }, {\n    key: \"isAggregationDirty\",\n    value: function isAggregationDirty(updateOpts) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var props = updateOpts.props,\n        oldProps = updateOpts.oldProps,\n        changeFlags = updateOpts.changeFlags;\n      var _params$compareAll = params.compareAll,\n        compareAll = _params$compareAll === void 0 ? false : _params$compareAll,\n        dimension = params.dimension;\n      var ignoreProps = this.state.ignoreProps;\n      var dataProps = dimension.props,\n        _dimension$accessors = dimension.accessors,\n        accessors = _dimension$accessors === void 0 ? [] : _dimension$accessors;\n      var updateTriggersChanged = changeFlags.updateTriggersChanged;\n      if (updateTriggersChanged) {\n        if (updateTriggersChanged.all) {\n          return true;\n        }\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n        try {\n          for (var _iterator = accessors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var accessor = _step.value;\n            if (updateTriggersChanged[accessor]) {\n              return true;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n      if (compareAll) {\n        if (changeFlags.extensionsChanged) {\n          return true;\n        }\n        return compareProps({\n          oldProps: oldProps,\n          newProps: props,\n          ignoreProps: ignoreProps,\n          propTypes: this.constructor._propTypes\n        });\n      }\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n      try {\n        for (var _iterator2 = dataProps[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var name = _step2.value;\n          if (props[name] !== oldProps[name]) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"isAttributeChanged\",\n    value: function isAttributeChanged(name) {\n      var changedAttributes = this.state.changedAttributes;\n      if (!name) {\n        return !isObjectEmpty(changedAttributes);\n      }\n      return changedAttributes && changedAttributes[name] !== undefined;\n    }\n  }, {\n    key: \"_getAttributeManager\",\n    value: function _getAttributeManager() {\n      return new AttributeManager(this.context.gl, {\n        id: this.props.id,\n        stats: this.context.stats\n      });\n    }\n  }]);\n  return AggregationLayer;\n}(CompositeLayer);\nexport { AggregationLayer as default };\nfunction isObjectEmpty(obj) {\n  var isEmpty = true;\n  for (var key in obj) {\n    isEmpty = false;\n    break;\n  }\n  return isEmpty;\n}\nAggregationLayer.layerName = 'AggregationLayer';","map":{"version":3,"sources":["../../src/aggregation-layer.js"],"names":["CompositeLayer","AttributeManager","_compareProps","compareProps","cssToDeviceRatio","filterProps","AggregationLayer","dimensions","setState","ignoreProps","constructor","_propTypes","data","props","opts","changeFlags","extensionsChanged","shaders","getShaders","defines","NON_INSTANCED_MODEL","updateShaders","_updateAttributes","changedAttributes","getAttributeManager","getShaderAttributes","viewport","mousePosition","gl","context","moduleSettings","assign","Object","create","pickingActive","devicePixelRatio","updateOpts","params","oldProps","compareAll","dimension","state","dataProps","accessors","updateTriggersChanged","all","accessor","newProps","propTypes","name","isObjectEmpty","undefined","id","stats","obj","isEmpty","key","layerName"],"mappings":";;;;;;AAoBA,SAAQA,cAAR,EAAwBC,gBAAxB,EAA0CC,aAAa,IAAIC,YAA3D,QAA8E,eAA9E;AACA,SAAQC,gBAAR,QAA+B,eAA/B;AACA,SAAQC,WAAR,QAA0B,oBAA1B;IAEqBC,gB;;;;;;;;oCACHC,U,EAAY;MAC1B,IAAA,CAAA,eAAA,CAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,iBAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA;MAEA,IAAA,CAAKC,QAAL,CAAc;QAEZC,WAAW,EAAEJ,WAAW,CAAC,IAAA,CAAKK,WAAL,CAAiBC,UAAlB,EAA8BJ,UAAU,CAACK,IAAXL,CAAgBM,KAA9C,CAFZ;QAGZN,UAAU,EAAVA;MAHY,CAAd,CAAA;IAKD;;;gCAEWO,I,EAAM;MAChB,IAAA,CAAA,eAAA,CAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,aAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAkBA,IAAlB,CAAA;MADgB,IAETC,WAFS,GAEMD,IAFN,CAETC,WAFS;MAGhB,IAAIA,WAAW,CAACC,iBAAhB,EAAmC;QACjC,IAAMC,OAAO,GAAG,IAAA,CAAKC,UAAL,CAAgB,CAAA,CAAhB,CAAhB;QACA,IAAID,OAAO,IAAIA,OAAO,CAACE,OAAvB,EAAgC;UAC9BF,OAAO,CAACE,OAARF,CAAgBG,mBAAhBH,GAAsC,CAAtCA;QACD;QACD,IAAA,CAAKI,aAAL,CAAmBJ,OAAnB,CAAA;MACD;MAGD,IAAA,CAAKK,iBAAL,CAAuBR,IAAI,CAACD,KAA5B,CAAA;IACD;;;qCAEgBU,iB,EAAmB;MAGlC,IAAA,CAAKf,QAAL,CAAc;QAACe,iBAAiB,EAAjBA;MAAD,CAAd,CAAA;IACD;;;oCAEe;MACd,OAAO,IAAA,CAAKC,mBAAL,EAAA,CAA2BC,mBAA3B,EAAP;IACD;;;wCAEmB;MAAA,IAAA,aAAA,GAIoB,IAAA,CAAKI,OAJzB;QAIXH,QAJW,GAAA,aAAA,CAIXA,QAJW;QAIDC,aAJC,GAAA,aAAA,CAIDA,aAJC;QAIcC,EAJd,GAAA,aAAA,CAIcA,EAJd;MAKlB,IAAME,cAAc,GAAG,MAAM,CAACC,MAAP,CAAcC,MAAM,CAACC,MAAPD,CAAc,IAAA,CAAKnB,KAAnBmB,CAAd,EAAyC;QAC9DN,QAAQ,EAARA,QAD8D;QAE9DC,aAAa,EAAbA,aAF8D;QAG9DO,aAAa,EAAE,CAH+C;QAI9DC,gBAAgB,EAAE/B,gBAAgB,CAACwB,EAAD;MAJ4B,CAAzC,CAAvB;MAMA,OAAOE,cAAP;IACD;;;kCAEab,O,EAAS,CAEtB;;;uCAUkBmB,U,EAAyB;MAAA,IAAbC,MAAa,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,CAAA,CAAI;MAAA,IACnCxB,KADmC,GACHuB,UADG,CACnCvB,KADmC;QAC5ByB,QAD4B,GACHF,UADG,CAC5BE,QAD4B;QAClBvB,WADkB,GACHqB,UADG,CAClBrB,WADkB;MAAA,IAAA,kBAAA,GAEFsB,MAFE,CAEnCE,UAFmC;QAEnCA,UAFmC,GAAA,kBAAA,KAAA,KAAA,CAAA,GAEtB,KAFsB,GAAA,kBAAA;QAEfC,SAFe,GAEFH,MAFE,CAEfG,SAFe;MAAA,IAGnC/B,WAHmC,GAGpB,IAAA,CAAKgC,KAHe,CAGnChC,WAHmC;MAAA,IAI5BiC,SAJ4B,GAICF,SAJD,CAInC3B,KAJmC;QAAA,oBAAA,GAIC2B,SAJD,CAIjBG,SAJiB;QAIjBA,SAJiB,GAAA,oBAAA,KAAA,KAAA,CAAA,GAIL,EAJK,GAAA,oBAAA;MAAA,IAKnCC,qBALmC,GAKV7B,WALU,CAKnC6B,qBALmC;MAM1C,IAAIA,qBAAJ,EAA2B;QACzB,IAAIA,qBAAqB,CAACC,GAA1B,EAA+B;UAC7B,OAAO,IAAP;QACD;QAHwB,IAAA,yBAAA,GAAA,IAAA;QAAA,IAAA,iBAAA,GAAA,KAAA;QAAA,IAAA,cAAA,GAAA,SAAA;QAAA,IAAA;UAIzB,KAAA,IAAA,SAAA,GAAuBF,SAAvB,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA,EAAA,yBAAA,GAAA,CAAA,KAAA,GAAA,SAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,yBAAA,GAAA,IAAA,EAAkC;YAAA,IAAvBG,QAAuB,GAAA,KAAA,CAAA,KAAA;YAChC,IAAIF,qBAAqB,CAACE,QAAD,CAAzB,EAAqC;cACnC,OAAO,IAAP;YACD;UACF;QARwB,CAAA,CAAA,OAAA,GAAA,EAAA;UAAA,iBAAA,GAAA,IAAA;UAAA,cAAA,GAAA,GAAA;QAAA,CAAA,SAAA;UAAA,IAAA;YAAA,IAAA,CAAA,yBAAA,IAAA,SAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;cAAA,SAAA,CAAA,QAAA,CAAA,EAAA;YAAA;UAAA,CAAA,SAAA;YAAA,IAAA,iBAAA,EAAA;cAAA,MAAA,cAAA;YAAA;UAAA;QAAA;MAS1B;MACD,IAAIP,UAAJ,EAAgB;QACd,IAAIxB,WAAW,CAACC,iBAAhB,EAAmC;UACjC,OAAO,IAAP;QACD;QAGD,OAAOb,YAAY,CAAC;UAClBmC,QAAQ,EAARA,QADkB;UAElBS,QAAQ,EAAElC,KAFQ;UAGlBJ,WAAW,EAAXA,WAHkB;UAIlBuC,SAAS,EAAE,IAAA,CAAKtC,WAAL,CAAiBC;QAJV,CAAD,CAAnB;MAMD;MA5ByC,IAAA,0BAAA,GAAA,IAAA;MAAA,IAAA,kBAAA,GAAA,KAAA;MAAA,IAAA,eAAA,GAAA,SAAA;MAAA,IAAA;QA8B1C,KAAA,IAAA,UAAA,GAAmB+B,SAAnB,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,EAAA,MAAA,EAAA,EAAA,0BAAA,GAAA,CAAA,MAAA,GAAA,UAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,0BAAA,GAAA,IAAA,EAA8B;UAAA,IAAnBO,IAAmB,GAAA,MAAA,CAAA,KAAA;UAC5B,IAAIpC,KAAK,CAACoC,IAAD,CAALpC,KAAgByB,QAAQ,CAACW,IAAD,CAA5B,EAAoC;YAClC,OAAO,IAAP;UACD;QACF;MAlCyC,CAAA,CAAA,OAAA,GAAA,EAAA;QAAA,kBAAA,GAAA,IAAA;QAAA,eAAA,GAAA,GAAA;MAAA,CAAA,SAAA;QAAA,IAAA;UAAA,IAAA,CAAA,0BAAA,IAAA,UAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;YAAA,UAAA,CAAA,QAAA,CAAA,EAAA;UAAA;QAAA,CAAA,SAAA;UAAA,IAAA,kBAAA,EAAA;YAAA,MAAA,eAAA;UAAA;QAAA;MAAA;MAmC1C,OAAO,KAAP;IACD;;;uCAQkBA,I,EAAM;MAAA,IAChB1B,iBADgB,GACK,IAAA,CAAKkB,KADV,CAChBlB,iBADgB;MAEvB,IAAI,CAAC0B,IAAL,EAAW;QAET,OAAO,CAACC,aAAa,CAAC3B,iBAAD,CAArB;MACD;MACD,OAAOA,iBAAiB,IAAIA,iBAAiB,CAAC0B,IAAD,CAAjB1B,KAA4B4B,SAAxD;IACD;;;2CAKsB;MACrB,OAAO,IAAIlD,gBAAJ,CAAqB,IAAA,CAAK4B,OAAL,CAAaD,EAAlC,EAAsC;QAC3CwB,EAAE,EAAE,IAAA,CAAKvC,KAAL,CAAWuC,EAD4B;QAE3CC,KAAK,EAAE,IAAA,CAAKxB,OAAL,CAAawB;MAFuB,CAAtC,CAAP;IAID;;;EA3H2CrD,c;SAAzBM,gB;AAiIrB,SAAS4C,aAAT,CAAuBI,GAAvB,EAA4B;EAC1B,IAAIC,OAAO,GAAG,IAAd;EAEA,KAAK,IAAMC,GAAX,IAAkBF,GAAlB,EAAuB;IACrBC,OAAO,GAAG,KAAVA;IACA;EACD;EAED,OAAOA,OAAP;AACD;AAEDjD,gBAAgB,CAACmD,SAAjBnD,GAA6B,kBAA7BA","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, AttributeManager, _compareProps as compareProps} from '@deck.gl/core';\nimport {cssToDeviceRatio} from '@luma.gl/core';\nimport {filterProps} from './utils/prop-utils';\n\nexport default class AggregationLayer extends CompositeLayer {\n  initializeState(dimensions) {\n    super.initializeState();\n\n    this.setState({\n      // Layer props , when changed doesn't require updating aggregation\n      ignoreProps: filterProps(this.constructor._propTypes, dimensions.data.props),\n      dimensions\n    });\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n    const {changeFlags} = opts;\n    if (changeFlags.extensionsChanged) {\n      const shaders = this.getShaders({});\n      if (shaders && shaders.defines) {\n        shaders.defines.NON_INSTANCED_MODEL = 1;\n      }\n      this.updateShaders(shaders);\n    }\n\n    // Explictly call to update attributes as 'CompositeLayer' doesn't call this\n    this._updateAttributes(opts.props);\n  }\n\n  updateAttributes(changedAttributes) {\n    // Super classes, can refer to state.changedAttributes to determine what\n    // attributes changed\n    this.setState({changedAttributes});\n  }\n\n  getAttributes() {\n    return this.getAttributeManager().getShaderAttributes();\n  }\n\n  getModuleSettings() {\n    // For regular layer draw this happens during draw cycle (_drawLayersInViewport) not during update cycle\n    // For aggregation layers this is called during updateState to update aggregation data\n    // NOTE: it is similar to LayerPass._getModuleParameters() but doesn't inlcude `effects` it is not needed for aggregation\n    const {viewport, mousePosition, gl} = this.context;\n    const moduleSettings = Object.assign(Object.create(this.props), {\n      viewport,\n      mousePosition,\n      pickingActive: 0,\n      devicePixelRatio: cssToDeviceRatio(gl)\n    });\n    return moduleSettings;\n  }\n\n  updateShaders(shaders) {\n    // Default implemention is empty, subclasses can update their Model objects if needed\n  }\n\n  /**\n   * Checks if aggregation is dirty\n   * @param {Object} updateOpts - object {props, oldProps, changeFlags}\n   * @param {Object} params - object {dimension, compareAll}\n   * @param {Object} params.dimension - {props, accessors} array of props and/or accessors\n   * @param {Boolean} params.compareAll - when `true` it will include non layer props for comparision\n   * @returns {Boolean} - returns true if dimensions' prop or accessor is changed\n   **/\n  isAggregationDirty(updateOpts, params = {}) {\n    const {props, oldProps, changeFlags} = updateOpts;\n    const {compareAll = false, dimension} = params;\n    const {ignoreProps} = this.state;\n    const {props: dataProps, accessors = []} = dimension;\n    const {updateTriggersChanged} = changeFlags;\n    if (updateTriggersChanged) {\n      if (updateTriggersChanged.all) {\n        return true;\n      }\n      for (const accessor of accessors) {\n        if (updateTriggersChanged[accessor]) {\n          return true;\n        }\n      }\n    }\n    if (compareAll) {\n      if (changeFlags.extensionsChanged) {\n        return true;\n      }\n      // Compare non layer props too (like extension props)\n      // ignoreprops refers to all Layer props other than aggregation props that need to be comapred\n      return compareProps({\n        oldProps,\n        newProps: props,\n        ignoreProps,\n        propTypes: this.constructor._propTypes\n      });\n    }\n    // Compare props of the dimension\n    for (const name of dataProps) {\n      if (props[name] !== oldProps[name]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks if an attribute is changed\n   * @param {String} name - name of the attribute\n   * @returns {Boolean} - `true` if attribute `name` is changed, `false` otherwise,\n   *                       If `name` is not passed or `undefiend`, `true` if any attribute is changed, `false` otherwise\n   **/\n  isAttributeChanged(name) {\n    const {changedAttributes} = this.state;\n    if (!name) {\n      // if name not specified return true if any attribute is changed\n      return !isObjectEmpty(changedAttributes);\n    }\n    return changedAttributes && changedAttributes[name] !== undefined;\n  }\n\n  // Private\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n}\n\n// Helper methods\n\n// Returns true if given object is empty, false otherwise.\nfunction isObjectEmpty(obj) {\n  let isEmpty = true;\n  /* eslint-disable no-unused-vars  */\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n  /* eslint-enable no-unused-vars  */\n  return isEmpty;\n}\n\nAggregationLayer.layerName = 'AggregationLayer';\n"]},"metadata":{},"sourceType":"module"}