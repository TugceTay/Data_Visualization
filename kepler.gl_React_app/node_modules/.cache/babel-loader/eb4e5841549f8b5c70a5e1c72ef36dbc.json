{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { Layer, project32, picking } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './scatterplot-layer-vertex.glsl';\nimport fs from './scatterplot-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  radiusUnits: 'meters',\n  radiusScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  radiusMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  lineWidthUnits: 'meters',\n  lineWidthScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  lineWidthMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  lineWidthMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  stroked: false,\n  filled: true,\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getRadius: {\n    type: 'accessor',\n    value: 1\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  strokeWidth: {\n    deprecatedFor: 'getLineWidth'\n  },\n  outline: {\n    deprecatedFor: 'stroked'\n  },\n  getColor: {\n    deprecatedFor: ['getFillColor', 'getLineColor']\n  }\n};\nvar ScatterplotLayer = function (_Layer) {\n  _inherits(ScatterplotLayer, _Layer);\n  function ScatterplotLayer() {\n    _classCallCheck(this, ScatterplotLayer);\n    return _possibleConstructorReturn(this, _getPrototypeOf(ScatterplotLayer).apply(this, arguments));\n  }\n  _createClass(ScatterplotLayer, [{\n    key: \"getShaders\",\n    value: function getShaders(id) {\n      return _get(_getPrototypeOf(ScatterplotLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.getAttributeManager().addInstanced({\n        instancePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getPosition'\n        },\n        instanceRadius: {\n          size: 1,\n          transition: true,\n          accessor: 'getRadius',\n          defaultValue: 1\n        },\n        instanceFillColors: {\n          size: this.props.colorFormat.length,\n          transition: true,\n          normalized: true,\n          type: 5121,\n          accessor: 'getFillColor',\n          defaultValue: [0, 0, 0, 255]\n        },\n        instanceLineColors: {\n          size: this.props.colorFormat.length,\n          transition: true,\n          normalized: true,\n          type: 5121,\n          accessor: 'getLineColor',\n          defaultValue: [0, 0, 0, 255]\n        },\n        instanceLineWidths: {\n          size: 1,\n          transition: true,\n          accessor: 'getLineWidth',\n          defaultValue: 1\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n        oldProps = _ref.oldProps,\n        changeFlags = _ref.changeFlags;\n      _get(_getPrototypeOf(ScatterplotLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n      if (changeFlags.extensionsChanged) {\n        var gl = this.context.gl;\n        if (this.state.model) {\n          this.state.model[\"delete\"]();\n        }\n        this.setState({\n          model: this._getModel(gl)\n        });\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var viewport = this.context.viewport;\n      var _this$props = this.props,\n        radiusUnits = _this$props.radiusUnits,\n        radiusScale = _this$props.radiusScale,\n        radiusMinPixels = _this$props.radiusMinPixels,\n        radiusMaxPixels = _this$props.radiusMaxPixels,\n        stroked = _this$props.stroked,\n        filled = _this$props.filled,\n        lineWidthUnits = _this$props.lineWidthUnits,\n        lineWidthScale = _this$props.lineWidthScale,\n        lineWidthMinPixels = _this$props.lineWidthMinPixels,\n        lineWidthMaxPixels = _this$props.lineWidthMaxPixels;\n      var pointRadiusMultiplier = radiusUnits === 'pixels' ? viewport.metersPerPixel : 1;\n      var lineWidthMultiplier = lineWidthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n      this.state.model.setUniforms(uniforms).setUniforms({\n        stroked: stroked ? 1 : 0,\n        filled: filled,\n        radiusScale: radiusScale * pointRadiusMultiplier,\n        radiusMinPixels: radiusMinPixels,\n        radiusMaxPixels: radiusMaxPixels,\n        lineWidthScale: lineWidthScale * lineWidthMultiplier,\n        lineWidthMinPixels: lineWidthMinPixels,\n        lineWidthMaxPixels: lineWidthMaxPixels\n      }).draw();\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var positions = [-1, -1, 0, 1, -1, 0, 1, 1, 0, -1, 1, 0];\n      return new Model(gl, Object.assign(this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 6,\n          vertexCount: 4,\n          attributes: {\n            positions: {\n              size: 3,\n              value: new Float32Array(positions)\n            }\n          }\n        }),\n        isInstanced: true\n      }));\n    }\n  }]);\n  return ScatterplotLayer;\n}(Layer);\nexport { ScatterplotLayer as default };\nScatterplotLayer.layerName = 'ScatterplotLayer';\nScatterplotLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/scatterplot-layer/scatterplot-layer.js"],"names":["Layer","project32","picking","Model","Geometry","vs","fs","DEFAULT_COLOR","defaultProps","radiusUnits","radiusScale","type","min","value","radiusMinPixels","radiusMaxPixels","Number","MAX_SAFE_INTEGER","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","stroked","filled","getPosition","x","position","getRadius","getFillColor","getLineColor","getLineWidth","strokeWidth","deprecatedFor","outline","getColor","ScatterplotLayer","id","modules","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceRadius","defaultValue","instanceFillColors","props","colorFormat","length","normalized","instanceLineColors","instanceLineWidths","oldProps","changeFlags","extensionsChanged","gl","context","state","model","setState","_getModel","invalidateAll","uniforms","viewport","pointRadiusMultiplier","metersPerPixel","lineWidthMultiplier","setUniforms","draw","positions","assign","getShaders","geometry","drawMode","vertexCount","attributes","Float32Array","isInstanced","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './scatterplot-layer-vertex.glsl';\nimport fs from './scatterplot-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  radiusUnits: 'meters',\n  radiusScale: {type: 'number', min: 0, value: 1},\n  radiusMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  radiusMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: {type: 'number', min: 0, value: 1},\n  lineWidthMinPixels: {type: 'number', min: 0, value: 0},\n  lineWidthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n\n  stroked: false,\n  filled: true,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getRadius: {type: 'accessor', value: 1},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n\n  // deprecated\n  strokeWidth: {deprecatedFor: 'getLineWidth'},\n  outline: {deprecatedFor: 'stroked'},\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\nexport default class ScatterplotLayer extends Layer {\n  getShaders(id) {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceRadius: {\n        size: 1,\n        transition: true,\n        accessor: 'getRadius',\n        defaultValue: 1\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {viewport} = this.context;\n    const {\n      radiusUnits,\n      radiusScale,\n      radiusMinPixels,\n      radiusMaxPixels,\n      stroked,\n      filled,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels\n    } = this.props;\n\n    const pointRadiusMultiplier = radiusUnits === 'pixels' ? viewport.metersPerPixel : 1;\n    const lineWidthMultiplier = lineWidthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        stroked: stroked ? 1 : 0,\n        filled,\n        radiusScale: radiusScale * pointRadiusMultiplier,\n        radiusMinPixels,\n        radiusMaxPixels,\n        lineWidthScale: lineWidthScale * lineWidthMultiplier,\n        lineWidthMinPixels,\n        lineWidthMaxPixels\n      })\n      .draw();\n  }\n\n  _getModel(gl) {\n    // a square that minimally cover the unit circle\n    const positions = [-1, -1, 0, 1, -1, 0, 1, 1, 0, -1, 1, 0];\n\n    return new Model(\n      gl,\n      Object.assign(this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          vertexCount: 4,\n          attributes: {\n            positions: {size: 3, value: new Float32Array(positions)}\n          }\n        }),\n        isInstanced: true\n      })\n    );\n  }\n}\n\nScatterplotLayer.layerName = 'ScatterplotLayer';\nScatterplotLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}