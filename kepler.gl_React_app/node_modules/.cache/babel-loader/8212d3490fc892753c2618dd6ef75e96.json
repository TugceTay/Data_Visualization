{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.gridVisConfigs = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _layers = require(\"@deck.gl/layers\");\nvar _enhancedCpuGridLayer = _interopRequireDefault(require(\"../../deckgl-layers/grid-layer/enhanced-cpu-grid-layer\"));\nvar _aggregationLayer = _interopRequireDefault(require(\"../aggregation-layer\"));\nvar _gridUtils = require(\"./grid-utils\");\nvar _gridLayerIcon = _interopRequireDefault(require(\"./grid-layer-icon\"));\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar gridVisConfigs = {\n  opacity: 'opacity',\n  worldUnitSize: 'worldUnitSize',\n  colorRange: 'colorRange',\n  coverage: 'coverage',\n  sizeRange: 'elevationRange',\n  percentile: 'percentile',\n  elevationPercentile: 'elevationPercentile',\n  elevationScale: 'elevationScale',\n  enableElevationZoomFactor: 'enableElevationZoomFactor',\n  colorAggregation: 'aggregation',\n  sizeAggregation: 'sizeAggregation',\n  enable3d: 'enable3d'\n};\nexports.gridVisConfigs = gridVisConfigs;\nvar GridLayer = /*#__PURE__*/function (_AggregationLayer) {\n  (0, _inherits2[\"default\"])(GridLayer, _AggregationLayer);\n  var _super = _createSuper(GridLayer);\n  function GridLayer(props) {\n    var _this;\n    (0, _classCallCheck2[\"default\"])(this, GridLayer);\n    _this = _super.call(this, props);\n    _this.registerVisConfig(gridVisConfigs);\n    _this.visConfigSettings.worldUnitSize.label = 'columns.grid.worldUnitSize';\n    return _this;\n  }\n  (0, _createClass2[\"default\"])(GridLayer, [{\n    key: \"type\",\n    get: function get() {\n      return 'grid';\n    }\n  }, {\n    key: \"layerIcon\",\n    get: function get() {\n      return _gridLayerIcon[\"default\"];\n    }\n  }, {\n    key: \"renderLayer\",\n    value: function renderLayer(opts) {\n      var data = opts.data,\n        objectHovered = opts.objectHovered,\n        mapState = opts.mapState;\n      var zoomFactor = this.getZoomFactor(mapState);\n      var visConfig = this.config.visConfig;\n      var cellSize = visConfig.worldUnitSize * 1000;\n      var hoveredObject = this.hasHoveredObject(objectHovered);\n      return [new _enhancedCpuGridLayer[\"default\"](_objectSpread(_objectSpread(_objectSpread({}, this.getDefaultAggregationLayerProp(opts)), data), {}, {\n        wrapLongitude: false,\n        cellSize: cellSize\n      }))].concat((0, _toConsumableArray2[\"default\"])(hoveredObject && !visConfig.enable3d ? [new _layers.GeoJsonLayer(_objectSpread(_objectSpread({}, this.getDefaultHoverLayerProps()), {}, {\n        wrapLongitude: false,\n        data: [(0, _gridUtils.pointToPolygonGeo)({\n          object: hoveredObject,\n          cellSize: cellSize,\n          coverage: visConfig.coverage,\n          mapState: mapState\n        })],\n        getLineColor: this.config.highlightColor,\n        lineWidthScale: 8 * zoomFactor\n      }))] : []));\n    }\n  }]);\n  return GridLayer;\n}(_aggregationLayer[\"default\"]);\nexports[\"default\"] = GridLayer;","map":{"version":3,"sources":["../../../src/layers/grid-layer/grid-layer.js"],"names":["gridVisConfigs","opacity","worldUnitSize","colorRange","coverage","sizeRange","percentile","elevationPercentile","elevationScale","enableElevationZoomFactor","colorAggregation","sizeAggregation","enable3d","GridLayer","AggregationLayer","props","registerVisConfig","visConfigSettings","label","GridLayerIcon","opts","data","objectHovered","mapState","zoomFactor","getZoomFactor","visConfig","config","cellSize","hoveredObject","hasHoveredObject","EnhancedGridLayer","getDefaultAggregationLayerProp","wrapLongitude","GeoJsonLayer","getDefaultHoverLayerProps","object","getLineColor","highlightColor","lineWidthScale"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport EnhancedGridLayer from 'deckgl-layers/grid-layer/enhanced-cpu-grid-layer';\nimport AggregationLayer from '../aggregation-layer';\nimport {pointToPolygonGeo} from './grid-utils';\nimport GridLayerIcon from './grid-layer-icon';\n\nexport const gridVisConfigs = {\n  opacity: 'opacity',\n  worldUnitSize: 'worldUnitSize',\n  colorRange: 'colorRange',\n  coverage: 'coverage',\n  sizeRange: 'elevationRange',\n  percentile: 'percentile',\n  elevationPercentile: 'elevationPercentile',\n  elevationScale: 'elevationScale',\n  enableElevationZoomFactor: 'enableElevationZoomFactor',\n  colorAggregation: 'aggregation',\n  sizeAggregation: 'sizeAggregation',\n  enable3d: 'enable3d'\n};\n\nexport default class GridLayer extends AggregationLayer {\n  constructor(props) {\n    super(props);\n\n    this.registerVisConfig(gridVisConfigs);\n    this.visConfigSettings.worldUnitSize.label = 'columns.grid.worldUnitSize';\n  }\n\n  get type() {\n    return 'grid';\n  }\n\n  get layerIcon() {\n    return GridLayerIcon;\n  }\n\n  renderLayer(opts) {\n    const {data, objectHovered, mapState} = opts;\n\n    const zoomFactor = this.getZoomFactor(mapState);\n    const {visConfig} = this.config;\n    const cellSize = visConfig.worldUnitSize * 1000;\n    const hoveredObject = this.hasHoveredObject(objectHovered);\n\n    return [\n      new EnhancedGridLayer({\n        ...this.getDefaultAggregationLayerProp(opts),\n        ...data,\n        wrapLongitude: false,\n        cellSize\n      }),\n\n      // render an outline of each cell if not extruded\n      ...(hoveredObject && !visConfig.enable3d\n        ? [\n            new GeoJsonLayer({\n              ...this.getDefaultHoverLayerProps(),\n              wrapLongitude: false,\n              data: [\n                pointToPolygonGeo({\n                  object: hoveredObject,\n                  cellSize,\n                  coverage: visConfig.coverage,\n                  mapState\n                })\n              ],\n              getLineColor: this.config.highlightColor,\n              lineWidthScale: 8 * zoomFactor\n            })\n          ]\n        : [])\n    ];\n  }\n}\n"]},"metadata":{},"sourceType":"script"}