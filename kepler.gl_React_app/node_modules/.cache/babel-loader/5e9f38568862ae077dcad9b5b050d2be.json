{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.S2VisConfigs = exports.defaultLineWidth = exports.defaultElevation = exports.S2TokenAccessor = exports.s2RequiredColumns = exports.S2_TOKEN_FIELDS = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _geoLayers = require(\"@deck.gl/geo-layers\");\nvar _defaultSettings = require(\"../../constants/default-settings\");\nvar _layerFactory = require(\"../layer-factory\");\nvar _tableUtils = require(\"../../utils/table-utils\");\nvar _baseLayer = _interopRequireDefault(require(\"../base-layer\"));\nvar _s2LayerIcon = _interopRequireDefault(require(\"./s2-layer-icon\"));\nvar _s2Utils = require(\"./s2-utils\");\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar zoomFactorValue = 8;\nvar S2_TOKEN_FIELDS = {\n  token: ['s2', 's2_token']\n};\nexports.S2_TOKEN_FIELDS = S2_TOKEN_FIELDS;\nvar s2RequiredColumns = ['token'];\nexports.s2RequiredColumns = s2RequiredColumns;\nvar S2TokenAccessor = function S2TokenAccessor(_ref) {\n  var token = _ref.token;\n  return function (dc) {\n    return function (d) {\n      return dc.valueAt(d.index, token.fieldIdx);\n    };\n  };\n};\nexports.S2TokenAccessor = S2TokenAccessor;\nvar defaultElevation = 500;\nexports.defaultElevation = defaultElevation;\nvar defaultLineWidth = 1;\nexports.defaultLineWidth = defaultLineWidth;\nvar S2VisConfigs = {\n  // Filled color\n  opacity: 'opacity',\n  colorRange: 'colorRange',\n  filled: {\n    type: 'boolean',\n    label: 'Fill Color',\n    defaultValue: true,\n    property: 'filled'\n  },\n  // stroke\n  thickness: _objectSpread(_objectSpread({}, _layerFactory.LAYER_VIS_CONFIGS.thickness), {}, {\n    defaultValue: 0.5\n  }),\n  strokeColor: 'strokeColor',\n  strokeColorRange: 'strokeColorRange',\n  sizeRange: 'strokeWidthRange',\n  stroked: 'stroked',\n  // height\n  enable3d: 'enable3d',\n  elevationScale: 'elevationScale',\n  enableElevationZoomFactor: 'enableElevationZoomFactor',\n  heightRange: 'elevationRange',\n  // wireframe\n  wireframe: 'wireframe'\n};\nexports.S2VisConfigs = S2VisConfigs;\nvar S2GeometryLayer = /*#__PURE__*/function (_Layer) {\n  (0, _inherits2[\"default\"])(S2GeometryLayer, _Layer);\n  var _super = _createSuper(S2GeometryLayer);\n  function S2GeometryLayer(props) {\n    var _this;\n    (0, _classCallCheck2[\"default\"])(this, S2GeometryLayer);\n    _this = _super.call(this, props);\n    _this.registerVisConfig(S2VisConfigs);\n    _this.getPositionAccessor = function (dataContainer) {\n      return S2TokenAccessor(_this.config.columns)(dataContainer);\n    };\n    return _this;\n  }\n  (0, _createClass2[\"default\"])(S2GeometryLayer, [{\n    key: \"type\",\n    get: function get() {\n      return 's2';\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'S2';\n    }\n  }, {\n    key: \"requiredLayerColumns\",\n    get: function get() {\n      return s2RequiredColumns;\n    }\n  }, {\n    key: \"layerIcon\",\n    get: function get() {\n      return _s2LayerIcon[\"default\"];\n    }\n  }, {\n    key: \"visualChannels\",\n    get: function get() {\n      var visualChannels = (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(S2GeometryLayer.prototype), \"visualChannels\", this);\n      return {\n        color: _objectSpread(_objectSpread({}, visualChannels.color), {}, {\n          accessor: 'getFillColor'\n        }),\n        size: _objectSpread(_objectSpread({}, visualChannels.size), {}, {\n          property: 'stroke',\n          accessor: 'getLineWidth',\n          condition: function condition(config) {\n            return config.visConfig.stroked;\n          },\n          defaultValue: defaultLineWidth\n        }),\n        strokeColor: {\n          property: 'strokeColor',\n          field: 'strokeColorField',\n          scale: 'strokeColorScale',\n          domain: 'strokeColorDomain',\n          range: 'strokeColorRange',\n          key: 'strokeColor',\n          channelScaleType: _defaultSettings.CHANNEL_SCALES.color,\n          accessor: 'getLineColor',\n          condition: function condition(config) {\n            return config.visConfig.stroked;\n          },\n          nullValue: visualChannels.color.nullValue,\n          defaultValue: function defaultValue(config) {\n            return config.visConfig.strokeColor || config.color;\n          }\n        },\n        height: {\n          property: 'height',\n          field: 'heightField',\n          scale: 'heightScale',\n          domain: 'heightDomain',\n          range: 'heightRange',\n          key: 'height',\n          channelScaleType: _defaultSettings.CHANNEL_SCALES.size,\n          accessor: 'getElevation',\n          condition: function condition(config) {\n            return config.visConfig.enable3d;\n          },\n          nullValue: 0,\n          defaultValue: defaultElevation\n        }\n      };\n    }\n  }, {\n    key: \"getDefaultLayerConfig\",\n    value: function getDefaultLayerConfig() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _objectSpread(_objectSpread({}, (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(S2GeometryLayer.prototype), \"getDefaultLayerConfig\", this).call(this, props)), {}, {\n        // add height visual channel\n        heightField: null,\n        heightDomain: [0, 1],\n        heightScale: 'linear',\n        // add stroke color visual channel\n        strokeColorField: null,\n        strokeColorDomain: [0, 1],\n        strokeColorScale: 'quantile'\n      });\n    }\n  }, {\n    key: \"calculateDataAttribute\",\n    value: function calculateDataAttribute(_ref2, getS2Token) {\n      var dataContainer = _ref2.dataContainer,\n        filteredIndex = _ref2.filteredIndex;\n      var data = [];\n      for (var i = 0; i < filteredIndex.length; i++) {\n        var index = filteredIndex[i];\n        var token = getS2Token({\n          index: index\n        });\n        if (token) {\n          data.push({\n            index: index,\n            token: token\n          });\n        }\n      }\n      return data;\n    }\n  }, {\n    key: \"updateLayerMeta\",\n    value: function updateLayerMeta(dataContainer, getS2Token) {\n      // add safe row flag\n      var centroids = dataContainer.reduce(function (acc, entry, index) {\n        var s2Token = getS2Token({\n          index: index\n        });\n        if (s2Token) {\n          acc.push((0, _s2Utils.getS2Center)(s2Token));\n        }\n        return acc;\n      }, [], true);\n      var centroidsDataContainer = (0, _tableUtils.createDataContainer)(centroids);\n      var bounds = this.getPointsBounds(centroidsDataContainer, function (d, dc) {\n        return [dc.valueAt(d.index, 0), dc.valueAt(d.index, 1)];\n      });\n      this.dataToFeature = {\n        centroids: centroids\n      };\n      this.updateMeta({\n        bounds: bounds\n      });\n    }\n  }, {\n    key: \"formatLayerData\",\n    value: function formatLayerData(datasets, oldLayerData) {\n      var opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _datasets$this$config = datasets[this.config.dataId],\n        gpuFilter = _datasets$this$config.gpuFilter,\n        dataContainer = _datasets$this$config.dataContainer;\n      var getS2Token = this.getPositionAccessor(dataContainer);\n      var _this$updateData = this.updateData(datasets, oldLayerData),\n        data = _this$updateData.data;\n      var accessors = this.getAttributeAccessors({\n        dataContainer: dataContainer\n      });\n      return _objectSpread({\n        data: data,\n        getS2Token: getS2Token,\n        getFilterValue: gpuFilter.filterValueAccessor(dataContainer)()\n      }, accessors);\n    }\n  }, {\n    key: \"renderLayer\",\n    value: function renderLayer(opts) {\n      var data = opts.data,\n        gpuFilter = opts.gpuFilter,\n        interactionConfig = opts.interactionConfig,\n        mapState = opts.mapState;\n      var defaultLayerProps = this.getDefaultDeckLayerProps(opts);\n      var eleZoomFactor = this.getElevationZoomFactor(mapState);\n      var zoomFactor = this.getZoomFactor(mapState);\n      var config = this.config;\n      var visConfig = config.visConfig;\n      var updateTriggers = _objectSpread(_objectSpread({}, this.getVisualChannelUpdateTriggers()), {}, {\n        getFilterValue: gpuFilter.filterValueUpdateTriggers\n      });\n      return [new _geoLayers.S2Layer(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, defaultLayerProps), interactionConfig), data), {}, {\n        getS2Token: function getS2Token(d) {\n          return d.token;\n        },\n        autoHighlight: visConfig.enable3d,\n        highlightColor: _defaultSettings.HIGHLIGH_COLOR_3D,\n        // stroke\n        lineWidthScale: visConfig.thickness * zoomFactor * zoomFactorValue,\n        stroked: visConfig.stroked,\n        lineMiterLimit: 2,\n        // Filled color\n        filled: visConfig.filled,\n        opacity: visConfig.opacity,\n        wrapLongitude: false,\n        // Elevation\n        elevationScale: visConfig.elevationScale * eleZoomFactor,\n        extruded: visConfig.enable3d,\n        wireframe: visConfig.wireframe,\n        pickable: true,\n        updateTriggers: updateTriggers\n      }))];\n    }\n  }], [{\n    key: \"findDefaultLayerProps\",\n    value: function findDefaultLayerProps(_ref3) {\n      var _ref3$fields = _ref3.fields,\n        fields = _ref3$fields === void 0 ? [] : _ref3$fields;\n      var foundColumns = this.findDefaultColumnField(S2_TOKEN_FIELDS, fields);\n      if (!foundColumns || !foundColumns.length) {\n        return {\n          props: []\n        };\n      }\n      return {\n        props: foundColumns.map(function (columns) {\n          return {\n            isVisible: true,\n            label: 'S2',\n            columns: columns\n          };\n        })\n      };\n    }\n  }]);\n  return S2GeometryLayer;\n}(_baseLayer[\"default\"]);\nexports[\"default\"] = S2GeometryLayer;","map":{"version":3,"sources":["../../../src/layers/s2-geometry-layer/s2-geometry-layer.js"],"names":["zoomFactorValue","S2_TOKEN_FIELDS","token","s2RequiredColumns","S2TokenAccessor","dc","valueAt","d","index","fieldIdx","defaultElevation","defaultLineWidth","S2VisConfigs","opacity","colorRange","filled","type","label","defaultValue","property","thickness","LAYER_VIS_CONFIGS","strokeColor","strokeColorRange","sizeRange","stroked","enable3d","elevationScale","enableElevationZoomFactor","heightRange","wireframe","S2GeometryLayer","Layer","props","registerVisConfig","getPositionAccessor","config","columns","dataContainer","S2LayerIcon","visualChannels","color","accessor","size","condition","visConfig","field","scale","domain","range","key","channelScaleType","CHANNEL_SCALES","nullValue","height","heightField","heightDomain","heightScale","strokeColorField","strokeColorDomain","strokeColorScale","fields","foundColumns","findDefaultColumnField","length","map","isVisible","filteredIndex","getS2Token","data","i","push","centroids","reduce","acc","entry","s2Token","centroidsDataContainer","bounds","getPointsBounds","dataToFeature","updateMeta","datasets","oldLayerData","opt","gpuFilter","dataId","updateData","accessors","getAttributeAccessors","getFilterValue","filterValueAccessor","opts","interactionConfig","mapState","defaultLayerProps","getDefaultDeckLayerProps","eleZoomFactor","getElevationZoomFactor","zoomFactor","getZoomFactor","updateTriggers","getVisualChannelUpdateTriggers","filterValueUpdateTriggers","S2Layer","autoHighlight","highlightColor","HIGHLIGH_COLOR_3D","lineWidthScale","lineMiterLimit","wrapLongitude","extruded","pickable"],"mappings":";;;;;;;;;;;;;;AAoBA,IAAA,UAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;AACA,IAAA,gBAAA,GAAA,OAAA,CAAA,kCAAA,CAAA;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,eAAA,CAAA,CAAA;AACA,IAAA,YAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,eAAe,GAAG,CAAxB;AAEO,IAAMC,eAAe,GAAG;EAC7BC,KAAK,EAAE,CAAC,IAAD,EAAO,UAAP;AADsB,CAAxB;;AAIA,IAAMC,iBAAiB,GAAG,CAAC,OAAD,CAA1B;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAA,IAAA,EAAA;EAAA,IAAEF,KAAF,GAAA,IAAA,CAAEA,KAAF;EAAA,OAAa,UAAA,EAAE,EAAA;IAAA,OAAI,UAAA,CAAC,EAAA;MAAA,OAAIG,EAAE,CAACC,OAAHD,CAAWE,CAAC,CAACC,KAAbH,EAAoBH,KAAK,CAACO,QAA1BJ,CAAJ;IAAA,CAAL;EAAA,CAAf;AAAA,CAAxB;;AAEA,IAAMK,gBAAgB,GAAG,GAAzB;;AACA,IAAMC,gBAAgB,GAAG,CAAzB;;AAEA,IAAMC,YAAY,GAAG;EAC1B;EACAC,OAAO,EAAE,SAFiB;EAG1BC,UAAU,EAAE,YAHc;EAI1BC,MAAM,EAAE;IACNC,IAAI,EAAE,SADA;IAENC,KAAK,EAAE,YAFD;IAGNC,YAAY,EAAE,IAHR;IAINC,QAAQ,EAAE;EAJJ,CAJkB;EAW1B;EACAC,SAAS,EAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EACJC,aAAAA,CAAAA,iBAAAA,CAAkBD,SADd,CAAA,EAAA,CAAA,CAAA,EAAA;IAEPF,YAAY,EAAE;EAFP,CAAA,CAZiB;EAgB1BI,WAAW,EAAE,aAhBa;EAiB1BC,gBAAgB,EAAE,kBAjBQ;EAkB1BC,SAAS,EAAE,kBAlBe;EAmB1BC,OAAO,EAAE,SAnBiB;EAqB1B;EACAC,QAAQ,EAAE,UAtBgB;EAuB1BC,cAAc,EAAE,gBAvBU;EAwB1BC,yBAAyB,EAAE,2BAxBD;EAyB1BC,WAAW,EAAE,gBAzBa;EA2B1B;EACAC,SAAS,EAAE;AA5Be,CAArB;;IA+BcC,e;;;EACnB,SAAA,eAAA,CAAYE,KAAZ,EAAmB;IAAA,IAAA,KAAA;IAAA,CAAA,CAAA,EAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,eAAA,CAAA;IACjB,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAMA,KAAN,CAAA;IACA,KAAA,CAAKC,iBAAL,CAAuBtB,YAAvB,CAAA;IACA,KAAA,CAAKuB,mBAAL,GAA2B,UAAA,aAAa,EAAA;MAAA,OAAI/B,eAAe,CAAC,KAAA,CAAKgC,MAAL,CAAYC,OAAb,CAAfjC,CAAqCkC,aAArClC,CAAJ;IAAA,CAAxC;IAHiB,OAAA,KAAA;EAIlB;;;SAED,SAAA,GAAA,GAAW;MACT,OAAO,IAAP;IACD;;;SAED,SAAA,GAAA,GAAW;MACT,OAAO,IAAP;IACD;;;SAED,SAAA,GAAA,GAA2B;MACzB,OAAOD,iBAAP;IACD;;;SAED,SAAA,GAAA,GAAgB;MACd,OAAOoC,YAAAA,CAAAA,SAAAA,CAAP;IACD;;;SAED,SAAA,GAAA,GAAqB;MACnB,IAAMC,cAAc,GAAA,CAAA,CAAA,EAAA,KAAA,CAAA,SAAA,CAAA,EAAA,CAAA,CAAA,EAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,eAAA,CAAA,SAAA,CAAA,EAAA,gBAAA,EAAA,IAAA,CAApB;MACA,OAAO;QACLC,KAAK,EAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EACAD,cAAc,CAACC,KADf,CAAA,EAAA,CAAA,CAAA,EAAA;UAEHC,QAAQ,EAAE;QAFP,CAAA,CADA;QAKLC,IAAI,EAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EACCH,cAAc,CAACG,IADhB,CAAA,EAAA,CAAA,CAAA,EAAA;UAEFxB,QAAQ,EAAE,QAFR;UAGFuB,QAAQ,EAAE,cAHR;UAIFE,SAAS,EAAE,SAAA,SAAA,CAAA,MAAM,EAAA;YAAA,OAAIR,MAAM,CAACS,SAAPT,CAAiBX,OAArB;UAAA,CAJf;UAKFP,YAAY,EAAEP;QALZ,CAAA,CALC;QAYLW,WAAW,EAAE;UACXH,QAAQ,EAAE,aADC;UAEX2B,KAAK,EAAE,kBAFI;UAGXC,KAAK,EAAE,kBAHI;UAIXC,MAAM,EAAE,mBAJG;UAKXC,KAAK,EAAE,kBALI;UAMXC,GAAG,EAAE,aANM;UAOXC,gBAAgB,EAAEC,gBAAAA,CAAAA,cAAAA,CAAeX,KAPtB;UAQXC,QAAQ,EAAE,cARC;UASXE,SAAS,EAAE,SAAA,SAAA,CAAA,MAAM,EAAA;YAAA,OAAIR,MAAM,CAACS,SAAPT,CAAiBX,OAArB;UAAA,CATN;UAUX4B,SAAS,EAAEb,cAAc,CAACC,KAAfD,CAAqBa,SAVrB;UAWXnC,YAAY,EAAE,SAAA,YAAA,CAAA,MAAM,EAAA;YAAA,OAAIkB,MAAM,CAACS,SAAPT,CAAiBd,WAAjBc,IAAgCA,MAAM,CAACK,KAA3C;UAAA;QAXT,CAZR;QAyBLa,MAAM,EAAE;UACNnC,QAAQ,EAAE,QADJ;UAEN2B,KAAK,EAAE,aAFD;UAGNC,KAAK,EAAE,aAHD;UAINC,MAAM,EAAE,cAJF;UAKNC,KAAK,EAAE,aALD;UAMNC,GAAG,EAAE,QANC;UAONC,gBAAgB,EAAEC,gBAAAA,CAAAA,cAAAA,CAAeT,IAP3B;UAQND,QAAQ,EAAE,cARJ;UASNE,SAAS,EAAE,SAAA,SAAA,CAAA,MAAM,EAAA;YAAA,OAAIR,MAAM,CAACS,SAAPT,CAAiBV,QAArB;UAAA,CATX;UAUN2B,SAAS,EAAE,CAVL;UAWNnC,YAAY,EAAER;QAXR;MAzBH,CAAP;IAuCD;;;WAED,SAAA,qBAAA,GAAkC;MAAA,IAAZuB,KAAY,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,CAAA,CAAI;MAChC,OAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,KAAA,CAAA,SAAA,CAAA,EAAA,CAAA,CAAA,EAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,eAAA,CAAA,SAAA,CAAA,EAAA,uBAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EACiCA,KADjC,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA;QAGE;QACAsB,WAAW,EAAE,IAJf;QAKEC,YAAY,EAAE,CAAC,CAAD,EAAI,CAAJ,CALhB;QAMEC,WAAW,EAAE,QANf;QAQE;QACAC,gBAAgB,EAAE,IATpB;QAUEC,iBAAiB,EAAE,CAAC,CAAD,EAAI,CAAJ,CAVrB;QAWEC,gBAAgB,EAAE;MAXpB,CAAA,CAAA;IAaD;;;WAiBD,SAAA,sBAAA,CAAA,KAAA,EAAuDQ,UAAvD,EAAmE;MAAA,IAA3C9B,aAA2C,GAAA,KAAA,CAA3CA,aAA2C;QAA5B6B,aAA4B,GAAA,KAAA,CAA5BA,aAA4B;MACjE,IAAME,IAAI,GAAG,EAAb;MACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,aAAa,CAACH,MAAlC,EAA0CM,CAAC,EAA3C,EAA+C;QAC7C,IAAM9D,KAAK,GAAG2D,aAAa,CAACG,CAAD,CAA3B;QACA,IAAMpE,KAAK,GAAGkE,UAAU,CAAC;UAAC5D,KAAK,EAALA;QAAD,CAAD,CAAxB;QAEA,IAAIN,KAAJ,EAAW;UACTmE,IAAI,CAACE,IAALF,CAAU;YACR7D,KAAK,EAALA,KADQ;YAERN,KAAK,EAALA;UAFQ,CAAVmE,CAAAA;QAID;MACF;MACD,OAAOA,IAAP;IACD;;;WAED,SAAA,eAAA,CAAgB/B,aAAhB,EAA+B8B,UAA/B,EAA2C;MACzC;MACA,IAAMI,SAAS,GAAG,aAAa,CAACC,MAAd,CAChB,UAACC,GAAD,EAAMC,KAAN,EAAanE,KAAb,EAAuB;QACrB,IAAMoE,OAAO,GAAGR,UAAU,CAAC;UAAC5D,KAAK,EAALA;QAAD,CAAD,CAA1B;QACA,IAAIoE,OAAJ,EAAa;UACXF,GAAG,CAACH,IAAJG,CAAS,CAAA,CAAA,EAAA,QAAA,CAAA,WAAA,EAAYE,OAAZ,CAATF,CAAAA;QACD;QACD,OAAOA,GAAP;MACD,CAPe,EAQhB,EARgB,EAShB,IATgB,CAAlB;MAYA,IAAMG,sBAAsB,GAAG,CAAA,CAAA,EAAA,WAAA,CAAA,mBAAA,EAAoBL,SAApB,CAA/B;MACA,IAAMM,MAAM,GAAG,IAAA,CAAKC,eAAL,CAAqBF,sBAArB,EAA6C,UAACtE,CAAD,EAAIF,EAAJ,EAAA;QAAA,OAAW,CACrEA,EAAE,CAACC,OAAHD,CAAWE,CAAC,CAACC,KAAbH,EAAoB,CAApBA,CADqE,EAErEA,EAAE,CAACC,OAAHD,CAAWE,CAAC,CAACC,KAAbH,EAAoB,CAApBA,CAFqE,CAAX;MAAA,CAA7C,CAAf;MAIA,IAAA,CAAK2E,aAAL,GAAqB;QAACR,SAAS,EAATA;MAAD,CAArB;MACA,IAAA,CAAKS,UAAL,CAAgB;QAACH,MAAM,EAANA;MAAD,CAAhB,CAAA;IACD;;;WAED,SAAA,eAAA,CAAgBI,QAAhB,EAA0BC,YAA1B,EAAkD;MAAA,IAAVC,GAAU,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,CAAA,CAAI;MAAA,IAAA,qBAAA,GACbF,QAAQ,CAAC,IAAA,CAAK9C,MAAL,CAAYkD,MAAb,CADK;QACzCD,SADyC,GAAA,qBAAA,CACzCA,SADyC;QAC9B/C,aAD8B,GAAA,qBAAA,CAC9BA,aAD8B;MAEhD,IAAM8B,UAAU,GAAG,IAAA,CAAKjC,mBAAL,CAAyBG,aAAzB,CAAnB;MAFgD,IAAA,gBAAA,GAGjC,IAAA,CAAKiD,UAAL,CAAgBL,QAAhB,EAA0BC,YAA1B,CAHiC;QAGzCd,IAHyC,GAAA,gBAAA,CAGzCA,IAHyC;MAKhD,IAAMmB,SAAS,GAAG,IAAA,CAAKC,qBAAL,CAA2B;QAACnD,aAAa,EAAbA;MAAD,CAA3B,CAAlB;MAEA,OAAA,aAAA,CAAA;QACE+B,IAAI,EAAJA,IADF;QAEED,UAAU,EAAVA,UAFF;QAGEsB,cAAc,EAAEL,SAAS,CAACM,mBAAVN,CAA8B/C,aAA9B+C,CAAAA;MAHlB,CAAA,EAIKG,SAJL,CAAA;IAMD;;;WAED,SAAA,WAAA,CAAYI,IAAZ,EAAkB;MAAA,IACTvB,IADS,GACuCuB,IADvC,CACTvB,IADS;QACHgB,SADG,GACuCO,IADvC,CACHP,SADG;QACQQ,iBADR,GACuCD,IADvC,CACQC,iBADR;QAC2BC,QAD3B,GACuCF,IADvC,CAC2BE,QAD3B;MAGhB,IAAMC,iBAAiB,GAAG,IAAA,CAAKC,wBAAL,CAA8BJ,IAA9B,CAA1B;MAEA,IAAMK,aAAa,GAAG,IAAA,CAAKC,sBAAL,CAA4BJ,QAA5B,CAAtB;MACA,IAAMK,UAAU,GAAG,IAAA,CAAKC,aAAL,CAAmBN,QAAnB,CAAnB;MANgB,IAOT1D,MAPS,GAOC,IAPD,CAOTA,MAPS;MAAA,IAQTS,SARS,GAQIT,MARJ,CAQTS,SARS;MAUhB,IAAMwD,cAAc,GAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EACf,IAAA,CAAKC,8BAAL,EADe,CAAA,EAAA,CAAA,CAAA,EAAA;QAElBZ,cAAc,EAAEL,SAAS,CAACkB;MAFR,CAAA,CAApB;MAKA,OAAO,CACL,IAAIC,UAAAA,CAAAA,OAAJ,CAAA,aAAA,CAAA,aAAA,CAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EACKT,iBADL,CAAA,EAEKF,iBAFL,CAAA,EAGKxB,IAHL,CAAA,EAAA,CAAA,CAAA,EAAA;QAIED,UAAU,EAAE,SAAA,UAAA,CAAA,CAAC,EAAA;UAAA,OAAI7D,CAAC,CAACL,KAAN;QAAA,CAJf;QAMEuG,aAAa,EAAE5D,SAAS,CAACnB,QAN3B;QAOEgF,cAAc,EAAEC,gBAAAA,CAAAA,iBAPlB;QASE;QACAC,cAAc,EAAE/D,SAAS,CAACzB,SAAVyB,GAAsBsD,UAAtBtD,GAAmC7C,eAVrD;QAWEyB,OAAO,EAAEoB,SAAS,CAACpB,OAXrB;QAYEoF,cAAc,EAAE,CAZlB;QAcE;QACA9F,MAAM,EAAE8B,SAAS,CAAC9B,MAfpB;QAgBEF,OAAO,EAAEgC,SAAS,CAAChC,OAhBrB;QAiBEiG,aAAa,EAAE,KAjBjB;QAmBE;QACAnF,cAAc,EAAEkB,SAAS,CAAClB,cAAVkB,GAA2BoD,aApB7C;QAqBEc,QAAQ,EAAElE,SAAS,CAACnB,QArBtB;QAuBEI,SAAS,EAAEe,SAAS,CAACf,SAvBvB;QAyBEkF,QAAQ,EAAE,IAzBZ;QA2BEX,cAAc,EAAdA;MA3BF,CAAA,CAAA,CADK,CAAP;IA+BD;;;WAnHD,SAAA,qBAAA,CAAA,KAAA,EAA4C;MAAA,IAAA,YAAA,GAAA,KAAA,CAAdxC,MAAc;QAAdA,MAAc,GAAA,YAAA,KAAA,KAAA,CAAA,GAAL,EAAK,GAAA,YAAA;MAC1C,IAAMC,YAAY,GAAG,IAAA,CAAKC,sBAAL,CAA4B9D,eAA5B,EAA6C4D,MAA7C,CAArB;MACA,IAAI,CAACC,YAAD,IAAiB,CAACA,YAAY,CAACE,MAAnC,EAA2C;QACzC,OAAO;UAAC/B,KAAK,EAAE;QAAR,CAAP;MACD;MAED,OAAO;QACLA,KAAK,EAAE,YAAY,CAACgC,GAAb,CAAiB,UAAA,OAAO,EAAA;UAAA,OAAK;YAClCC,SAAS,EAAE,IADuB;YAElCjD,KAAK,EAAE,IAF2B;YAGlCoB,OAAO,EAAPA;UAHkC,CAAL;QAAA,CAAxB;MADF,CAAP;IAOD;;;EA/F0CL,UAAAA,CAAAA,SAAAA,C","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {S2Layer} from '@deck.gl/geo-layers';\nimport {HIGHLIGH_COLOR_3D, CHANNEL_SCALES} from 'constants/default-settings';\nimport {LAYER_VIS_CONFIGS} from 'layers/layer-factory';\nimport {createDataContainer} from 'utils/table-utils';\nimport Layer from '../base-layer';\nimport S2LayerIcon from './s2-layer-icon';\nimport {getS2Center} from './s2-utils';\n\nconst zoomFactorValue = 8;\n\nexport const S2_TOKEN_FIELDS = {\n  token: ['s2', 's2_token']\n};\n\nexport const s2RequiredColumns = ['token'];\nexport const S2TokenAccessor = ({token}) => dc => d => dc.valueAt(d.index, token.fieldIdx);\n\nexport const defaultElevation = 500;\nexport const defaultLineWidth = 1;\n\nexport const S2VisConfigs = {\n  // Filled color\n  opacity: 'opacity',\n  colorRange: 'colorRange',\n  filled: {\n    type: 'boolean',\n    label: 'Fill Color',\n    defaultValue: true,\n    property: 'filled'\n  },\n\n  // stroke\n  thickness: {\n    ...LAYER_VIS_CONFIGS.thickness,\n    defaultValue: 0.5\n  },\n  strokeColor: 'strokeColor',\n  strokeColorRange: 'strokeColorRange',\n  sizeRange: 'strokeWidthRange',\n  stroked: 'stroked',\n\n  // height\n  enable3d: 'enable3d',\n  elevationScale: 'elevationScale',\n  enableElevationZoomFactor: 'enableElevationZoomFactor',\n  heightRange: 'elevationRange',\n\n  // wireframe\n  wireframe: 'wireframe'\n};\n\nexport default class S2GeometryLayer extends Layer {\n  constructor(props) {\n    super(props);\n    this.registerVisConfig(S2VisConfigs);\n    this.getPositionAccessor = dataContainer => S2TokenAccessor(this.config.columns)(dataContainer);\n  }\n\n  get type() {\n    return 's2';\n  }\n\n  get name() {\n    return 'S2';\n  }\n\n  get requiredLayerColumns() {\n    return s2RequiredColumns;\n  }\n\n  get layerIcon() {\n    return S2LayerIcon;\n  }\n\n  get visualChannels() {\n    const visualChannels = super.visualChannels;\n    return {\n      color: {\n        ...visualChannels.color,\n        accessor: 'getFillColor'\n      },\n      size: {\n        ...visualChannels.size,\n        property: 'stroke',\n        accessor: 'getLineWidth',\n        condition: config => config.visConfig.stroked,\n        defaultValue: defaultLineWidth\n      },\n      strokeColor: {\n        property: 'strokeColor',\n        field: 'strokeColorField',\n        scale: 'strokeColorScale',\n        domain: 'strokeColorDomain',\n        range: 'strokeColorRange',\n        key: 'strokeColor',\n        channelScaleType: CHANNEL_SCALES.color,\n        accessor: 'getLineColor',\n        condition: config => config.visConfig.stroked,\n        nullValue: visualChannels.color.nullValue,\n        defaultValue: config => config.visConfig.strokeColor || config.color\n      },\n      height: {\n        property: 'height',\n        field: 'heightField',\n        scale: 'heightScale',\n        domain: 'heightDomain',\n        range: 'heightRange',\n        key: 'height',\n        channelScaleType: CHANNEL_SCALES.size,\n        accessor: 'getElevation',\n        condition: config => config.visConfig.enable3d,\n        nullValue: 0,\n        defaultValue: defaultElevation\n      }\n    };\n  }\n\n  getDefaultLayerConfig(props = {}) {\n    return {\n      ...super.getDefaultLayerConfig(props),\n\n      // add height visual channel\n      heightField: null,\n      heightDomain: [0, 1],\n      heightScale: 'linear',\n\n      // add stroke color visual channel\n      strokeColorField: null,\n      strokeColorDomain: [0, 1],\n      strokeColorScale: 'quantile'\n    };\n  }\n\n  static findDefaultLayerProps({fields = []}) {\n    const foundColumns = this.findDefaultColumnField(S2_TOKEN_FIELDS, fields);\n    if (!foundColumns || !foundColumns.length) {\n      return {props: []};\n    }\n\n    return {\n      props: foundColumns.map(columns => ({\n        isVisible: true,\n        label: 'S2',\n        columns\n      }))\n    };\n  }\n\n  calculateDataAttribute({dataContainer, filteredIndex}, getS2Token) {\n    const data = [];\n    for (let i = 0; i < filteredIndex.length; i++) {\n      const index = filteredIndex[i];\n      const token = getS2Token({index});\n\n      if (token) {\n        data.push({\n          index,\n          token\n        });\n      }\n    }\n    return data;\n  }\n\n  updateLayerMeta(dataContainer, getS2Token) {\n    // add safe row flag\n    const centroids = dataContainer.reduce(\n      (acc, entry, index) => {\n        const s2Token = getS2Token({index});\n        if (s2Token) {\n          acc.push(getS2Center(s2Token));\n        }\n        return acc;\n      },\n      [],\n      true\n    );\n\n    const centroidsDataContainer = createDataContainer(centroids);\n    const bounds = this.getPointsBounds(centroidsDataContainer, (d, dc) => [\n      dc.valueAt(d.index, 0),\n      dc.valueAt(d.index, 1)\n    ]);\n    this.dataToFeature = {centroids};\n    this.updateMeta({bounds});\n  }\n\n  formatLayerData(datasets, oldLayerData, opt = {}) {\n    const {gpuFilter, dataContainer} = datasets[this.config.dataId];\n    const getS2Token = this.getPositionAccessor(dataContainer);\n    const {data} = this.updateData(datasets, oldLayerData);\n\n    const accessors = this.getAttributeAccessors({dataContainer});\n\n    return {\n      data,\n      getS2Token,\n      getFilterValue: gpuFilter.filterValueAccessor(dataContainer)(),\n      ...accessors\n    };\n  }\n\n  renderLayer(opts) {\n    const {data, gpuFilter, interactionConfig, mapState} = opts;\n\n    const defaultLayerProps = this.getDefaultDeckLayerProps(opts);\n\n    const eleZoomFactor = this.getElevationZoomFactor(mapState);\n    const zoomFactor = this.getZoomFactor(mapState);\n    const {config} = this;\n    const {visConfig} = config;\n\n    const updateTriggers = {\n      ...this.getVisualChannelUpdateTriggers(),\n      getFilterValue: gpuFilter.filterValueUpdateTriggers\n    };\n\n    return [\n      new S2Layer({\n        ...defaultLayerProps,\n        ...interactionConfig,\n        ...data,\n        getS2Token: d => d.token,\n\n        autoHighlight: visConfig.enable3d,\n        highlightColor: HIGHLIGH_COLOR_3D,\n\n        // stroke\n        lineWidthScale: visConfig.thickness * zoomFactor * zoomFactorValue,\n        stroked: visConfig.stroked,\n        lineMiterLimit: 2,\n\n        // Filled color\n        filled: visConfig.filled,\n        opacity: visConfig.opacity,\n        wrapLongitude: false,\n\n        // Elevation\n        elevationScale: visConfig.elevationScale * eleZoomFactor,\n        extruded: visConfig.enable3d,\n\n        wireframe: visConfig.wireframe,\n\n        pickable: true,\n\n        updateTriggers\n      })\n    ];\n  }\n}\n"]},"metadata":{},"sourceType":"script"}