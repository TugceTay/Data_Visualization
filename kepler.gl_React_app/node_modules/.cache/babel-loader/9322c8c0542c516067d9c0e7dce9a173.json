{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { asyncDeepMap } from './async-deep-map';\nexport function deepLoad(_x, _x2, _x3) {\n  return _deepLoad.apply(this, arguments);\n}\nfunction _deepLoad() {\n  _deepLoad = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(urlTree, load, options) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return asyncDeepMap(urlTree, function (url) {\n              return shallowLoad(url, load, options);\n            });\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _deepLoad.apply(this, arguments);\n}\nexport function shallowLoad(_x4, _x5, _x6) {\n  return _shallowLoad.apply(this, arguments);\n}\nfunction _shallowLoad() {\n  _shallowLoad = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(url, load, options) {\n    var response, arrayBuffer;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch(url, options.fetch);\n          case 2:\n            response = _context2.sent;\n            _context2.next = 5;\n            return response.arrayBuffer();\n          case 5:\n            arrayBuffer = _context2.sent;\n            _context2.next = 8;\n            return load(arrayBuffer, options);\n          case 8:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _shallowLoad.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/texture-api/deep-load.js"],"names":["asyncDeepMap","deepLoad","urlTree","load","options","shallowLoad","url","response","fetch","arrayBuffer"],"mappings":";;AACA,SAAQA,YAAR,QAA2B,kBAA3B;AAEA,OAAA,SAAsBC,QAAtB,CAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;EAAA,OAAA,SAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;yDAAO,SAAA,OAAA,CAAwBC,OAAxB,EAAiCC,IAAjC,EAAuCC,OAAvC,EAAA;IAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OACQJ,YAAY,CAACE,OAAD,EAAU,UAAA,GAAG,EAAA;cAAA,OAAIG,WAAW,CAACC,GAAD,EAAMH,IAAN,EAAYC,OAAZ,CAAf;YAAA,CAAb,CADpB;UAAA,KAAA,CAAA;YAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,QAAA,CAAA,IAAA,CAAA;UAAA,KAAA,CAAA;UAAA,KAAA,KAAA;YAAA,OAAA,QAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,OAAA,CAAA;EAAA,C;;;AAIP,OAAA,SAAsBC,WAAtB,CAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA;EAAA,OAAA,YAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;4DAAO,SAAA,QAAA,CAA2BC,GAA3B,EAAgCH,IAAhC,EAAsCC,OAAtC,EAAA;IAAA,IAAA,QAAA,EAAA,WAAA;IAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OAEkBI,KAAK,CAACF,GAAD,EAAMF,OAAO,CAACI,KAAd,CAFvB;UAAA,KAAA,CAAA;YAECD,QAFD,GAAA,SAAA,CAAA,IAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OAGqBA,QAAQ,CAACE,WAATF,EAHrB;UAAA,KAAA,CAAA;YAGCE,WAHD,GAAA,SAAA,CAAA,IAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OAIQN,IAAI,CAACM,WAAD,EAAcL,OAAd,CAJZ;UAAA,KAAA,CAAA;YAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,SAAA,CAAA,IAAA,CAAA;UAAA,KAAA,CAAA;UAAA,KAAA,KAAA;YAAA,OAAA,SAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,QAAA,CAAA;EAAA,C","sourcesContent":["/* global fetch */\nimport {asyncDeepMap} from './async-deep-map';\n\nexport async function deepLoad(urlTree, load, options) {\n  return await asyncDeepMap(urlTree, url => shallowLoad(url, load, options));\n}\n\nexport async function shallowLoad(url, load, options) {\n  // console.error('loading', url);\n  const response = await fetch(url, options.fetch);\n  const arrayBuffer = await response.arrayBuffer();\n  return await load(arrayBuffer, options);\n}\n"]},"metadata":{},"sourceType":"module"}