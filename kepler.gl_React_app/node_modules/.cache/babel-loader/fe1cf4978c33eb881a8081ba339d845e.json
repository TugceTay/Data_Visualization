{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setLocaleUpdater = exports.showDatasetTableUpdater = exports.toggleSplitMapUpdater = exports.loadFilesErrUpdater = exports.loadFilesSuccessUpdater = exports.loadFilesUpdater = exports.removeNotificationUpdater = exports.addNotificationUpdater = exports.setExportMapHTMLModeUpdater = exports.setExportMapFormatUpdater = exports.setUserMapboxAccessTokenUpdater = exports.setExportDataUpdater = exports.setExportFilteredUpdater = exports.setExportDataTypeUpdater = exports.setExportSelectedDatasetUpdater = exports.startExportingImageUpdater = exports.cleanupExportImageUpdater = exports.setExportImageErrorUpdater = exports.setExportImageDataUriUpdater = exports.setExportImageSettingUpdater = exports.openDeleteModalUpdater = exports.setMapControlVisibilityUpdater = exports.toggleMapControlUpdater = exports.hideExportDropdownUpdater = exports.showExportDropdownUpdater = exports.toggleModalUpdater = exports.toggleSidePanelUpdater = exports.initUiStateUpdater = exports.INITIAL_UI_STATE = exports.DEFAULT_EXPORT_MAP = exports.DEFAULT_EXPORT_JSON = exports.DEFAULT_EXPORT_HTML = exports.DEFAULT_NOTIFICATIONS = exports.DEFAULT_EXPORT_DATA = exports.DEFAULT_LOAD_FILES = exports.DEFAULT_EXPORT_IMAGE = exports.DEFAULT_MAP_CONTROLS = exports.DEFAULT_MODAL = exports.DEFAULT_ACTIVE_SIDE_PANEL = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _defaultSettings = require(\"../constants/default-settings\");\nvar _locales = require(\"../localization/locales\");\nvar _notificationsUtils = require(\"../utils/notifications-utils\");\nvar _exportUtils = require(\"../utils/export-utils\");\nvar _composerHelpers = require(\"./composer-helpers\");\nvar _DEFAULT_EXPORT_MAP;\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar DEFAULT_ACTIVE_SIDE_PANEL = 'layer';\nexports.DEFAULT_ACTIVE_SIDE_PANEL = DEFAULT_ACTIVE_SIDE_PANEL;\nvar DEFAULT_MODAL = _defaultSettings.ADD_DATA_ID;\n/**\n * Updaters for `uiState` reducer. Can be used in your root reducer to directly modify kepler.gl's state.\n * Read more about [Using updaters](../advanced-usage/using-updaters.md)\n *\n * @public\n * @example\n *\n * import keplerGlReducer, {uiStateUpdaters} from 'kepler.gl/reducers';\n * // Root Reducer\n * const reducers = combineReducers({\n *  keplerGl: keplerGlReducer,\n *  app: appReducer\n * });\n *\n * const composedReducer = (state, action) => {\n *  switch (action.type) {\n *    // click button to close side panel\n *    case 'CLICK_BUTTON':\n *      return {\n *        ...state,\n *        keplerGl: {\n *          ...state.keplerGl,\n *          foo: {\n *             ...state.keplerGl.foo,\n *             uiState: uiStateUpdaters.toggleSidePanelUpdater(\n *               uiState, {payload: null}\n *             )\n *          }\n *        }\n *      };\n *  }\n *  return reducers(state, action);\n * };\n *\n * export default composedReducer;\n */\n\n/* eslint-disable no-unused-vars */\n\nexports.DEFAULT_MODAL = DEFAULT_MODAL;\nvar uiStateUpdaters = null;\n/* eslint-enable no-unused-vars */\n\nvar DEFAULT_MAP_CONTROLS_FEATURES = {\n  show: true,\n  active: false,\n  disableClose: false,\n  // defines which map index users are interacting with (through map controls)\n  activeMapIndex: 0\n};\n/**\n * A list of map control visibility and whether is it active.\n * @memberof uiStateUpdaters\n * @constant\n * @property visibleLayers Default: `{show: true, active: false}`\n * @property mapLegend Default: `{show: true, active: false}`\n * @property toggle3d Default: `{show: true}`\n * @property splitMap Default: `{show: true}`\n * @property mapDraw Default: `{show: true, active: false}`\n * @property mapLocale Default: `{show: false, active: false}`\n * @type {import('./ui-state-updaters').MapControls}\n * @public\n */\n\nvar DEFAULT_MAP_CONTROLS = Object.keys(_defaultSettings.MAP_CONTROLS).reduce(function (_final, current) {\n  return _objectSpread(_objectSpread({}, _final), {}, (0, _defineProperty2[\"default\"])({}, current, DEFAULT_MAP_CONTROLS_FEATURES));\n}, {});\n/**\n * Default image export config\n * @memberof uiStateUpdaters\n * @constant\n * @property ratio Default: `'SCREEN'`,\n * @property resolution Default: `'ONE_X'`,\n * @property legend Default: `false`,\n * @property mapH Default: 0,\n * @property mapW Default: 0,\n * @property imageSize Default: {zoomOffset: 0, scale: 1, imageW: 0, imageH: 0},\n * @property imageDataUri Default: `''`,\n * @property exporting Default: `false`\n * @property error Default: `false`\n * @type {import('./ui-state-updaters').ExportImage}\n * @public\n */\n\nexports.DEFAULT_MAP_CONTROLS = DEFAULT_MAP_CONTROLS;\nvar DEFAULT_EXPORT_IMAGE = {\n  // user options\n  ratio: _defaultSettings.EXPORT_IMG_RATIOS.SCREEN,\n  resolution: _defaultSettings.RESOLUTIONS.ONE_X,\n  legend: false,\n  mapH: 0,\n  mapW: 0,\n  imageSize: {\n    zoomOffset: 0,\n    scale: 1,\n    imageW: 0,\n    imageH: 0\n  },\n  // when this is set to true, the mock map viewport will move to the center of data\n  center: false,\n  // exporting state\n  imageDataUri: '',\n  // exporting: used to attach plot-container to dom\n  exporting: false,\n  // processing: used as loading indicator when export image is being produced\n  processing: false,\n  error: false\n};\nexports.DEFAULT_EXPORT_IMAGE = DEFAULT_EXPORT_IMAGE;\nvar DEFAULT_LOAD_FILES = {\n  fileLoading: false\n};\n/**\n * Default initial `exportData` settings\n * @memberof uiStateUpdaters\n * @constant\n * @property selectedDataset Default: `''`,\n * @property dataType Default: `'csv'`,\n * @property filtered Default: `true`,\n * @type {import('./ui-state-updaters').ExportData}\n * @public\n */\n\nexports.DEFAULT_LOAD_FILES = DEFAULT_LOAD_FILES;\nvar DEFAULT_EXPORT_DATA = {\n  selectedDataset: '',\n  dataType: _defaultSettings.EXPORT_DATA_TYPE.CSV,\n  filtered: true\n};\n/**\n * @constant\n */\n\nexports.DEFAULT_EXPORT_DATA = DEFAULT_EXPORT_DATA;\nvar DEFAULT_NOTIFICATIONS = [];\n/**\n * @constant\n * @property exportMapboxAccessToken - Default: null, this is used when we provide a default mapbox token for users to take advantage of\n * @property userMapboxToken - Default: '', mapbox token provided by user through input field\n * @property mode - Default: 'READ', read only or editable\n * @type {import('./ui-state-updaters').ExportHtml}\n * @public\n */\n\nexports.DEFAULT_NOTIFICATIONS = DEFAULT_NOTIFICATIONS;\nvar DEFAULT_EXPORT_HTML = {\n  exportMapboxAccessToken: null,\n  userMapboxToken: '',\n  mode: _defaultSettings.EXPORT_HTML_MAP_MODES.READ\n};\n/**\n * @constant\n * @property hasData - Default: 'true',\n * @type {import('./ui-state-updaters').ExportJson}\n * @public\n */\n\nexports.DEFAULT_EXPORT_HTML = DEFAULT_EXPORT_HTML;\nvar DEFAULT_EXPORT_JSON = {\n  hasData: true\n};\n/**\n * Export Map Config\n * @constant\n * @property HTML - Default: 'DEFAULT_EXPORT_HTML',\n * @property JSON - Default: 'DEFAULT_EXPORT_JSON',\n * @property format - Default: 'HTML',\n * @type {import('./ui-state-updaters').ExportMap}\n * @public\n */\n\nexports.DEFAULT_EXPORT_JSON = DEFAULT_EXPORT_JSON;\nvar DEFAULT_EXPORT_MAP = (_DEFAULT_EXPORT_MAP = {}, (0, _defineProperty2[\"default\"])(_DEFAULT_EXPORT_MAP, _defaultSettings.EXPORT_MAP_FORMATS.HTML, DEFAULT_EXPORT_HTML), (0, _defineProperty2[\"default\"])(_DEFAULT_EXPORT_MAP, _defaultSettings.EXPORT_MAP_FORMATS.JSON, DEFAULT_EXPORT_JSON), (0, _defineProperty2[\"default\"])(_DEFAULT_EXPORT_MAP, \"format\", _defaultSettings.EXPORT_MAP_FORMATS.HTML), _DEFAULT_EXPORT_MAP);\n/**\n * Default initial `uiState`\n * @memberof uiStateUpdaters\n * @constant\n * @property readOnly Default: `false`\n * @property activeSidePanel Default: `'layer'`\n * @property currentModal Default: `'addData'`\n * @property datasetKeyToRemove Default: `null`\n * @property visibleDropdown Default: `null`\n * @property exportImage Default: [`DEFAULT_EXPORT_IMAGE`](#default_export_image)\n * @property exportData Default: [`DEFAULT_EXPORT_DATA`](#default_export_data)\n * @property exportMap Default: [`DEFAULT_EXPORT_MAP`](#default_export_map)\n * @property mapControls Default: [`DEFAULT_MAP_CONTROLS`](#default_map_controls)\n * @property notifications Default: `[]`\n * @property notifications Default: `[]`\n * @property loadFiles\n * @type {import('./ui-state-updaters').UiState}\n * @public\n */\n\nexports.DEFAULT_EXPORT_MAP = DEFAULT_EXPORT_MAP;\nvar INITIAL_UI_STATE = {\n  readOnly: false,\n  activeSidePanel: DEFAULT_ACTIVE_SIDE_PANEL,\n  currentModal: DEFAULT_MODAL,\n  datasetKeyToRemove: null,\n  visibleDropdown: null,\n  // export image modal ui\n  exportImage: DEFAULT_EXPORT_IMAGE,\n  // export data modal ui\n  exportData: DEFAULT_EXPORT_DATA,\n  // html export\n  exportMap: DEFAULT_EXPORT_MAP,\n  // map control panels\n  mapControls: DEFAULT_MAP_CONTROLS,\n  // ui notifications\n  notifications: DEFAULT_NOTIFICATIONS,\n  // load files\n  loadFiles: DEFAULT_LOAD_FILES,\n  // Locale of the UI\n  locale: _locales.LOCALE_CODES.en\n};\n/* Updaters */\n\n/**\n * @memberof uiStateUpdaters\n\n */\n\nexports.INITIAL_UI_STATE = INITIAL_UI_STATE;\nvar initUiStateUpdater = function initUiStateUpdater(state, action) {\n  return _objectSpread(_objectSpread({}, state), (action.payload || {}).initialUiState);\n};\n/**\n * Toggle active side panel\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload id of side panel to be shown, one of `layer`, `filter`, `interaction`, `map`. close side panel if `null`\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').toggleSidePanelUpdater}\n * @public\n */\n\nexports.initUiStateUpdater = initUiStateUpdater;\nvar toggleSidePanelUpdater = function toggleSidePanelUpdater(state, _ref) {\n  var id = _ref.payload;\n  return id === state.activeSidePanel ? state : _objectSpread(_objectSpread({}, state), {}, {\n    activeSidePanel: id\n  });\n};\n/**\n * Show and hide modal dialog\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @paramaction.payload id of modal to be shown, null to hide modals. One of:\n *  - [`DATA_TABLE_ID`](../constants/default-settings.md#data_table_id)\n *  - [`DELETE_DATA_ID`](../constants/default-settings.md#delete_data_id)\n *  - [`ADD_DATA_ID`](../constants/default-settings.md#add_data_id)\n *  - [`EXPORT_IMAGE_ID`](../constants/default-settings.md#export_image_id)\n *  - [`EXPORT_DATA_ID`](../constants/default-settings.md#export_data_id)\n *  - [`ADD_MAP_STYLE_ID`](../constants/default-settings.md#add_map_style_id)\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').toggleModalUpdater}\n * @public\n */\n\nexports.toggleSidePanelUpdater = toggleSidePanelUpdater;\nvar toggleModalUpdater = function toggleModalUpdater(state, _ref2) {\n  var id = _ref2.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    currentModal: id\n  });\n};\n/**\n * Hide and show side panel header dropdown, activated by clicking the share link on top of the side panel\n * @memberof uiStateUpdaters\n * @type {typeof import('./ui-state-updaters').showExportDropdownUpdater}\n * @public\n */\n\nexports.toggleModalUpdater = toggleModalUpdater;\nvar showExportDropdownUpdater = function showExportDropdownUpdater(state, _ref3) {\n  var id = _ref3.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    visibleDropdown: id\n  });\n};\n/**\n * Hide side panel header dropdown, activated by clicking the share link on top of the side panel\n * @memberof uiStateUpdaters\n * @type {typeof import('./ui-state-updaters').hideExportDropdownUpdater}\n * @public\n */\n\nexports.showExportDropdownUpdater = showExportDropdownUpdater;\nvar hideExportDropdownUpdater = function hideExportDropdownUpdater(state) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    visibleDropdown: null\n  });\n};\n/**\n * Toggle active map control panel\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action action\n * @param action.payload map control panel id, one of the keys of: [`DEFAULT_MAP_CONTROLS`](#default_map_controls)\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').toggleMapControlUpdater}\n * @public\n */\n\nexports.hideExportDropdownUpdater = hideExportDropdownUpdater;\nvar toggleMapControlUpdater = function toggleMapControlUpdater(state, _ref4) {\n  var _ref4$payload = _ref4.payload,\n    panelId = _ref4$payload.panelId,\n    _ref4$payload$index = _ref4$payload.index,\n    index = _ref4$payload$index === void 0 ? 0 : _ref4$payload$index;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    mapControls: _objectSpread(_objectSpread({}, state.mapControls), {}, (0, _defineProperty2[\"default\"])({}, panelId, _objectSpread(_objectSpread({}, state.mapControls[panelId]), {}, {\n      // this handles split map interaction\n      // Toggling from within the same map will simply toggle the active property\n      // Toggling from within different maps we set the active property to true\n      active: index === state.mapControls[panelId].activeMapIndex ? !state.mapControls[panelId].active : true,\n      activeMapIndex: index\n    })))\n  });\n};\n/**\n * Toggle map control visibility\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action action\n * @param action.payload map control panel id, one of the keys of: [`DEFAULT_MAP_CONTROLS`](#default_map_controls)\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').setMapControlVisibilityUpdater}\n * @public\n */\n\nexports.toggleMapControlUpdater = toggleMapControlUpdater;\nvar setMapControlVisibilityUpdater = function setMapControlVisibilityUpdater(state, _ref5) {\n  var _state$mapControls;\n  var _ref5$payload = _ref5.payload,\n    panelId = _ref5$payload.panelId,\n    show = _ref5$payload.show;\n  if (!((_state$mapControls = state.mapControls) !== null && _state$mapControls !== void 0 && _state$mapControls[panelId])) {\n    return state;\n  }\n  return _objectSpread(_objectSpread({}, state), {}, {\n    mapControls: _objectSpread(_objectSpread({}, state.mapControls), {}, (0, _defineProperty2[\"default\"])({}, panelId, _objectSpread(_objectSpread({}, state.mapControls[panelId]), {}, {\n      show: Boolean(show)\n    })))\n  });\n};\n/**\n * Toggle active map control panel\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload dataset id\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').openDeleteModalUpdater}\n * @public\n */\n\nexports.setMapControlVisibilityUpdater = setMapControlVisibilityUpdater;\nvar openDeleteModalUpdater = function openDeleteModalUpdater(state, _ref6) {\n  var datasetKeyToRemove = _ref6.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    currentModal: _defaultSettings.DELETE_DATA_ID,\n    datasetKeyToRemove: datasetKeyToRemove\n  });\n};\n/**\n * Set `exportImage.legend` to `true` or `false`\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').setExportImageSettingUpdater}\n * @public\n */\n\nexports.openDeleteModalUpdater = openDeleteModalUpdater;\nvar setExportImageSettingUpdater = function setExportImageSettingUpdater(state, _ref7) {\n  var newSetting = _ref7.payload;\n  var updated = _objectSpread(_objectSpread({}, state.exportImage), newSetting);\n  var imageSize = (0, _exportUtils.calculateExportImageSize)(updated) || state.exportImage.imageSize;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    exportImage: _objectSpread(_objectSpread({}, updated), {}, {\n      imageSize: imageSize\n    })\n  });\n};\n/**\n * Set `exportImage.setExportImageDataUri` to a image dataUri\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload export image data uri\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').setExportImageDataUriUpdater}\n * @public\n */\n\nexports.setExportImageSettingUpdater = setExportImageSettingUpdater;\nvar setExportImageDataUriUpdater = function setExportImageDataUriUpdater(state, _ref8) {\n  var dataUri = _ref8.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    exportImage: _objectSpread(_objectSpread({}, state.exportImage), {}, {\n      processing: false,\n      imageDataUri: dataUri\n    })\n  });\n};\n/**\n * @memberof uiStateUpdaters\n * @type {typeof import('./ui-state-updaters').setExportImageErrorUpdater}\n * @public\n */\n\nexports.setExportImageDataUriUpdater = setExportImageDataUriUpdater;\nvar setExportImageErrorUpdater = function setExportImageErrorUpdater(state, _ref9) {\n  var error = _ref9.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    exportImage: _objectSpread(_objectSpread({}, state.exportImage), {}, {\n      processing: false,\n      error: error\n    })\n  });\n};\n/**\n * Delete cached export image\n * @memberof uiStateUpdaters\n * @type {typeof import('./ui-state-updaters').cleanupExportImageUpdater}\n * @public\n */\n\nexports.setExportImageErrorUpdater = setExportImageErrorUpdater;\nvar cleanupExportImageUpdater = function cleanupExportImageUpdater(state) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    exportImage: _objectSpread(_objectSpread({}, state.exportImage), {}, {\n      exporting: false,\n      imageDataUri: '',\n      error: false,\n      processing: false,\n      center: false\n    })\n  });\n};\n/**\n * Start image exporting flow\n * @memberof uiStateUpdaters\n * @param state\n * @param options\n * @returns {UiState}\n * @type {typeof import('./ui-state-updaters').startExportingImage}\n * @public\n */\n\nexports.cleanupExportImageUpdater = cleanupExportImageUpdater;\nvar startExportingImageUpdater = function startExportingImageUpdater(state, _ref10) {\n  var _ref10$payload = _ref10.payload,\n    options = _ref10$payload === void 0 ? {} : _ref10$payload;\n  var imageSettings = _objectSpread(_objectSpread({}, options), {}, {\n    exporting: true\n  });\n  return (0, _composerHelpers.compose_)([cleanupExportImageUpdater, (0, _composerHelpers.apply_)(setExportImageSettingUpdater, (0, _composerHelpers.payload_)(imageSettings))])(state);\n};\n/**\n * Set selected dataset for export\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload dataset id\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').setExportSelectedDatasetUpdater}\n * @public\n */\n\nexports.startExportingImageUpdater = startExportingImageUpdater;\nvar setExportSelectedDatasetUpdater = function setExportSelectedDatasetUpdater(state, _ref11) {\n  var dataset = _ref11.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    exportData: _objectSpread(_objectSpread({}, state.exportData), {}, {\n      selectedDataset: dataset\n    })\n  });\n};\n/**\n * Set data format for exporting data\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload one of `'text/csv'`\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').setExportDataTypeUpdater}\n * @public\n */\n\nexports.setExportSelectedDatasetUpdater = setExportSelectedDatasetUpdater;\nvar setExportDataTypeUpdater = function setExportDataTypeUpdater(state, _ref12) {\n  var dataType = _ref12.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    exportData: _objectSpread(_objectSpread({}, state.exportData), {}, {\n      dataType: dataType\n    })\n  });\n};\n/**\n * Whether to export filtered data, `true` or `false`\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').setExportFilteredUpdater}\n * @public\n */\n\nexports.setExportDataTypeUpdater = setExportDataTypeUpdater;\nvar setExportFilteredUpdater = function setExportFilteredUpdater(state, _ref13) {\n  var filtered = _ref13.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    exportData: _objectSpread(_objectSpread({}, state.exportData), {}, {\n      filtered: filtered\n    })\n  });\n};\n/**\n * Whether to including data in map config, toggle between `true` or `false`\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').setExportDataUpdater}\n * @public\n */\n\nexports.setExportFilteredUpdater = setExportFilteredUpdater;\nvar setExportDataUpdater = function setExportDataUpdater(state) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    exportMap: _objectSpread(_objectSpread({}, state.exportMap), {}, (0, _defineProperty2[\"default\"])({}, _defaultSettings.EXPORT_MAP_FORMATS.JSON, _objectSpread(_objectSpread({}, state.exportMap[_defaultSettings.EXPORT_MAP_FORMATS.JSON]), {}, {\n      hasData: !state.exportMap[_defaultSettings.EXPORT_MAP_FORMATS.JSON].hasData\n    })))\n  });\n};\n/**\n * whether to export a mapbox access to HTML single page\n * @param state - `uiState`\n * @param action\n * @param action.payload\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').setUserMapboxAccessTokenUpdater}\n * @public\n */\n\nexports.setExportDataUpdater = setExportDataUpdater;\nvar setUserMapboxAccessTokenUpdater = function setUserMapboxAccessTokenUpdater(state, _ref14) {\n  var userMapboxToken = _ref14.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    exportMap: _objectSpread(_objectSpread({}, state.exportMap), {}, (0, _defineProperty2[\"default\"])({}, _defaultSettings.EXPORT_MAP_FORMATS.HTML, _objectSpread(_objectSpread({}, state.exportMap[_defaultSettings.EXPORT_MAP_FORMATS.HTML]), {}, {\n      userMapboxToken: userMapboxToken\n    })))\n  });\n};\n/**\n * Sets the export map format\n * @param state - `uiState`\n * @param action\n * @param action.payload format to use to export the map into\n * @return nextState\n * @type {typeof import('./ui-state-updaters').setExportMapFormatUpdater}\n */\n\nexports.setUserMapboxAccessTokenUpdater = setUserMapboxAccessTokenUpdater;\nvar setExportMapFormatUpdater = function setExportMapFormatUpdater(state, _ref15) {\n  var format = _ref15.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    exportMap: _objectSpread(_objectSpread({}, state.exportMap), {}, {\n      format: format\n    })\n  });\n};\n/**\n * Set the export html map mode\n * @param state - `uiState`\n * @param action\n * @param action.payload to be set (available modes: EXPORT_HTML_MAP_MODES)\n * @return nextState\n * @type {typeof import('./ui-state-updaters').setExportMapHTMLModeUpdater}\n */\n\nexports.setExportMapFormatUpdater = setExportMapFormatUpdater;\nvar setExportMapHTMLModeUpdater = function setExportMapHTMLModeUpdater(state, _ref16) {\n  var mode = _ref16.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    exportMap: _objectSpread(_objectSpread({}, state.exportMap), {}, (0, _defineProperty2[\"default\"])({}, _defaultSettings.EXPORT_MAP_FORMATS.HTML, _objectSpread(_objectSpread({}, state.exportMap[_defaultSettings.EXPORT_MAP_FORMATS.HTML]), {}, {\n      mode: mode\n    })))\n  });\n};\n/**\n * Adds a new notification.\n * Updates a notification in case of matching ids.\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload Params of a notification\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').addNotificationUpdater}\n * @public\n */\n\nexports.setExportMapHTMLModeUpdater = setExportMapHTMLModeUpdater;\nvar addNotificationUpdater = function addNotificationUpdater(state, _ref17) {\n  var payload = _ref17.payload;\n  var notifications;\n  var payloadId = payload === null || payload === void 0 ? void 0 : payload.id;\n  var notificationToUpdate = payloadId ? state.notifications.find(function (n) {\n    return n.id === payloadId;\n  }) : null;\n  if (notificationToUpdate) {\n    notifications = state.notifications.map(function (n) {\n      return n.id === payloadId ? (0, _notificationsUtils.createNotification)(payload) : n;\n    });\n  } else {\n    notifications = [].concat((0, _toConsumableArray2[\"default\"])(state.notifications || []), [(0, _notificationsUtils.createNotification)(payload)]);\n  }\n  return _objectSpread(_objectSpread({}, state), {}, {\n    notifications: notifications\n  });\n};\n/**\n * Remove a notification\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload id of the notification to be removed\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').removeNotificationUpdater}\n * @public\n */\n\nexports.addNotificationUpdater = addNotificationUpdater;\nvar removeNotificationUpdater = function removeNotificationUpdater(state, _ref18) {\n  var id = _ref18.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    notifications: state.notifications.filter(function (n) {\n      return n.id !== id;\n    })\n  });\n};\n/**\n * Fired when file loading begin\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').loadFilesUpdater}\n * @public\n */\n\nexports.removeNotificationUpdater = removeNotificationUpdater;\nvar loadFilesUpdater = function loadFilesUpdater(state) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    loadFiles: _objectSpread(_objectSpread({}, state.loadFiles), {}, {\n      fileLoading: true\n    })\n  });\n};\n/**\n * Handles loading file success and set fileLoading property to false\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').loadFilesSuccessUpdater}\n */\n\nexports.loadFilesUpdater = loadFilesUpdater;\nvar loadFilesSuccessUpdater = function loadFilesSuccessUpdater(state) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    loadFiles: _objectSpread(_objectSpread({}, state.loadFiles), {}, {\n      fileLoading: false\n    })\n  });\n};\n/**\n * Handles load file error and set fileLoading property to false\n * @memberof uiStateUpdaters\n * @param state\n * @param action\n * @param action.error\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').loadFilesErrUpdater}\n * @public\n */\n\nexports.loadFilesSuccessUpdater = loadFilesSuccessUpdater;\nvar loadFilesErrUpdater = function loadFilesErrUpdater(state, _ref19) {\n  var error = _ref19.error;\n  return addNotificationUpdater(_objectSpread(_objectSpread({}, state), {}, {\n    loadFiles: _objectSpread(_objectSpread({}, state.loadFiles), {}, {\n      fileLoading: false\n    })\n  }), {\n    payload: (0, _notificationsUtils.errorNotification)({\n      message: (error || {}).message || 'Failed to upload files',\n      topic: _defaultSettings.DEFAULT_NOTIFICATION_TOPICS.global\n    })\n  });\n};\n/**\n * Handles toggle map split and reset all map control index to 0\n * @memberof uiStateUpdaters\n * @param state\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').toggleSplitMapUpdater}\n * @public\n */\n\nexports.loadFilesErrUpdater = loadFilesErrUpdater;\nvar toggleSplitMapUpdater = function toggleSplitMapUpdater(state) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    mapControls: Object.entries(state.mapControls).reduce(function (acc, entry) {\n      return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2[\"default\"])({}, entry[0], _objectSpread(_objectSpread({}, entry[1]), {}, {\n        activeMapIndex: 0\n      })));\n    }, {})\n  });\n};\n/**\n * Toggle modal data\n * @memberof uiStateUpdaters\n * @param state\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').showDatasetTableUpdater}\n * @public\n */\n\nexports.toggleSplitMapUpdater = toggleSplitMapUpdater;\nvar showDatasetTableUpdater = function showDatasetTableUpdater(state) {\n  return toggleModalUpdater(state, {\n    payload: _defaultSettings.DATA_TABLE_ID\n  });\n};\n/**\n * Set the locale of the UI\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload\n * @param action.payload.locale locale\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').setLocaleUpdater}\n * @public\n */\n\nexports.showDatasetTableUpdater = showDatasetTableUpdater;\nvar setLocaleUpdater = function setLocaleUpdater(state, _ref20) {\n  var locale = _ref20.payload.locale;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    locale: locale\n  });\n};\nexports.setLocaleUpdater = setLocaleUpdater;","map":{"version":3,"sources":["../../src/reducers/ui-state-updaters.js"],"names":["DEFAULT_ACTIVE_SIDE_PANEL","DEFAULT_MODAL","ADD_DATA_ID","uiStateUpdaters","DEFAULT_MAP_CONTROLS_FEATURES","show","active","disableClose","activeMapIndex","DEFAULT_MAP_CONTROLS","keys","MAP_CONTROLS","reduce","final","current","DEFAULT_EXPORT_IMAGE","ratio","EXPORT_IMG_RATIOS","SCREEN","resolution","RESOLUTIONS","ONE_X","legend","mapH","mapW","imageSize","zoomOffset","scale","imageW","imageH","center","imageDataUri","exporting","processing","error","DEFAULT_LOAD_FILES","fileLoading","DEFAULT_EXPORT_DATA","selectedDataset","dataType","EXPORT_DATA_TYPE","CSV","filtered","DEFAULT_NOTIFICATIONS","DEFAULT_EXPORT_HTML","exportMapboxAccessToken","userMapboxToken","mode","EXPORT_HTML_MAP_MODES","READ","DEFAULT_EXPORT_JSON","hasData","DEFAULT_EXPORT_MAP","EXPORT_MAP_FORMATS","HTML","JSON","INITIAL_UI_STATE","readOnly","activeSidePanel","currentModal","datasetKeyToRemove","visibleDropdown","exportImage","exportData","exportMap","mapControls","notifications","loadFiles","locale","LOCALE_CODES","en","initUiStateUpdater","state","action","payload","initialUiState","toggleSidePanelUpdater","id","toggleModalUpdater","showExportDropdownUpdater","hideExportDropdownUpdater","toggleMapControlUpdater","panelId","index","setMapControlVisibilityUpdater","Boolean","openDeleteModalUpdater","DELETE_DATA_ID","setExportImageSettingUpdater","newSetting","updated","setExportImageDataUriUpdater","dataUri","setExportImageErrorUpdater","cleanupExportImageUpdater","startExportingImageUpdater","options","imageSettings","setExportSelectedDatasetUpdater","dataset","setExportDataTypeUpdater","setExportFilteredUpdater","setExportDataUpdater","setUserMapboxAccessTokenUpdater","setExportMapFormatUpdater","format","setExportMapHTMLModeUpdater","addNotificationUpdater","payloadId","notificationToUpdate","find","n","map","removeNotificationUpdater","filter","loadFilesUpdater","loadFilesSuccessUpdater","loadFilesErrUpdater","message","topic","DEFAULT_NOTIFICATION_TOPICS","global","toggleSplitMapUpdater","entries","acc","entry","showDatasetTableUpdater","DATA_TABLE_ID","setLocaleUpdater"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// @ts-nocheck\nimport {\n  ADD_DATA_ID,\n  DATA_TABLE_ID,\n  DEFAULT_NOTIFICATION_TOPICS,\n  DELETE_DATA_ID,\n  EXPORT_DATA_TYPE,\n  EXPORT_HTML_MAP_MODES,\n  EXPORT_IMG_RATIOS,\n  EXPORT_MAP_FORMATS,\n  RESOLUTIONS,\n  MAP_CONTROLS\n} from 'constants/default-settings';\nimport {LOCALE_CODES} from 'localization/locales';\nimport {createNotification, errorNotification} from 'utils/notifications-utils';\nimport {calculateExportImageSize} from 'utils/export-utils';\nimport {payload_, apply_, compose_} from './composer-helpers';\n\nexport const DEFAULT_ACTIVE_SIDE_PANEL = 'layer';\nexport const DEFAULT_MODAL = ADD_DATA_ID;\n\n/**\n * Updaters for `uiState` reducer. Can be used in your root reducer to directly modify kepler.gl's state.\n * Read more about [Using updaters](../advanced-usage/using-updaters.md)\n *\n * @public\n * @example\n *\n * import keplerGlReducer, {uiStateUpdaters} from 'kepler.gl/reducers';\n * // Root Reducer\n * const reducers = combineReducers({\n *  keplerGl: keplerGlReducer,\n *  app: appReducer\n * });\n *\n * const composedReducer = (state, action) => {\n *  switch (action.type) {\n *    // click button to close side panel\n *    case 'CLICK_BUTTON':\n *      return {\n *        ...state,\n *        keplerGl: {\n *          ...state.keplerGl,\n *          foo: {\n *             ...state.keplerGl.foo,\n *             uiState: uiStateUpdaters.toggleSidePanelUpdater(\n *               uiState, {payload: null}\n *             )\n *          }\n *        }\n *      };\n *  }\n *  return reducers(state, action);\n * };\n *\n * export default composedReducer;\n */\n/* eslint-disable no-unused-vars */\nconst uiStateUpdaters = null;\n/* eslint-enable no-unused-vars */\n\nconst DEFAULT_MAP_CONTROLS_FEATURES = {\n  show: true,\n  active: false,\n  disableClose: false,\n  // defines which map index users are interacting with (through map controls)\n  activeMapIndex: 0\n};\n\n/**\n * A list of map control visibility and whether is it active.\n * @memberof uiStateUpdaters\n * @constant\n * @property visibleLayers Default: `{show: true, active: false}`\n * @property mapLegend Default: `{show: true, active: false}`\n * @property toggle3d Default: `{show: true}`\n * @property splitMap Default: `{show: true}`\n * @property mapDraw Default: `{show: true, active: false}`\n * @property mapLocale Default: `{show: false, active: false}`\n * @type {import('./ui-state-updaters').MapControls}\n * @public\n */\nexport const DEFAULT_MAP_CONTROLS = Object.keys(MAP_CONTROLS).reduce(\n  (final, current) => ({\n    ...final,\n    [current]: DEFAULT_MAP_CONTROLS_FEATURES\n  }),\n  {}\n);\n\n/**\n * Default image export config\n * @memberof uiStateUpdaters\n * @constant\n * @property ratio Default: `'SCREEN'`,\n * @property resolution Default: `'ONE_X'`,\n * @property legend Default: `false`,\n * @property mapH Default: 0,\n * @property mapW Default: 0,\n * @property imageSize Default: {zoomOffset: 0, scale: 1, imageW: 0, imageH: 0},\n * @property imageDataUri Default: `''`,\n * @property exporting Default: `false`\n * @property error Default: `false`\n * @type {import('./ui-state-updaters').ExportImage}\n * @public\n */\nexport const DEFAULT_EXPORT_IMAGE = {\n  // user options\n  ratio: EXPORT_IMG_RATIOS.SCREEN,\n  resolution: RESOLUTIONS.ONE_X,\n  legend: false,\n  mapH: 0,\n  mapW: 0,\n  imageSize: {\n    zoomOffset: 0,\n    scale: 1,\n    imageW: 0,\n    imageH: 0\n  },\n  // when this is set to true, the mock map viewport will move to the center of data\n  center: false,\n  // exporting state\n  imageDataUri: '',\n  // exporting: used to attach plot-container to dom\n  exporting: false,\n  // processing: used as loading indicator when export image is being produced\n  processing: false,\n  error: false\n};\n\nexport const DEFAULT_LOAD_FILES = {\n  fileLoading: false\n};\n\n/**\n * Default initial `exportData` settings\n * @memberof uiStateUpdaters\n * @constant\n * @property selectedDataset Default: `''`,\n * @property dataType Default: `'csv'`,\n * @property filtered Default: `true`,\n * @type {import('./ui-state-updaters').ExportData}\n * @public\n */\nexport const DEFAULT_EXPORT_DATA = {\n  selectedDataset: '',\n  dataType: EXPORT_DATA_TYPE.CSV,\n  filtered: true\n};\n\n/**\n * @constant\n */\nexport const DEFAULT_NOTIFICATIONS = [];\n\n/**\n * @constant\n * @property exportMapboxAccessToken - Default: null, this is used when we provide a default mapbox token for users to take advantage of\n * @property userMapboxToken - Default: '', mapbox token provided by user through input field\n * @property mode - Default: 'READ', read only or editable\n * @type {import('./ui-state-updaters').ExportHtml}\n * @public\n */\nexport const DEFAULT_EXPORT_HTML = {\n  exportMapboxAccessToken: null,\n  userMapboxToken: '',\n  mode: EXPORT_HTML_MAP_MODES.READ\n};\n\n/**\n * @constant\n * @property hasData - Default: 'true',\n * @type {import('./ui-state-updaters').ExportJson}\n * @public\n */\nexport const DEFAULT_EXPORT_JSON = {\n  hasData: true\n};\n\n/**\n * Export Map Config\n * @constant\n * @property HTML - Default: 'DEFAULT_EXPORT_HTML',\n * @property JSON - Default: 'DEFAULT_EXPORT_JSON',\n * @property format - Default: 'HTML',\n * @type {import('./ui-state-updaters').ExportMap}\n * @public\n */\nexport const DEFAULT_EXPORT_MAP = {\n  [EXPORT_MAP_FORMATS.HTML]: DEFAULT_EXPORT_HTML,\n  [EXPORT_MAP_FORMATS.JSON]: DEFAULT_EXPORT_JSON,\n  format: EXPORT_MAP_FORMATS.HTML\n};\n\n/**\n * Default initial `uiState`\n * @memberof uiStateUpdaters\n * @constant\n * @property readOnly Default: `false`\n * @property activeSidePanel Default: `'layer'`\n * @property currentModal Default: `'addData'`\n * @property datasetKeyToRemove Default: `null`\n * @property visibleDropdown Default: `null`\n * @property exportImage Default: [`DEFAULT_EXPORT_IMAGE`](#default_export_image)\n * @property exportData Default: [`DEFAULT_EXPORT_DATA`](#default_export_data)\n * @property exportMap Default: [`DEFAULT_EXPORT_MAP`](#default_export_map)\n * @property mapControls Default: [`DEFAULT_MAP_CONTROLS`](#default_map_controls)\n * @property notifications Default: `[]`\n * @property notifications Default: `[]`\n * @property loadFiles\n * @type {import('./ui-state-updaters').UiState}\n * @public\n */\nexport const INITIAL_UI_STATE = {\n  readOnly: false,\n  activeSidePanel: DEFAULT_ACTIVE_SIDE_PANEL,\n  currentModal: DEFAULT_MODAL,\n  datasetKeyToRemove: null,\n  visibleDropdown: null,\n  // export image modal ui\n  exportImage: DEFAULT_EXPORT_IMAGE,\n  // export data modal ui\n  exportData: DEFAULT_EXPORT_DATA,\n  // html export\n  exportMap: DEFAULT_EXPORT_MAP,\n  // map control panels\n  mapControls: DEFAULT_MAP_CONTROLS,\n  // ui notifications\n  notifications: DEFAULT_NOTIFICATIONS,\n  // load files\n  loadFiles: DEFAULT_LOAD_FILES,\n  // Locale of the UI\n  locale: LOCALE_CODES.en\n};\n\n/* Updaters */\n/**\n * @memberof uiStateUpdaters\n\n */\nexport const initUiStateUpdater = (state, action) => ({\n  ...state,\n  ...(action.payload || {}).initialUiState\n});\n\n/**\n * Toggle active side panel\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload id of side panel to be shown, one of `layer`, `filter`, `interaction`, `map`. close side panel if `null`\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').toggleSidePanelUpdater}\n * @public\n */\nexport const toggleSidePanelUpdater = (state, {payload: id}) => {\n  return id === state.activeSidePanel\n    ? state\n    : {\n        ...state,\n        activeSidePanel: id\n      };\n};\n\n/**\n * Show and hide modal dialog\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @paramaction.payload id of modal to be shown, null to hide modals. One of:\n *  - [`DATA_TABLE_ID`](../constants/default-settings.md#data_table_id)\n *  - [`DELETE_DATA_ID`](../constants/default-settings.md#delete_data_id)\n *  - [`ADD_DATA_ID`](../constants/default-settings.md#add_data_id)\n *  - [`EXPORT_IMAGE_ID`](../constants/default-settings.md#export_image_id)\n *  - [`EXPORT_DATA_ID`](../constants/default-settings.md#export_data_id)\n *  - [`ADD_MAP_STYLE_ID`](../constants/default-settings.md#add_map_style_id)\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').toggleModalUpdater}\n * @public\n */\nexport const toggleModalUpdater = (state, {payload: id}) => ({\n  ...state,\n  currentModal: id\n});\n\n/**\n * Hide and show side panel header dropdown, activated by clicking the share link on top of the side panel\n * @memberof uiStateUpdaters\n * @type {typeof import('./ui-state-updaters').showExportDropdownUpdater}\n * @public\n */\nexport const showExportDropdownUpdater = (state, {payload: id}) => ({\n  ...state,\n  visibleDropdown: id\n});\n\n/**\n * Hide side panel header dropdown, activated by clicking the share link on top of the side panel\n * @memberof uiStateUpdaters\n * @type {typeof import('./ui-state-updaters').hideExportDropdownUpdater}\n * @public\n */\nexport const hideExportDropdownUpdater = state => ({\n  ...state,\n  visibleDropdown: null\n});\n\n/**\n * Toggle active map control panel\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action action\n * @param action.payload map control panel id, one of the keys of: [`DEFAULT_MAP_CONTROLS`](#default_map_controls)\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').toggleMapControlUpdater}\n * @public\n */\nexport const toggleMapControlUpdater = (state, {payload: {panelId, index = 0}}) => ({\n  ...state,\n  mapControls: {\n    ...state.mapControls,\n    [panelId]: {\n      ...state.mapControls[panelId],\n      // this handles split map interaction\n      // Toggling from within the same map will simply toggle the active property\n      // Toggling from within different maps we set the active property to true\n      active:\n        index === state.mapControls[panelId].activeMapIndex\n          ? !state.mapControls[panelId].active\n          : true,\n      activeMapIndex: index\n    }\n  }\n});\n\n/**\n * Toggle map control visibility\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action action\n * @param action.payload map control panel id, one of the keys of: [`DEFAULT_MAP_CONTROLS`](#default_map_controls)\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').setMapControlVisibilityUpdater}\n * @public\n */\nexport const setMapControlVisibilityUpdater = (state, {payload: {panelId, show}}) => {\n  if (!state.mapControls?.[panelId]) {\n    return state;\n  }\n\n  return {\n    ...state,\n    mapControls: {\n      ...state.mapControls,\n      [panelId]: {\n        ...state.mapControls[panelId],\n        show: Boolean(show)\n      }\n    }\n  };\n};\n\n/**\n * Toggle active map control panel\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload dataset id\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').openDeleteModalUpdater}\n * @public\n */\nexport const openDeleteModalUpdater = (state, {payload: datasetKeyToRemove}) => ({\n  ...state,\n  currentModal: DELETE_DATA_ID,\n  datasetKeyToRemove\n});\n\n/**\n * Set `exportImage.legend` to `true` or `false`\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').setExportImageSettingUpdater}\n * @public\n */\nexport const setExportImageSettingUpdater = (state, {payload: newSetting}) => {\n  const updated = {...state.exportImage, ...newSetting};\n  const imageSize = calculateExportImageSize(updated) || state.exportImage.imageSize;\n\n  return {\n    ...state,\n    exportImage: {\n      ...updated,\n      imageSize\n    }\n  };\n};\n\n/**\n * Set `exportImage.setExportImageDataUri` to a image dataUri\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload export image data uri\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').setExportImageDataUriUpdater}\n * @public\n */\nexport const setExportImageDataUriUpdater = (state, {payload: dataUri}) => ({\n  ...state,\n  exportImage: {\n    ...state.exportImage,\n    processing: false,\n    imageDataUri: dataUri\n  }\n});\n\n/**\n * @memberof uiStateUpdaters\n * @type {typeof import('./ui-state-updaters').setExportImageErrorUpdater}\n * @public\n */\nexport const setExportImageErrorUpdater = (state, {payload: error}) => ({\n  ...state,\n  exportImage: {\n    ...state.exportImage,\n    processing: false,\n    error\n  }\n});\n\n/**\n * Delete cached export image\n * @memberof uiStateUpdaters\n * @type {typeof import('./ui-state-updaters').cleanupExportImageUpdater}\n * @public\n */\nexport const cleanupExportImageUpdater = state => ({\n  ...state,\n  exportImage: {\n    ...state.exportImage,\n    exporting: false,\n    imageDataUri: '',\n    error: false,\n    processing: false,\n    center: false\n  }\n});\n\n/**\n * Start image exporting flow\n * @memberof uiStateUpdaters\n * @param state\n * @param options\n * @returns {UiState}\n * @type {typeof import('./ui-state-updaters').startExportingImage}\n * @public\n */\nexport const startExportingImageUpdater = (state, {payload: options = {}}) => {\n  const imageSettings = {\n    ...options,\n    exporting: true\n  };\n\n  return compose_([\n    cleanupExportImageUpdater,\n    apply_(setExportImageSettingUpdater, payload_(imageSettings))\n  ])(state);\n};\n\n/**\n * Set selected dataset for export\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload dataset id\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').setExportSelectedDatasetUpdater}\n * @public\n */\nexport const setExportSelectedDatasetUpdater = (state, {payload: dataset}) => ({\n  ...state,\n  exportData: {\n    ...state.exportData,\n    selectedDataset: dataset\n  }\n});\n\n/**\n * Set data format for exporting data\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload one of `'text/csv'`\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').setExportDataTypeUpdater}\n * @public\n */\nexport const setExportDataTypeUpdater = (state, {payload: dataType}) => ({\n  ...state,\n  exportData: {\n    ...state.exportData,\n    dataType\n  }\n});\n\n/**\n * Whether to export filtered data, `true` or `false`\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').setExportFilteredUpdater}\n * @public\n */\nexport const setExportFilteredUpdater = (state, {payload: filtered}) => ({\n  ...state,\n  exportData: {\n    ...state.exportData,\n    filtered\n  }\n});\n\n/**\n * Whether to including data in map config, toggle between `true` or `false`\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').setExportDataUpdater}\n * @public\n */\nexport const setExportDataUpdater = state => ({\n  ...state,\n  exportMap: {\n    ...state.exportMap,\n    [EXPORT_MAP_FORMATS.JSON]: {\n      ...state.exportMap[EXPORT_MAP_FORMATS.JSON],\n      hasData: !state.exportMap[EXPORT_MAP_FORMATS.JSON].hasData\n    }\n  }\n});\n\n/**\n * whether to export a mapbox access to HTML single page\n * @param state - `uiState`\n * @param action\n * @param action.payload\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').setUserMapboxAccessTokenUpdater}\n * @public\n */\nexport const setUserMapboxAccessTokenUpdater = (state, {payload: userMapboxToken}) => ({\n  ...state,\n  exportMap: {\n    ...state.exportMap,\n    [EXPORT_MAP_FORMATS.HTML]: {\n      ...state.exportMap[EXPORT_MAP_FORMATS.HTML],\n      userMapboxToken\n    }\n  }\n});\n\n/**\n * Sets the export map format\n * @param state - `uiState`\n * @param action\n * @param action.payload format to use to export the map into\n * @return nextState\n * @type {typeof import('./ui-state-updaters').setExportMapFormatUpdater}\n */\nexport const setExportMapFormatUpdater = (state, {payload: format}) => ({\n  ...state,\n  exportMap: {\n    ...state.exportMap,\n    format\n  }\n});\n\n/**\n * Set the export html map mode\n * @param state - `uiState`\n * @param action\n * @param action.payload to be set (available modes: EXPORT_HTML_MAP_MODES)\n * @return nextState\n * @type {typeof import('./ui-state-updaters').setExportMapHTMLModeUpdater}\n */\nexport const setExportMapHTMLModeUpdater = (state, {payload: mode}) => ({\n  ...state,\n  exportMap: {\n    ...state.exportMap,\n    [EXPORT_MAP_FORMATS.HTML]: {\n      ...state.exportMap[EXPORT_MAP_FORMATS.HTML],\n      mode\n    }\n  }\n});\n\n/**\n * Adds a new notification.\n * Updates a notification in case of matching ids.\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload Params of a notification\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').addNotificationUpdater}\n * @public\n */\nexport const addNotificationUpdater = (state, {payload}) => {\n  let notifications;\n\n  const payloadId = payload?.id;\n  const notificationToUpdate = payloadId ? state.notifications.find(n => n.id === payloadId) : null;\n  if (notificationToUpdate) {\n    notifications = state.notifications.map(n =>\n      n.id === payloadId ? createNotification(payload) : n\n    );\n  } else {\n    notifications = [...(state.notifications || []), createNotification(payload)];\n  }\n\n  return {...state, notifications};\n};\n\n/**\n * Remove a notification\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload id of the notification to be removed\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').removeNotificationUpdater}\n * @public\n */\nexport const removeNotificationUpdater = (state, {payload: id}) => ({\n  ...state,\n  notifications: state.notifications.filter(n => n.id !== id)\n});\n\n/**\n * Fired when file loading begin\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').loadFilesUpdater}\n * @public\n */\nexport const loadFilesUpdater = state => ({\n  ...state,\n  loadFiles: {\n    ...state.loadFiles,\n    fileLoading: true\n  }\n});\n\n/**\n * Handles loading file success and set fileLoading property to false\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').loadFilesSuccessUpdater}\n */\nexport const loadFilesSuccessUpdater = state => ({\n  ...state,\n  loadFiles: {\n    ...state.loadFiles,\n    fileLoading: false\n  }\n});\n\n/**\n * Handles load file error and set fileLoading property to false\n * @memberof uiStateUpdaters\n * @param state\n * @param action\n * @param action.error\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').loadFilesErrUpdater}\n * @public\n */\nexport const loadFilesErrUpdater = (state, {error}) =>\n  addNotificationUpdater(\n    {\n      ...state,\n      loadFiles: {\n        ...state.loadFiles,\n        fileLoading: false\n      }\n    },\n    {\n      payload: errorNotification({\n        message: (error || {}).message || 'Failed to upload files',\n        topic: DEFAULT_NOTIFICATION_TOPICS.global\n      })\n    }\n  );\n\n/**\n * Handles toggle map split and reset all map control index to 0\n * @memberof uiStateUpdaters\n * @param state\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').toggleSplitMapUpdater}\n * @public\n */\nexport const toggleSplitMapUpdater = state => ({\n  ...state,\n  mapControls: Object.entries(state.mapControls).reduce(\n    (acc, entry) => ({\n      ...acc,\n      [entry[0]]: {\n        ...entry[1],\n        activeMapIndex: 0\n      }\n    }),\n    {}\n  )\n});\n\n/**\n * Toggle modal data\n * @memberof uiStateUpdaters\n * @param state\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').showDatasetTableUpdater}\n * @public\n */\nexport const showDatasetTableUpdater = state => toggleModalUpdater(state, {payload: DATA_TABLE_ID});\n\n/**\n * Set the locale of the UI\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload\n * @param action.payload.locale locale\n * @returns nextState\n * @type {typeof import('./ui-state-updaters').setLocaleUpdater}\n * @public\n */\nexport const setLocaleUpdater = (state, {payload: {locale}}) => ({\n  ...state,\n  locale\n});\n"]},"metadata":{},"sourceType":"script"}