{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMapDimForSplitMap = getMapDimForSplitMap;\nexports.toggleSplitMapUpdater = exports.receiveMapConfigUpdater = exports.resetMapConfigUpdater = exports.togglePerspectiveUpdater = exports.fitBoundsUpdater = exports.updateMapUpdater = exports.INITIAL_MAP_STATE = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _projectionUtils = require(\"../utils/projection-utils\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\n\n/** @typedef {import('./map-state-updaters').MapState} MapState */\n\n/**\n * Updaters for `mapState` reducer. Can be used in your root reducer to directly modify kepler.gl's state.\n * Read more about [Using updaters](../advanced-usage/using-updaters.md)\n * @public\n * @example\n *\n * import keplerGlReducer, {mapStateUpdaters} from 'kepler.gl/reducers';\n * // Root Reducer\n * const reducers = combineReducers({\n *  keplerGl: keplerGlReducer,\n *  app: appReducer\n * });\n *\n * const composedReducer = (state, action) => {\n *  switch (action.type) {\n *    // click button to close side panel\n *    case 'CLICK_BUTTON':\n *      return {\n *        ...state,\n *        keplerGl: {\n *          ...state.keplerGl,\n *          foo: {\n *             ...state.keplerGl.foo,\n *             mapState: mapStateUpdaters.fitBoundsUpdater(\n *               mapState, {payload: [127.34, 31.09, 127.56, 31.59]]}\n *             )\n *          }\n *        }\n *      };\n *  }\n *  return reducers(state, action);\n * };\n *\n * export default composedReducer;\n */\n\n/* eslint-disable no-unused-vars */\n// @ts-ignore\nvar mapStateUpdaters = null;\n/* eslint-enable no-unused-vars */\n\n/**\n * Default initial `mapState`\n * @memberof mapStateUpdaters\n * @constant\n * @property pitch Default: `0`\n * @property bearing Default: `0`\n * @property latitude Default: `37.75043`\n * @property longitude Default: `-122.34679`\n * @property zoom Default: `9`\n * @property dragRotate Default: `false`\n * @property width Default: `800`\n * @property height Default: `800`\n * @property isSplit Default: `false`\n * @type {MapState}\n * @public\n */\n\nvar INITIAL_MAP_STATE = {\n  pitch: 0,\n  bearing: 0,\n  latitude: 37.75043,\n  longitude: -122.34679,\n  zoom: 9,\n  dragRotate: false,\n  width: 800,\n  height: 800,\n  isSplit: false\n};\n/* Updaters */\n\n/**\n * Update map viewport\n * @memberof mapStateUpdaters\n * @type {typeof import('./map-state-updaters').updateMapUpdater}\n * @public\n */\n\nexports.INITIAL_MAP_STATE = INITIAL_MAP_STATE;\nvar updateMapUpdater = function updateMapUpdater(state, action) {\n  return _objectSpread(_objectSpread({}, state), action.payload || {});\n};\n/**\n * Fit map viewport to bounds\n * @memberof mapStateUpdaters\n * @type {typeof import('./map-state-updaters').fitBoundsUpdater}\n * @public\n */\n\nexports.updateMapUpdater = updateMapUpdater;\nvar fitBoundsUpdater = function fitBoundsUpdater(state, action) {\n  var centerAndZoom = (0, _projectionUtils.getCenterAndZoomFromBounds)(action.payload, {\n    width: state.width,\n    height: state.height\n  });\n  if (!centerAndZoom) {\n    // bounds is invalid\n    return state;\n  }\n  return _objectSpread(_objectSpread({}, state), {}, {\n    latitude: centerAndZoom.center[1],\n    longitude: centerAndZoom.center[0]\n  }, Number.isFinite(centerAndZoom.zoom) ? {\n    zoom: centerAndZoom.zoom\n  } : {});\n};\n/**\n * Toggle between 3d and 2d map.\n * @memberof mapStateUpdaters\n * @type {typeof import('./map-state-updaters').togglePerspectiveUpdater}\n * @public\n */\n\nexports.fitBoundsUpdater = fitBoundsUpdater;\nvar togglePerspectiveUpdater = function togglePerspectiveUpdater(state) {\n  return _objectSpread(_objectSpread(_objectSpread({}, state), {\n    pitch: state.dragRotate ? 0 : 50,\n    bearing: state.dragRotate ? 0 : 24\n  }), {}, {\n    dragRotate: !state.dragRotate\n  });\n};\n/**\n * reset mapState to initial State\n * @memberof mapStateUpdaters\n * @type {typeof import('./map-state-updaters').resetMapConfigUpdater}\n * @public\n */\n\nexports.togglePerspectiveUpdater = togglePerspectiveUpdater;\nvar resetMapConfigUpdater = function resetMapConfigUpdater(state) {\n  return _objectSpread(_objectSpread(_objectSpread({}, INITIAL_MAP_STATE), state.initialState), {}, {\n    initialState: state.initialState\n  });\n}; // consider case where you have a split map and user wants to reset\n\n/**\n * Update `mapState` to propagate a new config\n * @memberof mapStateUpdaters\n * @type {typeof import('./map-state-updaters').receiveMapConfigUpdater}\n * @public\n */\n\nexports.resetMapConfigUpdater = resetMapConfigUpdater;\nvar receiveMapConfigUpdater = function receiveMapConfigUpdater(state, _ref) {\n  var _ref$payload = _ref.payload,\n    _ref$payload$config = _ref$payload.config,\n    config = _ref$payload$config === void 0 ? {} : _ref$payload$config,\n    _ref$payload$options = _ref$payload.options,\n    options = _ref$payload$options === void 0 ? {} : _ref$payload$options,\n    _ref$payload$bounds = _ref$payload.bounds,\n    bounds = _ref$payload$bounds === void 0 ? null : _ref$payload$bounds;\n  var _ref2 = config || {},\n    mapState = _ref2.mapState; // merged received mapstate with previous state\n\n  var mergedState = _objectSpread(_objectSpread({}, state), mapState); // if center map\n  // center map will override mapState config\n\n  if (options.centerMap && bounds) {\n    mergedState = fitBoundsUpdater(mergedState, {\n      payload: bounds\n    });\n  }\n  return _objectSpread(_objectSpread({}, mergedState), getMapDimForSplitMap(mergedState.isSplit, state));\n};\n/**\n * Toggle between one or split maps\n * @memberof mapStateUpdaters\n * @type {typeof import('./map-state-updaters').toggleSplitMapUpdater}\n * @public\n */\n\nexports.receiveMapConfigUpdater = receiveMapConfigUpdater;\nvar toggleSplitMapUpdater = function toggleSplitMapUpdater(state) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    isSplit: !state.isSplit\n  }, getMapDimForSplitMap(!state.isSplit, state));\n}; // Helpers\n\nexports.toggleSplitMapUpdater = toggleSplitMapUpdater;\nfunction getMapDimForSplitMap(isSplit, state) {\n  // cases:\n  // 1. state split: true - isSplit: true\n  // do nothing\n  // 2. state split: false - isSplit: false\n  // do nothing\n  if (state.isSplit === isSplit) {\n    return {};\n  }\n  var width = state.isSplit && !isSplit ?\n  // 3. state split: true - isSplit: false\n  // double width\n  state.width * 2 :\n  // 4. state split: false - isSplit: true\n  // split width\n  state.width / 2;\n  return {\n    width: width\n  };\n}","map":{"version":3,"sources":["../../src/reducers/map-state-updaters.js"],"names":["mapStateUpdaters","INITIAL_MAP_STATE","pitch","bearing","latitude","longitude","zoom","dragRotate","width","height","isSplit","updateMapUpdater","state","action","payload","fitBoundsUpdater","centerAndZoom","center","isFinite","togglePerspectiveUpdater","resetMapConfigUpdater","initialState","receiveMapConfigUpdater","config","options","bounds","mapState","mergedState","centerMap","getMapDimForSplitMap","toggleSplitMapUpdater"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {getCenterAndZoomFromBounds} from 'utils/projection-utils';\n\n/** @typedef {import('./map-state-updaters').MapState} MapState */\n\n/**\n * Updaters for `mapState` reducer. Can be used in your root reducer to directly modify kepler.gl's state.\n * Read more about [Using updaters](../advanced-usage/using-updaters.md)\n * @public\n * @example\n *\n * import keplerGlReducer, {mapStateUpdaters} from 'kepler.gl/reducers';\n * // Root Reducer\n * const reducers = combineReducers({\n *  keplerGl: keplerGlReducer,\n *  app: appReducer\n * });\n *\n * const composedReducer = (state, action) => {\n *  switch (action.type) {\n *    // click button to close side panel\n *    case 'CLICK_BUTTON':\n *      return {\n *        ...state,\n *        keplerGl: {\n *          ...state.keplerGl,\n *          foo: {\n *             ...state.keplerGl.foo,\n *             mapState: mapStateUpdaters.fitBoundsUpdater(\n *               mapState, {payload: [127.34, 31.09, 127.56, 31.59]]}\n *             )\n *          }\n *        }\n *      };\n *  }\n *  return reducers(state, action);\n * };\n *\n * export default composedReducer;\n */\n/* eslint-disable no-unused-vars */\n// @ts-ignore\nconst mapStateUpdaters = null;\n/* eslint-enable no-unused-vars */\n\n/**\n * Default initial `mapState`\n * @memberof mapStateUpdaters\n * @constant\n * @property pitch Default: `0`\n * @property bearing Default: `0`\n * @property latitude Default: `37.75043`\n * @property longitude Default: `-122.34679`\n * @property zoom Default: `9`\n * @property dragRotate Default: `false`\n * @property width Default: `800`\n * @property height Default: `800`\n * @property isSplit Default: `false`\n * @type {MapState}\n * @public\n */\nexport const INITIAL_MAP_STATE = {\n  pitch: 0,\n  bearing: 0,\n  latitude: 37.75043,\n  longitude: -122.34679,\n  zoom: 9,\n  dragRotate: false,\n  width: 800,\n  height: 800,\n  isSplit: false\n};\n\n/* Updaters */\n/**\n * Update map viewport\n * @memberof mapStateUpdaters\n * @type {typeof import('./map-state-updaters').updateMapUpdater}\n * @public\n */\nexport const updateMapUpdater = (state, action) => ({\n  ...state,\n  ...(action.payload || {})\n});\n\n/**\n * Fit map viewport to bounds\n * @memberof mapStateUpdaters\n * @type {typeof import('./map-state-updaters').fitBoundsUpdater}\n * @public\n */\nexport const fitBoundsUpdater = (state, action) => {\n  const centerAndZoom = getCenterAndZoomFromBounds(action.payload, {\n    width: state.width,\n    height: state.height\n  });\n  if (!centerAndZoom) {\n    // bounds is invalid\n    return state;\n  }\n\n  return {\n    ...state,\n    latitude: centerAndZoom.center[1],\n    longitude: centerAndZoom.center[0],\n    // For marginal or invalid bounds, zoom may be NaN. Make sure to provide a valid value in order\n    // to avoid corrupt state and potential crashes as zoom is expected to be a number\n    ...(Number.isFinite(centerAndZoom.zoom) ? {zoom: centerAndZoom.zoom} : {})\n  };\n};\n\n/**\n * Toggle between 3d and 2d map.\n * @memberof mapStateUpdaters\n * @type {typeof import('./map-state-updaters').togglePerspectiveUpdater}\n * @public\n */\nexport const togglePerspectiveUpdater = state => ({\n  ...state,\n  ...{\n    pitch: state.dragRotate ? 0 : 50,\n    bearing: state.dragRotate ? 0 : 24\n  },\n  dragRotate: !state.dragRotate\n});\n\n/**\n * reset mapState to initial State\n * @memberof mapStateUpdaters\n * @type {typeof import('./map-state-updaters').resetMapConfigUpdater}\n * @public\n */\nexport const resetMapConfigUpdater = state => ({\n  ...INITIAL_MAP_STATE,\n  ...state.initialState,\n  initialState: state.initialState\n});\n\n// consider case where you have a split map and user wants to reset\n/**\n * Update `mapState` to propagate a new config\n * @memberof mapStateUpdaters\n * @type {typeof import('./map-state-updaters').receiveMapConfigUpdater}\n * @public\n */\nexport const receiveMapConfigUpdater = (\n  state,\n  {payload: {config = {}, options = {}, bounds = null}}\n) => {\n  const {mapState} = config || {};\n\n  // merged received mapstate with previous state\n  let mergedState = {...state, ...mapState};\n\n  // if center map\n  // center map will override mapState config\n  if (options.centerMap && bounds) {\n    mergedState = fitBoundsUpdater(mergedState, {\n      payload: bounds\n    });\n  }\n\n  return {\n    ...mergedState,\n    // update width if `isSplit` has changed\n    ...getMapDimForSplitMap(mergedState.isSplit, state)\n  };\n};\n\n/**\n * Toggle between one or split maps\n * @memberof mapStateUpdaters\n * @type {typeof import('./map-state-updaters').toggleSplitMapUpdater}\n * @public\n */\nexport const toggleSplitMapUpdater = state => ({\n  ...state,\n  isSplit: !state.isSplit,\n  ...getMapDimForSplitMap(!state.isSplit, state)\n});\n\n// Helpers\nexport function getMapDimForSplitMap(isSplit, state) {\n  // cases:\n  // 1. state split: true - isSplit: true\n  // do nothing\n  // 2. state split: false - isSplit: false\n  // do nothing\n  if (state.isSplit === isSplit) {\n    return {};\n  }\n\n  const width =\n    state.isSplit && !isSplit\n      ? // 3. state split: true - isSplit: false\n        // double width\n        state.width * 2\n      : // 4. state split: false - isSplit: true\n        // split width\n        state.width / 2;\n\n  return {\n    width\n  };\n}\n"]},"metadata":{},"sourceType":"script"}