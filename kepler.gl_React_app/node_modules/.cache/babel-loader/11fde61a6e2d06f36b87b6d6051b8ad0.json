{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { resolvePath } from '@loaders.gl/loader-utils';\nimport { makeResponse } from '../utils/response-utils';\nimport { getErrorMessageFromResponse } from './fetch-error-message';\nexport function fetchFile(_x) {\n  return _fetchFile.apply(this, arguments);\n}\nfunction _fetchFile() {\n  _fetchFile = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(url) {\n    var options,\n      response,\n      _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            if (!(typeof url !== 'string')) {\n              _context.next = 5;\n              break;\n            }\n            _context.next = 4;\n            return makeResponse(url);\n          case 4:\n            return _context.abrupt(\"return\", _context.sent);\n          case 5:\n            url = resolvePath(url);\n            _context.next = 8;\n            return fetch(url, options);\n          case 8:\n            response = _context.sent;\n            if (!(!response.ok && options[\"throws\"])) {\n              _context.next = 15;\n              break;\n            }\n            _context.t0 = Error;\n            _context.next = 13;\n            return getErrorMessageFromResponse(response);\n          case 13:\n            _context.t1 = _context.sent;\n            throw new _context.t0(_context.t1);\n          case 15:\n            return _context.abrupt(\"return\", response);\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchFile.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/fetch/fetch-file.js"],"names":["resolvePath","makeResponse","getErrorMessageFromResponse","fetchFile","url","options","response","fetch","ok","Error"],"mappings":";;AACA,SAAQA,WAAR,QAA0B,0BAA1B;AACA,SAAQC,YAAR,QAA2B,yBAA3B;AACA,SAAQC,2BAAR,QAA0C,uBAA1C;AAOA,OAAA,SAAsBC,SAAtB,CAAA,EAAA,EAAA;EAAA,OAAA,UAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;0DAAO,SAAA,OAAA,CAAyBC,GAAzB,EAAA;IAAA,IAAA,OAAA;MAAA,QAAA;MAAA,KAAA,GAAA,SAAA;IAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YAA8BC,OAA9B,GAAA,KAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,KAAA,CAAA,CAAA,CAAA,GAAwC,CAAA,CAAxC;YAAA,IAAA,EACD,OAAOD,GAAP,KAAe,QADd,CAAA,EAAA;cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;cAAA;YAAA;YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OAEUH,YAAY,CAACG,GAAD,CAFtB;UAAA,KAAA,CAAA;YAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,QAAA,CAAA,IAAA,CAAA;UAAA,KAAA,CAAA;YAKLA,GAAG,GAAGJ,WAAW,CAACI,GAAD,CAAjBA;YALK,QAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OAOkBG,KAAK,CAACH,GAAD,EAAMC,OAAN,CAPvB;UAAA,KAAA,CAAA;YAOCC,QAPD,GAAA,QAAA,CAAA,IAAA;YAAA,IAAA,EAQD,CAACA,QAAQ,CAACE,EAAV,IAAgBH,OAAO,CAAA,QAAA,CARtB,CAAA,EAAA;cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;YAAA,QAAA,CAAA,EAAA,GASOI,KATP;YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;YAAA,OASmBP,2BAA2B,CAACI,QAAD,CAT9C;UAAA,KAAA,EAAA;YAAA,QAAA,CAAA,EAAA,GAAA,QAAA,CAAA,IAAA;YAAA,MAAA,IAAA,QAAA,CAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA;UAAA,KAAA,EAAA;YAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAYEA,QAZF,CAAA;UAAA,KAAA,EAAA;UAAA,KAAA,KAAA;YAAA,OAAA,QAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,OAAA,CAAA;EAAA,C","sourcesContent":["/* global fetch */\nimport {resolvePath} from '@loaders.gl/loader-utils';\nimport {makeResponse} from '../utils/response-utils';\nimport {getErrorMessageFromResponse} from './fetch-error-message';\n\n// As fetch but respects pathPrefix and file aliases\n// Reads file data from:\n// * data urls\n// * http/http urls\n// * File/Blob objects\nexport async function fetchFile(url, options = {}) {\n  if (typeof url !== 'string') {\n    return await makeResponse(url);\n  }\n\n  url = resolvePath(url);\n\n  const response = await fetch(url, options);\n  if (!response.ok && options.throws) {\n    throw new Error(await getErrorMessageFromResponse(response));\n  }\n\n  return response;\n}\n"]},"metadata":{},"sourceType":"module"}