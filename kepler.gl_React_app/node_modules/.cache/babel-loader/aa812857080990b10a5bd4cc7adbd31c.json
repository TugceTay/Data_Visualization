{"ast":null,"code":"/**\n * This file contains overrides the default\n * hammer.js functions to add our own utility\n */\n/* eslint-disable */\n/* Hammer.js constants */\nconst INPUT_START = 1;\nconst INPUT_MOVE = 2;\nconst INPUT_END = 4;\nconst MOUSE_INPUT_MAP = {\n  mousedown: INPUT_START,\n  mousemove: INPUT_MOVE,\n  mouseup: INPUT_END\n};\n/**\n * Helper function that returns true if any element in an array meets given criteria.\n * Because older browsers do not support `Array.prototype.some`\n * @params array {Array}\n * @params predict {Function}\n */\nfunction some(array, predict) {\n  for (let i = 0; i < array.length; i++) {\n    if (predict(array[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n/* eslint-disable no-invalid-this */\nexport function enhancePointerEventInput(PointerEventInput) {\n  const oldHandler = PointerEventInput.prototype.handler;\n  // overrides PointerEventInput.handler to accept right mouse button\n  PointerEventInput.prototype.handler = function handler(ev) {\n    const store = this.store;\n    // Allow non-left mouse buttons through\n    if (ev.button > 0 && ev.type === 'pointerdown') {\n      if (!some(store, e => e.pointerId === ev.pointerId)) {\n        store.push(ev);\n      }\n    }\n    oldHandler.call(this, ev);\n  };\n}\n// overrides MouseInput.handler to accept right mouse button\nexport function enhanceMouseInput(MouseInput) {\n  MouseInput.prototype.handler = function handler(ev) {\n    let eventType = MOUSE_INPUT_MAP[ev.type];\n    // on start we want to have the mouse button down\n    if (eventType & INPUT_START && ev.button >= 0) {\n      this.pressed = true;\n    }\n    if (eventType & INPUT_MOVE && ev.which === 0) {\n      eventType = INPUT_END;\n    }\n    // mouse must be down\n    if (!this.pressed) {\n      return;\n    }\n    if (eventType & INPUT_END) {\n      this.pressed = false;\n    }\n    this.callback(this.manager, eventType, {\n      pointers: [ev],\n      changedPointers: [ev],\n      pointerType: 'mouse',\n      srcEvent: ev\n    });\n  };\n}","map":{"version":3,"sources":["../../../src/utils/hammer-overrides.ts"],"names":[],"mappings":"AAAA;;;AAGG;AACH;AAEA;AACA,MAAM,WAAW,GAAG,CAAC;AACrB,MAAM,UAAU,GAAG,CAAC;AACpB,MAAM,SAAS,GAAG,CAAC;AACnB,MAAM,eAAe,GAAG;EACtB,SAAS,EAAE,WAAW;EACtB,SAAS,EAAE,UAAU;EACrB,OAAO,EAAE;CACV;AAED;;;;;AAKG;AACH,SAAS,IAAI,CAAC,KAAK,EAAE,OAAO,EAAA;EAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACrC,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;MACrB,OAAO,IAAI;IACZ;EACF;EACD,OAAO,KAAK;AACd;AAEA;AACA,OAAM,SAAU,wBAAwB,CAAC,iBAAiB,EAAA;EACxD,MAAM,UAAU,GAAG,iBAAiB,CAAC,SAAS,CAAC,OAAO;EAEtD;EACA,iBAAiB,CAAC,SAAS,CAAC,OAAO,GAAG,SAAS,OAAO,CAAC,EAAE,EAAA;IACvD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK;IAExB;IACA,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,aAAa,EAAE;MAC9C,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,SAAS,KAAK,EAAE,CAAC,SAAS,CAAC,EAAE;QACnD,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;MACf;IACF;IAED,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC;EAC3B,CAAC;AACH;AAEA;AACA,OAAM,SAAU,iBAAiB,CAAC,UAAU,EAAA;EAC1C,UAAU,CAAC,SAAS,CAAC,OAAO,GAAG,SAAS,OAAO,CAAC,EAAE,EAAA;IAChD,IAAI,SAAS,GAAG,eAAe,CAAC,EAAE,CAAC,IAAI,CAAC;IAExC;IACA,IAAI,SAAS,GAAG,WAAW,IAAI,EAAE,CAAC,MAAM,IAAI,CAAC,EAAE;MAC7C,IAAI,CAAC,OAAO,GAAG,IAAI;IACpB;IAED,IAAI,SAAS,GAAG,UAAU,IAAI,EAAE,CAAC,KAAK,KAAK,CAAC,EAAE;MAC5C,SAAS,GAAG,SAAS;IACtB;IAED;IACA,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;MACjB;IACD;IAED,IAAI,SAAS,GAAG,SAAS,EAAE;MACzB,IAAI,CAAC,OAAO,GAAG,KAAK;IACrB;IAED,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,EAAE;MACrC,QAAQ,EAAE,CAAC,EAAE,CAAC;MACd,eAAe,EAAE,CAAC,EAAE,CAAC;MACrB,WAAW,EAAE,OAAO;MACpB,QAAQ,EAAE;KACX,CAAC;EACJ,CAAC;AACH","sourceRoot":"","sourcesContent":["/**\n * This file contains overrides the default\n * hammer.js functions to add our own utility\n */\n/* eslint-disable */\n/* Hammer.js constants */\nconst INPUT_START = 1;\nconst INPUT_MOVE = 2;\nconst INPUT_END = 4;\nconst MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n/**\n * Helper function that returns true if any element in an array meets given criteria.\n * Because older browsers do not support `Array.prototype.some`\n * @params array {Array}\n * @params predict {Function}\n */\nfunction some(array, predict) {\n    for (let i = 0; i < array.length; i++) {\n        if (predict(array[i])) {\n            return true;\n        }\n    }\n    return false;\n}\n/* eslint-disable no-invalid-this */\nexport function enhancePointerEventInput(PointerEventInput) {\n    const oldHandler = PointerEventInput.prototype.handler;\n    // overrides PointerEventInput.handler to accept right mouse button\n    PointerEventInput.prototype.handler = function handler(ev) {\n        const store = this.store;\n        // Allow non-left mouse buttons through\n        if (ev.button > 0 && ev.type === 'pointerdown') {\n            if (!some(store, e => e.pointerId === ev.pointerId)) {\n                store.push(ev);\n            }\n        }\n        oldHandler.call(this, ev);\n    };\n}\n// overrides MouseInput.handler to accept right mouse button\nexport function enhanceMouseInput(MouseInput) {\n    MouseInput.prototype.handler = function handler(ev) {\n        let eventType = MOUSE_INPUT_MAP[ev.type];\n        // on start we want to have the mouse button down\n        if (eventType & INPUT_START && ev.button >= 0) {\n            this.pressed = true;\n        }\n        if (eventType & INPUT_MOVE && ev.which === 0) {\n            eventType = INPUT_END;\n        }\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: 'mouse',\n            srcEvent: ev\n        });\n    };\n}\n//# sourceMappingURL=hammer-overrides.js.map"]},"metadata":{},"sourceType":"module"}