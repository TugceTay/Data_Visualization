{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nimport GLTFScenegraph from '../gltf-scenegraph';\nimport { KHR_TECHNIQUES_WEBGL } from '../gltf-constants';\nexport function decode(gltfData, options) {\n  var gltfScenegraph = new GLTFScenegraph(gltfData);\n  var json = gltfScenegraph.json;\n  var extension = gltfScenegraph.getExtension(KHR_TECHNIQUES_WEBGL);\n  if (extension) {\n    var techniques = resolveTechniques(extension, gltfScenegraph);\n    var _iterator = _createForOfIteratorHelper(json.materials || []),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var material = _step.value;\n        var materialExtension = gltfScenegraph.getObjectExtension(material, KHR_TECHNIQUES_WEBGL);\n        if (materialExtension) {\n          material.technique = Object.assign({}, materialExtension, techniques[materialExtension.technique]);\n          material.technique.values = resolveValues(material.technique, gltfScenegraph);\n        }\n        gltfScenegraph.removeObjectExtension(material, KHR_TECHNIQUES_WEBGL);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    gltfScenegraph.removeExtension(KHR_TECHNIQUES_WEBGL);\n  }\n}\nexport function encode(gltfData, options) {}\nfunction resolveTechniques(_ref, gltfScenegraph) {\n  var _ref$programs = _ref.programs,\n    programs = _ref$programs === void 0 ? [] : _ref$programs,\n    _ref$shaders = _ref.shaders,\n    shaders = _ref$shaders === void 0 ? [] : _ref$shaders,\n    _ref$techniques = _ref.techniques,\n    techniques = _ref$techniques === void 0 ? [] : _ref$techniques;\n  var textDecoder = new TextDecoder();\n  shaders.forEach(function (shader) {\n    if (Number.isFinite(shader.bufferView)) {\n      shader.code = textDecoder.decode(gltfScenegraph.getTypedArrayForBufferView(shader.bufferView));\n    } else {\n      throw new Error('KHR_techniques_webgl: no shader code');\n    }\n  });\n  programs.forEach(function (program) {\n    program.fragmentShader = shaders[program.fragmentShader];\n    program.vertexShader = shaders[program.vertexShader];\n  });\n  techniques.forEach(function (technique) {\n    technique.program = programs[technique.program];\n  });\n  return techniques;\n}\nfunction resolveValues(technique, gltfScenegraph) {\n  var values = Object.assign({}, technique.values);\n  Object.keys(technique.uniforms || {}).forEach(function (uniform) {\n    if (technique.uniforms[uniform].value && !(uniform in values)) {\n      values[uniform] = technique.uniforms[uniform].value;\n    }\n  });\n  Object.keys(values).forEach(function (uniform) {\n    if (_typeof(values[uniform]) === 'object' && values[uniform].index !== undefined) {\n      values[uniform].texture = gltfScenegraph.getTexture(values[uniform].index);\n    }\n  });\n  return values;\n}","map":{"version":3,"sources":["../../../../src/lib/extensions/KHR_techniques_webgl.js"],"names":["GLTFScenegraph","KHR_TECHNIQUES_WEBGL","decode","gltfData","options","gltfScenegraph","json","extension","getExtension","techniques","resolveTechniques","material","materials","materialExtension","getObjectExtension","technique","Object","assign","values","resolveValues","removeObjectExtension","removeExtension","encode","programs","shaders","textDecoder","TextDecoder","forEach","Number","isFinite","shader","bufferView","code","getTypedArrayForBufferView","Error","program","fragmentShader","vertexShader","keys","uniforms","uniform","value","index","undefined","texture","getTexture"],"mappings":"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","sourcesContent":["// GLTF EXTENSION: KHR_techniques_webgl\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_techniques_webgl\n/* global TextDecoder */\nimport GLTFScenegraph from '../gltf-scenegraph';\nimport {KHR_TECHNIQUES_WEBGL} from '../gltf-constants';\n\nexport function decode(gltfData, options) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  const extension = gltfScenegraph.getExtension(KHR_TECHNIQUES_WEBGL);\n  if (extension) {\n    const techniques = resolveTechniques(extension, gltfScenegraph);\n\n    for (const material of json.materials || []) {\n      const materialExtension = gltfScenegraph.getObjectExtension(material, KHR_TECHNIQUES_WEBGL);\n      if (materialExtension) {\n        material.technique = Object.assign(\n          {},\n          materialExtension,\n          // @ts-ignore\n          techniques[materialExtension.technique]\n        );\n        material.technique.values = resolveValues(material.technique, gltfScenegraph);\n      }\n      gltfScenegraph.removeObjectExtension(material, KHR_TECHNIQUES_WEBGL);\n    }\n\n    gltfScenegraph.removeExtension(KHR_TECHNIQUES_WEBGL);\n  }\n}\n\nexport function encode(gltfData, options) {\n  // TODO\n}\n\nfunction resolveTechniques({programs = [], shaders = [], techniques = []}, gltfScenegraph) {\n  const textDecoder = new TextDecoder();\n\n  shaders.forEach(shader => {\n    if (Number.isFinite(shader.bufferView)) {\n      shader.code = textDecoder.decode(\n        gltfScenegraph.getTypedArrayForBufferView(shader.bufferView)\n      );\n    } else {\n      // TODO: handle URI shader\n      throw new Error('KHR_techniques_webgl: no shader code');\n    }\n  });\n\n  programs.forEach(program => {\n    program.fragmentShader = shaders[program.fragmentShader];\n    program.vertexShader = shaders[program.vertexShader];\n  });\n\n  techniques.forEach(technique => {\n    technique.program = programs[technique.program];\n  });\n\n  return techniques;\n}\n\nfunction resolveValues(technique, gltfScenegraph) {\n  const values = Object.assign({}, technique.values);\n\n  // merge values from uniforms\n  Object.keys(technique.uniforms || {}).forEach(uniform => {\n    if (technique.uniforms[uniform].value && !(uniform in values)) {\n      values[uniform] = technique.uniforms[uniform].value;\n    }\n  });\n\n  // resolve textures\n  Object.keys(values).forEach(uniform => {\n    if (typeof values[uniform] === 'object' && values[uniform].index !== undefined) {\n      // Assume this is a texture\n      // TODO: find if there are any other types that can be referenced\n      values[uniform].texture = gltfScenegraph.getTexture(values[uniform].index);\n    }\n  });\n\n  return values;\n}\n"]},"metadata":{},"sourceType":"module"}