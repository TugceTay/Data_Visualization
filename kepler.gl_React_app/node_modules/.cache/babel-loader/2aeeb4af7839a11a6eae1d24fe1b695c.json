{"ast":null,"code":"import { log } from '@deck.gl/core';\nvar MISSING_CHAR_WIDTH = 32;\nexport function nextPowOfTwo(number) {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\nexport function buildMapping(_ref) {\n  var characterSet = _ref.characterSet,\n    getFontWidth = _ref.getFontWidth,\n    fontHeight = _ref.fontHeight,\n    buffer = _ref.buffer,\n    maxCanvasWidth = _ref.maxCanvasWidth,\n    _ref$mapping = _ref.mapping,\n    mapping = _ref$mapping === void 0 ? {} : _ref$mapping,\n    _ref$xOffset = _ref.xOffset,\n    xOffset = _ref$xOffset === void 0 ? 0 : _ref$xOffset,\n    _ref$yOffset = _ref.yOffset,\n    yOffset = _ref$yOffset === void 0 ? 0 : _ref$yOffset;\n  var row = 0;\n  var x = xOffset;\n  var i = 0;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n  try {\n    for (var _iterator = characterSet[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _char = _step.value;\n      if (!mapping[_char]) {\n        var width = getFontWidth(_char, i++);\n        if (x + width + buffer * 2 > maxCanvasWidth) {\n          x = 0;\n          row++;\n        }\n        mapping[_char] = {\n          x: x + buffer,\n          y: yOffset + row * (fontHeight + buffer * 2) + buffer,\n          width: width,\n          height: fontHeight\n        };\n        x += width + buffer * 2;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n  var rowHeight = fontHeight + buffer * 2;\n  return {\n    mapping: mapping,\n    xOffset: x,\n    yOffset: yOffset + row * rowHeight,\n    canvasHeight: nextPowOfTwo(yOffset + (row + 1) * rowHeight)\n  };\n}\nfunction getTextWidth(text, mapping) {\n  var width = 0;\n  for (var i = 0; i < text.length; i++) {\n    var character = text[i];\n    var frameWidth = null;\n    var frame = mapping && mapping[character];\n    if (frame) {\n      frameWidth = frame.width;\n    }\n    width += frameWidth;\n  }\n  return width;\n}\nfunction breakAll(text, maxWidth, iconMapping) {\n  var rows = [];\n  var rowStartCharIndex = 0;\n  var rowOffsetLeft = 0;\n  for (var i = 0; i < text.length; i++) {\n    var textWidth = getTextWidth(text[i], iconMapping);\n    if (rowOffsetLeft + textWidth > maxWidth) {\n      if (rowStartCharIndex < i) {\n        rows.push(text.substring(rowStartCharIndex, i));\n      }\n      rowStartCharIndex = i;\n      rowOffsetLeft = 0;\n    }\n    rowOffsetLeft += textWidth;\n  }\n  if (rowStartCharIndex < text.length) {\n    rows.push(text.substring(rowStartCharIndex));\n  }\n  return {\n    rows: rows,\n    lastRowStartCharIndex: rowStartCharIndex,\n    lastRowOffsetLeft: rowOffsetLeft\n  };\n}\nfunction breakWord(text, maxWidth, iconMapping) {\n  var rows = [];\n  var rowStartCharIndex = 0;\n  var groupStartCharIndex = 0;\n  var rowOffsetLeft = 0;\n  var group = null;\n  for (var i = 0; i < text.length; i++) {\n    if (text[i] === ' ') {\n      group = text[i];\n      groupStartCharIndex = i + 1;\n    } else if (i + 1 < text.length && text[i + 1] === ' ' || i + 1 === text.length) {\n      group = text.substring(groupStartCharIndex, i + 1);\n      groupStartCharIndex = i + 1;\n    } else {\n      group = null;\n    }\n    if (group) {\n      var groupWidth = getTextWidth(group, iconMapping);\n      if (rowOffsetLeft + groupWidth > maxWidth) {\n        var lastGroupStartIndex = groupStartCharIndex - group.length;\n        if (rowStartCharIndex < lastGroupStartIndex) {\n          rows.push(text.substring(rowStartCharIndex, lastGroupStartIndex));\n          rowStartCharIndex = lastGroupStartIndex;\n          rowOffsetLeft = 0;\n        }\n        if (groupWidth > maxWidth) {\n          var subGroups = breakAll(group, maxWidth, iconMapping);\n          if (subGroups.rows.length > 1) {\n            rows = rows.concat(subGroups.rows.slice(0, subGroups.rows.length - 1));\n          }\n          rowStartCharIndex = rowStartCharIndex + subGroups.lastRowStartCharIndex;\n          groupWidth = subGroups.lastRowOffsetLeft;\n        }\n      }\n      rowOffsetLeft += groupWidth;\n    }\n  }\n  if (rowStartCharIndex < text.length) {\n    rows.push(text.substring(rowStartCharIndex));\n  }\n  return {\n    rows: rows,\n    lastRowStartCharIndex: rowStartCharIndex,\n    lastRowOffsetLeft: rowOffsetLeft\n  };\n}\nexport function autoWrapping(text, wordBreak, maxWidth, iconMapping) {\n  if (wordBreak === 'break-all') {\n    return breakAll(text, maxWidth, iconMapping);\n  }\n  return breakWord(text, maxWidth, iconMapping);\n}\nfunction transformRow(row, iconMapping) {\n  var x = 0;\n  var rowHeight = 0;\n  var leftOffsets = new Array(row.length);\n  for (var i = 0; i < row.length; i++) {\n    var character = row[i];\n    var frame = iconMapping[character];\n    if (frame) {\n      if (!rowHeight) {\n        rowHeight = frame.height;\n      }\n      leftOffsets[i] = x + frame.width / 2;\n      x += frame.width;\n    } else {\n      log.warn(\"Missing character: \".concat(character))();\n      leftOffsets[i] = x;\n      x += MISSING_CHAR_WIDTH;\n    }\n  }\n  return {\n    leftOffsets: leftOffsets,\n    rowWidth: x,\n    rowHeight: rowHeight\n  };\n}\nexport function transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping) {\n  var result = new Array(paragraph.length);\n  var autoWrappingEnabled = (wordBreak === 'break-word' || wordBreak === 'break-all') && isFinite(maxWidth) && maxWidth > 0;\n  var size = [0, 0];\n  var rowOffsetTop = 0;\n  var lineStartIndex = 0;\n  for (var i = 0; i <= paragraph.length; i++) {\n    var _char2 = paragraph[i];\n    var line = void 0;\n    if (_char2 === '\\n' || _char2 === undefined) {\n      line = paragraph.slice(lineStartIndex, i);\n    }\n    if (line) {\n      var rows = autoWrappingEnabled ? autoWrapping(line, wordBreak, maxWidth, iconMapping).rows : [line];\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n      try {\n        for (var _iterator2 = rows[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var row = _step2.value;\n          var _transformRow = transformRow(row, iconMapping, lineHeight),\n            rowWidth = _transformRow.rowWidth,\n            rowHeight = _transformRow.rowHeight,\n            leftOffsets = _transformRow.leftOffsets;\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n          try {\n            for (var _iterator3 = leftOffsets[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var x = _step3.value;\n              result[lineStartIndex++] = {\n                x: x,\n                y: rowOffsetTop + rowHeight / 2,\n                rowWidth: rowWidth\n              };\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3[\"return\"] != null) {\n                _iterator3[\"return\"]();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n          rowOffsetTop = rowOffsetTop + rowHeight * lineHeight;\n          size[0] = autoWrappingEnabled ? maxWidth : Math.max(size[0], rowWidth);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n    if (_char2 === '\\n') {\n      result[lineStartIndex++] = {\n        x: 0,\n        y: 0,\n        rowWidth: 0\n      };\n    }\n  }\n  size[1] = rowOffsetTop;\n  return {\n    characters: result,\n    size: size\n  };\n}\nexport function getTextFromBuffer(_ref2) {\n  var value = _ref2.value,\n    length = _ref2.length,\n    stride = _ref2.stride,\n    offset = _ref2.offset,\n    startIndices = _ref2.startIndices;\n  var bytesPerElement = value.BYTES_PER_ELEMENT;\n  var elementStride = stride ? stride / bytesPerElement : 1;\n  var elementOffset = offset ? offset / bytesPerElement : 0;\n  var characterCount = startIndices[length] || Math.floor((value.length - elementOffset - bytesPerElement) / elementStride) + 1;\n  var texts = new Array(length);\n  var codes = value;\n  if (elementStride > 1 || elementOffset > 0) {\n    codes = new value.constructor(characterCount);\n    for (var i = 0; i < characterCount; i++) {\n      codes[i] = value[i * elementStride + elementOffset];\n    }\n  }\n  for (var index = 0; index < length; index++) {\n    var startIndex = startIndices[index];\n    var endIndex = startIndices[index + 1] || characterCount;\n    texts[index] = String.fromCodePoint.apply(null, codes.subarray(startIndex, endIndex));\n  }\n  return {\n    texts: texts,\n    characterCount: characterCount\n  };\n}","map":{"version":3,"sources":["../../../src/text-layer/utils.js"],"names":["log","MISSING_CHAR_WIDTH","nextPowOfTwo","number","Math","pow","ceil","log2","buildMapping","characterSet","getFontWidth","fontHeight","buffer","maxCanvasWidth","mapping","xOffset","yOffset","row","x","i","char","width","y","height","rowHeight","canvasHeight","getTextWidth","text","length","character","frameWidth","frame","breakAll","maxWidth","iconMapping","rows","rowStartCharIndex","rowOffsetLeft","textWidth","push","substring","lastRowStartCharIndex","lastRowOffsetLeft","breakWord","groupStartCharIndex","group","groupWidth","lastGroupStartIndex","subGroups","concat","slice","autoWrapping","wordBreak","transformRow","leftOffsets","Array","warn","rowWidth","transformParagraph","paragraph","lineHeight","result","autoWrappingEnabled","isFinite","size","rowOffsetTop","lineStartIndex","line","undefined","max","characters","getTextFromBuffer","value","stride","offset","startIndices","bytesPerElement","BYTES_PER_ELEMENT","elementStride","elementOffset","characterCount","floor","texts","codes","constructor","index","startIndex","endIndex","String","fromCodePoint","apply","subarray"],"mappings":"AACA,SAAQA,GAAR,QAAkB,eAAlB;AAEA,IAAMC,kBAAkB,GAAG,EAA3B;AAEA,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;EACnC,OAAOC,IAAI,CAACC,GAALD,CAAS,CAATA,EAAYA,IAAI,CAACE,IAALF,CAAUA,IAAI,CAACG,IAALH,CAAUD,MAAVC,CAAVA,CAAZA,CAAP;AACD;AAmBD,OAAO,SAASI,YAAT,CAAA,IAAA,EASJ;EAAA,IARDC,YAQC,GAAA,IAAA,CARDA,YAQC;IAPDC,YAOC,GAAA,IAAA,CAPDA,YAOC;IANDC,UAMC,GAAA,IAAA,CANDA,UAMC;IALDC,MAKC,GAAA,IAAA,CALDA,MAKC;IAJDC,cAIC,GAAA,IAAA,CAJDA,cAIC;IAAA,YAAA,GAAA,IAAA,CAHDC,OAGC;IAHDA,OAGC,GAAA,YAAA,KAAA,KAAA,CAAA,GAHS,CAAA,CAGT,GAAA,YAAA;IAAA,YAAA,GAAA,IAAA,CAFDC,OAEC;IAFDA,OAEC,GAAA,YAAA,KAAA,KAAA,CAAA,GAFS,CAET,GAAA,YAAA;IAAA,YAAA,GAAA,IAAA,CADDC,OACC;IADDA,OACC,GAAA,YAAA,KAAA,KAAA,CAAA,GADS,CACT,GAAA,YAAA;EACD,IAAIC,GAAG,GAAG,CAAV;EAEA,IAAIC,CAAC,GAAGH,OAAR;EAEA,IAAII,CAAC,GAAG,CAAR;EALC,IAAA,yBAAA,GAAA,IAAA;EAAA,IAAA,iBAAA,GAAA,KAAA;EAAA,IAAA,cAAA,GAAA,SAAA;EAAA,IAAA;IAMD,KAAA,IAAA,SAAA,GAAmBV,YAAnB,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA,EAAA,yBAAA,GAAA,CAAA,KAAA,GAAA,SAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,yBAAA,GAAA,IAAA,EAAiC;MAAA,IAAtBW,KAAsB,GAAA,KAAA,CAAA,KAAA;MAC/B,IAAI,CAACN,OAAO,CAACM,KAAD,CAAZ,EAAoB;QAIlB,IAAMC,KAAK,GAAGX,YAAY,CAACU,KAAD,EAAOD,CAAC,EAAR,CAA1B;QAEA,IAAID,CAAC,GAAGG,KAAJH,GAAYN,MAAM,GAAG,CAArBM,GAAyBL,cAA7B,EAA6C;UAC3CK,CAAC,GAAG,CAAJA;UACAD,GAAG,EAAA;QACJ;QACDH,OAAO,CAACM,KAAD,CAAPN,GAAgB;UACdI,CAAC,EAAEA,CAAC,GAAGN,MADO;UAEdU,CAAC,EAAEN,OAAO,GAAGC,GAAG,IAAIN,UAAU,GAAGC,MAAM,GAAG,CAA1B,CAAbI,GAA4CJ,MAFjC;UAGdS,KAAK,EAALA,KAHc;UAIdE,MAAM,EAAEZ;QAJM,CAAhBG;QAMAI,CAAC,IAAIG,KAAK,GAAGT,MAAM,GAAG,CAAtBM;MACD;IACF;EAzBA,CAAA,CAAA,OAAA,GAAA,EAAA;IAAA,iBAAA,GAAA,IAAA;IAAA,cAAA,GAAA,GAAA;EAAA,CAAA,SAAA;IAAA,IAAA;MAAA,IAAA,CAAA,yBAAA,IAAA,SAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;QAAA,SAAA,CAAA,QAAA,CAAA,EAAA;MAAA;IAAA,CAAA,SAAA;MAAA,IAAA,iBAAA,EAAA;QAAA,MAAA,cAAA;MAAA;IAAA;EAAA;EA2BD,IAAMM,SAAS,GAAGb,UAAU,GAAGC,MAAM,GAAG,CAAxC;EAEA,OAAO;IACLE,OAAO,EAAPA,OADK;IAELC,OAAO,EAAEG,CAFJ;IAGLF,OAAO,EAAEA,OAAO,GAAGC,GAAG,GAAGO,SAHpB;IAILC,YAAY,EAAEvB,YAAY,CAACc,OAAO,GAAG,CAACC,GAAG,GAAG,CAAP,IAAYO,SAAvB;EAJrB,CAAP;AAMD;AAED,SAASE,YAAT,CAAsBC,IAAtB,EAA4Bb,OAA5B,EAAqC;EACnC,IAAIO,KAAK,GAAG,CAAZ;EACA,KAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,IAAI,CAACC,MAAzB,EAAiCT,CAAC,EAAlC,EAAsC;IACpC,IAAMU,SAAS,GAAGF,IAAI,CAACR,CAAD,CAAtB;IACA,IAAIW,UAAU,GAAG,IAAjB;IACA,IAAMC,KAAK,GAAGjB,OAAO,IAAIA,OAAO,CAACe,SAAD,CAAhC;IACA,IAAIE,KAAJ,EAAW;MACTD,UAAU,GAAGC,KAAK,CAACV,KAAnBS;IACD;IAEDT,KAAK,IAAIS,UAATT;EACD;EAED,OAAOA,KAAP;AACD;AAED,SAASW,QAAT,CAAkBL,IAAlB,EAAwBM,QAAxB,EAAkCC,WAAlC,EAA+C;EAC7C,IAAMC,IAAI,GAAG,EAAb;EACA,IAAIC,iBAAiB,GAAG,CAAxB;EACA,IAAIC,aAAa,GAAG,CAApB;EAEA,KAAK,IAAIlB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,IAAI,CAACC,MAAzB,EAAiCT,CAAC,EAAlC,EAAsC;IAEpC,IAAMmB,SAAS,GAAGZ,YAAY,CAACC,IAAI,CAACR,CAAD,CAAL,EAAUe,WAAV,CAA9B;IACA,IAAIG,aAAa,GAAGC,SAAhBD,GAA4BJ,QAAhC,EAA0C;MACxC,IAAIG,iBAAiB,GAAGjB,CAAxB,EAA2B;QACzBgB,IAAI,CAACI,IAALJ,CAAUR,IAAI,CAACa,SAALb,CAAeS,iBAAfT,EAAkCR,CAAlCQ,CAAVQ,CAAAA;MACD;MACDC,iBAAiB,GAAGjB,CAApBiB;MACAC,aAAa,GAAG,CAAhBA;IACD;IACDA,aAAa,IAAIC,SAAjBD;EACD;EAGD,IAAID,iBAAiB,GAAGT,IAAI,CAACC,MAA7B,EAAqC;IACnCO,IAAI,CAACI,IAALJ,CAAUR,IAAI,CAACa,SAALb,CAAeS,iBAAfT,CAAVQ,CAAAA;EACD;EAED,OAAO;IACLA,IAAI,EAAJA,IADK;IAELM,qBAAqB,EAAEL,iBAFlB;IAGLM,iBAAiB,EAAEL;EAHd,CAAP;AAKD;AAGD,SAASM,SAAT,CAAmBhB,IAAnB,EAAyBM,QAAzB,EAAmCC,WAAnC,EAAgD;EAC9C,IAAIC,IAAI,GAAG,EAAX;EACA,IAAIC,iBAAiB,GAAG,CAAxB;EACA,IAAIQ,mBAAmB,GAAG,CAA1B;EACA,IAAIP,aAAa,GAAG,CAApB;EACA,IAAIQ,KAAK,GAAG,IAAZ;EAEA,KAAK,IAAI1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,IAAI,CAACC,MAAzB,EAAiCT,CAAC,EAAlC,EAAsC;IAKpC,IAAIQ,IAAI,CAACR,CAAD,CAAJQ,KAAY,GAAhB,EAAqB;MACnBkB,KAAK,GAAGlB,IAAI,CAACR,CAAD,CAAZ0B;MACAD,mBAAmB,GAAGzB,CAAC,GAAG,CAA1ByB;IACD,CAHD,MAGO,IAAKzB,CAAC,GAAG,CAAJA,GAAQQ,IAAI,CAACC,MAAbT,IAAuBQ,IAAI,CAACR,CAAC,GAAG,CAAL,CAAJQ,KAAgB,GAAxC,IAAgDR,CAAC,GAAG,CAAJA,KAAUQ,IAAI,CAACC,MAAnE,EAA2E;MAChFiB,KAAK,GAAGlB,IAAI,CAACa,SAALb,CAAeiB,mBAAfjB,EAAoCR,CAAC,GAAG,CAAxCQ,CAARkB;MACAD,mBAAmB,GAAGzB,CAAC,GAAG,CAA1ByB;IACD,CAHM,MAGA;MACLC,KAAK,GAAG,IAARA;IACD;IAED,IAAIA,KAAJ,EAAW;MAET,IAAIC,UAAU,GAAGpB,YAAY,CAACmB,KAAD,EAAQX,WAAR,CAA7B;MACA,IAAIG,aAAa,GAAGS,UAAhBT,GAA6BJ,QAAjC,EAA2C;QACzC,IAAMc,mBAAmB,GAAGH,mBAAmB,GAAGC,KAAK,CAACjB,MAAxD;QACA,IAAIQ,iBAAiB,GAAGW,mBAAxB,EAA6C;UAC3CZ,IAAI,CAACI,IAALJ,CAAUR,IAAI,CAACa,SAALb,CAAeS,iBAAfT,EAAkCoB,mBAAlCpB,CAAVQ,CAAAA;UACAC,iBAAiB,GAAGW,mBAApBX;UACAC,aAAa,GAAG,CAAhBA;QACD;QAGD,IAAIS,UAAU,GAAGb,QAAjB,EAA2B;UACzB,IAAMe,SAAS,GAAGhB,QAAQ,CAACa,KAAD,EAAQZ,QAAR,EAAkBC,WAAlB,CAA1B;UACA,IAAIc,SAAS,CAACb,IAAVa,CAAepB,MAAfoB,GAAwB,CAA5B,EAA+B;YAE7Bb,IAAI,GAAGA,IAAI,CAACc,MAALd,CAAYa,SAAS,CAACb,IAAVa,CAAeE,KAAfF,CAAqB,CAArBA,EAAwBA,SAAS,CAACb,IAAVa,CAAepB,MAAfoB,GAAwB,CAAhDA,CAAZb,CAAPA;UACD;UAEDC,iBAAiB,GAAGA,iBAAiB,GAAGY,SAAS,CAACP,qBAAlDL;UACAU,UAAU,GAAGE,SAAS,CAACN,iBAAvBI;QACD;MACF;MACDT,aAAa,IAAIS,UAAjBT;IACD;EACF;EAGD,IAAID,iBAAiB,GAAGT,IAAI,CAACC,MAA7B,EAAqC;IACnCO,IAAI,CAACI,IAALJ,CAAUR,IAAI,CAACa,SAALb,CAAeS,iBAAfT,CAAVQ,CAAAA;EACD;EAED,OAAO;IACLA,IAAI,EAAJA,IADK;IAELM,qBAAqB,EAAEL,iBAFlB;IAGLM,iBAAiB,EAAEL;EAHd,CAAP;AAKD;AAGD,OAAO,SAASc,YAAT,CAAsBxB,IAAtB,EAA4ByB,SAA5B,EAAuCnB,QAAvC,EAAiDC,WAAjD,EAA8D;EACnE,IAAIkB,SAAS,KAAK,WAAlB,EAA+B;IAC7B,OAAOpB,QAAQ,CAACL,IAAD,EAAOM,QAAP,EAAiBC,WAAjB,CAAf;EACD;EACD,OAAOS,SAAS,CAAChB,IAAD,EAAOM,QAAP,EAAiBC,WAAjB,CAAhB;AACD;AAED,SAASmB,YAAT,CAAsBpC,GAAtB,EAA2BiB,WAA3B,EAAwC;EACtC,IAAIhB,CAAC,GAAG,CAAR;EACA,IAAIM,SAAS,GAAG,CAAhB;EAEA,IAAM8B,WAAW,GAAG,IAAIC,KAAJ,CAAUtC,GAAG,CAACW,MAAd,CAApB;EACA,KAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACW,MAAxB,EAAgCT,CAAC,EAAjC,EAAqC;IACnC,IAAMU,SAAS,GAAGZ,GAAG,CAACE,CAAD,CAArB;IACA,IAAMY,KAAK,GAAGG,WAAW,CAACL,SAAD,CAAzB;IACA,IAAIE,KAAJ,EAAW;MACT,IAAI,CAACP,SAAL,EAAgB;QAEdA,SAAS,GAAGO,KAAK,CAACR,MAAlBC;MACD;MACD8B,WAAW,CAACnC,CAAD,CAAXmC,GAAiBpC,CAAC,GAAGa,KAAK,CAACV,KAANU,GAAc,CAAnCuB;MACApC,CAAC,IAAIa,KAAK,CAACV,KAAXH;IACD,CAPD,MAOO;MACLlB,GAAG,CAACwD,IAAJxD,CAAAA,qBAAAA,CAAAA,MAAAA,CAA+B6B,SAA/B7B,CAAAA,CAAAA,EAAAA;MACAsD,WAAW,CAACnC,CAAD,CAAXmC,GAAiBpC,CAAjBoC;MACApC,CAAC,IAAIjB,kBAALiB;IACD;EACF;EAED,OAAO;IACLoC,WAAW,EAAXA,WADK;IAELG,QAAQ,EAAEvC,CAFL;IAGLM,SAAS,EAATA;EAHK,CAAP;AAKD;AAmBD,OAAO,SAASkC,kBAAT,CAA4BC,SAA5B,EAAuCC,UAAvC,EAAmDR,SAAnD,EAA8DnB,QAA9D,EAAwEC,WAAxE,EAAqF;EAC1F,IAAM2B,MAAM,GAAG,IAAIN,KAAJ,CAAUI,SAAS,CAAC/B,MAApB,CAAf;EACA,IAAMkC,mBAAmB,GACvB,CAACV,SAAS,KAAK,YAAdA,IAA8BA,SAAS,KAAK,WAA7C,KAA6DW,QAAQ,CAAC9B,QAAD,CAArE,IAAmFA,QAAQ,GAAG,CADhG;EAIA,IAAM+B,IAAI,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAb;EACA,IAAIC,YAAY,GAAG,CAAnB;EACA,IAAIC,cAAc,GAAG,CAArB;EAEA,KAAK,IAAI/C,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIwC,SAAS,CAAC/B,MAA/B,EAAuCT,CAAC,EAAxC,EAA4C;IAC1C,IAAMC,MAAI,GAAGuC,SAAS,CAACxC,CAAD,CAAtB;IACA,IAAIgD,IAAI,GAAA,KAAA,CAAR;IACA,IAAI/C,MAAI,KAAK,IAATA,IAAiBA,MAAI,KAAKgD,SAA9B,EAAyC;MACvCD,IAAI,GAAGR,SAAS,CAACT,KAAVS,CAAgBO,cAAhBP,EAAgCxC,CAAhCwC,CAAPQ;IACD;IAED,IAAIA,IAAJ,EAAU;MACR,IAAMhC,IAAI,GAAG2B,mBAAmB,GAC5BX,YAAY,CAACgB,IAAD,EAAOf,SAAP,EAAkBnB,QAAlB,EAA4BC,WAA5B,CAAZiB,CAAqDhB,IADzB,GAE5B,CAACgC,IAAD,CAFJ;MADQ,IAAA,0BAAA,GAAA,IAAA;MAAA,IAAA,kBAAA,GAAA,KAAA;MAAA,IAAA,eAAA,GAAA,SAAA;MAAA,IAAA;QAKR,KAAA,IAAA,UAAA,GAAkBhC,IAAlB,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,EAAA,MAAA,EAAA,EAAA,0BAAA,GAAA,CAAA,MAAA,GAAA,UAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,0BAAA,GAAA,IAAA,EAAwB;UAAA,IAAblB,GAAa,GAAA,MAAA,CAAA,KAAA;UAAA,IAAA,aAAA,GACqBoC,YAAY,CAACpC,GAAD,EAAMiB,WAAN,EAAmB0B,UAAnB,CADjC;YACfH,QADe,GAAA,aAAA,CACfA,QADe;YACLjC,SADK,GAAA,aAAA,CACLA,SADK;YACM8B,WADN,GAAA,aAAA,CACMA,WADN;UAAA,IAAA,0BAAA,GAAA,IAAA;UAAA,IAAA,kBAAA,GAAA,KAAA;UAAA,IAAA,eAAA,GAAA,SAAA;UAAA,IAAA;YAGtB,KAAA,IAAA,UAAA,GAAgBA,WAAhB,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,EAAA,MAAA,EAAA,EAAA,0BAAA,GAAA,CAAA,MAAA,GAAA,UAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,0BAAA,GAAA,IAAA,EAA6B;cAAA,IAAlBpC,CAAkB,GAAA,MAAA,CAAA,KAAA;cAC3B2C,MAAM,CAACK,cAAc,EAAf,CAANL,GAA2B;gBACzB3C,CAAC,EAADA,CADyB;gBAEzBI,CAAC,EAAE2C,YAAY,GAAGzC,SAAS,GAAG,CAFL;gBAGzBiC,QAAQ,EAARA;cAHyB,CAA3BI;YAKD;UATqB,CAAA,CAAA,OAAA,GAAA,EAAA;YAAA,kBAAA,GAAA,IAAA;YAAA,eAAA,GAAA,GAAA;UAAA,CAAA,SAAA;YAAA,IAAA;cAAA,IAAA,CAAA,0BAAA,IAAA,UAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;gBAAA,UAAA,CAAA,QAAA,CAAA,EAAA;cAAA;YAAA,CAAA,SAAA;cAAA,IAAA,kBAAA,EAAA;gBAAA,MAAA,eAAA;cAAA;YAAA;UAAA;UAWtBI,YAAY,GAAGA,YAAY,GAAGzC,SAAS,GAAGoC,UAA1CK;UACAD,IAAI,CAAC,CAAD,CAAJA,GAAUF,mBAAmB,GAAG7B,QAAH,GAAc7B,IAAI,CAACiE,GAALjE,CAAS4D,IAAI,CAAC,CAAD,CAAb5D,EAAkBqD,QAAlBrD,CAA3C4D;QACD;MAlBO,CAAA,CAAA,OAAA,GAAA,EAAA;QAAA,kBAAA,GAAA,IAAA;QAAA,eAAA,GAAA,GAAA;MAAA,CAAA,SAAA;QAAA,IAAA;UAAA,IAAA,CAAA,0BAAA,IAAA,UAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;YAAA,UAAA,CAAA,QAAA,CAAA,EAAA;UAAA;QAAA,CAAA,SAAA;UAAA,IAAA,kBAAA,EAAA;YAAA,MAAA,eAAA;UAAA;QAAA;MAAA;IAmBT;IAED,IAAI5C,MAAI,KAAK,IAAb,EAAmB;MAEjByC,MAAM,CAACK,cAAc,EAAf,CAANL,GAA2B;QAAC3C,CAAC,EAAE,CAAJ;QAAOI,CAAC,EAAE,CAAV;QAAamC,QAAQ,EAAE;MAAvB,CAA3BI;IACD;EACF;EAGDG,IAAI,CAAC,CAAD,CAAJA,GAAUC,YAAVD;EACA,OAAO;IAACM,UAAU,EAAET,MAAb;IAAqBG,IAAI,EAAJA;EAArB,CAAP;AACD;AAGD,OAAO,SAASO,iBAAT,CAAA,KAAA,EAA0E;EAAA,IAA9CC,KAA8C,GAAA,KAAA,CAA9CA,KAA8C;IAAvC5C,MAAuC,GAAA,KAAA,CAAvCA,MAAuC;IAA/B6C,MAA+B,GAAA,KAAA,CAA/BA,MAA+B;IAAvBC,MAAuB,GAAA,KAAA,CAAvBA,MAAuB;IAAfC,YAAe,GAAA,KAAA,CAAfA,YAAe;EAC/E,IAAMC,eAAe,GAAGJ,KAAK,CAACK,iBAA9B;EACA,IAAMC,aAAa,GAAGL,MAAM,GAAGA,MAAM,GAAGG,eAAZ,GAA8B,CAA1D;EACA,IAAMG,aAAa,GAAGL,MAAM,GAAGA,MAAM,GAAGE,eAAZ,GAA8B,CAA1D;EACA,IAAMI,cAAc,GAClBL,YAAY,CAAC/C,MAAD,CAAZ+C,IACAvE,IAAI,CAAC6E,KAAL7E,CAAW,CAACoE,KAAK,CAAC5C,MAAN4C,GAAeO,aAAfP,GAA+BI,eAAhC,IAAmDE,aAA9D1E,CAAAA,GAA+E,CAFjF;EAIA,IAAM8E,KAAK,GAAG,IAAI3B,KAAJ,CAAU3B,MAAV,CAAd;EAEA,IAAIuD,KAAK,GAAGX,KAAZ;EACA,IAAIM,aAAa,GAAG,CAAhBA,IAAqBC,aAAa,GAAG,CAAzC,EAA4C;IAC1CI,KAAK,GAAG,IAAIX,KAAK,CAACY,WAAV,CAAsBJ,cAAtB,CAARG;IACA,KAAK,IAAIhE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6D,cAApB,EAAoC7D,CAAC,EAArC,EAAyC;MACvCgE,KAAK,CAAChE,CAAD,CAALgE,GAAWX,KAAK,CAACrD,CAAC,GAAG2D,aAAJ3D,GAAoB4D,aAArB,CAAhBI;IACD;EACF;EAED,KAAK,IAAIE,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGzD,MAA5B,EAAoCyD,KAAK,EAAzC,EAA6C;IAC3C,IAAMC,UAAU,GAAGX,YAAY,CAACU,KAAD,CAA/B;IACA,IAAME,QAAQ,GAAGZ,YAAY,CAACU,KAAK,GAAG,CAAT,CAAZV,IAA2BK,cAA5C;IACAE,KAAK,CAACG,KAAD,CAALH,GAAeM,MAAM,CAACC,aAAPD,CAAqBE,KAArBF,CAA2B,IAA3BA,EAAiCL,KAAK,CAACQ,QAANR,CAAeG,UAAfH,EAA2BI,QAA3BJ,CAAjCK,CAAfN;EACD;EAED,OAAO;IAACA,KAAK,EAALA,KAAD;IAAQF,cAAc,EAAdA;EAAR,CAAP;AACD","sourcesContent":["// TODO merge with icon-layer/icon-manager\nimport {log} from '@deck.gl/core';\n\nconst MISSING_CHAR_WIDTH = 32;\n\nexport function nextPowOfTwo(number) {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\n/**\n * Generate character mapping table or update from an existing mapping table\n * @param characterSet {Array|Set} new characters\n * @param getFontWidth {Function} function to get width of each character\n * @param fontHeight {Number} height of font\n * @param buffer {Number} buffer surround each character\n * @param maxCanvasWidth {Number} max width of font atlas\n * @param mapping {Object} old mapping table\n * @param xOffset {Number} x position of last character in old mapping table\n * @param yOffset {Number} y position of last character in old mapping table\n * @returns {{\n *   mapping: Object,\n *   xOffset: Number, x position of last character\n *   yOffset: Number, y position of last character in old mapping table\n *   canvasHeight: Number, height of the font atlas canvas, power of 2\n *  }}\n */\nexport function buildMapping({\n  characterSet,\n  getFontWidth,\n  fontHeight,\n  buffer,\n  maxCanvasWidth,\n  mapping = {},\n  xOffset = 0,\n  yOffset = 0\n}) {\n  let row = 0;\n  // continue from x position of last character in the old mapping\n  let x = xOffset;\n\n  let i = 0;\n  for (const char of characterSet) {\n    if (!mapping[char]) {\n      // measure texts\n      // TODO - use Advanced text metrics when they are adopted:\n      // https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics\n      const width = getFontWidth(char, i++);\n\n      if (x + width + buffer * 2 > maxCanvasWidth) {\n        x = 0;\n        row++;\n      }\n      mapping[char] = {\n        x: x + buffer,\n        y: yOffset + row * (fontHeight + buffer * 2) + buffer,\n        width,\n        height: fontHeight\n      };\n      x += width + buffer * 2;\n    }\n  }\n\n  const rowHeight = fontHeight + buffer * 2;\n\n  return {\n    mapping,\n    xOffset: x,\n    yOffset: yOffset + row * rowHeight,\n    canvasHeight: nextPowOfTwo(yOffset + (row + 1) * rowHeight)\n  };\n}\n\nfunction getTextWidth(text, mapping) {\n  let width = 0;\n  for (let i = 0; i < text.length; i++) {\n    const character = text[i];\n    let frameWidth = null;\n    const frame = mapping && mapping[character];\n    if (frame) {\n      frameWidth = frame.width;\n    }\n\n    width += frameWidth;\n  }\n\n  return width;\n}\n\nfunction breakAll(text, maxWidth, iconMapping) {\n  const rows = [];\n  let rowStartCharIndex = 0;\n  let rowOffsetLeft = 0;\n\n  for (let i = 0; i < text.length; i++) {\n    // 2. figure out where to break lines\n    const textWidth = getTextWidth(text[i], iconMapping);\n    if (rowOffsetLeft + textWidth > maxWidth) {\n      if (rowStartCharIndex < i) {\n        rows.push(text.substring(rowStartCharIndex, i));\n      }\n      rowStartCharIndex = i;\n      rowOffsetLeft = 0;\n    }\n    rowOffsetLeft += textWidth;\n  }\n\n  // last row\n  if (rowStartCharIndex < text.length) {\n    rows.push(text.substring(rowStartCharIndex));\n  }\n\n  return {\n    rows,\n    lastRowStartCharIndex: rowStartCharIndex,\n    lastRowOffsetLeft: rowOffsetLeft\n  };\n}\n\n/* eslint-disable max-statements, complexity, max-depth */\nfunction breakWord(text, maxWidth, iconMapping) {\n  let rows = [];\n  let rowStartCharIndex = 0;\n  let groupStartCharIndex = 0;\n  let rowOffsetLeft = 0;\n  let group = null;\n\n  for (let i = 0; i < text.length; i++) {\n    // 1. break text into word groups\n    //  - if current char is white space\n    //  - else if next char is white space\n    //  - else if reach last char\n    if (text[i] === ' ') {\n      group = text[i];\n      groupStartCharIndex = i + 1;\n    } else if ((i + 1 < text.length && text[i + 1] === ' ') || i + 1 === text.length) {\n      group = text.substring(groupStartCharIndex, i + 1);\n      groupStartCharIndex = i + 1;\n    } else {\n      group = null;\n    }\n\n    if (group) {\n      // 2. break text into next row at maxWidth\n      let groupWidth = getTextWidth(group, iconMapping);\n      if (rowOffsetLeft + groupWidth > maxWidth) {\n        const lastGroupStartIndex = groupStartCharIndex - group.length;\n        if (rowStartCharIndex < lastGroupStartIndex) {\n          rows.push(text.substring(rowStartCharIndex, lastGroupStartIndex));\n          rowStartCharIndex = lastGroupStartIndex;\n          rowOffsetLeft = 0;\n        }\n\n        // if a single text group is bigger than maxWidth, then `break-all`\n        if (groupWidth > maxWidth) {\n          const subGroups = breakAll(group, maxWidth, iconMapping);\n          if (subGroups.rows.length > 1) {\n            // add all the sub rows to results except last row\n            rows = rows.concat(subGroups.rows.slice(0, subGroups.rows.length - 1));\n          }\n          // move reference to last row\n          rowStartCharIndex = rowStartCharIndex + subGroups.lastRowStartCharIndex;\n          groupWidth = subGroups.lastRowOffsetLeft;\n        }\n      }\n      rowOffsetLeft += groupWidth;\n    }\n  }\n\n  // last row\n  if (rowStartCharIndex < text.length) {\n    rows.push(text.substring(rowStartCharIndex));\n  }\n\n  return {\n    rows,\n    lastRowStartCharIndex: rowStartCharIndex,\n    lastRowOffsetLeft: rowOffsetLeft\n  };\n}\n/* eslint-enable max-statements, complexity, max-depth */\n\nexport function autoWrapping(text, wordBreak, maxWidth, iconMapping) {\n  if (wordBreak === 'break-all') {\n    return breakAll(text, maxWidth, iconMapping);\n  }\n  return breakWord(text, maxWidth, iconMapping);\n}\n\nfunction transformRow(row, iconMapping) {\n  let x = 0;\n  let rowHeight = 0;\n\n  const leftOffsets = new Array(row.length);\n  for (let i = 0; i < row.length; i++) {\n    const character = row[i];\n    const frame = iconMapping[character];\n    if (frame) {\n      if (!rowHeight) {\n        // frame.height should be a constant\n        rowHeight = frame.height;\n      }\n      leftOffsets[i] = x + frame.width / 2;\n      x += frame.width;\n    } else {\n      log.warn(`Missing character: ${character}`)();\n      leftOffsets[i] = x;\n      x += MISSING_CHAR_WIDTH;\n    }\n  }\n\n  return {\n    leftOffsets,\n    rowWidth: x,\n    rowHeight\n  };\n}\n\n/**\n * Transform a text paragraph to an array of characters, each character contains\n * @param paragraph: {String}\n * @param iconMapping {Object} character mapping table for retrieving a character from font atlas\n * @param lineHeight {Number} css line-height\n * @param wordBreak {String} css word-break option\n * @param maxWidth {number} css max-width\n * @param transformedData {Array} output transformed data array, each datum contains\n *   - text: character\n *   - index: character index in the paragraph\n *   - x: x offset in the row,\n *   - y: y offset in the paragraph\n *   - size: [width, height] size of the paragraph\n *   - rowSize: [rowWidth, rowHeight] size of the row\n *   - len: length of the paragraph\n */\n/* eslint-disable max-params, max-depth, complexity */\nexport function transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping) {\n  const result = new Array(paragraph.length);\n  const autoWrappingEnabled =\n    (wordBreak === 'break-word' || wordBreak === 'break-all') && isFinite(maxWidth) && maxWidth > 0;\n\n  // maxWidth and height of the paragraph\n  const size = [0, 0];\n  let rowOffsetTop = 0;\n  let lineStartIndex = 0;\n\n  for (let i = 0; i <= paragraph.length; i++) {\n    const char = paragraph[i];\n    let line;\n    if (char === '\\n' || char === undefined) {\n      line = paragraph.slice(lineStartIndex, i);\n    }\n\n    if (line) {\n      const rows = autoWrappingEnabled\n        ? autoWrapping(line, wordBreak, maxWidth, iconMapping).rows\n        : [line];\n\n      for (const row of rows) {\n        const {rowWidth, rowHeight, leftOffsets} = transformRow(row, iconMapping, lineHeight);\n\n        for (const x of leftOffsets) {\n          result[lineStartIndex++] = {\n            x,\n            y: rowOffsetTop + rowHeight / 2,\n            rowWidth\n          };\n        }\n\n        rowOffsetTop = rowOffsetTop + rowHeight * lineHeight;\n        size[0] = autoWrappingEnabled ? maxWidth : Math.max(size[0], rowWidth);\n      }\n    }\n\n    if (char === '\\n') {\n      // Make sure result.length matches paragraph.length\n      result[lineStartIndex++] = {x: 0, y: 0, rowWidth: 0};\n    }\n  }\n\n  // last row\n  size[1] = rowOffsetTop;\n  return {characters: result, size};\n}\n/* eslint-enable max-depth, complexity */\n\nexport function getTextFromBuffer({value, length, stride, offset, startIndices}) {\n  const bytesPerElement = value.BYTES_PER_ELEMENT;\n  const elementStride = stride ? stride / bytesPerElement : 1;\n  const elementOffset = offset ? offset / bytesPerElement : 0;\n  const characterCount =\n    startIndices[length] ||\n    Math.floor((value.length - elementOffset - bytesPerElement) / elementStride) + 1;\n\n  const texts = new Array(length);\n\n  let codes = value;\n  if (elementStride > 1 || elementOffset > 0) {\n    codes = new value.constructor(characterCount);\n    for (let i = 0; i < characterCount; i++) {\n      codes[i] = value[i * elementStride + elementOffset];\n    }\n  }\n\n  for (let index = 0; index < length; index++) {\n    const startIndex = startIndices[index];\n    const endIndex = startIndices[index + 1] || characterCount;\n    texts[index] = String.fromCodePoint.apply(null, codes.subarray(startIndex, endIndex));\n  }\n\n  return {texts, characterCount};\n}\n"]},"metadata":{},"sourceType":"module"}