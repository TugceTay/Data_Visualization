{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { createMat4, transformVector } from './math-utils';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport assert from './assert';\nvar PI = Math.PI;\nvar PI_4 = PI / 4;\nvar DEGREES_TO_RADIANS = PI / 180;\nvar RADIANS_TO_DEGREES = 180 / PI;\nvar TILE_SIZE = 512;\nvar EARTH_CIRCUMFERENCE = 40.03e6;\nvar DEFAULT_ALTITUDE = 1.5;\nexport function zoomToScale(zoom) {\n  return Math.pow(2, zoom);\n}\nexport function scaleToZoom(scale) {\n  return Math.log2(scale);\n}\nexport function lngLatToWorld(_ref, scale) {\n  var _ref2 = _slicedToArray(_ref, 2),\n    lng = _ref2[0],\n    lat = _ref2[1];\n  assert(Number.isFinite(lng) && Number.isFinite(scale));\n  assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');\n  scale *= TILE_SIZE;\n  var lambda2 = lng * DEGREES_TO_RADIANS;\n  var phi2 = lat * DEGREES_TO_RADIANS;\n  var x = scale * (lambda2 + PI) / (2 * PI);\n  var y = scale * (PI - Math.log(Math.tan(PI_4 + phi2 * 0.5))) / (2 * PI);\n  return [x, y];\n}\nexport function worldToLngLat(_ref3, scale) {\n  var _ref4 = _slicedToArray(_ref3, 2),\n    x = _ref4[0],\n    y = _ref4[1];\n  scale *= TILE_SIZE;\n  var lambda2 = x / scale * (2 * PI) - PI;\n  var phi2 = 2 * (Math.atan(Math.exp(PI - y / scale * (2 * PI))) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\nexport function getMeterZoom(_ref5) {\n  var latitude = _ref5.latitude;\n  assert(Number.isFinite(latitude));\n  var latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\nexport function getDistanceScales(_ref6) {\n  var latitude = _ref6.latitude,\n    longitude = _ref6.longitude,\n    zoom = _ref6.zoom,\n    scale = _ref6.scale,\n    _ref6$highPrecision = _ref6.highPrecision,\n    highPrecision = _ref6$highPrecision === void 0 ? false : _ref6$highPrecision;\n  scale = scale !== undefined ? scale : zoomToScale(zoom);\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude) && Number.isFinite(scale));\n  var result = {};\n  var worldSize = TILE_SIZE * scale;\n  var latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  var pixelsPerDegreeX = worldSize / 360;\n  var pixelsPerDegreeY = pixelsPerDegreeX / latCosine;\n  var altPixelsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n  result.pixelsPerMeter = [altPixelsPerMeter, -altPixelsPerMeter, altPixelsPerMeter];\n  result.metersPerPixel = [1 / altPixelsPerMeter, -1 / altPixelsPerMeter, 1 / altPixelsPerMeter];\n  result.pixelsPerDegree = [pixelsPerDegreeX, -pixelsPerDegreeY, altPixelsPerMeter];\n  result.degreesPerPixel = [1 / pixelsPerDegreeX, -1 / pixelsPerDegreeY, 1 / altPixelsPerMeter];\n  if (highPrecision) {\n    var latCosine2 = DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS) / latCosine;\n    var pixelsPerDegreeY2 = pixelsPerDegreeX * latCosine2 / 2;\n    var altPixelsPerDegree2 = worldSize / EARTH_CIRCUMFERENCE * latCosine2;\n    var altPixelsPerMeter2 = altPixelsPerDegree2 / pixelsPerDegreeY * altPixelsPerMeter;\n    result.pixelsPerDegree2 = [0, -pixelsPerDegreeY2, altPixelsPerDegree2];\n    result.pixelsPerMeter2 = [altPixelsPerMeter2, 0, altPixelsPerMeter2];\n  }\n  return result;\n}\nexport function addMetersToLngLat(lngLatZ, xyz) {\n  var _lngLatZ = _slicedToArray(lngLatZ, 3),\n    longitude = _lngLatZ[0],\n    latitude = _lngLatZ[1],\n    z0 = _lngLatZ[2];\n  var _xyz = _slicedToArray(xyz, 3),\n    x = _xyz[0],\n    y = _xyz[1],\n    z = _xyz[2];\n  var scale = 1;\n  var _getDistanceScales = getDistanceScales({\n      longitude: longitude,\n      latitude: latitude,\n      scale: scale,\n      highPrecision: true\n    }),\n    pixelsPerMeter = _getDistanceScales.pixelsPerMeter,\n    pixelsPerMeter2 = _getDistanceScales.pixelsPerMeter2;\n  var worldspace = lngLatToWorld(lngLatZ, scale);\n  worldspace[0] += x * (pixelsPerMeter[0] + pixelsPerMeter2[0] * y);\n  worldspace[1] += y * (pixelsPerMeter[1] + pixelsPerMeter2[1] * y);\n  var newLngLat = worldToLngLat(worldspace, scale);\n  var newZ = (z0 || 0) + (z || 0);\n  return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\nexport function getViewMatrix(_ref7) {\n  var height = _ref7.height,\n    pitch = _ref7.pitch,\n    bearing = _ref7.bearing,\n    altitude = _ref7.altitude,\n    _ref7$center = _ref7.center,\n    center = _ref7$center === void 0 ? null : _ref7$center,\n    _ref7$flipY = _ref7.flipY,\n    flipY = _ref7$flipY === void 0 ? false : _ref7$flipY;\n  var vm = createMat4();\n  mat4.translate(vm, vm, [0, 0, -altitude]);\n  mat4.scale(vm, vm, [1, 1, 1 / height]);\n  mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n  if (flipY) {\n    mat4.scale(vm, vm, [1, -1, 1]);\n  }\n  if (center) {\n    mat4.translate(vm, vm, vec3.negate([], center));\n  }\n  return vm;\n}\nexport function getProjectionParameters(_ref8) {\n  var width = _ref8.width,\n    height = _ref8.height,\n    _ref8$altitude = _ref8.altitude,\n    altitude = _ref8$altitude === void 0 ? DEFAULT_ALTITUDE : _ref8$altitude,\n    _ref8$pitch = _ref8.pitch,\n    pitch = _ref8$pitch === void 0 ? 0 : _ref8$pitch,\n    _ref8$nearZMultiplier = _ref8.nearZMultiplier,\n    nearZMultiplier = _ref8$nearZMultiplier === void 0 ? 1 : _ref8$nearZMultiplier,\n    _ref8$farZMultiplier = _ref8.farZMultiplier,\n    farZMultiplier = _ref8$farZMultiplier === void 0 ? 1 : _ref8$farZMultiplier;\n  var pitchRadians = pitch * DEGREES_TO_RADIANS;\n  var halfFov = Math.atan(0.5 / altitude);\n  var topHalfSurfaceDistance = Math.sin(halfFov) * altitude / Math.sin(Math.PI / 2 - pitchRadians - halfFov);\n  var farZ = Math.cos(Math.PI / 2 - pitchRadians) * topHalfSurfaceDistance + altitude;\n  return {\n    fov: 2 * Math.atan(height / 2 / altitude),\n    aspect: width / height,\n    focalDistance: altitude,\n    near: nearZMultiplier,\n    far: farZ * farZMultiplier\n  };\n}\nexport function getProjectionMatrix(_ref9) {\n  var width = _ref9.width,\n    height = _ref9.height,\n    pitch = _ref9.pitch,\n    altitude = _ref9.altitude,\n    nearZMultiplier = _ref9.nearZMultiplier,\n    farZMultiplier = _ref9.farZMultiplier;\n  var _getProjectionParamet = getProjectionParameters({\n      width: width,\n      height: height,\n      altitude: altitude,\n      pitch: pitch,\n      nearZMultiplier: nearZMultiplier,\n      farZMultiplier: farZMultiplier\n    }),\n    fov = _getProjectionParamet.fov,\n    aspect = _getProjectionParamet.aspect,\n    near = _getProjectionParamet.near,\n    far = _getProjectionParamet.far;\n  var projectionMatrix = mat4.perspective([], fov, aspect, near, far);\n  return projectionMatrix;\n}\nexport function worldToPixels(xyz, pixelProjectionMatrix) {\n  var _xyz2 = _slicedToArray(xyz, 3),\n    x = _xyz2[0],\n    y = _xyz2[1],\n    _xyz2$ = _xyz2[2],\n    z = _xyz2$ === void 0 ? 0 : _xyz2$;\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\nexport function pixelsToWorld(xyz, pixelUnprojectionMatrix) {\n  var targetZ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var _xyz3 = _slicedToArray(xyz, 3),\n    x = _xyz3[0],\n    y = _xyz3[1],\n    z = _xyz3[2];\n  assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');\n  if (Number.isFinite(z)) {\n    var coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n  var coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  var coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n  var z0 = coord0[2];\n  var z1 = coord1[2];\n  var t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2.lerp([], coord0, coord1, t);\n}","map":{"version":3,"sources":["../../src/web-mercator-utils.js"],"names":["createMat4","transformVector","mat4","vec2","vec3","assert","PI","Math","PI_4","DEGREES_TO_RADIANS","RADIANS_TO_DEGREES","TILE_SIZE","EARTH_CIRCUMFERENCE","DEFAULT_ALTITUDE","zoomToScale","zoom","pow","scaleToZoom","scale","log2","lngLatToWorld","lng","lat","Number","isFinite","lambda2","phi2","x","y","log","tan","worldToLngLat","atan","exp","getMeterZoom","latitude","latCosine","cos","getDistanceScales","longitude","highPrecision","undefined","result","worldSize","pixelsPerDegreeX","pixelsPerDegreeY","altPixelsPerMeter","pixelsPerMeter","metersPerPixel","pixelsPerDegree","degreesPerPixel","latCosine2","pixelsPerDegreeY2","altPixelsPerDegree2","altPixelsPerMeter2","pixelsPerDegree2","pixelsPerMeter2","addMetersToLngLat","lngLatZ","xyz","z0","z","worldspace","newLngLat","newZ","getViewMatrix","height","pitch","bearing","altitude","center","flipY","vm","translate","rotateX","rotateZ","negate","getProjectionParameters","width","nearZMultiplier","farZMultiplier","pitchRadians","halfFov","topHalfSurfaceDistance","sin","farZ","fov","aspect","focalDistance","near","far","getProjectionMatrix","projectionMatrix","perspective","worldToPixels","pixelProjectionMatrix","pixelsToWorld","pixelUnprojectionMatrix","targetZ","coord","coord0","coord1","z1","t","lerp"],"mappings":"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","sourcesContent":["// TODO - THE UTILITIES IN THIS FILE SHOULD BE IMPORTED FROM WEB-MERCATOR-VIEWPORT MODULE\n\nimport {createMat4, transformVector} from './math-utils';\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport assert from './assert';\n\n// CONSTANTS\nconst PI = Math.PI;\nconst PI_4 = PI / 4;\nconst DEGREES_TO_RADIANS = PI / 180;\nconst RADIANS_TO_DEGREES = 180 / PI;\nconst TILE_SIZE = 512;\n// Average circumference (40075 km equatorial, 40007 km meridional)\nconst EARTH_CIRCUMFERENCE = 40.03e6;\n\n// Mapbox default altitude\nconst DEFAULT_ALTITUDE = 1.5;\n\n/** Util functions **/\nexport function zoomToScale(zoom) {\n  return Math.pow(2, zoom);\n}\n\nexport function scaleToZoom(scale) {\n  return Math.log2(scale);\n}\n\n/**\n * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n * Performs the nonlinear part of the web mercator projection.\n * Remaining projection is done with 4x4 matrices which also handles\n * perspective.\n *\n * @param {Array} lngLat - [lng, lat] coordinates\n *   Specifies a point on the sphere to project onto the map.\n * @return {Array} [x,y] coordinates.\n */\nexport function lngLatToWorld([lng, lat], scale) {\n  assert(Number.isFinite(lng) && Number.isFinite(scale));\n  assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');\n\n  scale *= TILE_SIZE;\n  const lambda2 = lng * DEGREES_TO_RADIANS;\n  const phi2 = lat * DEGREES_TO_RADIANS;\n  const x = scale * (lambda2 + PI) / (2 * PI);\n  const y = scale * (PI - Math.log(Math.tan(PI_4 + phi2 * 0.5))) / (2 * PI);\n  return [x, y];\n}\n\n/**\n * Unproject world point [x,y] on map onto {lat, lon} on sphere\n *\n * @param {object|Vector} xy - object with {x,y} members\n *  representing point on projected map plane\n * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n *   Has toArray method if you need a GeoJSON Array.\n *   Per cartographic tradition, lat and lon are specified as degrees.\n */\nexport function worldToLngLat([x, y], scale) {\n  scale *= TILE_SIZE;\n  const lambda2 = (x / scale) * (2 * PI) - PI;\n  const phi2 = 2 * (Math.atan(Math.exp(PI - (y / scale) * (2 * PI))) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\n\n// Returns the zoom level that gives a 1 meter pixel at a certain latitude\n// 1 = C*cos(y)/2^z/TILE_SIZE = C*cos(y)/2^(z+9)\nexport function getMeterZoom({latitude}) {\n  assert(Number.isFinite(latitude));\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\n\n/**\n * Calculate distance scales in meters around current lat/lon, both for\n * degrees and pixels.\n * In mercator projection mode, the distance scales vary significantly\n * with latitude.\n */\nexport function getDistanceScales({latitude, longitude, zoom, scale, highPrecision = false}) {\n  // Calculate scale from zoom if not provided\n  scale = scale !== undefined ? scale : zoomToScale(zoom);\n\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude) && Number.isFinite(scale));\n\n  const result = {};\n  const worldSize = TILE_SIZE * scale;\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n\n  /**\n   * Number of pixels occupied by one degree longitude around current lat/lon:\n     pixelsPerDegreeX = d(lngLatToWorld([lng, lat])[0])/d(lng)\n       = scale * TILE_SIZE * DEGREES_TO_RADIANS / (2 * PI)\n     pixelsPerDegreeY = d(lngLatToWorld([lng, lat])[1])/d(lat)\n       = -scale * TILE_SIZE * DEGREES_TO_RADIANS / cos(lat * DEGREES_TO_RADIANS)  / (2 * PI)\n   */\n  const pixelsPerDegreeX = worldSize / 360;\n  const pixelsPerDegreeY = pixelsPerDegreeX / latCosine;\n\n  /**\n   * Number of pixels occupied by one meter around current lat/lon:\n   */\n  const altPixelsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n\n  /**\n   * LngLat: longitude -> east and latitude -> north (bottom left)\n   * UTM meter offset: x -> east and y -> north (bottom left)\n   * World space: x -> east and y -> south (top left)\n   *\n   * Y needs to be flipped when converting delta degree/meter to delta pixels\n   */\n  result.pixelsPerMeter = [altPixelsPerMeter, -altPixelsPerMeter, altPixelsPerMeter];\n  result.metersPerPixel = [1 / altPixelsPerMeter, -1 / altPixelsPerMeter, 1 / altPixelsPerMeter];\n\n  result.pixelsPerDegree = [pixelsPerDegreeX, -pixelsPerDegreeY, altPixelsPerMeter];\n  result.degreesPerPixel = [1 / pixelsPerDegreeX, -1 / pixelsPerDegreeY, 1 / altPixelsPerMeter];\n\n  /**\n   * Taylor series 2nd order for 1/latCosine\n     f'(a) * (x - a)\n       = d(1/cos(lat * DEGREES_TO_RADIANS))/d(lat) * dLat\n       = DEGREES_TO_RADIANS * tan(lat * DEGREES_TO_RADIANS) / cos(lat * DEGREES_TO_RADIANS) * dLat\n   */\n  if (highPrecision) {\n    const latCosine2 = DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS) / latCosine;\n    const pixelsPerDegreeY2 = pixelsPerDegreeX * latCosine2 / 2;\n    const altPixelsPerDegree2 = worldSize / EARTH_CIRCUMFERENCE * latCosine2;\n    const altPixelsPerMeter2 = altPixelsPerDegree2 / pixelsPerDegreeY * altPixelsPerMeter;\n\n    result.pixelsPerDegree2 = [0, -pixelsPerDegreeY2, altPixelsPerDegree2];\n    result.pixelsPerMeter2 = [altPixelsPerMeter2, 0, altPixelsPerMeter2];\n  }\n\n  // Main results, used for converting meters to latlng deltas and scaling offsets\n  return result;\n}\n\n/**\n * Offset a lng/lat position by meterOffset (northing, easting)\n */\nexport function addMetersToLngLat(lngLatZ, xyz) {\n  const [longitude, latitude, z0] = lngLatZ;\n  const [x, y, z] = xyz;\n\n  const scale = 1; // any constant works\n  const {pixelsPerMeter, pixelsPerMeter2} = getDistanceScales({\n    longitude,\n    latitude,\n    scale,\n    highPrecision: true\n  });\n\n  const worldspace = lngLatToWorld(lngLatZ, scale);\n  worldspace[0] += x * (pixelsPerMeter[0] + pixelsPerMeter2[0] * y);\n  worldspace[1] += y * (pixelsPerMeter[1] + pixelsPerMeter2[1] * y);\n\n  const newLngLat = worldToLngLat(worldspace, scale);\n  const newZ = (z0 || 0) + (z || 0);\n\n  return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\n\n// ATTRIBUTION:\n// view and projection matrix creation is intentionally kept compatible with\n// mapbox-gl's implementation to ensure that seamless interoperation\n// with mapbox and react-map-gl. See: https://github.com/mapbox/mapbox-gl-js\n\nexport function getViewMatrix({\n  // Viewport props\n  height,\n  pitch,\n  bearing,\n  altitude,\n  // Pre-calculated parameters\n  center = null,\n  // Options\n  flipY = false\n}) {\n\n  // VIEW MATRIX: PROJECTS MERCATOR WORLD COORDINATES\n  // Note that mercator world coordinates typically need to be flipped\n  //\n  // Note: As usual, matrix operation orders should be read in reverse\n  // since vectors will be multiplied from the right during transformation\n  const vm = createMat4();\n\n  // Move camera to altitude (along the pitch & bearing direction)\n  mat4.translate(vm, vm, [0, 0, -altitude]);\n\n  // After the rotateX, z values are in pixel units. Convert them to\n  // altitude units. 1 altitude unit = the screen height.\n  mat4.scale(vm, vm, [1, 1, 1 / height]);\n\n  // Rotate by bearing, and then by pitch (which tilts the view)\n  mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n\n  if (flipY) {\n    mat4.scale(vm, vm, [1, -1, 1]);\n  }\n\n  if (center) {\n    mat4.translate(vm, vm, vec3.negate([], center));\n  }\n\n  return vm;\n}\n\n// PROJECTION MATRIX PARAMETERS\n// Variable fov (in radians)\nexport function getProjectionParameters({\n  width,\n  height,\n  altitude = DEFAULT_ALTITUDE,\n  pitch = 0,\n  nearZMultiplier = 1,\n  farZMultiplier = 1\n}) {\n  // Find the distance from the center point to the center top\n  // in altitude units using law of sines.\n  const pitchRadians = pitch * DEGREES_TO_RADIANS;\n  const halfFov = Math.atan(0.5 / altitude);\n  const topHalfSurfaceDistance =\n    Math.sin(halfFov) * altitude / Math.sin(Math.PI / 2 - pitchRadians - halfFov);\n\n  // Calculate z value of the farthest fragment that should be rendered.\n  const farZ = Math.cos(Math.PI / 2 - pitchRadians) * topHalfSurfaceDistance + altitude;\n\n  return {\n    fov: 2 * Math.atan((height / 2) / altitude),\n    aspect: width / height,\n    focalDistance: altitude,\n    near: nearZMultiplier,\n    far: farZ * farZMultiplier\n  };\n}\n\n// PROJECTION MATRIX: PROJECTS FROM CAMERA (VIEW) SPACE TO CLIPSPACE\n// To match mapbox's z buffer:\n// <= 0.28 - nearZMultiplier: 0.1, farZmultiplier: 1\n// >= 0.29 - nearZMultiplier: 1 / height, farZMultiplier: 1.01\nexport function getProjectionMatrix({\n  width,\n  height,\n  pitch,\n  altitude,\n  nearZMultiplier,\n  farZMultiplier\n}) {\n  const {fov, aspect, near, far} =\n    getProjectionParameters({width, height, altitude, pitch, nearZMultiplier, farZMultiplier});\n\n  const projectionMatrix = mat4.perspective(\n    [],\n    fov,      // fov in radians\n    aspect,   // aspect ratio\n    near,     // near plane\n    far       // far plane\n  );\n\n  return projectionMatrix;\n}\n\n/**\n * Project flat coordinates to pixels on screen.\n *\n * @param {Array} xyz - flat coordinate on 512*512 Mercator Zoom 0 tile\n * @param {Matrix4} pixelProjectionMatrix - projection matrix\n * @return {Array} [x, y, depth] pixel coordinate on screen.\n */\nexport function worldToPixels(xyz, pixelProjectionMatrix) {\n  const [x, y, z = 0] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\n\n/**\n * Unproject pixels on screen to flat coordinates.\n *\n * @param {Array} xyz - pixel coordinate on screen.\n * @param {Matrix4} pixelUnprojectionMatrix - unprojection matrix\n * @param {Number} targetZ - if pixel coordinate does not have a 3rd component (depth),\n *    targetZ is used as the elevation plane to unproject onto\n * @return {Array} [x, y, Z] flat coordinates on 512*512 Mercator Zoom 0 tile.\n */\nexport function pixelsToWorld(xyz, pixelUnprojectionMatrix, targetZ = 0) {\n  const [x, y, z] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');\n\n  if (Number.isFinite(z)) {\n    // Has depth component\n    const coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n\n  // since we don't know the correct projected z value for the point,\n  // unproject two points to get a line and then find the point on that line with z=0\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n\n  const z0 = coord0[2];\n  const z1 = coord1[2];\n\n  const t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2.lerp([], coord0, coord1, t);\n}\n"]},"metadata":{},"sourceType":"module"}