{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { parse3DTileHeaderSync } from './helpers/parse-3d-tile-header';\nexport function parseComposite3DTile(_x, _x2, _x3, _x4, _x5, _x6) {\n  return _parseComposite3DTile.apply(this, arguments);\n}\nfunction _parseComposite3DTile() {\n  _parseComposite3DTile = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(tile, arrayBuffer, byteOffset, options, context, parse3DTile) {\n    var view, subtile;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset);\n            view = new DataView(arrayBuffer);\n            tile.tilesLength = view.getUint32(byteOffset, true);\n            byteOffset += 4;\n            tile.tiles = [];\n          case 5:\n            if (!(tile.tiles.length < tile.tilesLength && tile.byteLength - byteOffset > 12)) {\n              _context.next = 13;\n              break;\n            }\n            subtile = {};\n            tile.tiles.push(subtile);\n            _context.next = 10;\n            return parse3DTile(arrayBuffer, byteOffset, options, context, subtile);\n          case 10:\n            byteOffset = _context.sent;\n            _context.next = 5;\n            break;\n          case 13:\n            return _context.abrupt(\"return\", byteOffset);\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseComposite3DTile.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-3d-tile-composite.js"],"names":["parse3DTileHeaderSync","parseComposite3DTile","tile","arrayBuffer","byteOffset","options","context","parse3DTile","view","DataView","tilesLength","getUint32","tiles","length","byteLength","subtile","push"],"mappings":";;AAMA,SAAQA,qBAAR,QAAoC,gCAApC;AAGA,OAAA,SAAsBC,oBAAtB,CAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA;EAAA,OAAA,qBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;qEAAO,SAAA,OAAA,CACLC,IADK,EAELC,WAFK,EAGLC,UAHK,EAILC,OAJK,EAKLC,OALK,EAMLC,WANK,EAAA;IAAA,IAAA,IAAA,EAAA,OAAA;IAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YAQLH,UAAU,GAAGJ,qBAAqB,CAACE,IAAD,EAAOC,WAAP,EAAoBC,UAApB,CAAlCA;YAEMI,IAVD,GAUQ,IAAIC,QAAJ,CAAaN,WAAb,CAVR;YAaLD,IAAI,CAACQ,WAALR,GAAmBM,IAAI,CAACG,SAALH,CAAeJ,UAAfI,EAA2B,IAA3BA,CAAnBN;YACAE,UAAU,IAAI,CAAdA;YAGAF,IAAI,CAACU,KAALV,GAAa,EAAbA;UAjBK,KAAA,CAAA;YAAA,IAAA,EAkBEA,IAAI,CAACU,KAALV,CAAWW,MAAXX,GAAoBA,IAAI,CAACQ,WAAzBR,IAAwCA,IAAI,CAACY,UAALZ,GAAkBE,UAAlBF,GAA+B,EAlBzE,CAAA,EAAA;cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;YAmBGa,OAnBH,GAmBa,CAAA,CAnBb;YAoBHb,IAAI,CAACU,KAALV,CAAWc,IAAXd,CAAgBa,OAAhBb,CAAAA;YApBG,QAAA,CAAA,IAAA,GAAA,EAAA;YAAA,OAqBgBK,WAAW,CAACJ,WAAD,EAAcC,UAAd,EAA0BC,OAA1B,EAAmCC,OAAnC,EAA4CS,OAA5C,CArB3B;UAAA,KAAA,EAAA;YAqBHX,UArBG,GAAA,QAAA,CAAA,IAAA;YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;YAAA;UAAA,KAAA,EAAA;YAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAyBEA,UAzBF,CAAA;UAAA,KAAA,EAAA;UAAA,KAAA,KAAA;YAAA,OAAA,QAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,OAAA,CAAA;EAAA,C","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n// Reference code:\n// https://github.com/AnalyticalGraphicsInc/cesium/blob/master/Source/Scene/Composite3DTileContent.js#L182\n\nimport {parse3DTileHeaderSync} from './helpers/parse-3d-tile-header';\n\n// eslint-disable-next-line max-params\nexport async function parseComposite3DTile(\n  tile,\n  arrayBuffer,\n  byteOffset,\n  options,\n  context,\n  parse3DTile\n) {\n  byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset);\n\n  const view = new DataView(arrayBuffer);\n\n  // Extract number of tiles\n  tile.tilesLength = view.getUint32(byteOffset, true);\n  byteOffset += 4;\n\n  // extract each tile from the byte stream\n  tile.tiles = [];\n  while (tile.tiles.length < tile.tilesLength && tile.byteLength - byteOffset > 12) {\n    const subtile = {};\n    tile.tiles.push(subtile);\n    byteOffset = await parse3DTile(arrayBuffer, byteOffset, options, context, subtile);\n    // TODO - do we need to add any padding in between tiles?\n  }\n\n  return byteOffset;\n}\n"]},"metadata":{},"sourceType":"module"}