{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { getBinaryImageMIMEType } from '@loaders.gl/images';\nimport { padTo4Bytes, copyToArray } from '@loaders.gl/loader-utils';\nimport assert from './utils/assert';\nimport { getAccessorArrayTypeAndLength, getAccessorTypeFromSize, getComponentTypeFromArray } from './gltf-utils/gltf-utils';\nvar GLTFScenegraph = function () {\n  function GLTFScenegraph(gltf) {\n    _classCallCheck(this, GLTFScenegraph);\n    if (gltf instanceof GLTFScenegraph) {\n      return gltf;\n    }\n    if (!gltf) {\n      gltf = {\n        json: {\n          asset: {\n            version: '2.0',\n            generator: 'loaders.gl'\n          },\n          buffers: []\n        },\n        buffers: []\n      };\n    }\n    this.byteLength = 0;\n    this.gltf = gltf;\n    assert(this.gltf.json);\n  }\n  _createClass(GLTFScenegraph, [{\n    key: \"getApplicationData\",\n    value: function getApplicationData(key) {\n      var data = this.json[key];\n      return data;\n    }\n  }, {\n    key: \"getExtraData\",\n    value: function getExtraData(key) {\n      var extras = this.json.extras || {};\n      return extras[key];\n    }\n  }, {\n    key: \"getExtension\",\n    value: function getExtension(extensionName) {\n      var isExtension = this.getUsedExtensions().find(function (name) {\n        return name === extensionName;\n      });\n      var extensions = this.json.extensions || {};\n      return isExtension ? extensions[extensionName] || true : null;\n    }\n  }, {\n    key: \"getRequiredExtension\",\n    value: function getRequiredExtension(extensionName) {\n      var isRequired = this.getRequiredExtensions().find(function (name) {\n        return name === extensionName;\n      });\n      return isRequired ? this.getExtension(extensionName) : null;\n    }\n  }, {\n    key: \"getRequiredExtensions\",\n    value: function getRequiredExtensions() {\n      return this.json.extensionsRequired || [];\n    }\n  }, {\n    key: \"getUsedExtensions\",\n    value: function getUsedExtensions() {\n      return this.json.extensionsUsed || [];\n    }\n  }, {\n    key: \"getObjectExtension\",\n    value: function getObjectExtension(object, extensionName) {\n      var extensions = object.extensions || {};\n      return extensions[extensionName];\n    }\n  }, {\n    key: \"getScene\",\n    value: function getScene(index) {\n      return this.getObject('scenes', index);\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode(index) {\n      return this.getObject('nodes', index);\n    }\n  }, {\n    key: \"getSkin\",\n    value: function getSkin(index) {\n      return this.getObject('skins', index);\n    }\n  }, {\n    key: \"getMesh\",\n    value: function getMesh(index) {\n      return this.getObject('meshes', index);\n    }\n  }, {\n    key: \"getMaterial\",\n    value: function getMaterial(index) {\n      return this.getObject('materials', index);\n    }\n  }, {\n    key: \"getAccessor\",\n    value: function getAccessor(index) {\n      return this.getObject('accessors', index);\n    }\n  }, {\n    key: \"getCamera\",\n    value: function getCamera(index) {\n      return null;\n    }\n  }, {\n    key: \"getTexture\",\n    value: function getTexture(index) {\n      return this.getObject('textures', index);\n    }\n  }, {\n    key: \"getSampler\",\n    value: function getSampler(index) {\n      return this.getObject('samplers', index);\n    }\n  }, {\n    key: \"getImage\",\n    value: function getImage(index) {\n      return this.getObject('images', index);\n    }\n  }, {\n    key: \"getBufferView\",\n    value: function getBufferView(index) {\n      return this.getObject('bufferViews', index);\n    }\n  }, {\n    key: \"getBuffer\",\n    value: function getBuffer(index) {\n      return this.getObject('buffers', index);\n    }\n  }, {\n    key: \"getObject\",\n    value: function getObject(array, index) {\n      if (_typeof(index) === 'object') {\n        return index;\n      }\n      var object = this.json[array] && this.json[array][index];\n      if (!object) {\n        throw new Error(\"glTF file error: Could not find \".concat(array, \"[\").concat(index, \"]\"));\n      }\n      return object;\n    }\n  }, {\n    key: \"getTypedArrayForBufferView\",\n    value: function getTypedArrayForBufferView(bufferView) {\n      bufferView = this.getBufferView(bufferView);\n      var bufferIndex = bufferView.buffer;\n      var binChunk = this.gltf.buffers[bufferIndex];\n      assert(binChunk);\n      var byteOffset = (bufferView.byteOffset || 0) + binChunk.byteOffset;\n      return new Uint8Array(binChunk.arrayBuffer, byteOffset, bufferView.byteLength);\n    }\n  }, {\n    key: \"getTypedArrayForAccessor\",\n    value: function getTypedArrayForAccessor(accessor) {\n      accessor = this.getAccessor(accessor);\n      var bufferView = this.getBufferView(accessor.bufferView);\n      var buffer = this.getBuffer(bufferView.buffer);\n      var arrayBuffer = buffer.data;\n      var _getAccessorArrayType = getAccessorArrayTypeAndLength(accessor, bufferView),\n        ArrayType = _getAccessorArrayType.ArrayType,\n        length = _getAccessorArrayType.length;\n      var byteOffset = bufferView.byteOffset + accessor.byteOffset;\n      return new ArrayType(arrayBuffer, byteOffset, length);\n    }\n  }, {\n    key: \"getTypedArrayForImageData\",\n    value: function getTypedArrayForImageData(image) {\n      image = this.getAccessor(image);\n      var bufferView = this.getBufferView(image.bufferView);\n      var buffer = this.getBuffer(bufferView.buffer);\n      var arrayBuffer = buffer.data;\n      var byteOffset = bufferView.byteOffset || 0;\n      return new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n    }\n  }, {\n    key: \"addApplicationData\",\n    value: function addApplicationData(key, data) {\n      this.json[key] = data;\n      return this;\n    }\n  }, {\n    key: \"addExtraData\",\n    value: function addExtraData(key, data) {\n      this.json.extras = this.json.extras || {};\n      this.json.extras[key] = data;\n      return this;\n    }\n  }, {\n    key: \"addObjectExtension\",\n    value: function addObjectExtension(object, extensionName, data) {\n      assert(data);\n      object.extensions = object.extensions || {};\n      object.extensions[extensionName] = data;\n      this.registerUsedExtension(extensionName);\n      return this;\n    }\n  }, {\n    key: \"setObjectExtension\",\n    value: function setObjectExtension(object, extensionName, data) {\n      var extensions = object.extensions || {};\n      extensions[extensionName] = data;\n    }\n  }, {\n    key: \"removeObjectExtension\",\n    value: function removeObjectExtension(object, extensionName) {\n      var extensions = object.extensions || {};\n      var extension = extensions[extensionName];\n      delete extensions[extensionName];\n      return extension;\n    }\n  }, {\n    key: \"addExtension\",\n    value: function addExtension(extensionName) {\n      var extensionData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      assert(extensionData);\n      this.json.extensions = this.json.extensions || {};\n      this.json.extensions[extensionName] = extensionData;\n      this.registerUsedExtension(extensionName);\n      return extensionData;\n    }\n  }, {\n    key: \"addRequiredExtension\",\n    value: function addRequiredExtension(extensionName) {\n      var extensionData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      assert(extensionData);\n      this.addExtension(extensionName, extensionData);\n      this.registerRequiredExtension(extensionName);\n      return extensionData;\n    }\n  }, {\n    key: \"registerUsedExtension\",\n    value: function registerUsedExtension(extensionName) {\n      this.json.extensionsUsed = this.json.extensionsUsed || [];\n      if (!this.json.extensionsUsed.find(function (ext) {\n        return ext === extensionName;\n      })) {\n        this.json.extensionsUsed.push(extensionName);\n      }\n    }\n  }, {\n    key: \"registerRequiredExtension\",\n    value: function registerRequiredExtension(extensionName) {\n      this.registerUsedExtension(extensionName);\n      this.json.extensionsRequired = this.json.extensionsRequired || [];\n      if (!this.json.extensionsRequired.find(function (ext) {\n        return ext === extensionName;\n      })) {\n        this.json.extensionsRequired.push(extensionName);\n      }\n    }\n  }, {\n    key: \"removeExtension\",\n    value: function removeExtension(extensionName) {\n      if (this.json.extensionsRequired) {\n        this._removeStringFromArray(this.json.extensionsRequired, extensionName);\n      }\n      if (this.json.extensionsUsed) {\n        this._removeStringFromArray(this.json.extensionsUsed, extensionName);\n      }\n      if (this.json.extensions) {\n        delete this.json.extensions[extensionName];\n      }\n    }\n  }, {\n    key: \"addMesh\",\n    value: function addMesh(attributes, indices) {\n      var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n      var accessors = this._addAttributes(attributes);\n      var glTFMesh = {\n        primitives: [{\n          attributes: accessors,\n          indices: indices,\n          mode: mode\n        }]\n      };\n      this.json.meshes = this.json.meshes || [];\n      this.json.meshes.push(glTFMesh);\n      return this.json.meshes.length - 1;\n    }\n  }, {\n    key: \"addPointCloud\",\n    value: function addPointCloud(attributes) {\n      var accessorIndices = this._addAttributes(attributes);\n      var glTFMesh = {\n        primitives: [{\n          attributes: accessorIndices,\n          mode: 0\n        }]\n      };\n      this.json.meshes = this.json.meshes || [];\n      this.json.meshes.push(glTFMesh);\n      return this.json.meshes.length - 1;\n    }\n  }, {\n    key: \"addImage\",\n    value: function addImage(imageData, mimeType) {\n      mimeType = mimeType || getBinaryImageMIMEType(imageData);\n      var bufferViewIndex = this.addBufferView(imageData);\n      var glTFImage = {\n        bufferView: bufferViewIndex,\n        mimeType: mimeType\n      };\n      this.json.images = this.json.images || [];\n      this.json.images.push(glTFImage);\n      return this.json.images.length - 1;\n    }\n  }, {\n    key: \"addBufferView\",\n    value: function addBufferView(buffer) {\n      var byteLength = buffer.byteLength;\n      assert(Number.isFinite(byteLength));\n      this.sourceBuffers = this.sourceBuffers || [];\n      this.sourceBuffers.push(buffer);\n      var glTFBufferView = {\n        buffer: 0,\n        byteOffset: this.byteLength,\n        byteLength: byteLength\n      };\n      this.byteLength += padTo4Bytes(byteLength);\n      this.json.bufferViews = this.json.bufferViews || [];\n      this.json.bufferViews.push(glTFBufferView);\n      return this.json.bufferViews.length - 1;\n    }\n  }, {\n    key: \"addAccessor\",\n    value: function addAccessor(bufferViewIndex, accessor) {\n      var glTFAccessor = {\n        bufferView: bufferViewIndex,\n        type: getAccessorTypeFromSize(accessor.size),\n        componentType: accessor.componentType,\n        count: accessor.count\n      };\n      this.json.accessors = this.json.accessors || [];\n      this.json.accessors.push(glTFAccessor);\n      return this.json.accessors.length - 1;\n    }\n  }, {\n    key: \"addBinaryBuffer\",\n    value: function addBinaryBuffer(sourceBuffer) {\n      var accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        size: 3\n      };\n      var bufferViewIndex = this.addBufferView(sourceBuffer);\n      var accessorDefaults = {\n        size: accessor.size,\n        componentType: getComponentTypeFromArray(sourceBuffer),\n        count: Math.round(sourceBuffer.length / accessor.size)\n      };\n      return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));\n    }\n  }, {\n    key: \"createBinaryChunk\",\n    value: function createBinaryChunk() {\n      if (this.arrayBuffer) {\n        return;\n      }\n      var totalByteLength = this.byteLength;\n      var arrayBuffer = new ArrayBuffer(totalByteLength);\n      var targetArray = new Uint8Array(arrayBuffer);\n      var dstByteOffset = 0;\n      for (var i = 0; i < this.sourceBuffers.length; i++) {\n        var sourceBuffer = this.sourceBuffers[i];\n        dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);\n      }\n      this.json.buffers[0].byteLength = totalByteLength;\n      this.arrayBuffer = arrayBuffer;\n      this.sourceBuffers = [];\n    }\n  }, {\n    key: \"_removeStringFromArray\",\n    value: function _removeStringFromArray(array, string) {\n      var found = true;\n      while (found) {\n        var index = array.indexOf(string);\n        if (index > -1) {\n          array.splice(index, 1);\n        } else {\n          found = false;\n        }\n      }\n    }\n  }, {\n    key: \"json\",\n    get: function get() {\n      return this.gltf.json;\n    }\n  }]);\n  return GLTFScenegraph;\n}();\nexport { GLTFScenegraph as default };","map":{"version":3,"sources":["../../../src/lib/gltf-scenegraph.js"],"names":["getBinaryImageMIMEType","padTo4Bytes","copyToArray","assert","getAccessorArrayTypeAndLength","getAccessorTypeFromSize","getComponentTypeFromArray","GLTFScenegraph","gltf","json","asset","version","generator","buffers","byteLength","key","data","extras","extensionName","isExtension","getUsedExtensions","find","name","extensions","isRequired","getRequiredExtensions","getExtension","extensionsRequired","extensionsUsed","object","index","getObject","array","Error","bufferView","getBufferView","bufferIndex","buffer","binChunk","byteOffset","Uint8Array","arrayBuffer","accessor","getAccessor","getBuffer","ArrayType","length","image","registerUsedExtension","extension","extensionData","addExtension","registerRequiredExtension","ext","push","_removeStringFromArray","attributes","indices","mode","accessors","_addAttributes","glTFMesh","primitives","meshes","accessorIndices","imageData","mimeType","bufferViewIndex","addBufferView","glTFImage","images","Number","isFinite","sourceBuffers","glTFBufferView","bufferViews","glTFAccessor","type","size","componentType","count","sourceBuffer","accessorDefaults","Math","round","addAccessor","Object","assign","totalByteLength","ArrayBuffer","targetArray","dstByteOffset","i","string","found","indexOf","splice"],"mappings":";;;AAAA,SAAQA,sBAAR,QAAqC,oBAArC;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,0BAAvC;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,SACEC,6BADF,EAEEC,uBAFF,EAGEC,yBAHF,QAIO,yBAJP;IAOqBC,c;EAEnB,SAAA,cAAA,CAAYC,IAAZ,EAAkB;IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,CAAA;IAGhB,IAAIA,IAAI,YAAYD,cAApB,EAAoC;MAClC,OAAOC,IAAP;IACD;IAED,IAAI,CAACA,IAAL,EAAW;MACTA,IAAI,GAAG;QACLC,IAAI,EAAE;UACJC,KAAK,EAAE;YACLC,OAAO,EAAE,KADJ;YAELC,SAAS,EAAE;UAFN,CADH;UAKJC,OAAO,EAAE;QALL,CADD;QAQLA,OAAO,EAAE;MARJ,CAAPL;IAUD;IAED,IAAA,CAAKM,UAAL,GAAkB,CAAlB;IAEA,IAAA,CAAKN,IAAL,GAAYA,IAAZ;IACAL,MAAM,CAAC,IAAA,CAAKK,IAAL,CAAUC,IAAX,CAANN;EACD;;;uCAQkBY,G,EAAK;MAEtB,IAAMC,IAAI,GAAG,IAAA,CAAKP,IAAL,CAAUM,GAAV,CAAb;MACA,OAAOC,IAAP;IACD;;;iCAEYD,G,EAAK;MAEhB,IAAME,MAAM,GAAG,IAAA,CAAKR,IAAL,CAAUQ,MAAV,IAAoB,CAAA,CAAnC;MACA,OAAOA,MAAM,CAACF,GAAD,CAAb;IACD;;;iCAEYG,a,EAAe;MAC1B,IAAMC,WAAW,GAAG,IAAA,CAAKC,iBAAL,EAAA,CAAyBC,IAAzB,CAA8B,UAAA,IAAI,EAAA;QAAA,OAAIC,IAAI,KAAKJ,aAAb;MAAA,CAAlC,CAApB;MACA,IAAMK,UAAU,GAAG,IAAA,CAAKd,IAAL,CAAUc,UAAV,IAAwB,CAAA,CAA3C;MACA,OAAOJ,WAAW,GAAGI,UAAU,CAACL,aAAD,CAAVK,IAA6B,IAAhC,GAAuC,IAAzD;IACD;;;yCAEoBL,a,EAAe;MAClC,IAAMM,UAAU,GAAG,IAAA,CAAKC,qBAAL,EAAA,CAA6BJ,IAA7B,CAAkC,UAAA,IAAI,EAAA;QAAA,OAAIC,IAAI,KAAKJ,aAAb;MAAA,CAAtC,CAAnB;MACA,OAAOM,UAAU,GAAG,IAAA,CAAKE,YAAL,CAAkBR,aAAlB,CAAH,GAAsC,IAAvD;IACD;;;4CAEuB;MACtB,OAAO,IAAA,CAAKT,IAAL,CAAUkB,kBAAV,IAAgC,EAAvC;IACD;;;wCAEmB;MAClB,OAAO,IAAA,CAAKlB,IAAL,CAAUmB,cAAV,IAA4B,EAAnC;IACD;;;uCAEkBC,M,EAAQX,a,EAAe;MACxC,IAAMK,UAAU,GAAGM,MAAM,CAACN,UAAPM,IAAqB,CAAA,CAAxC;MACA,OAAON,UAAU,CAACL,aAAD,CAAjB;IACD;;;6BAEQY,K,EAAO;MACd,OAAO,IAAA,CAAKC,SAAL,CAAe,QAAf,EAAyBD,KAAzB,CAAP;IACD;;;4BAEOA,K,EAAO;MACb,OAAO,IAAA,CAAKC,SAAL,CAAe,OAAf,EAAwBD,KAAxB,CAAP;IACD;;;4BAEOA,K,EAAO;MACb,OAAO,IAAA,CAAKC,SAAL,CAAe,OAAf,EAAwBD,KAAxB,CAAP;IACD;;;4BAEOA,K,EAAO;MACb,OAAO,IAAA,CAAKC,SAAL,CAAe,QAAf,EAAyBD,KAAzB,CAAP;IACD;;;gCAEWA,K,EAAO;MACjB,OAAO,IAAA,CAAKC,SAAL,CAAe,WAAf,EAA4BD,KAA5B,CAAP;IACD;;;gCAEWA,K,EAAO;MACjB,OAAO,IAAA,CAAKC,SAAL,CAAe,WAAf,EAA4BD,KAA5B,CAAP;IACD;;;8BAESA,K,EAAO;MACf,OAAO,IAAP;IACD;;;+BAEUA,K,EAAO;MAChB,OAAO,IAAA,CAAKC,SAAL,CAAe,UAAf,EAA2BD,KAA3B,CAAP;IACD;;;+BAEUA,K,EAAO;MAChB,OAAO,IAAA,CAAKC,SAAL,CAAe,UAAf,EAA2BD,KAA3B,CAAP;IACD;;;6BAEQA,K,EAAO;MACd,OAAO,IAAA,CAAKC,SAAL,CAAe,QAAf,EAAyBD,KAAzB,CAAP;IACD;;;kCAEaA,K,EAAO;MACnB,OAAO,IAAA,CAAKC,SAAL,CAAe,aAAf,EAA8BD,KAA9B,CAAP;IACD;;;8BAESA,K,EAAO;MACf,OAAO,IAAA,CAAKC,SAAL,CAAe,SAAf,EAA0BD,KAA1B,CAAP;IACD;;;8BAESE,K,EAAOF,K,EAAO;MAEtB,IAAI,OAAA,CAAOA,KAAP,CAAA,KAAiB,QAArB,EAA+B;QAC7B,OAAOA,KAAP;MACD;MACD,IAAMD,MAAM,GAAG,IAAA,CAAKpB,IAAL,CAAUuB,KAAV,CAAA,IAAoB,IAAA,CAAKvB,IAAL,CAAUuB,KAAV,CAAA,CAAiBF,KAAjB,CAAnC;MACA,IAAI,CAACD,MAAL,EAAa;QACX,MAAM,IAAII,KAAJ,CAAA,kCAAA,CAAA,MAAA,CAA6CD,KAA7C,EAAA,GAAA,CAAA,CAAA,MAAA,CAAsDF,KAAtD,EAAA,GAAA,CAAA,CAAN;MACD;MACD,OAAOD,MAAP;IACD;;;+CAI0BK,U,EAAY;MACrCA,UAAU,GAAG,IAAA,CAAKC,aAAL,CAAmBD,UAAnB,CAAbA;MACA,IAAME,WAAW,GAAGF,UAAU,CAACG,MAA/B;MAIA,IAAMC,QAAQ,GAAG,IAAA,CAAK9B,IAAL,CAAUK,OAAV,CAAkBuB,WAAlB,CAAjB;MACAjC,MAAM,CAACmC,QAAD,CAANnC;MAEA,IAAMoC,UAAU,GAAG,CAACL,UAAU,CAACK,UAAXL,IAAyB,CAA1B,IAA+BI,QAAQ,CAACC,UAA3D;MACA,OAAO,IAAIC,UAAJ,CAAeF,QAAQ,CAACG,WAAxB,EAAqCF,UAArC,EAAiDL,UAAU,CAACpB,UAA5D,CAAP;IACD;;;6CAIwB4B,Q,EAAU;MACjCA,QAAQ,GAAG,IAAA,CAAKC,WAAL,CAAiBD,QAAjB,CAAXA;MACA,IAAMR,UAAU,GAAG,IAAA,CAAKC,aAAL,CAAmBO,QAAQ,CAACR,UAA5B,CAAnB;MACA,IAAMG,MAAM,GAAG,IAAA,CAAKO,SAAL,CAAeV,UAAU,CAACG,MAA1B,CAAf;MACA,IAAMI,WAAW,GAAGJ,MAAM,CAACrB,IAA3B;MAJiC,IAAA,qBAAA,GAOLZ,6BAA6B,CAACsC,QAAD,EAAWR,UAAX,CAPxB;QAO1BW,SAP0B,GAAA,qBAAA,CAO1BA,SAP0B;QAOfC,MAPe,GAAA,qBAAA,CAOfA,MAPe;MAQjC,IAAMP,UAAU,GAAGL,UAAU,CAACK,UAAXL,GAAwBQ,QAAQ,CAACH,UAApD;MACA,OAAO,IAAIM,SAAJ,CAAcJ,WAAd,EAA2BF,UAA3B,EAAuCO,MAAvC,CAAP;IACD;;;8CAIyBC,K,EAAO;MAC/BA,KAAK,GAAG,IAAA,CAAKJ,WAAL,CAAiBI,KAAjB,CAARA;MACA,IAAMb,UAAU,GAAG,IAAA,CAAKC,aAAL,CAAmBY,KAAK,CAACb,UAAzB,CAAnB;MACA,IAAMG,MAAM,GAAG,IAAA,CAAKO,SAAL,CAAeV,UAAU,CAACG,MAA1B,CAAf;MACA,IAAMI,WAAW,GAAGJ,MAAM,CAACrB,IAA3B;MAEA,IAAMuB,UAAU,GAAGL,UAAU,CAACK,UAAXL,IAAyB,CAA5C;MACA,OAAO,IAAIM,UAAJ,CAAeC,WAAf,EAA4BF,UAA5B,EAAwCL,UAAU,CAACpB,UAAnD,CAAP;IACD;;;uCAKkBC,G,EAAKC,I,EAAM;MAC5B,IAAA,CAAKP,IAAL,CAAUM,GAAV,CAAA,GAAiBC,IAAjB;MACA,OAAO,IAAP;IACD;;;iCAGYD,G,EAAKC,I,EAAM;MACtB,IAAA,CAAKP,IAAL,CAAUQ,MAAV,GAAmB,IAAA,CAAKR,IAAL,CAAUQ,MAAV,IAAoB,CAAA,CAAvC;MACA,IAAA,CAAKR,IAAL,CAAUQ,MAAV,CAAiBF,GAAjB,CAAA,GAAwBC,IAAxB;MACA,OAAO,IAAP;IACD;;;uCAEkBa,M,EAAQX,a,EAAeF,I,EAAM;MAC9Cb,MAAM,CAACa,IAAD,CAANb;MACA0B,MAAM,CAACN,UAAPM,GAAoBA,MAAM,CAACN,UAAPM,IAAqB,CAAA,CAAzCA;MAEAA,MAAM,CAACN,UAAPM,CAAkBX,aAAlBW,CAAAA,GAAmCb,IAAnCa;MACA,IAAA,CAAKmB,qBAAL,CAA2B9B,aAA3B,CAAA;MACA,OAAO,IAAP;IACD;;;uCAEkBW,M,EAAQX,a,EAAeF,I,EAAM;MAC9C,IAAMO,UAAU,GAAGM,MAAM,CAACN,UAAPM,IAAqB,CAAA,CAAxC;MACAN,UAAU,CAACL,aAAD,CAAVK,GAA4BP,IAA5BO;IAED;;;0CAEqBM,M,EAAQX,a,EAAe;MAC3C,IAAMK,UAAU,GAAGM,MAAM,CAACN,UAAPM,IAAqB,CAAA,CAAxC;MACA,IAAMoB,SAAS,GAAG1B,UAAU,CAACL,aAAD,CAA5B;MACA,OAAOK,UAAU,CAACL,aAAD,CAAjB;MACA,OAAO+B,SAAP;IACD;;;iCAGY/B,a,EAAmC;MAAA,IAApBgC,aAAoB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,CAAA,CAAI;MAC9C/C,MAAM,CAAC+C,aAAD,CAAN/C;MACA,IAAA,CAAKM,IAAL,CAAUc,UAAV,GAAuB,IAAA,CAAKd,IAAL,CAAUc,UAAV,IAAwB,CAAA,CAA/C;MACA,IAAA,CAAKd,IAAL,CAAUc,UAAV,CAAqBL,aAArB,CAAA,GAAsCgC,aAAtC;MACA,IAAA,CAAKF,qBAAL,CAA2B9B,aAA3B,CAAA;MACA,OAAOgC,aAAP;IACD;;;yCAGoBhC,a,EAAmC;MAAA,IAApBgC,aAAoB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,CAAA,CAAI;MACtD/C,MAAM,CAAC+C,aAAD,CAAN/C;MACA,IAAA,CAAKgD,YAAL,CAAkBjC,aAAlB,EAAiCgC,aAAjC,CAAA;MACA,IAAA,CAAKE,yBAAL,CAA+BlC,aAA/B,CAAA;MACA,OAAOgC,aAAP;IACD;;;0CAGqBhC,a,EAAe;MACnC,IAAA,CAAKT,IAAL,CAAUmB,cAAV,GAA2B,IAAA,CAAKnB,IAAL,CAAUmB,cAAV,IAA4B,EAAvD;MACA,IAAI,CAAC,IAAA,CAAKnB,IAAL,CAAUmB,cAAV,CAAyBP,IAAzB,CAA8B,UAAA,GAAG,EAAA;QAAA,OAAIgC,GAAG,KAAKnC,aAAZ;MAAA,CAAjC,CAAL,EAAkE;QAChE,IAAA,CAAKT,IAAL,CAAUmB,cAAV,CAAyB0B,IAAzB,CAA8BpC,aAA9B,CAAA;MACD;IACF;;;8CAGyBA,a,EAAe;MACvC,IAAA,CAAK8B,qBAAL,CAA2B9B,aAA3B,CAAA;MACA,IAAA,CAAKT,IAAL,CAAUkB,kBAAV,GAA+B,IAAA,CAAKlB,IAAL,CAAUkB,kBAAV,IAAgC,EAA/D;MACA,IAAI,CAAC,IAAA,CAAKlB,IAAL,CAAUkB,kBAAV,CAA6BN,IAA7B,CAAkC,UAAA,GAAG,EAAA;QAAA,OAAIgC,GAAG,KAAKnC,aAAZ;MAAA,CAArC,CAAL,EAAsE;QACpE,IAAA,CAAKT,IAAL,CAAUkB,kBAAV,CAA6B2B,IAA7B,CAAkCpC,aAAlC,CAAA;MACD;IACF;;;oCAGeA,a,EAAe;MAC7B,IAAI,IAAA,CAAKT,IAAL,CAAUkB,kBAAd,EAAkC;QAChC,IAAA,CAAK4B,sBAAL,CAA4B,IAAA,CAAK9C,IAAL,CAAUkB,kBAAtC,EAA0DT,aAA1D,CAAA;MACD;MACD,IAAI,IAAA,CAAKT,IAAL,CAAUmB,cAAd,EAA8B;QAC5B,IAAA,CAAK2B,sBAAL,CAA4B,IAAA,CAAK9C,IAAL,CAAUmB,cAAtC,EAAsDV,aAAtD,CAAA;MACD;MACD,IAAI,IAAA,CAAKT,IAAL,CAAUc,UAAd,EAA0B;QACxB,OAAO,IAAA,CAAKd,IAAL,CAAUc,UAAV,CAAqBL,aAArB,CAAP;MACD;IACF;;;4BAEOsC,U,EAAYC,O,EAAmB;MAAA,IAAVC,IAAU,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAH,CAAG;MAErC,IAAMC,SAAS,GAAG,IAAA,CAAKC,cAAL,CAAoBJ,UAApB,CAAlB;MAEA,IAAMK,QAAQ,GAAG;QACfC,UAAU,EAAE,CACV;UACEN,UAAU,EAAEG,SADd;UAEEF,OAAO,EAAPA,OAFF;UAGEC,IAAI,EAAJA;QAHF,CADU;MADG,CAAjB;MAUA,IAAA,CAAKjD,IAAL,CAAUsD,MAAV,GAAmB,IAAA,CAAKtD,IAAL,CAAUsD,MAAV,IAAoB,EAAvC;MACA,IAAA,CAAKtD,IAAL,CAAUsD,MAAV,CAAiBT,IAAjB,CAAsBO,QAAtB,CAAA;MACA,OAAO,IAAA,CAAKpD,IAAL,CAAUsD,MAAV,CAAiBjB,MAAjB,GAA0B,CAAjC;IACD;;;kCAEaU,U,EAAY;MAExB,IAAMQ,eAAe,GAAG,IAAA,CAAKJ,cAAL,CAAoBJ,UAApB,CAAxB;MAEA,IAAMK,QAAQ,GAAG;QACfC,UAAU,EAAE,CACV;UACEN,UAAU,EAAEQ,eADd;UAEEN,IAAI,EAAE;QAFR,CADU;MADG,CAAjB;MASA,IAAA,CAAKjD,IAAL,CAAUsD,MAAV,GAAmB,IAAA,CAAKtD,IAAL,CAAUsD,MAAV,IAAoB,EAAvC;MACA,IAAA,CAAKtD,IAAL,CAAUsD,MAAV,CAAiBT,IAAjB,CAAsBO,QAAtB,CAAA;MACA,OAAO,IAAA,CAAKpD,IAAL,CAAUsD,MAAV,CAAiBjB,MAAjB,GAA0B,CAAjC;IACD;;;6BAKQmB,S,EAAWC,Q,EAAU;MAI5BA,QAAQ,GAAGA,QAAQ,IAAIlE,sBAAsB,CAACiE,SAAD,CAA7CC;MAEA,IAAMC,eAAe,GAAG,IAAA,CAAKC,aAAL,CAAmBH,SAAnB,CAAxB;MAEA,IAAMI,SAAS,GAAG;QAChBnC,UAAU,EAAEiC,eADI;QAEhBD,QAAQ,EAARA;MAFgB,CAAlB;MAKA,IAAA,CAAKzD,IAAL,CAAU6D,MAAV,GAAmB,IAAA,CAAK7D,IAAL,CAAU6D,MAAV,IAAoB,EAAvC;MACA,IAAA,CAAK7D,IAAL,CAAU6D,MAAV,CAAiBhB,IAAjB,CAAsBe,SAAtB,CAAA;MACA,OAAO,IAAA,CAAK5D,IAAL,CAAU6D,MAAV,CAAiBxB,MAAjB,GAA0B,CAAjC;IACD;;;kCAGaT,M,EAAQ;MACpB,IAAMvB,UAAU,GAAGuB,MAAM,CAACvB,UAA1B;MACAX,MAAM,CAACoE,MAAM,CAACC,QAAPD,CAAgBzD,UAAhByD,CAAD,CAANpE;MAGA,IAAA,CAAKsE,aAAL,GAAqB,IAAA,CAAKA,aAAL,IAAsB,EAA3C;MACA,IAAA,CAAKA,aAAL,CAAmBnB,IAAnB,CAAwBjB,MAAxB,CAAA;MAEA,IAAMqC,cAAc,GAAG;QACrBrC,MAAM,EAAE,CADa;QAGrBE,UAAU,EAAE,IAAA,CAAKzB,UAHI;QAIrBA,UAAU,EAAVA;MAJqB,CAAvB;MASA,IAAA,CAAKA,UAAL,IAAmBb,WAAW,CAACa,UAAD,CAA9B;MAGA,IAAA,CAAKL,IAAL,CAAUkE,WAAV,GAAwB,IAAA,CAAKlE,IAAL,CAAUkE,WAAV,IAAyB,EAAjD;MACA,IAAA,CAAKlE,IAAL,CAAUkE,WAAV,CAAsBrB,IAAtB,CAA2BoB,cAA3B,CAAA;MACA,OAAO,IAAA,CAAKjE,IAAL,CAAUkE,WAAV,CAAsB7B,MAAtB,GAA+B,CAAtC;IACD;;;gCAGWqB,e,EAAiBzB,Q,EAAU;MACrC,IAAMkC,YAAY,GAAG;QACnB1C,UAAU,EAAEiC,eADO;QAEnBU,IAAI,EAAExE,uBAAuB,CAACqC,QAAQ,CAACoC,IAAV,CAFV;QAGnBC,aAAa,EAAErC,QAAQ,CAACqC,aAHL;QAInBC,KAAK,EAAEtC,QAAQ,CAACsC;MAJG,CAArB;MAOA,IAAA,CAAKvE,IAAL,CAAUkD,SAAV,GAAsB,IAAA,CAAKlD,IAAL,CAAUkD,SAAV,IAAuB,EAA7C;MACA,IAAA,CAAKlD,IAAL,CAAUkD,SAAV,CAAoBL,IAApB,CAAyBsB,YAAzB,CAAA;MACA,OAAO,IAAA,CAAKnE,IAAL,CAAUkD,SAAV,CAAoBb,MAApB,GAA6B,CAApC;IACD;;;oCAKemC,Y,EAAoC;MAAA,IAAtBvC,QAAsB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAX;QAACoC,IAAI,EAAE;MAAP,CAAW;MAClD,IAAMX,eAAe,GAAG,IAAA,CAAKC,aAAL,CAAmBa,YAAnB,CAAxB;MAEA,IAAMC,gBAAgB,GAAG;QACvBJ,IAAI,EAAEpC,QAAQ,CAACoC,IADQ;QAEvBC,aAAa,EAAEzE,yBAAyB,CAAC2E,YAAD,CAFjB;QAGvBD,KAAK,EAAEG,IAAI,CAACC,KAALD,CAAWF,YAAY,CAACnC,MAAbmC,GAAsBvC,QAAQ,CAACoC,IAA1CK;MAHgB,CAAzB;MAMA,OAAO,IAAA,CAAKE,WAAL,CAAiBlB,eAAjB,EAAkCmB,MAAM,CAACC,MAAPD,CAAcJ,gBAAdI,EAAgC5C,QAAhC4C,CAAlC,CAAP;IACD;;;wCAGmB;MAElB,IAAI,IAAA,CAAK7C,WAAT,EAAsB;QACpB;MACD;MAGD,IAAM+C,eAAe,GAAG,IAAA,CAAK1E,UAA7B;MACA,IAAM2B,WAAW,GAAG,IAAIgD,WAAJ,CAAgBD,eAAhB,CAApB;MACA,IAAME,WAAW,GAAG,IAAIlD,UAAJ,CAAeC,WAAf,CAApB;MAGA,IAAIkD,aAAa,GAAG,CAApB;MACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,IAAA,CAAKnB,aAAL,CAAmB3B,MAAvC,EAA+C8C,CAAC,EAAhD,EAAoD;QAClD,IAAMX,YAAY,GAAG,IAAA,CAAKR,aAAL,CAAmBmB,CAAnB,CAArB;QACAD,aAAa,GAAGzF,WAAW,CAAC+E,YAAD,EAAeS,WAAf,EAA4BC,aAA5B,CAA3BA;MACD;MAGD,IAAA,CAAKlF,IAAL,CAAUI,OAAV,CAAkB,CAAlB,CAAA,CAAqBC,UAArB,GAAkC0E,eAAlC;MAGA,IAAA,CAAK/C,WAAL,GAAmBA,WAAnB;MAGA,IAAA,CAAKgC,aAAL,GAAqB,EAArB;IACD;;;2CAIsBzC,K,EAAO6D,M,EAAQ;MACpC,IAAIC,KAAK,GAAG,IAAZ;MACA,OAAOA,KAAP,EAAc;QACZ,IAAMhE,KAAK,GAAGE,KAAK,CAAC+D,OAAN/D,CAAc6D,MAAd7D,CAAd;QACA,IAAIF,KAAK,GAAG,CAAC,CAAb,EAAgB;UACdE,KAAK,CAACgE,MAANhE,CAAaF,KAAbE,EAAoB,CAApBA,CAAAA;QACD,CAFD,MAEO;UACL8D,KAAK,GAAG,KAARA;QACD;MACF;IACF;;;wBA3XU;MACT,OAAO,IAAA,CAAKtF,IAAL,CAAUC,IAAjB;IACD;;;;SAhCkBF,c","sourcesContent":["import {getBinaryImageMIMEType} from '@loaders.gl/images';\nimport {padTo4Bytes, copyToArray} from '@loaders.gl/loader-utils';\nimport assert from './utils/assert';\nimport {\n  getAccessorArrayTypeAndLength,\n  getAccessorTypeFromSize,\n  getComponentTypeFromArray\n} from './gltf-utils/gltf-utils';\n\n// Class for structured access to GLTF data\nexport default class GLTFScenegraph {\n  // eslint-disable-next-line consistent-return\n  constructor(gltf) {\n    // Signature: new GLTFScenegraph(data : GLTFScenegraph)\n    // Allow creation of a `GLTFScenegraph` object from gltf data without checking if already a `GLTFScenegraph`\n    if (gltf instanceof GLTFScenegraph) {\n      return gltf;\n    }\n\n    if (!gltf) {\n      gltf = {\n        json: {\n          asset: {\n            version: '2.0',\n            generator: 'loaders.gl'\n          },\n          buffers: []\n        },\n        buffers: []\n      };\n    }\n\n    this.byteLength = 0;\n    // TODO - this is too sloppy, define inputs more clearly\n    this.gltf = gltf;\n    assert(this.gltf.json);\n  }\n\n  // Accessors\n\n  get json() {\n    return this.gltf.json;\n  }\n\n  getApplicationData(key) {\n    // TODO - Data is already unpacked by GLBParser\n    const data = this.json[key];\n    return data;\n  }\n\n  getExtraData(key) {\n    // TODO - Data is already unpacked by GLBParser\n    const extras = this.json.extras || {};\n    return extras[key];\n  }\n\n  getExtension(extensionName) {\n    const isExtension = this.getUsedExtensions().find(name => name === extensionName);\n    const extensions = this.json.extensions || {};\n    return isExtension ? extensions[extensionName] || true : null;\n  }\n\n  getRequiredExtension(extensionName) {\n    const isRequired = this.getRequiredExtensions().find(name => name === extensionName);\n    return isRequired ? this.getExtension(extensionName) : null;\n  }\n\n  getRequiredExtensions() {\n    return this.json.extensionsRequired || [];\n  }\n\n  getUsedExtensions() {\n    return this.json.extensionsUsed || [];\n  }\n\n  getObjectExtension(object, extensionName) {\n    const extensions = object.extensions || {};\n    return extensions[extensionName];\n  }\n\n  getScene(index) {\n    return this.getObject('scenes', index);\n  }\n\n  getNode(index) {\n    return this.getObject('nodes', index);\n  }\n\n  getSkin(index) {\n    return this.getObject('skins', index);\n  }\n\n  getMesh(index) {\n    return this.getObject('meshes', index);\n  }\n\n  getMaterial(index) {\n    return this.getObject('materials', index);\n  }\n\n  getAccessor(index) {\n    return this.getObject('accessors', index);\n  }\n\n  getCamera(index) {\n    return null; // TODO: fix this\n  }\n\n  getTexture(index) {\n    return this.getObject('textures', index);\n  }\n\n  getSampler(index) {\n    return this.getObject('samplers', index);\n  }\n\n  getImage(index) {\n    return this.getObject('images', index);\n  }\n\n  getBufferView(index) {\n    return this.getObject('bufferViews', index);\n  }\n\n  getBuffer(index) {\n    return this.getObject('buffers', index);\n  }\n\n  getObject(array, index) {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.json[array] && this.json[array][index];\n    if (!object) {\n      throw new Error(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  // accepts buffer view index or buffer view object\n  // returns a `Uint8Array`\n  getTypedArrayForBufferView(bufferView) {\n    bufferView = this.getBufferView(bufferView);\n    const bufferIndex = bufferView.buffer;\n\n    // Get hold of the arrayBuffer\n    // const buffer = this.getBuffer(bufferIndex);\n    const binChunk = this.gltf.buffers[bufferIndex];\n    assert(binChunk);\n\n    const byteOffset = (bufferView.byteOffset || 0) + binChunk.byteOffset;\n    return new Uint8Array(binChunk.arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  // accepts accessor index or accessor object\n  // returns a typed array with type that matches the types\n  getTypedArrayForAccessor(accessor) {\n    accessor = this.getAccessor(accessor);\n    const bufferView = this.getBufferView(accessor.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    const arrayBuffer = buffer.data;\n\n    // Create a new typed array as a view into the combined buffer\n    const {ArrayType, length} = getAccessorArrayTypeAndLength(accessor, bufferView);\n    const byteOffset = bufferView.byteOffset + accessor.byteOffset;\n    return new ArrayType(arrayBuffer, byteOffset, length);\n  }\n\n  // accepts accessor index or accessor object\n  // returns a `Uint8Array`\n  getTypedArrayForImageData(image) {\n    image = this.getAccessor(image);\n    const bufferView = this.getBufferView(image.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    const arrayBuffer = buffer.data;\n\n    const byteOffset = bufferView.byteOffset || 0;\n    return new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  // MODIFERS\n\n  // Add an extra application-defined key to the top-level data structure\n  addApplicationData(key, data) {\n    this.json[key] = data;\n    return this;\n  }\n\n  // `extras` - Standard GLTF field for storing application specific data\n  addExtraData(key, data) {\n    this.json.extras = this.json.extras || {};\n    this.json.extras[key] = data;\n    return this;\n  }\n\n  addObjectExtension(object, extensionName, data) {\n    assert(data);\n    object.extensions = object.extensions || {};\n    // TODO - clobber or merge?\n    object.extensions[extensionName] = data;\n    this.registerUsedExtension(extensionName);\n    return this;\n  }\n\n  setObjectExtension(object, extensionName, data) {\n    const extensions = object.extensions || {};\n    extensions[extensionName] = data;\n    // TODO - add to usedExtensions...\n  }\n\n  removeObjectExtension(object, extensionName) {\n    const extensions = object.extensions || {};\n    const extension = extensions[extensionName];\n    delete extensions[extensionName];\n    return extension;\n  }\n\n  // Add to standard GLTF top level extension object, mark as used\n  addExtension(extensionName, extensionData = {}) {\n    assert(extensionData);\n    this.json.extensions = this.json.extensions || {};\n    this.json.extensions[extensionName] = extensionData;\n    this.registerUsedExtension(extensionName);\n    return extensionData;\n  }\n\n  // Standard GLTF top level extension object, mark as used and required\n  addRequiredExtension(extensionName, extensionData = {}) {\n    assert(extensionData);\n    this.addExtension(extensionName, extensionData);\n    this.registerRequiredExtension(extensionName);\n    return extensionData;\n  }\n\n  // Add extensionName to list of used extensions\n  registerUsedExtension(extensionName) {\n    this.json.extensionsUsed = this.json.extensionsUsed || [];\n    if (!this.json.extensionsUsed.find(ext => ext === extensionName)) {\n      this.json.extensionsUsed.push(extensionName);\n    }\n  }\n\n  // Add extensionName to list of required extensions\n  registerRequiredExtension(extensionName) {\n    this.registerUsedExtension(extensionName);\n    this.json.extensionsRequired = this.json.extensionsRequired || [];\n    if (!this.json.extensionsRequired.find(ext => ext === extensionName)) {\n      this.json.extensionsRequired.push(extensionName);\n    }\n  }\n\n  // Removes an extension from the top-level list\n  removeExtension(extensionName) {\n    if (this.json.extensionsRequired) {\n      this._removeStringFromArray(this.json.extensionsRequired, extensionName);\n    }\n    if (this.json.extensionsUsed) {\n      this._removeStringFromArray(this.json.extensionsUsed, extensionName);\n    }\n    if (this.json.extensions) {\n      delete this.json.extensions[extensionName];\n    }\n  }\n\n  addMesh(attributes, indices, mode = 4) {\n    // @ts-ignore\n    const accessors = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessors,\n          indices,\n          mode\n        }\n      ]\n    };\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  addPointCloud(attributes) {\n    // @ts-ignore\n    const accessorIndices = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessorIndices,\n          mode: 0 // GL.POINTS\n        }\n      ]\n    };\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  // Adds a binary image. Builds glTF \"JSON metadata\" and saves buffer reference\n  // Buffer will be copied into BIN chunk during \"pack\"\n  // Currently encodes as glTF image\n  addImage(imageData, mimeType) {\n    // If image is referencing a bufferView instead of URI, mimeType must be defined:\n    //   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#images\n    //   \"a reference to a bufferView; in that case mimeType must be defined.\"\n    mimeType = mimeType || getBinaryImageMIMEType(imageData);\n\n    const bufferViewIndex = this.addBufferView(imageData);\n\n    const glTFImage = {\n      bufferView: bufferViewIndex,\n      mimeType\n    };\n\n    this.json.images = this.json.images || [];\n    this.json.images.push(glTFImage);\n    return this.json.images.length - 1;\n  }\n\n  // Add one untyped source buffer, create a matching glTF `bufferView`, and return its index\n  addBufferView(buffer) {\n    const byteLength = buffer.byteLength;\n    assert(Number.isFinite(byteLength));\n\n    // Add this buffer to the list of buffers to be written to the body.\n    this.sourceBuffers = this.sourceBuffers || [];\n    this.sourceBuffers.push(buffer);\n\n    const glTFBufferView = {\n      buffer: 0,\n      // Write offset from the start of the binary body\n      byteOffset: this.byteLength,\n      byteLength\n    };\n\n    // We've now added the contents to the body, so update the total length\n    // Every sub-chunk needs to be 4-byte align ed\n    this.byteLength += padTo4Bytes(byteLength);\n\n    // Add a bufferView indicating start and length of this binary sub-chunk\n    this.json.bufferViews = this.json.bufferViews || [];\n    this.json.bufferViews.push(glTFBufferView);\n    return this.json.bufferViews.length - 1;\n  }\n\n  // Adds an accessor to a bufferView\n  addAccessor(bufferViewIndex, accessor) {\n    const glTFAccessor = {\n      bufferView: bufferViewIndex,\n      type: getAccessorTypeFromSize(accessor.size),\n      componentType: accessor.componentType,\n      count: accessor.count\n    };\n\n    this.json.accessors = this.json.accessors || [];\n    this.json.accessors.push(glTFAccessor);\n    return this.json.accessors.length - 1;\n  }\n\n  // Add a binary buffer. Builds glTF \"JSON metadata\" and saves buffer reference\n  // Buffer will be copied into BIN chunk during \"pack\"\n  // Currently encodes buffers as glTF accessors, but this could be optimized\n  addBinaryBuffer(sourceBuffer, accessor = {size: 3}) {\n    const bufferViewIndex = this.addBufferView(sourceBuffer);\n\n    const accessorDefaults = {\n      size: accessor.size,\n      componentType: getComponentTypeFromArray(sourceBuffer),\n      count: Math.round(sourceBuffer.length / accessor.size)\n    };\n\n    return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));\n  }\n\n  // Pack the binary chunk\n  createBinaryChunk() {\n    // Already packed\n    if (this.arrayBuffer) {\n      return;\n    }\n\n    // Allocate total array\n    const totalByteLength = this.byteLength;\n    const arrayBuffer = new ArrayBuffer(totalByteLength);\n    const targetArray = new Uint8Array(arrayBuffer);\n\n    // Copy each array into\n    let dstByteOffset = 0;\n    for (let i = 0; i < this.sourceBuffers.length; i++) {\n      const sourceBuffer = this.sourceBuffers[i];\n      dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);\n    }\n\n    // Update the glTF BIN CHUNK byte length\n    this.json.buffers[0].byteLength = totalByteLength;\n\n    // Save generated arrayBuffer\n    this.arrayBuffer = arrayBuffer;\n\n    // Clear out sourceBuffers\n    this.sourceBuffers = [];\n  }\n\n  // PRIVATE\n\n  _removeStringFromArray(array, string) {\n    let found = true;\n    while (found) {\n      const index = array.indexOf(string);\n      if (index > -1) {\n        array.splice(index, 1);\n      } else {\n        found = false;\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}