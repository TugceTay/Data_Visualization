{"ast":null,"code":"import Input from './input';\nimport { INPUT_EVENT_TYPES } from '../constants';\nimport { window, userAgent, passiveSupported } from '../utils/globals';\nconst firefox = userAgent.indexOf('firefox') !== -1;\nconst {\n  WHEEL_EVENTS\n} = INPUT_EVENT_TYPES;\nconst EVENT_TYPE = 'wheel';\n// Constants for normalizing input delta\nconst WHEEL_DELTA_MAGIC_SCALER = 4.000244140625;\nconst WHEEL_DELTA_PER_LINE = 40;\n// Slow down zoom if shift key is held for more precise zooming\nconst SHIFT_MULTIPLIER = 0.25;\nexport default class WheelInput extends Input {\n  constructor(element, callback, options) {\n    super(element, callback, options);\n    /* eslint-disable complexity, max-statements */\n    this.handleEvent = event => {\n      if (!this.options.enable) {\n        return;\n      }\n      let value = event.deltaY;\n      if (window.WheelEvent) {\n        // Firefox doubles the values on retina screens...\n        if (firefox && event.deltaMode === window.WheelEvent.DOM_DELTA_PIXEL) {\n          value /= window.devicePixelRatio;\n        }\n        if (event.deltaMode === window.WheelEvent.DOM_DELTA_LINE) {\n          value *= WHEEL_DELTA_PER_LINE;\n        }\n      }\n      if (value !== 0 && value % WHEEL_DELTA_MAGIC_SCALER === 0) {\n        // This one is definitely a mouse wheel event.\n        // Normalize this value to match trackpad.\n        value = Math.floor(value / WHEEL_DELTA_MAGIC_SCALER);\n      }\n      if (event.shiftKey && value) {\n        value = value * SHIFT_MULTIPLIER;\n      }\n      this.callback({\n        type: EVENT_TYPE,\n        center: {\n          x: event.clientX,\n          y: event.clientY\n        },\n        delta: -value,\n        srcEvent: event,\n        pointerType: 'mouse',\n        target: event.target\n      });\n    };\n    this.events = (this.options.events || []).concat(WHEEL_EVENTS);\n    this.events.forEach(event => element.addEventListener(event, this.handleEvent, passiveSupported ? {\n      passive: false\n    } : false));\n  }\n  destroy() {\n    this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n  }\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n  enableEventType(eventType, enabled) {\n    if (eventType === EVENT_TYPE) {\n      this.options.enable = enabled;\n    }\n  }\n}","map":{"version":3,"sources":["../../../src/inputs/wheel-input.ts"],"names":[],"mappings":"AACA,OAAO,KAAqB,MAAM,SAAS;AAE3C,SAAQ,iBAAiB,QAAO,cAAc;AAC9C,SAAQ,MAAM,EAAE,SAAS,EAAE,gBAAgB,QAAO,kBAAkB;AAEpE,MAAM,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AAEnD,MAAM;EAAC;AAAY,CAAC,GAAG,iBAAiB;AACxC,MAAM,UAAU,GAAG,OAAO;AAE1B;AACA,MAAM,wBAAwB,GAAG,cAAc;AAC/C,MAAM,oBAAoB,GAAG,EAAE;AAC/B;AACA,MAAM,gBAAgB,GAAG,IAAI;AAE7B,eAAc,MAAO,UAAW,SAAQ,KAAyC,CAAA;EAG/E,WAAA,CACE,OAAoB,EACpB,QAA+C,EAC/C,OAAqB,EAAA;IAErB,KAAK,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC;IAuBnC;IACA,IAAA,CAAA,WAAW,GAAI,KAAiB,IAAI;MAClC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;QACxB;MACD;MAED,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM;MACxB,IAAI,MAAM,CAAC,UAAU,EAAE;QACrB;QACA,IAAI,OAAO,IAAI,KAAK,CAAC,SAAS,KAAK,MAAM,CAAC,UAAU,CAAC,eAAe,EAAE;UACpE,KAAK,IAAI,MAAM,CAAC,gBAAgB;QACjC;QACD,IAAI,KAAK,CAAC,SAAS,KAAK,MAAM,CAAC,UAAU,CAAC,cAAc,EAAE;UACxD,KAAK,IAAI,oBAAoB;QAC9B;MACF;MAED,IAAI,KAAK,KAAK,CAAC,IAAI,KAAK,GAAG,wBAAwB,KAAK,CAAC,EAAE;QACzD;QACA;QACA,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,wBAAwB,CAAC;MACrD;MAED,IAAI,KAAK,CAAC,QAAQ,IAAI,KAAK,EAAE;QAC3B,KAAK,GAAG,KAAK,GAAG,gBAAgB;MACjC;MAED,IAAI,CAAC,QAAQ,CAAC;QACZ,IAAI,EAAE,UAAU;QAChB,MAAM,EAAE;UACN,CAAC,EAAE,KAAK,CAAC,OAAO;UAChB,CAAC,EAAE,KAAK,CAAC;SACV;QACD,KAAK,EAAE,CAAC,KAAK;QACb,QAAQ,EAAE,KAAK;QACf,WAAW,EAAE,OAAO;QACpB,MAAM,EAAE,KAAK,CAAC;OACf,CAAC;IACJ,CAAC;IA3DC,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,EAAE,EAAE,MAAM,CAAC,YAAY,CAAC;IAE9D,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,IACvB,OAAO,CAAC,gBAAgB,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,EAAE,gBAAgB,GAAG;MAAC,OAAO,EAAE;IAAK,CAAC,GAAG,KAAK,CAAC,CAC/F;EACH;EAEA,OAAO,GAAA;IACL,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;EACzF;EAEA;;;AAGG;EACH,eAAe,CAAC,SAAiB,EAAE,OAAgB,EAAA;IACjD,IAAI,SAAS,KAAK,UAAU,EAAE;MAC5B,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,OAAO;IAC9B;EACH;AAyCD","sourceRoot":"","sourcesContent":["import Input from './input';\nimport { INPUT_EVENT_TYPES } from '../constants';\nimport { window, userAgent, passiveSupported } from '../utils/globals';\nconst firefox = userAgent.indexOf('firefox') !== -1;\nconst { WHEEL_EVENTS } = INPUT_EVENT_TYPES;\nconst EVENT_TYPE = 'wheel';\n// Constants for normalizing input delta\nconst WHEEL_DELTA_MAGIC_SCALER = 4.000244140625;\nconst WHEEL_DELTA_PER_LINE = 40;\n// Slow down zoom if shift key is held for more precise zooming\nconst SHIFT_MULTIPLIER = 0.25;\nexport default class WheelInput extends Input {\n    constructor(element, callback, options) {\n        super(element, callback, options);\n        /* eslint-disable complexity, max-statements */\n        this.handleEvent = (event) => {\n            if (!this.options.enable) {\n                return;\n            }\n            let value = event.deltaY;\n            if (window.WheelEvent) {\n                // Firefox doubles the values on retina screens...\n                if (firefox && event.deltaMode === window.WheelEvent.DOM_DELTA_PIXEL) {\n                    value /= window.devicePixelRatio;\n                }\n                if (event.deltaMode === window.WheelEvent.DOM_DELTA_LINE) {\n                    value *= WHEEL_DELTA_PER_LINE;\n                }\n            }\n            if (value !== 0 && value % WHEEL_DELTA_MAGIC_SCALER === 0) {\n                // This one is definitely a mouse wheel event.\n                // Normalize this value to match trackpad.\n                value = Math.floor(value / WHEEL_DELTA_MAGIC_SCALER);\n            }\n            if (event.shiftKey && value) {\n                value = value * SHIFT_MULTIPLIER;\n            }\n            this.callback({\n                type: EVENT_TYPE,\n                center: {\n                    x: event.clientX,\n                    y: event.clientY\n                },\n                delta: -value,\n                srcEvent: event,\n                pointerType: 'mouse',\n                target: event.target\n            });\n        };\n        this.events = (this.options.events || []).concat(WHEEL_EVENTS);\n        this.events.forEach(event => element.addEventListener(event, this.handleEvent, passiveSupported ? { passive: false } : false));\n    }\n    destroy() {\n        this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n    }\n    /**\n     * Enable this input (begin processing events)\n     * if the specified event type is among those handled by this input.\n     */\n    enableEventType(eventType, enabled) {\n        if (eventType === EVENT_TYPE) {\n            this.options.enable = enabled;\n        }\n    }\n}\n//# sourceMappingURL=wheel-input.js.map"]},"metadata":{},"sourceType":"module"}