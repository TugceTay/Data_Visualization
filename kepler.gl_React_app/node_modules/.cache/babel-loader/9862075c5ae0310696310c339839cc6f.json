{"ast":null,"code":"import { isBrowser as getIsBrowser } from '@probe.gl/env';\nimport { trackContextState } from '../state-tracker/track-context-state';\nimport { log } from '../utils/log';\nimport { assert } from '../utils/assert';\nimport { getDevicePixelRatio } from '../utils/device-pixels';\nimport { isWebGL2 } from '../utils/webgl-checks';\nconst isBrowser = getIsBrowser();\nconst isPage = isBrowser && typeof document !== 'undefined';\nconst CONTEXT_DEFAULTS = {\n  webgl2: true,\n  webgl1: true,\n  throwOnError: true,\n  manageState: true,\n  canvas: null,\n  debug: false,\n  width: 800,\n  height: 600\n};\nexport function createGLContext() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  assert(isBrowser, \"createGLContext only available in the browser.\\nCreate your own headless context or use 'createHeadlessContext' from @luma.gl/test-utils\");\n  options = Object.assign({}, CONTEXT_DEFAULTS, options);\n  const {\n    width,\n    height\n  } = options;\n  function onError(message) {\n    if (options.throwOnError) {\n      throw new Error(message);\n    }\n    console.error(message);\n    return null;\n  }\n  options.onError = onError;\n  let gl;\n  const {\n    canvas\n  } = options;\n  const targetCanvas = getCanvas({\n    canvas,\n    width,\n    height,\n    onError\n  });\n  gl = createBrowserContext(targetCanvas, options);\n  if (!gl) {\n    return null;\n  }\n  gl = instrumentGLContext(gl, options);\n  logInfo(gl);\n  return gl;\n}\nexport function instrumentGLContext(gl) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!gl || gl._instrumented) {\n    return gl;\n  }\n  gl._version = gl._version || getVersion(gl);\n  gl.luma = gl.luma || {};\n  gl.luma.canvasSizeInfo = gl.luma.canvasSizeInfo || {};\n  options = Object.assign({}, CONTEXT_DEFAULTS, options);\n  const {\n    manageState,\n    debug\n  } = options;\n  if (manageState) {\n    trackContextState(gl, {\n      copyState: false,\n      log: function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return log.log(1, ...args)();\n      }\n    });\n  }\n  if (isBrowser && debug) {\n    if (!globalThis.makeDebugContext) {\n      log.warn('WebGL debug mode not activated. import \"@luma.gl/debug\" to enable.')();\n    } else {\n      gl = globalThis.makeDebugContext(gl, options);\n      log.level = Math.max(log.level, 1);\n    }\n  }\n  gl._instrumented = true;\n  return gl;\n}\nexport function getContextDebugInfo(gl) {\n  const vendorMasked = gl.getParameter(7936);\n  const rendererMasked = gl.getParameter(7937);\n  const ext = gl.getExtension('WEBGL_debug_renderer_info');\n  const vendorUnmasked = ext && gl.getParameter(ext.UNMASKED_VENDOR_WEBGL || 7936);\n  const rendererUnmasked = ext && gl.getParameter(ext.UNMASKED_RENDERER_WEBGL || 7937);\n  return {\n    vendor: vendorUnmasked || vendorMasked,\n    renderer: rendererUnmasked || rendererMasked,\n    vendorMasked,\n    rendererMasked,\n    version: gl.getParameter(7938),\n    shadingLanguageVersion: gl.getParameter(35724)\n  };\n}\nexport function resizeGLContext(gl) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (gl.canvas) {\n    const devicePixelRatio = getDevicePixelRatio(options.useDevicePixels);\n    setDevicePixelRatio(gl, devicePixelRatio, options);\n    return;\n  }\n  const ext = gl.getExtension('STACKGL_resize_drawingbuffer');\n  if (ext && \"width\" in options && \"height\" in options) {\n    ext.resize(options.width, options.height);\n  }\n}\nfunction createBrowserContext(canvas, options) {\n  const {\n    onError\n  } = options;\n  let errorMessage = null;\n  const onCreateError = error => errorMessage = error.statusMessage || errorMessage;\n  canvas.addEventListener('webglcontextcreationerror', onCreateError, false);\n  const {\n    webgl1 = true,\n    webgl2 = true\n  } = options;\n  let gl = null;\n  if (webgl2) {\n    gl = gl || canvas.getContext('webgl2', options);\n    gl = gl || canvas.getContext('experimental-webgl2', options);\n  }\n  if (webgl1) {\n    gl = gl || canvas.getContext('webgl', options);\n    gl = gl || canvas.getContext('experimental-webgl', options);\n  }\n  canvas.removeEventListener('webglcontextcreationerror', onCreateError, false);\n  if (!gl) {\n    return onError(\"Failed to create \".concat(webgl2 && !webgl1 ? 'WebGL2' : 'WebGL', \" context: \").concat(errorMessage || 'Unknown error'));\n  }\n  if (options.onContextLost) {\n    canvas.addEventListener('webglcontextlost', options.onContextLost, false);\n  }\n  if (options.onContextRestored) {\n    canvas.addEventListener('webglcontextrestored', options.onContextRestored, false);\n  }\n  return gl;\n}\nfunction getCanvas(_ref) {\n  let {\n    canvas,\n    width = 800,\n    height = 600,\n    onError\n  } = _ref;\n  let targetCanvas;\n  if (typeof canvas === 'string') {\n    const isPageLoaded = isPage && document.readyState === 'complete';\n    if (!isPageLoaded) {\n      onError(\"createGLContext called on canvas '\".concat(canvas, \"' before page was loaded\"));\n    }\n    targetCanvas = document.getElementById(canvas);\n  } else if (canvas) {\n    targetCanvas = canvas;\n  } else {\n    targetCanvas = document.createElement('canvas');\n    targetCanvas.id = 'lumagl-canvas';\n    targetCanvas.style.width = Number.isFinite(width) ? \"\".concat(width, \"px\") : '100%';\n    targetCanvas.style.height = Number.isFinite(height) ? \"\".concat(height, \"px\") : '100%';\n    document.body.insertBefore(targetCanvas, document.body.firstChild);\n  }\n  return targetCanvas;\n}\nfunction logInfo(gl) {\n  const webGL = isWebGL2(gl) ? 'WebGL2' : 'WebGL1';\n  const info = getContextDebugInfo(gl);\n  const driver = info ? \"(\".concat(info.vendor, \",\").concat(info.renderer, \")\") : '';\n  const debug = gl.debug ? ' debug' : '';\n  log.info(1, \"\".concat(webGL).concat(debug, \" context \").concat(driver))();\n}\nfunction getVersion(gl) {\n  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {\n    return 2;\n  }\n  return 1;\n}\nfunction setDevicePixelRatio(gl, devicePixelRatio, options) {\n  let clientWidth = 'width' in options ? options.width : gl.canvas.clientWidth;\n  let clientHeight = 'height' in options ? options.height : gl.canvas.clientHeight;\n  if (!clientWidth || !clientHeight) {\n    log.log(1, 'Canvas clientWidth/clientHeight is 0')();\n    devicePixelRatio = 1;\n    clientWidth = gl.canvas.width || 1;\n    clientHeight = gl.canvas.height || 1;\n  }\n  gl.luma = gl.luma || {};\n  gl.luma.canvasSizeInfo = gl.luma.canvasSizeInfo || {};\n  const cachedSize = gl.luma.canvasSizeInfo;\n  if (cachedSize.clientWidth !== clientWidth || cachedSize.clientHeight !== clientHeight || cachedSize.devicePixelRatio !== devicePixelRatio) {\n    let clampedPixelRatio = devicePixelRatio;\n    const canvasWidth = Math.floor(clientWidth * clampedPixelRatio);\n    const canvasHeight = Math.floor(clientHeight * clampedPixelRatio);\n    gl.canvas.width = canvasWidth;\n    gl.canvas.height = canvasHeight;\n    if (gl.drawingBufferWidth !== canvasWidth || gl.drawingBufferHeight !== canvasHeight) {\n      log.warn(\"Device pixel ratio clamped\")();\n      clampedPixelRatio = Math.min(gl.drawingBufferWidth / clientWidth, gl.drawingBufferHeight / clientHeight);\n      gl.canvas.width = Math.floor(clientWidth * clampedPixelRatio);\n      gl.canvas.height = Math.floor(clientHeight * clampedPixelRatio);\n    }\n    Object.assign(gl.luma.canvasSizeInfo, {\n      clientWidth,\n      clientHeight,\n      devicePixelRatio\n    });\n  }\n}","map":{"version":3,"sources":["../../../src/context/context.js"],"names":["isBrowser","getIsBrowser","trackContextState","log","assert","getDevicePixelRatio","isWebGL2","isPage","document","CONTEXT_DEFAULTS","webgl2","webgl1","throwOnError","manageState","canvas","debug","width","height","createGLContext","options","Object","assign","onError","message","Error","console","error","gl","targetCanvas","getCanvas","createBrowserContext","instrumentGLContext","logInfo","_instrumented","_version","getVersion","luma","canvasSizeInfo","copyState","args","globalThis","makeDebugContext","warn","level","Math","max","getContextDebugInfo","vendorMasked","getParameter","rendererMasked","ext","getExtension","vendorUnmasked","UNMASKED_VENDOR_WEBGL","rendererUnmasked","UNMASKED_RENDERER_WEBGL","vendor","renderer","version","shadingLanguageVersion","resizeGLContext","devicePixelRatio","useDevicePixels","setDevicePixelRatio","resize","errorMessage","onCreateError","statusMessage","addEventListener","getContext","removeEventListener","onContextLost","onContextRestored","isPageLoaded","readyState","getElementById","createElement","id","style","Number","isFinite","body","insertBefore","firstChild","webGL","info","driver","WebGL2RenderingContext","clientWidth","clientHeight","cachedSize","clampedPixelRatio","canvasWidth","floor","canvasHeight","drawingBufferWidth","drawingBufferHeight","min"],"mappings":"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","sourcesContent":["// WebGLRenderingContext related methods\n\n/** @typedef {import('./context')} types */\n\n/* eslint-disable quotes */\nimport GL from '@luma.gl/constants';\nimport {isBrowser as getIsBrowser} from '@probe.gl/env';\nimport {trackContextState} from '../state-tracker/track-context-state';\n\nimport {log} from '../utils/log';\nimport {assert} from '../utils/assert';\nimport {getDevicePixelRatio} from '../utils/device-pixels';\nimport {isWebGL2} from '../utils/webgl-checks';\n\nconst isBrowser = getIsBrowser();\nconst isPage = isBrowser && typeof document !== 'undefined';\n\nconst CONTEXT_DEFAULTS = {\n  // COMMON CONTEXT PARAMETERS\n  // Attempt to allocate WebGL2 context\n  webgl2: true, // Attempt to create a WebGL2 context (false to force webgl1)\n  webgl1: true, // Attempt to create a WebGL1 context (false to fail if webgl2 not available)\n  throwOnError: true,\n  manageState: true,\n  // BROWSER CONTEXT PARAMETERS\n  canvas: null, // A canvas element or a canvas string id\n  debug: false, // Instrument context (at the expense of performance)\n  // HEADLESS CONTEXT PARAMETERS\n  width: 800, // width are height are only used by headless gl\n  height: 600\n  // WEBGL/HEADLESS CONTEXT PARAMETERS\n  // Remaining options are passed through to context creator\n};\n\n/**\n * Creates a context giving access to the WebGL API\n * @type {types['createGLContext']}\n */\n/* eslint-disable complexity, max-statements */\nexport function createGLContext(options = {}) {\n  assert(\n    isBrowser,\n    \"createGLContext only available in the browser.\\nCreate your own headless context or use 'createHeadlessContext' from @luma.gl/test-utils\"\n  );\n\n  options = Object.assign({}, CONTEXT_DEFAULTS, options);\n  const {width, height} = options;\n\n  // Error reporting function, enables exceptions to be disabled\n  function onError(message) {\n    if (options.throwOnError) {\n      throw new Error(message);\n    }\n    // eslint-disable-next-line\n    console.error(message);\n    return null;\n  }\n  options.onError = onError;\n\n  let gl;\n  // Get or create a canvas\n  const {canvas} = options;\n  const targetCanvas = getCanvas({canvas, width, height, onError});\n  // Create a WebGL context in the canvas\n  gl = createBrowserContext(targetCanvas, options);\n\n  if (!gl) {\n    return null;\n  }\n\n  gl = instrumentGLContext(gl, options);\n\n  // Log some debug info about the newly created context\n  logInfo(gl);\n\n  // Add to seer integration\n  return gl;\n}\n\n/**\n * Creates a context giving access to the WebGL API\n * @type {types['instrumentGLContext']}\n */\nexport function instrumentGLContext(gl, options = {}) {\n  // Avoid multiple instrumentations\n  // @ts-ignore\n  if (!gl || gl._instrumented) {\n    return gl;\n  }\n\n  // @ts-ignore\n  gl._version = gl._version || getVersion(gl);\n\n  // Cache canvas size information to avoid setting it on every frame.\n  // @ts-ignore\n  gl.luma = gl.luma || {};\n  // @ts-ignore\n  gl.luma.canvasSizeInfo = gl.luma.canvasSizeInfo || {};\n\n  options = Object.assign({}, CONTEXT_DEFAULTS, options);\n  const {manageState, debug} = options;\n\n  // Install context state tracking\n  if (manageState) {\n    trackContextState(gl, {\n      copyState: false,\n      log: (...args) => log.log(1, ...args)()\n    });\n  }\n\n  // Add debug instrumentation to the context\n  if (isBrowser && debug) {\n    // @ts-ignore\n    if (!globalThis.makeDebugContext) {\n      log.warn('WebGL debug mode not activated. import \"@luma.gl/debug\" to enable.')();\n    } else {\n      // @ts-ignore\n      gl = globalThis.makeDebugContext(gl, options);\n      // Debug forces log level to at least 1\n      log.level = Math.max(log.level, 1);\n    }\n  }\n\n  // @ts-ignore\n  gl._instrumented = true;\n\n  return gl;\n}\n\n/**\n * Provides strings identifying the GPU vendor and driver.\n * @type {types['getContextDebugInfo']}\n */\nexport function getContextDebugInfo(gl) {\n  const vendorMasked = gl.getParameter(GL.VENDOR);\n  const rendererMasked = gl.getParameter(GL.RENDERER);\n  const ext = gl.getExtension('WEBGL_debug_renderer_info');\n  const vendorUnmasked = ext && gl.getParameter(ext.UNMASKED_VENDOR_WEBGL || GL.VENDOR);\n  const rendererUnmasked = ext && gl.getParameter(ext.UNMASKED_RENDERER_WEBGL || GL.RENDERER);\n  return {\n    vendor: vendorUnmasked || vendorMasked,\n    renderer: rendererUnmasked || rendererMasked,\n    vendorMasked,\n    rendererMasked,\n    version: gl.getParameter(GL.VERSION),\n    shadingLanguageVersion: gl.getParameter(GL.SHADING_LANGUAGE_VERSION)\n  };\n}\n\n/**\n * Resize the canvas' drawing buffer.\n * @type {types['resizeGLContext']}\n */\nexport function resizeGLContext(gl, options = {}) {\n  // Resize browser context\n  if (gl.canvas) {\n    const devicePixelRatio = getDevicePixelRatio(options.useDevicePixels);\n    setDevicePixelRatio(gl, devicePixelRatio, options);\n    return;\n  }\n\n  // Resize headless gl context\n  const ext = gl.getExtension('STACKGL_resize_drawingbuffer');\n  if (ext && `width` in options && `height` in options) {\n    ext.resize(options.width, options.height);\n  }\n}\n\n// HELPER METHODS\n\n/**\n * Create a WebGL context for a canvas\n * Note calling this multiple time on the same canvas does return the same context\n */\n\nfunction createBrowserContext(canvas, options) {\n  const {onError} = options;\n\n  // Try to extract any extra information about why context creation failed\n  let errorMessage = null;\n  const onCreateError = error => (errorMessage = error.statusMessage || errorMessage);\n  canvas.addEventListener('webglcontextcreationerror', onCreateError, false);\n\n  const {webgl1 = true, webgl2 = true} = options;\n  let gl = null;\n  // Prefer webgl2 over webgl1, prefer conformant over experimental\n  if (webgl2) {\n    gl = gl || canvas.getContext('webgl2', options);\n    gl = gl || canvas.getContext('experimental-webgl2', options);\n  }\n  if (webgl1) {\n    gl = gl || canvas.getContext('webgl', options);\n    gl = gl || canvas.getContext('experimental-webgl', options);\n  }\n\n  canvas.removeEventListener('webglcontextcreationerror', onCreateError, false);\n\n  if (!gl) {\n    return onError(\n      `Failed to create ${webgl2 && !webgl1 ? 'WebGL2' : 'WebGL'} context: ${errorMessage ||\n        'Unknown error'}`\n    );\n  }\n\n  if (options.onContextLost) {\n    canvas.addEventListener('webglcontextlost', options.onContextLost, false);\n  }\n\n  if (options.onContextRestored) {\n    canvas.addEventListener('webglcontextrestored', options.onContextRestored, false);\n  }\n\n  return gl;\n}\n\nfunction getCanvas({canvas, width = 800, height = 600, onError}) {\n  let targetCanvas;\n  if (typeof canvas === 'string') {\n    const isPageLoaded = isPage && document.readyState === 'complete';\n    if (!isPageLoaded) {\n      onError(`createGLContext called on canvas '${canvas}' before page was loaded`);\n    }\n    targetCanvas = document.getElementById(canvas);\n  } else if (canvas) {\n    targetCanvas = canvas;\n  } else {\n    targetCanvas = document.createElement('canvas');\n    targetCanvas.id = 'lumagl-canvas';\n    targetCanvas.style.width = Number.isFinite(width) ? `${width}px` : '100%';\n    targetCanvas.style.height = Number.isFinite(height) ? `${height}px` : '100%';\n    document.body.insertBefore(targetCanvas, document.body.firstChild);\n  }\n\n  return targetCanvas;\n}\n\nfunction logInfo(gl) {\n  const webGL = isWebGL2(gl) ? 'WebGL2' : 'WebGL1';\n  const info = getContextDebugInfo(gl);\n  const driver = info ? `(${info.vendor},${info.renderer})` : '';\n  const debug = gl.debug ? ' debug' : '';\n  log.info(1, `${webGL}${debug} context ${driver}`)();\n}\n\nfunction getVersion(gl) {\n  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {\n    // WebGL2 context.\n    return 2;\n  }\n  // Must be a WebGL1 context.\n  return 1;\n}\n\n// use devicePixelRatio to set canvas width and height\nfunction setDevicePixelRatio(gl, devicePixelRatio, options) {\n  // NOTE: if options.width and options.height not used remove in v8\n  let clientWidth = 'width' in options ? options.width : gl.canvas.clientWidth;\n  let clientHeight = 'height' in options ? options.height : gl.canvas.clientHeight;\n\n  if (!clientWidth || !clientHeight) {\n    log.log(1, 'Canvas clientWidth/clientHeight is 0')();\n    // by forcing devicePixel ratio to 1, we do not scale gl.canvas.width and height in each frame.\n    devicePixelRatio = 1;\n    clientWidth = gl.canvas.width || 1;\n    clientHeight = gl.canvas.height || 1;\n  }\n\n  gl.luma = gl.luma || {};\n  gl.luma.canvasSizeInfo = gl.luma.canvasSizeInfo || {};\n  const cachedSize = gl.luma.canvasSizeInfo;\n  // Check if canvas needs to be resized\n  if (\n    cachedSize.clientWidth !== clientWidth ||\n    cachedSize.clientHeight !== clientHeight ||\n    cachedSize.devicePixelRatio !== devicePixelRatio\n  ) {\n    let clampedPixelRatio = devicePixelRatio;\n\n    const canvasWidth = Math.floor(clientWidth * clampedPixelRatio);\n    const canvasHeight = Math.floor(clientHeight * clampedPixelRatio);\n    gl.canvas.width = canvasWidth;\n    gl.canvas.height = canvasHeight;\n\n    // Note: when devicePixelRatio is too high, it is possible we might hit system limit for\n    // drawing buffer width and hight, in those cases they get clamped and resulting aspect ration may not be maintained\n    // for those cases, reduce devicePixelRatio.\n    if (gl.drawingBufferWidth !== canvasWidth || gl.drawingBufferHeight !== canvasHeight) {\n      log.warn(`Device pixel ratio clamped`)();\n      clampedPixelRatio = Math.min(\n        gl.drawingBufferWidth / clientWidth,\n        gl.drawingBufferHeight / clientHeight\n      );\n\n      gl.canvas.width = Math.floor(clientWidth * clampedPixelRatio);\n      gl.canvas.height = Math.floor(clientHeight * clampedPixelRatio);\n    }\n\n    Object.assign(gl.luma.canvasSizeInfo, {clientWidth, clientHeight, devicePixelRatio});\n  }\n}\n"]},"metadata":{},"sourceType":"module"}