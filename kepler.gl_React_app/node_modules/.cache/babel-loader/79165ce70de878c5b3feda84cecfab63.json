{"ast":null,"code":"var vs = \"\\nuniform DATAFILTER_TYPE filter_min;\\nuniform DATAFILTER_TYPE filter_softMin;\\nuniform DATAFILTER_TYPE filter_softMax;\\nuniform DATAFILTER_TYPE filter_max;\\nuniform bool filter_useSoftMargin;\\nuniform bool filter_enabled;\\nuniform bool filter_transformSize;\\n\\n#ifdef NON_INSTANCED_MODEL\\n  #define DATAFILTER_ATTRIB filterValues\\n  #define DATAFILTER_ATTRIB_64LOW filterValues64Low\\n#else\\n  #define DATAFILTER_ATTRIB instanceFilterValues\\n  #define DATAFILTER_ATTRIB_64LOW instanceFilterValues64Low\\n#endif\\n\\nattribute DATAFILTER_TYPE DATAFILTER_ATTRIB;\\n#ifdef DATAFILTER_DOUBLE\\n  attribute DATAFILTER_TYPE DATAFILTER_ATTRIB_64LOW;\\n\\n  uniform DATAFILTER_TYPE filter_min64High;\\n  uniform DATAFILTER_TYPE filter_max64High;\\n#endif\\n\\nvarying float dataFilter_value;\\n\\nfloat dataFilter_reduceValue(float value) {\\n  return value;\\n}\\nfloat dataFilter_reduceValue(vec2 value) {\\n  return min(value.x, value.y);\\n}\\nfloat dataFilter_reduceValue(vec3 value) {\\n  return min(min(value.x, value.y), value.z);\\n}\\nfloat dataFilter_reduceValue(vec4 value) {\\n  return min(min(value.x, value.y), min(value.z, value.w));\\n}\\nvoid dataFilter_setValue(DATAFILTER_TYPE valueFromMin, DATAFILTER_TYPE valueFromMax) {\\n  if (filter_enabled) {\\n    if (filter_useSoftMargin) {\\n      dataFilter_value = dataFilter_reduceValue(\\n        smoothstep(filter_min, filter_softMin, valueFromMin) *\\n        (1.0 - smoothstep(filter_softMax, filter_max, valueFromMax))\\n      );\\n    } else {\\n      dataFilter_value = dataFilter_reduceValue(\\n        step(filter_min, valueFromMin) * step(valueFromMax, filter_max)\\n      );\\n    }\\n  } else {\\n    dataFilter_value = 1.0;\\n  }\\n}\\n\";\nvar fs = \"\\nuniform bool filter_transformColor;\\nvarying float dataFilter_value;\\n\";\nvar getUniforms = function getUniforms(opts) {\n  if (!opts || !opts.extensions) {\n    return {};\n  }\n  var _opts$filterRange = opts.filterRange,\n    filterRange = _opts$filterRange === void 0 ? [-1, 1] : _opts$filterRange,\n    _opts$filterEnabled = opts.filterEnabled,\n    filterEnabled = _opts$filterEnabled === void 0 ? true : _opts$filterEnabled,\n    _opts$filterTransform = opts.filterTransformSize,\n    filterTransformSize = _opts$filterTransform === void 0 ? true : _opts$filterTransform,\n    _opts$filterTransform2 = opts.filterTransformColor,\n    filterTransformColor = _opts$filterTransform2 === void 0 ? true : _opts$filterTransform2;\n  var filterSoftRange = opts.filterSoftRange || filterRange;\n  var uniforms = Number.isFinite(filterRange[0]) ? {\n    filter_min: filterRange[0],\n    filter_softMin: filterSoftRange[0],\n    filter_softMax: filterSoftRange[1],\n    filter_max: filterRange[1]\n  } : {\n    filter_min: filterRange.map(function (r) {\n      return r[0];\n    }),\n    filter_softMin: filterSoftRange.map(function (r) {\n      return r[0];\n    }),\n    filter_softMax: filterSoftRange.map(function (r) {\n      return r[1];\n    }),\n    filter_max: filterRange.map(function (r) {\n      return r[1];\n    })\n  };\n  uniforms.filter_enabled = filterEnabled;\n  uniforms.filter_useSoftMargin = Boolean(opts.filterSoftRange);\n  uniforms.filter_transformSize = filterEnabled && filterTransformSize;\n  uniforms.filter_transformColor = filterEnabled && filterTransformColor;\n  return uniforms;\n};\nvar getUniforms64 = function getUniforms64(opts) {\n  if (!opts || !opts.extensions) {\n    return {};\n  }\n  var uniforms = getUniforms(opts);\n  if (Number.isFinite(uniforms.filter_min)) {\n    var min64High = Math.fround(uniforms.filter_min);\n    uniforms.filter_min -= min64High;\n    uniforms.filter_softMin -= min64High;\n    uniforms.filter_min64High = min64High;\n    var max64High = Math.fround(uniforms.filter_max);\n    uniforms.filter_max -= max64High;\n    uniforms.filter_softMax -= max64High;\n    uniforms.filter_max64High = max64High;\n  } else {\n    var _min64High = uniforms.filter_min.map(Math.fround);\n    uniforms.filter_min = uniforms.filter_min.map(function (x, i) {\n      return x - _min64High[i];\n    });\n    uniforms.filter_softMin = uniforms.filter_softMin.map(function (x, i) {\n      return x - _min64High[i];\n    });\n    uniforms.filter_min64High = _min64High;\n    var _max64High = uniforms.filter_max.map(Math.fround);\n    uniforms.filter_max = uniforms.filter_max.map(function (x, i) {\n      return x - _max64High[i];\n    });\n    uniforms.filter_softMax = uniforms.filter_softMax.map(function (x, i) {\n      return x - _max64High[i];\n    });\n    uniforms.filter_max64High = _max64High;\n  }\n  return uniforms;\n};\nvar inject = {\n  'vs:#main-start': \"\\n    #ifdef DATAFILTER_DOUBLE\\n      dataFilter_setValue(\\n        DATAFILTER_ATTRIB - filter_min64High + DATAFILTER_ATTRIB_64LOW,\\n        DATAFILTER_ATTRIB - filter_max64High + DATAFILTER_ATTRIB_64LOW\\n      );\\n    #else\\n      dataFilter_setValue(DATAFILTER_ATTRIB, DATAFILTER_ATTRIB);\\n    #endif\\n  \",\n  'vs:DECKGL_FILTER_SIZE': \"\\n    if (filter_transformSize) {\\n      size = size * dataFilter_value;\\n    }\\n  \",\n  'fs:DECKGL_FILTER_COLOR': \"\\n    if (dataFilter_value == 0.0) discard;\\n    if (filter_transformColor) {\\n      color.a *= dataFilter_value;\\n    }\\n  \"\n};\nexport var shaderModule = {\n  name: 'data-filter',\n  vs: vs,\n  fs: fs,\n  inject: inject,\n  getUniforms: getUniforms\n};\nexport var shaderModule64 = {\n  name: 'data-filter-fp64',\n  vs: vs,\n  fs: fs,\n  inject: inject,\n  getUniforms: getUniforms64\n};","map":{"version":3,"sources":["../../../src/data-filter/shader-module.js"],"names":["vs","fs","getUniforms","opts","extensions","filterRange","filterEnabled","filterTransformSize","filterTransformColor","filterSoftRange","uniforms","isFinite","filter_min","filter_softMin","filter_softMax","filter_max","map","r","filter_enabled","filter_useSoftMargin","Boolean","filter_transformSize","filter_transformColor","getUniforms64","Number","min64High","Math","fround","filter_min64High","max64High","filter_max64High","x","i","inject","shaderModule","name","shaderModule64"],"mappings":"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","sourcesContent":["/*\n * data filter shader module\n */\nconst vs = `\nuniform DATAFILTER_TYPE filter_min;\nuniform DATAFILTER_TYPE filter_softMin;\nuniform DATAFILTER_TYPE filter_softMax;\nuniform DATAFILTER_TYPE filter_max;\nuniform bool filter_useSoftMargin;\nuniform bool filter_enabled;\nuniform bool filter_transformSize;\n\n#ifdef NON_INSTANCED_MODEL\n  #define DATAFILTER_ATTRIB filterValues\n  #define DATAFILTER_ATTRIB_64LOW filterValues64Low\n#else\n  #define DATAFILTER_ATTRIB instanceFilterValues\n  #define DATAFILTER_ATTRIB_64LOW instanceFilterValues64Low\n#endif\n\nattribute DATAFILTER_TYPE DATAFILTER_ATTRIB;\n#ifdef DATAFILTER_DOUBLE\n  attribute DATAFILTER_TYPE DATAFILTER_ATTRIB_64LOW;\n\n  uniform DATAFILTER_TYPE filter_min64High;\n  uniform DATAFILTER_TYPE filter_max64High;\n#endif\n\nvarying float dataFilter_value;\n\nfloat dataFilter_reduceValue(float value) {\n  return value;\n}\nfloat dataFilter_reduceValue(vec2 value) {\n  return min(value.x, value.y);\n}\nfloat dataFilter_reduceValue(vec3 value) {\n  return min(min(value.x, value.y), value.z);\n}\nfloat dataFilter_reduceValue(vec4 value) {\n  return min(min(value.x, value.y), min(value.z, value.w));\n}\nvoid dataFilter_setValue(DATAFILTER_TYPE valueFromMin, DATAFILTER_TYPE valueFromMax) {\n  if (filter_enabled) {\n    if (filter_useSoftMargin) {\n      dataFilter_value = dataFilter_reduceValue(\n        smoothstep(filter_min, filter_softMin, valueFromMin) *\n        (1.0 - smoothstep(filter_softMax, filter_max, valueFromMax))\n      );\n    } else {\n      dataFilter_value = dataFilter_reduceValue(\n        step(filter_min, valueFromMin) * step(valueFromMax, filter_max)\n      );\n    }\n  } else {\n    dataFilter_value = 1.0;\n  }\n}\n`;\n\nconst fs = `\nuniform bool filter_transformColor;\nvarying float dataFilter_value;\n`;\n\nconst getUniforms = opts => {\n  if (!opts || !opts.extensions) {\n    return {};\n  }\n  const {\n    filterRange = [-1, 1],\n    filterEnabled = true,\n    filterTransformSize = true,\n    filterTransformColor = true\n  } = opts;\n  const filterSoftRange = opts.filterSoftRange || filterRange;\n\n  const uniforms = Number.isFinite(filterRange[0])\n    ? {\n        filter_min: filterRange[0],\n        filter_softMin: filterSoftRange[0],\n        filter_softMax: filterSoftRange[1],\n        filter_max: filterRange[1]\n      }\n    : {\n        filter_min: filterRange.map(r => r[0]),\n        filter_softMin: filterSoftRange.map(r => r[0]),\n        filter_softMax: filterSoftRange.map(r => r[1]),\n        filter_max: filterRange.map(r => r[1])\n      };\n  uniforms.filter_enabled = filterEnabled;\n  uniforms.filter_useSoftMargin = Boolean(opts.filterSoftRange);\n  uniforms.filter_transformSize = filterEnabled && filterTransformSize;\n  uniforms.filter_transformColor = filterEnabled && filterTransformColor;\n\n  return uniforms;\n};\n\nconst getUniforms64 = opts => {\n  if (!opts || !opts.extensions) {\n    return {};\n  }\n  const uniforms = getUniforms(opts);\n  if (Number.isFinite(uniforms.filter_min)) {\n    const min64High = Math.fround(uniforms.filter_min);\n    uniforms.filter_min -= min64High;\n    uniforms.filter_softMin -= min64High;\n    uniforms.filter_min64High = min64High;\n\n    const max64High = Math.fround(uniforms.filter_max);\n    uniforms.filter_max -= max64High;\n    uniforms.filter_softMax -= max64High;\n    uniforms.filter_max64High = max64High;\n  } else {\n    const min64High = uniforms.filter_min.map(Math.fround);\n    uniforms.filter_min = uniforms.filter_min.map((x, i) => x - min64High[i]);\n    uniforms.filter_softMin = uniforms.filter_softMin.map((x, i) => x - min64High[i]);\n    uniforms.filter_min64High = min64High;\n\n    const max64High = uniforms.filter_max.map(Math.fround);\n    uniforms.filter_max = uniforms.filter_max.map((x, i) => x - max64High[i]);\n    uniforms.filter_softMax = uniforms.filter_softMax.map((x, i) => x - max64High[i]);\n    uniforms.filter_max64High = max64High;\n  }\n  return uniforms;\n};\n\nconst inject = {\n  'vs:#main-start': `\n    #ifdef DATAFILTER_DOUBLE\n      dataFilter_setValue(\n        DATAFILTER_ATTRIB - filter_min64High + DATAFILTER_ATTRIB_64LOW,\n        DATAFILTER_ATTRIB - filter_max64High + DATAFILTER_ATTRIB_64LOW\n      );\n    #else\n      dataFilter_setValue(DATAFILTER_ATTRIB, DATAFILTER_ATTRIB);\n    #endif\n  `,\n\n  'vs:DECKGL_FILTER_SIZE': `\n    if (filter_transformSize) {\n      size = size * dataFilter_value;\n    }\n  `,\n\n  'fs:DECKGL_FILTER_COLOR': `\n    if (dataFilter_value == 0.0) discard;\n    if (filter_transformColor) {\n      color.a *= dataFilter_value;\n    }\n  `\n};\n\nexport const shaderModule = {\n  name: 'data-filter',\n  vs,\n  fs,\n  inject,\n  getUniforms\n};\n\nexport const shaderModule64 = {\n  name: 'data-filter-fp64',\n  vs,\n  fs,\n  inject,\n  getUniforms: getUniforms64\n};\n"]},"metadata":{},"sourceType":"module"}