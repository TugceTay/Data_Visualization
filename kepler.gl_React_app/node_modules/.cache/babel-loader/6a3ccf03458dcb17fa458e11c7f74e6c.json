{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { LineLayer, SolidPolygonLayer } from '@deck.gl/layers';\nimport { generateContours } from './contour-utils';\nimport { log } from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport { AGGREGATION_OPERATION, getValueFunc } from '../utils/aggregation-operation-utils';\nimport { getBoundingBox, getGridParams } from '../utils/grid-aggregation-utils';\nimport GridAggregationLayer from '../grid-aggregation-layer';\nvar DEFAULT_COLOR = [255, 255, 255, 255];\nvar DEFAULT_STROKE_WIDTH = 1;\nvar DEFAULT_THRESHOLD = 1;\nvar defaultProps = {\n  cellSize: {\n    type: 'number',\n    min: 1,\n    max: 1000,\n    value: 1000\n  },\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getWeight: {\n    type: 'accessor',\n    value: function value(x) {\n      return 1;\n    }\n  },\n  gpuAggregation: true,\n  aggregation: 'SUM',\n  contours: [{\n    threshold: DEFAULT_THRESHOLD\n  }],\n  zOffset: 0.005\n};\nvar POSITION_ATTRIBUTE_NAME = 'positions';\nvar DIMENSIONS = {\n  data: {\n    props: ['cellSize']\n  },\n  weights: {\n    props: ['aggregation'],\n    accessors: ['getWeight']\n  }\n};\nvar ContourLayer = function (_GridAggregationLayer) {\n  _inherits(ContourLayer, _GridAggregationLayer);\n  function ContourLayer() {\n    _classCallCheck(this, ContourLayer);\n    return _possibleConstructorReturn(this, _getPrototypeOf(ContourLayer).apply(this, arguments));\n  }\n  _createClass(ContourLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var _attributeManager$add;\n      _get(_getPrototypeOf(ContourLayer.prototype), \"initializeState\", this).call(this, {\n        dimensions: DIMENSIONS\n      });\n      this.setState({\n        contourData: {},\n        projectPoints: false,\n        weights: {\n          count: {\n            size: 1,\n            operation: AGGREGATION_OPERATION.SUM\n          }\n        }\n      });\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add((_attributeManager$add = {}, _defineProperty(_attributeManager$add, POSITION_ATTRIBUTE_NAME, {\n        size: 3,\n        accessor: 'getPosition',\n        type: 5130,\n        fp64: this.use64bitPositions()\n      }), _defineProperty(_attributeManager$add, \"count\", {\n        size: 3,\n        accessor: 'getWeight'\n      }), _attributeManager$add));\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      _get(_getPrototypeOf(ContourLayer.prototype), \"updateState\", this).call(this, opts);\n      var contoursChanged = false;\n      var oldProps = opts.oldProps,\n        props = opts.props;\n      var aggregationDirty = this.state.aggregationDirty;\n      if (oldProps.contours !== props.contours || oldProps.zOffset !== props.zOffset) {\n        contoursChanged = true;\n        this._updateThresholdData(opts.props);\n      }\n      if (this.getNumInstances() > 0 && (aggregationDirty || contoursChanged)) {\n        this._generateContours();\n      }\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$state$contourDa = this.state.contourData,\n        contourSegments = _this$state$contourDa.contourSegments,\n        contourPolygons = _this$state$contourDa.contourPolygons;\n      var LinesSubLayerClass = this.getSubLayerClass('lines', LineLayer);\n      var BandsSubLayerClass = this.getSubLayerClass('bands', SolidPolygonLayer);\n      var lineLayer = contourSegments && contourSegments.length > 0 && new LinesSubLayerClass(this.getSubLayerProps({\n        id: 'lines'\n      }), {\n        data: this.state.contourData.contourSegments,\n        getSourcePosition: function getSourcePosition(d) {\n          return d.start;\n        },\n        getTargetPosition: function getTargetPosition(d) {\n          return d.end;\n        },\n        getColor: function getColor(d) {\n          return d.contour.color || DEFAULT_COLOR;\n        },\n        getWidth: function getWidth(d) {\n          return d.contour.strokeWidth || DEFAULT_STROKE_WIDTH;\n        }\n      });\n      var bandsLayer = contourPolygons && contourPolygons.length > 0 && new BandsSubLayerClass(this.getSubLayerProps({\n        id: 'bands'\n      }), {\n        data: this.state.contourData.contourPolygons,\n        getPolygon: function getPolygon(d) {\n          return d.vertices;\n        },\n        getFillColor: function getFillColor(d) {\n          return d.contour.color || DEFAULT_COLOR;\n        }\n      });\n      return [lineLayer, bandsLayer];\n    }\n  }, {\n    key: \"updateAggregationState\",\n    value: function updateAggregationState(opts) {\n      var props = opts.props,\n        oldProps = opts.oldProps;\n      var cellSize = props.cellSize,\n        coordinateSystem = props.coordinateSystem;\n      var viewport = this.context.viewport;\n      var cellSizeChanged = oldProps.cellSize !== cellSize;\n      var gpuAggregation = props.gpuAggregation;\n      if (this.state.gpuAggregation !== props.gpuAggregation) {\n        if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.gl)) {\n          log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n          gpuAggregation = false;\n        }\n      }\n      var gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n      this.setState({\n        gpuAggregation: gpuAggregation\n      });\n      var dimensions = this.state.dimensions;\n      var positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n      var data = dimensions.data,\n        weights = dimensions.weights;\n      var boundingBox = this.state.boundingBox;\n      if (positionsChanged) {\n        boundingBox = getBoundingBox(this.getAttributes(), this.getNumInstances());\n        this.setState({\n          boundingBox: boundingBox\n        });\n      }\n      if (positionsChanged || cellSizeChanged) {\n        var _getGridParams = getGridParams(boundingBox, cellSize, viewport, coordinateSystem),\n          gridOffset = _getGridParams.gridOffset,\n          translation = _getGridParams.translation,\n          width = _getGridParams.width,\n          height = _getGridParams.height,\n          numCol = _getGridParams.numCol,\n          numRow = _getGridParams.numRow;\n        this.allocateResources(numRow, numCol);\n        this.setState({\n          gridOffset: gridOffset,\n          boundingBox: boundingBox,\n          translation: translation,\n          posOffset: translation.slice(),\n          gridOrigin: [-1 * translation[0], -1 * translation[1]],\n          width: width,\n          height: height,\n          numCol: numCol,\n          numRow: numRow\n        });\n      }\n      var aggregationDataDirty = positionsChanged || gpuAggregationChanged || this.isAggregationDirty(opts, {\n        dimension: data,\n        compareAll: gpuAggregation\n      });\n      var aggregationWeightsDirty = this.isAggregationDirty(opts, {\n        dimension: weights\n      });\n      if (aggregationWeightsDirty) {\n        this._updateAccessors(opts);\n      }\n      if (aggregationDataDirty || aggregationWeightsDirty) {\n        this._resetResults();\n      }\n      this.setState({\n        aggregationDataDirty: aggregationDataDirty,\n        aggregationWeightsDirty: aggregationWeightsDirty\n      });\n    }\n  }, {\n    key: \"_updateAccessors\",\n    value: function _updateAccessors(opts) {\n      var _opts$props = opts.props,\n        getWeight = _opts$props.getWeight,\n        aggregation = _opts$props.aggregation;\n      var count = this.state.weights.count;\n      if (count) {\n        count.getWeight = getWeight;\n        count.operation = AGGREGATION_OPERATION[aggregation];\n      }\n      this.setState({\n        getValue: getValueFunc(aggregation, getWeight)\n      });\n    }\n  }, {\n    key: \"_resetResults\",\n    value: function _resetResults() {\n      var count = this.state.weights.count;\n      if (count) {\n        count.aggregationData = null;\n      }\n    }\n  }, {\n    key: \"_generateContours\",\n    value: function _generateContours() {\n      var _this$state = this.state,\n        numCol = _this$state.numCol,\n        numRow = _this$state.numRow,\n        gridOrigin = _this$state.gridOrigin,\n        gridOffset = _this$state.gridOffset,\n        thresholdData = _this$state.thresholdData;\n      var count = this.state.weights.count;\n      var aggregationData = count.aggregationData;\n      if (!aggregationData) {\n        aggregationData = count.aggregationBuffer.getData();\n        count.aggregationData = aggregationData;\n      }\n      var _GPUGridAggregator$ge = GPUGridAggregator.getCellData({\n          countsData: aggregationData\n        }),\n        cellWeights = _GPUGridAggregator$ge.cellWeights;\n      var contourData = generateContours({\n        thresholdData: thresholdData,\n        cellWeights: cellWeights,\n        gridSize: [numCol, numRow],\n        gridOrigin: gridOrigin,\n        cellSize: [gridOffset.xOffset, gridOffset.yOffset]\n      });\n      this.setState({\n        contourData: contourData\n      });\n    }\n  }, {\n    key: \"_updateThresholdData\",\n    value: function _updateThresholdData(props) {\n      var contours = props.contours,\n        zOffset = props.zOffset;\n      var count = contours.length;\n      var thresholdData = new Array(count);\n      for (var i = 0; i < count; i++) {\n        var contour = contours[i];\n        thresholdData[i] = {\n          contour: contour,\n          zIndex: contour.zIndex || i,\n          zOffset: zOffset\n        };\n      }\n      this.setState({\n        thresholdData: thresholdData\n      });\n    }\n  }]);\n  return ContourLayer;\n}(GridAggregationLayer);\nexport { ContourLayer as default };\nContourLayer.layerName = 'ContourLayer';\nContourLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/contour-layer/contour-layer.js"],"names":["LineLayer","SolidPolygonLayer","generateContours","log","GPUGridAggregator","AGGREGATION_OPERATION","getValueFunc","getBoundingBox","getGridParams","GridAggregationLayer","DEFAULT_COLOR","DEFAULT_STROKE_WIDTH","DEFAULT_THRESHOLD","defaultProps","cellSize","type","min","max","value","getPosition","x","position","getWeight","gpuAggregation","aggregation","contours","threshold","zOffset","POSITION_ATTRIBUTE_NAME","DIMENSIONS","data","props","weights","accessors","ContourLayer","dimensions","setState","contourData","projectPoints","count","size","operation","SUM","attributeManager","getAttributeManager","add","accessor","fp64","use64bitPositions","opts","contoursChanged","oldProps","aggregationDirty","state","_updateThresholdData","getNumInstances","_generateContours","contourSegments","contourPolygons","LinesSubLayerClass","getSubLayerClass","BandsSubLayerClass","lineLayer","length","getSubLayerProps","id","getSourcePosition","d","start","getTargetPosition","end","getColor","contour","color","getWidth","strokeWidth","bandsLayer","getPolygon","vertices","getFillColor","coordinateSystem","viewport","context","cellSizeChanged","isSupported","gl","warn","gpuAggregationChanged","positionsChanged","isAttributeChanged","boundingBox","getAttributes","gridOffset","translation","width","height","numCol","numRow","allocateResources","posOffset","slice","gridOrigin","aggregationDataDirty","isAggregationDirty","dimension","compareAll","aggregationWeightsDirty","_updateAccessors","_resetResults","getValue","aggregationData","thresholdData","aggregationBuffer","getData","cellWeights","getCellData","countsData","gridSize","xOffset","yOffset","Array","i","zIndex","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {LineLayer, SolidPolygonLayer} from '@deck.gl/layers';\nimport {generateContours} from './contour-utils';\nimport {log} from '@deck.gl/core';\n\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION, getValueFunc} from '../utils/aggregation-operation-utils';\nimport {getBoundingBox, getGridParams} from '../utils/grid-aggregation-utils';\nimport GridAggregationLayer from '../grid-aggregation-layer';\n\nconst DEFAULT_COLOR = [255, 255, 255, 255];\nconst DEFAULT_STROKE_WIDTH = 1;\nconst DEFAULT_THRESHOLD = 1;\n\nconst defaultProps = {\n  // grid aggregation\n  cellSize: {type: 'number', min: 1, max: 1000, value: 1000},\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: x => 1},\n  gpuAggregation: true,\n  aggregation: 'SUM',\n\n  // contour lines\n  contours: [{threshold: DEFAULT_THRESHOLD}],\n\n  zOffset: 0.005\n};\n\nconst POSITION_ATTRIBUTE_NAME = 'positions';\n\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSize']\n  },\n  weights: {\n    props: ['aggregation'],\n    accessors: ['getWeight']\n  }\n};\n\nexport default class ContourLayer extends GridAggregationLayer {\n  initializeState() {\n    super.initializeState({\n      dimensions: DIMENSIONS\n    });\n    this.setState({\n      contourData: {},\n      projectPoints: false,\n      weights: {\n        count: {\n          size: 1,\n          operation: AGGREGATION_OPERATION.SUM\n        }\n      }\n    });\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions()\n      },\n      // this attribute is used in gpu aggregation path only\n      count: {size: 3, accessor: 'getWeight'}\n    });\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n    let contoursChanged = false;\n    const {oldProps, props} = opts;\n    const {aggregationDirty} = this.state;\n\n    if (oldProps.contours !== props.contours || oldProps.zOffset !== props.zOffset) {\n      contoursChanged = true;\n      this._updateThresholdData(opts.props);\n    }\n\n    if (this.getNumInstances() > 0 && (aggregationDirty || contoursChanged)) {\n      this._generateContours();\n    }\n  }\n\n  renderLayers() {\n    const {contourSegments, contourPolygons} = this.state.contourData;\n\n    const LinesSubLayerClass = this.getSubLayerClass('lines', LineLayer);\n    const BandsSubLayerClass = this.getSubLayerClass('bands', SolidPolygonLayer);\n\n    // Contour lines layer\n    const lineLayer =\n      contourSegments &&\n      contourSegments.length > 0 &&\n      new LinesSubLayerClass(\n        this.getSubLayerProps({\n          id: 'lines'\n        }),\n        {\n          data: this.state.contourData.contourSegments,\n          getSourcePosition: d => d.start,\n          getTargetPosition: d => d.end,\n          getColor: d => d.contour.color || DEFAULT_COLOR,\n          getWidth: d => d.contour.strokeWidth || DEFAULT_STROKE_WIDTH\n        }\n      );\n\n    // Contour bands layer\n    const bandsLayer =\n      contourPolygons &&\n      contourPolygons.length > 0 &&\n      new BandsSubLayerClass(\n        this.getSubLayerProps({\n          id: 'bands'\n        }),\n        {\n          data: this.state.contourData.contourPolygons,\n          getPolygon: d => d.vertices,\n          getFillColor: d => d.contour.color || DEFAULT_COLOR\n        }\n      );\n\n    return [lineLayer, bandsLayer];\n  }\n\n  // Aggregation Overrides\n\n  /* eslint-disable max-statements, complexity */\n  updateAggregationState(opts) {\n    const {props, oldProps} = opts;\n    const {cellSize, coordinateSystem} = props;\n    const {viewport} = this.context;\n    const cellSizeChanged = oldProps.cellSize !== cellSize;\n    let gpuAggregation = props.gpuAggregation;\n    if (this.state.gpuAggregation !== props.gpuAggregation) {\n      if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.gl)) {\n        log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n        gpuAggregation = false;\n      }\n    }\n    const gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n    this.setState({\n      gpuAggregation\n    });\n\n    const {dimensions} = this.state;\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n    const {data, weights} = dimensions;\n\n    let {boundingBox} = this.state;\n    if (positionsChanged) {\n      boundingBox = getBoundingBox(this.getAttributes(), this.getNumInstances());\n      this.setState({boundingBox});\n    }\n    if (positionsChanged || cellSizeChanged) {\n      const {gridOffset, translation, width, height, numCol, numRow} = getGridParams(\n        boundingBox,\n        cellSize,\n        viewport,\n        coordinateSystem\n      );\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        gridOffset,\n        boundingBox,\n        translation,\n        posOffset: translation.slice(), // Used for CPU aggregation, to offset points\n        gridOrigin: [-1 * translation[0], -1 * translation[1]],\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n\n    const aggregationDataDirty =\n      positionsChanged ||\n      gpuAggregationChanged ||\n      this.isAggregationDirty(opts, {\n        dimension: data,\n        compareAll: gpuAggregation // check for all (including extentions props) when using gpu aggregation\n      });\n    const aggregationWeightsDirty = this.isAggregationDirty(opts, {\n      dimension: weights\n    });\n\n    if (aggregationWeightsDirty) {\n      this._updateAccessors(opts);\n    }\n    if (aggregationDataDirty || aggregationWeightsDirty) {\n      this._resetResults();\n    }\n    this.setState({\n      aggregationDataDirty,\n      aggregationWeightsDirty\n    });\n  }\n  /* eslint-enable max-statements, complexity */\n\n  // Private (Aggregation)\n\n  _updateAccessors(opts) {\n    const {getWeight, aggregation} = opts.props;\n    const {count} = this.state.weights;\n    if (count) {\n      count.getWeight = getWeight;\n      count.operation = AGGREGATION_OPERATION[aggregation];\n    }\n    this.setState({getValue: getValueFunc(aggregation, getWeight)});\n  }\n\n  _resetResults() {\n    const {count} = this.state.weights;\n    if (count) {\n      count.aggregationData = null;\n    }\n  }\n\n  // Private (Contours)\n\n  _generateContours() {\n    const {numCol, numRow, gridOrigin, gridOffset, thresholdData} = this.state;\n    const {count} = this.state.weights;\n    let {aggregationData} = count;\n    if (!aggregationData) {\n      aggregationData = count.aggregationBuffer.getData();\n      count.aggregationData = aggregationData;\n    }\n\n    const {cellWeights} = GPUGridAggregator.getCellData({countsData: aggregationData});\n    const contourData = generateContours({\n      thresholdData,\n      cellWeights,\n      gridSize: [numCol, numRow],\n      gridOrigin,\n      cellSize: [gridOffset.xOffset, gridOffset.yOffset]\n    });\n\n    // contourData contains both iso-lines and iso-bands if requested.\n    this.setState({contourData});\n  }\n\n  _updateThresholdData(props) {\n    const {contours, zOffset} = props;\n    const count = contours.length;\n    const thresholdData = new Array(count);\n    for (let i = 0; i < count; i++) {\n      const contour = contours[i];\n      thresholdData[i] = {\n        contour,\n        zIndex: contour.zIndex || i,\n        zOffset\n      };\n    }\n    this.setState({thresholdData});\n  }\n}\n\nContourLayer.layerName = 'ContourLayer';\nContourLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}