{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport parseQuantizedMesh from './lib/parse-quantized-mesh';\nvar VERSION = typeof \"2.3.13\" !== 'undefined' ? \"2.3.13\" : 'latest';\nexport var QuantizedMeshWorkerLoader = {\n  id: 'quantized-mesh',\n  name: 'Quantized Mesh',\n  version: VERSION,\n  extensions: ['terrain'],\n  mimeTypes: ['application/vnd.quantized-mesh'],\n  options: {\n    'quantized-mesh': {\n      workerUrl: \"https://unpkg.com/@loaders.gl/terrain@\".concat(VERSION, \"/dist/quantized-mesh-loader.worker.js\"),\n      bounds: [0, 0, 1, 1]\n    }\n  }\n};\nexport var QuantizedMeshLoader = _objectSpread(_objectSpread({}, QuantizedMeshWorkerLoader), {}, {\n  parseSync: parseQuantizedMesh,\n  parse: function () {\n    var _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer, options) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", parseQuantizedMesh(arrayBuffer, options));\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    function parse(_x, _x2) {\n      return _parse.apply(this, arguments);\n    }\n    return parse;\n  }()\n});","map":{"version":3,"sources":["../../src/quantized-mesh-loader.js"],"names":["parseQuantizedMesh","VERSION","QuantizedMeshWorkerLoader","id","name","version","extensions","mimeTypes","options","workerUrl","bounds","QuantizedMeshLoader","parseSync","parse","arrayBuffer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAOA,kBAAP,MAA+B,4BAA/B;AAIA,IAAMC,OAAO,GAAG,OAAA,QAAA,KAAuB,WAAvB,GAAA,QAAA,GAAmD,QAAnE;AAGA,OAAO,IAAMC,yBAAyB,GAAG;EACvCC,EAAE,EAAE,gBADmC;EAEvCC,IAAI,EAAE,gBAFiC;EAGvCC,OAAO,EAAEJ,OAH8B;EAIvCK,UAAU,EAAE,CAAC,SAAD,CAJ2B;EAKvCC,SAAS,EAAE,CAAC,gCAAD,CAL4B;EAMvCC,OAAO,EAAE;IACP,gBAAA,EAAkB;MAChBC,SAAS,EAAA,wCAAA,CAAA,MAAA,CAA2CR,OAA3C,EAAA,uCAAA,CADO;MAEhBS,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;IAFQ;EADX;AAN8B,CAAlC;AAeP,OAAO,IAAMC,mBAAmB,GAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EAC3BT,yBAD2B,CAAA,EAAA,CAAA,CAAA,EAAA;EAE9BU,SAAS,EAAEZ,kBAFmB;EAG9Ba,KAAK,EAAA,YAAA;IAAA,IAAA,MAAA,GAAA,iBAAA,CAAA,mBAAA,CAAA,IAAA,CAAE,SAAA,OAAA,CAAOC,WAAP,EAAoBN,OAApB,EAAA;MAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;QAAA,OAAA,CAAA,EAAA;UAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;YAAA,KAAA,CAAA;cAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAgCR,kBAAkB,CAACc,WAAD,EAAcN,OAAd,CAAlD,CAAA;YAAA,KAAA,CAAA;YAAA,KAAA,KAAA;cAAA,OAAA,QAAA,CAAA,IAAA,EAAA;UAAA;QAAA;MAAA,CAAA,EAAA,OAAA,CAAA;IAAA,CAAF,CAAA,CAAA;IAAA,SAAA,KAAA,CAAA,EAAA,EAAA,GAAA,EAAA;MAAA,OAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;IAAA;IAAA,OAAA,KAAA;EAAA,CAAA;AAHyB,CAAA,CAAzB","sourcesContent":["/** @typedef {import('@loaders.gl/loader-utils').LoaderObject} LoaderObject */\n/** @typedef {import('@loaders.gl/loader-utils').WorkerLoaderObject} WorkerLoaderObject */\nimport parseQuantizedMesh from './lib/parse-quantized-mesh';\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\n/** @type {WorkerLoaderObject} */\nexport const QuantizedMeshWorkerLoader = {\n  id: 'quantized-mesh',\n  name: 'Quantized Mesh',\n  version: VERSION,\n  extensions: ['terrain'],\n  mimeTypes: ['application/vnd.quantized-mesh'],\n  options: {\n    'quantized-mesh': {\n      workerUrl: `https://unpkg.com/@loaders.gl/terrain@${VERSION}/dist/quantized-mesh-loader.worker.js`,\n      bounds: [0, 0, 1, 1]\n    }\n  }\n};\n\n/** @type {LoaderObject} */\nexport const QuantizedMeshLoader = {\n  ...QuantizedMeshWorkerLoader,\n  parseSync: parseQuantizedMesh,\n  parse: async (arrayBuffer, options) => parseQuantizedMesh(arrayBuffer, options)\n};\n"]},"metadata":{},"sourceType":"module"}