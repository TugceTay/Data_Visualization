{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport { assert } from '@loaders.gl/loader-utils';\nexport function isLoaderObject(loader) {\n  if (!loader) {\n    return false;\n  }\n  if (Array.isArray(loader)) {\n    loader = loader[0];\n  }\n  var hasParser = loader.parseTextSync || loader.parseSync || loader.parse || loader.parseStream || loader.parseInBatches;\n  var loaderOptions = loader.options && loader.options[loader.id];\n  hasParser = hasParser || loaderOptions && loaderOptions.workerUrl;\n  return hasParser;\n}\nexport function normalizeLoader(loader) {\n  assert(loader, 'null loader');\n  assert(isLoaderObject(loader), 'invalid loader');\n  var options;\n  if (Array.isArray(loader)) {\n    options = loader[1];\n    loader = loader[0];\n    loader = _objectSpread(_objectSpread({}, loader), {}, {\n      options: _objectSpread(_objectSpread({}, loader.options), options)\n    });\n  }\n  if (loader.extension) {\n    loader.extensions = loader.extensions || loader.extension;\n    delete loader.extension;\n  }\n  if (!Array.isArray(loader.extensions)) {\n    loader.extensions = [loader.extensions];\n  }\n  assert(loader.extensions && loader.extensions.length > 0 && loader.extensions[0]);\n  if (loader.parseTextSync || loader.parseText) {\n    loader.text = true;\n  }\n  if (!loader.text) {\n    loader.binary = true;\n  }\n  return loader;\n}","map":{"version":3,"sources":["../../../../src/lib/loader-utils/normalize-loader.js"],"names":["assert","isLoaderObject","loader","Array","isArray","hasParser","parseTextSync","parseSync","parse","parseStream","parseInBatches","loaderOptions","options","id","workerUrl","normalizeLoader","extension","extensions","length","parseText","text","binary"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAQA,MAAR,QAAqB,0BAArB;AAEA,OAAO,SAASC,cAAT,CAAwBC,MAAxB,EAAgC;EACrC,IAAI,CAACA,MAAL,EAAa;IACX,OAAO,KAAP;EACD;EAED,IAAIC,KAAK,CAACC,OAAND,CAAcD,MAAdC,CAAJ,EAA2B;IACzBD,MAAM,GAAGA,MAAM,CAAC,CAAD,CAAfA;EACD;EAED,IAAIG,SAAS,GACXH,MAAM,CAACI,aAAPJ,IACAA,MAAM,CAACK,SADPL,IAEAA,MAAM,CAACM,KAFPN,IAGAA,MAAM,CAACO,WAHPP,IAIAA,MAAM,CAACQ,cALT;EAOA,IAAMC,aAAa,GAAGT,MAAM,CAACU,OAAPV,IAAkBA,MAAM,CAACU,OAAPV,CAAeA,MAAM,CAACW,EAAtBX,CAAxC;EACAG,SAAS,GAAGA,SAAS,IAAKM,aAAa,IAAIA,aAAa,CAACG,SAAzDT;EAEA,OAAOA,SAAP;AACD;AAED,OAAO,SAASU,eAAT,CAAyBb,MAAzB,EAAiC;EAItCF,MAAM,CAACE,MAAD,EAAS,aAAT,CAANF;EACAA,MAAM,CAACC,cAAc,CAACC,MAAD,CAAf,EAAyB,gBAAzB,CAANF;EAKA,IAAIY,OAAJ;EACA,IAAIT,KAAK,CAACC,OAAND,CAAcD,MAAdC,CAAJ,EAA2B;IACzBS,OAAO,GAAGV,MAAM,CAAC,CAAD,CAAhBU;IACAV,MAAM,GAAGA,MAAM,CAAC,CAAD,CAAfA;IACAA,MAAM,GAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EACDA,MADC,CAAA,EAAA,CAAA,CAAA,EAAA;MAEJU,OAAO,EAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EAAMV,MAAM,CAACU,OAAb,CAAA,EAAyBA,OAAzB;IAFH,CAAA,CAANV;EAID;EAKD,IAAIA,MAAM,CAACc,SAAX,EAAsB;IACpBd,MAAM,CAACe,UAAPf,GAAoBA,MAAM,CAACe,UAAPf,IAAqBA,MAAM,CAACc,SAAhDd;IACA,OAAOA,MAAM,CAACc,SAAd;EACD;EAGD,IAAI,CAACb,KAAK,CAACC,OAAND,CAAcD,MAAM,CAACe,UAArBd,CAAL,EAAuC;IACrCD,MAAM,CAACe,UAAPf,GAAoB,CAACA,MAAM,CAACe,UAAR,CAApBf;EACD;EAEDF,MAAM,CAACE,MAAM,CAACe,UAAPf,IAAqBA,MAAM,CAACe,UAAPf,CAAkBgB,MAAlBhB,GAA2B,CAAhDA,IAAqDA,MAAM,CAACe,UAAPf,CAAkB,CAAlBA,CAAtD,CAANF;EAKA,IAAIE,MAAM,CAACI,aAAPJ,IAAwBA,MAAM,CAACiB,SAAnC,EAA8C;IAC5CjB,MAAM,CAACkB,IAAPlB,GAAc,IAAdA;EACD;EAED,IAAI,CAACA,MAAM,CAACkB,IAAZ,EAAkB;IAChBlB,MAAM,CAACmB,MAAPnB,GAAgB,IAAhBA;EACD;EAED,OAAOA,MAAP;AACD","sourcesContent":["import {assert} from '@loaders.gl/loader-utils';\n\nexport function isLoaderObject(loader) {\n  if (!loader) {\n    return false;\n  }\n\n  if (Array.isArray(loader)) {\n    loader = loader[0];\n  }\n\n  let hasParser =\n    loader.parseTextSync ||\n    loader.parseSync ||\n    loader.parse ||\n    loader.parseStream || // TODO Remove, Replace with parseInBatches\n    loader.parseInBatches;\n\n  const loaderOptions = loader.options && loader.options[loader.id];\n  hasParser = hasParser || (loaderOptions && loaderOptions.workerUrl);\n\n  return hasParser;\n}\n\nexport function normalizeLoader(loader) {\n  // This error is fairly easy to trigger by mixing up import statments etc\n  // So we make an exception and add a developer error message for this case\n  // To help new users from getting stuck here\n  assert(loader, 'null loader');\n  assert(isLoaderObject(loader), 'invalid loader');\n\n  // NORMALIZE [LOADER, OPTIONS] => LOADER\n\n  // If [loader, options], create a new loaders object with options merged in\n  let options;\n  if (Array.isArray(loader)) {\n    options = loader[1];\n    loader = loader[0];\n    loader = {\n      ...loader,\n      options: {...loader.options, ...options}\n    };\n  }\n\n  // NORMALIZE LOADER.EXTENSIONS\n\n  // Remove `extension`` prop, replace with `extensions``\n  if (loader.extension) {\n    loader.extensions = loader.extensions || loader.extension;\n    delete loader.extension;\n  }\n\n  // Ensure loader.extensions is an array\n  if (!Array.isArray(loader.extensions)) {\n    loader.extensions = [loader.extensions];\n  }\n\n  assert(loader.extensions && loader.extensions.length > 0 && loader.extensions[0]);\n\n  // NORMALIZE text and binary flags\n\n  // Ensure at least one of text/binary flags are properly set\n  if (loader.parseTextSync || loader.parseText) {\n    loader.text = true;\n  }\n\n  if (!loader.text) {\n    loader.binary = true;\n  }\n\n  return loader;\n}\n"]},"metadata":{},"sourceType":"module"}