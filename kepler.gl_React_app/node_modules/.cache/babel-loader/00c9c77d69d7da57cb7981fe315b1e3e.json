{"ast":null,"code":"import { Vector3 } from '@math.gl/core';\nimport { GL, octDecode } from '@loaders.gl/math';\nvar scratchNormal = new Vector3();\nexport function normalize3DTileNormalAttribute(tile, normals) {\n  if (!normals) {\n    return null;\n  }\n  if (tile.isOctEncoded16P) {\n    var decodedArray = new Float32Array(tile.pointsLength * 3);\n    for (var i = 0; i < tile.pointsLength; i++) {\n      octDecode(normals[i * 2], normals[i * 2 + 1], scratchNormal);\n      scratchNormal.toArray(decodedArray, i * 3);\n    }\n    return {\n      type: GL.FLOAT,\n      size: 2,\n      value: decodedArray\n    };\n  }\n  return {\n    type: GL.FLOAT,\n    size: 2,\n    value: normals\n  };\n}","map":{"version":3,"sources":["../../../../../src/lib/parsers/helpers/normalize-3d-tile-normals.js"],"names":["Vector3","GL","octDecode","scratchNormal","normalize3DTileNormalAttribute","tile","normals","isOctEncoded16P","decodedArray","Float32Array","pointsLength","i","toArray","type","FLOAT","size","value"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,eAAtB;AACA,SAAQC,EAAR,EAAYC,SAAZ,QAA4B,kBAA5B;AAEA,IAAMC,aAAa,GAAG,IAAIH,OAAJ,EAAtB;AAEA,OAAO,SAASI,8BAAT,CAAwCC,IAAxC,EAA8CC,OAA9C,EAAuD;EAC5D,IAAI,CAACA,OAAL,EAAc;IACZ,OAAO,IAAP;EACD;EAED,IAAID,IAAI,CAACE,eAAT,EAA0B;IACxB,IAAMC,YAAY,GAAG,IAAIC,YAAJ,CAAiBJ,IAAI,CAACK,YAALL,GAAoB,CAArC,CAArB;IACA,KAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAAI,CAACK,YAAzB,EAAuCC,CAAC,EAAxC,EAA4C;MAC1CT,SAAS,CAACI,OAAO,CAACK,CAAC,GAAG,CAAL,CAAR,EAAiBL,OAAO,CAACK,CAAC,GAAG,CAAJA,GAAQ,CAAT,CAAxB,EAAqCR,aAArC,CAATD;MAEAC,aAAa,CAACS,OAAdT,CAAsBK,YAAtBL,EAAoCQ,CAAC,GAAG,CAAxCR,CAAAA;IACD;IAED,OAAO;MACLU,IAAI,EAAEZ,EAAE,CAACa,KADJ;MAELC,IAAI,EAAE,CAFD;MAGLC,KAAK,EAAER;IAHF,CAAP;EAKD;EAED,OAAO;IACLK,IAAI,EAAEZ,EAAE,CAACa,KADJ;IAELC,IAAI,EAAE,CAFD;IAGLC,KAAK,EAAEV;EAHF,CAAP;AAKD","sourcesContent":["import {Vector3} from '@math.gl/core';\nimport {GL, octDecode} from '@loaders.gl/math';\n\nconst scratchNormal = new Vector3();\n\nexport function normalize3DTileNormalAttribute(tile, normals) {\n  if (!normals) {\n    return null;\n  }\n\n  if (tile.isOctEncoded16P) {\n    const decodedArray = new Float32Array(tile.pointsLength * 3);\n    for (let i = 0; i < tile.pointsLength; i++) {\n      octDecode(normals[i * 2], normals[i * 2 + 1], scratchNormal);\n      // @ts-ignore\n      scratchNormal.toArray(decodedArray, i * 3);\n    }\n\n    return {\n      type: GL.FLOAT,\n      size: 2,\n      value: decodedArray\n    };\n  }\n\n  return {\n    type: GL.FLOAT,\n    size: 2,\n    value: normals\n  };\n}\n"]},"metadata":{},"sourceType":"module"}