{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { clamp, Vector2 } from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport { TRANSITION_EVENTS } from './transition-manager';\nimport { mod } from '../utils/math-utils';\nvar MOVEMENT_SPEED = 50;\nvar DEFAULT_STATE = {\n  orbitAxis: 'Z',\n  rotationX: 0,\n  rotationOrbit: 0,\n  zoom: 0,\n  target: [0, 0, 0],\n  minRotationX: -90,\n  maxRotationX: 90,\n  minZoom: -Infinity,\n  maxZoom: Infinity\n};\nvar LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: function transitionEasing(t) {\n    return t;\n  },\n  transitionInterpolator: new LinearInterpolator(['target', 'zoom', 'rotationX', 'rotationOrbit']),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\nvar zoom2Scale = function zoom2Scale(zoom) {\n  return Math.pow(2, zoom);\n};\nexport var OrbitState = function (_ViewState) {\n  _inherits(OrbitState, _ViewState);\n  function OrbitState(_ref) {\n    var _this;\n    var makeViewport = _ref.makeViewport,\n      width = _ref.width,\n      height = _ref.height,\n      _ref$orbitAxis = _ref.orbitAxis,\n      orbitAxis = _ref$orbitAxis === void 0 ? DEFAULT_STATE.orbitAxis : _ref$orbitAxis,\n      _ref$rotationX = _ref.rotationX,\n      rotationX = _ref$rotationX === void 0 ? DEFAULT_STATE.rotationX : _ref$rotationX,\n      _ref$rotationOrbit = _ref.rotationOrbit,\n      rotationOrbit = _ref$rotationOrbit === void 0 ? DEFAULT_STATE.rotationOrbit : _ref$rotationOrbit,\n      _ref$target = _ref.target,\n      target = _ref$target === void 0 ? DEFAULT_STATE.target : _ref$target,\n      _ref$zoom = _ref.zoom,\n      zoom = _ref$zoom === void 0 ? DEFAULT_STATE.zoom : _ref$zoom,\n      _ref$minRotationX = _ref.minRotationX,\n      minRotationX = _ref$minRotationX === void 0 ? DEFAULT_STATE.minRotationX : _ref$minRotationX,\n      _ref$maxRotationX = _ref.maxRotationX,\n      maxRotationX = _ref$maxRotationX === void 0 ? DEFAULT_STATE.maxRotationX : _ref$maxRotationX,\n      _ref$minZoom = _ref.minZoom,\n      minZoom = _ref$minZoom === void 0 ? DEFAULT_STATE.minZoom : _ref$minZoom,\n      _ref$maxZoom = _ref.maxZoom,\n      maxZoom = _ref$maxZoom === void 0 ? DEFAULT_STATE.maxZoom : _ref$maxZoom,\n      startPanPosition = _ref.startPanPosition,\n      startTarget = _ref.startTarget,\n      startRotationX = _ref.startRotationX,\n      startRotationOrbit = _ref.startRotationOrbit,\n      startZoomPosition = _ref.startZoomPosition,\n      startZoom = _ref.startZoom;\n    _classCallCheck(this, OrbitState);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(OrbitState).call(this, {\n      width: width,\n      height: height,\n      orbitAxis: orbitAxis,\n      rotationX: rotationX,\n      rotationOrbit: rotationOrbit,\n      target: target,\n      zoom: zoom,\n      minRotationX: minRotationX,\n      maxRotationX: maxRotationX,\n      minZoom: minZoom,\n      maxZoom: maxZoom\n    }));\n    _this._interactiveState = {\n      startPanPosition: startPanPosition,\n      startTarget: startTarget,\n      startRotationX: startRotationX,\n      startRotationOrbit: startRotationOrbit,\n      startZoomPosition: startZoomPosition,\n      startZoom: startZoom\n    };\n    _this.makeViewport = makeViewport;\n    return _this;\n  }\n  _createClass(OrbitState, [{\n    key: \"getViewportProps\",\n    value: function getViewportProps() {\n      return this._viewportProps;\n    }\n  }, {\n    key: \"getInteractiveState\",\n    value: function getInteractiveState() {\n      return this._interactiveState;\n    }\n  }, {\n    key: \"panStart\",\n    value: function panStart(_ref2) {\n      var pos = _ref2.pos;\n      var target = this._viewportProps.target;\n      return this._getUpdatedState({\n        startPanPosition: pos,\n        startTarget: target\n      });\n    }\n  }, {\n    key: \"pan\",\n    value: function pan(_ref3) {\n      var pos = _ref3.pos,\n        startPos = _ref3.startPos;\n      var _this$_interactiveSta = this._interactiveState,\n        startPanPosition = _this$_interactiveSta.startPanPosition,\n        startTarget = _this$_interactiveSta.startTarget;\n      var delta = new Vector2(pos).subtract(startPanPosition);\n      return this._getUpdatedState({\n        target: this._calculateNewTarget({\n          startTarget: startTarget,\n          pixelOffset: delta\n        })\n      });\n    }\n  }, {\n    key: \"panEnd\",\n    value: function panEnd() {\n      return this._getUpdatedState({\n        startPanPosition: null,\n        startTarget: null\n      });\n    }\n  }, {\n    key: \"rotateStart\",\n    value: function rotateStart(_ref4) {\n      var pos = _ref4.pos;\n      return this._getUpdatedState({\n        startRotationX: this._viewportProps.rotationX,\n        startRotationOrbit: this._viewportProps.rotationOrbit\n      });\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(_ref5) {\n      var deltaScaleX = _ref5.deltaScaleX,\n        deltaScaleY = _ref5.deltaScaleY;\n      var _this$_interactiveSta2 = this._interactiveState,\n        startRotationX = _this$_interactiveSta2.startRotationX,\n        startRotationOrbit = _this$_interactiveSta2.startRotationOrbit;\n      if (!Number.isFinite(startRotationX) || !Number.isFinite(startRotationOrbit)) {\n        return this;\n      }\n      if (startRotationX < -90 || startRotationX > 90) {\n        deltaScaleX *= -1;\n      }\n      return this._getUpdatedState({\n        rotationX: startRotationX + deltaScaleY * 180,\n        rotationOrbit: startRotationOrbit + deltaScaleX * 180,\n        isRotating: true\n      });\n    }\n  }, {\n    key: \"rotateEnd\",\n    value: function rotateEnd() {\n      return this._getUpdatedState({\n        startRotationX: null,\n        startRotationOrbit: null\n      });\n    }\n  }, {\n    key: \"shortestPathFrom\",\n    value: function shortestPathFrom(viewState) {\n      var fromProps = viewState.getViewportProps();\n      var props = Object.assign({}, this._viewportProps);\n      var rotationOrbit = props.rotationOrbit;\n      if (Math.abs(rotationOrbit - fromProps.rotationOrbit) > 180) {\n        props.rotationOrbit = rotationOrbit < 0 ? rotationOrbit + 360 : rotationOrbit - 360;\n      }\n      return props;\n    }\n  }, {\n    key: \"zoomStart\",\n    value: function zoomStart(_ref6) {\n      var pos = _ref6.pos;\n      return this._getUpdatedState({\n        startZoomPosition: pos,\n        startTarget: this._viewportProps.target,\n        startZoom: this._viewportProps.zoom\n      });\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(_ref7) {\n      var pos = _ref7.pos,\n        startPos = _ref7.startPos,\n        scale = _ref7.scale;\n      var _this$_viewportProps = this._viewportProps,\n        zoom = _this$_viewportProps.zoom,\n        width = _this$_viewportProps.width,\n        height = _this$_viewportProps.height,\n        target = _this$_viewportProps.target;\n      var _this$_interactiveSta3 = this._interactiveState,\n        startZoom = _this$_interactiveSta3.startZoom,\n        startZoomPosition = _this$_interactiveSta3.startZoomPosition,\n        startTarget = _this$_interactiveSta3.startTarget;\n      if (!Number.isFinite(startZoom)) {\n        startZoom = zoom;\n        startTarget = target;\n        startZoomPosition = startPos || pos;\n      }\n      var newZoom = this._calculateNewZoom({\n        scale: scale,\n        startZoom: startZoom\n      });\n      var startScale = zoom2Scale(startZoom);\n      var newScale = zoom2Scale(newZoom);\n      var dX = (width / 2 - startZoomPosition[0]) * (newScale / startScale - 1);\n      var dY = (height / 2 - startZoomPosition[1]) * (newScale / startScale - 1);\n      return this._getUpdatedState({\n        zoom: newZoom,\n        target: this._calculateNewTarget({\n          startTarget: startTarget,\n          zoom: newZoom,\n          pixelOffset: [dX, dY]\n        })\n      });\n    }\n  }, {\n    key: \"zoomEnd\",\n    value: function zoomEnd() {\n      return this._getUpdatedState({\n        startZoomPosition: null,\n        startTarget: null,\n        startZoom: null\n      });\n    }\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn() {\n      return this._getUpdatedState({\n        zoom: this._calculateNewZoom({\n          scale: 2\n        })\n      });\n    }\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut() {\n      return this._getUpdatedState({\n        zoom: this._calculateNewZoom({\n          scale: 0.5\n        })\n      });\n    }\n  }, {\n    key: \"moveLeft\",\n    value: function moveLeft() {\n      var pixelOffset = [-MOVEMENT_SPEED, 0];\n      return this._getUpdatedState({\n        target: this._calculateNewTarget({\n          pixelOffset: pixelOffset\n        })\n      });\n    }\n  }, {\n    key: \"moveRight\",\n    value: function moveRight() {\n      var pixelOffset = [MOVEMENT_SPEED, 0];\n      return this._getUpdatedState({\n        target: this._calculateNewTarget({\n          pixelOffset: pixelOffset\n        })\n      });\n    }\n  }, {\n    key: \"moveUp\",\n    value: function moveUp() {\n      var pixelOffset = [0, -MOVEMENT_SPEED];\n      return this._getUpdatedState({\n        target: this._calculateNewTarget({\n          pixelOffset: pixelOffset\n        })\n      });\n    }\n  }, {\n    key: \"moveDown\",\n    value: function moveDown() {\n      var pixelOffset = [0, MOVEMENT_SPEED];\n      return this._getUpdatedState({\n        target: this._calculateNewTarget({\n          pixelOffset: pixelOffset\n        })\n      });\n    }\n  }, {\n    key: \"rotateLeft\",\n    value: function rotateLeft() {\n      return this._getUpdatedState({\n        rotationOrbit: this._viewportProps.rotationOrbit - 15\n      });\n    }\n  }, {\n    key: \"rotateRight\",\n    value: function rotateRight() {\n      return this._getUpdatedState({\n        rotationOrbit: this._viewportProps.rotationOrbit + 15\n      });\n    }\n  }, {\n    key: \"rotateUp\",\n    value: function rotateUp() {\n      return this._getUpdatedState({\n        rotationX: this._viewportProps.rotationX - 10\n      });\n    }\n  }, {\n    key: \"rotateDown\",\n    value: function rotateDown() {\n      return this._getUpdatedState({\n        rotationX: this._viewportProps.rotationX + 10\n      });\n    }\n  }, {\n    key: \"_calculateNewZoom\",\n    value: function _calculateNewZoom(_ref8) {\n      var scale = _ref8.scale,\n        startZoom = _ref8.startZoom;\n      var _this$_viewportProps2 = this._viewportProps,\n        maxZoom = _this$_viewportProps2.maxZoom,\n        minZoom = _this$_viewportProps2.minZoom;\n      if (!Number.isFinite(startZoom)) {\n        startZoom = this._viewportProps.zoom;\n      }\n      var zoom = startZoom + Math.log2(scale);\n      return clamp(zoom, minZoom, maxZoom);\n    }\n  }, {\n    key: \"_calculateNewTarget\",\n    value: function _calculateNewTarget(_ref9) {\n      var startTarget = _ref9.startTarget,\n        zoom = _ref9.zoom,\n        pixelOffset = _ref9.pixelOffset;\n      var viewportProps = Object.assign({}, this._viewportProps);\n      if (Number.isFinite(zoom)) {\n        viewportProps.zoom = zoom;\n      }\n      if (startTarget) {\n        viewportProps.target = startTarget;\n      }\n      var viewport = this.makeViewport(viewportProps);\n      var center = viewport.project(viewportProps.target);\n      return viewport.unproject([center[0] - pixelOffset[0], center[1] - pixelOffset[1], center[2]]);\n    }\n  }, {\n    key: \"_getUpdatedState\",\n    value: function _getUpdatedState(newProps) {\n      return new OrbitState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n    }\n  }, {\n    key: \"_applyConstraints\",\n    value: function _applyConstraints(props) {\n      var maxZoom = props.maxZoom,\n        minZoom = props.minZoom,\n        zoom = props.zoom,\n        maxRotationX = props.maxRotationX,\n        minRotationX = props.minRotationX,\n        rotationOrbit = props.rotationOrbit;\n      props.zoom = clamp(zoom, minZoom, maxZoom);\n      props.rotationX = clamp(props.rotationX, minRotationX, maxRotationX);\n      if (rotationOrbit < -180 || rotationOrbit > 180) {\n        props.rotationOrbit = mod(rotationOrbit + 180, 360) - 180;\n      }\n      return props;\n    }\n  }]);\n  return OrbitState;\n}(ViewState);\nvar OrbitController = function (_Controller) {\n  _inherits(OrbitController, _Controller);\n  function OrbitController(props) {\n    _classCallCheck(this, OrbitController);\n    return _possibleConstructorReturn(this, _getPrototypeOf(OrbitController).call(this, OrbitState, props));\n  }\n  _createClass(OrbitController, [{\n    key: \"_getTransitionProps\",\n    value: function _getTransitionProps() {\n      return LINEAR_TRANSITION_PROPS;\n    }\n  }]);\n  return OrbitController;\n}(Controller);\nexport { OrbitController as default };","map":{"version":3,"sources":["../../../src/controllers/orbit-controller.js"],"names":["clamp","Vector2","Controller","ViewState","LinearInterpolator","TRANSITION_EVENTS","mod","MOVEMENT_SPEED","DEFAULT_STATE","orbitAxis","rotationX","rotationOrbit","zoom","target","minRotationX","maxRotationX","minZoom","Infinity","maxZoom","LINEAR_TRANSITION_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","transitionInterruption","BREAK","zoom2Scale","Math","pow","OrbitState","makeViewport","width","height","startPanPosition","startTarget","startRotationX","startRotationOrbit","startZoomPosition","startZoom","_interactiveState","_viewportProps","pos","_getUpdatedState","startPos","delta","subtract","_calculateNewTarget","pixelOffset","deltaScaleX","deltaScaleY","Number","isFinite","isRotating","viewState","fromProps","getViewportProps","props","Object","assign","abs","scale","newZoom","_calculateNewZoom","startScale","newScale","dX","dY","log2","viewportProps","viewport","center","project","unproject","newProps","OrbitController"],"mappings":";;;;;AAAA,SAAQA,KAAR,EAAeC,OAAf,QAA6B,SAA7B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,kBAAP,MAA+B,oCAA/B;AACA,SAAQC,iBAAR,QAAgC,sBAAhC;AACA,SAAQC,GAAR,QAAkB,qBAAlB;AAEA,IAAMC,cAAc,GAAG,EAAvB;AAEA,IAAMC,aAAa,GAAG;EACpBC,SAAS,EAAE,GADS;EAEpBC,SAAS,EAAE,CAFS;EAGpBC,aAAa,EAAE,CAHK;EAIpBC,IAAI,EAAE,CAJc;EAKpBC,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALY;EAMpBC,YAAY,EAAE,CAAC,EANK;EAOpBC,YAAY,EAAE,EAPM;EAQpBC,OAAO,EAAE,CAACC,QARU;EASpBC,OAAO,EAAED;AATW,CAAtB;AAYA,IAAME,uBAAuB,GAAG;EAC9BC,kBAAkB,EAAE,GADU;EAE9BC,gBAAgB,EAAE,SAAA,gBAAA,CAAA,CAAC,EAAA;IAAA,OAAIC,CAAJ;EAAA,CAFW;EAG9BC,sBAAsB,EAAE,IAAInB,kBAAJ,CAAuB,CAAC,QAAD,EAAW,MAAX,EAAmB,WAAnB,EAAgC,eAAhC,CAAvB,CAHM;EAI9BoB,sBAAsB,EAAEnB,iBAAiB,CAACoB;AAJZ,CAAhC;AASA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAA,IAAI,EAAA;EAAA,OAAIC,IAAI,CAACC,GAALD,CAAS,CAATA,EAAYf,IAAZe,CAAJ;AAAA,CAAvB;AAEA,OAAA,IAAaE,UAAb,GAAA,UAAA,UAAA,EAAA;EAAA,SAAA,CAAA,UAAA,EAAA,UAAA,CAAA;EACE,SAAA,UAAA,CAAA,IAAA,EA4BG;IAAA,IAAA,KAAA;IAAA,IA3BDC,YA2BC,GAAA,IAAA,CA3BDA,YA2BC;MAxBDC,KAwBC,GAAA,IAAA,CAxBDA,KAwBC;MAvBDC,MAuBC,GAAA,IAAA,CAvBDA,MAuBC;MAAA,cAAA,GAAA,IAAA,CAtBDvB,SAsBC;MAtBDA,SAsBC,GAAA,cAAA,KAAA,KAAA,CAAA,GAtBWD,aAAa,CAACC,SAsBzB,GAAA,cAAA;MAAA,cAAA,GAAA,IAAA,CArBDC,SAqBC;MArBDA,SAqBC,GAAA,cAAA,KAAA,KAAA,CAAA,GArBWF,aAAa,CAACE,SAqBzB,GAAA,cAAA;MAAA,kBAAA,GAAA,IAAA,CApBDC,aAoBC;MApBDA,aAoBC,GAAA,kBAAA,KAAA,KAAA,CAAA,GApBeH,aAAa,CAACG,aAoB7B,GAAA,kBAAA;MAAA,WAAA,GAAA,IAAA,CAnBDE,MAmBC;MAnBDA,MAmBC,GAAA,WAAA,KAAA,KAAA,CAAA,GAnBQL,aAAa,CAACK,MAmBtB,GAAA,WAAA;MAAA,SAAA,GAAA,IAAA,CAlBDD,IAkBC;MAlBDA,IAkBC,GAAA,SAAA,KAAA,KAAA,CAAA,GAlBMJ,aAAa,CAACI,IAkBpB,GAAA,SAAA;MAAA,iBAAA,GAAA,IAAA,CAfDE,YAeC;MAfDA,YAeC,GAAA,iBAAA,KAAA,KAAA,CAAA,GAfcN,aAAa,CAACM,YAe5B,GAAA,iBAAA;MAAA,iBAAA,GAAA,IAAA,CAdDC,YAcC;MAdDA,YAcC,GAAA,iBAAA,KAAA,KAAA,CAAA,GAdcP,aAAa,CAACO,YAc5B,GAAA,iBAAA;MAAA,YAAA,GAAA,IAAA,CAbDC,OAaC;MAbDA,OAaC,GAAA,YAAA,KAAA,KAAA,CAAA,GAbSR,aAAa,CAACQ,OAavB,GAAA,YAAA;MAAA,YAAA,GAAA,IAAA,CAZDE,OAYC;MAZDA,OAYC,GAAA,YAAA,KAAA,KAAA,CAAA,GAZSV,aAAa,CAACU,OAYvB,GAAA,YAAA;MARDe,gBAQC,GAAA,IAAA,CARDA,gBAQC;MAPDC,WAOC,GAAA,IAAA,CAPDA,WAOC;MALDC,cAKC,GAAA,IAAA,CALDA,cAKC;MAJDC,kBAIC,GAAA,IAAA,CAJDA,kBAIC;MAFDC,iBAEC,GAAA,IAAA,CAFDA,iBAEC;MADDC,SACC,GAAA,IAAA,CADDA,SACC;IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA;IACD,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,UAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAM;MACJP,KAAK,EAALA,KADI;MAEJC,MAAM,EAANA,MAFI;MAGJvB,SAAS,EAATA,SAHI;MAIJC,SAAS,EAATA,SAJI;MAKJC,aAAa,EAAbA,aALI;MAMJE,MAAM,EAANA,MANI;MAOJD,IAAI,EAAJA,IAPI;MAQJE,YAAY,EAAZA,YARI;MASJC,YAAY,EAAZA,YATI;MAUJC,OAAO,EAAPA,OAVI;MAWJE,OAAO,EAAPA;IAXI,CAAN,CAAA,CAAA;IAcA,KAAA,CAAKqB,iBAAL,GAAyB;MACvBN,gBAAgB,EAAhBA,gBADuB;MAEvBC,WAAW,EAAXA,WAFuB;MAGvBC,cAAc,EAAdA,cAHuB;MAIvBC,kBAAkB,EAAlBA,kBAJuB;MAKvBC,iBAAiB,EAAjBA,iBALuB;MAMvBC,SAAS,EAATA;IANuB,CAAzB;IASA,KAAA,CAAKR,YAAL,GAAoBA,YAApB;IAxBC,OAAA,KAAA;EAyBF;EAtDH,YAAA,CAAA,UAAA,EAAA,CAAA;IAAA,GAAA,EAAA,kBAAA;IAAA,KAAA,EAAA,SAAA,gBAAA,GA0DqB;MACjB,OAAO,IAAA,CAAKU,cAAZ;IACD;EA5DH,CAAA,EAAA;IAAA,GAAA,EAAA,qBAAA;IAAA,KAAA,EAAA,SAAA,mBAAA,GA8DwB;MACpB,OAAO,IAAA,CAAKD,iBAAZ;IACD;EAhEH,CAAA,EAAA;IAAA,GAAA,EAAA,UAAA;IAAA,KAAA,EAAA,SAAA,QAAA,CAAA,KAAA,EAsEkB;MAAA,IAANE,GAAM,GAAA,KAAA,CAANA,GAAM;MAAA,IACP5B,MADO,GACG,IAAA,CAAK2B,cADR,CACP3B,MADO;MAGd,OAAO,IAAA,CAAK6B,gBAAL,CAAsB;QAC3BT,gBAAgB,EAAEQ,GADS;QAE3BP,WAAW,EAAErB;MAFc,CAAtB,CAAP;IAID;EA7EH,CAAA,EAAA;IAAA,GAAA,EAAA,KAAA;IAAA,KAAA,EAAA,SAAA,GAAA,CAAA,KAAA,EAmFuB;MAAA,IAAhB4B,GAAgB,GAAA,KAAA,CAAhBA,GAAgB;QAAXE,QAAW,GAAA,KAAA,CAAXA,QAAW;MAAA,IAAA,qBAAA,GACqB,IAAA,CAAKJ,iBAD1B;QACZN,gBADY,GAAA,qBAAA,CACZA,gBADY;QACMC,WADN,GAAA,qBAAA,CACMA,WADN;MAEnB,IAAMU,KAAK,GAAG,IAAI3C,OAAJ,CAAYwC,GAAZ,CAAA,CAAiBI,QAAjB,CAA0BZ,gBAA1B,CAAd;MAEA,OAAO,IAAA,CAAKS,gBAAL,CAAsB;QAC3B7B,MAAM,EAAE,IAAA,CAAKiC,mBAAL,CAAyB;UAACZ,WAAW,EAAXA,WAAD;UAAca,WAAW,EAAEH;QAA3B,CAAzB;MADmB,CAAtB,CAAP;IAGD;EA1FH,CAAA,EAAA;IAAA,GAAA,EAAA,QAAA;IAAA,KAAA,EAAA,SAAA,MAAA,GAgGW;MACP,OAAO,IAAA,CAAKF,gBAAL,CAAsB;QAC3BT,gBAAgB,EAAE,IADS;QAE3BC,WAAW,EAAE;MAFc,CAAtB,CAAP;IAID;EArGH,CAAA,EAAA;IAAA,GAAA,EAAA,aAAA;IAAA,KAAA,EAAA,SAAA,WAAA,CAAA,KAAA,EA2GqB;MAAA,IAANO,GAAM,GAAA,KAAA,CAANA,GAAM;MACjB,OAAO,IAAA,CAAKC,gBAAL,CAAsB;QAC3BP,cAAc,EAAE,IAAA,CAAKK,cAAL,CAAoB9B,SADT;QAE3B0B,kBAAkB,EAAE,IAAA,CAAKI,cAAL,CAAoB7B;MAFb,CAAtB,CAAP;IAID;EAhHH,CAAA,EAAA;IAAA,GAAA,EAAA,QAAA;IAAA,KAAA,EAAA,SAAA,MAAA,CAAA,KAAA,EAsHqC;MAAA,IAA3BqC,WAA2B,GAAA,KAAA,CAA3BA,WAA2B;QAAdC,WAAc,GAAA,KAAA,CAAdA,WAAc;MAAA,IAAA,sBAAA,GACY,IAAA,CAAKV,iBADjB;QAC1BJ,cAD0B,GAAA,sBAAA,CAC1BA,cAD0B;QACVC,kBADU,GAAA,sBAAA,CACVA,kBADU;MAGjC,IAAI,CAACc,MAAM,CAACC,QAAPD,CAAgBf,cAAhBe,CAAD,IAAoC,CAACA,MAAM,CAACC,QAAPD,CAAgBd,kBAAhBc,CAAzC,EAA8E;QAC5E,OAAO,IAAP;MACD;MACD,IAAIf,cAAc,GAAG,CAAC,EAAlBA,IAAwBA,cAAc,GAAG,EAA7C,EAAiD;QAG/Ca,WAAW,IAAI,CAAC,CAAhBA;MACD;MAED,OAAO,IAAA,CAAKN,gBAAL,CAAsB;QAC3BhC,SAAS,EAAEyB,cAAc,GAAGc,WAAW,GAAG,GADf;QAE3BtC,aAAa,EAAEyB,kBAAkB,GAAGY,WAAW,GAAG,GAFvB;QAG3BI,UAAU,EAAE;MAHe,CAAtB,CAAP;IAKD;EAvIH,CAAA,EAAA;IAAA,GAAA,EAAA,WAAA;IAAA,KAAA,EAAA,SAAA,SAAA,GA6Ic;MACV,OAAO,IAAA,CAAKV,gBAAL,CAAsB;QAC3BP,cAAc,EAAE,IADW;QAE3BC,kBAAkB,EAAE;MAFO,CAAtB,CAAP;IAID;EAlJH,CAAA,EAAA;IAAA,GAAA,EAAA,kBAAA;IAAA,KAAA,EAAA,SAAA,gBAAA,CAqJmBiB,SArJnB,EAqJ8B;MAC1B,IAAMC,SAAS,GAAGD,SAAS,CAACE,gBAAVF,EAAlB;MACA,IAAMG,KAAK,GAAGC,MAAM,CAACC,MAAPD,CAAc,CAAA,CAAdA,EAAkB,IAAA,CAAKjB,cAAvBiB,CAAd;MAF0B,IAGnB9C,aAHmB,GAGF6C,KAHE,CAGnB7C,aAHmB;MAK1B,IAAIgB,IAAI,CAACgC,GAALhC,CAAShB,aAAa,GAAG2C,SAAS,CAAC3C,aAAnCgB,CAAAA,GAAoD,GAAxD,EAA6D;QAC3D6B,KAAK,CAAC7C,aAAN6C,GAAsB7C,aAAa,GAAG,CAAhBA,GAAoBA,aAAa,GAAG,GAApCA,GAA0CA,aAAa,GAAG,GAAhF6C;MACD;MAED,OAAOA,KAAP;IACD;EA/JH,CAAA,EAAA;IAAA,GAAA,EAAA,WAAA;IAAA,KAAA,EAAA,SAAA,SAAA,CAAA,KAAA,EAqKmB;MAAA,IAANf,GAAM,GAAA,KAAA,CAANA,GAAM;MACf,OAAO,IAAA,CAAKC,gBAAL,CAAsB;QAC3BL,iBAAiB,EAAEI,GADQ;QAE3BP,WAAW,EAAE,IAAA,CAAKM,cAAL,CAAoB3B,MAFN;QAG3ByB,SAAS,EAAE,IAAA,CAAKE,cAAL,CAAoB5B;MAHJ,CAAtB,CAAP;IAKD;EA3KH,CAAA,EAAA;IAAA,GAAA,EAAA,MAAA;IAAA,KAAA,EAAA,SAAA,IAAA,CAAA,KAAA,EAqL+B;MAAA,IAAvB6B,GAAuB,GAAA,KAAA,CAAvBA,GAAuB;QAAlBE,QAAkB,GAAA,KAAA,CAAlBA,QAAkB;QAARiB,KAAQ,GAAA,KAAA,CAARA,KAAQ;MAAA,IAAA,oBAAA,GACW,IAAA,CAAKpB,cADhB;QACpB5B,IADoB,GAAA,oBAAA,CACpBA,IADoB;QACdmB,KADc,GAAA,oBAAA,CACdA,KADc;QACPC,MADO,GAAA,oBAAA,CACPA,MADO;QACCnB,MADD,GAAA,oBAAA,CACCA,MADD;MAAA,IAAA,sBAAA,GAEuB,IAAA,CAAK0B,iBAF5B;QAEtBD,SAFsB,GAAA,sBAAA,CAEtBA,SAFsB;QAEXD,iBAFW,GAAA,sBAAA,CAEXA,iBAFW;QAEQH,WAFR,GAAA,sBAAA,CAEQA,WAFR;MAG3B,IAAI,CAACgB,MAAM,CAACC,QAAPD,CAAgBZ,SAAhBY,CAAL,EAAiC;QAO/BZ,SAAS,GAAG1B,IAAZ0B;QACAJ,WAAW,GAAGrB,MAAdqB;QACAG,iBAAiB,GAAGM,QAAQ,IAAIF,GAAhCJ;MACD;MAED,IAAMwB,OAAO,GAAG,IAAA,CAAKC,iBAAL,CAAuB;QAACF,KAAK,EAALA,KAAD;QAAQtB,SAAS,EAATA;MAAR,CAAvB,CAAhB;MACA,IAAMyB,UAAU,GAAGrC,UAAU,CAACY,SAAD,CAA7B;MACA,IAAM0B,QAAQ,GAAGtC,UAAU,CAACmC,OAAD,CAA3B;MAEA,IAAMI,EAAE,GAAG,CAAClC,KAAK,GAAG,CAARA,GAAYM,iBAAiB,CAAC,CAAD,CAA9B,KAAsC2B,QAAQ,GAAGD,UAAXC,GAAwB,CAA9D,CAAX;MACA,IAAME,EAAE,GAAG,CAAClC,MAAM,GAAG,CAATA,GAAaK,iBAAiB,CAAC,CAAD,CAA/B,KAAuC2B,QAAQ,GAAGD,UAAXC,GAAwB,CAA/D,CAAX;MAEA,OAAO,IAAA,CAAKtB,gBAAL,CAAsB;QAC3B9B,IAAI,EAAEiD,OADqB;QAE3BhD,MAAM,EAAE,IAAA,CAAKiC,mBAAL,CAAyB;UAACZ,WAAW,EAAXA,WAAD;UAActB,IAAI,EAAEiD,OAApB;UAA6Bd,WAAW,EAAE,CAACkB,EAAD,EAAKC,EAAL;QAA1C,CAAzB;MAFmB,CAAtB,CAAP;IAID;EA/MH,CAAA,EAAA;IAAA,GAAA,EAAA,SAAA;IAAA,KAAA,EAAA,SAAA,OAAA,GAqNY;MACR,OAAO,IAAA,CAAKxB,gBAAL,CAAsB;QAC3BL,iBAAiB,EAAE,IADQ;QAE3BH,WAAW,EAAE,IAFc;QAG3BI,SAAS,EAAE;MAHgB,CAAtB,CAAP;IAKD;EA3NH,CAAA,EAAA;IAAA,GAAA,EAAA,QAAA;IAAA,KAAA,EAAA,SAAA,MAAA,GA6NW;MACP,OAAO,IAAA,CAAKI,gBAAL,CAAsB;QAC3B9B,IAAI,EAAE,IAAA,CAAKkD,iBAAL,CAAuB;UAACF,KAAK,EAAE;QAAR,CAAvB;MADqB,CAAtB,CAAP;IAGD;EAjOH,CAAA,EAAA;IAAA,GAAA,EAAA,SAAA;IAAA,KAAA,EAAA,SAAA,OAAA,GAmOY;MACR,OAAO,IAAA,CAAKlB,gBAAL,CAAsB;QAC3B9B,IAAI,EAAE,IAAA,CAAKkD,iBAAL,CAAuB;UAACF,KAAK,EAAE;QAAR,CAAvB;MADqB,CAAtB,CAAP;IAGD;EAvOH,CAAA,EAAA;IAAA,GAAA,EAAA,UAAA;IAAA,KAAA,EAAA,SAAA,QAAA,GAyOa;MACT,IAAMb,WAAW,GAAG,CAAC,CAACxC,cAAF,EAAkB,CAAlB,CAApB;MACA,OAAO,IAAA,CAAKmC,gBAAL,CAAsB;QAC3B7B,MAAM,EAAE,IAAA,CAAKiC,mBAAL,CAAyB;UAACC,WAAW,EAAXA;QAAD,CAAzB;MADmB,CAAtB,CAAP;IAGD;EA9OH,CAAA,EAAA;IAAA,GAAA,EAAA,WAAA;IAAA,KAAA,EAAA,SAAA,SAAA,GAgPc;MACV,IAAMA,WAAW,GAAG,CAACxC,cAAD,EAAiB,CAAjB,CAApB;MACA,OAAO,IAAA,CAAKmC,gBAAL,CAAsB;QAC3B7B,MAAM,EAAE,IAAA,CAAKiC,mBAAL,CAAyB;UAACC,WAAW,EAAXA;QAAD,CAAzB;MADmB,CAAtB,CAAP;IAGD;EArPH,CAAA,EAAA;IAAA,GAAA,EAAA,QAAA;IAAA,KAAA,EAAA,SAAA,MAAA,GAuPW;MACP,IAAMA,WAAW,GAAG,CAAC,CAAD,EAAI,CAACxC,cAAL,CAApB;MACA,OAAO,IAAA,CAAKmC,gBAAL,CAAsB;QAC3B7B,MAAM,EAAE,IAAA,CAAKiC,mBAAL,CAAyB;UAACC,WAAW,EAAXA;QAAD,CAAzB;MADmB,CAAtB,CAAP;IAGD;EA5PH,CAAA,EAAA;IAAA,GAAA,EAAA,UAAA;IAAA,KAAA,EAAA,SAAA,QAAA,GA8Pa;MACT,IAAMA,WAAW,GAAG,CAAC,CAAD,EAAIxC,cAAJ,CAApB;MACA,OAAO,IAAA,CAAKmC,gBAAL,CAAsB;QAC3B7B,MAAM,EAAE,IAAA,CAAKiC,mBAAL,CAAyB;UAACC,WAAW,EAAXA;QAAD,CAAzB;MADmB,CAAtB,CAAP;IAGD;EAnQH,CAAA,EAAA;IAAA,GAAA,EAAA,YAAA;IAAA,KAAA,EAAA,SAAA,UAAA,GAqQe;MACX,OAAO,IAAA,CAAKL,gBAAL,CAAsB;QAC3B/B,aAAa,EAAE,IAAA,CAAK6B,cAAL,CAAoB7B,aAApB,GAAoC;MADxB,CAAtB,CAAP;IAGD;EAzQH,CAAA,EAAA;IAAA,GAAA,EAAA,aAAA;IAAA,KAAA,EAAA,SAAA,WAAA,GA2QgB;MACZ,OAAO,IAAA,CAAK+B,gBAAL,CAAsB;QAC3B/B,aAAa,EAAE,IAAA,CAAK6B,cAAL,CAAoB7B,aAApB,GAAoC;MADxB,CAAtB,CAAP;IAGD;EA/QH,CAAA,EAAA;IAAA,GAAA,EAAA,UAAA;IAAA,KAAA,EAAA,SAAA,QAAA,GAiRa;MACT,OAAO,IAAA,CAAK+B,gBAAL,CAAsB;QAC3BhC,SAAS,EAAE,IAAA,CAAK8B,cAAL,CAAoB9B,SAApB,GAAgC;MADhB,CAAtB,CAAP;IAGD;EArRH,CAAA,EAAA;IAAA,GAAA,EAAA,YAAA;IAAA,KAAA,EAAA,SAAA,UAAA,GAuRe;MACX,OAAO,IAAA,CAAKgC,gBAAL,CAAsB;QAC3BhC,SAAS,EAAE,IAAA,CAAK8B,cAAL,CAAoB9B,SAApB,GAAgC;MADhB,CAAtB,CAAP;IAGD;EA3RH,CAAA,EAAA;IAAA,GAAA,EAAA,mBAAA;IAAA,KAAA,EAAA,SAAA,iBAAA,CAAA,KAAA,EAgSwC;MAAA,IAAnBkD,KAAmB,GAAA,KAAA,CAAnBA,KAAmB;QAAZtB,SAAY,GAAA,KAAA,CAAZA,SAAY;MAAA,IAAA,qBAAA,GACT,IAAA,CAAKE,cADI;QAC7BtB,OAD6B,GAAA,qBAAA,CAC7BA,OAD6B;QACpBF,OADoB,GAAA,qBAAA,CACpBA,OADoB;MAEpC,IAAI,CAACkC,MAAM,CAACC,QAAPD,CAAgBZ,SAAhBY,CAAL,EAAiC;QAC/BZ,SAAS,GAAG,IAAA,CAAKE,cAAL,CAAoB5B,IAAhC0B;MACD;MACD,IAAM1B,IAAI,GAAG0B,SAAS,GAAGX,IAAI,CAACwC,IAALxC,CAAUiC,KAAVjC,CAAzB;MACA,OAAO3B,KAAK,CAACY,IAAD,EAAOI,OAAP,EAAgBE,OAAhB,CAAZ;IACD;EAvSH,CAAA,EAAA;IAAA,GAAA,EAAA,qBAAA;IAAA,KAAA,EAAA,SAAA,mBAAA,CAAA,KAAA,EAySwD;MAAA,IAAjCgB,WAAiC,GAAA,KAAA,CAAjCA,WAAiC;QAApBtB,IAAoB,GAAA,KAAA,CAApBA,IAAoB;QAAdmC,WAAc,GAAA,KAAA,CAAdA,WAAc;MACpD,IAAMqB,aAAa,GAAGX,MAAM,CAACC,MAAPD,CAAc,CAAA,CAAdA,EAAkB,IAAA,CAAKjB,cAAvBiB,CAAtB;MACA,IAAIP,MAAM,CAACC,QAAPD,CAAgBtC,IAAhBsC,CAAJ,EAA2B;QACzBkB,aAAa,CAACxD,IAAdwD,GAAqBxD,IAArBwD;MACD;MACD,IAAIlC,WAAJ,EAAiB;QACfkC,aAAa,CAACvD,MAAduD,GAAuBlC,WAAvBkC;MACD;MACD,IAAMC,QAAQ,GAAG,IAAA,CAAKvC,YAAL,CAAkBsC,aAAlB,CAAjB;MACA,IAAME,MAAM,GAAGD,QAAQ,CAACE,OAATF,CAAiBD,aAAa,CAACvD,MAA/BwD,CAAf;MACA,OAAOA,QAAQ,CAACG,SAATH,CAAmB,CAACC,MAAM,CAAC,CAAD,CAANA,GAAYvB,WAAW,CAAC,CAAD,CAAxB,EAA6BuB,MAAM,CAAC,CAAD,CAANA,GAAYvB,WAAW,CAAC,CAAD,CAApD,EAAyDuB,MAAM,CAAC,CAAD,CAA/D,CAAnBD,CAAP;IACD;EApTH,CAAA,EAAA;IAAA,GAAA,EAAA,kBAAA;IAAA,KAAA,EAAA,SAAA,gBAAA,CAsTmBI,QAtTnB,EAsT6B;MAEzB,OAAO,IAAI5C,UAAJ,CAAe4B,MAAM,CAACC,MAAPD,CAAc,CAAA,CAAdA,EAAkB,IAAA,CAAKjB,cAAvBiB,EAAuC,IAAA,CAAKlB,iBAA5CkB,EAA+DgB,QAA/DhB,CAAf,CAAP;IACD;EAzTH,CAAA,EAAA;IAAA,GAAA,EAAA,mBAAA;IAAA,KAAA,EAAA,SAAA,iBAAA,CA4ToBD,KA5TpB,EA4T2B;MAAA,IAEhBtC,OAFgB,GAEqDsC,KAFrD,CAEhBtC,OAFgB;QAEPF,OAFO,GAEqDwC,KAFrD,CAEPxC,OAFO;QAEEJ,IAFF,GAEqD4C,KAFrD,CAEE5C,IAFF;QAEQG,YAFR,GAEqDyC,KAFrD,CAEQzC,YAFR;QAEsBD,YAFtB,GAEqD0C,KAFrD,CAEsB1C,YAFtB;QAEoCH,aAFpC,GAEqD6C,KAFrD,CAEoC7C,aAFpC;MAIvB6C,KAAK,CAAC5C,IAAN4C,GAAaxD,KAAK,CAACY,IAAD,EAAOI,OAAP,EAAgBE,OAAhB,CAAlBsC;MACAA,KAAK,CAAC9C,SAAN8C,GAAkBxD,KAAK,CAACwD,KAAK,CAAC9C,SAAP,EAAkBI,YAAlB,EAAgCC,YAAhC,CAAvByC;MACA,IAAI7C,aAAa,GAAG,CAAC,GAAjBA,IAAwBA,aAAa,GAAG,GAA5C,EAAiD;QAC/C6C,KAAK,CAAC7C,aAAN6C,GAAsBlD,GAAG,CAACK,aAAa,GAAG,GAAjB,EAAsB,GAAtB,CAAHL,GAAgC,GAAtDkD;MACD;MAED,OAAOA,KAAP;IACD;EAvUH,CAAA,CAAA,CAAA;EAAA,OAAA,UAAA;AAAA,CAAA,CAAgCrD,SAAhC,CAAA;IA0UqBuE,e;;EACnB,SAAA,eAAA,CAAYlB,KAAZ,EAAmB;IAAA,eAAA,CAAA,IAAA,EAAA,eAAA,CAAA;IAAA,OAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,eAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EACX3B,UADW,EACC2B,KADD,CAAA,CAAA;EAElB;;;0CAEqB;MAEpB,OAAOrC,uBAAP;IACD;;;EAR0CjB,U;SAAxBwE,e","sourcesContent":["import {clamp, Vector2} from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {TRANSITION_EVENTS} from './transition-manager';\nimport {mod} from '../utils/math-utils';\n\nconst MOVEMENT_SPEED = 50; // per keyboard click\n\nconst DEFAULT_STATE = {\n  orbitAxis: 'Z',\n  rotationX: 0,\n  rotationOrbit: 0,\n  zoom: 0,\n  target: [0, 0, 0],\n  minRotationX: -90,\n  maxRotationX: 90,\n  minZoom: -Infinity,\n  maxZoom: Infinity\n};\n\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(['target', 'zoom', 'rotationX', 'rotationOrbit']),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\n/* Helpers */\n\nconst zoom2Scale = zoom => Math.pow(2, zoom);\n\nexport class OrbitState extends ViewState {\n  constructor({\n    makeViewport,\n\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n    orbitAxis = DEFAULT_STATE.orbitAxis,\n    rotationX = DEFAULT_STATE.rotationX, // Rotation around x axis\n    rotationOrbit = DEFAULT_STATE.rotationOrbit, // Rotation around orbit axis\n    target = DEFAULT_STATE.target,\n    zoom = DEFAULT_STATE.zoom,\n\n    /* Viewport constraints */\n    minRotationX = DEFAULT_STATE.minRotationX,\n    maxRotationX = DEFAULT_STATE.maxRotationX,\n    minZoom = DEFAULT_STATE.minZoom,\n    maxZoom = DEFAULT_STATE.maxZoom,\n\n    /** Interaction states, required to calculate change during transform */\n    // Model state when the pan operation first started\n    startPanPosition,\n    startTarget,\n    // Model state when the rotate operation first started\n    startRotationX,\n    startRotationOrbit,\n    // Model state when the zoom operation first started\n    startZoomPosition,\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      orbitAxis,\n      rotationX,\n      rotationOrbit,\n      target,\n      zoom,\n      minRotationX,\n      maxRotationX,\n      minZoom,\n      maxZoom\n    });\n\n    this._interactiveState = {\n      startPanPosition,\n      startTarget,\n      startRotationX,\n      startRotationOrbit,\n      startZoomPosition,\n      startZoom\n    };\n\n    this.makeViewport = makeViewport;\n  }\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    const {target} = this._viewportProps;\n\n    return this._getUpdatedState({\n      startPanPosition: pos,\n      startTarget: target\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos, startPos}) {\n    const {startPanPosition, startTarget} = this._interactiveState;\n    const delta = new Vector2(pos).subtract(startPanPosition);\n\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({startTarget, pixelOffset: delta})\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanPosition: null,\n      startTarget: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotationX: this._viewportProps.rotationX,\n      startRotationOrbit: this._viewportProps.rotationOrbit\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({deltaScaleX, deltaScaleY}) {\n    const {startRotationX, startRotationOrbit} = this._interactiveState;\n\n    if (!Number.isFinite(startRotationX) || !Number.isFinite(startRotationOrbit)) {\n      return this;\n    }\n    if (startRotationX < -90 || startRotationX > 90) {\n      // When looking at the \"back\" side of the scene, invert horizontal drag\n      // so that the camera movement follows user input\n      deltaScaleX *= -1;\n    }\n\n    return this._getUpdatedState({\n      rotationX: startRotationX + deltaScaleY * 180,\n      rotationOrbit: startRotationOrbit + deltaScaleX * 180,\n      isRotating: true\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startRotationX: null,\n      startRotationOrbit: null\n    });\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = Object.assign({}, this._viewportProps);\n    const {rotationOrbit} = props;\n\n    if (Math.abs(rotationOrbit - fromProps.rotationOrbit) > 180) {\n      props.rotationOrbit = rotationOrbit < 0 ? rotationOrbit + 360 : rotationOrbit - 360;\n    }\n\n    return props;\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomPosition: pos,\n      startTarget: this._viewportProps.target,\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current target is\n   * @param {[Number, Number]} startPos - the target position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    const {zoom, width, height, target} = this._viewportProps;\n    let {startZoom, startZoomPosition, startTarget} = this._interactiveState;\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = zoom;\n      startTarget = target;\n      startZoomPosition = startPos || pos;\n    }\n\n    const newZoom = this._calculateNewZoom({scale, startZoom});\n    const startScale = zoom2Scale(startZoom);\n    const newScale = zoom2Scale(newZoom);\n\n    const dX = (width / 2 - startZoomPosition[0]) * (newScale / startScale - 1);\n    const dY = (height / 2 - startZoomPosition[1]) * (newScale / startScale - 1);\n\n    return this._getUpdatedState({\n      zoom: newZoom,\n      target: this._calculateNewTarget({startTarget, zoom: newZoom, pixelOffset: [dX, dY]})\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startTarget: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn() {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: 2})\n    });\n  }\n\n  zoomOut() {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: 0.5})\n    });\n  }\n\n  moveLeft() {\n    const pixelOffset = [-MOVEMENT_SPEED, 0];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  moveRight() {\n    const pixelOffset = [MOVEMENT_SPEED, 0];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  moveUp() {\n    const pixelOffset = [0, -MOVEMENT_SPEED];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  moveDown() {\n    const pixelOffset = [0, MOVEMENT_SPEED];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  rotateLeft() {\n    return this._getUpdatedState({\n      rotationOrbit: this._viewportProps.rotationOrbit - 15\n    });\n  }\n\n  rotateRight() {\n    return this._getUpdatedState({\n      rotationOrbit: this._viewportProps.rotationOrbit + 15\n    });\n  }\n\n  rotateUp() {\n    return this._getUpdatedState({\n      rotationX: this._viewportProps.rotationX - 10\n    });\n  }\n\n  rotateDown() {\n    return this._getUpdatedState({\n      rotationX: this._viewportProps.rotationX + 10\n    });\n  }\n\n  /* Private methods */\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    if (!Number.isFinite(startZoom)) {\n      startZoom = this._viewportProps.zoom;\n    }\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  _calculateNewTarget({startTarget, zoom, pixelOffset}) {\n    const viewportProps = Object.assign({}, this._viewportProps);\n    if (Number.isFinite(zoom)) {\n      viewportProps.zoom = zoom;\n    }\n    if (startTarget) {\n      viewportProps.target = startTarget;\n    }\n    const viewport = this.makeViewport(viewportProps);\n    const center = viewport.project(viewportProps.target);\n    return viewport.unproject([center[0] - pixelOffset[0], center[1] - pixelOffset[1], center[2]]);\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new OrbitState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom, maxRotationX, minRotationX, rotationOrbit} = props;\n\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n    props.rotationX = clamp(props.rotationX, minRotationX, maxRotationX);\n    if (rotationOrbit < -180 || rotationOrbit > 180) {\n      props.rotationOrbit = mod(rotationOrbit + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class OrbitController extends Controller {\n  constructor(props) {\n    super(OrbitState, props);\n  }\n\n  _getTransitionProps() {\n    // Enables Transitions on double-tap and key-down events.\n    return LINEAR_TRANSITION_PROPS;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}