{"ast":null,"code":"import { assert } from './assert';\nconst uidCounters = {};\nexport function uid() {\n  let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'id';\n  uidCounters[id] = uidCounters[id] || 1;\n  const count = uidCounters[id]++;\n  return \"\".concat(id, \"-\").concat(count);\n}\nexport function isPowerOfTwo(n) {\n  assert(typeof n === 'number', 'Input must be a number');\n  return n && (n & n - 1) === 0;\n}\nexport function isObjectEmpty(obj) {\n  let isEmpty = true;\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n  return isEmpty;\n}","map":{"version":3,"sources":["../../../src/utils/utils.js"],"names":["assert","uidCounters","uid","id","count","isPowerOfTwo","n","isObjectEmpty","obj","isEmpty","key"],"mappings":"AAAA,SAAQA,MAAR,QAAqB,UAArB;AAEA,MAAMC,WAAW,GAAG,CAAA,CAApB;AAOA,OAAO,SAASC,GAAT,GAAwB;EAAA,IAAXC,EAAW,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAN,IAAM;EAC7BF,WAAW,CAACE,EAAD,CAAXF,GAAkBA,WAAW,CAACE,EAAD,CAAXF,IAAmB,CAArCA;EACA,MAAMG,KAAK,GAAGH,WAAW,CAACE,EAAD,CAAXF,EAAd;EACA,OAAA,EAAA,CAAA,MAAA,CAAUE,EAAV,EAAA,GAAA,CAAA,CAAA,MAAA,CAAgBC,KAAhB,CAAA;AACD;AAOD,OAAO,SAASC,YAAT,CAAsBC,CAAtB,EAAyB;EAC9BN,MAAM,CAAC,OAAOM,CAAP,KAAa,QAAd,EAAwB,wBAAxB,CAANN;EACA,OAAOM,CAAC,IAAI,CAACA,CAAC,GAAIA,CAAC,GAAG,CAAV,MAAkB,CAA9B;AACD;AAGD,OAAO,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;EACjC,IAAIC,OAAO,GAAG,IAAd;EAEA,KAAK,MAAMC,GAAX,IAAkBF,GAAlB,EAAuB;IACrBC,OAAO,GAAG,KAAVA;IACA;EACD;EAED,OAAOA,OAAP;AACD","sourcesContent":["import {assert} from './assert';\n\nconst uidCounters = {};\n\n/**\n * Returns a UID.\n * @param {string} id= - Identifier base name\n * @return {string} uid\n **/\nexport function uid(id = 'id') {\n  uidCounters[id] = uidCounters[id] || 1;\n  const count = uidCounters[id]++;\n  return `${id}-${count}`;\n}\n\n/**\n * Verifies if a given number is power of two or not.\n * @param {object} n - The number to check.\n * @return {boolean} Returns true if the given number is power of 2, false otherwise.\n **/\nexport function isPowerOfTwo(n) {\n  assert(typeof n === 'number', 'Input must be a number');\n  return n && (n & (n - 1)) === 0;\n}\n\n// Returns true if given object is empty, false otherwise.\nexport function isObjectEmpty(obj) {\n  let isEmpty = true;\n  /* eslint-disable no-unused-vars  */\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n  /* eslint-enable no-unused-vars  */\n  return isEmpty;\n}\n"]},"metadata":{},"sourceType":"module"}