{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.gridAggregation = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _aggregationLayers = require(\"@deck.gl/aggregation-layers\");\nvar _cpuAggregator = _interopRequireWildcard(require(\"../layer-utils/cpu-aggregator\"));\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar gridAggregation = {\n  key: 'position',\n  updateSteps: [{\n    key: 'aggregate',\n    triggers: {\n      cellSize: {\n        prop: 'cellSize'\n      },\n      position: {\n        prop: 'getPosition',\n        updateTrigger: 'getPosition'\n      },\n      aggregator: {\n        prop: 'gridAggregator'\n      }\n    },\n    updater: _cpuAggregator.getAggregatedData\n  }]\n};\nexports.gridAggregation = gridAggregation;\nvar ScaleEnhancedGridLayer = /*#__PURE__*/function (_CPUGridLayer) {\n  (0, _inherits2[\"default\"])(ScaleEnhancedGridLayer, _CPUGridLayer);\n  var _super = _createSuper(ScaleEnhancedGridLayer);\n  function ScaleEnhancedGridLayer() {\n    (0, _classCallCheck2[\"default\"])(this, ScaleEnhancedGridLayer);\n    return _super.apply(this, arguments);\n  }\n  (0, _createClass2[\"default\"])(ScaleEnhancedGridLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var cpuAggregator = new _cpuAggregator[\"default\"]({\n        aggregation: gridAggregation\n      });\n      this.state = {\n        cpuAggregator: cpuAggregator,\n        aggregatorState: cpuAggregator.state\n      };\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add({\n        positions: {\n          size: 3,\n          accessor: 'getPosition'\n        }\n      });\n    }\n  }]);\n  return ScaleEnhancedGridLayer;\n}(_aggregationLayers.CPUGridLayer);\nexports[\"default\"] = ScaleEnhancedGridLayer;\nScaleEnhancedGridLayer.layerName = 'ScaleEnhancedGridLayer';","map":{"version":3,"sources":["../../../src/deckgl-layers/grid-layer/enhanced-cpu-grid-layer.js"],"names":["gridAggregation","key","updateSteps","triggers","cellSize","prop","position","updateTrigger","aggregator","updater","getAggregatedData","ScaleEnhancedGridLayer","CPUGridLayer","cpuAggregator","CPUAggregator","aggregation","state","aggregatorState","attributeManager","getAttributeManager","add","positions","size","accessor","layerName"],"mappings":";;;;;;;;;;;;;AAoBA,IAAA,kBAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;AACA,IAAA,cAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,+BAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,IAAMA,eAAe,GAAG;EAC7BC,GAAG,EAAE,UADwB;EAE7BC,WAAW,EAAE,CACX;IACED,GAAG,EAAE,WADP;IAEEE,QAAQ,EAAE;MACRC,QAAQ,EAAE;QACRC,IAAI,EAAE;MADE,CADF;MAIRC,QAAQ,EAAE;QACRD,IAAI,EAAE,aADE;QAERE,aAAa,EAAE;MAFP,CAJF;MAQRC,UAAU,EAAE;QACVH,IAAI,EAAE;MADI;IARJ,CAFZ;IAcEI,OAAO,EAAEC,cAAAA,CAAAA;EAdX,CADW;AAFgB,CAAxB;;IAsBcC,sB;;;;;;;;;WACnB,SAAA,eAAA,GAAkB;MAChB,IAAME,aAAa,GAAG,IAAIC,cAAAA,CAAAA,SAAAA,CAAJ,CAAkB;QACtCC,WAAW,EAAEf;MADyB,CAAlB,CAAtB;MAIA,IAAA,CAAKgB,KAAL,GAAa;QACXH,aAAa,EAAbA,aADW;QAEXI,eAAe,EAAEJ,aAAa,CAACG;MAFpB,CAAb;MAIA,IAAME,gBAAgB,GAAG,IAAA,CAAKC,mBAAL,EAAzB;MACAD,gBAAgB,CAACE,GAAjBF,CAAqB;QACnBG,SAAS,EAAE;UAACC,IAAI,EAAE,CAAP;UAAUC,QAAQ,EAAE;QAApB;MADQ,CAArBL,CAAAA;IAGD;;;EAdiDN,kBAAAA,CAAAA,Y;;AAiBpDD,sBAAsB,CAACa,SAAvBb,GAAmC,wBAAnCA","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CPUGridLayer} from '@deck.gl/aggregation-layers';\nimport CPUAggregator, {getAggregatedData} from '../layer-utils/cpu-aggregator';\n\nexport const gridAggregation = {\n  key: 'position',\n  updateSteps: [\n    {\n      key: 'aggregate',\n      triggers: {\n        cellSize: {\n          prop: 'cellSize'\n        },\n        position: {\n          prop: 'getPosition',\n          updateTrigger: 'getPosition'\n        },\n        aggregator: {\n          prop: 'gridAggregator'\n        }\n      },\n      updater: getAggregatedData\n    }\n  ]\n};\n\nexport default class ScaleEnhancedGridLayer extends CPUGridLayer {\n  initializeState() {\n    const cpuAggregator = new CPUAggregator({\n      aggregation: gridAggregation\n    });\n\n    this.state = {\n      cpuAggregator,\n      aggregatorState: cpuAggregator.state\n    };\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, accessor: 'getPosition'}\n    });\n  }\n}\n\nScaleEnhancedGridLayer.layerName = 'ScaleEnhancedGridLayer';\n"]},"metadata":{},"sourceType":"script"}