{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._updateProperty = exports.forwardTo = exports._actionFor = exports.unwrap = exports.isForwardAction = exports.wrapTo = exports.getActionForwardAddress = exports.ADDRESS_PREFIX = exports.FORWARD = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _lodash = _interopRequireDefault(require(\"lodash.curry\"));\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\n\n// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nvar FORWARD = '@redux-forward/FORWARD';\nexports.FORWARD = FORWARD;\nvar ADDRESS_PREFIX = '@@KG_';\nexports.ADDRESS_PREFIX = ADDRESS_PREFIX;\nvar getActionForwardAddress = function getActionForwardAddress(id) {\n  return \"\".concat(ADDRESS_PREFIX).concat(id.toUpperCase());\n};\n/**\n * Wrap an action into a forward action that only modify the state of a specific\n * kepler.gl instance. kepler.gl reducer will look for signatures in the action to\n * determine whether it needs to be forwarded to a specific instance reducer.\n *\n * wrapTo can be curried. You can create a curried action wrapper by only supply the `id` argument\n *\n * A forward action looks like this\n * ```js\n *  {\n *    type: \"@@kepler.gl/LAYER_CONFIG_CHANGE\",\n *    payload: {\n *      type: '@@kepler.gl/LAYER_CONFIG_CHANGE',\n *      payload: {},\n *      meta: {\n *       // id of instance\n *        _id_: id\n *       // other meta\n *      }\n *    },\n *    meta: {\n *      _forward_: '@redux-forward/FORWARD',\n *      _addr_: '@@KG_id'\n *    }\n *  };\n * ```\n *\n * @memberof forwardActions\n * @param {string} id - The id to forward to\n * @param {Object} action - the action object {type: string, payload: *}\n * @returns {{type: string, payload: {type: string, payload: *, meta: {_id_: string}, meta: {_forward_: string, _addr_: string}}}}\n * @public\n * @example\n *\n * import {wrapTo, togglePerspective} from 'kepler.gl/actions';\n *\n * // This action will only dispatch to the KeplerGl instance with `id: map_1`\n * this.props.dispatch(wrapTo('map_1', togglePerspective()));\n *\n * // You can also create a curried action for each instance\n * const wrapToMap1 = wrapTo('map_1');\n * this.props.dispatch(wrapToMap1(togglePerspective()));\n */\n\nexports.getActionForwardAddress = getActionForwardAddress;\nvar wrapTo = (0, _lodash[\"default\"])(function (id, action) {\n  return {\n    // keep original action.type\n    type: action.type,\n    // actual action\n    payload: _objectSpread(_objectSpread({}, action), {}, {\n      meta: _objectSpread(_objectSpread({}, action.meta), {}, {\n        _id_: id\n      })\n    }),\n    // add forward signature to meta\n    meta: _objectSpread(_objectSpread({}, action.meta || {}), {}, {\n      _forward_: FORWARD,\n      _addr_: getActionForwardAddress(id)\n    })\n  };\n});\n/**\n * Whether an action is a forward action\n * @memberof forwardActions\n * @param {Object} action - the action object\n * @returns {boolean} boolean - whether the action is a forward action\n * @public\n */\n\nexports.wrapTo = wrapTo;\nvar isForwardAction = function isForwardAction(action) {\n  return Boolean(action && action.meta && action.meta._forward_ === FORWARD);\n};\n/**\n * Unwrap an action\n * @memberof forwardActions\n * @param {Object} action - the action object\n * @returns {Object} - unwrapped action\n * @public\n */\n\nexports.isForwardAction = isForwardAction;\nvar unwrap = function unwrap(action) {\n  return isForwardAction(action) ? unwrap(action.payload) : action;\n};\n/**\n * Given an id, returns the action for that id.\n * If the action is not a forward action, return the action\n * @memberof forwardActions\n * @param {String} id\n * @param {Object} action\n * @private\n */\n\nexports.unwrap = unwrap;\nvar _actionFor = function _actionFor(id, action) {\n  return isForwardAction(action) ? action.meta._addr_ === getActionForwardAddress(id) ? action.payload : {} : action;\n};\n/**\n * Returns an action dispatcher that wraps and forwards the actions to a specific instance\n * @memberof forwardActions\n * @param {string} id - instance id\n * @param {Function} dispatch - action dispatcher\n * @public\n * @example\n *\n * // action and forward dispatcher\n * import {toggleSplitMap, forwardTo} from 'kepler.gl/actions';\n * import {connect} from 'react-redux';\n *\n * const MapContainer = props => (\n *  <div>\n *   <button onClick={() => props.keplerGlDispatch(toggleSplitMap())}/>\n *  </div>\n * )\n *\n * const mapDispatchToProps = (dispatch, props) => ({\n *  dispatch,\n *  keplerGlDispatch: forwardTo(‘foo’, dispatch)\n * });\n *\n * export default connect(\n *  state => state,\n *  mapDispatchToProps\n * )(MapContainer);\n */\n\nexports._actionFor = _actionFor;\nvar forwardTo = function forwardTo(id, dispatch) {\n  return function (action) {\n    return dispatch(wrapTo(id, action));\n  };\n};\n/**\n * Update the state of a kepler.gl instance\n * @memberof forwardActions\n * @param {Object} state\n * @param {string} id\n * @param {Object} nextState\n * @private\n */\n\nexports.forwardTo = forwardTo;\nvar _updateProperty = function _updateProperty(state, id, nextState) {\n  return state[id] === nextState ? state : _objectSpread(_objectSpread({}, state), {}, (0, _defineProperty2[\"default\"])({}, id, nextState));\n};\n/**\n * This declaration is needed to group actions in docs\n */\n\n/**\n * A set of helpers to forward dispatch actions to a specific instance reducer\n * @public\n */\n\n/* eslint-disable no-unused-vars */\n// @ts-ignore\n\nexports._updateProperty = _updateProperty;\nvar forwardActions = null;\n/* eslint-enable no-unused-vars */","map":{"version":3,"sources":["../../src/actions/action-wrapper.js"],"names":["FORWARD","ADDRESS_PREFIX","getActionForwardAddress","id","toUpperCase","wrapTo","action","type","payload","meta","_id_","_forward_","_addr_","isForwardAction","Boolean","unwrap","_actionFor","forwardTo","dispatch","_updateProperty","state","nextState","forwardActions"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport const FORWARD = '@redux-forward/FORWARD';\nexport const ADDRESS_PREFIX = '@@KG_';\n\nimport curry from 'lodash.curry';\n\nexport const getActionForwardAddress = id => `${ADDRESS_PREFIX}${id.toUpperCase()}`;\n\n/**\n * Wrap an action into a forward action that only modify the state of a specific\n * kepler.gl instance. kepler.gl reducer will look for signatures in the action to\n * determine whether it needs to be forwarded to a specific instance reducer.\n *\n * wrapTo can be curried. You can create a curried action wrapper by only supply the `id` argument\n *\n * A forward action looks like this\n * ```js\n *  {\n *    type: \"@@kepler.gl/LAYER_CONFIG_CHANGE\",\n *    payload: {\n *      type: '@@kepler.gl/LAYER_CONFIG_CHANGE',\n *      payload: {},\n *      meta: {\n *       // id of instance\n *        _id_: id\n *       // other meta\n *      }\n *    },\n *    meta: {\n *      _forward_: '@redux-forward/FORWARD',\n *      _addr_: '@@KG_id'\n *    }\n *  };\n * ```\n *\n * @memberof forwardActions\n * @param {string} id - The id to forward to\n * @param {Object} action - the action object {type: string, payload: *}\n * @returns {{type: string, payload: {type: string, payload: *, meta: {_id_: string}, meta: {_forward_: string, _addr_: string}}}}\n * @public\n * @example\n *\n * import {wrapTo, togglePerspective} from 'kepler.gl/actions';\n *\n * // This action will only dispatch to the KeplerGl instance with `id: map_1`\n * this.props.dispatch(wrapTo('map_1', togglePerspective()));\n *\n * // You can also create a curried action for each instance\n * const wrapToMap1 = wrapTo('map_1');\n * this.props.dispatch(wrapToMap1(togglePerspective()));\n */\nexport const wrapTo = curry((id, action) => ({\n  // keep original action.type\n  type: action.type,\n\n  // actual action\n  payload: {\n    ...action,\n    meta: {\n      ...action.meta,\n      _id_: id\n    }\n  },\n\n  // add forward signature to meta\n  meta: {\n    ...(action.meta || {}),\n    _forward_: FORWARD,\n    _addr_: getActionForwardAddress(id)\n  }\n}));\n\n/**\n * Whether an action is a forward action\n * @memberof forwardActions\n * @param {Object} action - the action object\n * @returns {boolean} boolean - whether the action is a forward action\n * @public\n */\nexport const isForwardAction = action => {\n  return Boolean(action && action.meta && action.meta._forward_ === FORWARD);\n};\n\n/**\n * Unwrap an action\n * @memberof forwardActions\n * @param {Object} action - the action object\n * @returns {Object} - unwrapped action\n * @public\n */\nexport const unwrap = action => (isForwardAction(action) ? unwrap(action.payload) : action);\n\n/**\n * Given an id, returns the action for that id.\n * If the action is not a forward action, return the action\n * @memberof forwardActions\n * @param {String} id\n * @param {Object} action\n * @private\n */\nexport const _actionFor = (id, action) =>\n  isForwardAction(action)\n    ? action.meta._addr_ === getActionForwardAddress(id)\n      ? action.payload\n      : {}\n    : action;\n\n/**\n * Returns an action dispatcher that wraps and forwards the actions to a specific instance\n * @memberof forwardActions\n * @param {string} id - instance id\n * @param {Function} dispatch - action dispatcher\n * @public\n * @example\n *\n * // action and forward dispatcher\n * import {toggleSplitMap, forwardTo} from 'kepler.gl/actions';\n * import {connect} from 'react-redux';\n *\n * const MapContainer = props => (\n *  <div>\n *   <button onClick={() => props.keplerGlDispatch(toggleSplitMap())}/>\n *  </div>\n * )\n *\n * const mapDispatchToProps = (dispatch, props) => ({\n *  dispatch,\n *  keplerGlDispatch: forwardTo(‘foo’, dispatch)\n * });\n *\n * export default connect(\n *  state => state,\n *  mapDispatchToProps\n * )(MapContainer);\n */\nexport const forwardTo = (id, dispatch) => action => dispatch(wrapTo(id, action));\n\n/**\n * Update the state of a kepler.gl instance\n * @memberof forwardActions\n * @param {Object} state\n * @param {string} id\n * @param {Object} nextState\n * @private\n */\nexport const _updateProperty = (state, id, nextState) =>\n  state[id] === nextState\n    ? state\n    : {\n        ...state,\n        [id]: nextState\n      };\n\n/**\n * This declaration is needed to group actions in docs\n */\n/**\n * A set of helpers to forward dispatch actions to a specific instance reducer\n * @public\n */\n/* eslint-disable no-unused-vars */\n// @ts-ignore\nconst forwardActions = null;\n/* eslint-enable no-unused-vars */\n"]},"metadata":{},"sourceType":"script"}