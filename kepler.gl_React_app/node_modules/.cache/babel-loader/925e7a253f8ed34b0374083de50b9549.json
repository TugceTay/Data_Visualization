{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RowDataContainer = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\nvar _dataRow = require(\"./data-row\");\nvar _marked = /*#__PURE__*/_regenerator[\"default\"].mark(rowsIterator),\n  _marked2 = /*#__PURE__*/_regenerator[\"default\"].mark(columnIterator);\n\n/**\n * @param {import('./data-container-interface').DataContainerInterface} dataContainer\n * @param {import('./data-row').SharedRowOptions} sharedRow\n */\nfunction rowsIterator(dataContainer, sharedRow) {\n  var numRows, rowIndex;\n  return _regenerator[\"default\"].wrap(function rowsIterator$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          numRows = dataContainer.numRows();\n          rowIndex = 0;\n        case 2:\n          if (!(rowIndex < numRows)) {\n            _context.next = 8;\n            break;\n          }\n          _context.next = 5;\n          return dataContainer.row(rowIndex, sharedRow);\n        case 5:\n          ++rowIndex;\n          _context.next = 2;\n          break;\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n/**\n * @param {import('./data-container-interface').DataContainerInterface} dataContainer\n * @param {number} columnIndex\n */\n\nfunction columnIterator(dataContainer, columnIndex) {\n  var numRows, rowIndex;\n  return _regenerator[\"default\"].wrap(function columnIterator$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          numRows = dataContainer.numRows();\n          rowIndex = 0;\n        case 2:\n          if (!(rowIndex < numRows)) {\n            _context2.next = 8;\n            break;\n          }\n          _context2.next = 5;\n          return dataContainer.valueAt(rowIndex, columnIndex);\n        case 5:\n          ++rowIndex;\n          _context2.next = 2;\n          break;\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nvar RowDataContainer = /*#__PURE__*/function () {\n  function RowDataContainer(data) {\n    var _data$rows$;\n    (0, _classCallCheck2[\"default\"])(this, RowDataContainer);\n    if (!data.rows) {\n      throw Error('RowDataContainer: no rows provided');\n    }\n    if (!Array.isArray(data.rows)) {\n      throw Error(\"RowDataContainer: rows object isn't an array\");\n    }\n    this._rows = data.rows;\n    this._numColumns = ((_data$rows$ = data.rows[0]) === null || _data$rows$ === void 0 ? void 0 : _data$rows$.length) || 0;\n  }\n  (0, _createClass2[\"default\"])(RowDataContainer, [{\n    key: \"numRows\",\n    value: function numRows() {\n      return this._rows.length;\n    }\n  }, {\n    key: \"numColumns\",\n    value: function numColumns() {\n      return this._numColumns;\n    }\n  }, {\n    key: \"valueAt\",\n    value: function valueAt(rowIndex, columnIndex) {\n      if (this._rows[rowIndex] === null) {\n        return null;\n      }\n      return this._rows[rowIndex][columnIndex];\n    }\n  }, {\n    key: \"row\",\n    value: function row(rowIndex, sharedRow) {\n      var tSharedRow = _dataRow.DataRow.createSharedRow(sharedRow);\n      if (tSharedRow) {\n        tSharedRow.setSource(this, rowIndex);\n        return tSharedRow;\n      }\n      return new _dataRow.DataRow(this, rowIndex);\n    }\n  }, {\n    key: \"rowAsArray\",\n    value: function rowAsArray(rowIndex) {\n      return this._rows[rowIndex];\n    }\n  }, {\n    key: \"rows\",\n    value: function rows(sharedRow) {\n      var tSharedRow = _dataRow.DataRow.createSharedRow(sharedRow);\n      return rowsIterator(this, tSharedRow);\n    }\n  }, {\n    key: \"column\",\n    value: function column(columnIndex) {\n      return columnIterator(this, columnIndex);\n    }\n  }, {\n    key: \"flattenData\",\n    value: function flattenData() {\n      return this._rows;\n    }\n  }, {\n    key: \"getPlainIndex\",\n    value: function getPlainIndex(valid) {\n      return this._rows.map(function (_, i) {\n        return i;\n      });\n    }\n  }, {\n    key: \"map\",\n    value: function map(func, sharedRow) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var tSharedRow = _dataRow.DataRow.createSharedRow(sharedRow);\n      var _options$start = options.start,\n        start = _options$start === void 0 ? 0 : _options$start,\n        _options$end = options.end,\n        end = _options$end === void 0 ? this.numRows() : _options$end;\n      var endRow = Math.min(this.numRows(), end);\n      var out = [];\n      for (var rowIndex = start; rowIndex < endRow; ++rowIndex) {\n        var row = this.row(rowIndex, tSharedRow);\n        out.push(func(row, rowIndex));\n      }\n      return out;\n    }\n  }, {\n    key: \"mapIndex\",\n    value: function mapIndex(func) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$start2 = options.start,\n        start = _options$start2 === void 0 ? 0 : _options$start2,\n        _options$end2 = options.end,\n        end = _options$end2 === void 0 ? this.numRows() : _options$end2;\n      var endRow = Math.min(this.numRows(), end);\n      var out = [];\n      for (var rowIndex = start; rowIndex < endRow; ++rowIndex) {\n        out.push(func({\n          index: rowIndex\n        }, this));\n      }\n      return out;\n    }\n  }, {\n    key: \"find\",\n    value: function find(func, sharedRow) {\n      var tSharedRow = _dataRow.DataRow.createSharedRow(sharedRow);\n      for (var rowIndex = 0; rowIndex < this._rows.length; ++rowIndex) {\n        var row = this.row(rowIndex, tSharedRow);\n        if (func(row, rowIndex)) {\n          return row;\n        }\n      }\n      return undefined;\n    }\n  }, {\n    key: \"reduce\",\n    value: function reduce(func, initialValue, sharedRow) {\n      var tSharedRow = _dataRow.DataRow.createSharedRow(sharedRow);\n      for (var rowIndex = 0; rowIndex < this._rows.length; ++rowIndex) {\n        var row = this.row(rowIndex, tSharedRow);\n        initialValue = func(initialValue, row, rowIndex);\n      }\n      return initialValue;\n    }\n  }]);\n  return RowDataContainer;\n}();\nexports.RowDataContainer = RowDataContainer;","map":{"version":3,"sources":["../../../src/utils/table-utils/row-data-container.js"],"names":["rowsIterator","dataContainer","sharedRow","numRows","rowIndex","row","columnIterator","columnIndex","valueAt","RowDataContainer","data","rows","Error","Array","isArray","_rows","_numColumns","length","tSharedRow","DataRow","createSharedRow","setSource","valid","map","_","i","func","options","start","end","endRow","Math","min","out","push","index","undefined","initialValue"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {DataRow} from './data-row';\n\n/**\n * @param {import('./data-container-interface').DataContainerInterface} dataContainer\n * @param {import('./data-row').SharedRowOptions} sharedRow\n */\nfunction* rowsIterator(dataContainer, sharedRow) {\n  const numRows = dataContainer.numRows();\n  for (let rowIndex = 0; rowIndex < numRows; ++rowIndex) {\n    yield dataContainer.row(rowIndex, sharedRow);\n  }\n}\n\n/**\n * @param {import('./data-container-interface').DataContainerInterface} dataContainer\n * @param {number} columnIndex\n */\nfunction* columnIterator(dataContainer, columnIndex) {\n  const numRows = dataContainer.numRows();\n  for (let rowIndex = 0; rowIndex < numRows; ++rowIndex) {\n    yield dataContainer.valueAt(rowIndex, columnIndex);\n  }\n}\n\nexport class RowDataContainer {\n  constructor(data) {\n    if (!data.rows) {\n      throw Error('RowDataContainer: no rows provided');\n    }\n\n    if (!Array.isArray(data.rows)) {\n      throw Error(\"RowDataContainer: rows object isn't an array\");\n    }\n\n    this._rows = data.rows;\n    this._numColumns = data.rows[0]?.length || 0;\n  }\n\n  numRows() {\n    return this._rows.length;\n  }\n\n  numColumns() {\n    return this._numColumns;\n  }\n\n  valueAt(rowIndex, columnIndex) {\n    if (this._rows[rowIndex] === null) {\n      return null;\n    }\n    return this._rows[rowIndex][columnIndex];\n  }\n\n  row(rowIndex, sharedRow) {\n    const tSharedRow = DataRow.createSharedRow(sharedRow);\n    if (tSharedRow) {\n      tSharedRow.setSource(this, rowIndex);\n      return tSharedRow;\n    }\n\n    return new DataRow(this, rowIndex);\n  }\n\n  rowAsArray(rowIndex) {\n    return this._rows[rowIndex];\n  }\n\n  rows(sharedRow) {\n    const tSharedRow = DataRow.createSharedRow(sharedRow);\n    return rowsIterator(this, tSharedRow);\n  }\n\n  column(columnIndex) {\n    return columnIterator(this, columnIndex);\n  }\n\n  flattenData() {\n    return this._rows;\n  }\n\n  getPlainIndex(valid) {\n    return this._rows.map((_, i) => i);\n  }\n\n  map(func, sharedRow, options = {}) {\n    const tSharedRow = DataRow.createSharedRow(sharedRow);\n\n    const {start = 0, end = this.numRows()} = options;\n    const endRow = Math.min(this.numRows(), end);\n\n    const out = [];\n    for (let rowIndex = start; rowIndex < endRow; ++rowIndex) {\n      const row = this.row(rowIndex, tSharedRow);\n      out.push(func(row, rowIndex));\n    }\n    return out;\n  }\n\n  mapIndex(func, options = {}) {\n    const {start = 0, end = this.numRows()} = options;\n    const endRow = Math.min(this.numRows(), end);\n\n    const out = [];\n    for (let rowIndex = start; rowIndex < endRow; ++rowIndex) {\n      out.push(func({index: rowIndex}, this));\n    }\n    return out;\n  }\n\n  find(func, sharedRow) {\n    const tSharedRow = DataRow.createSharedRow(sharedRow);\n\n    for (let rowIndex = 0; rowIndex < this._rows.length; ++rowIndex) {\n      const row = this.row(rowIndex, tSharedRow);\n      if (func(row, rowIndex)) {\n        return row;\n      }\n    }\n    return undefined;\n  }\n\n  reduce(func, initialValue, sharedRow) {\n    const tSharedRow = DataRow.createSharedRow(sharedRow);\n\n    for (let rowIndex = 0; rowIndex < this._rows.length; ++rowIndex) {\n      const row = this.row(rowIndex, tSharedRow);\n      initialValue = func(initialValue, row, rowIndex);\n    }\n    return initialValue;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}