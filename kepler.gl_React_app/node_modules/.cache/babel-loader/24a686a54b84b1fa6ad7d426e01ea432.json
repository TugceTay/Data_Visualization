{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { Layer, project32, picking, log } from '@deck.gl/core';\nimport { isWebGL2 } from '@luma.gl/core';\nimport { pbr } from '@luma.gl/shadertools';\nimport { ScenegraphNode, createGLTFObjects } from '@luma.gl/experimental';\nimport { waitForGLTFAssets } from './gltf-utils';\nimport { MATRIX_ATTRIBUTES, shouldComposeModelMatrix } from '../utils/matrix';\nimport vs from './scenegraph-layer-vertex.glsl';\nimport fs from './scenegraph-layer-fragment.glsl';\nvar DEFAULT_COLOR = [255, 255, 255, 255];\nvar defaultProps = {\n  scenegraph: {\n    type: 'object',\n    value: null,\n    async: true\n  },\n  getScene: function getScene(gltf) {\n    if (gltf && gltf.scenes) {\n      return _typeof(gltf.scene) === 'object' ? gltf.scene : gltf.scenes[gltf.scene || 0];\n    }\n    return gltf;\n  },\n  getAnimator: function getAnimator(scenegraph) {\n    return scenegraph && scenegraph.animator;\n  },\n  _animations: null,\n  sizeScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  sizeMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  sizeMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  _lighting: 'flat',\n  _imageBasedLightingEnvironment: null,\n  getOrientation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getScale: {\n    type: 'accessor',\n    value: [1, 1, 1]\n  },\n  getTranslation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getTransformMatrix: {\n    type: 'accessor',\n    value: []\n  }\n};\nvar ScenegraphLayer = function (_Layer) {\n  _inherits(ScenegraphLayer, _Layer);\n  function ScenegraphLayer() {\n    _classCallCheck(this, ScenegraphLayer);\n    return _possibleConstructorReturn(this, _getPrototypeOf(ScenegraphLayer).apply(this, arguments));\n  }\n  _createClass(ScenegraphLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instancePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          accessor: 'getPosition',\n          transition: true\n        },\n        instanceColors: {\n          type: 5121,\n          size: this.props.colorFormat.length,\n          accessor: 'getColor',\n          normalized: true,\n          defaultValue: DEFAULT_COLOR,\n          transition: true\n        },\n        instanceModelMatrix: MATRIX_ATTRIBUTES\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(params) {\n      _get(_getPrototypeOf(ScenegraphLayer.prototype), \"updateState\", this).call(this, params);\n      var props = params.props,\n        oldProps = params.oldProps;\n      if (props.scenegraph !== oldProps.scenegraph) {\n        this._updateScenegraph(props);\n      } else if (props._animations !== oldProps._animations) {\n        this._applyAnimationsProp(this.state.scenegraph, this.state.animator, props._animations);\n      }\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      _get(_getPrototypeOf(ScenegraphLayer.prototype), \"finalizeState\", this).call(this);\n      this._deleteScenegraph();\n    }\n  }, {\n    key: \"_updateScenegraph\",\n    value: function _updateScenegraph(props) {\n      var _this = this;\n      var gl = this.context.gl;\n      var scenegraphData;\n      if (props.scenegraph instanceof ScenegraphNode) {\n        scenegraphData = {\n          scenes: [props.scenegraph]\n        };\n      } else if (props.scenegraph && !props.scenegraph.gltf) {\n        var gltf = props.scenegraph;\n        var gltfObjects = createGLTFObjects(gl, gltf, this.getLoadOptions());\n        scenegraphData = Object.assign({\n          gltf: gltf\n        }, gltfObjects);\n        waitForGLTFAssets(gltfObjects).then(function () {\n          return _this.setNeedsRedraw();\n        });\n      } else {\n        log.deprecated('ScenegraphLayer.props.scenegraph', 'Use GLTFLoader instead of GLTFScenegraphLoader')();\n        scenegraphData = props.scenegraph;\n      }\n      var options = {\n        layer: this,\n        gl: gl\n      };\n      var scenegraph = props.getScene(scenegraphData, options);\n      var animator = props.getAnimator(scenegraphData, options);\n      if (scenegraph instanceof ScenegraphNode) {\n        this._deleteScenegraph();\n        this._applyAllAttributes(scenegraph);\n        this._applyAnimationsProp(scenegraph, animator, props._animations);\n        this.setState({\n          scenegraph: scenegraph,\n          animator: animator\n        });\n      } else if (scenegraph !== null) {\n        log.warn('invalid scenegraph:', scenegraph)();\n      }\n    }\n  }, {\n    key: \"_applyAllAttributes\",\n    value: function _applyAllAttributes(scenegraph) {\n      var _this2 = this;\n      if (this.state.attributesAvailable) {\n        var allAttributes = this.getAttributeManager().getAttributes();\n        scenegraph.traverse(function (model) {\n          _this2._setModelAttributes(model.model, allAttributes);\n        });\n      }\n    }\n  }, {\n    key: \"_applyAnimationsProp\",\n    value: function _applyAnimationsProp(scenegraph, animator, animationsProp) {\n      if (!scenegraph || !animator || !animationsProp) {\n        return;\n      }\n      var animations = animator.getAnimations();\n      Object.keys(animationsProp).sort().forEach(function (key) {\n        var value = animationsProp[key];\n        if (key === '*') {\n          animations.forEach(function (animation) {\n            Object.assign(animation, value);\n          });\n        } else if (Number.isFinite(Number(key))) {\n          var number = Number(key);\n          if (number >= 0 && number < animations.length) {\n            Object.assign(animations[number], value);\n          } else {\n            log.warn(\"animation \".concat(key, \" not found\"))();\n          }\n        } else {\n          var findResult = animations.find(function (_ref) {\n            var name = _ref.name;\n            return name === key;\n          });\n          if (findResult) {\n            Object.assign(findResult, value);\n          } else {\n            log.warn(\"animation \".concat(key, \" not found\"))();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"_deleteScenegraph\",\n    value: function _deleteScenegraph() {\n      var scenegraph = this.state.scenegraph;\n      if (scenegraph instanceof ScenegraphNode) {\n        scenegraph[\"delete\"]();\n      }\n    }\n  }, {\n    key: \"getLoadOptions\",\n    value: function getLoadOptions() {\n      var modules = [project32, picking];\n      var _this$props = this.props,\n        _lighting = _this$props._lighting,\n        _imageBasedLightingEnvironment = _this$props._imageBasedLightingEnvironment;\n      if (_lighting === 'pbr') {\n        modules.push(pbr);\n      }\n      var env = null;\n      if (_imageBasedLightingEnvironment) {\n        if (typeof _imageBasedLightingEnvironment === 'function') {\n          env = _imageBasedLightingEnvironment({\n            gl: this.context.gl,\n            layer: this\n          });\n        } else {\n          env = _imageBasedLightingEnvironment;\n        }\n      }\n      return {\n        gl: this.context.gl,\n        waitForFullLoad: true,\n        imageBasedLightingEnvironment: env,\n        modelOptions: {\n          vs: vs,\n          fs: fs,\n          modules: modules,\n          isInstanced: true,\n          transpileToGLSL100: !isWebGL2(this.context.gl)\n        },\n        useTangents: false\n      };\n    }\n  }, {\n    key: \"updateAttributes\",\n    value: function updateAttributes(changedAttributes) {\n      var _this3 = this;\n      this.setState({\n        attributesAvailable: true\n      });\n      if (!this.state.scenegraph) return;\n      this.state.scenegraph.traverse(function (model) {\n        _this3._setModelAttributes(model.model, changedAttributes);\n      });\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var _ref2$moduleParameter = _ref2.moduleParameters,\n        moduleParameters = _ref2$moduleParameter === void 0 ? null : _ref2$moduleParameter,\n        _ref2$parameters = _ref2.parameters,\n        parameters = _ref2$parameters === void 0 ? {} : _ref2$parameters,\n        context = _ref2.context;\n      if (!this.state.scenegraph) return;\n      if (this.props._animations && this.state.animator) {\n        this.state.animator.animate(context.animationProps.time);\n      }\n      var viewport = this.context.viewport;\n      var _this$props2 = this.props,\n        sizeScale = _this$props2.sizeScale,\n        sizeMinPixels = _this$props2.sizeMinPixels,\n        sizeMaxPixels = _this$props2.sizeMaxPixels,\n        opacity = _this$props2.opacity,\n        coordinateSystem = _this$props2.coordinateSystem;\n      var numInstances = this.getNumInstances();\n      this.state.scenegraph.traverse(function (model, _ref3) {\n        var worldMatrix = _ref3.worldMatrix;\n        model.model.setInstanceCount(numInstances);\n        model.updateModuleSettings(moduleParameters);\n        model.draw({\n          parameters: parameters,\n          uniforms: {\n            sizeScale: sizeScale,\n            opacity: opacity,\n            sizeMinPixels: sizeMinPixels,\n            sizeMaxPixels: sizeMaxPixels,\n            composeModelMatrix: shouldComposeModelMatrix(viewport, coordinateSystem),\n            sceneModelMatrix: worldMatrix,\n            u_Camera: model.model.getUniforms().project_uCameraPosition\n          }\n        });\n      });\n    }\n  }]);\n  return ScenegraphLayer;\n}(Layer);\nexport { ScenegraphLayer as default };\nScenegraphLayer.layerName = 'ScenegraphLayer';\nScenegraphLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/scenegraph-layer/scenegraph-layer.js"],"names":["Layer","project32","picking","log","isWebGL2","pbr","ScenegraphNode","createGLTFObjects","waitForGLTFAssets","MATRIX_ATTRIBUTES","shouldComposeModelMatrix","vs","fs","DEFAULT_COLOR","defaultProps","scenegraph","type","value","async","getScene","gltf","scenes","scene","getAnimator","animator","_animations","sizeScale","min","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","getPosition","x","position","getColor","_lighting","_imageBasedLightingEnvironment","getOrientation","getScale","getTranslation","getTransformMatrix","ScenegraphLayer","attributeManager","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","accessor","transition","instanceColors","props","colorFormat","length","normalized","defaultValue","instanceModelMatrix","params","oldProps","_updateScenegraph","_applyAnimationsProp","state","_deleteScenegraph","gl","context","scenegraphData","gltfObjects","getLoadOptions","assign","then","setNeedsRedraw","deprecated","options","layer","_applyAllAttributes","setState","warn","attributesAvailable","allAttributes","getAttributes","traverse","_setModelAttributes","model","animationsProp","animations","getAnimations","Object","keys","sort","forEach","key","animation","isFinite","number","findResult","find","name","modules","push","env","waitForFullLoad","imageBasedLightingEnvironment","modelOptions","isInstanced","transpileToGLSL100","useTangents","changedAttributes","moduleParameters","parameters","animate","animationProps","time","viewport","opacity","coordinateSystem","numInstances","getNumInstances","worldMatrix","setInstanceCount","updateModuleSettings","draw","uniforms","composeModelMatrix","sceneModelMatrix","u_Camera","getUniforms","project_uCameraPosition","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, log} from '@deck.gl/core';\nimport {isWebGL2} from '@luma.gl/core';\nimport {pbr} from '@luma.gl/shadertools';\nimport {ScenegraphNode, createGLTFObjects} from '@luma.gl/experimental';\nimport GL from '@luma.gl/constants';\nimport {waitForGLTFAssets} from './gltf-utils';\n\nimport {MATRIX_ATTRIBUTES, shouldComposeModelMatrix} from '../utils/matrix';\n\nimport vs from './scenegraph-layer-vertex.glsl';\nimport fs from './scenegraph-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [255, 255, 255, 255];\n\nconst defaultProps = {\n  scenegraph: {type: 'object', value: null, async: true},\n  getScene: gltf => {\n    if (gltf && gltf.scenes) {\n      // gltf post processor replaces `gltf.scene` number with the scene `object`\n      return typeof gltf.scene === 'object' ? gltf.scene : gltf.scenes[gltf.scene || 0];\n    }\n    return gltf;\n  },\n  getAnimator: scenegraph => scenegraph && scenegraph.animator,\n  _animations: null,\n\n  sizeScale: {type: 'number', value: 1, min: 0},\n  sizeMinPixels: {type: 'number', min: 0, value: 0},\n  sizeMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // flat or pbr\n  _lighting: 'flat',\n  // _lighting must be pbr for this to work\n  _imageBasedLightingEnvironment: null,\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {type: 'accessor', value: [0, 0, 0]},\n  getScale: {type: 'accessor', value: [1, 1, 1]},\n  getTranslation: {type: 'accessor', value: [0, 0, 0]},\n  // 4x4 matrix\n  getTransformMatrix: {type: 'accessor', value: []}\n};\n\nexport default class ScenegraphLayer extends Layer {\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        accessor: 'getPosition',\n        transition: true\n      },\n      instanceColors: {\n        type: GL.UNSIGNED_BYTE,\n        size: this.props.colorFormat.length,\n        accessor: 'getColor',\n        normalized: true,\n        defaultValue: DEFAULT_COLOR,\n        transition: true\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n  }\n\n  updateState(params) {\n    super.updateState(params);\n    const {props, oldProps} = params;\n\n    if (props.scenegraph !== oldProps.scenegraph) {\n      this._updateScenegraph(props);\n    } else if (props._animations !== oldProps._animations) {\n      this._applyAnimationsProp(this.state.scenegraph, this.state.animator, props._animations);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    this._deleteScenegraph();\n  }\n\n  _updateScenegraph(props) {\n    const {gl} = this.context;\n    let scenegraphData;\n    if (props.scenegraph instanceof ScenegraphNode) {\n      // Signature 1: props.scenegraph is a proper luma.gl Scenegraph\n      scenegraphData = {scenes: [props.scenegraph]};\n    } else if (props.scenegraph && !props.scenegraph.gltf) {\n      // Converts loaders.gl gltf to luma.gl scenegraph using the undocumented @luma.gl/experimental function\n      const gltf = props.scenegraph;\n      const gltfObjects = createGLTFObjects(gl, gltf, this.getLoadOptions());\n      scenegraphData = Object.assign({gltf}, gltfObjects);\n\n      waitForGLTFAssets(gltfObjects).then(() => this.setNeedsRedraw());\n    } else {\n      // DEPRECATED PATH: Assumes this data was loaded through GLTFScenegraphLoader\n      log.deprecated(\n        'ScenegraphLayer.props.scenegraph',\n        'Use GLTFLoader instead of GLTFScenegraphLoader'\n      )();\n      scenegraphData = props.scenegraph;\n    }\n\n    const options = {layer: this, gl};\n    const scenegraph = props.getScene(scenegraphData, options);\n    const animator = props.getAnimator(scenegraphData, options);\n\n    if (scenegraph instanceof ScenegraphNode) {\n      this._deleteScenegraph();\n      this._applyAllAttributes(scenegraph);\n      this._applyAnimationsProp(scenegraph, animator, props._animations);\n      this.setState({scenegraph, animator});\n    } else if (scenegraph !== null) {\n      log.warn('invalid scenegraph:', scenegraph)();\n    }\n  }\n\n  _applyAllAttributes(scenegraph) {\n    if (this.state.attributesAvailable) {\n      const allAttributes = this.getAttributeManager().getAttributes();\n      scenegraph.traverse(model => {\n        this._setModelAttributes(model.model, allAttributes);\n      });\n    }\n  }\n\n  _applyAnimationsProp(scenegraph, animator, animationsProp) {\n    if (!scenegraph || !animator || !animationsProp) {\n      return;\n    }\n\n    const animations = animator.getAnimations();\n\n    // sort() to ensure '*' comes first so that other values can override\n    Object.keys(animationsProp)\n      .sort()\n      .forEach(key => {\n        // Key can be:\n        //  - number for index number\n        //  - name for animation name\n        //  - * to affect all animations\n        const value = animationsProp[key];\n\n        if (key === '*') {\n          animations.forEach(animation => {\n            Object.assign(animation, value);\n          });\n        } else if (Number.isFinite(Number(key))) {\n          const number = Number(key);\n          if (number >= 0 && number < animations.length) {\n            Object.assign(animations[number], value);\n          } else {\n            log.warn(`animation ${key} not found`)();\n          }\n        } else {\n          const findResult = animations.find(({name}) => name === key);\n          if (findResult) {\n            Object.assign(findResult, value);\n          } else {\n            log.warn(`animation ${key} not found`)();\n          }\n        }\n      });\n  }\n\n  _deleteScenegraph() {\n    const {scenegraph} = this.state;\n    if (scenegraph instanceof ScenegraphNode) {\n      scenegraph.delete();\n    }\n  }\n\n  getLoadOptions() {\n    const modules = [project32, picking];\n    const {_lighting, _imageBasedLightingEnvironment} = this.props;\n\n    if (_lighting === 'pbr') {\n      modules.push(pbr);\n    }\n\n    let env = null;\n    if (_imageBasedLightingEnvironment) {\n      if (typeof _imageBasedLightingEnvironment === 'function') {\n        env = _imageBasedLightingEnvironment({gl: this.context.gl, layer: this});\n      } else {\n        env = _imageBasedLightingEnvironment;\n      }\n    }\n\n    return {\n      gl: this.context.gl,\n      waitForFullLoad: true,\n      imageBasedLightingEnvironment: env,\n      modelOptions: {\n        vs,\n        fs,\n        modules,\n        isInstanced: true,\n        transpileToGLSL100: !isWebGL2(this.context.gl)\n      },\n      // tangents are not supported\n      useTangents: false\n    };\n  }\n\n  updateAttributes(changedAttributes) {\n    this.setState({attributesAvailable: true});\n    if (!this.state.scenegraph) return;\n\n    this.state.scenegraph.traverse(model => {\n      this._setModelAttributes(model.model, changedAttributes);\n    });\n  }\n\n  draw({moduleParameters = null, parameters = {}, context}) {\n    if (!this.state.scenegraph) return;\n\n    if (this.props._animations && this.state.animator) {\n      this.state.animator.animate(context.animationProps.time);\n    }\n\n    const {viewport} = this.context;\n    const {sizeScale, sizeMinPixels, sizeMaxPixels, opacity, coordinateSystem} = this.props;\n    const numInstances = this.getNumInstances();\n    this.state.scenegraph.traverse((model, {worldMatrix}) => {\n      model.model.setInstanceCount(numInstances);\n      model.updateModuleSettings(moduleParameters);\n      model.draw({\n        parameters,\n        uniforms: {\n          sizeScale,\n          opacity,\n          sizeMinPixels,\n          sizeMaxPixels,\n          composeModelMatrix: shouldComposeModelMatrix(viewport, coordinateSystem),\n          sceneModelMatrix: worldMatrix,\n          // Needed for PBR (TODO: find better way to get it)\n          u_Camera: model.model.getUniforms().project_uCameraPosition\n        }\n      });\n    });\n  }\n}\n\nScenegraphLayer.layerName = 'ScenegraphLayer';\nScenegraphLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}