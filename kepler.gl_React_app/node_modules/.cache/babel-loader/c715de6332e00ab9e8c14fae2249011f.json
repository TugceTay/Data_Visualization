{"ast":null,"code":"import assert from './assert';\nconst RADIANS_TO_DEGREES = 1 / Math.PI * 180;\nconst DEGREES_TO_RADIANS = 1 / 180 * Math.PI;\nexport const config = {\n  EPSILON: 1e-12,\n  debug: false,\n  precision: 4,\n  printTypes: false,\n  printDegrees: false,\n  printRowMajor: true\n};\nexport function configure(options) {\n  for (const key in options) {\n    assert(key in config);\n    config[key] = options[key];\n  }\n  return config;\n}\nexport function formatValue(value) {\n  let {\n    precision = config.precision\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  value = round(value);\n  return \"\".concat(parseFloat(value.toPrecision(precision)));\n}\nexport function isArray(value) {\n  return Array.isArray(value) || ArrayBuffer.isView(value) && !(value instanceof DataView);\n}\nexport function clone(array) {\n  return 'clone' in array ? array.clone() : array.slice();\n}\nexport function toRadians(degrees) {\n  return radians(degrees);\n}\nexport function toDegrees(radians) {\n  return degrees(radians);\n}\nexport function radians(degrees, result) {\n  return map(degrees, degrees => degrees * DEGREES_TO_RADIANS, result);\n}\nexport function degrees(radians, result) {\n  return map(radians, radians => radians * RADIANS_TO_DEGREES, result);\n}\nexport function sin(radians, result) {\n  return map(radians, angle => Math.sin(angle), result);\n}\nexport function cos(radians, result) {\n  return map(radians, angle => Math.cos(angle), result);\n}\nexport function tan(radians, result) {\n  return map(radians, angle => Math.tan(angle), result);\n}\nexport function asin(radians, result) {\n  return map(radians, angle => Math.asin(angle), result);\n}\nexport function acos(radians, result) {\n  return map(radians, angle => Math.acos(angle), result);\n}\nexport function atan(radians, result) {\n  return map(radians, angle => Math.atan(angle), result);\n}\nexport function clamp(value, min, max) {\n  return map(value, value => Math.max(min, Math.min(max, value)));\n}\nexport function lerp(a, b, t) {\n  if (isArray(a)) {\n    return a.map((ai, i) => lerp(ai, b[i], t));\n  }\n  return t * b + (1 - t) * a;\n}\nexport function equals(a, b, epsilon) {\n  const oldEpsilon = config.EPSILON;\n  if (epsilon) {\n    config.EPSILON = epsilon;\n  }\n  try {\n    if (a === b) {\n      return true;\n    }\n    if (isArray(a) && isArray(b)) {\n      if (a.length !== b.length) {\n        return false;\n      }\n      for (let i = 0; i < a.length; ++i) {\n        if (!equals(a[i], b[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    if (a && a.equals) {\n      return a.equals(b);\n    }\n    if (b && b.equals) {\n      return b.equals(a);\n    }\n    if (typeof a === 'number' && typeof b === 'number') {\n      return Math.abs(a - b) <= config.EPSILON * Math.max(1, Math.abs(a), Math.abs(b));\n    }\n    return false;\n  } finally {\n    config.EPSILON = oldEpsilon;\n  }\n}\nexport function exactEquals(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (a && typeof a === 'object' && b && typeof b === 'object') {\n    if (a.constructor !== b.constructor) {\n      return false;\n    }\n    if (a.exactEquals) {\n      return a.exactEquals(b);\n    }\n  }\n  if (isArray(a) && isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0; i < a.length; ++i) {\n      if (!exactEquals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\nexport function withEpsilon(epsilon, func) {\n  const oldPrecision = config.EPSILON;\n  config.EPSILON = epsilon;\n  let value;\n  try {\n    value = func();\n  } finally {\n    config.EPSILON = oldPrecision;\n  }\n  return value;\n}\nfunction round(value) {\n  return Math.round(value / config.EPSILON) * config.EPSILON;\n}\nfunction duplicateArray(array) {\n  return array.clone ? array.clone() : new Array(array.length);\n}\nfunction map(value, func, result) {\n  if (isArray(value)) {\n    const array = value;\n    result = result || duplicateArray(array);\n    for (let i = 0; i < result.length && i < array.length; ++i) {\n      result[i] = func(value[i], i, result);\n    }\n    return result;\n  }\n  return func(value);\n}","map":{"version":3,"sources":["../../../src/lib/common.ts"],"names":["assert","RADIANS_TO_DEGREES","Math","PI","DEGREES_TO_RADIANS","config","EPSILON","debug","precision","printTypes","printDegrees","printRowMajor","configure","options","key","formatValue","value","round","parseFloat","toPrecision","isArray","Array","ArrayBuffer","isView","DataView","clone","array","slice","toRadians","degrees","radians","toDegrees","result","map","sin","angle","cos","tan","asin","acos","atan","clamp","min","max","lerp","a","b","t","ai","i","equals","epsilon","oldEpsilon","length","abs","exactEquals","constructor","withEpsilon","func","oldPrecision","duplicateArray"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport {NumericArray} from '@math.gl/types';\nimport assert from './assert';\n\nimport type MathArray from '../classes/base/math-array';\n\nexport type ConfigurationOptions = {\n  EPSILON: number;\n  debug?: boolean;\n  precision: number;\n  printTypes?: boolean;\n  printDegrees?: boolean;\n  printRowMajor?: boolean;\n  _cartographicRadians?: boolean;\n};\n\nconst RADIANS_TO_DEGREES = (1 / Math.PI) * 180;\nconst DEGREES_TO_RADIANS = (1 / 180) * Math.PI;\n\n// TODO - remove\nexport const config: ConfigurationOptions = {\n  EPSILON: 1e-12,\n  debug: false,\n  precision: 4,\n  printTypes: false,\n  printDegrees: false,\n  printRowMajor: true\n};\n\nexport function configure(options?: Partial<ConfigurationOptions>): ConfigurationOptions {\n  // Only copy existing keys\n  for (const key in options) {\n    assert(key in config);\n    config[key] = options[key];\n  }\n  return config;\n}\n\n/**\n * Formats a value into a string\n * @param value\n * @param param1\n * @returns\n */\nexport function formatValue(\n  value: number,\n  {precision = config.precision}: {precision?: number} = {}\n): string {\n  value = round(value);\n  // get rid of trailing zeros\n  return `${parseFloat(value.toPrecision(precision))}`;\n}\n\n/**\n * Check if value is an \"array\"\n * Returns `true` if value is either an array or a typed array\n *\n * Note: returns `false` for `ArrayBuffer` and `DataView` instances\n */\nexport function isArray(value: unknown): boolean {\n  return Array.isArray(value) || (ArrayBuffer.isView(value) && !(value instanceof DataView));\n}\n\nexport function clone(array: NumericArray | MathArray): NumericArray {\n  return 'clone' in array ? array.clone() : array.slice();\n}\n\nexport function toRadians(degrees: number): number;\nexport function toRadians(degrees: NumericArray): NumericArray;\n\nexport function toRadians(degrees: number | NumericArray): number | NumericArray {\n  return radians(degrees as NumericArray);\n}\n\nexport function toDegrees(degrees: number): number;\nexport function toDegrees(degrees: NumericArray): NumericArray;\n\nexport function toDegrees(radians: number | NumericArray): number | NumericArray {\n  return degrees(radians as NumericArray);\n}\n\n// GLSL math function equivalents - Works on both single values and vectors\n\n/**\n * \"GLSL equivalent\" radians: Works on single values and vectors\n */\nexport function radians(degrees: number): number;\nexport function radians(degrees: NumericArray, result?: NumericArray): NumericArray;\n\nexport function radians(\n  degrees: number | NumericArray,\n  result?: NumericArray\n): number | NumericArray {\n  return map(degrees, (degrees) => degrees * DEGREES_TO_RADIANS, result);\n}\n\n/**\n * \"GLSL equivalent\" degrees: Works on single values and vectors\n */\nexport function degrees(radians: number): number;\nexport function degrees(radians: NumericArray, result?: NumericArray): NumericArray;\n\nexport function degrees(\n  radians: number | NumericArray,\n  result?: NumericArray\n): number | NumericArray {\n  return map(radians, (radians) => radians * RADIANS_TO_DEGREES, result);\n}\n\n/**\n * \"GLSL equivalent\" of `Math.sin`: Works on single values and vectors\n * @deprecated\n */\nexport function sin(radians: number | NumericArray, result?: NumericArray): number | NumericArray {\n  return map(radians, (angle) => Math.sin(angle), result);\n}\n\n/**\n * \"GLSL equivalent\" of `Math.cos`: Works on single values and vectors\n * @deprecated\n */\nexport function cos(radians: number | NumericArray, result?: NumericArray): number | NumericArray {\n  return map(radians, (angle) => Math.cos(angle), result);\n}\n\n/**\n * \"GLSL equivalent\" of `Math.tan`: Works on single values and vectors\n * @deprecated\n */\nexport function tan(radians: number | NumericArray, result?: NumericArray): number | NumericArray {\n  return map(radians, (angle) => Math.tan(angle), result);\n}\n\n/**\n * \"GLSL equivalent\" of `Math.asin`: Works on single values and vectors\n * @deprecated\n */\nexport function asin(radians: number | NumericArray, result?: NumericArray): number | NumericArray {\n  return map(radians, (angle) => Math.asin(angle), result);\n}\n\n/**\n * \"GLSL equivalent\" of `Math.acos`: Works on single values and vectors\n * @deprecated\n */\nexport function acos(radians: number | NumericArray, result?: NumericArray): number | NumericArray {\n  return map(radians, (angle) => Math.acos(angle), result);\n}\n\n/**\n * \"GLSL equivalent\" of `Math.atan`: Works on single values and vectors\n * @deprecated\n */\nexport function atan(radians: number | NumericArray, result?: NumericArray): number | NumericArray {\n  return map(radians, (angle) => Math.atan(angle), result);\n}\n\n/**\n * GLSL style value clamping: Works on single values and vectors\n */\nexport function clamp(value: number, min: number, max: number): number;\nexport function clamp(value: NumericArray, min: number, max: number): NumericArray;\n\nexport function clamp(\n  value: number | NumericArray,\n  min: number,\n  max: number\n): number | NumericArray {\n  return map(value, (value) => Math.max(min, Math.min(max, value)));\n}\n\n/**\n * Interpolate between two numbers or two arrays\n */\nexport function lerp(a: number, b: number, t: number): number;\nexport function lerp(a: NumericArray, b: NumericArray, t: number): NumericArray;\n\nexport function lerp(\n  a: number | NumericArray,\n  b: number | NumericArray,\n  t: number\n): number | NumericArray {\n  if (isArray(a)) {\n    return (a as NumericArray).map((ai: number, i: number) => lerp(ai, (b as NumericArray)[i], t));\n  }\n  return t * (b as number) + (1 - t) * (a as number);\n}\n\n/* eslint-disable */\n\n/**\n * Compares any two math objects, using `equals` method if available.\n * @param a\n * @param b\n * @param epsilon\n * @returns\n */\nexport function equals(a: any, b: any, epsilon?: number): boolean {\n  const oldEpsilon = config.EPSILON;\n  if (epsilon) {\n    config.EPSILON = epsilon;\n  }\n  try {\n    if (a === b) {\n      return true;\n    }\n    if (isArray(a) && isArray(b)) {\n      if (a.length !== b.length) {\n        return false;\n      }\n      for (let i = 0; i < a.length; ++i) {\n        // eslint-disable-next-line max-depth\n        if (!equals(a[i], b[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    if (a && a.equals) {\n      return a.equals(b);\n    }\n    if (b && b.equals) {\n      return b.equals(a);\n    }\n    if (typeof a === 'number' && typeof b === 'number') {\n      return Math.abs(a - b) <= config.EPSILON * Math.max(1, Math.abs(a), Math.abs(b));\n    }\n    return false;\n  } finally {\n    config.EPSILON = oldEpsilon;\n  }\n}\n\nexport function exactEquals(a: any, b: any): boolean {\n  if (a === b) {\n    return true;\n  }\n  if (a && typeof a === 'object' && b && typeof b === 'object') {\n    if (a.constructor !== b.constructor) {\n      return false;\n    }\n    if (a.exactEquals) {\n      return a.exactEquals(b);\n    }\n  }\n  if (isArray(a) && isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0; i < a.length; ++i) {\n      if (!exactEquals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\n/* eslint-enable */\n\nexport function withEpsilon<T>(epsilon: number, func: () => T): T {\n  const oldPrecision = config.EPSILON;\n  config.EPSILON = epsilon;\n  let value: T;\n  try {\n    value = func();\n  } finally {\n    config.EPSILON = oldPrecision;\n  }\n  return value;\n}\n\n// HELPERS\n\nfunction round(value: number): number {\n  return Math.round(value / config.EPSILON) * config.EPSILON;\n}\n\n// If the array has a clone function, calls it, otherwise returns a copy\nfunction duplicateArray(array: NumericArray): NumericArray {\n  // @ts-expect-error We check for math.gl class methods\n  return array.clone ? array.clone() : (new Array(array.length) as number[]);\n}\n\n// If the argument value is an array, applies the func element wise,\n// otherwise applies func to the argument value\nfunction map(\n  value: number | NumericArray,\n  func: (x: number, index?: number, result?: NumericArray) => number,\n  result?: NumericArray\n): number | NumericArray {\n  if (isArray(value)) {\n    const array = value as NumericArray;\n    result = result || duplicateArray(array);\n    for (let i = 0; i < result.length && i < array.length; ++i) {\n      result[i] = func(value[i], i, result);\n    }\n    return result;\n  }\n  return func(value as number);\n}\n"]},"metadata":{},"sourceType":"module"}