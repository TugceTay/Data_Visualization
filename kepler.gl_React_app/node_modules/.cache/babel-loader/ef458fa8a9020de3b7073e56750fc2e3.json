{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport MapState from './map-state';\nimport { LinearInterpolator } from './transition';\nimport TransitionManager, { TRANSITION_EVENTS } from './transition-manager';\nvar NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nexport var LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: function transitionEasing(t) {\n    return t;\n  },\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\nvar DEFAULT_INERTIA = 300;\nvar INERTIA_EASING = function INERTIA_EASING(t) {\n  return 1 - (1 - t) * (1 - t);\n};\nvar EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\nvar MapController = function () {\n  function MapController() {\n    var _this = this;\n    _classCallCheck(this, MapController);\n    _defineProperty(this, \"events\", []);\n    _defineProperty(this, \"scrollZoom\", true);\n    _defineProperty(this, \"dragPan\", true);\n    _defineProperty(this, \"dragRotate\", true);\n    _defineProperty(this, \"doubleClickZoom\", true);\n    _defineProperty(this, \"touchZoom\", true);\n    _defineProperty(this, \"touchRotate\", false);\n    _defineProperty(this, \"keyboard\", true);\n    _defineProperty(this, \"_interactionState\", {\n      isDragging: false\n    });\n    _defineProperty(this, \"_events\", {});\n    _defineProperty(this, \"_setInteractionState\", function (newState) {\n      Object.assign(_this._interactionState, newState);\n      if (_this.onStateChange) {\n        _this.onStateChange(_this._interactionState);\n      }\n    });\n    _defineProperty(this, \"_onTransition\", function (newViewport, oldViewport) {\n      _this.onViewportChange(newViewport, _this._interactionState, oldViewport);\n    });\n    this.handleEvent = this.handleEvent.bind(this);\n    this._transitionManager = new TransitionManager({\n      onViewportChange: this._onTransition,\n      onStateChange: this._setInteractionState\n    });\n  }\n  _createClass(MapController, [{\n    key: \"handleEvent\",\n    value: function handleEvent(event) {\n      this.mapState = this.getMapState();\n      var eventStartBlocked = this._eventStartBlocked;\n      switch (event.type) {\n        case 'panstart':\n          return eventStartBlocked ? false : this._onPanStart(event);\n        case 'panmove':\n          return this._onPan(event);\n        case 'panend':\n          return this._onPanEnd(event);\n        case 'pinchstart':\n          return eventStartBlocked ? false : this._onPinchStart(event);\n        case 'pinchmove':\n          return this._onPinch(event);\n        case 'pinchend':\n          return this._onPinchEnd(event);\n        case 'tripanstart':\n          return eventStartBlocked ? false : this._onTriplePanStart(event);\n        case 'tripanmove':\n          return this._onTriplePan(event);\n        case 'tripanend':\n          return this._onTriplePanEnd(event);\n        case 'doubletap':\n          return this._onDoubleTap(event);\n        case 'wheel':\n          return this._onWheel(event);\n        case 'keydown':\n          return this._onKeyDown(event);\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter(event) {\n      var _event$offsetCenter = event.offsetCenter,\n        x = _event$offsetCenter.x,\n        y = _event$offsetCenter.y;\n      return [x, y];\n    }\n  }, {\n    key: \"isFunctionKeyPressed\",\n    value: function isFunctionKeyPressed(event) {\n      var srcEvent = event.srcEvent;\n      return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n    }\n  }, {\n    key: \"blockEvents\",\n    value: function blockEvents(timeout) {\n      var _this2 = this;\n      var timer = setTimeout(function () {\n        if (_this2._eventStartBlocked === timer) {\n          _this2._eventStartBlocked = null;\n        }\n      }, timeout);\n      this._eventStartBlocked = timer;\n    }\n  }, {\n    key: \"updateViewport\",\n    value: function updateViewport(newMapState, extraProps, interactionState) {\n      var oldViewport = this.mapState instanceof MapState ? this.mapState.getViewportProps() : this.mapState;\n      var newViewport = _objectSpread(_objectSpread({}, newMapState.getViewportProps()), extraProps);\n      var viewStateChanged = Object.keys(newViewport).some(function (key) {\n        return oldViewport[key] !== newViewport[key];\n      });\n      this._state = newMapState.getState();\n      this._setInteractionState(interactionState);\n      if (viewStateChanged) {\n        this.onViewportChange(newViewport, this._interactionState, oldViewport);\n      }\n    }\n  }, {\n    key: \"getMapState\",\n    value: function getMapState(overrides) {\n      return new MapState(_objectSpread(_objectSpread(_objectSpread({}, this.mapStateProps), this._state), overrides));\n    }\n  }, {\n    key: \"isDragging\",\n    value: function isDragging() {\n      return this._interactionState.isDragging;\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      var onViewportChange = options.onViewportChange,\n        onStateChange = options.onStateChange,\n        _options$eventManager = options.eventManager,\n        eventManager = _options$eventManager === void 0 ? this.eventManager : _options$eventManager,\n        _options$isInteractiv = options.isInteractive,\n        isInteractive = _options$isInteractiv === void 0 ? true : _options$isInteractiv,\n        _options$scrollZoom = options.scrollZoom,\n        scrollZoom = _options$scrollZoom === void 0 ? this.scrollZoom : _options$scrollZoom,\n        _options$dragPan = options.dragPan,\n        dragPan = _options$dragPan === void 0 ? this.dragPan : _options$dragPan,\n        _options$dragRotate = options.dragRotate,\n        dragRotate = _options$dragRotate === void 0 ? this.dragRotate : _options$dragRotate,\n        _options$doubleClickZ = options.doubleClickZoom,\n        doubleClickZoom = _options$doubleClickZ === void 0 ? this.doubleClickZoom : _options$doubleClickZ,\n        _options$touchZoom = options.touchZoom,\n        touchZoom = _options$touchZoom === void 0 ? this.touchZoom : _options$touchZoom,\n        _options$touchRotate = options.touchRotate,\n        touchRotate = _options$touchRotate === void 0 ? this.touchRotate : _options$touchRotate,\n        _options$keyboard = options.keyboard,\n        keyboard = _options$keyboard === void 0 ? this.keyboard : _options$keyboard;\n      this.onViewportChange = onViewportChange;\n      this.onStateChange = onStateChange;\n      var prevOptions = this.mapStateProps || {};\n      var dimensionChanged = prevOptions.height !== options.height || prevOptions.width !== options.width;\n      this.mapStateProps = options;\n      if (dimensionChanged) {\n        this.mapState = prevOptions;\n        this.updateViewport(new MapState(options));\n      }\n      this._transitionManager.processViewportChange(options);\n      if (this.eventManager !== eventManager) {\n        this.eventManager = eventManager;\n        this._events = {};\n        this.toggleEvents(this.events, true);\n      }\n      this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && Boolean(scrollZoom));\n      this.toggleEvents(EVENT_TYPES.PAN, isInteractive && Boolean(dragPan || dragRotate));\n      this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && Boolean(touchZoom || touchRotate));\n      this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && Boolean(touchRotate));\n      this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && Boolean(doubleClickZoom));\n      this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && Boolean(keyboard));\n      this.scrollZoom = scrollZoom;\n      this.dragPan = dragPan;\n      this.dragRotate = dragRotate;\n      this.doubleClickZoom = doubleClickZoom;\n      this.touchZoom = touchZoom;\n      this.touchRotate = touchRotate;\n      this.keyboard = keyboard;\n    }\n  }, {\n    key: \"toggleEvents\",\n    value: function toggleEvents(eventNames, enabled) {\n      var _this3 = this;\n      if (this.eventManager) {\n        eventNames.forEach(function (eventName) {\n          if (_this3._events[eventName] !== enabled) {\n            _this3._events[eventName] = enabled;\n            if (enabled) {\n              _this3.eventManager.on(eventName, _this3.handleEvent);\n            } else {\n              _this3.eventManager.off(eventName, _this3.handleEvent);\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"_onPanStart\",\n    value: function _onPanStart(event) {\n      var pos = this.getCenter(event);\n      this._panRotate = this.isFunctionKeyPressed(event) || event.rightButton;\n      var newMapState = this._panRotate ? this.mapState.rotateStart({\n        pos: pos\n      }) : this.mapState.panStart({\n        pos: pos\n      });\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPan\",\n    value: function _onPan(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n      return this._panRotate ? this._onPanRotate(event) : this._onPanMove(event);\n    }\n  }, {\n    key: \"_onPanEnd\",\n    value: function _onPanEnd(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n      return this._panRotate ? this._onPanRotateEnd(event) : this._onPanMoveEnd(event);\n    }\n  }, {\n    key: \"_onPanMove\",\n    value: function _onPanMove(event) {\n      if (!this.dragPan) {\n        return false;\n      }\n      var pos = this.getCenter(event);\n      var newMapState = this.mapState.pan({\n        pos: pos\n      });\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isPanning: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPanMoveEnd\",\n    value: function _onPanMoveEnd(event) {\n      if (this.dragPan) {\n        var _this$dragPan$inertia = this.dragPan.inertia,\n          inertia = _this$dragPan$inertia === void 0 ? DEFAULT_INERTIA : _this$dragPan$inertia;\n        if (inertia && event.velocity) {\n          var pos = this.getCenter(event);\n          var endPos = [pos[0] + event.velocityX * inertia / 2, pos[1] + event.velocityY * inertia / 2];\n          var newControllerState = this.mapState.pan({\n            pos: endPos\n          }).panEnd();\n          this.updateViewport(newControllerState, _objectSpread(_objectSpread({}, LINEAR_TRANSITION_PROPS), {}, {\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          }), {\n            isDragging: false,\n            isPanning: true\n          });\n          return true;\n        }\n      }\n      var newMapState = this.mapState.panEnd();\n      this.updateViewport(newMapState, null, {\n        isDragging: false,\n        isPanning: false\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPanRotate\",\n    value: function _onPanRotate(event) {\n      if (!this.dragRotate) {\n        return false;\n      }\n      var pos = this.getCenter(event);\n      var newMapState = this.mapState.rotate({\n        pos: pos\n      });\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isRotating: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPanRotateEnd\",\n    value: function _onPanRotateEnd(event) {\n      if (this.dragRotate) {\n        var _this$dragRotate$iner = this.dragRotate.inertia,\n          inertia = _this$dragRotate$iner === void 0 ? DEFAULT_INERTIA : _this$dragRotate$iner;\n        if (inertia && event.velocity) {\n          var pos = this.getCenter(event);\n          var endPos = [pos[0] + event.velocityX * inertia / 2, pos[1] + event.velocityY * inertia / 2];\n          var newControllerState = this.mapState.rotate({\n            pos: endPos\n          }).rotateEnd();\n          this.updateViewport(newControllerState, _objectSpread(_objectSpread({}, LINEAR_TRANSITION_PROPS), {}, {\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          }), {\n            isDragging: false,\n            isRotating: true\n          });\n          return true;\n        }\n      }\n      var newMapState = this.mapState.panEnd();\n      this.updateViewport(newMapState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n      return true;\n    }\n  }, {\n    key: \"_onWheel\",\n    value: function _onWheel(event) {\n      if (!this.scrollZoom) {\n        return false;\n      }\n      var _this$scrollZoom = this.scrollZoom,\n        _this$scrollZoom$spee = _this$scrollZoom.speed,\n        speed = _this$scrollZoom$spee === void 0 ? 0.01 : _this$scrollZoom$spee,\n        _this$scrollZoom$smoo = _this$scrollZoom.smooth,\n        smooth = _this$scrollZoom$smoo === void 0 ? false : _this$scrollZoom$smoo;\n      event.preventDefault();\n      var pos = this.getCenter(event);\n      var delta = event.delta;\n      var scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n      if (delta < 0 && scale !== 0) {\n        scale = 1 / scale;\n      }\n      var newMapState = this.mapState.zoom({\n        pos: pos,\n        scale: scale\n      });\n      if (newMapState.getViewportProps().zoom === this.mapStateProps.zoom) {\n        return false;\n      }\n      this.updateViewport(newMapState, _objectSpread(_objectSpread({}, LINEAR_TRANSITION_PROPS), {}, {\n        transitionInterpolator: new LinearInterpolator({\n          around: pos\n        }),\n        transitionDuration: smooth ? 250 : 1\n      }), {\n        isPanning: true,\n        isZooming: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPinchStart\",\n    value: function _onPinchStart(event) {\n      var pos = this.getCenter(event);\n      var newMapState = this.mapState.zoomStart({\n        pos: pos\n      }).rotateStart({\n        pos: pos\n      });\n      this._startPinchRotation = event.rotation;\n      this._lastPinchEvent = event;\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPinch\",\n    value: function _onPinch(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n      if (!this.touchZoom && !this.touchRotate) {\n        return false;\n      }\n      var newMapState = this.mapState;\n      if (this.touchZoom) {\n        var scale = event.scale;\n        var pos = this.getCenter(event);\n        newMapState = newMapState.zoom({\n          pos: pos,\n          scale: scale\n        });\n      }\n      if (this.touchRotate) {\n        var rotation = event.rotation;\n        newMapState = newMapState.rotate({\n          deltaAngleX: this._startPinchRotation - rotation\n        });\n      }\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isDragging: true,\n        isPanning: Boolean(this.touchZoom),\n        isZooming: Boolean(this.touchZoom),\n        isRotating: Boolean(this.touchRotate)\n      });\n      this._lastPinchEvent = event;\n      return true;\n    }\n  }, {\n    key: \"_onPinchEnd\",\n    value: function _onPinchEnd(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n      if (this.touchZoom) {\n        var _this$touchZoom$inert = this.touchZoom.inertia,\n          inertia = _this$touchZoom$inert === void 0 ? DEFAULT_INERTIA : _this$touchZoom$inert;\n        var _lastPinchEvent = this._lastPinchEvent;\n        if (inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n          var pos = this.getCenter(event);\n          var _newMapState = this.mapState.rotateEnd();\n          var z = Math.log2(event.scale);\n          var velocityZ = (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n          var endScale = Math.pow(2, z + velocityZ * inertia / 2);\n          _newMapState = _newMapState.zoom({\n            pos: pos,\n            scale: endScale\n          }).zoomEnd();\n          this.updateViewport(_newMapState, _objectSpread(_objectSpread({}, LINEAR_TRANSITION_PROPS), {}, {\n            transitionInterpolator: new LinearInterpolator({\n              around: pos\n            }),\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          }), {\n            isDragging: false,\n            isPanning: Boolean(this.touchZoom),\n            isZooming: Boolean(this.touchZoom),\n            isRotating: false\n          });\n          this.blockEvents(inertia);\n          return true;\n        }\n      }\n      var newMapState = this.mapState.zoomEnd().rotateEnd();\n      this._state.startPinchRotation = 0;\n      this.updateViewport(newMapState, null, {\n        isDragging: false,\n        isPanning: false,\n        isZooming: false,\n        isRotating: false\n      });\n      this._startPinchRotation = null;\n      this._lastPinchEvent = null;\n      return true;\n    }\n  }, {\n    key: \"_onTriplePanStart\",\n    value: function _onTriplePanStart(event) {\n      var pos = this.getCenter(event);\n      var newMapState = this.mapState.rotateStart({\n        pos: pos\n      });\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onTriplePan\",\n    value: function _onTriplePan(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n      if (!this.touchRotate) {\n        return false;\n      }\n      var pos = this.getCenter(event);\n      pos[0] -= event.deltaX;\n      var newMapState = this.mapState.rotate({\n        pos: pos\n      });\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isRotating: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onTriplePanEnd\",\n    value: function _onTriplePanEnd(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n      if (this.touchRotate) {\n        var _this$touchRotate$ine = this.touchRotate.inertia,\n          inertia = _this$touchRotate$ine === void 0 ? DEFAULT_INERTIA : _this$touchRotate$ine;\n        if (inertia && event.velocityY) {\n          var pos = this.getCenter(event);\n          var endPos = [pos[0], pos[1] += event.velocityY * inertia / 2];\n          var _newMapState2 = this.mapState.rotate({\n            pos: endPos\n          });\n          this.updateViewport(_newMapState2, _objectSpread(_objectSpread({}, LINEAR_TRANSITION_PROPS), {}, {\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          }), {\n            isDragging: false,\n            isRotating: true\n          });\n          this.blockEvents(inertia);\n          return false;\n        }\n      }\n      var newMapState = this.mapState.rotateEnd();\n      this.updateViewport(newMapState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n      return true;\n    }\n  }, {\n    key: \"_onDoubleTap\",\n    value: function _onDoubleTap(event) {\n      if (!this.doubleClickZoom) {\n        return false;\n      }\n      var pos = this.getCenter(event);\n      var isZoomOut = this.isFunctionKeyPressed(event);\n      var newMapState = this.mapState.zoom({\n        pos: pos,\n        scale: isZoomOut ? 0.5 : 2\n      });\n      this.updateViewport(newMapState, Object.assign({}, LINEAR_TRANSITION_PROPS, {\n        transitionInterpolator: new LinearInterpolator({\n          around: pos\n        })\n      }), {\n        isZooming: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onKeyDown\",\n    value: function _onKeyDown(event) {\n      if (!this.keyboard) {\n        return false;\n      }\n      var funcKey = this.isFunctionKeyPressed(event);\n      var _this$keyboard = this.keyboard,\n        _this$keyboard$zoomSp = _this$keyboard.zoomSpeed,\n        zoomSpeed = _this$keyboard$zoomSp === void 0 ? 2 : _this$keyboard$zoomSp,\n        _this$keyboard$moveSp = _this$keyboard.moveSpeed,\n        moveSpeed = _this$keyboard$moveSp === void 0 ? 100 : _this$keyboard$moveSp,\n        _this$keyboard$rotate = _this$keyboard.rotateSpeedX,\n        rotateSpeedX = _this$keyboard$rotate === void 0 ? 15 : _this$keyboard$rotate,\n        _this$keyboard$rotate2 = _this$keyboard.rotateSpeedY,\n        rotateSpeedY = _this$keyboard$rotate2 === void 0 ? 10 : _this$keyboard$rotate2;\n      var mapStateProps = this.mapStateProps;\n      var newMapState;\n      switch (event.srcEvent.keyCode) {\n        case 189:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              zoom: mapStateProps.zoom - Math.log2(zoomSpeed) - 1\n            });\n          } else {\n            newMapState = this.getMapState({\n              zoom: mapStateProps.zoom - Math.log2(zoomSpeed)\n            });\n          }\n          break;\n        case 187:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              zoom: mapStateProps.zoom + Math.log2(zoomSpeed) + 1\n            });\n          } else {\n            newMapState = this.getMapState({\n              zoom: mapStateProps.zoom + Math.log2(zoomSpeed)\n            });\n          }\n          break;\n        case 37:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              bearing: mapStateProps.bearing - rotateSpeedX\n            });\n          } else {\n            newMapState = this.mapState.pan({\n              pos: [moveSpeed, 0],\n              startPos: [0, 0]\n            });\n          }\n          break;\n        case 39:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              bearing: mapStateProps.bearing + rotateSpeedX\n            });\n          } else {\n            newMapState = this.mapState.pan({\n              pos: [-moveSpeed, 0],\n              startPos: [0, 0]\n            });\n          }\n          break;\n        case 38:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              pitch: mapStateProps.pitch + rotateSpeedY\n            });\n          } else {\n            newMapState = this.mapState.pan({\n              pos: [0, moveSpeed],\n              startPos: [0, 0]\n            });\n          }\n          break;\n        case 40:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              pitch: mapStateProps.pitch - rotateSpeedY\n            });\n          } else {\n            newMapState = this.mapState.pan({\n              pos: [0, -moveSpeed],\n              startPos: [0, 0]\n            });\n          }\n          break;\n        default:\n          return false;\n      }\n      return this.updateViewport(newMapState, LINEAR_TRANSITION_PROPS);\n    }\n  }]);\n  return MapController;\n}();\nexport { MapController as default };","map":{"version":3,"sources":["../../../src/utils/map-controller.js"],"names":["MapState","LinearInterpolator","TransitionManager","TRANSITION_EVENTS","NO_TRANSITION_PROPS","transitionDuration","LINEAR_TRANSITION_PROPS","transitionEasing","t","transitionInterpolator","transitionInterruption","BREAK","DEFAULT_INERTIA","INERTIA_EASING","EVENT_TYPES","WHEEL","PAN","PINCH","TRIPLE_PAN","DOUBLE_TAP","KEYBOARD","MapController","isDragging","handleEvent","bind","_transitionManager","onViewportChange","_onTransition","onStateChange","_setInteractionState","event","mapState","getMapState","eventStartBlocked","_eventStartBlocked","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onTriplePanStart","_onTriplePan","_onTriplePanEnd","_onDoubleTap","_onWheel","_onKeyDown","offsetCenter","x","y","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","timeout","timer","setTimeout","newMapState","extraProps","interactionState","oldViewport","getViewportProps","newViewport","viewStateChanged","keys","some","key","_state","getState","_interactionState","Object","assign","newState","overrides","mapStateProps","options","eventManager","isInteractive","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","prevOptions","dimensionChanged","height","width","updateViewport","processViewportChange","_events","toggleEvents","events","eventNames","enabled","forEach","eventName","on","off","pos","getCenter","_panRotate","isFunctionKeyPressed","rightButton","rotateStart","panStart","_onPanRotate","_onPanMove","_onPanRotateEnd","_onPanMoveEnd","pan","isPanning","inertia","velocity","endPos","velocityX","velocityY","newControllerState","panEnd","rotate","isRotating","rotateEnd","speed","smooth","preventDefault","delta","scale","Math","exp","abs","zoom","around","isZooming","zoomStart","_startPinchRotation","rotation","_lastPinchEvent","deltaAngleX","z","log2","velocityZ","deltaTime","endScale","pow","zoomEnd","blockEvents","startPinchRotation","deltaX","isZoomOut","funcKey","zoomSpeed","moveSpeed","rotateSpeedX","rotateSpeedY","keyCode","bearing","startPos","pitch"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable complexity, max-statements */\nimport MapState from './map-state';\nimport {LinearInterpolator} from './transition';\nimport TransitionManager, {TRANSITION_EVENTS} from './transition-manager';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nexport const LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\n// EVENT HANDLING PARAMETERS\nconst DEFAULT_INERTIA = 300;\nconst INERTIA_EASING = t => 1 - (1 - t) * (1 - t);\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\n/**\n * @classdesc\n * A class that handles events and updates mercator style viewport parameters\n */\nexport default class MapController {\n  events = [];\n  scrollZoom = true;\n  dragPan = true;\n  dragRotate = true;\n  doubleClickZoom = true;\n  touchZoom = true;\n  touchRotate = false;\n  keyboard = true;\n\n  _interactionState = {\n    isDragging: false\n  };\n  _events = {};\n\n  constructor() {\n    this.handleEvent = this.handleEvent.bind(this);\n    this._transitionManager = new TransitionManager({\n      onViewportChange: this._onTransition,\n      onStateChange: this._setInteractionState\n    });\n  }\n\n  /**\n   * Callback for events\n   * @param {object} event - a mjolnir.js Event\n   */\n  handleEvent(event) {\n    this.mapState = this.getMapState();\n    const eventStartBlocked = this._eventStartBlocked;\n\n    switch (event.type) {\n      case 'panstart':\n        return eventStartBlocked ? false : this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return eventStartBlocked ? false : this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'tripanstart':\n        return eventStartBlocked ? false : this._onTriplePanStart(event);\n      case 'tripanmove':\n        return this._onTriplePan(event);\n      case 'tripanend':\n        return this._onTriplePanEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event) {\n    const {\n      offsetCenter: {x, y}\n    } = event;\n    return [x, y];\n  }\n\n  isFunctionKeyPressed(event) {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  // When a multi-touch event ends, e.g. pinch, not all pointers are lifted at the same time.\n  // This triggers a brief `pan` event.\n  // Calling this method will temporarily disable *start events to avoid conflicting transitions.\n  blockEvents(timeout) {\n    /* global setTimeout */\n    const timer = setTimeout(() => {\n      if (this._eventStartBlocked === timer) {\n        this._eventStartBlocked = null;\n      }\n    }, timeout);\n    this._eventStartBlocked = timer;\n  }\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newMapState, extraProps, interactionState) {\n    // Always trigger callback on initial update (resize)\n    const oldViewport =\n      this.mapState instanceof MapState ? this.mapState.getViewportProps() : this.mapState;\n    const newViewport = {...newMapState.getViewportProps(), ...extraProps};\n\n    const viewStateChanged = Object.keys(newViewport).some(\n      key => oldViewport[key] !== newViewport[key]\n    );\n\n    this._state = newMapState.getState();\n    this._setInteractionState(interactionState);\n\n    // viewState has changed\n    if (viewStateChanged) {\n      this.onViewportChange(newViewport, this._interactionState, oldViewport);\n    }\n  }\n\n  _setInteractionState = newState => {\n    Object.assign(this._interactionState, newState);\n    if (this.onStateChange) {\n      this.onStateChange(this._interactionState);\n    }\n  };\n\n  _onTransition = (newViewport, oldViewport) => {\n    this.onViewportChange(newViewport, this._interactionState, oldViewport);\n  };\n\n  getMapState(overrides) {\n    return new MapState({...this.mapStateProps, ...this._state, ...overrides});\n  }\n\n  isDragging() {\n    return this._interactionState.isDragging;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  setOptions(options) {\n    const {\n      onViewportChange,\n      onStateChange,\n      eventManager = this.eventManager,\n\n      isInteractive = true,\n      scrollZoom = this.scrollZoom,\n      dragPan = this.dragPan,\n      dragRotate = this.dragRotate,\n      doubleClickZoom = this.doubleClickZoom,\n      touchZoom = this.touchZoom,\n      touchRotate = this.touchRotate,\n      keyboard = this.keyboard\n    } = options;\n\n    this.onViewportChange = onViewportChange;\n    this.onStateChange = onStateChange;\n\n    const prevOptions = this.mapStateProps || {};\n    const dimensionChanged =\n      prevOptions.height !== options.height || prevOptions.width !== options.width;\n\n    this.mapStateProps = options;\n\n    if (dimensionChanged) {\n      // Dimensions changed, normalize the props and fire change event\n      this.mapState = prevOptions;\n      this.updateViewport(new MapState(options));\n    }\n    // Update transition\n    this._transitionManager.processViewportChange(options);\n\n    if (this.eventManager !== eventManager) {\n      // EventManager has changed\n      this.eventManager = eventManager;\n      this._events = {};\n      this.toggleEvents(this.events, true);\n    }\n\n    // Register/unregister events\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && Boolean(scrollZoom));\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && Boolean(dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && Boolean(touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && Boolean(touchRotate));\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && Boolean(doubleClickZoom));\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && Boolean(keyboard));\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n    this._panRotate = this.isFunctionKeyPressed(event) || event.rightButton;\n    const newMapState = this._panRotate\n      ? this.mapState.rotateStart({pos})\n      : this.mapState.panStart({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` event.\n  _onPan(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panRotate ? this._onPanRotate(event) : this._onPanMove(event);\n  }\n\n  // Default handler for the `panend` event.\n  _onPanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panRotate ? this._onPanRotateEnd(event) : this._onPanMoveEnd(event);\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.pan({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isPanning: true});\n    return true;\n  }\n\n  _onPanMoveEnd(event) {\n    if (this.dragPan) {\n      const {inertia = DEFAULT_INERTIA} = this.dragPan;\n      if (inertia && event.velocity) {\n        const pos = this.getCenter(event);\n        const endPos = [\n          pos[0] + (event.velocityX * inertia) / 2,\n          pos[1] + (event.velocityY * inertia) / 2\n        ];\n        const newControllerState = this.mapState.pan({pos: endPos}).panEnd();\n        this.updateViewport(\n          newControllerState,\n          {\n            ...LINEAR_TRANSITION_PROPS,\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          },\n          {\n            isDragging: false,\n            isPanning: true\n          }\n        );\n        return true;\n      }\n    }\n    const newMapState = this.mapState.panEnd();\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isPanning: false\n    });\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.rotate({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isRotating: true});\n    return true;\n  }\n\n  _onPanRotateEnd(event) {\n    if (this.dragRotate) {\n      const {inertia = DEFAULT_INERTIA} = this.dragRotate;\n      if (inertia && event.velocity) {\n        const pos = this.getCenter(event);\n        const endPos = [\n          pos[0] + (event.velocityX * inertia) / 2,\n          pos[1] + (event.velocityY * inertia) / 2\n        ];\n        const newControllerState = this.mapState.rotate({pos: endPos}).rotateEnd();\n        this.updateViewport(\n          newControllerState,\n          {\n            ...LINEAR_TRANSITION_PROPS,\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          },\n          {\n            isDragging: false,\n            isRotating: true\n          }\n        );\n        return true;\n      }\n    }\n    const newMapState = this.mapState.panEnd();\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n\n    const {speed = 0.01, smooth = false} = this.scrollZoom;\n\n    event.preventDefault();\n\n    const pos = this.getCenter(event);\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newMapState = this.mapState.zoom({pos, scale});\n    if (newMapState.getViewportProps().zoom === this.mapStateProps.zoom) {\n      return false;\n    }\n\n    this.updateViewport(\n      newMapState,\n      {\n        ...LINEAR_TRANSITION_PROPS,\n        transitionInterpolator: new LinearInterpolator({around: pos}),\n        transitionDuration: smooth ? 250 : 1\n      },\n      {\n        isPanning: true,\n        isZooming: true\n      }\n    );\n    return true;\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._startPinchRotation = event.rotation;\n    this._lastPinchEvent = event;\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinch` event.\n  _onPinch(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n\n    let newMapState = this.mapState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newMapState = newMapState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      newMapState = newMapState.rotate({\n        deltaAngleX: this._startPinchRotation - rotation\n      });\n    }\n\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: Boolean(this.touchZoom),\n      isZooming: Boolean(this.touchZoom),\n      isRotating: Boolean(this.touchRotate)\n    });\n    this._lastPinchEvent = event;\n    return true;\n  }\n\n  // Default handler for the `pinchend` event.\n  _onPinchEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    if (this.touchZoom) {\n      const {inertia = DEFAULT_INERTIA} = this.touchZoom;\n      const {_lastPinchEvent} = this;\n      if (inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n        const pos = this.getCenter(event);\n        let newMapState = this.mapState.rotateEnd();\n        const z = Math.log2(event.scale);\n        const velocityZ =\n          (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n        const endScale = Math.pow(2, z + (velocityZ * inertia) / 2);\n        newMapState = newMapState.zoom({pos, scale: endScale}).zoomEnd();\n\n        this.updateViewport(\n          newMapState,\n          {\n            ...LINEAR_TRANSITION_PROPS,\n            transitionInterpolator: new LinearInterpolator({around: pos}),\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          },\n          {\n            isDragging: false,\n            isPanning: Boolean(this.touchZoom),\n            isZooming: Boolean(this.touchZoom),\n            isRotating: false\n          }\n        );\n        this.blockEvents(inertia);\n        return true;\n      }\n    }\n\n    const newMapState = this.mapState.zoomEnd().rotateEnd();\n    this._state.startPinchRotation = 0;\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isPanning: false,\n      isZooming: false,\n      isRotating: false\n    });\n    this._startPinchRotation = null;\n    this._lastPinchEvent = null;\n    return true;\n  }\n\n  _onTriplePanStart(event) {\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.rotateStart({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  _onTriplePan(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    if (!this.touchRotate) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    pos[0] -= event.deltaX;\n\n    const newMapState = this.mapState.rotate({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isRotating: true});\n    return true;\n  }\n\n  _onTriplePanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    if (this.touchRotate) {\n      const {inertia = DEFAULT_INERTIA} = this.touchRotate;\n      if (inertia && event.velocityY) {\n        const pos = this.getCenter(event);\n        const endPos = [pos[0], (pos[1] += (event.velocityY * inertia) / 2)];\n        const newMapState = this.mapState.rotate({pos: endPos});\n        this.updateViewport(\n          newMapState,\n          {\n            ...LINEAR_TRANSITION_PROPS,\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          },\n          {\n            isDragging: false,\n            isRotating: true\n          }\n        );\n        this.blockEvents(inertia);\n        return false;\n      }\n    }\n    const newMapState = this.mapState.rotateEnd();\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newMapState = this.mapState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(\n      newMapState,\n      Object.assign({}, LINEAR_TRANSITION_PROPS, {\n        transitionInterpolator: new LinearInterpolator({around: pos})\n      }),\n      {isZooming: true}\n    );\n    return true;\n  }\n\n  // Default handler for the `keydown` event\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {zoomSpeed = 2, moveSpeed = 100, rotateSpeedX = 15, rotateSpeedY = 10} = this.keyboard;\n\n    const {mapStateProps} = this;\n    let newMapState;\n\n    switch (event.srcEvent.keyCode) {\n      case 189: // -\n        if (funcKey) {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom - Math.log2(zoomSpeed) - 1});\n        } else {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom - Math.log2(zoomSpeed)});\n        }\n        break;\n      case 187: // +\n        if (funcKey) {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom + Math.log2(zoomSpeed) + 1});\n        } else {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom + Math.log2(zoomSpeed)});\n        }\n        break;\n      case 37: // left\n        if (funcKey) {\n          newMapState = this.getMapState({\n            bearing: mapStateProps.bearing - rotateSpeedX\n          });\n        } else {\n          newMapState = this.mapState.pan({pos: [moveSpeed, 0], startPos: [0, 0]});\n        }\n        break;\n      case 39: // right\n        if (funcKey) {\n          newMapState = this.getMapState({\n            bearing: mapStateProps.bearing + rotateSpeedX\n          });\n        } else {\n          newMapState = this.mapState.pan({pos: [-moveSpeed, 0], startPos: [0, 0]});\n        }\n        break;\n      case 38: // up\n        if (funcKey) {\n          newMapState = this.getMapState({pitch: mapStateProps.pitch + rotateSpeedY});\n        } else {\n          newMapState = this.mapState.pan({pos: [0, moveSpeed], startPos: [0, 0]});\n        }\n        break;\n      case 40: // down\n        if (funcKey) {\n          newMapState = this.getMapState({pitch: mapStateProps.pitch - rotateSpeedY});\n        } else {\n          newMapState = this.mapState.pan({pos: [0, -moveSpeed], startPos: [0, 0]});\n        }\n        break;\n      default:\n        return false;\n    }\n    return this.updateViewport(newMapState, LINEAR_TRANSITION_PROPS);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}