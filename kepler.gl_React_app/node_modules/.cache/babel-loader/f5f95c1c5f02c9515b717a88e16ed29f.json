{"ast":null,"code":"import Vector from './base/vector';\nimport { config, isArray } from '../lib/common';\nimport { checkNumber } from '../lib/validators';\nimport * as vec3 from 'gl-matrix/vec3';\nimport { vec3_transformMat2, vec3_transformMat4AsVector } from '../lib/gl-matrix-extras';\nconst ORIGIN = [0, 0, 0];\nlet ZERO;\nexport default class Vector3 extends Vector {\n  static get ZERO() {\n    if (!ZERO) {\n      ZERO = new Vector3(0, 0, 0);\n      Object.freeze(ZERO);\n    }\n    return ZERO;\n  }\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    super(-0, -0, -0);\n    if (arguments.length === 1 && isArray(x)) {\n      this.copy(x);\n    } else {\n      if (config.debug) {\n        checkNumber(x);\n        checkNumber(y);\n        checkNumber(z);\n      }\n      this[0] = x;\n      this[1] = y;\n      this[2] = z;\n    }\n  }\n  set(x, y, z) {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    return this.check();\n  }\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    return this.check();\n  }\n  fromObject(object) {\n    if (config.debug) {\n      checkNumber(object.x);\n      checkNumber(object.y);\n      checkNumber(object.z);\n    }\n    this[0] = object.x;\n    this[1] = object.y;\n    this[2] = object.z;\n    return this.check();\n  }\n  toObject(object) {\n    object.x = this[0];\n    object.y = this[1];\n    object.z = this[2];\n    return object;\n  }\n  get ELEMENTS() {\n    return 3;\n  }\n  get z() {\n    return this[2];\n  }\n  set z(value) {\n    this[2] = checkNumber(value);\n  }\n  angle(vector) {\n    return vec3.angle(this, vector);\n  }\n  cross(vector) {\n    vec3.cross(this, this, vector);\n    return this.check();\n  }\n  rotateX(_ref) {\n    let {\n      radians,\n      origin = ORIGIN\n    } = _ref;\n    vec3.rotateX(this, this, origin, radians);\n    return this.check();\n  }\n  rotateY(_ref2) {\n    let {\n      radians,\n      origin = ORIGIN\n    } = _ref2;\n    vec3.rotateY(this, this, origin, radians);\n    return this.check();\n  }\n  rotateZ(_ref3) {\n    let {\n      radians,\n      origin = ORIGIN\n    } = _ref3;\n    vec3.rotateZ(this, this, origin, radians);\n    return this.check();\n  }\n  transform(matrix4) {\n    return this.transformAsPoint(matrix4);\n  }\n  transformAsPoint(matrix4) {\n    vec3.transformMat4(this, this, matrix4);\n    return this.check();\n  }\n  transformAsVector(matrix4) {\n    vec3_transformMat4AsVector(this, this, matrix4);\n    return this.check();\n  }\n  transformByMatrix3(matrix3) {\n    vec3.transformMat3(this, this, matrix3);\n    return this.check();\n  }\n  transformByMatrix2(matrix2) {\n    vec3_transformMat2(this, this, matrix2);\n    return this.check();\n  }\n  transformByQuaternion(quaternion) {\n    vec3.transformQuat(this, this, quaternion);\n    return this.check();\n  }\n}","map":{"version":3,"sources":["../../../src/classes/vector3.ts"],"names":["Vector","config","isArray","checkNumber","vec3","vec3_transformMat2","vec3_transformMat4AsVector","ORIGIN","ZERO","Vector3","Object","freeze","constructor","x","y","z","arguments","length","copy","debug","set","check","array","fromObject","object","toObject","ELEMENTS","value","angle","vector","cross","rotateX","radians","origin","rotateY","rotateZ","transform","matrix4","transformAsPoint","transformMat4","transformAsVector","transformByMatrix3","matrix3","transformMat3","transformByMatrix2","matrix2","transformByQuaternion","quaternion","transformQuat"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport {NumericArray} from '@math.gl/types';\nimport Vector from './base/vector';\nimport {config, isArray} from '../lib/common';\nimport {checkNumber} from '../lib/validators';\nimport * as vec3 from 'gl-matrix/vec3';\n/* eslint-disable camelcase */\nimport {vec3_transformMat2, vec3_transformMat4AsVector} from '../lib/gl-matrix-extras';\n\nconst ORIGIN = [0, 0, 0];\n\nlet ZERO: Vector3;\n\n/**\n * Three-element vector class.\n * Subclass of Array<number>\n */\nexport default class Vector3 extends Vector {\n  static get ZERO(): Vector3 {\n    if (!ZERO) {\n      ZERO = new Vector3(0, 0, 0);\n      Object.freeze(ZERO);\n    }\n    return ZERO;\n  }\n\n  /**\n   * @class\n   * @param x\n   * @param y\n   * @param z\n   */\n  constructor(x: number | Readonly<NumericArray> = 0, y: number = 0, z: number = 0) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0);\n    if (arguments.length === 1 && isArray(x)) {\n      this.copy(x as NumericArray);\n    } else {\n      // this.set(x, y, z);\n      if (config.debug) {\n        checkNumber(x);\n        checkNumber(y);\n        checkNumber(z);\n      }\n      // @ts-expect-error TS2412: Property '0' of type 'number | [number, number, number]' is not assignable to numeric index type 'number'\n      this[0] = x;\n      this[1] = y;\n      this[2] = z;\n    }\n  }\n\n  set(x: number, y: number, z: number): this {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    return this.check();\n  }\n\n  copy(array: Readonly<NumericArray>): this {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    return this.check();\n  }\n\n  fromObject(object: {x: number; y: number; z: number}): this {\n    if (config.debug) {\n      checkNumber(object.x);\n      checkNumber(object.y);\n      checkNumber(object.z);\n    }\n    this[0] = object.x;\n    this[1] = object.y;\n    this[2] = object.z;\n    return this.check();\n  }\n\n  toObject(object: {x?: number; y?: number; z?: number}): {x: number; y: number; z: number} {\n    object.x = this[0];\n    object.y = this[1];\n    object.z = this[2];\n    return object as {x: number; y: number; z: number};\n  }\n\n  // Getters/setters\n\n  get ELEMENTS(): number {\n    return 3;\n  }\n  get z(): number {\n    return this[2];\n  }\n  set z(value: number) {\n    this[2] = checkNumber(value);\n  }\n\n  // ACCESSORS\n\n  angle(vector: Readonly<NumericArray>): number {\n    return vec3.angle(this, vector);\n  }\n\n  // MODIFIERS\n\n  cross(vector: Readonly<NumericArray>): this {\n    vec3.cross(this, this, vector);\n    return this.check();\n  }\n\n  rotateX({radians, origin = ORIGIN}: {radians: number; origin?: Readonly<NumericArray>}): this {\n    vec3.rotateX(this, this, origin, radians);\n    return this.check();\n  }\n\n  rotateY({radians, origin = ORIGIN}: {radians: number; origin?: Readonly<NumericArray>}): this {\n    vec3.rotateY(this, this, origin, radians);\n    return this.check();\n  }\n\n  rotateZ({radians, origin = ORIGIN}: {radians: number; origin?: Readonly<NumericArray>}): this {\n    vec3.rotateZ(this, this, origin, radians);\n    return this.check();\n  }\n\n  // Transforms\n\n  // transforms as point (4th component is implicitly 1)\n  transform(matrix4: Readonly<NumericArray>): this {\n    return this.transformAsPoint(matrix4);\n  }\n\n  // transforms as point (4th component is implicitly 1)\n  transformAsPoint(matrix4: Readonly<NumericArray>): this {\n    vec3.transformMat4(this, this, matrix4);\n    return this.check();\n  }\n\n  // transforms as vector  (4th component is implicitly 0, ignores translation. slightly faster)\n  transformAsVector(matrix4: Readonly<NumericArray>): this {\n    vec3_transformMat4AsVector(this, this, matrix4);\n    return this.check();\n  }\n\n  transformByMatrix3(matrix3: Readonly<NumericArray>): this {\n    vec3.transformMat3(this, this, matrix3);\n    return this.check();\n  }\n\n  transformByMatrix2(matrix2: Readonly<NumericArray>): this {\n    vec3_transformMat2(this, this, matrix2);\n    return this.check();\n  }\n\n  transformByQuaternion(quaternion: Readonly<NumericArray>): this {\n    vec3.transformQuat(this, this, quaternion);\n    return this.check();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}