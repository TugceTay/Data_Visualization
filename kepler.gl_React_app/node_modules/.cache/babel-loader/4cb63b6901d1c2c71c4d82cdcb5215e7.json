{"ast":null,"code":"export var KHR_BINARY_GLTF = 'KHR_binary_glTF';\nexport var KHR_DRACO_MESH_COMPRESSION = 'KHR_draco_mesh_compression';\nexport var KHR_LIGHTS_PUNCTUAL = 'KHR_lights_punctual';\nexport var KHR_MATERIALS_UNLIT = 'KHR_materials_unlit';\nexport var KHR_TECHNIQUES_WEBGL = 'KHR_techniques_webgl';\nexport var UBER_POINT_CLOUD_EXTENSION = 'UBER_draco_point_cloud_compression';\nvar COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\nvar BYTES = {\n  5120: 1,\n  5121: 1,\n  5122: 2,\n  5123: 2,\n  5125: 4,\n  5126: 4\n};\nexport function getBytesFromComponentType(componentType) {\n  return BYTES[componentType];\n}\nexport function getSizeFromAccessorType(type) {\n  return COMPONENTS[type];\n}\nexport function getGLEnumFromSamplerParameter(parameter) {\n  var GL_TEXTURE_MAG_FILTER = 0x2800;\n  var GL_TEXTURE_MIN_FILTER = 0x2801;\n  var GL_TEXTURE_WRAP_S = 0x2802;\n  var GL_TEXTURE_WRAP_T = 0x2803;\n  var PARAMETER_MAP = {\n    magFilter: GL_TEXTURE_MAG_FILTER,\n    minFilter: GL_TEXTURE_MIN_FILTER,\n    wrapS: GL_TEXTURE_WRAP_S,\n    wrapT: GL_TEXTURE_WRAP_T\n  };\n  return PARAMETER_MAP[parameter];\n}","map":{"version":3,"sources":["../../../src/lib/gltf-constants.js"],"names":["KHR_BINARY_GLTF","KHR_DRACO_MESH_COMPRESSION","KHR_LIGHTS_PUNCTUAL","KHR_MATERIALS_UNLIT","KHR_TECHNIQUES_WEBGL","UBER_POINT_CLOUD_EXTENSION","COMPONENTS","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","BYTES","getBytesFromComponentType","componentType","getSizeFromAccessorType","type","getGLEnumFromSamplerParameter","parameter","GL_TEXTURE_MAG_FILTER","GL_TEXTURE_MIN_FILTER","GL_TEXTURE_WRAP_S","GL_TEXTURE_WRAP_T","PARAMETER_MAP","magFilter","minFilter","wrapS","wrapT"],"mappings":"AACA,OAAO,IAAMA,eAAe,GAAG,iBAAxB;AAGP,OAAO,IAAMC,0BAA0B,GAAG,4BAAnC;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,oBAAoB,GAAG,sBAA7B;AAGP,OAAO,IAAMC,0BAA0B,GAAG,oCAAnC;AAEP,IAAMC,UAAU,GAAG;EACjBC,MAAM,EAAE,CADS;EAEjBC,IAAI,EAAE,CAFW;EAGjBC,IAAI,EAAE,CAHW;EAIjBC,IAAI,EAAE,CAJW;EAKjBC,IAAI,EAAE,CALW;EAMjBC,IAAI,EAAE,CANW;EAOjBC,IAAI,EAAE;AAPW,CAAnB;AAUA,IAAMC,KAAK,GAAG;EACZ,IAAA,EAAM,CADM;EAEZ,IAAA,EAAM,CAFM;EAGZ,IAAA,EAAM,CAHM;EAIZ,IAAA,EAAM,CAJM;EAKZ,IAAA,EAAM,CALM;EAMZ,IAAA,EAAM;AANM,CAAd;AAWA,OAAO,SAASC,yBAAT,CAAmCC,aAAnC,EAAkD;EACvD,OAAOF,KAAK,CAACE,aAAD,CAAZ;AACD;AAED,OAAO,SAASC,uBAAT,CAAiCC,IAAjC,EAAuC;EAC5C,OAAOZ,UAAU,CAACY,IAAD,CAAjB;AACD;AAED,OAAO,SAASC,6BAAT,CAAuCC,SAAvC,EAAkD;EACvD,IAAMC,qBAAqB,GAAG,MAA9B;EACA,IAAMC,qBAAqB,GAAG,MAA9B;EACA,IAAMC,iBAAiB,GAAG,MAA1B;EACA,IAAMC,iBAAiB,GAAG,MAA1B;EAEA,IAAMC,aAAa,GAAG;IACpBC,SAAS,EAAEL,qBADS;IAEpBM,SAAS,EAAEL,qBAFS;IAGpBM,KAAK,EAAEL,iBAHa;IAIpBM,KAAK,EAAEL;EAJa,CAAtB;EAOA,OAAOC,aAAa,CAACL,SAAD,CAApB;AACD","sourcesContent":["// GLTF 1.0 extensions\nexport const KHR_BINARY_GLTF = 'KHR_binary_glTF';\n\n// GLTF 2.0 extensions\nexport const KHR_DRACO_MESH_COMPRESSION = 'KHR_draco_mesh_compression';\nexport const KHR_LIGHTS_PUNCTUAL = 'KHR_lights_punctual';\nexport const KHR_MATERIALS_UNLIT = 'KHR_materials_unlit';\nexport const KHR_TECHNIQUES_WEBGL = 'KHR_techniques_webgl';\n\n// Ideally we should just use KHR_draco_mesh_compression, but it does not support point clouds\nexport const UBER_POINT_CLOUD_EXTENSION = 'UBER_draco_point_cloud_compression';\n\nconst COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\n\nconst BYTES = {\n  5120: 1, // BYTE\n  5121: 1, // UNSIGNED_BYTE\n  5122: 2, // SHORT\n  5123: 2, // UNSIGNED_SHORT\n  5125: 4, // UNSIGNED_INT\n  5126: 4 // FLOAT\n};\n\n// ENUM LOOKUP\n\nexport function getBytesFromComponentType(componentType) {\n  return BYTES[componentType];\n}\n\nexport function getSizeFromAccessorType(type) {\n  return COMPONENTS[type];\n}\n\nexport function getGLEnumFromSamplerParameter(parameter) {\n  const GL_TEXTURE_MAG_FILTER = 0x2800;\n  const GL_TEXTURE_MIN_FILTER = 0x2801;\n  const GL_TEXTURE_WRAP_S = 0x2802;\n  const GL_TEXTURE_WRAP_T = 0x2803;\n\n  const PARAMETER_MAP = {\n    magFilter: GL_TEXTURE_MAG_FILTER,\n    minFilter: GL_TEXTURE_MIN_FILTER,\n    wrapS: GL_TEXTURE_WRAP_S,\n    wrapT: GL_TEXTURE_WRAP_T\n  };\n\n  return PARAMETER_MAP[parameter];\n}\n"]},"metadata":{},"sourceType":"module"}