{"ast":null,"code":"import { Matrix4 } from '@math.gl/core';\nimport { log } from '@luma.gl/webgl';\nimport ScenegraphNode from './scenegraph-node';\nexport default class GroupNode extends ScenegraphNode {\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    props = Array.isArray(props) ? {\n      children: props\n    } : props;\n    const {\n      children = []\n    } = props;\n    log.assert(children.every(child => child instanceof ScenegraphNode), 'every child must an instance of ScenegraphNode');\n    super(props);\n    this.children = children;\n  }\n  add() {\n    for (var _len = arguments.length, children = new Array(_len), _key = 0; _key < _len; _key++) {\n      children[_key] = arguments[_key];\n    }\n    for (const child of children) {\n      if (Array.isArray(child)) {\n        this.add(...child);\n      } else {\n        this.children.push(child);\n      }\n    }\n    return this;\n  }\n  remove(child) {\n    const children = this.children;\n    const indexOf = children.indexOf(child);\n    if (indexOf > -1) {\n      children.splice(indexOf, 1);\n    }\n    return this;\n  }\n  removeAll() {\n    this.children = [];\n    return this;\n  }\n  delete() {\n    this.children.forEach(child => child.delete());\n    this.removeAll();\n    super.delete();\n  }\n  traverse(visitor) {\n    let {\n      worldMatrix = new Matrix4()\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const modelMatrix = new Matrix4(worldMatrix).multiplyRight(this.matrix);\n    for (const child of this.children) {\n      if (child instanceof GroupNode) {\n        child.traverse(visitor, {\n          worldMatrix: modelMatrix\n        });\n      } else {\n        visitor(child, {\n          worldMatrix: modelMatrix\n        });\n      }\n    }\n  }\n}","map":{"version":3,"sources":["../../../src/scenegraph/group-node.js"],"names":["Matrix4","log","ScenegraphNode","GroupNode","constructor","props","isArray","children","assert","every","child","add","Array","push","remove","indexOf","splice","removeAll","delete","forEach","traverse","visitor","worldMatrix","modelMatrix","multiplyRight","matrix"],"mappings":"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","sourcesContent":["import {Matrix4} from '@math.gl/core';\nimport {log} from '@luma.gl/webgl';\nimport ScenegraphNode from './scenegraph-node';\n\nexport default class GroupNode extends ScenegraphNode {\n  constructor(props = {}) {\n    props = Array.isArray(props) ? {children: props} : props;\n    const {children = []} = props;\n    log.assert(\n      children.every(child => child instanceof ScenegraphNode),\n      'every child must an instance of ScenegraphNode'\n    );\n    super(props);\n    this.children = children;\n  }\n\n  // Unpacks arrays and nested arrays of children\n  add(...children) {\n    for (const child of children) {\n      if (Array.isArray(child)) {\n        this.add(...child);\n      } else {\n        this.children.push(child);\n      }\n    }\n    return this;\n  }\n\n  remove(child) {\n    const children = this.children;\n    const indexOf = children.indexOf(child);\n    if (indexOf > -1) {\n      children.splice(indexOf, 1);\n    }\n    return this;\n  }\n\n  removeAll() {\n    this.children = [];\n    return this;\n  }\n\n  delete() {\n    this.children.forEach(child => child.delete());\n    this.removeAll();\n    super.delete();\n  }\n\n  traverse(visitor, {worldMatrix = new Matrix4()} = {}) {\n    const modelMatrix = new Matrix4(worldMatrix).multiplyRight(this.matrix);\n\n    for (const child of this.children) {\n      if (child instanceof GroupNode) {\n        child.traverse(visitor, {worldMatrix: modelMatrix});\n      } else {\n        visitor(child, {worldMatrix: modelMatrix});\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}