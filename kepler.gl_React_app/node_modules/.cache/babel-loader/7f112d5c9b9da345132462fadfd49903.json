{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport TransitionManager from './transition-manager';\nimport assert from '../utils/assert';\nvar NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nvar ZOOM_ACCEL = 0.01;\nvar EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\nvar Controller = function () {\n  function Controller(ControllerState) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Controller);\n    assert(ControllerState);\n    this.ControllerState = ControllerState;\n    this.controllerState = null;\n    this.controllerStateProps = null;\n    this.eventManager = null;\n    this.transitionManager = new TransitionManager(ControllerState, options);\n    this._events = null;\n    this._state = {\n      isDragging: false\n    };\n    this._customEvents = [];\n    this.onViewStateChange = null;\n    this.onStateChange = null;\n    this.invertPan = false;\n    this.handleEvent = this.handleEvent.bind(this);\n    this.setProps(options);\n  }\n  _createClass(Controller, [{\n    key: \"finalize\",\n    value: function finalize() {\n      for (var eventName in this._events) {\n        if (this._events[eventName]) {\n          this.eventManager.off(eventName, this.handleEvent);\n        }\n      }\n      this.transitionManager.finalize();\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(event) {\n      var ControllerState = this.ControllerState;\n      this.controllerState = new ControllerState(_objectSpread({\n        makeViewport: this.makeViewport\n      }, this.controllerStateProps, {}, this._state));\n      switch (event.type) {\n        case 'panstart':\n          return this._onPanStart(event);\n        case 'panmove':\n          return this._onPan(event);\n        case 'panend':\n          return this._onPanEnd(event);\n        case 'pinchstart':\n          return this._onPinchStart(event);\n        case 'pinchmove':\n          return this._onPinch(event);\n        case 'pinchend':\n          return this._onPinchEnd(event);\n        case 'doubletap':\n          return this._onDoubleTap(event);\n        case 'wheel':\n          return this._onWheel(event);\n        case 'keydown':\n          return this._onKeyDown(event);\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter(event) {\n      var _this$controllerState = this.controllerStateProps,\n        x = _this$controllerState.x,\n        y = _this$controllerState.y;\n      var offsetCenter = event.offsetCenter;\n      return [offsetCenter.x - x, offsetCenter.y - y];\n    }\n  }, {\n    key: \"isPointInBounds\",\n    value: function isPointInBounds(pos, event) {\n      var _this$controllerState2 = this.controllerStateProps,\n        width = _this$controllerState2.width,\n        height = _this$controllerState2.height;\n      if (event && event.handled) {\n        return false;\n      }\n      var inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n      if (inside && event) {\n        event.stopPropagation();\n      }\n      return inside;\n    }\n  }, {\n    key: \"isFunctionKeyPressed\",\n    value: function isFunctionKeyPressed(event) {\n      var srcEvent = event.srcEvent;\n      return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n    }\n  }, {\n    key: \"isDragging\",\n    value: function isDragging() {\n      return this._state.isDragging;\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      if ('onViewStateChange' in props) {\n        this.onViewStateChange = props.onViewStateChange;\n      }\n      if ('onStateChange' in props) {\n        this.onStateChange = props.onStateChange;\n      }\n      if ('makeViewport' in props) {\n        this.makeViewport = props.makeViewport;\n      }\n      this.controllerStateProps = props;\n      if ('eventManager' in props && this.eventManager !== props.eventManager) {\n        this.eventManager = props.eventManager;\n        this._events = {};\n        this.toggleEvents(this._customEvents, true);\n      }\n      this.transitionManager.processViewStateChange(this.controllerStateProps);\n      var _props$scrollZoom = props.scrollZoom,\n        scrollZoom = _props$scrollZoom === void 0 ? true : _props$scrollZoom,\n        _props$dragPan = props.dragPan,\n        dragPan = _props$dragPan === void 0 ? true : _props$dragPan,\n        _props$dragRotate = props.dragRotate,\n        dragRotate = _props$dragRotate === void 0 ? true : _props$dragRotate,\n        _props$doubleClickZoo = props.doubleClickZoom,\n        doubleClickZoom = _props$doubleClickZoo === void 0 ? true : _props$doubleClickZoo,\n        _props$touchZoom = props.touchZoom,\n        touchZoom = _props$touchZoom === void 0 ? true : _props$touchZoom,\n        _props$touchRotate = props.touchRotate,\n        touchRotate = _props$touchRotate === void 0 ? false : _props$touchRotate,\n        _props$keyboard = props.keyboard,\n        keyboard = _props$keyboard === void 0 ? true : _props$keyboard;\n      var isInteractive = Boolean(this.onViewStateChange);\n      this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n      this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n      this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n      this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n      this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n      this.scrollZoom = scrollZoom;\n      this.dragPan = dragPan;\n      this.dragRotate = dragRotate;\n      this.doubleClickZoom = doubleClickZoom;\n      this.touchZoom = touchZoom;\n      this.touchRotate = touchRotate;\n      this.keyboard = keyboard;\n    }\n  }, {\n    key: \"updateTransition\",\n    value: function updateTransition() {\n      this.transitionManager.updateTransition();\n    }\n  }, {\n    key: \"toggleEvents\",\n    value: function toggleEvents(eventNames, enabled) {\n      var _this = this;\n      if (this.eventManager) {\n        eventNames.forEach(function (eventName) {\n          if (_this._events[eventName] !== enabled) {\n            _this._events[eventName] = enabled;\n            if (enabled) {\n              _this.eventManager.on(eventName, _this.handleEvent);\n            } else {\n              _this.eventManager.off(eventName, _this.handleEvent);\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"updateViewport\",\n    value: function updateViewport(newControllerState) {\n      var extraProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var interactionState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var viewState = Object.assign({}, newControllerState.getViewportProps(), extraProps);\n      var changed = this.controllerState !== newControllerState;\n      if (changed) {\n        var oldViewState = this.controllerState ? this.controllerState.getViewportProps() : null;\n        if (this.onViewStateChange) {\n          this.onViewStateChange({\n            viewState: viewState,\n            interactionState: interactionState,\n            oldViewState: oldViewState\n          });\n        }\n      }\n      Object.assign(this._state, newControllerState.getInteractiveState(), interactionState);\n      if (this.onStateChange) {\n        this.onStateChange(this._state);\n      }\n    }\n  }, {\n    key: \"_onPanStart\",\n    value: function _onPanStart(event) {\n      var pos = this.getCenter(event);\n      if (!this.isPointInBounds(pos, event)) {\n        return false;\n      }\n      var newControllerState = this.controllerState.panStart({\n        pos: pos\n      }).rotateStart({\n        pos: pos\n      });\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPan\",\n    value: function _onPan(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n      var alternateMode = this.isFunctionKeyPressed(event) || event.rightButton;\n      alternateMode = this.invertPan ? !alternateMode : alternateMode;\n      return alternateMode ? this._onPanMove(event) : this._onPanRotate(event);\n    }\n  }, {\n    key: \"_onPanEnd\",\n    value: function _onPanEnd(event) {\n      var newControllerState = this.controllerState.panEnd().rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false,\n        isRotating: false\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPanMove\",\n    value: function _onPanMove(event) {\n      if (!this.dragPan) {\n        return false;\n      }\n      var pos = this.getCenter(event);\n      var newControllerState = this.controllerState.pan({\n        pos: pos\n      });\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true,\n        isPanning: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPanRotate\",\n    value: function _onPanRotate(event) {\n      if (!this.dragRotate) {\n        return false;\n      }\n      var deltaX = event.deltaX,\n        deltaY = event.deltaY;\n      var _this$controllerState3 = this.controllerState.getViewportProps(),\n        width = _this$controllerState3.width,\n        height = _this$controllerState3.height;\n      var deltaScaleX = deltaX / width;\n      var deltaScaleY = deltaY / height;\n      var newControllerState = this.controllerState.rotate({\n        deltaScaleX: deltaScaleX,\n        deltaScaleY: deltaScaleY\n      });\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true,\n        isRotating: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onWheel\",\n    value: function _onWheel(event) {\n      if (!this.scrollZoom) {\n        return false;\n      }\n      event.preventDefault();\n      var pos = this.getCenter(event);\n      if (!this.isPointInBounds(pos, event)) {\n        return false;\n      }\n      var delta = event.delta;\n      var scale = 2 / (1 + Math.exp(-Math.abs(delta * ZOOM_ACCEL)));\n      if (delta < 0 && scale !== 0) {\n        scale = 1 / scale;\n      }\n      var newControllerState = this.controllerState.zoom({\n        pos: pos,\n        scale: scale\n      });\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isZooming: true,\n        isPanning: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPinchStart\",\n    value: function _onPinchStart(event) {\n      var pos = this.getCenter(event);\n      if (!this.isPointInBounds(pos, event)) {\n        return false;\n      }\n      var newControllerState = this.controllerState.zoomStart({\n        pos: pos\n      }).rotateStart({\n        pos: pos\n      });\n      this._state.startPinchRotation = event.rotation;\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPinch\",\n    value: function _onPinch(event) {\n      if (!this.touchZoom && !this.touchRotate) {\n        return false;\n      }\n      if (!this.isDragging()) {\n        return false;\n      }\n      var newControllerState = this.controllerState;\n      if (this.touchZoom) {\n        var scale = event.scale;\n        var pos = this.getCenter(event);\n        newControllerState = newControllerState.zoom({\n          pos: pos,\n          scale: scale\n        });\n      }\n      if (this.touchRotate) {\n        var rotation = event.rotation;\n        var startPinchRotation = this._state.startPinchRotation;\n        newControllerState = newControllerState.rotate({\n          deltaScaleX: -(rotation - startPinchRotation) / 180\n        });\n      }\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true,\n        isPanning: this.touchZoom,\n        isZooming: this.touchZoom,\n        isRotating: this.touchRotate\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPinchEnd\",\n    value: function _onPinchEnd(event) {\n      var newControllerState = this.controllerState.zoomEnd().rotateEnd();\n      this._state.startPinchRotation = 0;\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false,\n        isZooming: false,\n        isRotating: false\n      });\n      return true;\n    }\n  }, {\n    key: \"_onDoubleTap\",\n    value: function _onDoubleTap(event) {\n      if (!this.doubleClickZoom) {\n        return false;\n      }\n      var pos = this.getCenter(event);\n      if (!this.isPointInBounds(pos, event)) {\n        return false;\n      }\n      var isZoomOut = this.isFunctionKeyPressed(event);\n      var newControllerState = this.controllerState.zoom({\n        pos: pos,\n        scale: isZoomOut ? 0.5 : 2\n      });\n      this.updateViewport(newControllerState, this._getTransitionProps(), {\n        isZooming: true,\n        isPanning: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onKeyDown\",\n    value: function _onKeyDown(event) {\n      if (!this.keyboard) {\n        return false;\n      }\n      var funcKey = this.isFunctionKeyPressed(event);\n      var controllerState = this.controllerState;\n      var newControllerState;\n      var interactionState = {};\n      switch (event.srcEvent.keyCode) {\n        case 189:\n          newControllerState = funcKey ? controllerState.zoomOut().zoomOut() : controllerState.zoomOut();\n          interactionState.isZooming = true;\n          break;\n        case 187:\n          newControllerState = funcKey ? controllerState.zoomIn().zoomIn() : controllerState.zoomIn();\n          interactionState.isZooming = true;\n          break;\n        case 37:\n          if (funcKey) {\n            newControllerState = controllerState.rotateLeft();\n            interactionState.isRotating = true;\n          } else {\n            newControllerState = controllerState.moveLeft();\n            interactionState.isPanning = true;\n          }\n          break;\n        case 39:\n          if (funcKey) {\n            newControllerState = controllerState.rotateRight();\n            interactionState.isRotating = true;\n          } else {\n            newControllerState = controllerState.moveRight();\n            interactionState.isPanning = true;\n          }\n          break;\n        case 38:\n          if (funcKey) {\n            newControllerState = controllerState.rotateUp();\n            interactionState.isRotating = true;\n          } else {\n            newControllerState = controllerState.moveUp();\n            interactionState.isPanning = true;\n          }\n          break;\n        case 40:\n          if (funcKey) {\n            newControllerState = controllerState.rotateDown();\n            interactionState.isRotating = true;\n          } else {\n            newControllerState = controllerState.moveDown();\n            interactionState.isPanning = true;\n          }\n          break;\n        default:\n          return false;\n      }\n      this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n      return true;\n    }\n  }, {\n    key: \"_getTransitionProps\",\n    value: function _getTransitionProps() {\n      return NO_TRANSITION_PROPS;\n    }\n  }, {\n    key: \"events\",\n    set: function set(customEvents) {\n      this.toggleEvents(this._customEvents, false);\n      this.toggleEvents(customEvents, true);\n      this._customEvents = customEvents;\n      this.setProps(this.controllerStateProps);\n    }\n  }]);\n  return Controller;\n}();\nexport { Controller as default };","map":{"version":3,"sources":["../../../src/controllers/controller.js"],"names":["TransitionManager","assert","NO_TRANSITION_PROPS","transitionDuration","ZOOM_ACCEL","EVENT_TYPES","WHEEL","PAN","PINCH","DOUBLE_TAP","KEYBOARD","Controller","ControllerState","options","controllerState","controllerStateProps","eventManager","transitionManager","_events","_state","isDragging","_customEvents","onViewStateChange","onStateChange","invertPan","handleEvent","bind","setProps","customEvents","toggleEvents","eventName","off","finalize","event","makeViewport","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onDoubleTap","_onWheel","_onKeyDown","x","y","offsetCenter","pos","width","height","handled","inside","stopPropagation","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","props","processViewStateChange","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","isInteractive","updateTransition","eventNames","enabled","forEach","on","newControllerState","extraProps","interactionState","viewState","Object","assign","getViewportProps","changed","oldViewState","getInteractiveState","getCenter","isPointInBounds","panStart","rotateStart","updateViewport","alternateMode","isFunctionKeyPressed","rightButton","_onPanMove","_onPanRotate","panEnd","rotateEnd","isPanning","isRotating","pan","deltaX","deltaY","deltaScaleX","deltaScaleY","rotate","preventDefault","delta","scale","Math","exp","abs","zoom","isZooming","zoomStart","startPinchRotation","rotation","zoomEnd","isZoomOut","_getTransitionProps","funcKey","keyCode","zoomOut","zoomIn","rotateLeft","moveLeft","rotateRight","moveRight","rotateUp","moveUp","rotateDown","moveDown"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport TransitionManager from './transition-manager';\nimport assert from '../utils/assert';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\n\n// EVENT HANDLING PARAMETERS\nconst ZOOM_ACCEL = 0.01;\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\nexport default class Controller {\n  constructor(ControllerState, options = {}) {\n    assert(ControllerState);\n    this.ControllerState = ControllerState;\n    this.controllerState = null;\n    this.controllerStateProps = null;\n    this.eventManager = null;\n    this.transitionManager = new TransitionManager(ControllerState, options);\n    this._events = null;\n    this._state = {\n      isDragging: false\n    };\n    this._customEvents = [];\n    this.onViewStateChange = null;\n    this.onStateChange = null;\n    this.invertPan = false;\n\n    this.handleEvent = this.handleEvent.bind(this);\n\n    this.setProps(options);\n  }\n\n  set events(customEvents) {\n    this.toggleEvents(this._customEvents, false);\n    this.toggleEvents(customEvents, true);\n    this._customEvents = customEvents;\n    // Make sure default events are not overwritten\n    this.setProps(this.controllerStateProps);\n  }\n\n  finalize() {\n    for (const eventName in this._events) {\n      if (this._events[eventName]) {\n        this.eventManager.off(eventName, this.handleEvent);\n      }\n    }\n    this.transitionManager.finalize();\n  }\n\n  /**\n   * Callback for events\n   * @param {hammer.Event} event\n   */\n  handleEvent(event) {\n    const {ControllerState} = this;\n    this.controllerState = new ControllerState({\n      makeViewport: this.makeViewport,\n      ...this.controllerStateProps,\n      ...this._state\n    });\n\n    switch (event.type) {\n      case 'panstart':\n        return this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event) {\n    const {x, y} = this.controllerStateProps;\n    const {offsetCenter} = event;\n    return [offsetCenter.x - x, offsetCenter.y - y];\n  }\n\n  isPointInBounds(pos, event) {\n    const {width, height} = this.controllerStateProps;\n    if (event && event.handled) {\n      return false;\n    }\n\n    const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n    if (inside && event) {\n      event.stopPropagation();\n    }\n    return inside;\n  }\n\n  isFunctionKeyPressed(event) {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  isDragging() {\n    return this._state.isDragging;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  /* eslint-disable complexity, max-statements */\n  setProps(props) {\n    if ('onViewStateChange' in props) {\n      this.onViewStateChange = props.onViewStateChange;\n    }\n    if ('onStateChange' in props) {\n      this.onStateChange = props.onStateChange;\n    }\n    if ('makeViewport' in props) {\n      this.makeViewport = props.makeViewport;\n    }\n    this.controllerStateProps = props;\n\n    if ('eventManager' in props && this.eventManager !== props.eventManager) {\n      // EventManager has changed\n      this.eventManager = props.eventManager;\n      this._events = {};\n      this.toggleEvents(this._customEvents, true);\n    }\n\n    this.transitionManager.processViewStateChange(this.controllerStateProps);\n\n    // TODO - make sure these are not reset on every setProps\n    const {\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = props;\n\n    // Register/unregister events\n    const isInteractive = Boolean(this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n  /* eslint-enable complexity, max-statements */\n\n  updateTransition() {\n    this.transitionManager.updateTransition();\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  // Private Methods\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newControllerState, extraProps = {}, interactionState = {}) {\n    const viewState = Object.assign({}, newControllerState.getViewportProps(), extraProps);\n\n    // TODO - to restore diffing, we need to include interactionState\n    const changed = this.controllerState !== newControllerState;\n    // const oldViewState = this.controllerState.getViewportProps();\n    // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);\n\n    if (changed) {\n      const oldViewState = this.controllerState ? this.controllerState.getViewportProps() : null;\n      if (this.onViewStateChange) {\n        this.onViewStateChange({viewState, interactionState, oldViewState});\n      }\n    }\n\n    Object.assign(this._state, newControllerState.getInteractiveState(), interactionState);\n\n    if (this.onStateChange) {\n      this.onStateChange(this._state);\n    }\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    const newControllerState = this.controllerState.panStart({pos}).rotateStart({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` event.\n  _onPan(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton;\n    alternateMode = this.invertPan ? !alternateMode : alternateMode;\n    return alternateMode ? this._onPanMove(event) : this._onPanRotate(event);\n  }\n\n  // Default handler for the `panend` event.\n  _onPanEnd(event) {\n    const newControllerState = this.controllerState.panEnd().rotateEnd();\n    this.updateViewport(newControllerState, null, {\n      isDragging: false,\n      isPanning: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.pan({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const {deltaX, deltaY} = event;\n    const {width, height} = this.controllerState.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    const deltaScaleY = deltaY / height;\n\n    const newControllerState = this.controllerState.rotate({deltaScaleX, deltaScaleY});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n    event.preventDefault();\n\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * ZOOM_ACCEL)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newControllerState = this.controllerState.zoom({pos, scale});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isZooming: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const newControllerState = this.controllerState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._state.startPinchRotation = event.rotation;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinch` event.\n  _onPinch(event) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    let newControllerState = this.controllerState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newControllerState = newControllerState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      const {startPinchRotation} = this._state;\n      newControllerState = newControllerState.rotate({\n        deltaScaleX: -(rotation - startPinchRotation) / 180\n      });\n    }\n\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: this.touchZoom,\n      isZooming: this.touchZoom,\n      isRotating: this.touchRotate\n    });\n    return true;\n  }\n\n  // Default handler for the `pinchend` event.\n  _onPinchEnd(event) {\n    const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n    this._state.startPinchRotation = 0;\n    this.updateViewport(newControllerState, null, {\n      isDragging: false,\n      isPanning: false,\n      isZooming: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newControllerState = this.controllerState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(newControllerState, this._getTransitionProps(), {\n      isZooming: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  /* eslint-disable complexity, max-statements */\n  // Default handler for the `keydown` event\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {controllerState} = this;\n    let newControllerState;\n    const interactionState = {};\n\n    switch (event.srcEvent.keyCode) {\n      case 189: // -\n        newControllerState = funcKey\n          ? controllerState.zoomOut().zoomOut()\n          : controllerState.zoomOut();\n        interactionState.isZooming = true;\n        break;\n      case 187: // +\n        newControllerState = funcKey ? controllerState.zoomIn().zoomIn() : controllerState.zoomIn();\n        interactionState.isZooming = true;\n        break;\n      case 37: // left\n        if (funcKey) {\n          newControllerState = controllerState.rotateLeft();\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveLeft();\n          interactionState.isPanning = true;\n        }\n        break;\n      case 39: // right\n        if (funcKey) {\n          newControllerState = controllerState.rotateRight();\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveRight();\n          interactionState.isPanning = true;\n        }\n        break;\n      case 38: // up\n        if (funcKey) {\n          newControllerState = controllerState.rotateUp();\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveUp();\n          interactionState.isPanning = true;\n        }\n        break;\n      case 40: // down\n        if (funcKey) {\n          newControllerState = controllerState.rotateDown();\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveDown();\n          interactionState.isPanning = true;\n        }\n        break;\n      default:\n        return false;\n    }\n    this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n    return true;\n  }\n  /* eslint-enable complexity */\n\n  _getTransitionProps() {\n    // Transitions on double-tap and key-down are only supported by MapController\n    return NO_TRANSITION_PROPS;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}