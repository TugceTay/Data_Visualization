{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isLoaderObject } from '../loader-utils/normalize-loader';\nimport { getFetchFunction } from '../loader-utils/option-utils';\nimport { parseInBatches } from './parse-in-batches';\nexport function loadInBatches(files, loaders, options) {\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    options = loaders;\n    loaders = null;\n  }\n  var fetch = getFetchFunction(options || {});\n  if (!Array.isArray(files)) {\n    return loadOneFileInBatches(files, loaders, options, fetch);\n  }\n  var promises = files.map(function (file) {\n    return loadOneFileInBatches(file, loaders, options, fetch);\n  });\n  return promises;\n}\nfunction loadOneFileInBatches(_x, _x2, _x3, _x4) {\n  return _loadOneFileInBatches.apply(this, arguments);\n}\nfunction _loadOneFileInBatches() {\n  _loadOneFileInBatches = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(file, loaders, options, fetch) {\n    var url, response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof file === 'string')) {\n              _context.next = 8;\n              break;\n            }\n            url = file;\n            _context.next = 4;\n            return fetch(url);\n          case 4:\n            response = _context.sent;\n            _context.next = 7;\n            return parseInBatches(response, loaders, options);\n          case 7:\n            return _context.abrupt(\"return\", _context.sent);\n          case 8:\n            _context.next = 10;\n            return parseInBatches(file, loaders, options);\n          case 10:\n            return _context.abrupt(\"return\", _context.sent);\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadOneFileInBatches.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/api/load-in-batches.js"],"names":["isLoaderObject","getFetchFunction","parseInBatches","loadInBatches","files","loaders","options","Array","isArray","fetch","loadOneFileInBatches","promises","map","file","url","response"],"mappings":";;AAAA,SAAQA,cAAR,QAA6B,kCAA7B;AACA,SAAQC,gBAAR,QAA+B,8BAA/B;AAEA,SAAQC,cAAR,QAA6B,oBAA7B;AAGA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,OAA9B,EAAuCC,OAAvC,EAAgD;EAErD,IAAI,CAACC,KAAK,CAACC,OAAND,CAAcF,OAAdE,CAAD,IAA2B,CAACP,cAAc,CAACK,OAAD,CAA9C,EAAyD;IACvDC,OAAO,GAAGD,OAAVC;IACAD,OAAO,GAAG,IAAVA;EACD;EAGD,IAAMI,KAAK,GAAGR,gBAAgB,CAACK,OAAO,IAAI,CAAA,CAAZ,CAA9B;EAGA,IAAI,CAACC,KAAK,CAACC,OAAND,CAAcH,KAAdG,CAAL,EAA2B;IACzB,OAAOG,oBAAoB,CAACN,KAAD,EAAQC,OAAR,EAAiBC,OAAjB,EAA0BG,KAA1B,CAA3B;EACD;EAGD,IAAME,QAAQ,GAAG,KAAK,CAACC,GAAN,CAAU,UAAA,IAAI,EAAA;IAAA,OAAIF,oBAAoB,CAACG,IAAD,EAAOR,OAAP,EAAgBC,OAAhB,EAAyBG,KAAzB,CAAxB;EAAA,CAAd,CAAjB;EAGA,OAAOE,QAAP;AACD;SAEcD,oB;;;;qEAAf,SAAA,OAAA,CAAoCG,IAApC,EAA0CR,OAA1C,EAAmDC,OAAnD,EAA4DG,KAA5D,EAAA;IAAA,IAAA,GAAA,EAAA,QAAA;IAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YAAA,IAAA,EACM,OAAOI,IAAP,KAAgB,QADtB,CAAA,EAAA;cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;cAAA;YAAA;YAEUC,GAFV,GAEgBD,IAFhB;YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OAG2BJ,KAAK,CAACK,GAAD,CAHhC;UAAA,KAAA,CAAA;YAGUC,QAHV,GAAA,QAAA,CAAA,IAAA;YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OAIiBb,cAAc,CAACa,QAAD,EAAWV,OAAX,EAAoBC,OAApB,CAJ/B;UAAA,KAAA,CAAA;YAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,QAAA,CAAA,IAAA,CAAA;UAAA,KAAA,CAAA;YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;YAAA,OAMeJ,cAAc,CAACW,IAAD,EAAOR,OAAP,EAAgBC,OAAhB,CAN7B;UAAA,KAAA,EAAA;YAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,QAAA,CAAA,IAAA,CAAA;UAAA,KAAA,EAAA;UAAA,KAAA,KAAA;YAAA,OAAA,QAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,OAAA,CAAA;EAAA,C","sourcesContent":["import {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {getFetchFunction} from '../loader-utils/option-utils';\n\nimport {parseInBatches} from './parse-in-batches';\n\n// Note returns promise or list of promises\nexport function loadInBatches(files, loaders, options) {\n  // Signature: load(url, options)\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    options = loaders;\n    loaders = null;\n  }\n\n  // Select fetch function\n  const fetch = getFetchFunction(options || {});\n\n  // Single url/file\n  if (!Array.isArray(files)) {\n    return loadOneFileInBatches(files, loaders, options, fetch);\n  }\n\n  // Multiple URLs / files\n  const promises = files.map(file => loadOneFileInBatches(file, loaders, options, fetch));\n\n  // No point in waiting here for all responses before starting to stream individual streams?\n  return promises;\n}\n\nasync function loadOneFileInBatches(file, loaders, options, fetch) {\n  if (typeof file === 'string') {\n    const url = file;\n    const response = await fetch(url);\n    return await parseInBatches(response, loaders, options);\n  }\n  return await parseInBatches(file, loaders, options);\n}\n"]},"metadata":{},"sourceType":"module"}