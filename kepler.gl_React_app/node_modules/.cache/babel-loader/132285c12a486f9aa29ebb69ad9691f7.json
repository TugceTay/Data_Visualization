{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { CompositeLayer, createIterable, log } from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nimport { replaceInRange } from '../utils';\nvar defaultLineColor = [0, 0, 0, 255];\nvar defaultFillColor = [0, 0, 0, 255];\nvar defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n  _normalize: true,\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n  getPolygon: {\n    type: 'accessor',\n    value: function value(f) {\n      return f.polygon;\n    }\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: defaultFillColor\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: defaultLineColor\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  material: true\n};\nvar PolygonLayer = function (_CompositeLayer) {\n  _inherits(PolygonLayer, _CompositeLayer);\n  function PolygonLayer() {\n    _classCallCheck(this, PolygonLayer);\n    return _possibleConstructorReturn(this, _getPrototypeOf(PolygonLayer).apply(this, arguments));\n  }\n  _createClass(PolygonLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        paths: []\n      };\n      if (this.props.getLineDashArray) {\n        log.removed('getLineDashArray', 'PathStyleExtension')();\n      }\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var _this = this;\n      var oldProps = _ref.oldProps,\n        props = _ref.props,\n        changeFlags = _ref.changeFlags;\n      var geometryChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon);\n      if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n        var paths = this.state.paths.slice();\n        var pathsDiff = changeFlags.dataChanged.map(function (dataRange) {\n          return replaceInRange({\n            data: paths,\n            getIndex: function getIndex(p) {\n              return p.__source.index;\n            },\n            dataRange: dataRange,\n            replace: _this._getPaths(dataRange)\n          });\n        });\n        this.setState({\n          paths: paths,\n          pathsDiff: pathsDiff\n        });\n      } else if (geometryChanged) {\n        this.setState({\n          paths: this._getPaths(),\n          pathsDiff: null\n        });\n      }\n    }\n  }, {\n    key: \"_getPaths\",\n    value: function _getPaths() {\n      var dataRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _this$props = this.props,\n        data = _this$props.data,\n        getPolygon = _this$props.getPolygon,\n        positionFormat = _this$props.positionFormat,\n        _normalize = _this$props._normalize;\n      var paths = [];\n      var positionSize = positionFormat === 'XY' ? 2 : 3;\n      var startRow = dataRange.startRow,\n        endRow = dataRange.endRow;\n      var _createIterable = createIterable(data, startRow, endRow),\n        iterable = _createIterable.iterable,\n        objectInfo = _createIterable.objectInfo;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n      try {\n        for (var _iterator = iterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var object = _step.value;\n          objectInfo.index++;\n          var polygon = getPolygon(object, objectInfo);\n          if (_normalize) {\n            polygon = Polygon.normalize(polygon, positionSize);\n          }\n          var _polygon = polygon,\n            holeIndices = _polygon.holeIndices;\n          var positions = polygon.positions || polygon;\n          if (holeIndices) {\n            for (var i = 0; i <= holeIndices.length; i++) {\n              var path = positions.slice(holeIndices[i - 1] || 0, holeIndices[i] || positions.length);\n              paths.push(this.getSubLayerRow({\n                path: path\n              }, object, objectInfo.index));\n            }\n          } else {\n            paths.push(this.getSubLayerRow({\n              path: positions\n            }, object, objectInfo.index));\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n      return paths;\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props2 = this.props,\n        data = _this$props2.data,\n        _dataDiff = _this$props2._dataDiff,\n        stroked = _this$props2.stroked,\n        filled = _this$props2.filled,\n        extruded = _this$props2.extruded,\n        wireframe = _this$props2.wireframe,\n        _normalize = _this$props2._normalize,\n        elevationScale = _this$props2.elevationScale,\n        transitions = _this$props2.transitions,\n        positionFormat = _this$props2.positionFormat;\n      var _this$props3 = this.props,\n        lineWidthUnits = _this$props3.lineWidthUnits,\n        lineWidthScale = _this$props3.lineWidthScale,\n        lineWidthMinPixels = _this$props3.lineWidthMinPixels,\n        lineWidthMaxPixels = _this$props3.lineWidthMaxPixels,\n        lineJointRounded = _this$props3.lineJointRounded,\n        lineMiterLimit = _this$props3.lineMiterLimit,\n        lineDashJustified = _this$props3.lineDashJustified;\n      var _this$props4 = this.props,\n        getFillColor = _this$props4.getFillColor,\n        getLineColor = _this$props4.getLineColor,\n        getLineWidth = _this$props4.getLineWidth,\n        getLineDashArray = _this$props4.getLineDashArray,\n        getElevation = _this$props4.getElevation,\n        getPolygon = _this$props4.getPolygon,\n        updateTriggers = _this$props4.updateTriggers,\n        material = _this$props4.material;\n      var _this$state = this.state,\n        paths = _this$state.paths,\n        pathsDiff = _this$state.pathsDiff;\n      var FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n      var StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n      var polygonLayer = this.shouldRenderSubLayer('fill', paths) && new FillLayer({\n        _dataDiff: _dataDiff,\n        extruded: extruded,\n        elevationScale: elevationScale,\n        filled: filled,\n        wireframe: wireframe,\n        _normalize: _normalize,\n        getElevation: getElevation,\n        getFillColor: getFillColor,\n        getLineColor: getLineColor,\n        material: material,\n        transitions: transitions\n      }, this.getSubLayerProps({\n        id: 'fill',\n        updateTriggers: {\n          getPolygon: updateTriggers.getPolygon,\n          getElevation: updateTriggers.getElevation,\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor\n        }\n      }), {\n        data: data,\n        positionFormat: positionFormat,\n        getPolygon: getPolygon\n      });\n      var polygonLineLayer = !extruded && stroked && this.shouldRenderSubLayer('stroke', paths) && new StrokeLayer({\n        _dataDiff: pathsDiff && function () {\n          return pathsDiff;\n        },\n        widthUnits: lineWidthUnits,\n        widthScale: lineWidthScale,\n        widthMinPixels: lineWidthMinPixels,\n        widthMaxPixels: lineWidthMaxPixels,\n        rounded: lineJointRounded,\n        miterLimit: lineMiterLimit,\n        dashJustified: lineDashJustified,\n        _pathType: 'loop',\n        transitions: transitions && {\n          getWidth: transitions.getLineWidth,\n          getColor: transitions.getLineColor,\n          getPath: transitions.getPolygon\n        },\n        getColor: this.getSubLayerAccessor(getLineColor),\n        getWidth: this.getSubLayerAccessor(getLineWidth),\n        getDashArray: this.getSubLayerAccessor(getLineDashArray)\n      }, this.getSubLayerProps({\n        id: 'stroke',\n        updateTriggers: {\n          getWidth: updateTriggers.getLineWidth,\n          getColor: updateTriggers.getLineColor,\n          getDashArray: updateTriggers.getLineDashArray\n        }\n      }), {\n        data: paths,\n        positionFormat: positionFormat,\n        getPath: function getPath(x) {\n          return x.path;\n        }\n      });\n      return [!extruded && polygonLayer, polygonLineLayer, extruded && polygonLayer];\n    }\n  }]);\n  return PolygonLayer;\n}(CompositeLayer);\nexport { PolygonLayer as default };\nPolygonLayer.layerName = 'PolygonLayer';\nPolygonLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/polygon-layer/polygon-layer.js"],"names":["CompositeLayer","createIterable","log","SolidPolygonLayer","PathLayer","Polygon","replaceInRange","defaultLineColor","defaultFillColor","defaultProps","stroked","filled","extruded","elevationScale","wireframe","_normalize","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","getPolygon","type","value","f","polygon","getFillColor","getLineColor","getLineWidth","getElevation","material","PolygonLayer","state","paths","props","getLineDashArray","removed","oldProps","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","Array","isArray","slice","pathsDiff","map","data","getIndex","p","__source","index","dataRange","replace","_getPaths","setState","positionFormat","positionSize","startRow","endRow","iterable","objectInfo","object","normalize","holeIndices","positions","i","length","path","push","getSubLayerRow","_dataDiff","transitions","lineDashJustified","updateTriggers","FillLayer","getSubLayerClass","StrokeLayer","polygonLayer","shouldRenderSubLayer","getSubLayerProps","id","polygonLineLayer","widthUnits","widthScale","widthMinPixels","widthMaxPixels","rounded","miterLimit","dashJustified","_pathType","getWidth","getColor","getPath","getSubLayerAccessor","getDashArray","x","layerName"],"mappings":";;;;;AAoBA,SAAQA,cAAR,EAAwBC,cAAxB,EAAwCC,GAAxC,QAAkD,eAAlD;AACA,OAAOC,iBAAP,MAA8B,4CAA9B;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAO,KAAKC,OAAZ,MAAyB,gCAAzB;AACA,SAAQC,cAAR,QAA6B,UAA7B;AAEA,IAAMC,gBAAgB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV,CAAzB;AACA,IAAMC,gBAAgB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV,CAAzB;AAEA,IAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE,IADU;EAEnBC,MAAM,EAAE,IAFW;EAGnBC,QAAQ,EAAE,KAHS;EAInBC,cAAc,EAAE,CAJG;EAKnBC,SAAS,EAAE,KALQ;EAMnBC,UAAU,EAAE,IANO;EAQnBC,cAAc,EAAE,QARG;EASnBC,cAAc,EAAE,CATG;EAUnBC,kBAAkB,EAAE,CAVD;EAWnBC,kBAAkB,EAAEC,MAAM,CAACC,gBAXR;EAYnBC,gBAAgB,EAAE,KAZC;EAanBC,cAAc,EAAE,CAbG;EAenBC,UAAU,EAAE;IAACC,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAE,SAAA,KAAA,CAAA,CAAC,EAAA;MAAA,OAAIC,CAAC,CAACC,OAAN;IAAA;EAA3B,CAfO;EAiBnBC,YAAY,EAAE;IAACJ,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAElB;EAA1B,CAjBK;EAmBnBsB,YAAY,EAAE;IAACL,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAEnB;EAA1B,CAnBK;EAqBnBwB,YAAY,EAAE;IAACN,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAE;EAA1B,CArBK;EAuBnBM,YAAY,EAAE;IAACP,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAE;EAA1B,CAvBK;EA0BnBO,QAAQ,EAAE;AA1BS,CAArB;IA6BqBC,Y;;;;;;;;sCACD;MAChB,IAAA,CAAKC,KAAL,GAAa;QACXC,KAAK,EAAE;MADI,CAAb;MAIA,IAAI,IAAA,CAAKC,KAAL,CAAWC,gBAAf,EAAiC;QAC/BpC,GAAG,CAACqC,OAAJrC,CAAY,kBAAZA,EAAgC,oBAAhCA,CAAAA,EAAAA;MACD;IACF;;;sCAE2C;MAAA,IAAA,KAAA,GAAA,IAAA;MAAA,IAA/BsC,QAA+B,GAAA,IAAA,CAA/BA,QAA+B;QAArBH,KAAqB,GAAA,IAAA,CAArBA,KAAqB;QAAdI,WAAc,GAAA,IAAA,CAAdA,WAAc;MAC1C,IAAMC,eAAe,GACnBD,WAAW,CAACE,WAAZF,IACCA,WAAW,CAACG,qBAAZH,KACEA,WAAW,CAACG,qBAAZH,CAAkCI,GAAlCJ,IAAyCA,WAAW,CAACG,qBAAZH,CAAkCjB,UAD7EiB,CAFH;MAKA,IAAIC,eAAe,IAAII,KAAK,CAACC,OAAND,CAAcL,WAAW,CAACE,WAA1BG,CAAvB,EAA+D;QAC7D,IAAMV,KAAK,GAAG,IAAA,CAAKD,KAAL,CAAWC,KAAX,CAAiBY,KAAjB,EAAd;QACA,IAAMC,SAAS,GAAG,WAAW,CAACN,WAAZ,CAAwBO,GAAxB,CAA4B,UAAA,SAAS,EAAA;UAAA,OACrD5C,cAAc,CAAC;YACb6C,IAAI,EAAEf,KADO;YAEbgB,QAAQ,EAAE,SAAA,QAAA,CAAA,CAAC,EAAA;cAAA,OAAIC,CAAC,CAACC,QAAFD,CAAWE,KAAf;YAAA,CAFE;YAGbC,SAAS,EAATA,SAHa;YAIbC,OAAO,EAAE,KAAI,CAACC,SAAL,CAAeF,SAAf;UAJI,CAAD,CADuC;QAAA,CAArC,CAAlB;QAQA,IAAA,CAAKG,QAAL,CAAc;UAACvB,KAAK,EAALA,KAAD;UAAQa,SAAS,EAATA;QAAR,CAAd,CAAA;MACD,CAXD,MAWO,IAAIP,eAAJ,EAAqB;QAC1B,IAAA,CAAKiB,QAAL,CAAc;UACZvB,KAAK,EAAE,IAAA,CAAKsB,SAAL,EADK;UAEZT,SAAS,EAAE;QAFC,CAAd,CAAA;MAID;IACF;;;gCAEyB;MAAA,IAAhBO,SAAgB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,CAAA,CAAI;MAAA,IAAA,WAAA,GAC+B,IAAA,CAAKnB,KADpC;QACjBc,IADiB,GAAA,WAAA,CACjBA,IADiB;QACX3B,UADW,GAAA,WAAA,CACXA,UADW;QACCoC,cADD,GAAA,WAAA,CACCA,cADD;QACiB7C,UADjB,GAAA,WAAA,CACiBA,UADjB;MAExB,IAAMqB,KAAK,GAAG,EAAd;MACA,IAAMyB,YAAY,GAAGD,cAAc,KAAK,IAAnBA,GAA0B,CAA1BA,GAA8B,CAAnD;MAHwB,IAIjBE,QAJiB,GAIGN,SAJH,CAIjBM,QAJiB;QAIPC,MAJO,GAIGP,SAJH,CAIPO,MAJO;MAAA,IAAA,eAAA,GAMO9D,cAAc,CAACkD,IAAD,EAAOW,QAAP,EAAiBC,MAAjB,CANrB;QAMjBC,QANiB,GAAA,eAAA,CAMjBA,QANiB;QAMPC,UANO,GAAA,eAAA,CAMPA,UANO;MAAA,IAAA,yBAAA,GAAA,IAAA;MAAA,IAAA,iBAAA,GAAA,KAAA;MAAA,IAAA,cAAA,GAAA,SAAA;MAAA,IAAA;QAOxB,KAAA,IAAA,SAAA,GAAqBD,QAArB,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA,EAAA,yBAAA,GAAA,CAAA,KAAA,GAAA,SAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,yBAAA,GAAA,IAAA,EAA+B;UAAA,IAApBE,MAAoB,GAAA,KAAA,CAAA,KAAA;UAC7BD,UAAU,CAACV,KAAXU,EAAAA;UACA,IAAIrC,OAAO,GAAGJ,UAAU,CAAC0C,MAAD,EAASD,UAAT,CAAxB;UACA,IAAIlD,UAAJ,EAAgB;YACda,OAAO,GAAGvB,OAAO,CAAC8D,SAAR9D,CAAkBuB,OAAlBvB,EAA2BwD,YAA3BxD,CAAVuB;UACD;UAL4B,IAAA,QAAA,GAMPA,OANO;YAMtBwC,WANsB,GAAA,QAAA,CAMtBA,WANsB;UAO7B,IAAMC,SAAS,GAAGzC,OAAO,CAACyC,SAARzC,IAAqBA,OAAvC;UAEA,IAAIwC,WAAJ,EAAiB;YAIf,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIF,WAAW,CAACG,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;cAC5C,IAAME,IAAI,GAAGH,SAAS,CAACrB,KAAVqB,CAAgBD,WAAW,CAACE,CAAC,GAAG,CAAL,CAAXF,IAAsB,CAAtCC,EAAyCD,WAAW,CAACE,CAAD,CAAXF,IAAkBC,SAAS,CAACE,MAArEF,CAAb;cACAjC,KAAK,CAACqC,IAANrC,CAAW,IAAA,CAAKsC,cAAL,CAAoB;gBAACF,IAAI,EAAJA;cAAD,CAApB,EAA4BN,MAA5B,EAAoCD,UAAU,CAACV,KAA/C,CAAXnB,CAAAA;YACD;UACF,CARD,MAQO;YACLA,KAAK,CAACqC,IAANrC,CAAW,IAAA,CAAKsC,cAAL,CAAoB;cAACF,IAAI,EAAEH;YAAP,CAApB,EAAuCH,MAAvC,EAA+CD,UAAU,CAACV,KAA1D,CAAXnB,CAAAA;UACD;QACF;MA3BuB,CAAA,CAAA,OAAA,GAAA,EAAA;QAAA,iBAAA,GAAA,IAAA;QAAA,cAAA,GAAA,GAAA;MAAA,CAAA,SAAA;QAAA,IAAA;UAAA,IAAA,CAAA,yBAAA,IAAA,SAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;YAAA,SAAA,CAAA,QAAA,CAAA,EAAA;UAAA;QAAA,CAAA,SAAA;UAAA,IAAA,iBAAA,EAAA;YAAA,MAAA,cAAA;UAAA;QAAA;MAAA;MA4BxB,OAAOA,KAAP;IACD;;;mCAGc;MAAA,IAAA,YAAA,GAaT,IAAA,CAAKC,KAbI;QAGXc,IAHW,GAAA,YAAA,CAGXA,IAHW;QAIXwB,SAJW,GAAA,YAAA,CAIXA,SAJW;QAKXjE,OALW,GAAA,YAAA,CAKXA,OALW;QAMXC,MANW,GAAA,YAAA,CAMXA,MANW;QAOXC,QAPW,GAAA,YAAA,CAOXA,QAPW;QAQXE,SARW,GAAA,YAAA,CAQXA,SARW;QASXC,UATW,GAAA,YAAA,CASXA,UATW;QAUXF,cAVW,GAAA,YAAA,CAUXA,cAVW;QAWX+D,WAXW,GAAA,YAAA,CAWXA,WAXW;QAYXhB,cAZW,GAAA,YAAA,CAYXA,cAZW;MAAA,IAAA,YAAA,GAwBT,IAAA,CAAKvB,KAxBI;QAiBXrB,cAjBW,GAAA,YAAA,CAiBXA,cAjBW;QAkBXC,cAlBW,GAAA,YAAA,CAkBXA,cAlBW;QAmBXC,kBAnBW,GAAA,YAAA,CAmBXA,kBAnBW;QAoBXC,kBApBW,GAAA,YAAA,CAoBXA,kBApBW;QAqBXG,gBArBW,GAAA,YAAA,CAqBXA,gBArBW;QAsBXC,cAtBW,GAAA,YAAA,CAsBXA,cAtBW;QAuBXsD,iBAvBW,GAAA,YAAA,CAuBXA,iBAvBW;MAAA,IAAA,YAAA,GAoCT,IAAA,CAAKxC,KApCI;QA4BXR,YA5BW,GAAA,YAAA,CA4BXA,YA5BW;QA6BXC,YA7BW,GAAA,YAAA,CA6BXA,YA7BW;QA8BXC,YA9BW,GAAA,YAAA,CA8BXA,YA9BW;QA+BXO,gBA/BW,GAAA,YAAA,CA+BXA,gBA/BW;QAgCXN,YAhCW,GAAA,YAAA,CAgCXA,YAhCW;QAiCXR,UAjCW,GAAA,YAAA,CAiCXA,UAjCW;QAkCXsD,cAlCW,GAAA,YAAA,CAkCXA,cAlCW;QAmCX7C,QAnCW,GAAA,YAAA,CAmCXA,QAnCW;MAAA,IAAA,WAAA,GAsCc,IAAA,CAAKE,KAtCnB;QAsCNC,KAtCM,GAAA,WAAA,CAsCNA,KAtCM;QAsCCa,SAtCD,GAAA,WAAA,CAsCCA,SAtCD;MAwCb,IAAM8B,SAAS,GAAG,IAAA,CAAKC,gBAAL,CAAsB,MAAtB,EAA8B7E,iBAA9B,CAAlB;MACA,IAAM8E,WAAW,GAAG,IAAA,CAAKD,gBAAL,CAAsB,QAAtB,EAAgC5E,SAAhC,CAApB;MAGA,IAAM8E,YAAY,GAChB,IAAA,CAAKC,oBAAL,CAA0B,MAA1B,EAAkC/C,KAAlC,CAAA,IACA,IAAI2C,SAAJ,CACE;QACEJ,SAAS,EAATA,SADF;QAEE/D,QAAQ,EAARA,QAFF;QAGEC,cAAc,EAAdA,cAHF;QAKEF,MAAM,EAANA,MALF;QAMEG,SAAS,EAATA,SANF;QAOEC,UAAU,EAAVA,UAPF;QASEiB,YAAY,EAAZA,YATF;QAUEH,YAAY,EAAZA,YAVF;QAWEC,YAAY,EAAZA,YAXF;QAaEG,QAAQ,EAARA,QAbF;QAcE2C,WAAW,EAAXA;MAdF,CADF,EAiBE,IAAA,CAAKQ,gBAAL,CAAsB;QACpBC,EAAE,EAAE,MADgB;QAEpBP,cAAc,EAAE;UACdtD,UAAU,EAAEsD,cAAc,CAACtD,UADb;UAEdQ,YAAY,EAAE8C,cAAc,CAAC9C,YAFf;UAGdH,YAAY,EAAEiD,cAAc,CAACjD,YAHf;UAIdC,YAAY,EAAEgD,cAAc,CAAChD;QAJf;MAFI,CAAtB,CAjBF,EA0BE;QACEqB,IAAI,EAAJA,IADF;QAEES,cAAc,EAAdA,cAFF;QAGEpC,UAAU,EAAVA;MAHF,CA1BF,CAFF;MAoCA,IAAM8D,gBAAgB,GACpB,CAAC1E,QAAD,IACAF,OADA,IAEA,IAAA,CAAKyE,oBAAL,CAA0B,QAA1B,EAAoC/C,KAApC,CAFA,IAGA,IAAI6C,WAAJ,CACE;QACEN,SAAS,EAAE1B,SAAS,IAAK,YAAA;UAAA,OAAMA,SAAN;QAAA,CAD3B;QAEEsC,UAAU,EAAEvE,cAFd;QAGEwE,UAAU,EAAEvE,cAHd;QAIEwE,cAAc,EAAEvE,kBAJlB;QAKEwE,cAAc,EAAEvE,kBALlB;QAMEwE,OAAO,EAAErE,gBANX;QAOEsE,UAAU,EAAErE,cAPd;QAQEsE,aAAa,EAAEhB,iBARjB;QAWEiB,SAAS,EAAE,MAXb;QAaElB,WAAW,EAAEA,WAAW,IAAI;UAC1BmB,QAAQ,EAAEnB,WAAW,CAAC7C,YADI;UAE1BiE,QAAQ,EAAEpB,WAAW,CAAC9C,YAFI;UAG1BmE,OAAO,EAAErB,WAAW,CAACpD;QAHK,CAb9B;QAmBEwE,QAAQ,EAAE,IAAA,CAAKE,mBAAL,CAAyBpE,YAAzB,CAnBZ;QAoBEiE,QAAQ,EAAE,IAAA,CAAKG,mBAAL,CAAyBnE,YAAzB,CApBZ;QAqBEoE,YAAY,EAAE,IAAA,CAAKD,mBAAL,CAAyB5D,gBAAzB;MArBhB,CADF,EAwBE,IAAA,CAAK8C,gBAAL,CAAsB;QACpBC,EAAE,EAAE,QADgB;QAEpBP,cAAc,EAAE;UACdiB,QAAQ,EAAEjB,cAAc,CAAC/C,YADX;UAEdiE,QAAQ,EAAElB,cAAc,CAAChD,YAFX;UAGdqE,YAAY,EAAErB,cAAc,CAACxC;QAHf;MAFI,CAAtB,CAxBF,EAgCE;QACEa,IAAI,EAAEf,KADR;QAEEwB,cAAc,EAAdA,cAFF;QAGEqC,OAAO,EAAE,SAAA,OAAA,CAAA,CAAC,EAAA;UAAA,OAAIG,CAAC,CAAC5B,IAAN;QAAA;MAHZ,CAhCF,CAJF;MA2CA,OAAO,CAEL,CAAC5D,QAAD,IAAasE,YAFR,EAGLI,gBAHK,EAKL1E,QAAQ,IAAIsE,YALP,CAAP;IAOD;;;EAtMuClF,c;SAArBkC,Y;AA0MrBA,YAAY,CAACmE,SAAbnE,GAAyB,cAAzBA;AACAA,YAAY,CAACzB,YAAbyB,GAA4BzB,YAA5ByB","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, createIterable, log} from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nimport {replaceInRange} from '../utils';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n  _normalize: true,\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point, line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\nexport default class PolygonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      paths: []\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n      const paths = this.state.paths.slice();\n      const pathsDiff = changeFlags.dataChanged.map(dataRange =>\n        replaceInRange({\n          data: paths,\n          getIndex: p => p.__source.index,\n          dataRange,\n          replace: this._getPaths(dataRange)\n        })\n      );\n      this.setState({paths, pathsDiff});\n    } else if (geometryChanged) {\n      this.setState({\n        paths: this._getPaths(),\n        pathsDiff: null\n      });\n    }\n  }\n\n  _getPaths(dataRange = {}) {\n    const {data, getPolygon, positionFormat, _normalize} = this.props;\n    const paths = [];\n    const positionSize = positionFormat === 'XY' ? 2 : 3;\n    const {startRow, endRow} = dataRange;\n\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      let polygon = getPolygon(object, objectInfo);\n      if (_normalize) {\n        polygon = Polygon.normalize(polygon, positionSize);\n      }\n      const {holeIndices} = polygon;\n      const positions = polygon.positions || polygon;\n\n      if (holeIndices) {\n        // split the positions array into `holeIndices.length + 1` rings\n        // holeIndices[-1] falls back to 0\n        // holeIndices[holeIndices.length] falls back to positions.length\n        for (let i = 0; i <= holeIndices.length; i++) {\n          const path = positions.slice(holeIndices[i - 1] || 0, holeIndices[i] || positions.length);\n          paths.push(this.getSubLayerRow({path}, object, objectInfo.index));\n        }\n      } else {\n        paths.push(this.getSubLayerRow({path: positions}, object, objectInfo.index));\n      }\n    }\n    return paths;\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    // Layer composition props\n    const {\n      data,\n      _dataDiff,\n      stroked,\n      filled,\n      extruded,\n      wireframe,\n      _normalize,\n      elevationScale,\n      transitions,\n      positionFormat\n    } = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      material\n    } = this.props;\n\n    const {paths, pathsDiff} = this.state;\n\n    const FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n    const StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n\n    // Filled Polygon Layer\n    const polygonLayer =\n      this.shouldRenderSubLayer('fill', paths) &&\n      new FillLayer(\n        {\n          _dataDiff,\n          extruded,\n          elevationScale,\n\n          filled,\n          wireframe,\n          _normalize,\n\n          getElevation,\n          getFillColor,\n          getLineColor,\n\n          material,\n          transitions\n        },\n        this.getSubLayerProps({\n          id: 'fill',\n          updateTriggers: {\n            getPolygon: updateTriggers.getPolygon,\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data,\n          positionFormat,\n          getPolygon\n        }\n      );\n\n    // Polygon line layer\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('stroke', paths) &&\n      new StrokeLayer(\n        {\n          _dataDiff: pathsDiff && (() => pathsDiff),\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          // Already normalized\n          _pathType: 'loop',\n\n          transitions: transitions && {\n            getWidth: transitions.getLineWidth,\n            getColor: transitions.getLineColor,\n            getPath: transitions.getPolygon\n          },\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray)\n        },\n        this.getSubLayerProps({\n          id: 'stroke',\n          updateTriggers: {\n            getWidth: updateTriggers.getLineWidth,\n            getColor: updateTriggers.getLineColor,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: paths,\n          positionFormat,\n          getPath: x => x.path\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonLayer,\n      polygonLineLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n\nPolygonLayer.layerName = 'PolygonLayer';\nPolygonLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}