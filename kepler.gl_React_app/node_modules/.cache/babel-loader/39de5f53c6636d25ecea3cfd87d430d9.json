{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nexport function mergeShaders(target, source) {\n  if (!source) {\n    return target;\n  }\n  var result = Object.assign({}, target, source);\n  if ('defines' in source) {\n    result.defines = Object.assign({}, target.defines, source.defines);\n  }\n  if ('modules' in source) {\n    result.modules = (target.modules || []).concat(source.modules);\n    if (source.modules.some(function (module) {\n      return module.name === 'project64';\n    })) {\n      var index = result.modules.findIndex(function (module) {\n        return module.name === 'project32';\n      });\n      if (index >= 0) {\n        result.modules.splice(index, 1);\n      }\n    }\n  }\n  if ('inject' in source) {\n    if (!target.inject) {\n      result.inject = source.inject;\n    } else {\n      var mergedInjection = _objectSpread({}, target.inject);\n      for (var key in source.inject) {\n        mergedInjection[key] = (mergedInjection[key] || '') + source.inject[key];\n      }\n      result.inject = mergedInjection;\n    }\n  }\n  return result;\n}","map":{"version":3,"sources":["../../../src/utils/shader.js"],"names":["mergeShaders","target","source","result","Object","assign","defines","modules","concat","some","module","name","index","findIndex","splice","inject","mergedInjection","key"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,OAAO,SAASA,YAAT,CAAsBC,MAAtB,EAA8BC,MAA9B,EAAsC;EAC3C,IAAI,CAACA,MAAL,EAAa;IACX,OAAOD,MAAP;EACD;EACD,IAAME,MAAM,GAAGC,MAAM,CAACC,MAAPD,CAAc,CAAA,CAAdA,EAAkBH,MAAlBG,EAA0BF,MAA1BE,CAAf;EAEA,IAAI,SAAA,IAAaF,MAAjB,EAAyB;IACvBC,MAAM,CAACG,OAAPH,GAAiBC,MAAM,CAACC,MAAPD,CAAc,CAAA,CAAdA,EAAkBH,MAAM,CAACK,OAAzBF,EAAkCF,MAAM,CAACI,OAAzCF,CAAjBD;EACD;EACD,IAAI,SAAA,IAAaD,MAAjB,EAAyB;IACvBC,MAAM,CAACI,OAAPJ,GAAiB,CAACF,MAAM,CAACM,OAAPN,IAAkB,EAAnB,EAAuBO,MAAvB,CAA8BN,MAAM,CAACK,OAArC,CAAjBJ;IAGA,IAAI,MAAM,CAACI,OAAP,CAAeE,IAAf,CAAoB,UAAA,MAAM,EAAA;MAAA,OAAIC,MAAM,CAACC,IAAPD,KAAgB,WAApB;IAAA,CAA1B,CAAJ,EAAgE;MAC9D,IAAME,KAAK,GAAG,MAAM,CAACL,OAAP,CAAeM,SAAf,CAAyB,UAAA,MAAM,EAAA;QAAA,OAAIH,MAAM,CAACC,IAAPD,KAAgB,WAApB;MAAA,CAA/B,CAAd;MACA,IAAIE,KAAK,IAAI,CAAb,EAAgB;QACdT,MAAM,CAACI,OAAPJ,CAAeW,MAAfX,CAAsBS,KAAtBT,EAA6B,CAA7BA,CAAAA;MACD;IACF;EACF;EACD,IAAI,QAAA,IAAYD,MAAhB,EAAwB;IACtB,IAAI,CAACD,MAAM,CAACc,MAAZ,EAAoB;MAClBZ,MAAM,CAACY,MAAPZ,GAAgBD,MAAM,CAACa,MAAvBZ;IACD,CAFD,MAEO;MACL,IAAMa,eAAe,GAAA,aAAA,CAAA,CAAA,CAAA,EAAOf,MAAM,CAACc,MAAd,CAArB;MACA,KAAK,IAAME,GAAX,IAAkBf,MAAM,CAACa,MAAzB,EAAiC;QAC/BC,eAAe,CAACC,GAAD,CAAfD,GAAuB,CAACA,eAAe,CAACC,GAAD,CAAfD,IAAwB,EAAzB,IAA+Bd,MAAM,CAACa,MAAPb,CAAce,GAAdf,CAAtDc;MACD;MACDb,MAAM,CAACY,MAAPZ,GAAgBa,eAAhBb;IACD;EACF;EACD,OAAOA,MAAP;AACD","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Merge two luma.gl shader descriptors\nexport function mergeShaders(target, source) {\n  if (!source) {\n    return target;\n  }\n  const result = Object.assign({}, target, source);\n\n  if ('defines' in source) {\n    result.defines = Object.assign({}, target.defines, source.defines);\n  }\n  if ('modules' in source) {\n    result.modules = (target.modules || []).concat(source.modules);\n\n    // Hack: prject32 and project64 cannot co-exist\n    if (source.modules.some(module => module.name === 'project64')) {\n      const index = result.modules.findIndex(module => module.name === 'project32');\n      if (index >= 0) {\n        result.modules.splice(index, 1);\n      }\n    }\n  }\n  if ('inject' in source) {\n    if (!target.inject) {\n      result.inject = source.inject;\n    } else {\n      const mergedInjection = {...target.inject};\n      for (const key in source.inject) {\n        mergedInjection[key] = (mergedInjection[key] || '') + source.inject[key];\n      }\n      result.inject = mergedInjection;\n    }\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}