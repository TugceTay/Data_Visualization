{"ast":null,"code":"export var defaultColorRange = [[255, 255, 178], [254, 217, 118], [254, 178, 76], [253, 141, 60], [240, 59, 32], [189, 0, 38]];\nexport function colorRangeToFlatArray(colorRange) {\n  var normalize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var ArrayType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Float32Array;\n  var flatArray;\n  if (Number.isFinite(colorRange[0])) {\n    flatArray = new ArrayType(colorRange);\n  } else {\n    flatArray = new ArrayType(colorRange.length * 4);\n    var index = 0;\n    for (var i = 0; i < colorRange.length; i++) {\n      var color = colorRange[i];\n      flatArray[index++] = color[0];\n      flatArray[index++] = color[1];\n      flatArray[index++] = color[2];\n      flatArray[index++] = Number.isFinite(color[3]) ? color[3] : 255;\n    }\n  }\n  if (normalize) {\n    for (var _i = 0; _i < flatArray.length; _i++) {\n      flatArray[_i] /= 255;\n    }\n  }\n  return flatArray;\n}","map":{"version":3,"sources":["../../../src/utils/color-utils.js"],"names":["defaultColorRange","colorRangeToFlatArray","colorRange","normalize","ArrayType","Float32Array","flatArray","Number","isFinite","length","index","i","color"],"mappings":"AAoBA,OAAO,IAAMA,iBAAiB,GAAG,CAC/B,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAD+B,EAE/B,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAF+B,EAG/B,CAAC,GAAD,EAAM,GAAN,EAAW,EAAX,CAH+B,EAI/B,CAAC,GAAD,EAAM,GAAN,EAAW,EAAX,CAJ+B,EAK/B,CAAC,GAAD,EAAM,EAAN,EAAU,EAAV,CAL+B,EAM/B,CAAC,GAAD,EAAM,CAAN,EAAS,EAAT,CAN+B,CAA1B;AAUP,OAAO,SAASC,qBAAT,CAA+BC,UAA/B,EAAwF;EAAA,IAA7CC,SAA6C,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAjC,KAAiC;EAAA,IAA1BC,SAA0B,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAdC,YAAc;EAC7F,IAAIC,SAAJ;EAEA,IAAIC,MAAM,CAACC,QAAPD,CAAgBL,UAAU,CAAC,CAAD,CAA1BK,CAAJ,EAAoC;IAElCD,SAAS,GAAG,IAAIF,SAAJ,CAAcF,UAAd,CAAZI;EACD,CAHD,MAGO;IAELA,SAAS,GAAG,IAAIF,SAAJ,CAAcF,UAAU,CAACO,MAAXP,GAAoB,CAAlC,CAAZI;IACA,IAAII,KAAK,GAAG,CAAZ;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,UAAU,CAACO,MAA/B,EAAuCE,CAAC,EAAxC,EAA4C;MAC1C,IAAMC,KAAK,GAAGV,UAAU,CAACS,CAAD,CAAxB;MACAL,SAAS,CAACI,KAAK,EAAN,CAATJ,GAAqBM,KAAK,CAAC,CAAD,CAA1BN;MACAA,SAAS,CAACI,KAAK,EAAN,CAATJ,GAAqBM,KAAK,CAAC,CAAD,CAA1BN;MACAA,SAAS,CAACI,KAAK,EAAN,CAATJ,GAAqBM,KAAK,CAAC,CAAD,CAA1BN;MACAA,SAAS,CAACI,KAAK,EAAN,CAATJ,GAAqBC,MAAM,CAACC,QAAPD,CAAgBK,KAAK,CAAC,CAAD,CAArBL,CAAAA,GAA4BK,KAAK,CAAC,CAAD,CAAjCL,GAAuC,GAA5DD;IACD;EACF;EAED,IAAIH,SAAJ,EAAe;IACb,KAAK,IAAIQ,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGL,SAAS,CAACG,MAA9B,EAAsCE,EAAC,EAAvC,EAA2C;MACzCL,SAAS,CAACK,EAAD,CAATL,IAAgB,GAAhBA;IACD;EACF;EACD,OAAOA,SAAP;AACD","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport const defaultColorRange = [\n  [255, 255, 178],\n  [254, 217, 118],\n  [254, 178, 76],\n  [253, 141, 60],\n  [240, 59, 32],\n  [189, 0, 38]\n];\n\n// Converts a colorRange array to a flat array with 4 components per color\nexport function colorRangeToFlatArray(colorRange, normalize = false, ArrayType = Float32Array) {\n  let flatArray;\n\n  if (Number.isFinite(colorRange[0])) {\n    // its already a flat array.\n    flatArray = new ArrayType(colorRange);\n  } else {\n    // flatten it\n    flatArray = new ArrayType(colorRange.length * 4);\n    let index = 0;\n\n    for (let i = 0; i < colorRange.length; i++) {\n      const color = colorRange[i];\n      flatArray[index++] = color[0];\n      flatArray[index++] = color[1];\n      flatArray[index++] = color[2];\n      flatArray[index++] = Number.isFinite(color[3]) ? color[3] : 255;\n    }\n  }\n\n  if (normalize) {\n    for (let i = 0; i < flatArray.length; i++) {\n      flatArray[i] /= 255;\n    }\n  }\n  return flatArray;\n}\n"]},"metadata":{},"sourceType":"module"}