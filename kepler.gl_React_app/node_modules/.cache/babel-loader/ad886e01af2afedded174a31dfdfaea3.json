{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport debug from '../debug';\nimport DrawLayersPass from '../passes/draw-layers-pass';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport { Framebuffer } from '@luma.gl/core';\nvar TRACE_RENDER_LAYERS = 'deckRenderer.renderLayers';\nvar DeckRenderer = function () {\n  function DeckRenderer(gl) {\n    _classCallCheck(this, DeckRenderer);\n    this.gl = gl;\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n    this.drawLayersPass = new DrawLayersPass(gl);\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.renderCount = 0;\n    this._needsRedraw = 'Initial render';\n    this.renderBuffers = [];\n    this.lastPostProcessEffect = null;\n    this._onError = null;\n  }\n  _createClass(DeckRenderer, [{\n    key: \"setProps\",\n    value: function setProps(props) {\n      if ('layerFilter' in props && this.layerFilter !== props.layerFilter) {\n        this.layerFilter = props.layerFilter;\n        this._needsRedraw = 'layerFilter changed';\n      }\n      if ('drawPickingColors' in props && this.drawPickingColors !== props.drawPickingColors) {\n        this.drawPickingColors = props.drawPickingColors;\n        this._needsRedraw = 'drawPickingColors changed';\n      }\n      if ('onError' in props) {\n        this._onError = props.onError;\n      }\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers(opts) {\n      var layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n      opts.layerFilter = this.layerFilter;\n      opts.onError = this._onError;\n      opts.effects = opts.effects || [];\n      opts.target = opts.target || Framebuffer.getDefaultFramebuffer(this.gl);\n      this._preRender(opts.effects, opts);\n      var outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : opts.target;\n      var renderStats = layerPass.render(_objectSpread({}, opts, {\n        target: outputBuffer\n      }));\n      this._postRender(opts.effects, opts);\n      this.renderCount++;\n      debug(TRACE_RENDER_LAYERS, this, renderStats, opts);\n    }\n  }, {\n    key: \"needsRedraw\",\n    value: function needsRedraw() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        clearRedrawFlags: false\n      };\n      var redraw = this._needsRedraw;\n      if (opts.clearRedrawFlags) {\n        this._needsRedraw = false;\n      }\n      return redraw;\n    }\n  }, {\n    key: \"finalize\",\n    value: function finalize() {\n      var renderBuffers = this.renderBuffers;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n      try {\n        for (var _iterator = renderBuffers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var buffer = _step.value;\n          buffer[\"delete\"]();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n      renderBuffers.length = 0;\n    }\n  }, {\n    key: \"_preRender\",\n    value: function _preRender(effects, opts) {\n      var lastPostProcessEffect = null;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n      try {\n        for (var _iterator2 = effects[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var effect = _step2.value;\n          effect.preRender(this.gl, opts);\n          if (effect.postRender) {\n            lastPostProcessEffect = effect;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n      if (lastPostProcessEffect) {\n        this._resizeRenderBuffers();\n      }\n      this.lastPostProcessEffect = lastPostProcessEffect;\n    }\n  }, {\n    key: \"_resizeRenderBuffers\",\n    value: function _resizeRenderBuffers() {\n      var renderBuffers = this.renderBuffers;\n      if (renderBuffers.length === 0) {\n        renderBuffers.push(new Framebuffer(this.gl), new Framebuffer(this.gl));\n      }\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n      try {\n        for (var _iterator3 = renderBuffers[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var buffer = _step3.value;\n          buffer.resize();\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3[\"return\"] != null) {\n            _iterator3[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_postRender\",\n    value: function _postRender(effects, opts) {\n      var renderBuffers = this.renderBuffers;\n      var params = {\n        inputBuffer: renderBuffers[0],\n        swapBuffer: renderBuffers[1],\n        target: null\n      };\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n      try {\n        for (var _iterator4 = effects[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var effect = _step4.value;\n          if (effect.postRender) {\n            if (effect === this.lastPostProcessEffect) {\n              params.target = opts.target;\n              effect.postRender(this.gl, params);\n              break;\n            }\n            var buffer = effect.postRender(this.gl, params);\n            params.inputBuffer = buffer;\n            params.swapBuffer = buffer === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];\n          }\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4[\"return\"] != null) {\n            _iterator4[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n    }\n  }]);\n  return DeckRenderer;\n}();\nexport { DeckRenderer as default };","map":{"version":3,"sources":["../../../src/lib/deck-renderer.js"],"names":["debug","DrawLayersPass","PickLayersPass","Framebuffer","TRACE_RENDER_LAYERS","DeckRenderer","gl","layerFilter","drawPickingColors","drawLayersPass","pickLayersPass","renderCount","_needsRedraw","renderBuffers","lastPostProcessEffect","_onError","props","onError","opts","layerPass","effects","target","getDefaultFramebuffer","_preRender","outputBuffer","renderStats","render","_postRender","clearRedrawFlags","redraw","buffer","length","effect","preRender","postRender","_resizeRenderBuffers","push","resize","params","inputBuffer","swapBuffer"],"mappings":"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","sourcesContent":["import debug from '../debug';\nimport DrawLayersPass from '../passes/draw-layers-pass';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport {Framebuffer} from '@luma.gl/core';\n\nconst TRACE_RENDER_LAYERS = 'deckRenderer.renderLayers';\n\nexport default class DeckRenderer {\n  constructor(gl) {\n    this.gl = gl;\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n    this.drawLayersPass = new DrawLayersPass(gl);\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.renderCount = 0;\n    this._needsRedraw = 'Initial render';\n    this.renderBuffers = [];\n    this.lastPostProcessEffect = null;\n    this._onError = null;\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props && this.layerFilter !== props.layerFilter) {\n      this.layerFilter = props.layerFilter;\n      this._needsRedraw = 'layerFilter changed';\n    }\n\n    if ('drawPickingColors' in props && this.drawPickingColors !== props.drawPickingColors) {\n      this.drawPickingColors = props.drawPickingColors;\n      this._needsRedraw = 'drawPickingColors changed';\n    }\n\n    if ('onError' in props) {\n      this._onError = props.onError;\n    }\n  }\n\n  /*\n    target,\n    layers,\n    viewports,\n    onViewportActive,\n    views,\n    redrawReason,\n    clearCanvas,\n    effects,\n    pass,\n    stats\n  */\n  renderLayers(opts) {\n    const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n\n    opts.layerFilter = this.layerFilter;\n    opts.onError = this._onError;\n    opts.effects = opts.effects || [];\n    opts.target = opts.target || Framebuffer.getDefaultFramebuffer(this.gl);\n\n    this._preRender(opts.effects, opts);\n\n    const outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : opts.target;\n    const renderStats = layerPass.render({...opts, target: outputBuffer});\n\n    this._postRender(opts.effects, opts);\n\n    this.renderCount++;\n\n    debug(TRACE_RENDER_LAYERS, this, renderStats, opts);\n  }\n\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  finalize() {\n    const {renderBuffers} = this;\n    for (const buffer of renderBuffers) {\n      buffer.delete();\n    }\n    renderBuffers.length = 0;\n  }\n\n  // Private\n  _preRender(effects, opts) {\n    let lastPostProcessEffect = null;\n\n    for (const effect of effects) {\n      effect.preRender(this.gl, opts);\n      if (effect.postRender) {\n        lastPostProcessEffect = effect;\n      }\n    }\n\n    if (lastPostProcessEffect) {\n      this._resizeRenderBuffers();\n    }\n    this.lastPostProcessEffect = lastPostProcessEffect;\n  }\n\n  _resizeRenderBuffers() {\n    const {renderBuffers} = this;\n    if (renderBuffers.length === 0) {\n      renderBuffers.push(new Framebuffer(this.gl), new Framebuffer(this.gl));\n    }\n    for (const buffer of renderBuffers) {\n      buffer.resize();\n    }\n  }\n\n  _postRender(effects, opts) {\n    const {renderBuffers} = this;\n    const params = {\n      inputBuffer: renderBuffers[0],\n      swapBuffer: renderBuffers[1],\n      target: null\n    };\n    for (const effect of effects) {\n      if (effect.postRender) {\n        if (effect === this.lastPostProcessEffect) {\n          params.target = opts.target;\n          effect.postRender(this.gl, params);\n          break;\n        }\n        const buffer = effect.postRender(this.gl, params);\n        params.inputBuffer = buffer;\n        params.swapBuffer = buffer === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}