{"ast":null,"code":"export function unpackIndexedGeometry(geometry) {\n  const {\n    indices,\n    attributes\n  } = geometry;\n  if (!indices) {\n    return geometry;\n  }\n  const vertexCount = indices.value.length;\n  const unpackedAttributes = {};\n  for (const attributeName in attributes) {\n    const attribute = attributes[attributeName];\n    const {\n      constant,\n      value,\n      size\n    } = attribute;\n    if (constant || !size) {\n      continue;\n    }\n    const unpackedValue = new value.constructor(vertexCount * size);\n    for (let x = 0; x < vertexCount; ++x) {\n      const index = indices.value[x];\n      for (let i = 0; i < size; i++) {\n        unpackedValue[x * size + i] = value[index * size + i];\n      }\n    }\n    unpackedAttributes[attributeName] = {\n      size,\n      value: unpackedValue\n    };\n  }\n  return {\n    attributes: Object.assign({}, attributes, unpackedAttributes)\n  };\n}","map":{"version":3,"sources":["../../../src/geometry/geometry-utils.js"],"names":["unpackIndexedGeometry","geometry","indices","attributes","vertexCount","value","length","unpackedAttributes","attributeName","attribute","constant","size","unpackedValue","constructor","x","index","i","Object","assign"],"mappings":"AAAA,OAAO,SAASA,qBAAT,CAA+BC,QAA/B,EAAyC;EAC9C,MAAM;IAACC,OAAD;IAAUC;EAAV,CAAA,GAAwBF,QAA9B;EACA,IAAI,CAACC,OAAL,EAAc;IACZ,OAAOD,QAAP;EACD;EAED,MAAMG,WAAW,GAAGF,OAAO,CAACG,KAARH,CAAcI,MAAlC;EACA,MAAMC,kBAAkB,GAAG,CAAA,CAA3B;EAEA,KAAK,MAAMC,aAAX,IAA4BL,UAA5B,EAAwC;IACtC,MAAMM,SAAS,GAAGN,UAAU,CAACK,aAAD,CAA5B;IACA,MAAM;MAACE,QAAD;MAAWL,KAAX;MAAkBM;IAAlB,CAAA,GAA0BF,SAAhC;IACA,IAAIC,QAAQ,IAAI,CAACC,IAAjB,EAAuB;MACrB;IACD;IACD,MAAMC,aAAa,GAAG,IAAIP,KAAK,CAACQ,WAAV,CAAsBT,WAAW,GAAGO,IAApC,CAAtB;IACA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,WAApB,EAAiC,EAAEU,CAAnC,EAAsC;MACpC,MAAMC,KAAK,GAAGb,OAAO,CAACG,KAARH,CAAcY,CAAdZ,CAAd;MACA,KAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAApB,EAA0BK,CAAC,EAA3B,EAA+B;QAC7BJ,aAAa,CAACE,CAAC,GAAGH,IAAJG,GAAWE,CAAZ,CAAbJ,GAA8BP,KAAK,CAACU,KAAK,GAAGJ,IAARI,GAAeC,CAAhB,CAAnCJ;MACD;IACF;IACDL,kBAAkB,CAACC,aAAD,CAAlBD,GAAoC;MAACI,IAAD;MAAON,KAAK,EAAEO;IAAd,CAApCL;EACD;EAED,OAAO;IACLJ,UAAU,EAAEc,MAAM,CAACC,MAAPD,CAAc,CAAA,CAAdA,EAAkBd,UAAlBc,EAA8BV,kBAA9BU;EADP,CAAP;AAGD","sourcesContent":["export function unpackIndexedGeometry(geometry) {\n  const {indices, attributes} = geometry;\n  if (!indices) {\n    return geometry;\n  }\n\n  const vertexCount = indices.value.length;\n  const unpackedAttributes = {};\n\n  for (const attributeName in attributes) {\n    const attribute = attributes[attributeName];\n    const {constant, value, size} = attribute;\n    if (constant || !size) {\n      continue; // eslint-disable-line\n    }\n    const unpackedValue = new value.constructor(vertexCount * size);\n    for (let x = 0; x < vertexCount; ++x) {\n      const index = indices.value[x];\n      for (let i = 0; i < size; i++) {\n        unpackedValue[x * size + i] = value[index * size + i];\n      }\n    }\n    unpackedAttributes[attributeName] = {size, value: unpackedValue};\n  }\n\n  return {\n    attributes: Object.assign({}, attributes, unpackedAttributes)\n  };\n}\n"]},"metadata":{},"sourceType":"module"}