{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport LayerManager from './layer-manager';\nimport ViewManager from './view-manager';\nimport MapView from '../views/map-view';\nimport EffectManager from './effect-manager';\nimport Effect from './effect';\nimport DeckRenderer from './deck-renderer';\nimport DeckPicker from './deck-picker';\nimport Tooltip from './tooltip';\nimport log from '../utils/log';\nimport { deepEqual } from '../utils/deep-equal';\nimport deckGlobal from './init';\nimport { getBrowser } from 'probe.gl/env';\nimport { AnimationLoop, createGLContext, instrumentGLContext, setParameters, Timeline, lumaStats } from '@luma.gl/core';\nimport { Stats } from 'probe.gl';\nimport { EventManager } from 'mjolnir.js';\nimport assert from '../utils/assert';\nimport { EVENTS } from './constants';\nfunction noop() {}\nvar getCursor = function getCursor(_ref) {\n  var isDragging = _ref.isDragging;\n  return isDragging ? 'grabbing' : 'grab';\n};\nfunction getPropTypes(PropTypes) {\n  return {\n    id: PropTypes.string,\n    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    layers: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    layerFilter: PropTypes.func,\n    views: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    viewState: PropTypes.object,\n    effects: PropTypes.arrayOf(PropTypes.instanceOf(Effect)),\n    controller: PropTypes.oneOfType([PropTypes.func, PropTypes.bool, PropTypes.object]),\n    gl: PropTypes.object,\n    glOptions: PropTypes.object,\n    parameters: PropTypes.object,\n    pickingRadius: PropTypes.number,\n    useDevicePixels: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n    touchAction: PropTypes.string,\n    onWebGLInitialized: PropTypes.func,\n    onResize: PropTypes.func,\n    onViewStateChange: PropTypes.func,\n    onBeforeRender: PropTypes.func,\n    onAfterRender: PropTypes.func,\n    onLoad: PropTypes.func,\n    onError: PropTypes.func,\n    debug: PropTypes.bool,\n    drawPickingColors: PropTypes.bool,\n    _framebuffer: PropTypes.object,\n    _animate: PropTypes.bool\n  };\n}\nvar defaultProps = {\n  id: 'deckgl-overlay',\n  width: '100%',\n  height: '100%',\n  pickingRadius: 0,\n  layerFilter: null,\n  glOptions: {},\n  gl: null,\n  layers: [],\n  effects: [],\n  views: null,\n  controller: null,\n  useDevicePixels: true,\n  touchAction: 'none',\n  _framebuffer: null,\n  _animate: false,\n  onWebGLInitialized: noop,\n  onResize: noop,\n  onViewStateChange: noop,\n  onBeforeRender: noop,\n  onAfterRender: noop,\n  onLoad: noop,\n  onError: null,\n  _onMetrics: null,\n  getCursor: getCursor,\n  debug: false,\n  drawPickingColors: false\n};\nvar Deck = function () {\n  function Deck(props) {\n    _classCallCheck(this, Deck);\n    props = Object.assign({}, defaultProps, props);\n    this.props = {};\n    this.width = 0;\n    this.height = 0;\n    this.viewManager = null;\n    this.layerManager = null;\n    this.effectManager = null;\n    this.deckRenderer = null;\n    this.deckPicker = null;\n    this._needsRedraw = true;\n    this._pickRequest = {};\n    this._lastPointerDownInfo = null;\n    this.viewState = null;\n    this.interactiveState = {\n      isDragging: false\n    };\n    this._onEvent = this._onEvent.bind(this);\n    this._onPointerDown = this._onPointerDown.bind(this);\n    this._onPointerMove = this._onPointerMove.bind(this);\n    this._pickAndCallback = this._pickAndCallback.bind(this);\n    this._onRendererInitialized = this._onRendererInitialized.bind(this);\n    this._onRenderFrame = this._onRenderFrame.bind(this);\n    this._onViewStateChange = this._onViewStateChange.bind(this);\n    this._onInteractiveStateChange = this._onInteractiveStateChange.bind(this);\n    if (props.viewState && props.initialViewState) {\n      log.warn('View state tracking is disabled. Use either `initialViewState` for auto update or `viewState` for manual update.')();\n    }\n    if (getBrowser() === 'IE') {\n      log.warn('IE 11 support will be deprecated in v8.0')();\n    }\n    if (!props.gl) {\n      if (typeof document !== 'undefined') {\n        this.canvas = this._createCanvas(props);\n      }\n    }\n    this.animationLoop = this._createAnimationLoop(props);\n    this.stats = new Stats({\n      id: 'deck.gl'\n    });\n    this.metrics = {\n      fps: 0,\n      setPropsTime: 0,\n      updateAttributesTime: 0,\n      framesRedrawn: 0,\n      pickTime: 0,\n      pickCount: 0,\n      gpuTime: 0,\n      gpuTimePerFrame: 0,\n      cpuTime: 0,\n      cpuTimePerFrame: 0,\n      bufferMemory: 0,\n      textureMemory: 0,\n      renderbufferMemory: 0,\n      gpuMemory: 0\n    };\n    this._metricsCounter = 0;\n    this.setProps(props);\n    this.animationLoop.start();\n  }\n  _createClass(Deck, [{\n    key: \"finalize\",\n    value: function finalize() {\n      this.animationLoop.stop();\n      this.animationLoop = null;\n      this._lastPointerDownInfo = null;\n      if (this.layerManager) {\n        this.layerManager.finalize();\n        this.layerManager = null;\n        this.viewManager.finalize();\n        this.viewManager = null;\n        this.effectManager.finalize();\n        this.effectManager = null;\n        this.deckRenderer.finalize();\n        this.deckRenderer = null;\n        this.deckPicker.finalize();\n        this.deckPicker = null;\n        this.eventManager.destroy();\n        this.eventManager = null;\n        this.tooltip.remove();\n        this.tooltip = null;\n      }\n      if (!this.props.canvas && !this.props.gl && this.canvas) {\n        this.canvas.parentElement.removeChild(this.canvas);\n        this.canvas = null;\n      }\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      this.stats.get('setProps Time').timeStart();\n      if ('onLayerHover' in props) {\n        log.removed('onLayerHover', 'onHover')();\n      }\n      if ('onLayerClick' in props) {\n        log.removed('onLayerClick', 'onClick')();\n      }\n      if (props.initialViewState && !deepEqual(this.props.initialViewState, props.initialViewState)) {\n        this.viewState = props.initialViewState;\n      }\n      Object.assign(this.props, props);\n      this._setCanvasSize(this.props);\n      var resolvedProps = Object.create(this.props);\n      Object.assign(resolvedProps, {\n        views: this._getViews(),\n        width: this.width,\n        height: this.height,\n        viewState: this._getViewState()\n      });\n      this.animationLoop.setProps(resolvedProps);\n      if (this.layerManager) {\n        this.viewManager.setProps(resolvedProps);\n        this.layerManager.activateViewport(this.getViewports()[0]);\n        this.layerManager.setProps(resolvedProps);\n        this.effectManager.setProps(resolvedProps);\n        this.deckRenderer.setProps(resolvedProps);\n        this.deckPicker.setProps(resolvedProps);\n      }\n      this.stats.get('setProps Time').timeEnd();\n    }\n  }, {\n    key: \"needsRedraw\",\n    value: function needsRedraw() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        clearRedrawFlags: false\n      };\n      if (this.props._animate) {\n        return 'Deck._animate';\n      }\n      var redraw = this._needsRedraw;\n      if (opts.clearRedrawFlags) {\n        this._needsRedraw = false;\n      }\n      var viewManagerNeedsRedraw = this.viewManager.needsRedraw(opts);\n      var layerManagerNeedsRedraw = this.layerManager.needsRedraw(opts);\n      var effectManagerNeedsRedraw = this.effectManager.needsRedraw(opts);\n      var deckRendererNeedsRedraw = this.deckRenderer.needsRedraw(opts);\n      redraw = redraw || viewManagerNeedsRedraw || layerManagerNeedsRedraw || effectManagerNeedsRedraw || deckRendererNeedsRedraw;\n      return redraw;\n    }\n  }, {\n    key: \"redraw\",\n    value: function redraw(force) {\n      if (!this.layerManager) {\n        return;\n      }\n      var redrawReason = force || this.needsRedraw({\n        clearRedrawFlags: true\n      });\n      if (!redrawReason) {\n        return;\n      }\n      this.stats.get('Redraw Count').incrementCount();\n      if (this.props._customRender) {\n        this.props._customRender(redrawReason);\n      } else {\n        this._drawLayers(redrawReason);\n      }\n    }\n  }, {\n    key: \"getViews\",\n    value: function getViews() {\n      return this.viewManager.views;\n    }\n  }, {\n    key: \"getViewports\",\n    value: function getViewports(rect) {\n      return this.viewManager.getViewports(rect);\n    }\n  }, {\n    key: \"pickObject\",\n    value: function pickObject(opts) {\n      var infos = this._pick('pickObject', 'pickObject Time', opts).result;\n      return infos.length ? infos[0] : null;\n    }\n  }, {\n    key: \"pickMultipleObjects\",\n    value: function pickMultipleObjects(opts) {\n      opts.depth = opts.depth || 10;\n      return this._pick('pickObject', 'pickMultipleObjects Time', opts).result;\n    }\n  }, {\n    key: \"pickObjects\",\n    value: function pickObjects(opts) {\n      return this._pick('pickObjects', 'pickObjects Time', opts);\n    }\n  }, {\n    key: \"_addResources\",\n    value: function _addResources(resources) {\n      var forceUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      for (var id in resources) {\n        this.layerManager.resourceManager.add({\n          resourceId: id,\n          data: resources[id],\n          forceUpdate: forceUpdate\n        });\n      }\n    }\n  }, {\n    key: \"_removeResources\",\n    value: function _removeResources(resourceIds) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n      try {\n        for (var _iterator = resourceIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var id = _step.value;\n          this.layerManager.resourceManager.remove(id);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_pick\",\n    value: function _pick(method, statKey, opts) {\n      var stats = this.stats;\n      stats.get('Pick Count').incrementCount();\n      stats.get(statKey).timeStart();\n      var infos = this.deckPicker[method](Object.assign({\n        layers: this.layerManager.getLayers(opts),\n        viewports: this.getViewports(opts),\n        onViewportActive: this.layerManager.activateViewport\n      }, opts));\n      stats.get(statKey).timeEnd();\n      return infos;\n    }\n  }, {\n    key: \"_createCanvas\",\n    value: function _createCanvas(props) {\n      var canvas = props.canvas;\n      if (typeof canvas === 'string') {\n        canvas = document.getElementById(canvas);\n        assert(canvas);\n      }\n      if (!canvas) {\n        canvas = document.createElement('canvas');\n        var parent = props.parent || document.body;\n        parent.appendChild(canvas);\n      }\n      var id = props.id,\n        style = props.style;\n      canvas.id = id;\n      Object.assign(canvas.style, style);\n      return canvas;\n    }\n  }, {\n    key: \"_setCanvasSize\",\n    value: function _setCanvasSize(props) {\n      if (!this.canvas) {\n        return;\n      }\n      var width = props.width,\n        height = props.height;\n      if (width || width === 0) {\n        width = Number.isFinite(width) ? \"\".concat(width, \"px\") : width;\n        this.canvas.style.width = width;\n      }\n      if (height || height === 0) {\n        height = Number.isFinite(height) ? \"\".concat(height, \"px\") : height;\n        this.canvas.style.position = 'absolute';\n        this.canvas.style.height = height;\n      }\n    }\n  }, {\n    key: \"_updateCanvasSize\",\n    value: function _updateCanvasSize() {\n      if (this._checkForCanvasSizeChange()) {\n        var width = this.width,\n          height = this.height;\n        this.viewManager.setProps({\n          width: width,\n          height: height\n        });\n        this.props.onResize({\n          width: this.width,\n          height: this.height\n        });\n      }\n    }\n  }, {\n    key: \"_checkForCanvasSizeChange\",\n    value: function _checkForCanvasSizeChange() {\n      var canvas = this.canvas;\n      if (!canvas) {\n        return false;\n      }\n      var newWidth = canvas.clientWidth || canvas.width;\n      var newHeight = canvas.clientHeight || canvas.height;\n      if (newWidth !== this.width || newHeight !== this.height) {\n        this.width = newWidth;\n        this.height = newHeight;\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"_createAnimationLoop\",\n    value: function _createAnimationLoop(props) {\n      var _this = this;\n      var width = props.width,\n        height = props.height,\n        gl = props.gl,\n        glOptions = props.glOptions,\n        debug = props.debug,\n        useDevicePixels = props.useDevicePixels,\n        autoResizeDrawingBuffer = props.autoResizeDrawingBuffer;\n      return new AnimationLoop({\n        width: width,\n        height: height,\n        useDevicePixels: useDevicePixels,\n        autoResizeDrawingBuffer: autoResizeDrawingBuffer,\n        autoResizeViewport: false,\n        gl: gl,\n        onCreateContext: function onCreateContext(opts) {\n          return createGLContext(Object.assign({}, glOptions, opts, {\n            canvas: _this.canvas,\n            debug: debug\n          }));\n        },\n        onInitialize: this._onRendererInitialized,\n        onRender: this._onRenderFrame,\n        onBeforeRender: props.onBeforeRender,\n        onAfterRender: props.onAfterRender\n      });\n    }\n  }, {\n    key: \"_getViewState\",\n    value: function _getViewState() {\n      return this.props.viewState || this.viewState;\n    }\n  }, {\n    key: \"_getViews\",\n    value: function _getViews() {\n      var views = this.props.views || [new MapView({\n        id: 'default-view'\n      })];\n      views = Array.isArray(views) ? views : [views];\n      if (views.length && this.props.controller) {\n        views[0].props.controller = this.props.controller;\n      }\n      return views;\n    }\n  }, {\n    key: \"_onPointerMove\",\n    value: function _onPointerMove(event) {\n      var _pickRequest = this._pickRequest;\n      if (event.type === 'pointerleave') {\n        _pickRequest.x = -1;\n        _pickRequest.y = -1;\n        _pickRequest.radius = 0;\n      } else if (event.leftButton || event.rightButton) {\n        return;\n      } else {\n        var pos = event.offsetCenter;\n        if (!pos) {\n          return;\n        }\n        _pickRequest.x = pos.x;\n        _pickRequest.y = pos.y;\n        _pickRequest.radius = this.props.pickingRadius;\n      }\n      if (this.layerManager) {\n        this.layerManager.context.mousePosition = {\n          x: _pickRequest.x,\n          y: _pickRequest.y\n        };\n      }\n      _pickRequest.event = event;\n      _pickRequest.mode = 'hover';\n    }\n  }, {\n    key: \"_pickAndCallback\",\n    value: function _pickAndCallback() {\n      var _pickRequest = this._pickRequest;\n      if (_pickRequest.event) {\n        var _this$_pick = this._pick('pickObject', 'pickObject Time', _pickRequest),\n          result = _this$_pick.result,\n          emptyInfo = _this$_pick.emptyInfo;\n        var pickedInfo = emptyInfo;\n        var handled = false;\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n        try {\n          for (var _iterator2 = result[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var info = _step2.value;\n            pickedInfo = info;\n            handled = info.layer.onHover(info, _pickRequest.event);\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n              _iterator2[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n        if (!handled && this.props.onHover) {\n          this.props.onHover(pickedInfo, _pickRequest.event);\n        }\n        if (this.props.getTooltip) {\n          var displayInfo = this.props.getTooltip(pickedInfo);\n          this.tooltip.setTooltip(displayInfo, pickedInfo.x, pickedInfo.y);\n        }\n        _pickRequest.event = null;\n      }\n    }\n  }, {\n    key: \"_updateCursor\",\n    value: function _updateCursor() {\n      var container = this.props.parent || this.canvas;\n      if (container) {\n        container.style.cursor = this.props.getCursor(this.interactiveState);\n      }\n    }\n  }, {\n    key: \"_setGLContext\",\n    value: function _setGLContext(gl) {\n      if (this.layerManager) {\n        return;\n      }\n      if (!this.canvas) {\n        this.canvas = gl.canvas;\n        instrumentGLContext(gl, {\n          enable: true,\n          copyState: true\n        });\n      }\n      this.tooltip = new Tooltip(this.canvas);\n      setParameters(gl, {\n        blend: true,\n        blendFunc: [770, 771, 1, 771],\n        polygonOffsetFill: true,\n        depthTest: true,\n        depthFunc: 515\n      });\n      this.props.onWebGLInitialized(gl);\n      var timeline = new Timeline();\n      timeline.play();\n      this.animationLoop.attachTimeline(timeline);\n      this.eventManager = new EventManager(this.props.parent || gl.canvas, {\n        touchAction: this.props.touchAction,\n        events: {\n          pointerdown: this._onPointerDown,\n          pointermove: this._onPointerMove,\n          pointerleave: this._onPointerMove\n        }\n      });\n      for (var eventType in EVENTS) {\n        this.eventManager.on(eventType, this._onEvent);\n      }\n      this.viewManager = new ViewManager({\n        timeline: timeline,\n        eventManager: this.eventManager,\n        onViewStateChange: this._onViewStateChange,\n        onInteractiveStateChange: this._onInteractiveStateChange,\n        views: this._getViews(),\n        viewState: this._getViewState(),\n        width: this.width,\n        height: this.height\n      });\n      var viewport = this.viewManager.getViewports()[0];\n      this.layerManager = new LayerManager(gl, {\n        deck: this,\n        stats: this.stats,\n        viewport: viewport,\n        timeline: timeline\n      });\n      this.effectManager = new EffectManager();\n      this.deckRenderer = new DeckRenderer(gl);\n      this.deckPicker = new DeckPicker(gl);\n      this.setProps(this.props);\n      this._updateCanvasSize();\n      this.props.onLoad();\n    }\n  }, {\n    key: \"_drawLayers\",\n    value: function _drawLayers(redrawReason, renderOptions) {\n      var gl = this.layerManager.context.gl;\n      setParameters(gl, this.props.parameters);\n      this.props.onBeforeRender({\n        gl: gl\n      });\n      this.deckRenderer.renderLayers(Object.assign({\n        target: this.props._framebuffer,\n        layers: this.layerManager.getLayers(),\n        viewports: this.viewManager.getViewports(),\n        onViewportActive: this.layerManager.activateViewport,\n        views: this.viewManager.getViews(),\n        pass: 'screen',\n        redrawReason: redrawReason,\n        effects: this.effectManager.getEffects()\n      }, renderOptions));\n      this.props.onAfterRender({\n        gl: gl\n      });\n    }\n  }, {\n    key: \"_onRendererInitialized\",\n    value: function _onRendererInitialized(_ref2) {\n      var gl = _ref2.gl;\n      this._setGLContext(gl);\n    }\n  }, {\n    key: \"_onRenderFrame\",\n    value: function _onRenderFrame(animationProps) {\n      this._getFrameStats();\n      if (this._metricsCounter++ % 60 === 0) {\n        this._getMetrics();\n        this.stats.reset();\n        log.table(4, this.metrics)();\n        if (this.props._onMetrics) {\n          this.props._onMetrics(this.metrics);\n        }\n      }\n      this._updateCanvasSize();\n      this._updateCursor();\n      this.layerManager.updateLayers();\n      this._pickAndCallback();\n      this.redraw(false);\n      if (this.viewManager) {\n        this.viewManager.updateViewStates();\n      }\n    }\n  }, {\n    key: \"_onViewStateChange\",\n    value: function _onViewStateChange(params) {\n      var viewState = this.props.onViewStateChange(params) || params.viewState;\n      if (this.viewState) {\n        this.viewState = _objectSpread({}, this.viewState, _defineProperty({}, params.viewId, viewState));\n        if (!this.props.viewState) {\n          this.viewManager.setProps({\n            viewState: this.viewState\n          });\n        }\n      }\n    }\n  }, {\n    key: \"_onInteractiveStateChange\",\n    value: function _onInteractiveStateChange(_ref3) {\n      var _ref3$isDragging = _ref3.isDragging,\n        isDragging = _ref3$isDragging === void 0 ? false : _ref3$isDragging;\n      if (isDragging !== this.interactiveState.isDragging) {\n        this.interactiveState.isDragging = isDragging;\n      }\n    }\n  }, {\n    key: \"_onEvent\",\n    value: function _onEvent(event) {\n      var eventOptions = EVENTS[event.type];\n      var pos = event.offsetCenter;\n      if (!eventOptions || !pos) {\n        return;\n      }\n      var layers = this.layerManager.getLayers();\n      var info = this.deckPicker.getLastPickedObject({\n        x: pos.x,\n        y: pos.y,\n        layers: layers,\n        viewports: this.getViewports(pos)\n      }, this._lastPointerDownInfo);\n      var layer = info.layer;\n      var layerHandler = layer && (layer[eventOptions.handler] || layer.props[eventOptions.handler]);\n      var rootHandler = this.props[eventOptions.handler];\n      var handled = false;\n      if (layerHandler) {\n        handled = layerHandler.call(layer, info, event);\n      }\n      if (!handled && rootHandler) {\n        rootHandler(info, event);\n      }\n    }\n  }, {\n    key: \"_onPointerDown\",\n    value: function _onPointerDown(event) {\n      var pos = event.offsetCenter;\n      this._lastPointerDownInfo = this.pickObject({\n        x: pos.x,\n        y: pos.y,\n        radius: this.props.pickingRadius\n      });\n    }\n  }, {\n    key: \"_getFrameStats\",\n    value: function _getFrameStats() {\n      var stats = this.stats;\n      stats.get('frameRate').timeEnd();\n      stats.get('frameRate').timeStart();\n      var animationLoopStats = this.animationLoop.stats;\n      stats.get('GPU Time').addTime(animationLoopStats.get('GPU Time').lastTiming);\n      stats.get('CPU Time').addTime(animationLoopStats.get('CPU Time').lastTiming);\n    }\n  }, {\n    key: \"_getMetrics\",\n    value: function _getMetrics() {\n      var metrics = this.metrics,\n        stats = this.stats;\n      metrics.fps = stats.get('frameRate').getHz();\n      metrics.setPropsTime = stats.get('setProps Time').time;\n      metrics.updateAttributesTime = stats.get('Update Attributes').time;\n      metrics.framesRedrawn = stats.get('Redraw Count').count;\n      metrics.pickTime = stats.get('pickObject Time').time + stats.get('pickMultipleObjects Time').time + stats.get('pickObjects Time').time;\n      metrics.pickCount = stats.get('Pick Count').count;\n      metrics.gpuTime = stats.get('GPU Time').time;\n      metrics.cpuTime = stats.get('CPU Time').time;\n      metrics.gpuTimePerFrame = stats.get('GPU Time').getAverageTime();\n      metrics.cpuTimePerFrame = stats.get('CPU Time').getAverageTime();\n      var memoryStats = lumaStats.get('Memory Usage');\n      metrics.bufferMemory = memoryStats.get('Buffer Memory').count;\n      metrics.textureMemory = memoryStats.get('Texture Memory').count;\n      metrics.renderbufferMemory = memoryStats.get('Renderbuffer Memory').count;\n      metrics.gpuMemory = memoryStats.get('GPU Memory').count;\n    }\n  }]);\n  return Deck;\n}();\nexport { Deck as default };\nDeck.getPropTypes = getPropTypes;\nDeck.defaultProps = defaultProps;\nDeck.VERSION = deckGlobal.VERSION;","map":{"version":3,"sources":["../../../src/lib/deck.js"],"names":["LayerManager","ViewManager","MapView","EffectManager","Effect","DeckRenderer","DeckPicker","Tooltip","log","deepEqual","deckGlobal","getBrowser","AnimationLoop","createGLContext","instrumentGLContext","setParameters","Timeline","lumaStats","Stats","EventManager","assert","EVENTS","noop","getCursor","isDragging","getPropTypes","PropTypes","id","string","width","oneOfType","number","height","layers","object","array","layerFilter","func","views","viewState","effects","arrayOf","instanceOf","controller","bool","gl","glOptions","parameters","pickingRadius","useDevicePixels","touchAction","onWebGLInitialized","onResize","onViewStateChange","onBeforeRender","onAfterRender","onLoad","onError","debug","drawPickingColors","_framebuffer","_animate","defaultProps","_onMetrics","Deck","props","Object","assign","viewManager","layerManager","effectManager","deckRenderer","deckPicker","_needsRedraw","_pickRequest","_lastPointerDownInfo","interactiveState","_onEvent","bind","_onPointerDown","_onPointerMove","_pickAndCallback","_onRendererInitialized","_onRenderFrame","_onViewStateChange","_onInteractiveStateChange","initialViewState","warn","document","canvas","_createCanvas","animationLoop","_createAnimationLoop","stats","metrics","fps","setPropsTime","updateAttributesTime","framesRedrawn","pickTime","pickCount","gpuTime","gpuTimePerFrame","cpuTime","cpuTimePerFrame","bufferMemory","textureMemory","renderbufferMemory","gpuMemory","_metricsCounter","setProps","start","stop","finalize","eventManager","destroy","tooltip","remove","parentElement","removeChild","get","timeStart","removed","_setCanvasSize","resolvedProps","create","_getViews","_getViewState","activateViewport","getViewports","timeEnd","opts","clearRedrawFlags","redraw","viewManagerNeedsRedraw","needsRedraw","layerManagerNeedsRedraw","effectManagerNeedsRedraw","deckRendererNeedsRedraw","force","redrawReason","incrementCount","_customRender","_drawLayers","rect","infos","_pick","result","length","depth","resources","forceUpdate","resourceManager","add","resourceId","data","resourceIds","method","statKey","getLayers","viewports","onViewportActive","getElementById","createElement","parent","body","appendChild","style","Number","isFinite","position","_checkForCanvasSizeChange","newWidth","clientWidth","newHeight","clientHeight","autoResizeDrawingBuffer","autoResizeViewport","onCreateContext","onInitialize","onRender","Array","isArray","event","type","x","y","radius","leftButton","rightButton","pos","offsetCenter","context","mousePosition","mode","emptyInfo","pickedInfo","handled","info","layer","onHover","getTooltip","displayInfo","setTooltip","container","cursor","enable","copyState","blend","blendFunc","polygonOffsetFill","depthTest","depthFunc","timeline","play","attachTimeline","events","pointerdown","pointermove","pointerleave","eventType","on","onInteractiveStateChange","viewport","deck","_updateCanvasSize","renderOptions","renderLayers","target","getViews","pass","getEffects","_setGLContext","animationProps","_getFrameStats","_getMetrics","reset","table","_updateCursor","updateLayers","updateViewStates","params","viewId","eventOptions","getLastPickedObject","layerHandler","handler","rootHandler","call","pickObject","animationLoopStats","addTime","lastTiming","getHz","time","count","getAverageTime","memoryStats","VERSION"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport LayerManager from './layer-manager';\nimport ViewManager from './view-manager';\nimport MapView from '../views/map-view';\nimport EffectManager from './effect-manager';\nimport Effect from './effect';\nimport DeckRenderer from './deck-renderer';\nimport DeckPicker from './deck-picker';\nimport Tooltip from './tooltip';\nimport log from '../utils/log';\nimport {deepEqual} from '../utils/deep-equal';\nimport deckGlobal from './init';\n\nimport {getBrowser} from 'probe.gl/env';\nimport GL from '@luma.gl/constants';\nimport {\n  AnimationLoop,\n  createGLContext,\n  instrumentGLContext,\n  setParameters,\n  Timeline,\n  lumaStats\n} from '@luma.gl/core';\nimport {Stats} from 'probe.gl';\nimport {EventManager} from 'mjolnir.js';\n\nimport assert from '../utils/assert';\nimport {EVENTS} from './constants';\n/* global document */\n\nfunction noop() {}\n\nconst getCursor = ({isDragging}) => (isDragging ? 'grabbing' : 'grab');\n\nfunction getPropTypes(PropTypes) {\n  // Note: Arrays (layers, views, ) can contain falsy values\n  return {\n    id: PropTypes.string,\n    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n    // layer/view/controller settings\n    layers: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    layerFilter: PropTypes.func,\n    views: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    viewState: PropTypes.object,\n    effects: PropTypes.arrayOf(PropTypes.instanceOf(Effect)),\n    controller: PropTypes.oneOfType([PropTypes.func, PropTypes.bool, PropTypes.object]),\n\n    // GL settings\n    gl: PropTypes.object,\n    glOptions: PropTypes.object,\n    parameters: PropTypes.object,\n    pickingRadius: PropTypes.number,\n    useDevicePixels: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n    touchAction: PropTypes.string,\n\n    // Callbacks\n    onWebGLInitialized: PropTypes.func,\n    onResize: PropTypes.func,\n    onViewStateChange: PropTypes.func,\n    onBeforeRender: PropTypes.func,\n    onAfterRender: PropTypes.func,\n    onLoad: PropTypes.func,\n    onError: PropTypes.func,\n\n    // Debug settings\n    debug: PropTypes.bool,\n    drawPickingColors: PropTypes.bool,\n\n    // Experimental props\n    _framebuffer: PropTypes.object,\n    // Forces a redraw every animation frame\n    _animate: PropTypes.bool\n  };\n}\n\nconst defaultProps = {\n  id: 'deckgl-overlay',\n  width: '100%',\n  height: '100%',\n\n  pickingRadius: 0,\n  layerFilter: null,\n  glOptions: {},\n  gl: null,\n  layers: [],\n  effects: [],\n  views: null,\n  controller: null, // Rely on external controller, e.g. react-map-gl\n  useDevicePixels: true,\n  touchAction: 'none',\n  _framebuffer: null,\n  _animate: false,\n\n  onWebGLInitialized: noop,\n  onResize: noop,\n  onViewStateChange: noop,\n  onBeforeRender: noop,\n  onAfterRender: noop,\n  onLoad: noop,\n  onError: null,\n  _onMetrics: null,\n\n  getCursor,\n\n  debug: false,\n  drawPickingColors: false\n};\n\n/* eslint-disable max-statements */\nexport default class Deck {\n  constructor(props) {\n    props = Object.assign({}, defaultProps, props);\n    this.props = {};\n\n    this.width = 0; // \"read-only\", auto-updated from canvas\n    this.height = 0; // \"read-only\", auto-updated from canvas\n\n    // Maps view descriptors to vieports, rebuilds when width/height/viewState/views change\n    this.viewManager = null;\n    this.layerManager = null;\n    this.effectManager = null;\n    this.deckRenderer = null;\n    this.deckPicker = null;\n\n    this._needsRedraw = true;\n    this._pickRequest = {};\n    // Pick and store the object under the pointer on `pointerdown`.\n    // This object is reused for subsequent `onClick` and `onDrag*` callbacks.\n    this._lastPointerDownInfo = null;\n\n    this.viewState = null; // Internal view state if no callback is supplied\n    this.interactiveState = {\n      isDragging: false // Whether the cursor is down\n    };\n\n    // Bind methods\n    this._onEvent = this._onEvent.bind(this);\n    this._onPointerDown = this._onPointerDown.bind(this);\n    this._onPointerMove = this._onPointerMove.bind(this);\n    this._pickAndCallback = this._pickAndCallback.bind(this);\n    this._onRendererInitialized = this._onRendererInitialized.bind(this);\n    this._onRenderFrame = this._onRenderFrame.bind(this);\n    this._onViewStateChange = this._onViewStateChange.bind(this);\n    this._onInteractiveStateChange = this._onInteractiveStateChange.bind(this);\n\n    if (props.viewState && props.initialViewState) {\n      log.warn(\n        'View state tracking is disabled. Use either `initialViewState` for auto update or `viewState` for manual update.'\n      )();\n    }\n    if (getBrowser() === 'IE') {\n      log.warn('IE 11 support will be deprecated in v8.0')();\n    }\n\n    if (!props.gl) {\n      // Note: LayerManager creation deferred until gl context available\n      if (typeof document !== 'undefined') {\n        this.canvas = this._createCanvas(props);\n      }\n    }\n    this.animationLoop = this._createAnimationLoop(props);\n\n    this.stats = new Stats({id: 'deck.gl'});\n    this.metrics = {\n      fps: 0,\n      setPropsTime: 0,\n      updateAttributesTime: 0,\n      framesRedrawn: 0,\n      pickTime: 0,\n      pickCount: 0,\n      gpuTime: 0,\n      gpuTimePerFrame: 0,\n      cpuTime: 0,\n      cpuTimePerFrame: 0,\n      bufferMemory: 0,\n      textureMemory: 0,\n      renderbufferMemory: 0,\n      gpuMemory: 0\n    };\n    this._metricsCounter = 0;\n\n    this.setProps(props);\n\n    this.animationLoop.start();\n  }\n\n  finalize() {\n    this.animationLoop.stop();\n    this.animationLoop = null;\n    this._lastPointerDownInfo = null;\n\n    if (this.layerManager) {\n      this.layerManager.finalize();\n      this.layerManager = null;\n\n      this.viewManager.finalize();\n      this.viewManager = null;\n\n      this.effectManager.finalize();\n      this.effectManager = null;\n\n      this.deckRenderer.finalize();\n      this.deckRenderer = null;\n\n      this.deckPicker.finalize();\n      this.deckPicker = null;\n\n      this.eventManager.destroy();\n      this.eventManager = null;\n\n      this.tooltip.remove();\n      this.tooltip = null;\n    }\n\n    if (!this.props.canvas && !this.props.gl && this.canvas) {\n      // remove internally created canvas\n      this.canvas.parentElement.removeChild(this.canvas);\n      this.canvas = null;\n    }\n  }\n\n  setProps(props) {\n    this.stats.get('setProps Time').timeStart();\n\n    if ('onLayerHover' in props) {\n      log.removed('onLayerHover', 'onHover')();\n    }\n    if ('onLayerClick' in props) {\n      log.removed('onLayerClick', 'onClick')();\n    }\n    if (props.initialViewState && !deepEqual(this.props.initialViewState, props.initialViewState)) {\n      // Overwrite internal view state\n      this.viewState = props.initialViewState;\n    }\n\n    // Merge with existing props\n    Object.assign(this.props, props);\n\n    // Update CSS size of canvas\n    this._setCanvasSize(this.props);\n\n    // We need to overwrite CSS style width and height with actual, numeric values\n    const resolvedProps = Object.create(this.props);\n    Object.assign(resolvedProps, {\n      views: this._getViews(),\n      width: this.width,\n      height: this.height,\n      viewState: this._getViewState()\n    });\n\n    // Update the animation loop\n    this.animationLoop.setProps(resolvedProps);\n\n    // If initialized, update sub manager props\n    if (this.layerManager) {\n      this.viewManager.setProps(resolvedProps);\n      // Make sure that any new layer gets initialized with the current viewport\n      this.layerManager.activateViewport(this.getViewports()[0]);\n      this.layerManager.setProps(resolvedProps);\n      this.effectManager.setProps(resolvedProps);\n      this.deckRenderer.setProps(resolvedProps);\n      this.deckPicker.setProps(resolvedProps);\n    }\n\n    this.stats.get('setProps Time').timeEnd();\n  }\n\n  // Public API\n  // Check if a redraw is needed\n  // Returns `false` or a string summarizing the redraw reason\n  // opts.clearRedrawFlags (Boolean) - clear the redraw flag. Default `true`\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    if (this.props._animate) {\n      return 'Deck._animate';\n    }\n\n    let redraw = this._needsRedraw;\n\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    const viewManagerNeedsRedraw = this.viewManager.needsRedraw(opts);\n    const layerManagerNeedsRedraw = this.layerManager.needsRedraw(opts);\n    const effectManagerNeedsRedraw = this.effectManager.needsRedraw(opts);\n    const deckRendererNeedsRedraw = this.deckRenderer.needsRedraw(opts);\n\n    redraw =\n      redraw ||\n      viewManagerNeedsRedraw ||\n      layerManagerNeedsRedraw ||\n      effectManagerNeedsRedraw ||\n      deckRendererNeedsRedraw;\n    return redraw;\n  }\n\n  redraw(force) {\n    if (!this.layerManager) {\n      // Not yet initialized\n      return;\n    }\n    // If force is falsy, check if we need to redraw\n    const redrawReason = force || this.needsRedraw({clearRedrawFlags: true});\n\n    if (!redrawReason) {\n      return;\n    }\n\n    this.stats.get('Redraw Count').incrementCount();\n    if (this.props._customRender) {\n      this.props._customRender(redrawReason);\n    } else {\n      this._drawLayers(redrawReason);\n    }\n  }\n\n  getViews() {\n    return this.viewManager.views;\n  }\n\n  // Get a set of viewports for a given width and height\n  getViewports(rect) {\n    return this.viewManager.getViewports(rect);\n  }\n\n  /* {x, y, radius = 0, layerIds = null, unproject3D} */\n  pickObject(opts) {\n    const infos = this._pick('pickObject', 'pickObject Time', opts).result;\n    return infos.length ? infos[0] : null;\n  }\n\n  /* {x, y, radius = 0, layerIds = null, unproject3D, depth = 10} */\n  pickMultipleObjects(opts) {\n    opts.depth = opts.depth || 10;\n    return this._pick('pickObject', 'pickMultipleObjects Time', opts).result;\n  }\n\n  /* {x, y, width = 1, height = 1, layerIds = null} */\n  pickObjects(opts) {\n    return this._pick('pickObjects', 'pickObjects Time', opts);\n  }\n\n  // Experimental\n\n  _addResources(resources, forceUpdate = false) {\n    for (const id in resources) {\n      this.layerManager.resourceManager.add({resourceId: id, data: resources[id], forceUpdate});\n    }\n  }\n\n  _removeResources(resourceIds) {\n    for (const id of resourceIds) {\n      this.layerManager.resourceManager.remove(id);\n    }\n  }\n\n  // Private Methods\n\n  _pick(method, statKey, opts) {\n    const {stats} = this;\n\n    stats.get('Pick Count').incrementCount();\n    stats.get(statKey).timeStart();\n\n    const infos = this.deckPicker[method](\n      Object.assign(\n        {\n          layers: this.layerManager.getLayers(opts),\n          viewports: this.getViewports(opts),\n          onViewportActive: this.layerManager.activateViewport\n        },\n        opts\n      )\n    );\n\n    stats.get(statKey).timeEnd();\n\n    return infos;\n  }\n\n  // canvas, either string, canvas or `null`\n  _createCanvas(props) {\n    let canvas = props.canvas;\n\n    // TODO EventManager should accept element id\n    if (typeof canvas === 'string') {\n      canvas = document.getElementById(canvas);\n      assert(canvas);\n    }\n\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      const parent = props.parent || document.body;\n      parent.appendChild(canvas);\n    }\n\n    const {id, style} = props;\n    canvas.id = id;\n    Object.assign(canvas.style, style);\n\n    return canvas;\n  }\n\n  // Updates canvas width and/or height, if provided as props\n  _setCanvasSize(props) {\n    if (!this.canvas) {\n      return;\n    }\n\n    let {width, height} = props;\n    // Set size ONLY if props are being provided, otherwise let canvas be layouted freely\n    if (width || width === 0) {\n      width = Number.isFinite(width) ? `${width}px` : width;\n      this.canvas.style.width = width;\n    }\n    if (height || height === 0) {\n      height = Number.isFinite(height) ? `${height}px` : height;\n      // Note: position==='absolute' required for height 100% to work\n      this.canvas.style.position = 'absolute';\n      this.canvas.style.height = height;\n    }\n  }\n\n  // If canvas size has changed, updates\n  _updateCanvasSize() {\n    if (this._checkForCanvasSizeChange()) {\n      const {width, height} = this;\n      this.viewManager.setProps({width, height});\n      this.props.onResize({width: this.width, height: this.height});\n    }\n  }\n\n  // If canvas size has changed, reads out the new size and returns true\n  _checkForCanvasSizeChange() {\n    const {canvas} = this;\n    if (!canvas) {\n      return false;\n    }\n    // Fallback to width/height when clientWidth/clientHeight are 0 or undefined.\n    const newWidth = canvas.clientWidth || canvas.width;\n    const newHeight = canvas.clientHeight || canvas.height;\n    if (newWidth !== this.width || newHeight !== this.height) {\n      this.width = newWidth;\n      this.height = newHeight;\n      return true;\n    }\n    return false;\n  }\n\n  _createAnimationLoop(props) {\n    const {width, height, gl, glOptions, debug, useDevicePixels, autoResizeDrawingBuffer} = props;\n\n    return new AnimationLoop({\n      width,\n      height,\n      useDevicePixels,\n      autoResizeDrawingBuffer,\n      autoResizeViewport: false,\n      gl,\n      onCreateContext: opts =>\n        createGLContext(Object.assign({}, glOptions, opts, {canvas: this.canvas, debug})),\n      onInitialize: this._onRendererInitialized,\n      onRender: this._onRenderFrame,\n      onBeforeRender: props.onBeforeRender,\n      onAfterRender: props.onAfterRender\n    });\n  }\n\n  // Get the most relevant view state: props.viewState, if supplied, shadows internal viewState\n  // TODO: For backwards compatibility ensure numeric width and height is added to the viewState\n  _getViewState() {\n    return this.props.viewState || this.viewState;\n  }\n\n  // Get the view descriptor list\n  _getViews() {\n    // Default to a full screen map view port\n    let views = this.props.views || [new MapView({id: 'default-view'})];\n    views = Array.isArray(views) ? views : [views];\n    if (views.length && this.props.controller) {\n      // Backward compatibility: support controller prop\n      views[0].props.controller = this.props.controller;\n    }\n    return views;\n  }\n\n  // The `pointermove` event may fire multiple times in between two animation frames,\n  // it's a waste of time to run picking without rerender. Instead we save the last pick\n  // request and only do it once on the next animation frame.\n  _onPointerMove(event) {\n    const {_pickRequest} = this;\n    if (event.type === 'pointerleave') {\n      _pickRequest.x = -1;\n      _pickRequest.y = -1;\n      _pickRequest.radius = 0;\n    } else if (event.leftButton || event.rightButton) {\n      // Do not trigger onHover callbacks if mouse button is down.\n      return;\n    } else {\n      const pos = event.offsetCenter;\n      // Do not trigger callbacks when click/hover position is invalid. Doing so will cause a\n      // assertion error when attempting to unproject the position.\n      if (!pos) {\n        return;\n      }\n      _pickRequest.x = pos.x;\n      _pickRequest.y = pos.y;\n      _pickRequest.radius = this.props.pickingRadius;\n    }\n\n    if (this.layerManager) {\n      this.layerManager.context.mousePosition = {x: _pickRequest.x, y: _pickRequest.y};\n    }\n\n    _pickRequest.event = event;\n    _pickRequest.mode = 'hover';\n  }\n\n  // Actually run picking\n  _pickAndCallback() {\n    const {_pickRequest} = this;\n\n    if (_pickRequest.event) {\n      // Perform picking\n      const {result, emptyInfo} = this._pick('pickObject', 'pickObject Time', _pickRequest);\n\n      // There are 4 possible scenarios:\n      // result is [outInfo, pickedInfo] (moved from one pickable layer to another)\n      // result is [outInfo] (moved outside of a pickable layer)\n      // result is [pickedInfo] (moved into or over a pickable layer)\n      // result is [] (nothing is or was picked)\n      //\n      // `layer.props.onHover` should be called on all affected layers (out/over)\n      // `deck.props.onHover` should be called with the picked info if any, or empty info otherwise\n      // `deck.props.getTooltip` should be called with the picked info if any, or empty info otherwise\n\n      // Execute callbacks\n      let pickedInfo = emptyInfo;\n      let handled = false;\n      for (const info of result) {\n        pickedInfo = info;\n        handled = info.layer.onHover(info, _pickRequest.event);\n      }\n      if (!handled && this.props.onHover) {\n        this.props.onHover(pickedInfo, _pickRequest.event);\n      }\n\n      // Update tooltip\n      if (this.props.getTooltip) {\n        const displayInfo = this.props.getTooltip(pickedInfo);\n        this.tooltip.setTooltip(displayInfo, pickedInfo.x, pickedInfo.y);\n      }\n\n      // Clear pending pickRequest\n      _pickRequest.event = null;\n    }\n  }\n\n  _updateCursor() {\n    const container = this.props.parent || this.canvas;\n    if (container) {\n      container.style.cursor = this.props.getCursor(this.interactiveState);\n    }\n  }\n\n  _setGLContext(gl) {\n    if (this.layerManager) {\n      return;\n    }\n\n    // if external context...\n    if (!this.canvas) {\n      this.canvas = gl.canvas;\n      instrumentGLContext(gl, {enable: true, copyState: true});\n    }\n\n    this.tooltip = new Tooltip(this.canvas);\n\n    setParameters(gl, {\n      blend: true,\n      blendFunc: [GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA, GL.ONE, GL.ONE_MINUS_SRC_ALPHA],\n      polygonOffsetFill: true,\n      depthTest: true,\n      depthFunc: GL.LEQUAL\n    });\n\n    this.props.onWebGLInitialized(gl);\n\n    // timeline for transitions\n    const timeline = new Timeline();\n    timeline.play();\n    this.animationLoop.attachTimeline(timeline);\n\n    this.eventManager = new EventManager(this.props.parent || gl.canvas, {\n      touchAction: this.props.touchAction,\n      events: {\n        pointerdown: this._onPointerDown,\n        pointermove: this._onPointerMove,\n        pointerleave: this._onPointerMove\n      }\n    });\n    for (const eventType in EVENTS) {\n      this.eventManager.on(eventType, this._onEvent);\n    }\n\n    this.viewManager = new ViewManager({\n      timeline,\n      eventManager: this.eventManager,\n      onViewStateChange: this._onViewStateChange,\n      onInteractiveStateChange: this._onInteractiveStateChange,\n      views: this._getViews(),\n      viewState: this._getViewState(),\n      width: this.width,\n      height: this.height\n    });\n\n    // viewManager must be initialized before layerManager\n    // layerManager depends on viewport created by viewManager.\n    const viewport = this.viewManager.getViewports()[0];\n\n    // Note: avoid React setState due GL animation loop / setState timing issue\n    this.layerManager = new LayerManager(gl, {\n      deck: this,\n      stats: this.stats,\n      viewport,\n      timeline\n    });\n\n    this.effectManager = new EffectManager();\n\n    this.deckRenderer = new DeckRenderer(gl);\n\n    this.deckPicker = new DeckPicker(gl);\n\n    this.setProps(this.props);\n\n    this._updateCanvasSize();\n    this.props.onLoad();\n  }\n\n  _drawLayers(redrawReason, renderOptions) {\n    const {gl} = this.layerManager.context;\n\n    setParameters(gl, this.props.parameters);\n\n    this.props.onBeforeRender({gl});\n\n    this.deckRenderer.renderLayers(\n      Object.assign(\n        {\n          target: this.props._framebuffer,\n          layers: this.layerManager.getLayers(),\n          viewports: this.viewManager.getViewports(),\n          onViewportActive: this.layerManager.activateViewport,\n          views: this.viewManager.getViews(),\n          pass: 'screen',\n          redrawReason,\n          effects: this.effectManager.getEffects()\n        },\n        renderOptions\n      )\n    );\n\n    this.props.onAfterRender({gl});\n  }\n\n  // Callbacks\n\n  _onRendererInitialized({gl}) {\n    this._setGLContext(gl);\n  }\n\n  _onRenderFrame(animationProps) {\n    this._getFrameStats();\n\n    // Log perf stats every second\n    if (this._metricsCounter++ % 60 === 0) {\n      this._getMetrics();\n      this.stats.reset();\n      log.table(4, this.metrics)();\n\n      // Experimental: report metrics\n      if (this.props._onMetrics) {\n        this.props._onMetrics(this.metrics);\n      }\n    }\n\n    this._updateCanvasSize();\n\n    this._updateCursor();\n\n    // Update layers if needed (e.g. some async prop has loaded)\n    // Note: This can trigger a redraw\n    this.layerManager.updateLayers();\n\n    // Perform picking request if any\n    this._pickAndCallback();\n\n    // Redraw if necessary\n    this.redraw(false);\n\n    // Update viewport transition if needed\n    // Note: this can trigger `onViewStateChange`, and affect layers\n    // We want to defer these changes to the next frame\n    if (this.viewManager) {\n      this.viewManager.updateViewStates();\n    }\n  }\n\n  // Callbacks\n\n  _onViewStateChange(params) {\n    // Let app know that view state is changing, and give it a chance to change it\n    const viewState = this.props.onViewStateChange(params) || params.viewState;\n\n    // If initialViewState was set on creation, auto track position\n    if (this.viewState) {\n      this.viewState = {...this.viewState, [params.viewId]: viewState};\n      if (!this.props.viewState) {\n        // Apply internal view state\n        this.viewManager.setProps({viewState: this.viewState});\n      }\n    }\n  }\n\n  _onInteractiveStateChange({isDragging = false}) {\n    if (isDragging !== this.interactiveState.isDragging) {\n      this.interactiveState.isDragging = isDragging;\n    }\n  }\n\n  _onEvent(event) {\n    const eventOptions = EVENTS[event.type];\n    const pos = event.offsetCenter;\n\n    if (!eventOptions || !pos) {\n      return;\n    }\n\n    // Reuse last picked object\n    const layers = this.layerManager.getLayers();\n    const info = this.deckPicker.getLastPickedObject(\n      {\n        x: pos.x,\n        y: pos.y,\n        layers,\n        viewports: this.getViewports(pos)\n      },\n      this._lastPointerDownInfo\n    );\n\n    const {layer} = info;\n    const layerHandler =\n      layer && (layer[eventOptions.handler] || layer.props[eventOptions.handler]);\n    const rootHandler = this.props[eventOptions.handler];\n    let handled = false;\n\n    if (layerHandler) {\n      handled = layerHandler.call(layer, info, event);\n    }\n    if (!handled && rootHandler) {\n      rootHandler(info, event);\n    }\n  }\n\n  _onPointerDown(event) {\n    const pos = event.offsetCenter;\n    this._lastPointerDownInfo = this.pickObject({\n      x: pos.x,\n      y: pos.y,\n      radius: this.props.pickingRadius\n    });\n  }\n\n  _getFrameStats() {\n    const {stats} = this;\n    stats.get('frameRate').timeEnd();\n    stats.get('frameRate').timeStart();\n\n    // Get individual stats from luma.gl so reset works\n    const animationLoopStats = this.animationLoop.stats;\n    stats.get('GPU Time').addTime(animationLoopStats.get('GPU Time').lastTiming);\n    stats.get('CPU Time').addTime(animationLoopStats.get('CPU Time').lastTiming);\n  }\n\n  _getMetrics() {\n    const {metrics, stats} = this;\n    metrics.fps = stats.get('frameRate').getHz();\n    metrics.setPropsTime = stats.get('setProps Time').time;\n    metrics.updateAttributesTime = stats.get('Update Attributes').time;\n    metrics.framesRedrawn = stats.get('Redraw Count').count;\n    metrics.pickTime =\n      stats.get('pickObject Time').time +\n      stats.get('pickMultipleObjects Time').time +\n      stats.get('pickObjects Time').time;\n    metrics.pickCount = stats.get('Pick Count').count;\n\n    // Luma stats\n    metrics.gpuTime = stats.get('GPU Time').time;\n    metrics.cpuTime = stats.get('CPU Time').time;\n    metrics.gpuTimePerFrame = stats.get('GPU Time').getAverageTime();\n    metrics.cpuTimePerFrame = stats.get('CPU Time').getAverageTime();\n\n    const memoryStats = lumaStats.get('Memory Usage');\n    metrics.bufferMemory = memoryStats.get('Buffer Memory').count;\n    metrics.textureMemory = memoryStats.get('Texture Memory').count;\n    metrics.renderbufferMemory = memoryStats.get('Renderbuffer Memory').count;\n    metrics.gpuMemory = memoryStats.get('GPU Memory').count;\n  }\n}\n\nDeck.getPropTypes = getPropTypes;\nDeck.defaultProps = defaultProps;\n\n// This is used to defeat tree shaking of init.js\n// https://github.com/visgl/deck.gl/issues/3213\nDeck.VERSION = deckGlobal.VERSION;\n"]},"metadata":{},"sourceType":"module"}