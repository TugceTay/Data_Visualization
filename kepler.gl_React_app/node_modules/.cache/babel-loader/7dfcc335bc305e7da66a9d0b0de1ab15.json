{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDefaultInteraction = getDefaultInteraction;\nexports.findFieldsToShow = findFieldsToShow;\nexports.getTooltipDisplayDeltaValue = getTooltipDisplayDeltaValue;\nexports.getTooltipDisplayValue = getTooltipDisplayValue;\nexports.BRUSH_CONFIG = exports.TOOLTIP_MINUS_SIGN = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _defaultSettings = require(\"../constants/default-settings\");\nvar _dataUtils = require(\"./data-utils\");\nvar _icons = require(\"../components/common/icons\");\nvar _tooltip = require(\"../constants/tooltip\");\n\n// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n// \\u2212 is the minus sign that d3-format uses for decimal number formatting\nvar TOOLTIP_MINUS_SIGN = \"\\u2212\";\n/**\n * @type {typeof import('./interaction-utils').getDefaultInteraction}\n */\n\nexports.TOOLTIP_MINUS_SIGN = TOOLTIP_MINUS_SIGN;\nfunction getDefaultInteraction() {\n  return {\n    tooltip: {\n      id: 'tooltip',\n      label: 'interactions.tooltip',\n      enabled: true,\n      iconComponent: _icons.Messages,\n      config: {\n        fieldsToShow: {},\n        compareMode: false,\n        compareType: _tooltip.COMPARE_TYPES.ABSOLUTE\n      }\n    },\n    geocoder: {\n      id: 'geocoder',\n      label: 'interactions.geocoder',\n      enabled: false,\n      iconComponent: _icons.Pin,\n      position: null\n    },\n    brush: {\n      id: 'brush',\n      label: 'interactions.brush',\n      enabled: false,\n      iconComponent: _icons.Crosshairs,\n      config: {\n        // size is in km\n        size: 0.5\n      }\n    },\n    coordinate: {\n      id: 'coordinate',\n      label: 'interactions.coordinate',\n      enabled: false,\n      iconComponent: _icons.CursorClick,\n      position: null\n    }\n  };\n}\nvar BRUSH_CONFIG = {\n  range: [0, 50]\n};\n/**\n * @type {typeof import('./interaction-utils').findFieldsToShow}\n */\n\nexports.BRUSH_CONFIG = BRUSH_CONFIG;\nfunction findFieldsToShow(_ref) {\n  var fields = _ref.fields,\n    id = _ref.id;\n\n  // first find default tooltip fields for trips\n  var fieldsToShow = _defaultSettings.DEFAULT_TOOLTIP_FIELDS.reduce(function (prev, curr) {\n    if (fields.find(function (_ref2) {\n      var name = _ref2.name;\n      return curr.name === name;\n    })) {\n      prev.push(curr);\n    }\n    return prev;\n  }, []);\n  return (0, _defineProperty2[\"default\"])({}, id, fieldsToShow.length ? fieldsToShow : autoFindTooltipFields(fields));\n}\nfunction autoFindTooltipFields(fields) {\n  var ptFields = _mergeFieldPairs(_defaultSettings.TRIP_POINT_FIELDS); // filter out the default fields that contains lat and lng and any geometry\n\n  var fieldsToShow = fields.filter(function (_ref4) {\n    var name = _ref4.name,\n      type = _ref4.type;\n    return name.replace(/[_,.]+/g, ' ').trim().split(' ').every(function (seg) {\n      return !ptFields.includes(seg);\n    }) && type !== _defaultSettings.ALL_FIELD_TYPES.geojson && type !== 'object';\n  });\n  return fieldsToShow.slice(0, _defaultSettings.MAX_DEFAULT_TOOLTIPS).map(function (_ref5) {\n    var name = _ref5.name;\n    return {\n      name: name,\n      format: null\n    };\n  });\n}\nfunction _mergeFieldPairs(pairs) {\n  return pairs.reduce(function (prev, pair) {\n    return [].concat((0, _toConsumableArray2[\"default\"])(prev), (0, _toConsumableArray2[\"default\"])(pair));\n  }, []);\n}\n/**\n * @type {typeof import('./interaction-utils').getTooltipDisplayDeltaValue}\n */\n\nfunction getTooltipDisplayDeltaValue(_ref6) {\n  var primaryData = _ref6.primaryData,\n    field = _ref6.field,\n    compareType = _ref6.compareType,\n    data = _ref6.data,\n    fieldIdx = _ref6.fieldIdx,\n    item = _ref6.item;\n  var displayDeltaValue = null;\n  if (primaryData && (\n  // comparison mode only works for numeric field\n  field.type === _defaultSettings.ALL_FIELD_TYPES.integer || field.type === _defaultSettings.ALL_FIELD_TYPES.real)) {\n    var baseDp = primaryData.valueAt(fieldIdx);\n    var dp = data.valueAt(fieldIdx);\n    if ((0, _dataUtils.isNumber)(baseDp) && (0, _dataUtils.isNumber)(dp)) {\n      var deltaValue = compareType === _tooltip.COMPARE_TYPES.RELATIVE ? dp / baseDp - 1 : dp - baseDp;\n      var deltaFormat = compareType === _tooltip.COMPARE_TYPES.RELATIVE ? _tooltip.TOOLTIP_FORMATS.DECIMAL_PERCENT_FULL_2[_tooltip.TOOLTIP_KEY] : item.format || _tooltip.TOOLTIP_FORMATS.DECIMAL_DECIMAL_FIXED_3[_tooltip.TOOLTIP_KEY];\n      displayDeltaValue = (0, _dataUtils.getFormatter)(deltaFormat)(deltaValue); // safely cast string\n\n      displayDeltaValue = (0, _dataUtils.defaultFormatter)(displayDeltaValue);\n      var deltaFirstChar = displayDeltaValue.charAt(0);\n      if (deltaFirstChar !== '+' && deltaFirstChar !== TOOLTIP_MINUS_SIGN) {\n        displayDeltaValue = \"+\".concat(displayDeltaValue);\n      }\n    } else {\n      displayDeltaValue = TOOLTIP_MINUS_SIGN;\n    }\n  }\n  return displayDeltaValue;\n}\n/**\n * @type {typeof import('./interaction-utils').getTooltipDisplayValue}\n */\n\nfunction getTooltipDisplayValue(_ref7) {\n  var item = _ref7.item,\n    field = _ref7.field,\n    data = _ref7.data,\n    fieldIdx = _ref7.fieldIdx;\n  var dataValue = data.valueAt(fieldIdx);\n  if (!(0, _dataUtils.notNullorUndefined)(dataValue)) {\n    return '';\n  }\n  return item.format ? (0, _dataUtils.getFormatter)(item.format, field)(dataValue) : (0, _dataUtils.parseFieldValue)(dataValue, field.type);\n}","map":{"version":3,"sources":["../../src/utils/interaction-utils.js"],"names":["TOOLTIP_MINUS_SIGN","getDefaultInteraction","tooltip","id","label","enabled","iconComponent","Messages","config","fieldsToShow","compareMode","compareType","COMPARE_TYPES","ABSOLUTE","geocoder","Pin","position","brush","Crosshairs","size","coordinate","CursorClick","BRUSH_CONFIG","range","findFieldsToShow","fields","reduce","prev","curr","find","name","push","length","autoFindTooltipFields","ptFields","_mergeFieldPairs","TRIP_POINT_FIELDS","filter","type","replace","trim","split","every","includes","seg","ALL_FIELD_TYPES","geojson","slice","MAX_DEFAULT_TOOLTIPS","map","format","pairs","pair","getTooltipDisplayDeltaValue","primaryData","field","data","fieldIdx","item","displayDeltaValue","integer","real","baseDp","valueAt","dp","deltaValue","RELATIVE","deltaFormat","TOOLTIP_FORMATS","DECIMAL_PERCENT_FULL_2","TOOLTIP_KEY","DECIMAL_DECIMAL_FIXED_3","deltaFirstChar","charAt","getTooltipDisplayValue","dataValue"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  DEFAULT_TOOLTIP_FIELDS,\n  MAX_DEFAULT_TOOLTIPS,\n  ALL_FIELD_TYPES,\n  TRIP_POINT_FIELDS\n} from 'constants/default-settings';\nimport {\n  parseFieldValue,\n  getFormatter,\n  isNumber,\n  defaultFormatter,\n  notNullorUndefined\n} from 'utils/data-utils';\nimport {Messages, Crosshairs, CursorClick, Pin} from 'components/common/icons/index';\nimport {TOOLTIP_FORMATS, TOOLTIP_KEY, COMPARE_TYPES} from 'constants/tooltip';\n\n// \\u2212 is the minus sign that d3-format uses for decimal number formatting\nexport const TOOLTIP_MINUS_SIGN = '\\u2212';\n\n/**\n * @type {typeof import('./interaction-utils').getDefaultInteraction}\n */\nexport function getDefaultInteraction() {\n  return {\n    tooltip: {\n      id: 'tooltip',\n      label: 'interactions.tooltip',\n      enabled: true,\n      iconComponent: Messages,\n      config: {\n        fieldsToShow: {},\n        compareMode: false,\n        compareType: COMPARE_TYPES.ABSOLUTE\n      }\n    },\n    geocoder: {\n      id: 'geocoder',\n      label: 'interactions.geocoder',\n      enabled: false,\n      iconComponent: Pin,\n      position: null\n    },\n    brush: {\n      id: 'brush',\n      label: 'interactions.brush',\n      enabled: false,\n      iconComponent: Crosshairs,\n      config: {\n        // size is in km\n        size: 0.5\n      }\n    },\n    coordinate: {\n      id: 'coordinate',\n      label: 'interactions.coordinate',\n      enabled: false,\n      iconComponent: CursorClick,\n      position: null\n    }\n  };\n}\n\nexport const BRUSH_CONFIG = {\n  range: [0, 50]\n};\n\n/**\n * @type {typeof import('./interaction-utils').findFieldsToShow}\n */\nexport function findFieldsToShow({fields, id}) {\n  // first find default tooltip fields for trips\n  const fieldsToShow = DEFAULT_TOOLTIP_FIELDS.reduce((prev, curr) => {\n    if (fields.find(({name}) => curr.name === name)) {\n      prev.push(curr);\n    }\n    return prev;\n  }, []);\n\n  return {\n    [id]: fieldsToShow.length ? fieldsToShow : autoFindTooltipFields(fields)\n  };\n}\n\nfunction autoFindTooltipFields(fields) {\n  const ptFields = _mergeFieldPairs(TRIP_POINT_FIELDS);\n  // filter out the default fields that contains lat and lng and any geometry\n  const fieldsToShow = fields.filter(\n    ({name, type}) =>\n      name\n        .replace(/[_,.]+/g, ' ')\n        .trim()\n        .split(' ')\n        .every(seg => !ptFields.includes(seg)) &&\n      type !== ALL_FIELD_TYPES.geojson &&\n      type !== 'object'\n  );\n\n  return fieldsToShow.slice(0, MAX_DEFAULT_TOOLTIPS).map(({name}) => {\n    return {\n      name,\n      format: null\n    };\n  });\n}\n\nfunction _mergeFieldPairs(pairs) {\n  return pairs.reduce((prev, pair) => [...prev, ...pair], []);\n}\n\n/**\n * @type {typeof import('./interaction-utils').getTooltipDisplayDeltaValue}\n */\nexport function getTooltipDisplayDeltaValue({\n  primaryData,\n  field,\n  compareType,\n  data,\n  fieldIdx,\n  item\n}) {\n  let displayDeltaValue = null;\n\n  if (\n    primaryData &&\n    // comparison mode only works for numeric field\n    (field.type === ALL_FIELD_TYPES.integer || field.type === ALL_FIELD_TYPES.real)\n  ) {\n    const baseDp = primaryData.valueAt(fieldIdx);\n    const dp = data.valueAt(fieldIdx);\n    if (isNumber(baseDp) && isNumber(dp)) {\n      const deltaValue = compareType === COMPARE_TYPES.RELATIVE ? dp / baseDp - 1 : dp - baseDp;\n      const deltaFormat =\n        compareType === COMPARE_TYPES.RELATIVE\n          ? TOOLTIP_FORMATS.DECIMAL_PERCENT_FULL_2[TOOLTIP_KEY]\n          : item.format || TOOLTIP_FORMATS.DECIMAL_DECIMAL_FIXED_3[TOOLTIP_KEY];\n\n      displayDeltaValue = getFormatter(deltaFormat)(deltaValue);\n\n      // safely cast string\n      displayDeltaValue = defaultFormatter(displayDeltaValue);\n      const deltaFirstChar = displayDeltaValue.charAt(0);\n      if (deltaFirstChar !== '+' && deltaFirstChar !== TOOLTIP_MINUS_SIGN) {\n        displayDeltaValue = `+${displayDeltaValue}`;\n      }\n    } else {\n      displayDeltaValue = TOOLTIP_MINUS_SIGN;\n    }\n  }\n\n  return displayDeltaValue;\n}\n\n/**\n * @type {typeof import('./interaction-utils').getTooltipDisplayValue}\n */\nexport function getTooltipDisplayValue({item, field, data, fieldIdx}) {\n  const dataValue = data.valueAt(fieldIdx);\n  if (!notNullorUndefined(dataValue)) {\n    return '';\n  }\n\n  return item.format\n    ? getFormatter(item.format, field)(dataValue)\n    : parseFieldValue(dataValue, field.type);\n}\n"]},"metadata":{},"sourceType":"script"}