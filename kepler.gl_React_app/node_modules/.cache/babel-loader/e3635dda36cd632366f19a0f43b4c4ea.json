{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.arcVisConfigs = exports.arcColumnLabels = exports.arcRequiredColumns = exports.arcPosAccessor = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _baseLayer = _interopRequireDefault(require(\"../base-layer\"));\nvar _extensions = require(\"@deck.gl/extensions\");\nvar _layers = require(\"@deck.gl/layers\");\nvar _colorUtils = require(\"../../utils/color-utils\");\nvar _arcLayerIcon = _interopRequireDefault(require(\"./arc-layer-icon\"));\nvar _defaultSettings = require(\"../../constants/default-settings\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar arcPosAccessor = function arcPosAccessor(_ref) {\n  var lat0 = _ref.lat0,\n    lng0 = _ref.lng0,\n    lat1 = _ref.lat1,\n    lng1 = _ref.lng1;\n  return function (dc) {\n    return function (d) {\n      return [dc.valueAt(d.index, lng0.fieldIdx), dc.valueAt(d.index, lat0.fieldIdx), 0, dc.valueAt(d.index, lng1.fieldIdx), dc.valueAt(d.index, lat1.fieldIdx), 0];\n    };\n  };\n};\nexports.arcPosAccessor = arcPosAccessor;\nvar arcRequiredColumns = ['lat0', 'lng0', 'lat1', 'lng1'];\nexports.arcRequiredColumns = arcRequiredColumns;\nvar arcColumnLabels = {\n  lat0: 'arc.lat0',\n  lng0: 'arc.lng0',\n  lat1: 'arc.lat1',\n  lng1: 'arc.lng1'\n};\nexports.arcColumnLabels = arcColumnLabels;\nvar arcVisConfigs = {\n  opacity: 'opacity',\n  thickness: 'thickness',\n  colorRange: 'colorRange',\n  sizeRange: 'strokeWidthRange',\n  targetColor: 'targetColor'\n};\nexports.arcVisConfigs = arcVisConfigs;\nvar ArcLayer = /*#__PURE__*/function (_Layer) {\n  (0, _inherits2[\"default\"])(ArcLayer, _Layer);\n  var _super = _createSuper(ArcLayer);\n  function ArcLayer(props) {\n    var _this;\n    (0, _classCallCheck2[\"default\"])(this, ArcLayer);\n    _this = _super.call(this, props);\n    _this.registerVisConfig(arcVisConfigs);\n    _this.getPositionAccessor = function (dataContainer) {\n      return arcPosAccessor(_this.config.columns)(dataContainer);\n    };\n    return _this;\n  }\n  (0, _createClass2[\"default\"])(ArcLayer, [{\n    key: \"type\",\n    get: function get() {\n      return 'arc';\n    }\n  }, {\n    key: \"isAggregated\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"layerIcon\",\n    get: function get() {\n      return _arcLayerIcon[\"default\"];\n    }\n  }, {\n    key: \"requiredLayerColumns\",\n    get: function get() {\n      return arcRequiredColumns;\n    }\n  }, {\n    key: \"columnLabels\",\n    get: function get() {\n      return arcColumnLabels;\n    }\n  }, {\n    key: \"columnPairs\",\n    get: function get() {\n      return this.defaultLinkColumnPairs;\n    }\n  }, {\n    key: \"visualChannels\",\n    get: function get() {\n      return {\n        sourceColor: _objectSpread(_objectSpread({}, (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(ArcLayer.prototype), \"visualChannels\", this).color), {}, {\n          property: 'color',\n          key: 'sourceColor',\n          accessor: 'getSourceColor',\n          defaultValue: function defaultValue(config) {\n            return config.color;\n          }\n        }),\n        targetColor: _objectSpread(_objectSpread({}, (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(ArcLayer.prototype), \"visualChannels\", this).color), {}, {\n          property: 'targetColor',\n          key: 'targetColor',\n          accessor: 'getTargetColor',\n          defaultValue: function defaultValue(config) {\n            return config.visConfig.targetColor || config.color;\n          }\n        }),\n        size: _objectSpread(_objectSpread({}, (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(ArcLayer.prototype), \"visualChannels\", this).size), {}, {\n          accessor: 'getWidth',\n          property: 'stroke'\n        })\n      };\n    }\n  }, {\n    key: \"calculateDataAttribute\",\n    value: function calculateDataAttribute(_ref2, getPosition) {\n      var dataContainer = _ref2.dataContainer,\n        filteredIndex = _ref2.filteredIndex;\n      var data = [];\n      for (var i = 0; i < filteredIndex.length; i++) {\n        var index = filteredIndex[i];\n        var pos = getPosition({\n          index: index\n        }); // if doesn't have point lat or lng, do not add the point\n        // deck.gl can't handle position = null\n\n        if (pos.every(Number.isFinite)) {\n          data.push({\n            index: index,\n            sourcePosition: [pos[0], pos[1], pos[2]],\n            targetPosition: [pos[3], pos[4], pos[5]]\n          });\n        }\n      }\n      return data;\n    }\n  }, {\n    key: \"formatLayerData\",\n    value: function formatLayerData(datasets, oldLayerData) {\n      var _datasets$this$config = datasets[this.config.dataId],\n        gpuFilter = _datasets$this$config.gpuFilter,\n        dataContainer = _datasets$this$config.dataContainer;\n      var _this$updateData = this.updateData(datasets, oldLayerData),\n        data = _this$updateData.data;\n      var accessors = this.getAttributeAccessors({\n        dataContainer: dataContainer\n      });\n      return _objectSpread({\n        data: data,\n        getFilterValue: gpuFilter.filterValueAccessor(dataContainer)()\n      }, accessors);\n    }\n    /* eslint-enable complexity */\n  }, {\n    key: \"updateLayerMeta\",\n    value: function updateLayerMeta(dataContainer) {\n      // get bounds from arcs\n      var getPosition = this.getPositionAccessor(dataContainer);\n      var sBounds = this.getPointsBounds(dataContainer, function (d, i) {\n        var pos = getPosition(d);\n        return [pos[0], pos[1]];\n      });\n      var tBounds = this.getPointsBounds(dataContainer, function (d, i) {\n        var pos = getPosition(d);\n        return [pos[3], pos[4]];\n      });\n      var bounds = tBounds && sBounds ? [Math.min(sBounds[0], tBounds[0]), Math.min(sBounds[1], tBounds[1]), Math.max(sBounds[2], tBounds[2]), Math.max(sBounds[3], tBounds[3])] : sBounds || tBounds;\n      this.updateMeta({\n        bounds: bounds\n      });\n    }\n  }, {\n    key: \"renderLayer\",\n    value: function renderLayer(opts) {\n      var data = opts.data,\n        gpuFilter = opts.gpuFilter,\n        objectHovered = opts.objectHovered,\n        interactionConfig = opts.interactionConfig;\n      var updateTriggers = _objectSpread({\n        getPosition: this.config.columns,\n        getFilterValue: gpuFilter.filterValueUpdateTriggers\n      }, this.getVisualChannelUpdateTriggers());\n      var defaultLayerProps = this.getDefaultDeckLayerProps(opts);\n      var hoveredObject = this.hasHoveredObject(objectHovered);\n      return [new _layers.ArcLayer(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, defaultLayerProps), this.getBrushingExtensionProps(interactionConfig, 'source_target')), data), {}, {\n        widthScale: this.config.visConfig.thickness,\n        updateTriggers: updateTriggers,\n        extensions: [].concat((0, _toConsumableArray2[\"default\"])(defaultLayerProps.extensions), [new _extensions.BrushingExtension()])\n      }))].concat((0, _toConsumableArray2[\"default\"])(hoveredObject ? [new _layers.ArcLayer(_objectSpread(_objectSpread({}, this.getDefaultHoverLayerProps()), {}, {\n        data: [hoveredObject],\n        widthScale: this.config.visConfig.thickness,\n        getSourceColor: this.config.highlightColor,\n        getTargetColor: this.config.highlightColor,\n        getWidth: data.getWidth\n      }))] : []));\n    }\n  }], [{\n    key: \"findDefaultLayerProps\",\n    value: function findDefaultLayerProps(_ref3) {\n      var _ref3$fieldPairs = _ref3.fieldPairs,\n        fieldPairs = _ref3$fieldPairs === void 0 ? [] : _ref3$fieldPairs;\n      if (fieldPairs.length < 2) {\n        return {\n          props: []\n        };\n      }\n      var props = {\n        color: (0, _colorUtils.hexToRgb)(_defaultSettings.DEFAULT_LAYER_COLOR.tripArc)\n      }; // connect the first two point layer with arc\n\n      props.columns = {\n        lat0: fieldPairs[0].pair.lat,\n        lng0: fieldPairs[0].pair.lng,\n        lat1: fieldPairs[1].pair.lat,\n        lng1: fieldPairs[1].pair.lng\n      };\n      props.label = \"\".concat(fieldPairs[0].defaultName, \" -> \").concat(fieldPairs[1].defaultName, \" arc\");\n      return {\n        props: [props]\n      };\n    }\n  }]);\n  return ArcLayer;\n}(_baseLayer[\"default\"]);\nexports[\"default\"] = ArcLayer;","map":{"version":3,"sources":["../../../src/layers/arc-layer/arc-layer.js"],"names":["arcPosAccessor","lat0","lng0","lat1","lng1","dc","valueAt","d","index","fieldIdx","arcRequiredColumns","arcColumnLabels","arcVisConfigs","opacity","thickness","colorRange","sizeRange","targetColor","ArcLayer","Layer","props","registerVisConfig","getPositionAccessor","config","columns","dataContainer","ArcLayerIcon","defaultLinkColumnPairs","sourceColor","color","property","key","accessor","defaultValue","visConfig","size","fieldPairs","length","DEFAULT_LAYER_COLOR","tripArc","pair","lat","lng","label","defaultName","filteredIndex","getPosition","data","i","pos","every","Number","isFinite","push","sourcePosition","targetPosition","datasets","oldLayerData","gpuFilter","dataId","updateData","accessors","getAttributeAccessors","getFilterValue","filterValueAccessor","sBounds","getPointsBounds","tBounds","bounds","Math","min","max","updateMeta","opts","objectHovered","interactionConfig","updateTriggers","filterValueUpdateTriggers","getVisualChannelUpdateTriggers","defaultLayerProps","getDefaultDeckLayerProps","hoveredObject","hasHoveredObject","DeckArcLayer","getBrushingExtensionProps","widthScale","extensions","BrushingExtension","getDefaultHoverLayerProps","getSourceColor","highlightColor","getTargetColor","getWidth"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport Layer from '../base-layer';\nimport {BrushingExtension} from '@deck.gl/extensions';\nimport {ArcLayer as DeckArcLayer} from '@deck.gl/layers';\n\nimport {hexToRgb} from 'utils/color-utils';\nimport ArcLayerIcon from './arc-layer-icon';\nimport {DEFAULT_LAYER_COLOR} from 'constants/default-settings';\n\nexport const arcPosAccessor = ({lat0, lng0, lat1, lng1}) => dc => d => [\n  dc.valueAt(d.index, lng0.fieldIdx),\n  dc.valueAt(d.index, lat0.fieldIdx),\n  0,\n  dc.valueAt(d.index, lng1.fieldIdx),\n  dc.valueAt(d.index, lat1.fieldIdx),\n  0\n];\n\nexport const arcRequiredColumns = ['lat0', 'lng0', 'lat1', 'lng1'];\nexport const arcColumnLabels = {\n  lat0: 'arc.lat0',\n  lng0: 'arc.lng0',\n  lat1: 'arc.lat1',\n  lng1: 'arc.lng1'\n};\n\nexport const arcVisConfigs = {\n  opacity: 'opacity',\n  thickness: 'thickness',\n  colorRange: 'colorRange',\n  sizeRange: 'strokeWidthRange',\n  targetColor: 'targetColor'\n};\n\nexport default class ArcLayer extends Layer {\n  constructor(props) {\n    super(props);\n\n    this.registerVisConfig(arcVisConfigs);\n    this.getPositionAccessor = dataContainer => arcPosAccessor(this.config.columns)(dataContainer);\n  }\n\n  get type() {\n    return 'arc';\n  }\n\n  get isAggregated() {\n    return false;\n  }\n\n  get layerIcon() {\n    return ArcLayerIcon;\n  }\n\n  get requiredLayerColumns() {\n    return arcRequiredColumns;\n  }\n\n  get columnLabels() {\n    return arcColumnLabels;\n  }\n  get columnPairs() {\n    return this.defaultLinkColumnPairs;\n  }\n\n  get visualChannels() {\n    return {\n      sourceColor: {\n        ...super.visualChannels.color,\n        property: 'color',\n        key: 'sourceColor',\n        accessor: 'getSourceColor',\n        defaultValue: config => config.color\n      },\n      targetColor: {\n        ...super.visualChannels.color,\n        property: 'targetColor',\n        key: 'targetColor',\n        accessor: 'getTargetColor',\n        defaultValue: config => config.visConfig.targetColor || config.color\n      },\n      size: {\n        ...super.visualChannels.size,\n        accessor: 'getWidth',\n        property: 'stroke'\n      }\n    };\n  }\n\n  static findDefaultLayerProps({fieldPairs = []}) {\n    if (fieldPairs.length < 2) {\n      return {props: []};\n    }\n\n    const props = {\n      color: hexToRgb(DEFAULT_LAYER_COLOR.tripArc)\n    };\n\n    // connect the first two point layer with arc\n    props.columns = {\n      lat0: fieldPairs[0].pair.lat,\n      lng0: fieldPairs[0].pair.lng,\n      lat1: fieldPairs[1].pair.lat,\n      lng1: fieldPairs[1].pair.lng\n    };\n    props.label = `${fieldPairs[0].defaultName} -> ${fieldPairs[1].defaultName} arc`;\n\n    return {props: [props]};\n  }\n\n  calculateDataAttribute({dataContainer, filteredIndex}, getPosition) {\n    const data = [];\n    for (let i = 0; i < filteredIndex.length; i++) {\n      const index = filteredIndex[i];\n      const pos = getPosition({index});\n\n      // if doesn't have point lat or lng, do not add the point\n      // deck.gl can't handle position = null\n      if (pos.every(Number.isFinite)) {\n        data.push({\n          index,\n          sourcePosition: [pos[0], pos[1], pos[2]],\n          targetPosition: [pos[3], pos[4], pos[5]]\n        });\n      }\n    }\n\n    return data;\n  }\n\n  formatLayerData(datasets, oldLayerData) {\n    const {gpuFilter, dataContainer} = datasets[this.config.dataId];\n    const {data} = this.updateData(datasets, oldLayerData);\n    const accessors = this.getAttributeAccessors({dataContainer});\n    return {\n      data,\n      getFilterValue: gpuFilter.filterValueAccessor(dataContainer)(),\n      ...accessors\n    };\n  }\n  /* eslint-enable complexity */\n\n  updateLayerMeta(dataContainer) {\n    // get bounds from arcs\n    const getPosition = this.getPositionAccessor(dataContainer);\n\n    const sBounds = this.getPointsBounds(dataContainer, (d, i) => {\n      const pos = getPosition(d);\n      return [pos[0], pos[1]];\n    });\n    const tBounds = this.getPointsBounds(dataContainer, (d, i) => {\n      const pos = getPosition(d);\n      return [pos[3], pos[4]];\n    });\n\n    const bounds =\n      tBounds && sBounds\n        ? [\n            Math.min(sBounds[0], tBounds[0]),\n            Math.min(sBounds[1], tBounds[1]),\n            Math.max(sBounds[2], tBounds[2]),\n            Math.max(sBounds[3], tBounds[3])\n          ]\n        : sBounds || tBounds;\n\n    this.updateMeta({bounds});\n  }\n\n  renderLayer(opts) {\n    const {data, gpuFilter, objectHovered, interactionConfig} = opts;\n    const updateTriggers = {\n      getPosition: this.config.columns,\n      getFilterValue: gpuFilter.filterValueUpdateTriggers,\n      ...this.getVisualChannelUpdateTriggers()\n    };\n    const defaultLayerProps = this.getDefaultDeckLayerProps(opts);\n    const hoveredObject = this.hasHoveredObject(objectHovered);\n    return [\n      new DeckArcLayer({\n        ...defaultLayerProps,\n        ...this.getBrushingExtensionProps(interactionConfig, 'source_target'),\n        ...data,\n        widthScale: this.config.visConfig.thickness,\n        updateTriggers,\n        extensions: [...defaultLayerProps.extensions, new BrushingExtension()]\n      }),\n      // hover layer\n      ...(hoveredObject\n        ? [\n            new DeckArcLayer({\n              ...this.getDefaultHoverLayerProps(),\n              data: [hoveredObject],\n              widthScale: this.config.visConfig.thickness,\n              getSourceColor: this.config.highlightColor,\n              getTargetColor: this.config.highlightColor,\n              getWidth: data.getWidth\n            })\n          ]\n        : [])\n    ];\n  }\n}\n"]},"metadata":{},"sourceType":"script"}