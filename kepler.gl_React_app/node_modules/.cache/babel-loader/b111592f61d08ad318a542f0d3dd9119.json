{"ast":null,"code":"import { log } from '@luma.gl/gltools';\nexport function checkProps(className, props, propChecks) {\n  const {\n    removedProps = {},\n    deprecatedProps = {},\n    replacedProps = {}\n  } = propChecks;\n  for (const propName in removedProps) {\n    if (propName in props) {\n      const replacementProp = removedProps[propName];\n      const replacement = replacementProp ? \"\".concat(className, \".\").concat(removedProps[propName]) : 'N/A';\n      log.removed(\"\".concat(className, \".\").concat(propName), replacement)();\n    }\n  }\n  for (const propName in deprecatedProps) {\n    if (propName in props) {\n      const replacementProp = deprecatedProps[propName];\n      log.deprecated(\"\".concat(className, \".\").concat(propName), \"\".concat(className, \".\").concat(replacementProp))();\n    }\n  }\n  let newProps = null;\n  for (const propName in replacedProps) {\n    if (propName in props) {\n      const replacementProp = replacedProps[propName];\n      log.deprecated(\"\".concat(className, \".\").concat(propName), \"\".concat(className, \".\").concat(replacementProp))();\n      newProps = newProps || Object.assign({}, props);\n      newProps[replacementProp] = props[propName];\n      delete newProps[propName];\n    }\n  }\n  return newProps || props;\n}","map":{"version":3,"sources":["../../../src/utils/check-props.js"],"names":["log","checkProps","className","props","propChecks","removedProps","deprecatedProps","replacedProps","propName","replacementProp","replacement","removed","deprecated","newProps","Object","assign"],"mappings":"AA6BA,SAAQA,GAAR,QAAkB,kBAAlB;AAEA,OAAO,SAASC,UAAT,CAAoBC,SAApB,EAA+BC,KAA/B,EAAsCC,UAAtC,EAAkD;EACvD,MAAM;IAACC,YAAY,GAAG,CAAA,CAAhB;IAAoBC,eAAe,GAAG,CAAA,CAAtC;IAA0CC,aAAa,GAAG,CAAA;EAA1D,CAAA,GAAgEH,UAAtE;EAIA,KAAK,MAAMI,QAAX,IAAuBH,YAAvB,EAAqC;IACnC,IAAIG,QAAQ,IAAIL,KAAhB,EAAuB;MACrB,MAAMM,eAAe,GAAGJ,YAAY,CAACG,QAAD,CAApC;MACA,MAAME,WAAW,GAAGD,eAAe,GAAA,EAAA,CAAA,MAAA,CAAMP,SAAN,EAAA,GAAA,CAAA,CAAA,MAAA,CAAmBG,YAAY,CAACG,QAAD,CAA/B,CAAA,GAA8C,KAAjF;MACAR,GAAG,CAACW,OAAJX,CAAAA,EAAAA,CAAAA,MAAAA,CAAeE,SAAfF,EAAAA,GAAAA,CAAAA,CAAAA,MAAAA,CAA4BQ,QAA5BR,CAAAA,EAAwCU,WAAxCV,CAAAA,EAAAA;IACD;EACF;EAID,KAAK,MAAMQ,QAAX,IAAuBF,eAAvB,EAAwC;IACtC,IAAIE,QAAQ,IAAIL,KAAhB,EAAuB;MACrB,MAAMM,eAAe,GAAGH,eAAe,CAACE,QAAD,CAAvC;MACAR,GAAG,CAACY,UAAJZ,CAAAA,EAAAA,CAAAA,MAAAA,CAAkBE,SAAlBF,EAAAA,GAAAA,CAAAA,CAAAA,MAAAA,CAA+BQ,QAA/BR,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAA8CE,SAA9CF,EAAAA,GAAAA,CAAAA,CAAAA,MAAAA,CAA2DS,eAA3DT,CAAAA,CAAAA,EAAAA;IACD;EACF;EAID,IAAIa,QAAQ,GAAG,IAAf;EACA,KAAK,MAAML,QAAX,IAAuBD,aAAvB,EAAsC;IACpC,IAAIC,QAAQ,IAAIL,KAAhB,EAAuB;MACrB,MAAMM,eAAe,GAAGF,aAAa,CAACC,QAAD,CAArC;MACAR,GAAG,CAACY,UAAJZ,CAAAA,EAAAA,CAAAA,MAAAA,CAAkBE,SAAlBF,EAAAA,GAAAA,CAAAA,CAAAA,MAAAA,CAA+BQ,QAA/BR,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAA8CE,SAA9CF,EAAAA,GAAAA,CAAAA,CAAAA,MAAAA,CAA2DS,eAA3DT,CAAAA,CAAAA,EAAAA;MACAa,QAAQ,GAAGA,QAAQ,IAAIC,MAAM,CAACC,MAAPD,CAAc,CAAA,CAAdA,EAAkBX,KAAlBW,CAAvBD;MACAA,QAAQ,CAACJ,eAAD,CAARI,GAA4BV,KAAK,CAACK,QAAD,CAAjCK;MACA,OAAOA,QAAQ,CAACL,QAAD,CAAf;IACD;EACF;EAED,OAAOK,QAAQ,IAAIV,KAAnB;AACD","sourcesContent":["/* Use as\nimport {checkProps} from '../util/check-props;'\n\nconst PROP_CHECKS = {\n  // Removed props no longer supported, print error and link to upgrade guide\n  removedProps: {\n  },\n  // Deprecated props\n  deprecatedProps: {\n    offset: 'accessor',\n    stride: 'accessor',\n    type: 'accessor',\n    size: 'accessor',\n    divisor: 'accessor',\n    normalized: 'accessor',\n    integer: 'accessor'\n  },\n  // Deprecated props that can be autosubstituted, print warning and return updated props object\n  replacedProps: {\n    bytes: 'byteLength'\n  }\n}\n\nclass Buffer {\n  setProps(props) {\n    checkProps('Buffer', props, PROP_CHECKS);\n  }\n}\n*/\nimport {log} from '@luma.gl/gltools';\n\nexport function checkProps(className, props, propChecks) {\n  const {removedProps = {}, deprecatedProps = {}, replacedProps = {}} = propChecks;\n\n  // removedProps: Removed props no longer supported\n  // print error and link to upgrade guide\n  for (const propName in removedProps) {\n    if (propName in props) {\n      const replacementProp = removedProps[propName];\n      const replacement = replacementProp ? `${className}.${removedProps[propName]}` : 'N/A';\n      log.removed(`${className}.${propName}`, replacement)();\n    }\n  }\n\n  // deprecatedProps: Deprecated props that can not be autosubstituted\n  // print warning and rely on caller to substitute\n  for (const propName in deprecatedProps) {\n    if (propName in props) {\n      const replacementProp = deprecatedProps[propName];\n      log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();\n    }\n  }\n\n  // replacedProps: Deprecated props that can be autosubstituted\n  // print warning and return updated props object\n  let newProps = null;\n  for (const propName in replacedProps) {\n    if (propName in props) {\n      const replacementProp = replacedProps[propName];\n      log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();\n      newProps = newProps || Object.assign({}, props);\n      newProps[replacementProp] = props[propName];\n      delete newProps[propName];\n    }\n  }\n\n  return newProps || props;\n}\n"]},"metadata":{},"sourceType":"module"}