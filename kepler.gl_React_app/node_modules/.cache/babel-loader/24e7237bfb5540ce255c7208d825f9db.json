{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { concatenateChunksAsync } from '@loaders.gl/loader-utils';\nimport { isResponse, isReadableStream, isAsyncIterable, isIterable, isIterator, isBlob, isBuffer } from '../../javascript-utils/is-type';\nimport { makeIterator } from '../../iterator-utils/make-iterator/make-iterator';\nimport { checkResponse, makeResponse } from '../utils/response-utils';\nvar ERR_DATA = 'Cannot convert supplied data type';\nexport function getArrayBufferOrStringFromDataSync(data, loader) {\n  if (loader.text && typeof data === 'string') {\n    return data;\n  }\n  if (data instanceof ArrayBuffer) {\n    var arrayBuffer = data;\n    if (loader.text && !loader.binary) {\n      var textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(arrayBuffer);\n    }\n    return arrayBuffer;\n  }\n  if (ArrayBuffer.isView(data) || isBuffer(data)) {\n    if (loader.text && !loader.binary) {\n      var _textDecoder = new TextDecoder('utf8');\n      return _textDecoder.decode(data);\n    }\n    var _arrayBuffer = data.buffer;\n    var byteLength = data.byteLength || data.length;\n    if (data.byteOffset !== 0 || byteLength !== _arrayBuffer.byteLength) {\n      _arrayBuffer = _arrayBuffer.slice(data.byteOffset, data.byteOffset + byteLength);\n    }\n    return _arrayBuffer;\n  }\n  throw new Error(ERR_DATA);\n}\nexport function getArrayBufferOrStringFromData(_x, _x2) {\n  return _getArrayBufferOrStringFromData.apply(this, arguments);\n}\nfunction _getArrayBufferOrStringFromData() {\n  _getArrayBufferOrStringFromData = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, loader) {\n    var isArrayBuffer, response;\n    return _regeneratorRuntime.wrap(function _callee$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n            if (!(typeof data === 'string' || isArrayBuffer)) {\n              _context3.next = 3;\n              break;\n            }\n            return _context3.abrupt(\"return\", getArrayBufferOrStringFromDataSync(data, loader));\n          case 3:\n            if (!isBlob(data)) {\n              _context3.next = 7;\n              break;\n            }\n            _context3.next = 6;\n            return makeResponse(data);\n          case 6:\n            data = _context3.sent;\n          case 7:\n            if (!isResponse(data)) {\n              _context3.next = 21;\n              break;\n            }\n            response = data;\n            _context3.next = 11;\n            return checkResponse(response);\n          case 11:\n            if (!loader.binary) {\n              _context3.next = 17;\n              break;\n            }\n            _context3.next = 14;\n            return response.arrayBuffer();\n          case 14:\n            _context3.t0 = _context3.sent;\n            _context3.next = 20;\n            break;\n          case 17:\n            _context3.next = 19;\n            return response.text();\n          case 19:\n            _context3.t0 = _context3.sent;\n          case 20:\n            return _context3.abrupt(\"return\", _context3.t0);\n          case 21:\n            if (isReadableStream(data)) {\n              data = makeIterator(data);\n            }\n            if (!(isIterable(data) || isAsyncIterable(data))) {\n              _context3.next = 24;\n              break;\n            }\n            return _context3.abrupt(\"return\", concatenateChunksAsync(data));\n          case 24:\n            throw new Error(ERR_DATA);\n          case 25:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getArrayBufferOrStringFromData.apply(this, arguments);\n}\nexport function getAsyncIteratorFromData(_x3) {\n  return _getAsyncIteratorFromData.apply(this, arguments);\n}\nfunction _getAsyncIteratorFromData() {\n  _getAsyncIteratorFromData = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(data) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!isIterator(data)) {\n              _context4.next = 2;\n              break;\n            }\n            return _context4.abrupt(\"return\", data);\n          case 2:\n            if (!isResponse(data)) {\n              _context4.next = 6;\n              break;\n            }\n            _context4.next = 5;\n            return checkResponse(data);\n          case 5:\n            return _context4.abrupt(\"return\", makeIterator(data.body));\n          case 6:\n            if (!(isBlob(data) || isReadableStream(data))) {\n              _context4.next = 8;\n              break;\n            }\n            return _context4.abrupt(\"return\", makeIterator(data));\n          case 8:\n            if (!isAsyncIterable(data)) {\n              _context4.next = 10;\n              break;\n            }\n            return _context4.abrupt(\"return\", data[Symbol.asyncIterator]());\n          case 10:\n            return _context4.abrupt(\"return\", getIteratorFromData(data));\n          case 11:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getAsyncIteratorFromData.apply(this, arguments);\n}\nfunction getIteratorFromData(data) {\n  if (ArrayBuffer.isView(data)) {\n    return _regeneratorRuntime.mark(function oneChunk() {\n      return _regeneratorRuntime.wrap(function oneChunk$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return data.buffer;\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, oneChunk);\n    })();\n  }\n  if (data instanceof ArrayBuffer) {\n    return _regeneratorRuntime.mark(function oneChunk() {\n      return _regeneratorRuntime.wrap(function oneChunk$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return data;\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, oneChunk);\n    })();\n  }\n  if (isIterator(data)) {\n    return data;\n  }\n  if (isIterable(data)) {\n    return data[Symbol.iterator]();\n  }\n  throw new Error(ERR_DATA);\n}\nexport function getReadableStream(_x4) {\n  return _getReadableStream.apply(this, arguments);\n}\nfunction _getReadableStream() {\n  _getReadableStream = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(data) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee3$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (!isReadableStream(data)) {\n              _context5.next = 2;\n              break;\n            }\n            return _context5.abrupt(\"return\", data);\n          case 2:\n            if (!isResponse(data)) {\n              _context5.next = 4;\n              break;\n            }\n            return _context5.abrupt(\"return\", data.body);\n          case 4:\n            _context5.next = 6;\n            return makeResponse(data);\n          case 6:\n            response = _context5.sent;\n            return _context5.abrupt(\"return\", response.body);\n          case 8:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getReadableStream.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/loader-utils/get-data.js"],"names":["concatenateChunksAsync","isResponse","isReadableStream","isAsyncIterable","isIterable","isIterator","isBlob","isBuffer","makeIterator","checkResponse","makeResponse","ERR_DATA","getArrayBufferOrStringFromDataSync","data","loader","text","ArrayBuffer","arrayBuffer","binary","textDecoder","TextDecoder","decode","isView","buffer","byteLength","length","byteOffset","slice","Error","getArrayBufferOrStringFromData","isArrayBuffer","response","getAsyncIteratorFromData","body","Symbol","asyncIterator","getIteratorFromData","oneChunk","iterator","getReadableStream"],"mappings":"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","sourcesContent":["/* global TextDecoder */\nimport {concatenateChunksAsync} from '@loaders.gl/loader-utils';\nimport {\n  isResponse,\n  isReadableStream,\n  isAsyncIterable,\n  isIterable,\n  isIterator,\n  isBlob,\n  isBuffer\n} from '../../javascript-utils/is-type';\nimport {makeIterator} from '../../iterator-utils/make-iterator/make-iterator';\nimport {checkResponse, makeResponse} from '../utils/response-utils';\n\nconst ERR_DATA = 'Cannot convert supplied data type';\n\n// eslint-disable-next-line complexity\nexport function getArrayBufferOrStringFromDataSync(data, loader) {\n  if (loader.text && typeof data === 'string') {\n    return data;\n  }\n\n  if (data instanceof ArrayBuffer) {\n    const arrayBuffer = data;\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(arrayBuffer);\n    }\n    return arrayBuffer;\n  }\n\n  // We may need to handle offsets\n  if (ArrayBuffer.isView(data) || isBuffer(data)) {\n    // TextDecoder is invoked on typed arrays and will handle offsets\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(data);\n    }\n\n    let arrayBuffer = data.buffer;\n\n    // Since we are returning the underlying arrayBuffer, we must create a new copy\n    // if this typed array / Buffer is a partial view into the ArryayBuffer\n    // TODO - this is a potentially unnecessary copy\n    const byteLength = data.byteLength || data.length;\n    if (data.byteOffset !== 0 || byteLength !== arrayBuffer.byteLength) {\n      // console.warn(`loaders.gl copying arraybuffer of length ${byteLength}`);\n      arrayBuffer = arrayBuffer.slice(data.byteOffset, data.byteOffset + byteLength);\n    }\n    return arrayBuffer;\n  }\n\n  throw new Error(ERR_DATA);\n}\n\n// Convert async iterator to a promise\nexport async function getArrayBufferOrStringFromData(data, loader) {\n  const isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n  if (typeof data === 'string' || isArrayBuffer) {\n    return getArrayBufferOrStringFromDataSync(data, loader);\n  }\n\n  // Blobs and files are FileReader compatible\n  if (isBlob(data)) {\n    data = await makeResponse(data);\n  }\n\n  if (isResponse(data)) {\n    const response = data;\n    await checkResponse(response);\n    return loader.binary ? await response.arrayBuffer() : await response.text();\n  }\n\n  if (isReadableStream(data)) {\n    data = makeIterator(data);\n  }\n\n  if (isIterable(data) || isAsyncIterable(data)) {\n    // Assume arrayBuffer iterator - attempt to concatenate\n    return concatenateChunksAsync(data);\n  }\n\n  throw new Error(ERR_DATA);\n}\n\nexport async function getAsyncIteratorFromData(data) {\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isResponse(data)) {\n    // Note Since this function is not async, we currently can't load error message, just status\n    await checkResponse(data);\n    // TODO - bug in polyfill, body can be a Promise under Node.js\n    return makeIterator(data.body);\n  }\n\n  if (isBlob(data) || isReadableStream(data)) {\n    return makeIterator(data);\n  }\n\n  if (isAsyncIterable(data)) {\n    return data[Symbol.asyncIterator]();\n  }\n\n  return getIteratorFromData(data);\n}\n\nfunction getIteratorFromData(data) {\n  // generate an iterator that emits a single chunk\n  if (ArrayBuffer.isView(data)) {\n    return (function* oneChunk() {\n      yield data.buffer;\n    })();\n  }\n\n  if (data instanceof ArrayBuffer) {\n    return (function* oneChunk() {\n      yield data;\n    })();\n  }\n\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isIterable(data)) {\n    return data[Symbol.iterator]();\n  }\n\n  throw new Error(ERR_DATA);\n}\n\nexport async function getReadableStream(data) {\n  if (isReadableStream(data)) {\n    return data;\n  }\n  if (isResponse(data)) {\n    return data.body;\n  }\n  const response = await makeResponse(data);\n  return response.body;\n}\n"]},"metadata":{},"sourceType":"module"}