{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { isArray } from '@math.gl/core';\nimport { getPolygonSignedArea, forEachSegmentInPolygon, modifyPolygonWindingDirection, getPolygonSignedAreaPoints, forEachSegmentInPolygonPoints, modifyPolygonWindingDirectionPoints } from './polygon-utils';\nexport default class Polygon {\n  constructor(points) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _defineProperty(this, \"points\", void 0);\n    _defineProperty(this, \"isFlatArray\", void 0);\n    _defineProperty(this, \"options\", void 0);\n    this.points = points;\n    this.isFlatArray = !isArray(points[0]);\n    this.options = {\n      start: options.start || 0,\n      end: options.end || points.length,\n      size: options.size || 2,\n      isClosed: options.isClosed\n    };\n    Object.freeze(this);\n  }\n  getSignedArea() {\n    if (this.isFlatArray) return getPolygonSignedArea(this.points, this.options);\n    return getPolygonSignedAreaPoints(this.points, this.options);\n  }\n  getArea() {\n    return Math.abs(this.getSignedArea());\n  }\n  getWindingDirection() {\n    return Math.sign(this.getSignedArea());\n  }\n  forEachSegment(visitor) {\n    if (this.isFlatArray) {\n      forEachSegmentInPolygon(this.points, (x1, y1, x2, y2, i1, i2) => {\n        visitor([x1, y1], [x2, y2], i1, i2);\n      }, this.options);\n    } else {\n      forEachSegmentInPolygonPoints(this.points, visitor, this.options);\n    }\n  }\n  modifyWindingDirection(direction) {\n    if (this.isFlatArray) {\n      return modifyPolygonWindingDirection(this.points, direction, this.options);\n    }\n    return modifyPolygonWindingDirectionPoints(this.points, direction, this.options);\n  }\n}","map":{"version":3,"sources":["../../src/polygon.ts"],"names":["isArray","getPolygonSignedArea","forEachSegmentInPolygon","modifyPolygonWindingDirection","getPolygonSignedAreaPoints","forEachSegmentInPolygonPoints","modifyPolygonWindingDirectionPoints","Polygon","constructor","points","options","isFlatArray","start","end","length","size","isClosed","Object","freeze","getSignedArea","getArea","Math","abs","getWindingDirection","sign","forEachSegment","visitor","x1","y1","x2","y2","i1","i2","modifyWindingDirection","direction"],"mappings":";AACA,SAAQA,OAAR,QAAsB,eAAtB;AAIA,SACEC,oBADF,EAEEC,uBAFF,EAGEC,6BAHF,EAIEC,0BAJF,EAKEC,6BALF,EAMEC,mCANF,QAOO,iBAPP;AAgBA,eAAe,MAAMC,OAAN,CAAc;EAK3BC,WAAW,CAACC,MAAD,EAAkE;IAAA,IAA9BC,OAAuB,uEAAG,CAAA,CAA9D;IAAkE,eAAA,CAAA,IAAA,EAAA,QAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA;IAC3E,IAAA,CAAKD,MAAL,GAAcA,MAAd;IACA,IAAA,CAAKE,WAAL,GAAmB,CAACX,OAAO,CAACS,MAAM,CAAC,CAAD,CAAP,CAA3B;IAEA,IAAA,CAAKC,OAAL,GAAe;MACbE,KAAK,EAAEF,OAAO,CAACE,KAARF,IAAiB,CADX;MAEbG,GAAG,EAAEH,OAAO,CAACG,GAARH,IAAeD,MAAM,CAACK,MAFd;MAGbC,IAAI,EAAEL,OAAO,CAACK,IAARL,IAAgB,CAHT;MAIbM,QAAQ,EAAEN,OAAO,CAACM;IAJL,CAAf;IAOAC,MAAM,CAACC,MAAPD,CAAc,IAAdA,CAAAA;EACD;EAMDE,aAAa,GAAW;IACtB,IAAI,IAAA,CAAKR,WAAT,EAAsB,OAAOV,oBAAoB,CAAC,IAAA,CAAKQ,MAAN,EAA8B,IAAA,CAAKC,OAAnC,CAA3B;IAEtB,OAAON,0BAA0B,CAAC,IAAA,CAAKK,MAAN,EAA4B,IAAA,CAAKC,OAAjC,CAAjC;EACD;EAMDU,OAAO,GAAW;IAChB,OAAOC,IAAI,CAACC,GAALD,CAAS,IAAA,CAAKF,aAAL,EAATE,CAAP;EACD;EAMDE,mBAAmB,GAAW;IAC5B,OAAOF,IAAI,CAACG,IAALH,CAAU,IAAA,CAAKF,aAAL,EAAVE,CAAP;EACD;EAMDI,cAAc,CAACC,OAAD,EAAsC;IAClD,IAAI,IAAA,CAAKf,WAAT,EAAsB;MACpBT,uBAAuB,CACrB,IAAA,CAAKO,MADgB,EAGrB,CAACkB,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBC,EAAjB,EAAqBC,EAArB,KAA4B;QAE1BN,OAAO,CAAC,CAACC,EAAD,EAAKC,EAAL,CAAD,EAAW,CAACC,EAAD,EAAKC,EAAL,CAAX,EAAqBC,EAArB,EAAyBC,EAAzB,CAAPN;MACD,CANoB,EAOrB,IAAA,CAAKhB,OAPgB,CAAvBR;IASD,CAVD,MAUO;MACLG,6BAA6B,CAAC,IAAA,CAAKI,MAAN,EAA4BiB,OAA5B,EAAqC,IAAA,CAAKhB,OAA1C,CAA7BL;IACD;EACF;EAOD4B,sBAAsB,CAACC,SAAD,EAA6B;IACjD,IAAI,IAAA,CAAKvB,WAAT,EAAsB;MACpB,OAAOR,6BAA6B,CAAC,IAAA,CAAKM,MAAN,EAA8ByB,SAA9B,EAAyC,IAAA,CAAKxB,OAA9C,CAApC;IACD;IACD,OAAOJ,mCAAmC,CAAC,IAAA,CAAKG,MAAN,EAA4ByB,SAA5B,EAAuC,IAAA,CAAKxB,OAA5C,CAA1C;EACD;AA3E0B","sourcesContent":["/* eslint-disable no-undef, no-console */\nimport {isArray} from '@math.gl/core';\nimport type {SegmentVisitorPoints} from './polygon-utils';\nimport type {NumericArray} from '@math.gl/core';\n\nimport {\n  getPolygonSignedArea,\n  forEachSegmentInPolygon,\n  modifyPolygonWindingDirection,\n  getPolygonSignedAreaPoints,\n  forEachSegmentInPolygonPoints,\n  modifyPolygonWindingDirectionPoints\n} from './polygon-utils';\n\nexport type PolygonOptions = {\n  start?: number;\n  end?: number;\n  size?: number;\n  isClosed?: boolean;\n};\n\nexport default class Polygon {\n  points: NumericArray | number[][];\n  isFlatArray: boolean;\n  options: PolygonOptions;\n\n  constructor(points: NumericArray | number[][], options: PolygonOptions = {}) {\n    this.points = points;\n    this.isFlatArray = !isArray(points[0]);\n\n    this.options = {\n      start: options.start || 0,\n      end: options.end || points.length,\n      size: options.size || 2,\n      isClosed: options.isClosed\n    };\n\n    Object.freeze(this);\n  }\n\n  /**\n   * Returns signed area of the polygon.\n   * @returns Signed area of the polygon.\n   */\n  getSignedArea(): number {\n    if (this.isFlatArray) return getPolygonSignedArea(this.points as NumericArray, this.options);\n\n    return getPolygonSignedAreaPoints(this.points as number[][], this.options);\n  }\n\n  /**\n   * Returns absolute area of the polygon.\n   * @returns Absolute area of the polygon.\n   */\n  getArea(): number {\n    return Math.abs(this.getSignedArea());\n  }\n\n  /**\n   * Returns winding direction of the polygon.\n   * @returns Winding direction of the polygon. 1 is for clockwise, -1 for counterclockwise winding direction.\n   */\n  getWindingDirection(): number {\n    return Math.sign(this.getSignedArea());\n  }\n\n  /**\n   * Calls the visitor callback for each segment in the polygon.\n   * @param visitor A callback to call for each segment.\n   */\n  forEachSegment(visitor: SegmentVisitorPoints): void {\n    if (this.isFlatArray) {\n      forEachSegmentInPolygon(\n        this.points as NumericArray,\n        // eslint-disable-next-line max-params\n        (x1, y1, x2, y2, i1, i2) => {\n          // TODO @igorDykhta original visitor uses arrays for each point, but with flat arrays performance degrades if we allocate points for each segment\n          visitor([x1, y1], [x2, y2], i1, i2);\n        },\n        this.options\n      );\n    } else {\n      forEachSegmentInPolygonPoints(this.points as number[][], visitor, this.options);\n    }\n  }\n\n  /**\n   * Checks winding direction of the polygon and reverses the polygon in case of opposite winding direction.\n   * @param direction Requested winding direction. 1 is for clockwise, -1 for counterclockwise winding direction.\n   * @return Returns true if the winding direction was changed.\n   */\n  modifyWindingDirection(direction: number): boolean {\n    if (this.isFlatArray) {\n      return modifyPolygonWindingDirection(this.points as NumericArray, direction, this.options);\n    }\n    return modifyPolygonWindingDirectionPoints(this.points as number[][], direction, this.options);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}