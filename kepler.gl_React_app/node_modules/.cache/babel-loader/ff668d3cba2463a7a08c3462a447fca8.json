{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { atob } from '../text-encoding/btoa.node';\nexport var FileReaderPolyfill = function () {\n  function FileReaderPolyfill() {\n    _classCallCheck(this, FileReaderPolyfill);\n    this.onload = null;\n  }\n  _createClass(FileReaderPolyfill, [{\n    key: \"abort\",\n    value: function abort() {}\n  }, {\n    key: \"readAsArrayBuffer\",\n    value: function () {\n      var _readAsArrayBuffer = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(blob) {\n        var arrayBuffer;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return blob.arrayBuffer();\n              case 2:\n                arrayBuffer = _context.sent;\n                if (this.onload) {\n                  this.onload({\n                    target: {\n                      result: arrayBuffer\n                    }\n                  });\n                }\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function readAsArrayBuffer(_x) {\n        return _readAsArrayBuffer.apply(this, arguments);\n      }\n      return readAsArrayBuffer;\n    }()\n  }, {\n    key: \"readAsBinaryString\",\n    value: function readAsBinaryString(blob) {\n      throw Error('Not implemented');\n    }\n  }, {\n    key: \"readAsDataURL\",\n    value: function () {\n      var _readAsDataURL = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(blob) {\n        var text, dataUrl;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return blob.text();\n              case 2:\n                text = _context2.sent;\n                dataUrl = \"data://;base64,\".concat(atob(text));\n                if (this.onload) {\n                  this.onload({\n                    target: {\n                      result: dataUrl\n                    }\n                  });\n                }\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function readAsDataURL(_x2) {\n        return _readAsDataURL.apply(this, arguments);\n      }\n      return readAsDataURL;\n    }()\n  }, {\n    key: \"readAsText\",\n    value: function () {\n      var _readAsText = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(blob) {\n        var text;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return blob.text();\n              case 2:\n                text = _context3.sent;\n                if (this.onload) {\n                  this.onload({\n                    target: {\n                      result: text\n                    }\n                  });\n                }\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function readAsText(_x3) {\n        return _readAsText.apply(this, arguments);\n      }\n      return readAsText;\n    }()\n  }]);\n  return FileReaderPolyfill;\n}();","map":{"version":3,"sources":["../../../src/file/file-reader-polyfill.js"],"names":["atob","FileReaderPolyfill","onload","blob","arrayBuffer","target","result","Error","text","dataUrl"],"mappings":"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","sourcesContent":["import {atob} from '../text-encoding/btoa.node';\n\nexport class FileReaderPolyfill {\n  constructor() {\n    this.onload = null;\n  }\n\n  abort() {}\n\n  async readAsArrayBuffer(blob) {\n    const arrayBuffer = await blob.arrayBuffer();\n    if (this.onload) {\n      this.onload({target: {result: arrayBuffer}});\n    }\n  }\n\n  readAsBinaryString(blob) {\n    throw Error('Not implemented');\n  }\n\n  async readAsDataURL(blob) {\n    const text = await blob.text();\n    const dataUrl = `data://;base64,${atob(text)}`;\n    if (this.onload) {\n      this.onload({target: {result: dataUrl}});\n    }\n  }\n\n  async readAsText(blob) {\n    const text = await blob.text();\n    if (this.onload) {\n      this.onload({target: {result: text}});\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}