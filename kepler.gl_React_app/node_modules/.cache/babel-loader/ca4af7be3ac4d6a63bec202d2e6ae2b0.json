{"ast":null,"code":"import WEBGL_FEATURES from './webgl-features-table';\nimport { isWebGL2, log } from '@luma.gl/gltools';\nimport { assert } from '../utils/assert';\nconst LOG_UNSUPPORTED_FEATURE = 2;\nexport function hasFeature(gl, feature) {\n  return hasFeatures(gl, feature);\n}\nexport function hasFeatures(gl, features) {\n  features = Array.isArray(features) ? features : [features];\n  return features.every(feature => {\n    return isFeatureSupported(gl, feature);\n  });\n}\nexport function getFeatures(gl) {\n  gl.luma = gl.luma || {};\n  gl.luma.caps = gl.luma.caps || {};\n  for (const cap in WEBGL_FEATURES) {\n    if (gl.luma.caps[cap] === undefined) {\n      gl.luma.caps[cap] = isFeatureSupported(gl, cap);\n    }\n  }\n  return gl.luma.caps;\n}\nfunction isFeatureSupported(gl, cap) {\n  gl.luma = gl.luma || {};\n  gl.luma.caps = gl.luma.caps || {};\n  if (gl.luma.caps[cap] === undefined) {\n    gl.luma.caps[cap] = queryFeature(gl, cap);\n  }\n  if (!gl.luma.caps[cap]) {\n    log.log(LOG_UNSUPPORTED_FEATURE, \"Feature: \".concat(cap, \" not supported\"))();\n  }\n  return gl.luma.caps[cap];\n}\nfunction queryFeature(gl, cap) {\n  const feature = WEBGL_FEATURES[cap];\n  assert(feature, cap);\n  let isSupported;\n  const featureDefinition = isWebGL2(gl) ? feature[1] || feature[0] : feature[0];\n  if (typeof featureDefinition === 'function') {\n    isSupported = featureDefinition(gl);\n  } else if (Array.isArray(featureDefinition)) {\n    isSupported = true;\n    for (const extension of featureDefinition) {\n      isSupported = isSupported && Boolean(gl.getExtension(extension));\n    }\n  } else if (typeof featureDefinition === 'string') {\n    isSupported = Boolean(gl.getExtension(featureDefinition));\n  } else if (typeof featureDefinition === 'boolean') {\n    isSupported = featureDefinition;\n  } else {\n    assert(false);\n  }\n  return isSupported;\n}","map":{"version":3,"sources":["../../../src/features/features.js"],"names":["WEBGL_FEATURES","isWebGL2","log","assert","LOG_UNSUPPORTED_FEATURE","hasFeature","gl","feature","hasFeatures","features","Array","isArray","every","isFeatureSupported","getFeatures","luma","caps","cap","undefined","queryFeature","isSupported","featureDefinition","extension","Boolean","getExtension"],"mappings":"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","sourcesContent":["// Feature detection for WebGL\n//\n// Provides a function that enables simple checking of which WebGL features are\n// available in an WebGL1 or WebGL2 environment.\n\nimport WEBGL_FEATURES from './webgl-features-table';\nimport {isWebGL2, log} from '@luma.gl/gltools';\nimport {assert} from '../utils/assert';\n\nconst LOG_UNSUPPORTED_FEATURE = 2;\n\n// Check one feature\nexport function hasFeature(gl, feature) {\n  return hasFeatures(gl, feature);\n}\n\n// Check one or more features\nexport function hasFeatures(gl, features) {\n  features = Array.isArray(features) ? features : [features];\n  return features.every(feature => {\n    return isFeatureSupported(gl, feature);\n  });\n}\n\n// Return a list of supported features\nexport function getFeatures(gl) {\n  gl.luma = gl.luma || {};\n  gl.luma.caps = gl.luma.caps || {};\n  for (const cap in WEBGL_FEATURES) {\n    if (gl.luma.caps[cap] === undefined) {\n      gl.luma.caps[cap] = isFeatureSupported(gl, cap);\n    }\n  }\n  return gl.luma.caps;\n}\n\n// TODO - cache the value\nfunction isFeatureSupported(gl, cap) {\n  gl.luma = gl.luma || {};\n  gl.luma.caps = gl.luma.caps || {};\n\n  if (gl.luma.caps[cap] === undefined) {\n    gl.luma.caps[cap] = queryFeature(gl, cap);\n  }\n\n  if (!gl.luma.caps[cap]) {\n    log.log(LOG_UNSUPPORTED_FEATURE, `Feature: ${cap} not supported`)();\n  }\n\n  return gl.luma.caps[cap];\n}\n\nfunction queryFeature(gl, cap) {\n  const feature = WEBGL_FEATURES[cap];\n  assert(feature, cap);\n\n  let isSupported;\n\n  // Get extension name from table\n  const featureDefinition = isWebGL2(gl) ? feature[1] || feature[0] : feature[0];\n\n  // Check if the value is dependent on checking one or more extensions\n  if (typeof featureDefinition === 'function') {\n    isSupported = featureDefinition(gl);\n  } else if (Array.isArray(featureDefinition)) {\n    isSupported = true;\n    for (const extension of featureDefinition) {\n      isSupported = isSupported && Boolean(gl.getExtension(extension));\n    }\n  } else if (typeof featureDefinition === 'string') {\n    isSupported = Boolean(gl.getExtension(featureDefinition));\n  } else if (typeof featureDefinition === 'boolean') {\n    isSupported = featureDefinition;\n  } else {\n    assert(false);\n  }\n\n  return isSupported;\n}\n"]},"metadata":{},"sourceType":"module"}