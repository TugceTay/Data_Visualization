{"ast":null,"code":"import { log } from '@luma.gl/gltools';\nimport Framebuffer from './framebuffer';\nimport Renderbuffer from './renderbuffer';\nimport Texture from './texture';\nimport { assert } from '../utils/assert';\nconst UNIFORM_SETTERS = {\n  [5126]: getArraySetter.bind(null, 'uniform1fv', toFloatArray, 1, setVectorUniform),\n  [35664]: getArraySetter.bind(null, 'uniform2fv', toFloatArray, 2, setVectorUniform),\n  [35665]: getArraySetter.bind(null, 'uniform3fv', toFloatArray, 3, setVectorUniform),\n  [35666]: getArraySetter.bind(null, 'uniform4fv', toFloatArray, 4, setVectorUniform),\n  [5124]: getArraySetter.bind(null, 'uniform1iv', toIntArray, 1, setVectorUniform),\n  [35667]: getArraySetter.bind(null, 'uniform2iv', toIntArray, 2, setVectorUniform),\n  [35668]: getArraySetter.bind(null, 'uniform3iv', toIntArray, 3, setVectorUniform),\n  [35669]: getArraySetter.bind(null, 'uniform4iv', toIntArray, 4, setVectorUniform),\n  [35670]: getArraySetter.bind(null, 'uniform1iv', toIntArray, 1, setVectorUniform),\n  [35671]: getArraySetter.bind(null, 'uniform2iv', toIntArray, 2, setVectorUniform),\n  [35672]: getArraySetter.bind(null, 'uniform3iv', toIntArray, 3, setVectorUniform),\n  [35673]: getArraySetter.bind(null, 'uniform4iv', toIntArray, 4, setVectorUniform),\n  [35674]: getArraySetter.bind(null, 'uniformMatrix2fv', toFloatArray, 4, setMatrixUniform),\n  [35675]: getArraySetter.bind(null, 'uniformMatrix3fv', toFloatArray, 9, setMatrixUniform),\n  [35676]: getArraySetter.bind(null, 'uniformMatrix4fv', toFloatArray, 16, setMatrixUniform),\n  [35678]: getSamplerSetter,\n  [35680]: getSamplerSetter,\n  [5125]: getArraySetter.bind(null, 'uniform1uiv', toUIntArray, 1, setVectorUniform),\n  [36294]: getArraySetter.bind(null, 'uniform2uiv', toUIntArray, 2, setVectorUniform),\n  [36295]: getArraySetter.bind(null, 'uniform3uiv', toUIntArray, 3, setVectorUniform),\n  [36296]: getArraySetter.bind(null, 'uniform4uiv', toUIntArray, 4, setVectorUniform),\n  [35685]: getArraySetter.bind(null, 'uniformMatrix2x3fv', toFloatArray, 6, setMatrixUniform),\n  [35686]: getArraySetter.bind(null, 'uniformMatrix2x4fv', toFloatArray, 8, setMatrixUniform),\n  [35687]: getArraySetter.bind(null, 'uniformMatrix3x2fv', toFloatArray, 6, setMatrixUniform),\n  [35688]: getArraySetter.bind(null, 'uniformMatrix3x4fv', toFloatArray, 12, setMatrixUniform),\n  [35689]: getArraySetter.bind(null, 'uniformMatrix4x2fv', toFloatArray, 8, setMatrixUniform),\n  [35690]: getArraySetter.bind(null, 'uniformMatrix4x3fv', toFloatArray, 12, setMatrixUniform),\n  [35678]: getSamplerSetter,\n  [35680]: getSamplerSetter,\n  [35679]: getSamplerSetter,\n  [35682]: getSamplerSetter,\n  [36289]: getSamplerSetter,\n  [36292]: getSamplerSetter,\n  [36293]: getSamplerSetter,\n  [36298]: getSamplerSetter,\n  [36299]: getSamplerSetter,\n  [36300]: getSamplerSetter,\n  [36303]: getSamplerSetter,\n  [36306]: getSamplerSetter,\n  [36307]: getSamplerSetter,\n  [36308]: getSamplerSetter,\n  [36311]: getSamplerSetter\n};\nconst FLOAT_ARRAY = {};\nconst INT_ARRAY = {};\nconst UINT_ARRAY = {};\nconst array1 = [0];\nfunction toTypedArray(value, uniformLength, Type, cache) {\n  if (uniformLength === 1 && typeof value === 'boolean') {\n    value = value ? 1 : 0;\n  }\n  if (Number.isFinite(value)) {\n    array1[0] = value;\n    value = array1;\n  }\n  const length = value.length;\n  if (length % uniformLength) {\n    log.warn(\"Uniform size should be multiples of \".concat(uniformLength), value)();\n  }\n  if (value instanceof Type) {\n    return value;\n  }\n  let result = cache[length];\n  if (!result) {\n    result = new Type(length);\n    cache[length] = result;\n  }\n  for (let i = 0; i < length; i++) {\n    result[i] = value[i];\n  }\n  return result;\n}\nfunction toFloatArray(value, uniformLength) {\n  return toTypedArray(value, uniformLength, Float32Array, FLOAT_ARRAY);\n}\nfunction toIntArray(value, uniformLength) {\n  return toTypedArray(value, uniformLength, Int32Array, INT_ARRAY);\n}\nfunction toUIntArray(value, uniformLength) {\n  return toTypedArray(value, uniformLength, Uint32Array, UINT_ARRAY);\n}\nexport function getUniformSetter(gl, location, info) {\n  const setter = UNIFORM_SETTERS[info.type];\n  if (!setter) {\n    throw new Error(\"Unknown GLSL uniform type \".concat(info.type));\n  }\n  return setter().bind(null, gl, location);\n}\nexport function parseUniformName(name) {\n  if (name[name.length - 1] !== ']') {\n    return {\n      name,\n      length: 1,\n      isArray: false\n    };\n  }\n  const UNIFORM_NAME_REGEXP = /([^[]*)(\\[[0-9]+\\])?/;\n  const matches = name.match(UNIFORM_NAME_REGEXP);\n  if (!matches || matches.length < 2) {\n    throw new Error(\"Failed to parse GLSL uniform name \".concat(name));\n  }\n  return {\n    name: matches[1],\n    length: matches[2] || 1,\n    isArray: Boolean(matches[2])\n  };\n}\nexport function checkUniformValues(uniforms, source, uniformMap) {\n  for (const uniformName in uniforms) {\n    const value = uniforms[uniformName];\n    const shouldCheck = !uniformMap || Boolean(uniformMap[uniformName]);\n    if (shouldCheck && !checkUniformValue(value)) {\n      source = source ? \"\".concat(source, \" \") : '';\n      console.error(\"\".concat(source, \" Bad uniform \").concat(uniformName), value);\n      throw new Error(\"\".concat(source, \" Bad uniform \").concat(uniformName));\n    }\n  }\n  return true;\n}\nfunction checkUniformValue(value) {\n  if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n    return checkUniformArray(value);\n  }\n  if (isFinite(value)) {\n    return true;\n  } else if (value === true || value === false) {\n    return true;\n  } else if (value instanceof Texture) {\n    return true;\n  } else if (value instanceof Renderbuffer) {\n    return true;\n  } else if (value instanceof Framebuffer) {\n    return Boolean(value.texture);\n  }\n  return false;\n}\nexport function copyUniform(uniforms, key, value) {\n  if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n    if (uniforms[key]) {\n      const dest = uniforms[key];\n      for (let i = 0, len = value.length; i < len; ++i) {\n        dest[i] = value[i];\n      }\n    } else {\n      uniforms[key] = value.slice();\n    }\n  } else {\n    uniforms[key] = value;\n  }\n}\nfunction checkUniformArray(value) {\n  if (value.length === 0) {\n    return false;\n  }\n  const checkLength = Math.min(value.length, 16);\n  for (let i = 0; i < checkLength; ++i) {\n    if (!Number.isFinite(value[i])) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getSamplerSetter() {\n  let cache = null;\n  return (gl, location, value) => {\n    const update = cache !== value;\n    if (update) {\n      gl.uniform1i(location, value);\n      cache = value;\n    }\n    return update;\n  };\n}\nfunction getArraySetter(functionName, toArray, size, uniformSetter) {\n  let cache = null;\n  let cacheLength = null;\n  return (gl, location, value) => {\n    const arrayValue = toArray(value, size);\n    const length = arrayValue.length;\n    let update = false;\n    if (cache === null) {\n      cache = new Float32Array(length);\n      cacheLength = length;\n      update = true;\n    } else {\n      assert(cacheLength === length, 'Uniform length cannot change.');\n      for (let i = 0; i < length; ++i) {\n        if (arrayValue[i] !== cache[i]) {\n          update = true;\n          break;\n        }\n      }\n    }\n    if (update) {\n      uniformSetter(gl, functionName, location, arrayValue);\n      cache.set(arrayValue);\n    }\n    return update;\n  };\n}\nfunction setVectorUniform(gl, functionName, location, value) {\n  gl[functionName](location, value);\n}\nfunction setMatrixUniform(gl, functionName, location, value) {\n  gl[functionName](location, false, value);\n}","map":{"version":3,"sources":["../../../src/classes/uniforms.js"],"names":["log","Framebuffer","Renderbuffer","Texture","assert","UNIFORM_SETTERS","getArraySetter","bind","toFloatArray","setVectorUniform","toIntArray","setMatrixUniform","getSamplerSetter","toUIntArray","FLOAT_ARRAY","INT_ARRAY","UINT_ARRAY","array1","toTypedArray","value","uniformLength","Type","cache","Number","isFinite","length","warn","result","i","Float32Array","Int32Array","Uint32Array","getUniformSetter","gl","location","info","setter","type","Error","parseUniformName","name","isArray","UNIFORM_NAME_REGEXP","matches","match","Boolean","checkUniformValues","uniforms","source","uniformMap","uniformName","shouldCheck","checkUniformValue","console","error","Array","ArrayBuffer","isView","checkUniformArray","texture","copyUniform","key","dest","len","slice","checkLength","Math","min","update","uniform1i","functionName","toArray","size","uniformSetter","cacheLength","arrayValue","set"],"mappings":"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","sourcesContent":["/** @typedef {import('./uniforms')} types */\n\nimport GL from '@luma.gl/constants';\nimport {log} from '@luma.gl/gltools';\n\nimport Framebuffer from './framebuffer';\nimport Renderbuffer from './renderbuffer';\nimport Texture from './texture';\nimport {assert} from '../utils/assert';\n\nconst UNIFORM_SETTERS = {\n  // WEBGL1\n\n  /* eslint-disable max-len */\n  [GL.FLOAT]: getArraySetter.bind(null, 'uniform1fv', toFloatArray, 1, setVectorUniform),\n  [GL.FLOAT_VEC2]: getArraySetter.bind(null, 'uniform2fv', toFloatArray, 2, setVectorUniform),\n  [GL.FLOAT_VEC3]: getArraySetter.bind(null, 'uniform3fv', toFloatArray, 3, setVectorUniform),\n  [GL.FLOAT_VEC4]: getArraySetter.bind(null, 'uniform4fv', toFloatArray, 4, setVectorUniform),\n\n  [GL.INT]: getArraySetter.bind(null, 'uniform1iv', toIntArray, 1, setVectorUniform),\n  [GL.INT_VEC2]: getArraySetter.bind(null, 'uniform2iv', toIntArray, 2, setVectorUniform),\n  [GL.INT_VEC3]: getArraySetter.bind(null, 'uniform3iv', toIntArray, 3, setVectorUniform),\n  [GL.INT_VEC4]: getArraySetter.bind(null, 'uniform4iv', toIntArray, 4, setVectorUniform),\n\n  [GL.BOOL]: getArraySetter.bind(null, 'uniform1iv', toIntArray, 1, setVectorUniform),\n  [GL.BOOL_VEC2]: getArraySetter.bind(null, 'uniform2iv', toIntArray, 2, setVectorUniform),\n  [GL.BOOL_VEC3]: getArraySetter.bind(null, 'uniform3iv', toIntArray, 3, setVectorUniform),\n  [GL.BOOL_VEC4]: getArraySetter.bind(null, 'uniform4iv', toIntArray, 4, setVectorUniform),\n\n  // uniformMatrix(false): don't transpose the matrix\n  [GL.FLOAT_MAT2]: getArraySetter.bind(null, 'uniformMatrix2fv', toFloatArray, 4, setMatrixUniform),\n  [GL.FLOAT_MAT3]: getArraySetter.bind(null, 'uniformMatrix3fv', toFloatArray, 9, setMatrixUniform),\n  [GL.FLOAT_MAT4]: getArraySetter.bind(\n    null,\n    'uniformMatrix4fv',\n    toFloatArray,\n    16,\n    setMatrixUniform\n  ),\n\n  [GL.SAMPLER_2D]: getSamplerSetter,\n  [GL.SAMPLER_CUBE]: getSamplerSetter,\n\n  // WEBGL2 - unsigned integers, irregular matrices, additional texture samplers\n\n  [GL.UNSIGNED_INT]: getArraySetter.bind(null, 'uniform1uiv', toUIntArray, 1, setVectorUniform),\n  [GL.UNSIGNED_INT_VEC2]: getArraySetter.bind(\n    null,\n    'uniform2uiv',\n    toUIntArray,\n    2,\n    setVectorUniform\n  ),\n  [GL.UNSIGNED_INT_VEC3]: getArraySetter.bind(\n    null,\n    'uniform3uiv',\n    toUIntArray,\n    3,\n    setVectorUniform\n  ),\n  [GL.UNSIGNED_INT_VEC4]: getArraySetter.bind(\n    null,\n    'uniform4uiv',\n    toUIntArray,\n    4,\n    setVectorUniform\n  ),\n\n  // uniformMatrix(false): don't transpose the matrix\n  [GL.FLOAT_MAT2x3]: getArraySetter.bind(\n    null,\n    'uniformMatrix2x3fv',\n    toFloatArray,\n    6,\n    setMatrixUniform\n  ),\n  [GL.FLOAT_MAT2x4]: getArraySetter.bind(\n    null,\n    'uniformMatrix2x4fv',\n    toFloatArray,\n    8,\n    setMatrixUniform\n  ),\n  [GL.FLOAT_MAT3x2]: getArraySetter.bind(\n    null,\n    'uniformMatrix3x2fv',\n    toFloatArray,\n    6,\n    setMatrixUniform\n  ),\n  [GL.FLOAT_MAT3x4]: getArraySetter.bind(\n    null,\n    'uniformMatrix3x4fv',\n    toFloatArray,\n    12,\n    setMatrixUniform\n  ),\n  [GL.FLOAT_MAT4x2]: getArraySetter.bind(\n    null,\n    'uniformMatrix4x2fv',\n    toFloatArray,\n    8,\n    setMatrixUniform\n  ),\n  [GL.FLOAT_MAT4x3]: getArraySetter.bind(\n    null,\n    'uniformMatrix4x3fv',\n    toFloatArray,\n    12,\n    setMatrixUniform\n  ),\n\n  [GL.SAMPLER_2D]: getSamplerSetter,\n  [GL.SAMPLER_CUBE]: getSamplerSetter,\n\n  [GL.SAMPLER_3D]: getSamplerSetter,\n  [GL.SAMPLER_2D_SHADOW]: getSamplerSetter,\n  [GL.SAMPLER_2D_ARRAY]: getSamplerSetter,\n  [GL.SAMPLER_2D_ARRAY_SHADOW]: getSamplerSetter,\n  [GL.SAMPLER_CUBE_SHADOW]: getSamplerSetter,\n  [GL.INT_SAMPLER_2D]: getSamplerSetter,\n  [GL.INT_SAMPLER_3D]: getSamplerSetter,\n  [GL.INT_SAMPLER_CUBE]: getSamplerSetter,\n  [GL.INT_SAMPLER_2D_ARRAY]: getSamplerSetter,\n  [GL.UNSIGNED_INT_SAMPLER_2D]: getSamplerSetter,\n  [GL.UNSIGNED_INT_SAMPLER_3D]: getSamplerSetter,\n  [GL.UNSIGNED_INT_SAMPLER_CUBE]: getSamplerSetter,\n  [GL.UNSIGNED_INT_SAMPLER_2D_ARRAY]: getSamplerSetter\n  /* eslint-enable max-len */\n};\n\n// Pre-allocated typed arrays for temporary conversion\nconst FLOAT_ARRAY = {};\nconst INT_ARRAY = {};\nconst UINT_ARRAY = {};\n\nconst array1 = [0];\n\n// Functions to ensure the type of uniform values\n// This is done because uniform*v functions\n// are extremely slow when consuming JS arrays directly.\nfunction toTypedArray(value, uniformLength, Type, cache) {\n  // convert boolean uniforms to Number\n  if (uniformLength === 1 && typeof value === 'boolean') {\n    value = value ? 1 : 0;\n  }\n  if (Number.isFinite(value)) {\n    array1[0] = value;\n    value = array1;\n  }\n  const length = value.length;\n  if (length % uniformLength) {\n    log.warn(`Uniform size should be multiples of ${uniformLength}`, value)();\n  }\n\n  if (value instanceof Type) {\n    return value;\n  }\n  let result = cache[length];\n  if (!result) {\n    result = new Type(length);\n    cache[length] = result;\n  }\n  for (let i = 0; i < length; i++) {\n    result[i] = value[i];\n  }\n  return result;\n}\n\nfunction toFloatArray(value, uniformLength) {\n  return toTypedArray(value, uniformLength, Float32Array, FLOAT_ARRAY);\n}\n\nfunction toIntArray(value, uniformLength) {\n  return toTypedArray(value, uniformLength, Int32Array, INT_ARRAY);\n}\n\nfunction toUIntArray(value, uniformLength) {\n  return toTypedArray(value, uniformLength, Uint32Array, UINT_ARRAY);\n} // Returns a Magic Uniform Setter\n\n// PUBLIC API\n\n/** @type {types['getUniformSetter']} */ export function getUniformSetter(gl, location, info) {\n  const setter = UNIFORM_SETTERS[info.type];\n  if (!setter) {\n    throw new Error(`Unknown GLSL uniform type ${info.type}`);\n  }\n\n  // NOTE(Tarek): This construction is the ensure\n  // separate caches for all setters.\n  return setter().bind(null, gl, location);\n}\n\n/** @type {types['parseUniformName']} */\nexport function parseUniformName(name) {\n  // Shortcut to avoid redundant or bad matches\n  if (name[name.length - 1] !== ']') {\n    return {\n      name,\n      length: 1,\n      isArray: false\n    };\n  }\n\n  // if array name then clean the array brackets\n  const UNIFORM_NAME_REGEXP = /([^[]*)(\\[[0-9]+\\])?/;\n  const matches = name.match(UNIFORM_NAME_REGEXP);\n  if (!matches || matches.length < 2) {\n    throw new Error(`Failed to parse GLSL uniform name ${name}`);\n  }\n\n  return {\n    name: matches[1],\n    length: matches[2] || 1,\n    isArray: Boolean(matches[2])\n  };\n} // To facilitate early detection of e.g. undefined values in JavaScript\n\n// Basic checks of uniform values (with or without knowledge of program)\n\n/** @type {types['checkUniformValues']} */\nexport function checkUniformValues(uniforms, source, uniformMap) {\n  for (const uniformName in uniforms) {\n    const value = uniforms[uniformName];\n    const shouldCheck = !uniformMap || Boolean(uniformMap[uniformName]);\n    if (shouldCheck && !checkUniformValue(value)) {\n      // Add space to source\n      source = source ? `${source} ` : '';\n      // Value could be unprintable so write the object on console\n      console.error(`${source} Bad uniform ${uniformName}`, value); // eslint-disable-line\n      /* eslint-enable no-console */\n      throw new Error(`${source} Bad uniform ${uniformName}`);\n    }\n  }\n  return true;\n}\n\n// TODO use type information during validation\nfunction checkUniformValue(value) {\n  if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n    return checkUniformArray(value);\n  }\n\n  // Check if single value is a number\n  if (isFinite(value)) {\n    return true;\n  } else if (value === true || value === false) {\n    return true;\n  } else if (value instanceof Texture) {\n    return true;\n  } else if (value instanceof Renderbuffer) {\n    return true;\n  } else if (value instanceof Framebuffer) {\n    return Boolean(value.texture);\n  }\n  return false;\n}\n\n/** @type {types['copyUniform']} */\nexport function copyUniform(uniforms, key, value) {\n  if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n    if (uniforms[key]) {\n      const dest = uniforms[key];\n      // @ts-ignore\n      for (let i = 0, len = value.length; i < len; ++i) {\n        dest[i] = value[i];\n      }\n    } else {\n      // @ts-ignore\n      uniforms[key] = value.slice();\n    }\n  } else {\n    uniforms[key] = value;\n  }\n}\n\n// HELPERS\n\nfunction checkUniformArray(value) {\n  // Check that every element in array is a number, and at least 1 element\n  if (value.length === 0) {\n    return false;\n  }\n\n  const checkLength = Math.min(value.length, 16);\n\n  for (let i = 0; i < checkLength; ++i) {\n    if (!Number.isFinite(value[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n// NOTE(Tarek): Setters maintain a cache\n// of the previously set value, and\n// avoid resetting it if it's the same.\nfunction getSamplerSetter() {\n  let cache = null;\n  return (gl, location, value) => {\n    const update = cache !== value;\n    if (update) {\n      gl.uniform1i(location, value);\n      cache = value;\n    }\n\n    return update;\n  };\n}\n\nfunction getArraySetter(functionName, toArray, size, uniformSetter) {\n  let cache = null;\n  let cacheLength = null;\n  return (gl, location, value) => {\n    const arrayValue = toArray(value, size);\n    const length = arrayValue.length;\n    let update = false;\n    if (cache === null) {\n      cache = new Float32Array(length);\n      cacheLength = length;\n      update = true;\n    } else {\n      assert(cacheLength === length, 'Uniform length cannot change.');\n      for (let i = 0; i < length; ++i) {\n        if (arrayValue[i] !== cache[i]) {\n          update = true;\n          break;\n        }\n      }\n    }\n    if (update) {\n      uniformSetter(gl, functionName, location, arrayValue);\n      cache.set(arrayValue);\n    }\n\n    return update;\n  };\n}\n\nfunction setVectorUniform(gl, functionName, location, value) {\n  gl[functionName](location, value);\n}\n\nfunction setMatrixUniform(gl, functionName, location, value) {\n  gl[functionName](location, false, value);\n}\n"]},"metadata":{},"sourceType":"module"}