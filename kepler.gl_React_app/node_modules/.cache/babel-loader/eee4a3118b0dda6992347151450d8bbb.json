{"ast":null,"code":"import Input from './input';\nconst EVENT_TYPE = 'contextmenu';\nexport default class ContextmenuInput extends Input {\n  constructor(element, callback, options) {\n    super(element, callback, options);\n    this.handleEvent = event => {\n      if (!this.options.enable) {\n        return;\n      }\n      this.callback({\n        type: EVENT_TYPE,\n        center: {\n          x: event.clientX,\n          y: event.clientY\n        },\n        srcEvent: event,\n        pointerType: 'mouse',\n        target: event.target\n      });\n    };\n    element.addEventListener('contextmenu', this.handleEvent);\n  }\n  destroy() {\n    this.element.removeEventListener('contextmenu', this.handleEvent);\n  }\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n  enableEventType(eventType, enabled) {\n    if (eventType === EVENT_TYPE) {\n      this.options.enable = enabled;\n    }\n  }\n}","map":{"version":3,"sources":["../../../src/inputs/contextmenu-input.ts"],"names":[],"mappings":"AACA,OAAO,KAAqB,MAAM,SAAS;AAE3C,MAAM,UAAU,GAAG,aAAa;AAEhC,eAAc,MAAO,gBAAiB,SAAQ,KAA2C,CAAA;EACvF,WAAA,CACE,OAAoB,EACpB,QAAiD,EACjD,OAAqB,EAAA;IAErB,KAAK,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC;IAmBnC,IAAA,CAAA,WAAW,GAAI,KAAiB,IAAI;MAClC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;QACxB;MACD;MAED,IAAI,CAAC,QAAQ,CAAC;QACZ,IAAI,EAAE,UAAU;QAChB,MAAM,EAAE;UACN,CAAC,EAAE,KAAK,CAAC,OAAO;UAChB,CAAC,EAAE,KAAK,CAAC;SACV;QACD,QAAQ,EAAE,KAAK;QACf,WAAW,EAAE,OAAO;QACpB,MAAM,EAAE,KAAK,CAAC;OACf,CAAC;IACJ,CAAC;IAhCC,OAAO,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC;EAC3D;EAEA,OAAO,GAAA;IACL,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC;EACnE;EAEA;;;AAGG;EACH,eAAe,CAAC,SAAiB,EAAE,OAAgB,EAAA;IACjD,IAAI,SAAS,KAAK,UAAU,EAAE;MAC5B,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,OAAO;IAC9B;EACH;AAkBD","sourceRoot":"","sourcesContent":["import Input from './input';\nconst EVENT_TYPE = 'contextmenu';\nexport default class ContextmenuInput extends Input {\n    constructor(element, callback, options) {\n        super(element, callback, options);\n        this.handleEvent = (event) => {\n            if (!this.options.enable) {\n                return;\n            }\n            this.callback({\n                type: EVENT_TYPE,\n                center: {\n                    x: event.clientX,\n                    y: event.clientY\n                },\n                srcEvent: event,\n                pointerType: 'mouse',\n                target: event.target\n            });\n        };\n        element.addEventListener('contextmenu', this.handleEvent);\n    }\n    destroy() {\n        this.element.removeEventListener('contextmenu', this.handleEvent);\n    }\n    /**\n     * Enable this input (begin processing events)\n     * if the specified event type is among those handled by this input.\n     */\n    enableEventType(eventType, enabled) {\n        if (eventType === EVENT_TYPE) {\n            this.options.enable = enabled;\n        }\n    }\n}\n//# sourceMappingURL=contextmenu-input.js.map"]},"metadata":{},"sourceType":"module"}