{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { Layer, project32, picking } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './arc-layer-vertex.glsl';\nimport fs from './arc-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  getSourcePosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.sourcePosition;\n    }\n  },\n  getTargetPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.targetPosition;\n    }\n  },\n  getSourceColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getTargetColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getHeight: {\n    type: 'accessor',\n    value: 1\n  },\n  getTilt: {\n    type: 'accessor',\n    value: 0\n  },\n  greatCircle: false,\n  widthUnits: 'pixels',\n  widthScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  widthMinPixels: {\n    type: 'number',\n    value: 0,\n    min: 0\n  },\n  widthMaxPixels: {\n    type: 'number',\n    value: Number.MAX_SAFE_INTEGER,\n    min: 0\n  }\n};\nvar ArcLayer = function (_Layer) {\n  _inherits(ArcLayer, _Layer);\n  function ArcLayer() {\n    _classCallCheck(this, ArcLayer);\n    return _possibleConstructorReturn(this, _getPrototypeOf(ArcLayer).apply(this, arguments));\n  }\n  _createClass(ArcLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _get(_getPrototypeOf(ArcLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instanceSourcePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getSourcePosition'\n        },\n        instanceTargetPositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getTargetPosition'\n        },\n        instanceSourceColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: true,\n          accessor: 'getSourceColor',\n          defaultValue: DEFAULT_COLOR\n        },\n        instanceTargetColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: true,\n          accessor: 'getTargetColor',\n          defaultValue: DEFAULT_COLOR\n        },\n        instanceWidths: {\n          size: 1,\n          transition: true,\n          accessor: 'getWidth',\n          defaultValue: 1\n        },\n        instanceHeights: {\n          size: 1,\n          transition: true,\n          accessor: 'getHeight',\n          defaultValue: 1\n        },\n        instanceTilts: {\n          size: 1,\n          transition: true,\n          accessor: 'getTilt',\n          defaultValue: 0\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n        oldProps = _ref.oldProps,\n        changeFlags = _ref.changeFlags;\n      _get(_getPrototypeOf(ArcLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n      if (changeFlags.extensionsChanged) {\n        var gl = this.context.gl;\n        if (this.state.model) {\n          this.state.model[\"delete\"]();\n        }\n        this.setState({\n          model: this._getModel(gl)\n        });\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var viewport = this.context.viewport;\n      var _this$props = this.props,\n        widthUnits = _this$props.widthUnits,\n        widthScale = _this$props.widthScale,\n        widthMinPixels = _this$props.widthMinPixels,\n        widthMaxPixels = _this$props.widthMaxPixels,\n        greatCircle = _this$props.greatCircle;\n      var widthMultiplier = widthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n      this.state.model.setUniforms(uniforms).setUniforms({\n        greatCircle: greatCircle,\n        widthScale: widthScale * widthMultiplier,\n        widthMinPixels: widthMinPixels,\n        widthMaxPixels: widthMaxPixels\n      }).draw();\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var positions = [];\n      var NUM_SEGMENTS = 50;\n      for (var i = 0; i < NUM_SEGMENTS; i++) {\n        positions = positions.concat([i, 1, 0, i, -1, 0]);\n      }\n      var model = new Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 5,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true\n      }));\n      model.setUniforms({\n        numSegments: NUM_SEGMENTS\n      });\n      return model;\n    }\n  }]);\n  return ArcLayer;\n}(Layer);\nexport { ArcLayer as default };\nArcLayer.layerName = 'ArcLayer';\nArcLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/arc-layer/arc-layer.js"],"names":["Layer","project32","picking","Model","Geometry","vs","fs","DEFAULT_COLOR","defaultProps","getSourcePosition","type","value","x","sourcePosition","getTargetPosition","targetPosition","getSourceColor","getTargetColor","getWidth","getHeight","getTilt","greatCircle","widthUnits","widthScale","min","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","ArcLayer","modules","attributeManager","getAttributeManager","addInstanced","instanceSourcePositions","size","fp64","use64bitPositions","transition","accessor","instanceTargetPositions","instanceSourceColors","props","colorFormat","length","normalized","defaultValue","instanceTargetColors","instanceWidths","instanceHeights","instanceTilts","oldProps","changeFlags","extensionsChanged","gl","context","state","model","setState","_getModel","invalidateAll","uniforms","viewport","widthMultiplier","metersPerPixel","setUniforms","draw","positions","NUM_SEGMENTS","i","concat","assign","getShaders","id","geometry","drawMode","attributes","Float32Array","isInstanced","numSegments","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking} from '@deck.gl/core';\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './arc-layer-vertex.glsl';\nimport fs from './arc-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  getSourcePosition: {type: 'accessor', value: x => x.sourcePosition},\n  getTargetPosition: {type: 'accessor', value: x => x.targetPosition},\n  getSourceColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getTargetColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n  getHeight: {type: 'accessor', value: 1},\n  getTilt: {type: 'accessor', value: 0},\n\n  greatCircle: false,\n\n  widthUnits: 'pixels',\n  widthScale: {type: 'number', value: 1, min: 0},\n  widthMinPixels: {type: 'number', value: 0, min: 0},\n  widthMaxPixels: {type: 'number', value: Number.MAX_SAFE_INTEGER, min: 0}\n};\n\nexport default class ArcLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]}); // 'project' module added by default.\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceSourceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getSourceColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceTargetColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getTargetColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      },\n      instanceHeights: {\n        size: 1,\n        transition: true,\n        accessor: 'getHeight',\n        defaultValue: 1\n      },\n      instanceTilts: {\n        size: 1,\n        transition: true,\n        accessor: 'getTilt',\n        defaultValue: 0\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    // Re-generate model if geometry changed\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {viewport} = this.context;\n    const {widthUnits, widthScale, widthMinPixels, widthMaxPixels, greatCircle} = this.props;\n\n    const widthMultiplier = widthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        greatCircle,\n        widthScale: widthScale * widthMultiplier,\n        widthMinPixels,\n        widthMaxPixels\n      })\n      .draw();\n  }\n\n  _getModel(gl) {\n    let positions = [];\n    const NUM_SEGMENTS = 50;\n    /*\n     *  (0, -1)-------------_(1, -1)\n     *       |          _,-\"  |\n     *       o      _,-\"      o\n     *       |  _,-\"          |\n     *   (0, 1)\"-------------(1, 1)\n     */\n    for (let i = 0; i < NUM_SEGMENTS; i++) {\n      positions = positions.concat([i, 1, 0, i, -1, 0]);\n    }\n\n    const model = new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_STRIP,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true\n      })\n    );\n\n    model.setUniforms({numSegments: NUM_SEGMENTS});\n\n    return model;\n  }\n}\n\nArcLayer.layerName = 'ArcLayer';\nArcLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}