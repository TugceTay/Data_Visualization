{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Vector3, equals, assert } from '@math.gl/core';\nconst scratchPosition = new Vector3();\nconst scratchNormal = new Vector3();\nexport default class Plane {\n  constructor() {\n    let normal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0, 0, 1];\n    let distance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    _defineProperty(this, \"normal\", void 0);\n    _defineProperty(this, \"distance\", void 0);\n    this.normal = new Vector3();\n    this.distance = -0;\n    this.fromNormalDistance(normal, distance);\n  }\n  fromNormalDistance(normal, distance) {\n    assert(Number.isFinite(distance));\n    this.normal.from(normal).normalize();\n    this.distance = distance;\n    return this;\n  }\n  fromPointNormal(point, normal) {\n    point = scratchPosition.from(point);\n    this.normal.from(normal).normalize();\n    const distance = -this.normal.dot(point);\n    this.distance = distance;\n    return this;\n  }\n  fromCoefficients(a, b, c, d) {\n    this.normal.set(a, b, c);\n    assert(equals(this.normal.len(), 1));\n    this.distance = d;\n    return this;\n  }\n  clone() {\n    return new Plane(this.normal, this.distance);\n  }\n  equals(right) {\n    return equals(this.distance, right.distance) && equals(this.normal, right.normal);\n  }\n  getPointDistance(point) {\n    return this.normal.dot(point) + this.distance;\n  }\n  transform(matrix4) {\n    const normal = scratchNormal.copy(this.normal).transformAsVector(matrix4).normalize();\n    const point = this.normal.scale(-this.distance).transform(matrix4);\n    return this.fromPointNormal(point, normal);\n  }\n  projectPointOntoPlane(point) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n    point = scratchPosition.from(point);\n    const pointDistance = this.getPointDistance(point);\n    const scaledNormal = scratchNormal.copy(this.normal).scale(pointDistance);\n    return point.subtract(scaledNormal).to(result);\n  }\n}","map":{"version":3,"sources":["../../../src/lib/plane.ts"],"names":["Vector3","equals","assert","scratchPosition","scratchNormal","Plane","constructor","normal","distance","fromNormalDistance","Number","isFinite","from","normalize","fromPointNormal","point","dot","fromCoefficients","a","b","c","d","set","len","clone","right","getPointDistance","transform","matrix4","copy","transformAsVector","scale","projectPointOntoPlane","result","pointDistance","scaledNormal","subtract","to"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/* eslint-disable */\nimport {Vector3, equals, assert, NumericArray} from '@math.gl/core';\n\nconst scratchPosition = new Vector3();\nconst scratchNormal = new Vector3();\n\n// A plane in Hessian Normal Form\nexport default class Plane {\n  readonly normal: Vector3;\n  distance: number;\n\n  constructor(normal: Readonly<NumericArray> = [0, 0, 1], distance: number = 0) {\n    this.normal = new Vector3();\n    this.distance = -0;\n    this.fromNormalDistance(normal, distance);\n  }\n\n  /** Creates a plane from a normal and a distance from the origin. */\n  fromNormalDistance(normal: Readonly<NumericArray>, distance: number): this {\n    assert(Number.isFinite(distance));\n    this.normal.from(normal).normalize();\n    this.distance = distance;\n    return this;\n  }\n\n  /** Creates a plane from a normal and a point on the plane. */\n  fromPointNormal(point: Readonly<NumericArray>, normal: Readonly<NumericArray>): this {\n    point = scratchPosition.from(point);\n    this.normal.from(normal).normalize();\n    const distance = -this.normal.dot(point);\n    this.distance = distance;\n    return this;\n  }\n\n  /** Creates a plane from the general equation */\n  fromCoefficients(a: number, b: number, c: number, d: number): this {\n    this.normal.set(a, b, c);\n    assert(equals(this.normal.len(), 1));\n    this.distance = d;\n    return this;\n  }\n\n  /** Duplicates a Plane instance. */\n  clone(): Plane {\n    return new Plane(this.normal, this.distance);\n  }\n\n  /** Compares the provided Planes by normal and distance */\n  equals(right: Plane): boolean {\n    return equals(this.distance, right.distance) && equals(this.normal, right.normal);\n  }\n\n  /** Computes the signed shortest distance of a point to a plane.\n   * The sign of the distance determines which side of the plane the point is on.\n   */\n  getPointDistance(point: Readonly<NumericArray>): number {\n    return this.normal.dot(point) + this.distance;\n  }\n\n  /** Transforms the plane by the given transformation matrix. */\n  transform(matrix4: Readonly<NumericArray>): this {\n    const normal = scratchNormal.copy(this.normal).transformAsVector(matrix4).normalize();\n    const point = this.normal.scale(-this.distance).transform(matrix4);\n    return this.fromPointNormal(point, normal);\n  }\n\n  /** Projects a point onto the plane. */\n  projectPointOntoPlane(point: Readonly<NumericArray>, result: Vector3): Vector3;\n  projectPointOntoPlane(\n    point: Readonly<NumericArray>,\n    result?: readonly number[]\n  ): readonly number[];\n\n  projectPointOntoPlane(point, result = [0, 0, 0]) {\n    point = scratchPosition.from(point);\n    // projectedPoint = point - (normal.point + scale) * normal\n    const pointDistance = this.getPointDistance(point);\n    const scaledNormal = scratchNormal.copy(this.normal).scale(pointDistance);\n\n    return point.subtract(scaledNormal).to(result);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}