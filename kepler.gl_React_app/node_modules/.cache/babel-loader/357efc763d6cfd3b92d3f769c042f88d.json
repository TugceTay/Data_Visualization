{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport assert from '../utils/assert';\nimport { deepEqual } from '../utils/deep-equal';\nimport log from '../utils/log';\nimport { flatten } from '../utils/flatten';\nvar ViewManager = function () {\n  function ViewManager() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, ViewManager);\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {};\n    this.controllers = {};\n    this.timeline = props.timeline;\n    this._viewports = [];\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = true;\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractiveStateChange: props.onInteractiveStateChange\n    };\n    Object.seal(this);\n    this.setProps(props);\n  }\n  _createClass(ViewManager, [{\n    key: \"finalize\",\n    value: function finalize() {\n      for (var key in this.controllers) {\n        if (this.controllers[key]) {\n          this.controllers[key].finalize();\n        }\n      }\n      this.controllers = {};\n    }\n  }, {\n    key: \"needsRedraw\",\n    value: function needsRedraw() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        clearRedrawFlags: false\n      };\n      var redraw = this._needsRedraw;\n      if (opts.clearRedrawFlags) {\n        this._needsRedraw = false;\n      }\n      return redraw;\n    }\n  }, {\n    key: \"setNeedsUpdate\",\n    value: function setNeedsUpdate(reason) {\n      this._needsUpdate = this._needsUpdate || reason;\n      this._needsRedraw = this._needsRedraw || reason;\n    }\n  }, {\n    key: \"updateViewStates\",\n    value: function updateViewStates() {\n      for (var viewId in this.controllers) {\n        var controller = this.controllers[viewId];\n        if (controller) {\n          controller.updateTransition();\n        }\n      }\n    }\n  }, {\n    key: \"getViewports\",\n    value: function getViewports(rect) {\n      if (rect) {\n        return this._viewports.filter(function (viewport) {\n          return viewport.containsPixel(rect);\n        });\n      }\n      return this._viewports;\n    }\n  }, {\n    key: \"getViews\",\n    value: function getViews() {\n      var viewMap = {};\n      this.views.forEach(function (view) {\n        viewMap[view.id] = view;\n      });\n      return viewMap;\n    }\n  }, {\n    key: \"getView\",\n    value: function getView(viewOrViewId) {\n      return typeof viewOrViewId === 'string' ? this.views.find(function (view) {\n        return view.id === viewOrViewId;\n      }) : viewOrViewId;\n    }\n  }, {\n    key: \"getViewState\",\n    value: function getViewState(viewId) {\n      var view = this.getView(viewId);\n      var viewState = view && this.viewState[view.getViewStateId()] || this.viewState;\n      return view ? view.filterViewState(viewState) : viewState;\n    }\n  }, {\n    key: \"getViewport\",\n    value: function getViewport(viewId) {\n      return this._viewportMap[viewId];\n    }\n  }, {\n    key: \"unproject\",\n    value: function unproject(xyz, opts) {\n      var viewports = this.getViewports();\n      var pixel = {\n        x: xyz[0],\n        y: xyz[1]\n      };\n      for (var i = viewports.length - 1; i >= 0; --i) {\n        var viewport = viewports[i];\n        if (viewport.containsPixel(pixel)) {\n          var p = xyz.slice();\n          p[0] -= viewport.x;\n          p[1] -= viewport.y;\n          return viewport.unproject(p, opts);\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      if ('views' in props) {\n        this._setViews(props.views);\n      }\n      if ('viewState' in props) {\n        this._setViewState(props.viewState);\n      }\n      if ('width' in props || 'height' in props) {\n        this._setSize(props.width, props.height);\n      }\n      if (!this._isUpdating) {\n        this._update();\n      }\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      this._isUpdating = true;\n      if (this._needsUpdate) {\n        this._needsUpdate = false;\n        this._rebuildViewports();\n      }\n      if (this._needsUpdate) {\n        this._needsUpdate = false;\n        this._rebuildViewports();\n      }\n      this._isUpdating = false;\n    }\n  }, {\n    key: \"_setSize\",\n    value: function _setSize(width, height) {\n      assert(Number.isFinite(width) && Number.isFinite(height));\n      if (width !== this.width || height !== this.height) {\n        this.width = width;\n        this.height = height;\n        this.setNeedsUpdate('Size changed');\n      }\n    }\n  }, {\n    key: \"_setViews\",\n    value: function _setViews(views) {\n      views = flatten(views, Boolean);\n      var viewsChanged = this._diffViews(views, this.views);\n      if (viewsChanged) {\n        this.setNeedsUpdate('views changed');\n      }\n      this.views = views;\n    }\n  }, {\n    key: \"_setViewState\",\n    value: function _setViewState(viewState) {\n      if (viewState) {\n        var viewStateChanged = !deepEqual(viewState, this.viewState);\n        if (viewStateChanged) {\n          this.setNeedsUpdate('viewState changed');\n        }\n        this.viewState = viewState;\n      } else {\n        log.warn('missing `viewState` or `initialViewState`')();\n      }\n    }\n  }, {\n    key: \"_onViewStateChange\",\n    value: function _onViewStateChange(viewId, event) {\n      event.viewId = viewId;\n      this._eventCallbacks.onViewStateChange(event);\n    }\n  }, {\n    key: \"_createController\",\n    value: function _createController(view, props) {\n      var Controller = props.type;\n      var controller = new Controller(_objectSpread({\n        timeline: this.timeline,\n        eventManager: this._eventManager,\n        onViewStateChange: this._onViewStateChange.bind(this, props.id),\n        onStateChange: this._eventCallbacks.onInteractiveStateChange,\n        makeViewport: view._getViewport.bind(view)\n      }, props));\n      return controller;\n    }\n  }, {\n    key: \"_updateController\",\n    value: function _updateController(view, viewState, viewport, controller) {\n      var controllerProps = view.controller;\n      if (controllerProps) {\n        controllerProps = _objectSpread({}, viewState, {}, view.props, {}, controllerProps, {\n          id: view.id,\n          x: viewport.x,\n          y: viewport.y,\n          width: viewport.width,\n          height: viewport.height\n        });\n        if (controller) {\n          controller.setProps(controllerProps);\n        } else {\n          controller = this._createController(view, controllerProps);\n        }\n        return controller;\n      }\n      return null;\n    }\n  }, {\n    key: \"_rebuildViewports\",\n    value: function _rebuildViewports() {\n      var width = this.width,\n        height = this.height,\n        views = this.views;\n      var oldControllers = this.controllers;\n      this._viewports = [];\n      this.controllers = {};\n      for (var i = views.length; i--;) {\n        var view = views[i];\n        var viewState = this.getViewState(view);\n        var viewport = view.makeViewport({\n          width: width,\n          height: height,\n          viewState: viewState\n        });\n        this.controllers[view.id] = this._updateController(view, viewState, viewport, oldControllers[view.id]);\n        this._viewports.unshift(viewport);\n      }\n      for (var id in oldControllers) {\n        if (oldControllers[id] && !this.controllers[id]) {\n          oldControllers[id].finalize();\n        }\n      }\n      this._buildViewportMap();\n    }\n  }, {\n    key: \"_buildViewportMap\",\n    value: function _buildViewportMap() {\n      var _this = this;\n      this._viewportMap = {};\n      this._viewports.forEach(function (viewport) {\n        if (viewport.id) {\n          _this._viewportMap[viewport.id] = _this._viewportMap[viewport.id] || viewport;\n        }\n      });\n    }\n  }, {\n    key: \"_diffViews\",\n    value: function _diffViews(newViews, oldViews) {\n      if (newViews.length !== oldViews.length) {\n        return true;\n      }\n      return newViews.some(function (_, i) {\n        return !newViews[i].equals(oldViews[i]);\n      });\n    }\n  }]);\n  return ViewManager;\n}();\nexport { ViewManager as default };","map":{"version":3,"sources":["../../../src/lib/view-manager.js"],"names":["assert","deepEqual","log","flatten","ViewManager","props","views","width","height","viewState","controllers","timeline","_viewports","_viewportMap","_isUpdating","_needsRedraw","_needsUpdate","_eventManager","eventManager","_eventCallbacks","onViewStateChange","onInteractiveStateChange","Object","seal","setProps","key","finalize","opts","clearRedrawFlags","redraw","reason","viewId","controller","updateTransition","rect","filter","viewport","containsPixel","viewMap","forEach","view","id","viewOrViewId","find","getView","getViewStateId","filterViewState","xyz","viewports","getViewports","pixel","x","y","i","length","p","slice","unproject","_setViews","_setViewState","_setSize","_update","_rebuildViewports","Number","isFinite","setNeedsUpdate","Boolean","viewsChanged","_diffViews","viewStateChanged","warn","event","Controller","type","_onViewStateChange","bind","onStateChange","makeViewport","_getViewport","controllerProps","_createController","oldControllers","getViewState","_updateController","unshift","_buildViewportMap","newViews","oldViews","some","_","equals"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport assert from '../utils/assert';\nimport {deepEqual} from '../utils/deep-equal';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\n\nexport default class ViewManager {\n  constructor(props = {}) {\n    // List of view descriptors, gets re-evaluated when width/height changes\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {};\n    this.controllers = {};\n    this.timeline = props.timeline;\n\n    this._viewports = []; // Generated viewports\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = true;\n\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractiveStateChange: props.onInteractiveStateChange\n    };\n\n    Object.seal(this);\n\n    // Init with default map viewport\n    this.setProps(props);\n  }\n\n  finalize() {\n    for (const key in this.controllers) {\n      if (this.controllers[key]) {\n        this.controllers[key].finalize();\n      }\n    }\n    this.controllers = {};\n  }\n\n  // Check if a redraw is needed\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Checks each viewport for transition updates\n  updateViewStates() {\n    for (const viewId in this.controllers) {\n      const controller = this.controllers[viewId];\n      if (controller) {\n        controller.updateTransition();\n      }\n    }\n  }\n\n  /** Get a set of viewports for a given width and height\n   * TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props\n   * @param rect (object, optional) - filter the viewports\n   *   + not provided - return all viewports\n   *   + {x, y} - only return viewports that contain this pixel\n   *   + {x, y, width, height} - only return viewports that overlap with this rectangle\n   */\n  getViewports(rect) {\n    if (rect) {\n      return this._viewports.filter(viewport => viewport.containsPixel(rect));\n    }\n    return this._viewports;\n  }\n\n  getViews() {\n    const viewMap = {};\n    this.views.forEach(view => {\n      viewMap[view.id] = view;\n    });\n    return viewMap;\n  }\n\n  // Resolves a viewId string to a View, if already a View returns it.\n  getView(viewOrViewId) {\n    return typeof viewOrViewId === 'string'\n      ? this.views.find(view => view.id === viewOrViewId)\n      : viewOrViewId;\n  }\n\n  // Returns the viewState for a specific viewId. Matches the viewState by\n  // 1. view.viewStateId\n  // 2. view.id\n  // 3. root viewState\n  // then applies the view's filter if any\n  getViewState(viewId) {\n    const view = this.getView(viewId);\n    // Backward compatibility: view state for single view\n    const viewState = (view && this.viewState[view.getViewStateId()]) || this.viewState;\n    return view ? view.filterViewState(viewState) : viewState;\n  }\n\n  getViewport(viewId) {\n    return this._viewportMap[viewId];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, opts) {\n    const viewports = this.getViewports();\n    const pixel = {x: xyz[0], y: xyz[1]};\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.containsPixel(pixel)) {\n        const p = xyz.slice();\n        p[0] -= viewport.x;\n        p[1] -= viewport.y;\n        return viewport.unproject(p, opts);\n      }\n    }\n    return null;\n  }\n\n  setProps(props) {\n    if ('views' in props) {\n      this._setViews(props.views);\n    }\n\n    // TODO - support multiple view states\n    if ('viewState' in props) {\n      this._setViewState(props.viewState);\n    }\n\n    if ('width' in props || 'height' in props) {\n      this._setSize(props.width, props.height);\n    }\n\n    // Important: avoid invoking _update() inside itself\n    // Nested updates result in unexpected side effects inside _rebuildViewports()\n    // when using auto control in pure-js\n    if (!this._isUpdating) {\n      this._update();\n    }\n  }\n\n  _update() {\n    this._isUpdating = true;\n\n    // Only rebuild viewports if the update flag is set\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    // If viewport transition(s) are triggered during viewports update, controller(s)\n    // will immediately call `onViewStateChange` which calls `viewManager.setProps` again.\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    this._isUpdating = false;\n  }\n\n  _setSize(width, height) {\n    assert(Number.isFinite(width) && Number.isFinite(height));\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.setNeedsUpdate('Size changed');\n    }\n  }\n\n  // Update the view descriptor list and set change flag if needed\n  // Does not actually rebuild the `Viewport`s until `getViewports` is called\n  _setViews(views) {\n    views = flatten(views, Boolean);\n\n    const viewsChanged = this._diffViews(views, this.views);\n    if (viewsChanged) {\n      this.setNeedsUpdate('views changed');\n    }\n\n    this.views = views;\n  }\n\n  _setViewState(viewState) {\n    if (viewState) {\n      const viewStateChanged = !deepEqual(viewState, this.viewState);\n\n      if (viewStateChanged) {\n        this.setNeedsUpdate('viewState changed');\n      }\n\n      this.viewState = viewState;\n    } else {\n      log.warn('missing `viewState` or `initialViewState`')();\n    }\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  _onViewStateChange(viewId, event) {\n    event.viewId = viewId;\n    this._eventCallbacks.onViewStateChange(event);\n  }\n\n  _createController(view, props) {\n    const Controller = props.type;\n\n    const controller = new Controller({\n      timeline: this.timeline,\n      eventManager: this._eventManager,\n      // Set an internal callback that calls the prop callback if provided\n      onViewStateChange: this._onViewStateChange.bind(this, props.id),\n      onStateChange: this._eventCallbacks.onInteractiveStateChange,\n      makeViewport: view._getViewport.bind(view),\n      ...props\n    });\n\n    return controller;\n  }\n\n  _updateController(view, viewState, viewport, controller) {\n    let controllerProps = view.controller;\n    if (controllerProps) {\n      controllerProps = {\n        ...viewState,\n        ...view.props,\n        ...controllerProps,\n        id: view.id,\n        x: viewport.x,\n        y: viewport.y,\n        width: viewport.width,\n        height: viewport.height\n      };\n\n      // TODO - check if view / controller type has changed, and replace the controller\n      if (controller) {\n        controller.setProps(controllerProps);\n      } else {\n        controller = this._createController(view, controllerProps);\n      }\n      return controller;\n    }\n    return null;\n  }\n\n  // Rebuilds viewports from descriptors towards a certain window size\n  _rebuildViewports() {\n    const {width, height, views} = this;\n\n    const oldControllers = this.controllers;\n    this._viewports = [];\n    this.controllers = {};\n\n    // Create controllers in reverse order, so that views on top receive events first\n    for (let i = views.length; i--; ) {\n      const view = views[i];\n      const viewState = this.getViewState(view);\n      const viewport = view.makeViewport({width, height, viewState});\n\n      // Update the controller\n      this.controllers[view.id] = this._updateController(\n        view,\n        viewState,\n        viewport,\n        oldControllers[view.id]\n      );\n\n      this._viewports.unshift(viewport);\n    }\n\n    // Remove unused controllers\n    for (const id in oldControllers) {\n      if (oldControllers[id] && !this.controllers[id]) {\n        oldControllers[id].finalize();\n      }\n    }\n\n    this._buildViewportMap();\n  }\n\n  _buildViewportMap() {\n    // Build a view id to view index\n    this._viewportMap = {};\n    this._viewports.forEach(viewport => {\n      if (viewport.id) {\n        // TODO - issue warning if multiple viewports use same id\n        this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;\n      }\n    });\n  }\n\n  // Check if viewport array has changed, returns true if any change\n  // Note that descriptors can be the same\n  _diffViews(newViews, oldViews) {\n    if (newViews.length !== oldViews.length) {\n      return true;\n    }\n\n    return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}