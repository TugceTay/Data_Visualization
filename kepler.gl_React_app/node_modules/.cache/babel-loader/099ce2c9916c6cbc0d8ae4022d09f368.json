{"ast":null,"code":"import { log } from '@luma.gl/gltools';\nimport { Stats } from '@probe.gl/stats';\nimport { isBrowser } from '@probe.gl/env';\nconst VERSION = typeof \"8.5.18\" !== 'undefined' ? \"8.5.18\" : 'untranspiled source';\nconst STARTUP_MESSAGE = 'set luma.log.level=1 (or higher) to trace rendering';\nexport class StatsManager {\n  constructor() {\n    this.stats = new Map();\n  }\n  get(name) {\n    if (!this.stats.has(name)) {\n      this.stats.set(name, new Stats({\n        id: name\n      }));\n    }\n    return this.stats.get(name);\n  }\n}\nconst lumaStats = new StatsManager();\nif (globalThis.luma && globalThis.luma.VERSION !== VERSION) {\n  throw new Error(\"luma.gl - multiple VERSIONs detected: \".concat(globalThis.luma.VERSION, \" vs \").concat(VERSION));\n}\nif (!globalThis.luma) {\n  if (isBrowser()) {\n    log.log(1, \"luma.gl \".concat(VERSION, \" - \").concat(STARTUP_MESSAGE))();\n  }\n  globalThis.luma = globalThis.luma || {\n    VERSION,\n    version: VERSION,\n    log,\n    stats: lumaStats,\n    globals: {\n      modules: {},\n      nodeIO: {}\n    }\n  };\n}\nexport { lumaStats };\nexport default globalThis.luma;","map":{"version":3,"sources":["../../src/init.js"],"names":["log","Stats","isBrowser","VERSION","STARTUP_MESSAGE","StatsManager","constructor","stats","Map","get","name","has","set","id","lumaStats","globalThis","luma","Error","version","globals","modules","nodeIO"],"mappings":"AAAA,SAAQA,GAAR,QAAkB,kBAAlB;AACA,SAAQC,KAAR,QAAoB,iBAApB;AACA,SAAQC,SAAR,QAAwB,eAAxB;AAKA,MAAMC,OAAO,GAAG,OAAA,QAAA,KAAuB,WAAvB,GAAA,QAAA,GAAmD,qBAAnE;AAEA,MAAMC,eAAe,GAAG,qDAAxB;AAKA,OAAO,MAAMC,YAAN,CAAmB;EACxBC,WAAW,GAAG;IACZ,IAAA,CAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;EACD;EAEDC,GAAG,CAACC,IAAD,EAAO;IACR,IAAI,CAAC,IAAA,CAAKH,KAAL,CAAWI,GAAX,CAAeD,IAAf,CAAL,EAA2B;MACzB,IAAA,CAAKH,KAAL,CAAWK,GAAX,CAAeF,IAAf,EAAqB,IAAIT,KAAJ,CAAU;QAACY,EAAE,EAAEH;MAAL,CAAV,CAArB,CAAA;IACD;IAED,OAAO,IAAA,CAAKH,KAAL,CAAWE,GAAX,CAAeC,IAAf,CAAP;EACD;AAXuB;AAc1B,MAAMI,SAAS,GAAG,IAAIT,YAAJ,EAAlB;AAEA,IAAIU,UAAU,CAACC,IAAXD,IAAmBA,UAAU,CAACC,IAAXD,CAAgBZ,OAAhBY,KAA4BZ,OAAnD,EAA4D;EAC1D,MAAM,IAAIc,KAAJ,CAAA,wCAAA,CAAA,MAAA,CAAmDF,UAAU,CAACC,IAAXD,CAAgBZ,OAAnE,EAAA,MAAA,CAAA,CAAA,MAAA,CAAiFA,OAAjF,CAAA,CAAN;AACD;AAED,IAAI,CAACY,UAAU,CAACC,IAAhB,EAAsB;EACpB,IAAId,SAAS,EAAb,EAAiB;IACfF,GAAG,CAACA,GAAJA,CAAQ,CAARA,EAAAA,UAAAA,CAAAA,MAAAA,CAAsBG,OAAtBH,EAAAA,KAAAA,CAAAA,CAAAA,MAAAA,CAAmCI,eAAnCJ,CAAAA,CAAAA,EAAAA;EACD;EAEDe,UAAU,CAACC,IAAXD,GAAkBA,UAAU,CAACC,IAAXD,IAAmB;IACnCZ,OADmC;IAEnCe,OAAO,EAAEf,OAF0B;IAGnCH,GAHmC;IAOnCO,KAAK,EAAEO,SAP4B;IAcnCK,OAAO,EAAE;MACPC,OAAO,EAAE,CAAA,CADF;MAEPC,MAAM,EAAE,CAAA;IAFD;EAd0B,CAArCN;AAmBD;AAED,SAAQD,SAAR;AACA,eAAeC,UAAU,CAACC,IAA1B","sourcesContent":["import {log} from '@luma.gl/gltools';\nimport {Stats} from '@probe.gl/stats';\nimport {isBrowser} from '@probe.gl/env';\n\n// Version detection using babel plugin\n/* global __VERSION__ */\n// @ts-ignore\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'untranspiled source';\n\nconst STARTUP_MESSAGE = 'set luma.log.level=1 (or higher) to trace rendering';\n// Assign luma.log.level in console to control logging: \\\n// 0: none, 1: minimal, 2: verbose, 3: attribute/uniforms, 4: gl logs\n// luma.log.break[], set to gl funcs, luma.log.profile[] set to model names`;\n\nexport class StatsManager {\n  constructor() {\n    this.stats = new Map();\n  }\n\n  get(name) {\n    if (!this.stats.has(name)) {\n      this.stats.set(name, new Stats({id: name}));\n    }\n\n    return this.stats.get(name);\n  }\n}\n\nconst lumaStats = new StatsManager();\n\nif (globalThis.luma && globalThis.luma.VERSION !== VERSION) {\n  throw new Error(`luma.gl - multiple VERSIONs detected: ${globalThis.luma.VERSION} vs ${VERSION}`);\n}\n\nif (!globalThis.luma) {\n  if (isBrowser()) {\n    log.log(1, `luma.gl ${VERSION} - ${STARTUP_MESSAGE}`)();\n  }\n\n  globalThis.luma = globalThis.luma || {\n    VERSION,\n    version: VERSION,\n    log,\n\n    // A global stats object that various components can add information to\n    // E.g. see webgl/resource.js\n    stats: lumaStats,\n\n    // Keep some luma globals in a sub-object\n    // This allows us to dynamically detect if certain modules have been\n    // included (such as IO and headless) and enable related functionality,\n    // without unconditionally requiring and thus bundling big dependencies\n    // into the app.\n    globals: {\n      modules: {},\n      nodeIO: {}\n    }\n  };\n}\n\nexport {lumaStats};\nexport default globalThis.luma;\n"]},"metadata":{},"sourceType":"module"}