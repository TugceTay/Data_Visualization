{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport { loadDracoDecoderModule } from './lib/draco-module-loader';\nimport DracoParser from './lib/draco-parser';\nvar VERSION = typeof \"2.3.13\" !== 'undefined' ? \"2.3.13\" : 'latest';\nexport var DracoWorkerLoader = {\n  id: 'draco',\n  name: 'Draco',\n  version: VERSION,\n  extensions: ['drc'],\n  mimeTypes: ['application/octet-stream'],\n  binary: true,\n  tests: ['DRACO'],\n  options: {\n    draco: {\n      decoderType: (typeof WebAssembly === \"undefined\" ? \"undefined\" : _typeof(WebAssembly)) === 'object' ? 'wasm' : 'js',\n      libraryPath: \"libs/\",\n      workerUrl: \"https://unpkg.com/@loaders.gl/draco@\".concat(VERSION, \"/dist/draco-loader.worker.js\"),\n      localWorkerUrl: \"modules/draco/dist/draco-loader.worker.dev.js\",\n      extraAttributes: {}\n    }\n  }\n};\nexport var DracoLoader = _objectSpread(_objectSpread({}, DracoWorkerLoader), {}, {\n  parse: parse\n});\nfunction parse(_x, _x2, _x3, _x4) {\n  return _parse.apply(this, arguments);\n}\nfunction _parse() {\n  _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer, options, context, loader) {\n    var _yield$loadDracoDecod, draco, dracoParser;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return loadDracoDecoderModule(options);\n          case 2:\n            _yield$loadDracoDecod = _context.sent;\n            draco = _yield$loadDracoDecod.draco;\n            dracoParser = new DracoParser(draco);\n            _context.prev = 5;\n            return _context.abrupt(\"return\", dracoParser.parseSync(arrayBuffer, _objectSpread({\n              extraAttributes: options.draco && options.draco.extraAttributes || null\n            }, options.parseOptions || {})));\n          case 7:\n            _context.prev = 7;\n            dracoParser.destroy();\n            return _context.finish(7);\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5,, 7, 10]]);\n  }));\n  return _parse.apply(this, arguments);\n}","map":{"version":3,"sources":["../../src/draco-loader.js"],"names":["loadDracoDecoderModule","DracoParser","VERSION","DracoWorkerLoader","id","name","version","extensions","mimeTypes","binary","tests","options","draco","decoderType","WebAssembly","libraryPath","workerUrl","localWorkerUrl","extraAttributes","DracoLoader","parse","arrayBuffer","context","loader","dracoParser","parseSync","parseOptions","destroy"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAAQA,sBAAR,QAAqC,2BAArC;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AAIA,IAAMC,OAAO,GAAG,OAAA,QAAA,KAAuB,WAAvB,GAAA,QAAA,GAAmD,QAAnE;AAGA,OAAO,IAAMC,iBAAiB,GAAG;EAC/BC,EAAE,EAAE,OAD2B;EAE/BC,IAAI,EAAE,OAFyB;EAG/BC,OAAO,EAAEJ,OAHsB;EAI/BK,UAAU,EAAE,CAAC,KAAD,CAJmB;EAK/BC,SAAS,EAAE,CAAC,0BAAD,CALoB;EAM/BC,MAAM,EAAE,IANuB;EAO/BC,KAAK,EAAE,CAAC,OAAD,CAPwB;EAQ/BC,OAAO,EAAE;IACPC,KAAK,EAAE;MACLC,WAAW,EAAE,CAAA,OAAOC,WAAP,KAAA,WAAA,GAAA,WAAA,GAAA,OAAA,CAAOA,WAAP,CAAA,MAAuB,QAAvB,GAAkC,MAAlC,GAA2C,IADnD;MAELC,WAAW,EAAA,OAFN;MAGLC,SAAS,EAAA,sCAAA,CAAA,MAAA,CAAyCd,OAAzC,EAAA,8BAAA,CAHJ;MAILe,cAAc,EAAA,+CAJT;MAKLC,eAAe,EAAE,CAAA;IALZ;EADA;AARsB,CAA1B;AAoBP,OAAO,IAAMC,WAAW,GAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EACnBhB,iBADmB,CAAA,EAAA,CAAA,CAAA,EAAA;EAEtBiB,KAAK,EAALA;AAFsB,CAAA,CAAjB;SAKQA,K;;;;sDAAf,SAAA,OAAA,CAAqBC,WAArB,EAAkCV,OAAlC,EAA2CW,OAA3C,EAAoDC,MAApD,EAAA;IAAA,IAAA,qBAAA,EAAA,KAAA,EAAA,WAAA;IAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OACwBvB,sBAAsB,CAACW,OAAD,CAD9C;UAAA,KAAA,CAAA;YAAA,qBAAA,GAAA,QAAA,CAAA,IAAA;YACSC,KADT,GAAA,qBAAA,CACSA,KADT;YAEQY,WAFR,GAEsB,IAAIvB,WAAJ,CAAgBW,KAAhB,CAFtB;YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAMW,WAAW,CAACa,SAAZ,CAAsBJ,WAAtB,EAAA,aAAA,CAAA;cACLH,eAAe,EAAGP,OAAO,CAACC,KAARD,IAAiBA,OAAO,CAACC,KAARD,CAAcO,eAAhC,IAAoD;YADhE,CAAA,EAEDP,OAAO,CAACe,YAARf,IAAwB,CAAA,CAFvB,CAAA,CANX,CAAA;UAAA,KAAA,CAAA;YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;YAWIa,WAAW,CAACG,OAAZH,EAAAA;YAXJ,OAAA,QAAA,CAAA,MAAA,CAAA,CAAA,CAAA;UAAA,KAAA,EAAA;UAAA,KAAA,KAAA;YAAA,OAAA,QAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,OAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA;EAAA,C","sourcesContent":["/** @typedef {import('@loaders.gl/loader-utils').LoaderObject} LoaderObject */\n/** @typedef {import('@loaders.gl/loader-utils').WorkerLoaderObject} WorkerLoaderObject */\nimport {loadDracoDecoderModule} from './lib/draco-module-loader';\nimport DracoParser from './lib/draco-parser';\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\n/** @type {WorkerLoaderObject} */\nexport const DracoWorkerLoader = {\n  id: 'draco',\n  name: 'Draco',\n  version: VERSION,\n  extensions: ['drc'],\n  mimeTypes: ['application/octet-stream'],\n  binary: true,\n  tests: ['DRACO'],\n  options: {\n    draco: {\n      decoderType: typeof WebAssembly === 'object' ? 'wasm' : 'js', // 'js' for IE11\n      libraryPath: `libs/`,\n      workerUrl: `https://unpkg.com/@loaders.gl/draco@${VERSION}/dist/draco-loader.worker.js`,\n      localWorkerUrl: `modules/draco/dist/draco-loader.worker.dev.js`,\n      extraAttributes: {}\n    }\n  }\n};\n\n/** @type {LoaderObject} */\nexport const DracoLoader = {\n  ...DracoWorkerLoader,\n  parse\n};\n\nasync function parse(arrayBuffer, options, context, loader) {\n  const {draco} = await loadDracoDecoderModule(options);\n  const dracoParser = new DracoParser(draco);\n  try {\n    // TODO passing in options causes CI failures...\n    // @ts-ignore\n    return dracoParser.parseSync(arrayBuffer, {\n      extraAttributes: (options.draco && options.draco.extraAttributes) || null,\n      ...(options.parseOptions || {})\n    });\n  } finally {\n    dracoParser.destroy();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}