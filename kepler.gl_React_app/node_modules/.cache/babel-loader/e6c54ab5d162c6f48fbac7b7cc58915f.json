{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport { document } from '../utils/globals';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { useEffect, useState, useMemo } from 'react';\nimport mapboxgl from '../utils/mapboxgl';\nimport useMapControl, { mapControlDefaultProps, mapControlPropTypes } from './use-map-control';\nvar propTypes = Object.assign({}, mapControlPropTypes, {\n  className: PropTypes.string,\n  style: PropTypes.object,\n  container: PropTypes.object,\n  label: PropTypes.string\n});\nvar defaultProps = Object.assign({}, mapControlDefaultProps, {\n  className: '',\n  container: null,\n  label: 'Toggle fullscreen'\n});\nfunction FullscreenControl(props) {\n  var _useMapControl = useMapControl(props),\n    context = _useMapControl.context,\n    containerRef = _useMapControl.containerRef;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isFullscreen = _useState2[0],\n    setIsFullscreen = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    showButton = _useState4[0],\n    setShowButton = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    mapboxFullscreenControl = _useState6[0],\n    createMapboxFullscreenControl = _useState6[1];\n  useEffect(function () {\n    var control = new mapboxgl.FullscreenControl();\n    createMapboxFullscreenControl(control);\n    setShowButton(control._checkFullscreenSupport());\n    var onFullscreenChange = function onFullscreenChange() {\n      var nextState = !control._fullscreen;\n      control._fullscreen = nextState;\n      setIsFullscreen(nextState);\n    };\n    document.addEventListener(control._fullscreenchange, onFullscreenChange);\n    return function () {\n      document.removeEventListener(control._fullscreenchange, onFullscreenChange);\n    };\n  }, []);\n  var onClickFullscreen = function onClickFullscreen() {\n    if (mapboxFullscreenControl) {\n      mapboxFullscreenControl._container = props.container || context.container;\n      mapboxFullscreenControl._onClickFullscreen();\n    }\n  };\n  var style = useMemo(function () {\n    return _objectSpread({\n      position: 'absolute'\n    }, props.style);\n  }, [props.style]);\n  if (!showButton) {\n    return null;\n  }\n  var className = props.className,\n    label = props.label;\n  var type = isFullscreen ? 'shrink' : 'fullscreen';\n  return React.createElement(\"div\", {\n    style: style,\n    className: className\n  }, React.createElement(\"div\", {\n    className: \"mapboxgl-ctrl mapboxgl-ctrl-group\",\n    ref: containerRef\n  }, React.createElement(\"button\", {\n    key: type,\n    className: \"mapboxgl-ctrl-icon mapboxgl-ctrl-\".concat(type),\n    type: \"button\",\n    title: label,\n    onClick: onClickFullscreen\n  }, React.createElement(\"span\", {\n    className: \"mapboxgl-ctrl-icon\",\n    \"aria-hidden\": \"true\"\n  }))));\n}\nFullscreenControl.propTypes = propTypes;\nFullscreenControl.defaultProps = defaultProps;\nexport default React.memo(FullscreenControl);","map":{"version":3,"sources":["../../../src/components/fullscreen-control.js"],"names":["document","PropTypes","React","useEffect","useState","useMemo","mapboxgl","useMapControl","mapControlDefaultProps","mapControlPropTypes","propTypes","assign","className","string","style","object","container","label","defaultProps","FullscreenControl","props","context","containerRef","isFullscreen","setIsFullscreen","showButton","setShowButton","mapboxFullscreenControl","createMapboxFullscreenControl","control","_checkFullscreenSupport","onFullscreenChange","nextState","_fullscreen","addEventListener","_fullscreenchange","removeEventListener","onClickFullscreen","_container","_onClickFullscreen","position","type","memo"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {document} from '../utils/globals';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {useEffect, useState, useMemo} from 'react';\nimport mapboxgl from '../utils/mapboxgl';\n\nimport useMapControl, {mapControlDefaultProps, mapControlPropTypes} from './use-map-control';\n\nconst propTypes = Object.assign({}, mapControlPropTypes, {\n  // Custom className\n  className: PropTypes.string,\n  style: PropTypes.object,\n  /* eslint-disable max-len */\n  // `container` is the [compatible DOM element](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen#Compatible_elements)\n  // which should be made full screen. By default, the map container element will be made full screen.\n  /* eslint-enable max-len */\n  container: PropTypes.object,\n  label: PropTypes.string\n});\n\nconst defaultProps = Object.assign({}, mapControlDefaultProps, {\n  className: '',\n  container: null,\n  label: 'Toggle fullscreen'\n});\n\nfunction FullscreenControl(props) {\n  const {context, containerRef} = useMapControl(props);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [showButton, setShowButton] = useState(false);\n  const [mapboxFullscreenControl, createMapboxFullscreenControl] = useState(null);\n\n  useEffect(() => {\n    const control = new mapboxgl.FullscreenControl();\n\n    createMapboxFullscreenControl(control);\n    setShowButton(control._checkFullscreenSupport());\n\n    const onFullscreenChange = () => {\n      const nextState = !control._fullscreen;\n      // this is a hack\n      // Mapbox use `_fullscreen` flag to toggle fullscreen mode\n      control._fullscreen = nextState;\n      setIsFullscreen(nextState);\n    };\n\n    document.addEventListener(control._fullscreenchange, onFullscreenChange);\n\n    return () => {\n      document.removeEventListener(control._fullscreenchange, onFullscreenChange);\n    };\n  }, []);\n\n  const onClickFullscreen = () => {\n    if (mapboxFullscreenControl) {\n      mapboxFullscreenControl._container = props.container || context.container;\n      mapboxFullscreenControl._onClickFullscreen();\n    }\n  };\n\n  const style = useMemo(() => ({position: 'absolute', ...props.style}), [props.style]);\n\n  if (!showButton) {\n    return null;\n  }\n\n  const {className, label} = props;\n  const type = isFullscreen ? 'shrink' : 'fullscreen';\n\n  return (\n    <div style={style} className={className}>\n      <div className=\"mapboxgl-ctrl mapboxgl-ctrl-group\" ref={containerRef}>\n        <button\n          key={type}\n          className={`mapboxgl-ctrl-icon mapboxgl-ctrl-${type}`}\n          type=\"button\"\n          title={label}\n          onClick={onClickFullscreen}\n        >\n          <span className=\"mapboxgl-ctrl-icon\" aria-hidden=\"true\" />\n        </button>\n      </div>\n    </div>\n  );\n}\n\nFullscreenControl.propTypes = propTypes;\nFullscreenControl.defaultProps = defaultProps;\n\nexport default React.memo(FullscreenControl);\n"]},"metadata":{},"sourceType":"module"}