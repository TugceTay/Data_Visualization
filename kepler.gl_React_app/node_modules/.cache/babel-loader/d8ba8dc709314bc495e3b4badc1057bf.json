{"ast":null,"code":"import parseImage from './lib/parsers/parse-image';\nimport { getBinaryImageMetadata } from './lib/category-api/binary-image-api';\nvar VERSION = typeof \"2.3.13\" !== 'undefined' ? \"2.3.13\" : 'latest';\nvar EXTENSIONS = ['png', 'jpg', 'jpeg', 'gif', 'webp', 'bmp', 'ico', 'svg'];\nvar MIME_TYPES = ['image/png', 'image/jpeg', 'image/gif', 'image/webp', 'image/bmp', 'image/vnd.microsoft.icon', 'image/svg+xml'];\nvar ImageLoader = {\n  id: 'image',\n  name: 'Images',\n  version: VERSION,\n  mimeTypes: MIME_TYPES,\n  extensions: EXTENSIONS,\n  parse: parseImage,\n  tests: [function (arrayBuffer) {\n    return Boolean(getBinaryImageMetadata(new DataView(arrayBuffer)));\n  }],\n  options: {\n    image: {\n      type: 'auto',\n      decode: true\n    }\n  }\n};\nexport default ImageLoader;","map":{"version":3,"sources":["../../src/image-loader.js"],"names":["parseImage","getBinaryImageMetadata","VERSION","EXTENSIONS","MIME_TYPES","ImageLoader","id","name","version","mimeTypes","extensions","parse","tests","Boolean","DataView","arrayBuffer","options","image","type","decode"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,2BAAvB;AACA,SAAQC,sBAAR,QAAqC,qCAArC;AAKA,IAAMC,OAAO,GAAG,OAAA,QAAA,KAAuB,WAAvB,GAAA,QAAA,GAAmD,QAAnE;AAEA,IAAMC,UAAU,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,MAAf,EAAuB,KAAvB,EAA8B,MAA9B,EAAsC,KAAtC,EAA6C,KAA7C,EAAoD,KAApD,CAAnB;AACA,IAAMC,UAAU,GAAG,CACjB,WADiB,EAEjB,YAFiB,EAGjB,WAHiB,EAIjB,YAJiB,EAKjB,WALiB,EAMjB,0BANiB,EAOjB,eAPiB,CAAnB;AAYA,IAAMC,WAAW,GAAG;EAClBC,EAAE,EAAE,OADc;EAElBC,IAAI,EAAE,QAFY;EAGlBC,OAAO,EAAEN,OAHS;EAIlBO,SAAS,EAAEL,UAJO;EAKlBM,UAAU,EAAEP,UALM;EAMlBQ,KAAK,EAAEX,UANW;EAQlBY,KAAK,EAAE,CAAC,UAAA,WAAW,EAAA;IAAA,OAAIC,OAAO,CAACZ,sBAAsB,CAAC,IAAIa,QAAJ,CAAaC,WAAb,CAAD,CAAvB,CAAX;EAAA,CAAZ,CARW;EASlBC,OAAO,EAAE;IACPC,KAAK,EAAE;MACLC,IAAI,EAAE,MADD;MAELC,MAAM,EAAE;IAFH;EADA;AATS,CAApB;AAkBA,eAAed,WAAf","sourcesContent":["import parseImage from './lib/parsers/parse-image';\nimport {getBinaryImageMetadata} from './lib/category-api/binary-image-api';\n/** @typedef {import('@loaders.gl/loader-utils').LoaderObject} LoaderObject */\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nconst EXTENSIONS = ['png', 'jpg', 'jpeg', 'gif', 'webp', 'bmp', 'ico', 'svg'];\nconst MIME_TYPES = [\n  'image/png',\n  'image/jpeg',\n  'image/gif',\n  'image/webp',\n  'image/bmp',\n  'image/vnd.microsoft.icon',\n  'image/svg+xml'\n];\n\n// Loads a platform-specific image type that can be used as input data to WebGL textures\n/** @type {LoaderObject} */\nconst ImageLoader = {\n  id: 'image',\n  name: 'Images',\n  version: VERSION,\n  mimeTypes: MIME_TYPES,\n  extensions: EXTENSIONS,\n  parse: parseImage,\n  // TODO: byteOffset, byteLength;\n  tests: [arrayBuffer => Boolean(getBinaryImageMetadata(new DataView(arrayBuffer)))],\n  options: {\n    image: {\n      type: 'auto',\n      decode: true // if format is HTML\n    }\n    // imagebitmap: {} - passes (platform dependent) parameters to ImageBitmap constructor\n  }\n};\n\nexport default ImageLoader;\n"]},"metadata":{},"sourceType":"module"}