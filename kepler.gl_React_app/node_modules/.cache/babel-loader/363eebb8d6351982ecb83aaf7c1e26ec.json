{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Vector3, Matrix4, assert } from '@math.gl/core';\nimport CullingVolume from './culling-volume';\nimport Plane from './plane';\nconst scratchPlaneUpVector = new Vector3();\nconst scratchPlaneRightVector = new Vector3();\nconst scratchPlaneNearCenter = new Vector3();\nconst scratchPlaneFarCenter = new Vector3();\nconst scratchPlaneNormal = new Vector3();\nexport default class PerspectiveOffCenterFrustum {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _defineProperty(this, \"left\", void 0);\n    _defineProperty(this, \"_left\", void 0);\n    _defineProperty(this, \"right\", void 0);\n    _defineProperty(this, \"_right\", void 0);\n    _defineProperty(this, \"top\", void 0);\n    _defineProperty(this, \"_top\", void 0);\n    _defineProperty(this, \"bottom\", void 0);\n    _defineProperty(this, \"_bottom\", void 0);\n    _defineProperty(this, \"near\", void 0);\n    _defineProperty(this, \"_near\", void 0);\n    _defineProperty(this, \"far\", void 0);\n    _defineProperty(this, \"_far\", void 0);\n    _defineProperty(this, \"_cullingVolume\", new CullingVolume([new Plane(), new Plane(), new Plane(), new Plane(), new Plane(), new Plane()]));\n    _defineProperty(this, \"_perspectiveMatrix\", new Matrix4());\n    _defineProperty(this, \"_infinitePerspective\", new Matrix4());\n    const {\n      near = 1.0,\n      far = 500000000.0\n    } = options;\n    this.left = options.left;\n    this._left = undefined;\n    this.right = options.right;\n    this._right = undefined;\n    this.top = options.top;\n    this._top = undefined;\n    this.bottom = options.bottom;\n    this._bottom = undefined;\n    this.near = near;\n    this._near = near;\n    this.far = far;\n    this._far = far;\n  }\n  clone() {\n    return new PerspectiveOffCenterFrustum({\n      right: this.right,\n      left: this.left,\n      top: this.top,\n      bottom: this.bottom,\n      near: this.near,\n      far: this.far\n    });\n  }\n  equals(other) {\n    return other && other instanceof PerspectiveOffCenterFrustum && this.right === other.right && this.left === other.left && this.top === other.top && this.bottom === other.bottom && this.near === other.near && this.far === other.far;\n  }\n  get projectionMatrix() {\n    this._update();\n    return this._perspectiveMatrix;\n  }\n  get infiniteProjectionMatrix() {\n    this._update();\n    return this._infinitePerspective;\n  }\n  computeCullingVolume(position, direction, up) {\n    assert(position, 'position is required.');\n    assert(direction, 'direction is required.');\n    assert(up, 'up is required.');\n    const planes = this._cullingVolume.planes;\n    up = scratchPlaneUpVector.copy(up).normalize();\n    const right = scratchPlaneRightVector.copy(direction).cross(up).normalize();\n    const nearCenter = scratchPlaneNearCenter.copy(direction).multiplyByScalar(this.near).add(position);\n    const farCenter = scratchPlaneFarCenter.copy(direction).multiplyByScalar(this.far).add(position);\n    let normal = scratchPlaneNormal;\n    normal.copy(right).multiplyByScalar(this.left).add(nearCenter).subtract(position).cross(up);\n    planes[0].fromPointNormal(position, normal);\n    normal.copy(right).multiplyByScalar(this.right).add(nearCenter).subtract(position).cross(up).negate();\n    planes[1].fromPointNormal(position, normal);\n    normal.copy(up).multiplyByScalar(this.bottom).add(nearCenter).subtract(position).cross(right).negate();\n    planes[2].fromPointNormal(position, normal);\n    normal.copy(up).multiplyByScalar(this.top).add(nearCenter).subtract(position).cross(right);\n    planes[3].fromPointNormal(position, normal);\n    normal = new Vector3().copy(direction);\n    planes[4].fromPointNormal(nearCenter, normal);\n    normal.negate();\n    planes[5].fromPointNormal(farCenter, normal);\n    return this._cullingVolume;\n  }\n  getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, result) {\n    this._update();\n    assert(Number.isFinite(drawingBufferWidth) && Number.isFinite(drawingBufferHeight));\n    assert(drawingBufferWidth > 0);\n    assert(drawingBufferHeight > 0);\n    assert(distance > 0);\n    assert(result);\n    const inverseNear = 1.0 / this.near;\n    let tanTheta = this.top * inverseNear;\n    const pixelHeight = 2.0 * distance * tanTheta / drawingBufferHeight;\n    tanTheta = this.right * inverseNear;\n    const pixelWidth = 2.0 * distance * tanTheta / drawingBufferWidth;\n    result.x = pixelWidth;\n    result.y = pixelHeight;\n    return result;\n  }\n  _update() {\n    assert(Number.isFinite(this.right) && Number.isFinite(this.left) && Number.isFinite(this.top) && Number.isFinite(this.bottom) && Number.isFinite(this.near) && Number.isFinite(this.far));\n    const {\n      top,\n      bottom,\n      right,\n      left,\n      near,\n      far\n    } = this;\n    if (top !== this._top || bottom !== this._bottom || left !== this._left || right !== this._right || near !== this._near || far !== this._far) {\n      assert(this.near > 0 && this.near < this.far, 'near must be greater than zero and less than far.');\n      this._left = left;\n      this._right = right;\n      this._top = top;\n      this._bottom = bottom;\n      this._near = near;\n      this._far = far;\n      this._perspectiveMatrix = new Matrix4().frustum({\n        left,\n        right,\n        bottom,\n        top,\n        near,\n        far\n      });\n      this._infinitePerspective = new Matrix4().frustum({\n        left,\n        right,\n        bottom,\n        top,\n        near,\n        far: Infinity\n      });\n    }\n  }\n}","map":{"version":3,"sources":["../../../src/lib/perspective-off-center-frustum.ts"],"names":["Vector3","Matrix4","assert","CullingVolume","Plane","scratchPlaneUpVector","scratchPlaneRightVector","scratchPlaneNearCenter","scratchPlaneFarCenter","scratchPlaneNormal","PerspectiveOffCenterFrustum","constructor","options","near","far","left","_left","undefined","right","_right","top","_top","bottom","_bottom","_near","_far","clone","equals","other","projectionMatrix","_update","_perspectiveMatrix","infiniteProjectionMatrix","_infinitePerspective","computeCullingVolume","position","direction","up","planes","_cullingVolume","copy","normalize","cross","nearCenter","multiplyByScalar","add","farCenter","normal","subtract","fromPointNormal","negate","getPixelDimensions","drawingBufferWidth","drawingBufferHeight","distance","result","Number","isFinite","inverseNear","tanTheta","pixelHeight","pixelWidth","x","y","frustum","Infinity"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n// Note: This class is still an experimental export, mainly used by other test cases\n// - It has not been fully adapted to math.gl conventions\n// - Documentation has not been ported\n\nimport {Vector3, Vector2, Matrix4, assert, NumericArray} from '@math.gl/core';\nimport CullingVolume from './culling-volume';\nimport Plane from './plane';\n\nconst scratchPlaneUpVector = new Vector3();\nconst scratchPlaneRightVector = new Vector3();\nconst scratchPlaneNearCenter = new Vector3();\nconst scratchPlaneFarCenter = new Vector3();\nconst scratchPlaneNormal = new Vector3();\n\ntype PerspectiveOffCenterFrustumOptions = {\n  left?: number;\n  right?: number;\n  top?: number;\n  bottom?: number;\n  near?: number;\n  far?: number;\n};\n\nexport default class PerspectiveOffCenterFrustum {\n  /**\n   * Defines the left clipping plane.\n   * @type {Number}\n   * @default undefined\n   */\n  left?: number;\n  private _left?: number;\n  /**\n   * Defines the right clipping plane.\n   * @type {Number}\n   * @default undefined\n   */\n  right?: number;\n  private _right?: number;\n  /**\n   * Defines the top clipping plane.\n   * @type {Number}\n   * @default undefined\n   */\n  top?: number;\n  private _top?: number;\n  /**\n   * Defines the bottom clipping plane.\n   * @type {Number}\n   * @default undefined\n   */\n  bottom?: number;\n  private _bottom?: number;\n  /**\n   * The distance of the near plane.\n   * @type {Number}\n   * @default 1.0\n   */\n  near: number;\n  private _near: number;\n  /**\n   * The distance of the far plane.\n   * @type {Number}\n   * @default 500000000.0\n   */\n  far: number;\n  private _far: number;\n\n  private _cullingVolume = new CullingVolume([\n    new Plane(),\n    new Plane(),\n    new Plane(),\n    new Plane(),\n    new Plane(),\n    new Plane()\n  ]);\n  private _perspectiveMatrix = new Matrix4();\n  private _infinitePerspective = new Matrix4();\n\n  /**\n   * The viewing frustum is defined by 6 planes.\n   * Each plane is represented by a {@link Vector4} object, where the x, y, and z components\n   * define the unit vector normal to the plane, and the w component is the distance of the\n   * plane from the origin/camera position.\n   *\n   * @alias PerspectiveOffCenterFrustum\n   *\n   * @example\n   * const frustum = new PerspectiveOffCenterFrustum({\n   *     left : -1.0,\n   *     right : 1.0,\n   *     top : 1.0,\n   *     bottom : -1.0,\n   *     near : 1.0,\n   *     far : 100.0\n   * });\n   *\n   * @see PerspectiveFrustum\n   */\n  constructor(options: PerspectiveOffCenterFrustumOptions = {}) {\n    const {near = 1.0, far = 500000000.0} = options;\n\n    this.left = options.left;\n    this._left = undefined;\n\n    this.right = options.right;\n    this._right = undefined;\n\n    this.top = options.top;\n    this._top = undefined;\n\n    this.bottom = options.bottom;\n    this._bottom = undefined;\n\n    this.near = near;\n    this._near = near;\n\n    this.far = far;\n    this._far = far;\n  }\n\n  /**\n   * Returns a duplicate of a PerspectiveOffCenterFrustum instance.\n   * @returns {PerspectiveOffCenterFrustum} A new PerspectiveFrustum instance.\n   * */\n  clone(): PerspectiveOffCenterFrustum {\n    return new PerspectiveOffCenterFrustum({\n      right: this.right,\n      left: this.left,\n      top: this.top,\n      bottom: this.bottom,\n      near: this.near,\n      far: this.far\n    });\n  }\n\n  /**\n   * Compares the provided PerspectiveOffCenterFrustum componentwise and returns\n   * <code>true</code> if they are equal, <code>false</code> otherwise.\n   *\n   * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n   */\n  equals(other: PerspectiveOffCenterFrustum): boolean {\n    return (\n      other &&\n      other instanceof PerspectiveOffCenterFrustum &&\n      this.right === other.right &&\n      this.left === other.left &&\n      this.top === other.top &&\n      this.bottom === other.bottom &&\n      this.near === other.near &&\n      this.far === other.far\n    );\n  }\n\n  /**\n   * Gets the perspective projection matrix computed from the view frustum.\n   * @memberof PerspectiveOffCenterFrustum.prototype\n   * @type {Matrix4}\n   *\n   * @see PerspectiveOffCenterFrustum#infiniteProjectionMatrix\n   */\n  get projectionMatrix(): Matrix4 {\n    this._update();\n    return this._perspectiveMatrix;\n  }\n\n  /**\n   * Gets the perspective projection matrix computed from the view frustum with an infinite far plane.\n   * @memberof PerspectiveOffCenterFrustum.prototype\n   * @type {Matrix4}\n   *\n   * @see PerspectiveOffCenterFrustum#projectionMatrix\n   */\n  get infiniteProjectionMatrix(): Matrix4 {\n    this._update();\n    return this._infinitePerspective;\n  }\n\n  /**\n   * Creates a culling volume for this frustum.\n   * @returns {CullingVolume} A culling volume at the given position and orientation.\n   *\n   * @example\n   * // Check if a bounding volume intersects the frustum.\n   * const cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\n   * const intersect = cullingVolume.computeVisibility(boundingVolume);\n   */\n  // eslint-disable-next-line complexity, max-statements\n  computeCullingVolume(\n    /** A Vector3 defines the eye position. */\n    position: Readonly<NumericArray>,\n    /** A Vector3 defines the view direction. */\n    direction: Readonly<NumericArray>,\n    /** A Vector3 defines the up direction. */\n    up: Readonly<NumericArray>\n  ): CullingVolume {\n    assert(position, 'position is required.');\n    assert(direction, 'direction is required.');\n    assert(up, 'up is required.');\n\n    const planes = this._cullingVolume.planes;\n\n    up = scratchPlaneUpVector.copy(up).normalize();\n    const right = scratchPlaneRightVector.copy(direction).cross(up).normalize();\n\n    const nearCenter = scratchPlaneNearCenter\n      .copy(direction)\n      .multiplyByScalar(this.near)\n      .add(position);\n\n    const farCenter = scratchPlaneFarCenter\n      .copy(direction)\n      .multiplyByScalar(this.far)\n      .add(position);\n\n    let normal = scratchPlaneNormal;\n\n    // Left plane computation\n    normal.copy(right).multiplyByScalar(this.left).add(nearCenter).subtract(position).cross(up);\n\n    planes[0].fromPointNormal(position, normal);\n\n    // Right plane computation\n    normal\n      .copy(right)\n      .multiplyByScalar(this.right)\n      .add(nearCenter)\n      .subtract(position)\n      .cross(up)\n      .negate();\n\n    planes[1].fromPointNormal(position, normal);\n\n    // Bottom plane computation\n    normal\n      .copy(up)\n      .multiplyByScalar(this.bottom)\n      .add(nearCenter)\n      .subtract(position)\n      .cross(right)\n      .negate();\n\n    planes[2].fromPointNormal(position, normal);\n\n    // Top plane computation\n    normal.copy(up).multiplyByScalar(this.top).add(nearCenter).subtract(position).cross(right);\n\n    planes[3].fromPointNormal(position, normal);\n\n    normal = new Vector3().copy(direction);\n\n    // Near plane computation\n    planes[4].fromPointNormal(nearCenter, normal);\n\n    // Far plane computation\n    normal.negate();\n\n    planes[5].fromPointNormal(farCenter, normal);\n\n    return this._cullingVolume;\n  }\n\n  /**\n   * Returns the pixel's width and height in meters.\n   *\n   * @returns {Vector2} The modified result parameter or a new instance of {@link Vector2} with the pixel's width and height in the x and y properties, respectively.\n   *\n   * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\n   * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\n   *\n   * @example\n   * // Example 1\n   * // Get the width and height of a pixel.\n   * const pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 1.0, new Vector2());\n   *\n   * @example\n   * // Example 2\n   * // Get the width and height of a pixel if the near plane was set to 'distance'.\n   * // For example, get the size of a pixel of an image on a billboard.\n   * const position = camera.position;\n   * const direction = camera.direction;\n   * const toCenter = Vector3.subtract(primitive.boundingVolume.center, position, new Vector3());      // vector from camera to a primitive\n   * const toCenterProj = Vector3.multiplyByScalar(direction, Vector3.dot(direction, toCenter), new Vector3()); // project vector onto camera direction vector\n   * const distance = Vector3.magnitude(toCenterProj);\n   * const pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, distance, new Vector2());\n   */\n  getPixelDimensions(\n    /** The width of the drawing buffer. */\n    drawingBufferWidth: number,\n    /** The height of the drawing buffer. */\n    drawingBufferHeight: number,\n    /** The distance to the near plane in meters. */\n    distance: number,\n    /** The object onto which to store the result. */\n    result: Vector2\n  ): Vector2 {\n    this._update();\n\n    assert(Number.isFinite(drawingBufferWidth) && Number.isFinite(drawingBufferHeight));\n    // 'Both drawingBufferWidth and drawingBufferHeight are required.'\n    assert(drawingBufferWidth > 0);\n    // 'drawingBufferWidth must be greater than zero.'\n    assert(drawingBufferHeight > 0);\n    // 'drawingBufferHeight must be greater than zero.'\n    assert(distance > 0);\n    // 'distance is required.');\n    assert(result);\n    // 'A result object is required.');\n\n    const inverseNear = 1.0 / this.near;\n    let tanTheta = this.top * inverseNear;\n    const pixelHeight = (2.0 * distance * tanTheta) / drawingBufferHeight;\n    tanTheta = this.right * inverseNear;\n    const pixelWidth = (2.0 * distance * tanTheta) / drawingBufferWidth;\n\n    result.x = pixelWidth;\n    result.y = pixelHeight;\n    return result;\n  }\n\n  // eslint-disable-next-line complexity, max-statements\n  private _update() {\n    assert(\n      Number.isFinite(this.right) &&\n        Number.isFinite(this.left) &&\n        Number.isFinite(this.top) &&\n        Number.isFinite(this.bottom) &&\n        Number.isFinite(this.near) &&\n        Number.isFinite(this.far)\n    );\n    // throw new DeveloperError('right, left, top, bottom, near, or far parameters are not set.');\n\n    const {top, bottom, right, left, near, far} = this;\n\n    if (\n      top !== this._top ||\n      bottom !== this._bottom ||\n      left !== this._left ||\n      right !== this._right ||\n      near !== this._near ||\n      far !== this._far\n    ) {\n      assert(\n        this.near > 0 && this.near < this.far,\n        'near must be greater than zero and less than far.'\n      );\n\n      this._left = left;\n      this._right = right;\n      this._top = top;\n      this._bottom = bottom;\n      this._near = near;\n      this._far = far;\n      this._perspectiveMatrix = new Matrix4().frustum({\n        left,\n        right,\n        bottom,\n        top,\n        near,\n        far\n      });\n      this._infinitePerspective = new Matrix4().frustum({\n        left,\n        right,\n        bottom,\n        top,\n        near,\n        far: Infinity\n      });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}