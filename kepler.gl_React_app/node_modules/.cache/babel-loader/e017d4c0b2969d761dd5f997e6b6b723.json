{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _marked = _regeneratorRuntime.mark(makeAttributeIterator);\nexport function makeAttributeIterator(_ref) {\n  var values, size, ArrayType, element, i, j;\n  return _regeneratorRuntime.wrap(function makeAttributeIterator$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          values = _ref.values, size = _ref.size;\n          ArrayType = values.constructor;\n          element = new ArrayType(size);\n          i = 0;\n        case 4:\n          if (!(i < values.length)) {\n            _context.next = 11;\n            break;\n          }\n          for (j = 0; j < size; j++) {\n            element[j] = element[i + j];\n          }\n          _context.next = 8;\n          return element;\n        case 8:\n          i += size;\n          _context.next = 4;\n          break;\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["../../../../src/geometry/iterators/attribute-iterator.js"],"names":["makeAttributeIterator","values","size","ArrayType","constructor","element","i","length","j"],"mappings":";uCAGiBA,qB;AAAjB,OAAO,SAAUA,qBAAV,CAAA,IAAA,EAAA;EAAA,IAAA,MAAA,EAAA,IAAA,EAAA,SAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA;EAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,sBAAA,CAAA,QAAA,EAAA;IAAA,OAAA,CAAA,EAAA;MAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;QAAA,KAAA,CAAA;UAAiCC,MAAjC,GAAA,IAAA,CAAiCA,MAAjC,EAAyCC,IAAzC,GAAA,IAAA,CAAyCA,IAAzC;UACCC,SADD,GACaF,MAAM,CAACG,WADpB;UAECC,OAFD,GAEW,IAAIF,SAAJ,CAAcD,IAAd,CAFX;UAGII,CAHJ,GAGQ,CAHR;QAAA,KAAA,CAAA;UAAA,IAAA,EAGWA,CAAC,GAAGL,MAAM,CAACM,MAHtB,CAAA,EAAA;YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;YAAA;UAAA;UAIH,KAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGN,IAApB,EAA0BM,CAAC,EAA3B,EAA+B;YAC7BH,OAAO,CAACG,CAAD,CAAPH,GAAaA,OAAO,CAACC,CAAC,GAAGE,CAAL,CAApBH;UACD;UANE,QAAA,CAAA,IAAA,GAAA,CAAA;UAOH,OAAMA,OAAN;QAPG,KAAA,CAAA;UAG8BC,CAAC,IAAIJ,IAHnC;UAAA,QAAA,CAAA,IAAA,GAAA,CAAA;UAAA;QAAA,KAAA,EAAA;QAAA,KAAA,KAAA;UAAA,OAAA,QAAA,CAAA,IAAA,EAAA;MAAA;IAAA;EAAA,CAAA,EAAA,OAAA,CAAA;AAAA","sourcesContent":["/** @typedef {import('./attribute-iterator')} types */\n\n/** @type {types['makeAttributeIterator']} */\nexport function* makeAttributeIterator({values, size}) {\n  const ArrayType = values.constructor;\n  const element = new ArrayType(size);\n  for (let i = 0; i < values.length; i += size) {\n    for (let j = 0; j < size; j++) {\n      element[j] = element[i + j];\n    }\n    yield element;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}