{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { Buffer } from '@luma.gl/core';\nimport { log } from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport { AGGREGATION_OPERATION } from '../utils/aggregation-operation-utils';\nimport { defaultColorRange, colorRangeToFlatArray } from '../utils/color-utils';\nimport GPUGridCellLayer from './gpu-grid-cell-layer';\nimport { pointToDensityGridDataCPU } from './../cpu-grid-layer/grid-aggregator';\nimport GridAggregationLayer from '../grid-aggregation-layer';\nimport { getBoundingBox, getGridParams } from '../utils/grid-aggregation-utils';\nvar defaultProps = {\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorWeight: {\n    type: 'accessor',\n    value: function value(x) {\n      return 1;\n    }\n  },\n  colorAggregation: 'SUM',\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationWeight: {\n    type: 'accessor',\n    value: function value(x) {\n      return 1;\n    }\n  },\n  elevationAggregation: 'SUM',\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  cellSize: {\n    type: 'number',\n    min: 1,\n    max: 1000,\n    value: 1000\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  extruded: false,\n  material: true\n};\nvar DIMENSIONS = {\n  data: {\n    props: ['cellSize', 'colorAggregation', 'elevationAggregation']\n  }\n};\nvar POSITION_ATTRIBUTE_NAME = 'positions';\nvar GPUGridLayer = function (_GridAggregationLayer) {\n  _inherits(GPUGridLayer, _GridAggregationLayer);\n  function GPUGridLayer() {\n    _classCallCheck(this, GPUGridLayer);\n    return _possibleConstructorReturn(this, _getPrototypeOf(GPUGridLayer).apply(this, arguments));\n  }\n  _createClass(GPUGridLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var _attributeManager$add;\n      var gl = this.context.gl;\n      var isSupported = GPUGridAggregator.isSupported(gl);\n      if (!isSupported) {\n        log.error('GPUGridLayer is not supported on this browser, use GridLayer instead')();\n      }\n      _get(_getPrototypeOf(GPUGridLayer.prototype), \"initializeState\", this).call(this, {\n        dimensions: DIMENSIONS\n      });\n      this.setState({\n        gpuAggregation: true,\n        projectPoints: false,\n        isSupported: isSupported,\n        weights: {\n          color: {\n            needMin: true,\n            needMax: true,\n            combineMaxMin: true,\n            maxMinBuffer: new Buffer(gl, {\n              byteLength: 4 * 4,\n              accessor: {\n                size: 4,\n                type: 5126,\n                divisor: 1\n              }\n            })\n          },\n          elevation: {\n            needMin: true,\n            needMax: true,\n            combineMaxMin: true,\n            maxMinBuffer: new Buffer(gl, {\n              byteLength: 4 * 4,\n              accessor: {\n                size: 4,\n                type: 5126,\n                divisor: 1\n              }\n            })\n          }\n        },\n        positionAttributeName: 'positions'\n      });\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add((_attributeManager$add = {}, _defineProperty(_attributeManager$add, POSITION_ATTRIBUTE_NAME, {\n        size: 3,\n        accessor: 'getPosition',\n        type: 5130,\n        fp64: this.use64bitPositions()\n      }), _defineProperty(_attributeManager$add, \"color\", {\n        size: 3,\n        accessor: 'getColorWeight'\n      }), _defineProperty(_attributeManager$add, \"elevation\", {\n        size: 3,\n        accessor: 'getElevationWeight'\n      }), _attributeManager$add));\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      if (this.state.isSupported === false) {\n        return;\n      }\n      _get(_getPrototypeOf(GPUGridLayer.prototype), \"updateState\", this).call(this, opts);\n      var aggregationDirty = this.state.aggregationDirty;\n      if (aggregationDirty) {\n        this.setState({\n          gridHash: null\n        });\n      }\n    }\n  }, {\n    key: \"getHashKeyForIndex\",\n    value: function getHashKeyForIndex(index) {\n      var _this$state = this.state,\n        numRow = _this$state.numRow,\n        numCol = _this$state.numCol,\n        boundingBox = _this$state.boundingBox,\n        gridOffset = _this$state.gridOffset;\n      var gridSize = [numCol, numRow];\n      var gridOrigin = [boundingBox.xMin, boundingBox.yMin];\n      var cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n      var yIndex = Math.floor(index / gridSize[0]);\n      var xIndex = index - yIndex * gridSize[0];\n      var latIdx = Math.floor((yIndex * cellSize[1] + gridOrigin[1] + 90 + cellSize[1] / 2) / cellSize[1]);\n      var lonIdx = Math.floor((xIndex * cellSize[0] + gridOrigin[0] + 180 + cellSize[0] / 2) / cellSize[0]);\n      return \"\".concat(latIdx, \"-\").concat(lonIdx);\n    }\n  }, {\n    key: \"getPositionForIndex\",\n    value: function getPositionForIndex(index) {\n      var _this$state2 = this.state,\n        numRow = _this$state2.numRow,\n        numCol = _this$state2.numCol,\n        boundingBox = _this$state2.boundingBox,\n        gridOffset = _this$state2.gridOffset;\n      var gridSize = [numCol, numRow];\n      var gridOrigin = [boundingBox.xMin, boundingBox.yMin];\n      var cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n      var yIndex = Math.floor(index / gridSize[0]);\n      var xIndex = index - yIndex * gridSize[0];\n      var yPos = yIndex * cellSize[1] + gridOrigin[1];\n      var xPos = xIndex * cellSize[0] + gridOrigin[0];\n      return [xPos, yPos];\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref) {\n      var info = _ref.info,\n        mode = _ref.mode;\n      var index = info.index;\n      var object = null;\n      if (index >= 0) {\n        var gpuGridAggregator = this.state.gpuGridAggregator;\n        var position = this.getPositionForIndex(index);\n        var colorInfo = GPUGridAggregator.getAggregationData(Object.assign({\n          pixelIndex: index\n        }, gpuGridAggregator.getData('color')));\n        var elevationInfo = GPUGridAggregator.getAggregationData(Object.assign({\n          pixelIndex: index\n        }, gpuGridAggregator.getData('elevation')));\n        object = {\n          colorValue: colorInfo.cellWeight,\n          elevationValue: elevationInfo.cellWeight,\n          count: colorInfo.cellCount || elevationInfo.cellCount,\n          position: position,\n          totalCount: colorInfo.totalCount || elevationInfo.totalCount\n        };\n        if (mode !== 'hover') {\n          var props = this.props;\n          var gridHash = this.state.gridHash;\n          if (!gridHash) {\n            var _this$state3 = this.state,\n              gridOffset = _this$state3.gridOffset,\n              translation = _this$state3.translation,\n              boundingBox = _this$state3.boundingBox;\n            var viewport = this.context.viewport;\n            var attributes = this.getAttributes();\n            var cpuAggregation = pointToDensityGridDataCPU(props, {\n              gridOffset: gridOffset,\n              attributes: attributes,\n              viewport: viewport,\n              translation: translation,\n              boundingBox: boundingBox\n            });\n            gridHash = cpuAggregation.gridHash;\n            this.setState({\n              gridHash: gridHash\n            });\n          }\n          var key = this.getHashKeyForIndex(index);\n          var cpuAggregationData = gridHash[key];\n          Object.assign(object, cpuAggregationData);\n        }\n      }\n      return Object.assign(info, {\n        picked: Boolean(object),\n        object: object\n      });\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      if (!this.state.isSupported) {\n        return null;\n      }\n      var _this$props = this.props,\n        elevationScale = _this$props.elevationScale,\n        extruded = _this$props.extruded,\n        cellSizeMeters = _this$props.cellSize,\n        coverage = _this$props.coverage,\n        material = _this$props.material,\n        elevationRange = _this$props.elevationRange,\n        colorDomain = _this$props.colorDomain,\n        elevationDomain = _this$props.elevationDomain;\n      var _this$state4 = this.state,\n        weights = _this$state4.weights,\n        numRow = _this$state4.numRow,\n        numCol = _this$state4.numCol,\n        gridOrigin = _this$state4.gridOrigin,\n        gridOffset = _this$state4.gridOffset;\n      var color = weights.color,\n        elevation = weights.elevation;\n      var colorRange = colorRangeToFlatArray(this.props.colorRange);\n      var SubLayerClass = this.getSubLayerClass('gpu-grid-cell', GPUGridCellLayer);\n      return new SubLayerClass({\n        gridSize: [numCol, numRow],\n        gridOrigin: gridOrigin,\n        gridOffset: [gridOffset.xOffset, gridOffset.yOffset],\n        colorRange: colorRange,\n        elevationRange: elevationRange,\n        colorDomain: colorDomain,\n        elevationDomain: elevationDomain,\n        cellSize: cellSizeMeters,\n        coverage: coverage,\n        material: material,\n        elevationScale: elevationScale,\n        extruded: extruded\n      }, this.getSubLayerProps({\n        id: 'gpu-grid-cell'\n      }), {\n        data: {\n          attributes: {\n            colors: color.aggregationBuffer,\n            elevations: elevation.aggregationBuffer\n          }\n        },\n        colorMaxMinBuffer: color.maxMinBuffer,\n        elevationMaxMinBuffer: elevation.maxMinBuffer,\n        numInstances: numCol * numRow\n      });\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      var _this$state$weights = this.state.weights,\n        color = _this$state$weights.color,\n        elevation = _this$state$weights.elevation;\n      [color, elevation].forEach(function (weight) {\n        var aggregationBuffer = weight.aggregationBuffer,\n          maxMinBuffer = weight.maxMinBuffer;\n        maxMinBuffer[\"delete\"]();\n        if (aggregationBuffer) {\n          aggregationBuffer[\"delete\"]();\n        }\n      });\n      _get(_getPrototypeOf(GPUGridLayer.prototype), \"finalizeState\", this).call(this);\n    }\n  }, {\n    key: \"updateAggregationState\",\n    value: function updateAggregationState(opts) {\n      var props = opts.props,\n        oldProps = opts.oldProps;\n      var cellSize = props.cellSize,\n        coordinateSystem = props.coordinateSystem;\n      var viewport = this.context.viewport;\n      var cellSizeChanged = oldProps.cellSize !== cellSize;\n      var dimensions = this.state.dimensions;\n      var positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n      var attributesChanged = positionsChanged || this.isAttributeChanged();\n      var boundingBox = this.state.boundingBox;\n      if (positionsChanged) {\n        boundingBox = getBoundingBox(this.getAttributes(), this.getNumInstances());\n        this.setState({\n          boundingBox: boundingBox\n        });\n      }\n      if (positionsChanged || cellSizeChanged) {\n        var _getGridParams = getGridParams(boundingBox, cellSize, viewport, coordinateSystem),\n          gridOffset = _getGridParams.gridOffset,\n          translation = _getGridParams.translation,\n          width = _getGridParams.width,\n          height = _getGridParams.height,\n          numCol = _getGridParams.numCol,\n          numRow = _getGridParams.numRow;\n        this.allocateResources(numRow, numCol);\n        this.setState({\n          gridOffset: gridOffset,\n          translation: translation,\n          gridOrigin: [-1 * translation[0], -1 * translation[1]],\n          width: width,\n          height: height,\n          numCol: numCol,\n          numRow: numRow\n        });\n      }\n      var aggregationDataDirty = attributesChanged || this.isAggregationDirty(opts, {\n        dimension: dimensions.data,\n        compareAll: true\n      });\n      if (aggregationDataDirty) {\n        this._updateAccessors(opts);\n      }\n      this.setState({\n        aggregationDataDirty: aggregationDataDirty\n      });\n    }\n  }, {\n    key: \"_updateAccessors\",\n    value: function _updateAccessors(opts) {\n      var _opts$props = opts.props,\n        colorAggregation = _opts$props.colorAggregation,\n        elevationAggregation = _opts$props.elevationAggregation;\n      var _this$state$weights2 = this.state.weights,\n        color = _this$state$weights2.color,\n        elevation = _this$state$weights2.elevation;\n      color.operation = AGGREGATION_OPERATION[colorAggregation];\n      elevation.operation = AGGREGATION_OPERATION[elevationAggregation];\n    }\n  }]);\n  return GPUGridLayer;\n}(GridAggregationLayer);\nexport { GPUGridLayer as default };\nGPUGridLayer.layerName = 'GPUGridLayer';\nGPUGridLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/gpu-grid-layer/gpu-grid-layer.js"],"names":["Buffer","log","GPUGridAggregator","AGGREGATION_OPERATION","defaultColorRange","colorRangeToFlatArray","GPUGridCellLayer","pointToDensityGridDataCPU","GridAggregationLayer","getBoundingBox","getGridParams","defaultProps","colorDomain","colorRange","getColorWeight","type","value","colorAggregation","elevationDomain","elevationRange","getElevationWeight","elevationAggregation","elevationScale","min","cellSize","max","coverage","getPosition","x","position","extruded","material","DIMENSIONS","data","props","POSITION_ATTRIBUTE_NAME","GPUGridLayer","gl","context","isSupported","error","dimensions","setState","gpuAggregation","projectPoints","weights","color","needMin","needMax","combineMaxMin","maxMinBuffer","byteLength","accessor","size","divisor","elevation","positionAttributeName","attributeManager","getAttributeManager","add","fp64","use64bitPositions","opts","state","aggregationDirty","gridHash","index","numRow","numCol","boundingBox","gridOffset","gridSize","gridOrigin","xMin","yMin","xOffset","yOffset","yIndex","Math","floor","xIndex","latIdx","lonIdx","yPos","xPos","info","mode","object","gpuGridAggregator","getPositionForIndex","colorInfo","getAggregationData","assign","pixelIndex","getData","elevationInfo","colorValue","cellWeight","elevationValue","count","cellCount","totalCount","translation","viewport","attributes","getAttributes","cpuAggregation","key","getHashKeyForIndex","cpuAggregationData","Object","picked","Boolean","cellSizeMeters","SubLayerClass","getSubLayerClass","getSubLayerProps","id","colors","aggregationBuffer","elevations","colorMaxMinBuffer","elevationMaxMinBuffer","numInstances","forEach","weight","oldProps","coordinateSystem","cellSizeChanged","positionsChanged","isAttributeChanged","attributesChanged","getNumInstances","width","height","allocateResources","aggregationDataDirty","isAggregationDirty","dimension","compareAll","_updateAccessors","operation","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Buffer} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport {log} from '@deck.gl/core';\n\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION} from '../utils/aggregation-operation-utils';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport GPUGridCellLayer from './gpu-grid-cell-layer';\nimport {pointToDensityGridDataCPU} from './../cpu-grid-layer/grid-aggregator';\nimport GridAggregationLayer from '../grid-aggregation-layer';\nimport {getBoundingBox, getGridParams} from '../utils/grid-aggregation-utils';\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorWeight: {type: 'accessor', value: x => 1},\n  colorAggregation: 'SUM',\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationWeight: {type: 'accessor', value: x => 1},\n  elevationAggregation: 'SUM',\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // grid\n  cellSize: {type: 'number', min: 1, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getPosition: {type: 'accessor', value: x => x.position},\n  extruded: false,\n\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\n// This layer only perform GPU aggregation, no need to seperate data and weight props\n// aggregation will be dirty when any of the props are changed.\n\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSize', 'colorAggregation', 'elevationAggregation']\n  }\n  // rest of the changes are detected by `state.attributesChanged`\n};\nconst POSITION_ATTRIBUTE_NAME = 'positions';\n\nexport default class GPUGridLayer extends GridAggregationLayer {\n  initializeState() {\n    const {gl} = this.context;\n    const isSupported = GPUGridAggregator.isSupported(gl);\n    if (!isSupported) {\n      log.error('GPUGridLayer is not supported on this browser, use GridLayer instead')();\n    }\n    super.initializeState({\n      dimensions: DIMENSIONS\n    });\n    this.setState({\n      gpuAggregation: true,\n      projectPoints: false, // aggregation in world space\n      isSupported,\n      weights: {\n        color: {\n          needMin: true,\n          needMax: true,\n          combineMaxMin: true,\n          maxMinBuffer: new Buffer(gl, {\n            byteLength: 4 * 4,\n            accessor: {size: 4, type: GL.FLOAT, divisor: 1}\n          })\n        },\n        elevation: {\n          needMin: true,\n          needMax: true,\n          combineMaxMin: true,\n          maxMinBuffer: new Buffer(gl, {\n            byteLength: 4 * 4,\n            accessor: {size: 4, type: GL.FLOAT, divisor: 1}\n          })\n        }\n      },\n      positionAttributeName: 'positions'\n    });\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions()\n      },\n      color: {size: 3, accessor: 'getColorWeight'},\n      elevation: {size: 3, accessor: 'getElevationWeight'}\n    });\n  }\n\n  updateState(opts) {\n    if (this.state.isSupported === false) {\n      // Skip update, layer not supported\n      return;\n    }\n    super.updateState(opts);\n    const {aggregationDirty} = this.state;\n    if (aggregationDirty) {\n      // reset cached CPU Aggregation results (used for picking)\n      this.setState({\n        gridHash: null\n      });\n    }\n  }\n\n  getHashKeyForIndex(index) {\n    const {numRow, numCol, boundingBox, gridOffset} = this.state;\n    const gridSize = [numCol, numRow];\n    const gridOrigin = [boundingBox.xMin, boundingBox.yMin];\n    const cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n\n    const yIndex = Math.floor(index / gridSize[0]);\n    const xIndex = index - yIndex * gridSize[0];\n    // This will match the index to the hash-key to access aggregation data from CPU aggregation results.\n    const latIdx = Math.floor(\n      (yIndex * cellSize[1] + gridOrigin[1] + 90 + cellSize[1] / 2) / cellSize[1]\n    );\n    const lonIdx = Math.floor(\n      (xIndex * cellSize[0] + gridOrigin[0] + 180 + cellSize[0] / 2) / cellSize[0]\n    );\n    return `${latIdx}-${lonIdx}`;\n  }\n\n  getPositionForIndex(index) {\n    const {numRow, numCol, boundingBox, gridOffset} = this.state;\n    const gridSize = [numCol, numRow];\n    const gridOrigin = [boundingBox.xMin, boundingBox.yMin];\n    const cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n\n    const yIndex = Math.floor(index / gridSize[0]);\n    const xIndex = index - yIndex * gridSize[0];\n    const yPos = yIndex * cellSize[1] + gridOrigin[1];\n    const xPos = xIndex * cellSize[0] + gridOrigin[0];\n    return [xPos, yPos];\n  }\n\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n    let object = null;\n    if (index >= 0) {\n      const {gpuGridAggregator} = this.state;\n      const position = this.getPositionForIndex(index);\n      const colorInfo = GPUGridAggregator.getAggregationData(\n        Object.assign({pixelIndex: index}, gpuGridAggregator.getData('color'))\n      );\n      const elevationInfo = GPUGridAggregator.getAggregationData(\n        Object.assign({pixelIndex: index}, gpuGridAggregator.getData('elevation'))\n      );\n\n      object = {\n        colorValue: colorInfo.cellWeight,\n        elevationValue: elevationInfo.cellWeight,\n        count: colorInfo.cellCount || elevationInfo.cellCount,\n        position,\n        totalCount: colorInfo.totalCount || elevationInfo.totalCount\n      };\n      if (mode !== 'hover') {\n        // perform CPU aggregation for full list of points for each cell\n        const {props} = this;\n        let {gridHash} = this.state;\n        if (!gridHash) {\n          const {gridOffset, translation, boundingBox} = this.state;\n          const {viewport} = this.context;\n          const attributes = this.getAttributes();\n          const cpuAggregation = pointToDensityGridDataCPU(props, {\n            gridOffset,\n            attributes,\n            viewport,\n            translation,\n            boundingBox\n          });\n          gridHash = cpuAggregation.gridHash;\n          this.setState({gridHash});\n        }\n        const key = this.getHashKeyForIndex(index);\n        const cpuAggregationData = gridHash[key];\n        Object.assign(object, cpuAggregationData);\n      }\n    }\n\n    return Object.assign(info, {\n      picked: Boolean(object),\n      // override object with picked cell\n      object\n    });\n  }\n\n  renderLayers() {\n    if (!this.state.isSupported) {\n      return null;\n    }\n    const {\n      elevationScale,\n      extruded,\n      cellSize: cellSizeMeters,\n      coverage,\n      material,\n      elevationRange,\n      colorDomain,\n      elevationDomain\n    } = this.props;\n\n    const {weights, numRow, numCol, gridOrigin, gridOffset} = this.state;\n    const {color, elevation} = weights;\n    const colorRange = colorRangeToFlatArray(this.props.colorRange);\n\n    const SubLayerClass = this.getSubLayerClass('gpu-grid-cell', GPUGridCellLayer);\n\n    return new SubLayerClass(\n      {\n        gridSize: [numCol, numRow],\n        gridOrigin,\n        gridOffset: [gridOffset.xOffset, gridOffset.yOffset],\n        colorRange,\n        elevationRange,\n        colorDomain,\n        elevationDomain,\n\n        cellSize: cellSizeMeters,\n        coverage,\n        material,\n        elevationScale,\n        extruded\n      },\n      this.getSubLayerProps({\n        id: 'gpu-grid-cell'\n      }),\n      {\n        data: {\n          attributes: {\n            colors: color.aggregationBuffer,\n            elevations: elevation.aggregationBuffer\n          }\n        },\n        colorMaxMinBuffer: color.maxMinBuffer,\n        elevationMaxMinBuffer: elevation.maxMinBuffer,\n        numInstances: numCol * numRow\n      }\n    );\n  }\n\n  finalizeState() {\n    const {color, elevation} = this.state.weights;\n    [color, elevation].forEach(weight => {\n      const {aggregationBuffer, maxMinBuffer} = weight;\n      maxMinBuffer.delete();\n      if (aggregationBuffer) {\n        aggregationBuffer.delete();\n      }\n    });\n    super.finalizeState();\n  }\n\n  // Aggregation Overrides\n\n  updateAggregationState(opts) {\n    const {props, oldProps} = opts;\n    const {cellSize, coordinateSystem} = props;\n    const {viewport} = this.context;\n    const cellSizeChanged = oldProps.cellSize !== cellSize;\n    const {dimensions} = this.state;\n\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n    // any attribute changed\n    const attributesChanged = positionsChanged || this.isAttributeChanged();\n\n    let {boundingBox} = this.state;\n    if (positionsChanged) {\n      boundingBox = getBoundingBox(this.getAttributes(), this.getNumInstances());\n      this.setState({boundingBox});\n    }\n    if (positionsChanged || cellSizeChanged) {\n      const {gridOffset, translation, width, height, numCol, numRow} = getGridParams(\n        boundingBox,\n        cellSize,\n        viewport,\n        coordinateSystem\n      );\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        gridOffset,\n        translation,\n        gridOrigin: [-1 * translation[0], -1 * translation[1]],\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n\n    const aggregationDataDirty =\n      attributesChanged ||\n      this.isAggregationDirty(opts, {\n        dimension: dimensions.data,\n        compareAll: true\n      });\n\n    if (aggregationDataDirty) {\n      this._updateAccessors(opts);\n    }\n    this.setState({\n      aggregationDataDirty\n    });\n  }\n\n  // Private\n\n  _updateAccessors(opts) {\n    const {colorAggregation, elevationAggregation} = opts.props;\n    const {color, elevation} = this.state.weights;\n    color.operation = AGGREGATION_OPERATION[colorAggregation];\n    elevation.operation = AGGREGATION_OPERATION[elevationAggregation];\n  }\n}\n\nGPUGridLayer.layerName = 'GPUGridLayer';\nGPUGridLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}