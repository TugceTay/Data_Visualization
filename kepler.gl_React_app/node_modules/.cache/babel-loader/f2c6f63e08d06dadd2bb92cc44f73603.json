{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isSVG, getBlob } from './svg-utils';\nimport parseToImage from './parse-to-image';\nvar EMPTY_OBJECT = {};\nvar imagebitmapOptionsSupported = true;\nexport default function parseToImageBitmap(_x, _x2, _x3) {\n  return _parseToImageBitmap.apply(this, arguments);\n}\nfunction _parseToImageBitmap() {\n  _parseToImageBitmap = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer, options, url) {\n    var blob, image, imagebitmapOptions;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!isSVG(url)) {\n              _context.next = 7;\n              break;\n            }\n            _context.next = 3;\n            return parseToImage(arrayBuffer, options, url);\n          case 3:\n            image = _context.sent;\n            blob = image;\n            _context.next = 8;\n            break;\n          case 7:\n            blob = getBlob(arrayBuffer, url);\n          case 8:\n            imagebitmapOptions = options && options.imagebitmap;\n            _context.next = 11;\n            return safeCreateImageBitmap(blob, imagebitmapOptions);\n          case 11:\n            return _context.abrupt(\"return\", _context.sent);\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseToImageBitmap.apply(this, arguments);\n}\nfunction safeCreateImageBitmap(_x4) {\n  return _safeCreateImageBitmap.apply(this, arguments);\n}\nfunction _safeCreateImageBitmap() {\n  _safeCreateImageBitmap = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(blob) {\n    var imagebitmapOptions,\n      _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            imagebitmapOptions = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : null;\n            if (isEmptyObject(imagebitmapOptions) || !imagebitmapOptionsSupported) {\n              imagebitmapOptions = null;\n            }\n            if (!imagebitmapOptions) {\n              _context2.next = 13;\n              break;\n            }\n            _context2.prev = 3;\n            _context2.next = 6;\n            return createImageBitmap(blob, imagebitmapOptions);\n          case 6:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](3);\n            console.warn(_context2.t0);\n            imagebitmapOptionsSupported = false;\n          case 13:\n            _context2.next = 15;\n            return createImageBitmap(blob);\n          case 15:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 9]]);\n  }));\n  return _safeCreateImageBitmap.apply(this, arguments);\n}\nfunction isEmptyObject(object) {\n  for (var key in object || EMPTY_OBJECT) {\n    return false;\n  }\n  return true;\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-to-image-bitmap.js"],"names":["isSVG","getBlob","parseToImage","EMPTY_OBJECT","imagebitmapOptionsSupported","parseToImageBitmap","arrayBuffer","options","url","image","blob","imagebitmapOptions","imagebitmap","safeCreateImageBitmap","isEmptyObject","createImageBitmap","console","warn","object","key"],"mappings":"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","sourcesContent":["/* global createImageBitmap */\nimport {isSVG, getBlob} from './svg-utils';\nimport parseToImage from './parse-to-image';\n\nconst EMPTY_OBJECT = {};\n\nlet imagebitmapOptionsSupported = true;\n\n/**\n * Asynchronously parses an array buffer into an ImageBitmap - this contains the decoded data\n * ImageBitmaps are supported on worker threads, but not supported on Edge, IE11 and Safari\n * https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap#Browser_compatibility\n *\n * TODO - createImageBitmap supports source rect (5 param overload), pass through?\n */\nexport default async function parseToImageBitmap(arrayBuffer, options, url) {\n  let blob;\n\n  // Cannot parse SVG directly to ImageBitmap, parse to Image first\n  if (isSVG(url)) {\n    // Note: this only works on main thread\n    const image = await parseToImage(arrayBuffer, options, url);\n    blob = image;\n  } else {\n    // Create blob from the array buffer\n    blob = getBlob(arrayBuffer, url);\n  }\n\n  const imagebitmapOptions = options && options.imagebitmap;\n\n  return await safeCreateImageBitmap(blob, imagebitmapOptions);\n}\n\n/**\n * Safely creates an imageBitmap with options\n * *\n * Firefox crashes if imagebitmapOptions is supplied\n * Avoid supplying if not provided or supported, remember if not supported\n */\nasync function safeCreateImageBitmap(blob, imagebitmapOptions = null) {\n  if (isEmptyObject(imagebitmapOptions) || !imagebitmapOptionsSupported) {\n    imagebitmapOptions = null;\n  }\n\n  if (imagebitmapOptions) {\n    try {\n      // @ts-ignore Options\n      return await createImageBitmap(blob, imagebitmapOptions);\n    } catch (error) {\n      console.warn(error); // eslint-disable-line\n      imagebitmapOptionsSupported = false;\n    }\n  }\n\n  return await createImageBitmap(blob);\n}\n\nfunction isEmptyObject(object) {\n  for (const key in object || EMPTY_OBJECT) {\n    return false;\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}