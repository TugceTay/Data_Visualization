{"ast":null,"code":"import { Texture2D, TextureCube } from '@luma.gl/webgl';\nimport { loadImage } from '@loaders.gl/images';\nexport default class GLTFEnvironment {\n  constructor(gl, _ref) {\n    let {\n      brdfLutUrl,\n      getTexUrl,\n      specularMipLevels = 10\n    } = _ref;\n    this.gl = gl;\n    this.brdfLutUrl = brdfLutUrl;\n    this.getTexUrl = getTexUrl;\n    this.specularMipLevels = specularMipLevels;\n  }\n  makeCube(_ref2) {\n    let {\n      id,\n      getTextureForFace,\n      parameters\n    } = _ref2;\n    const pixels = {};\n    TextureCube.FACES.forEach(face => {\n      pixels[face] = getTextureForFace(face);\n    });\n    return new TextureCube(this.gl, {\n      id,\n      mipmaps: false,\n      parameters,\n      pixels\n    });\n  }\n  getDiffuseEnvSampler() {\n    if (!this._DiffuseEnvSampler) {\n      this._DiffuseEnvSampler = this.makeCube({\n        id: 'DiffuseEnvSampler',\n        getTextureForFace: dir => loadImage(this.getTexUrl('diffuse', dir, 0)),\n        parameters: {\n          [10242]: 33071,\n          [10243]: 33071,\n          [10241]: 9729,\n          [10240]: 9729\n        }\n      });\n    }\n    return this._DiffuseEnvSampler;\n  }\n  getSpecularEnvSampler() {\n    if (!this._SpecularEnvSampler) {\n      this._SpecularEnvSampler = this.makeCube({\n        id: 'SpecularEnvSampler',\n        getTextureForFace: dir => {\n          const imageArray = [];\n          for (let lod = 0; lod <= this.specularMipLevels - 1; lod++) {\n            imageArray.push(loadImage(this.getTexUrl('specular', dir, lod)));\n          }\n          return imageArray;\n        },\n        parameters: {\n          [10242]: 33071,\n          [10243]: 33071,\n          [10241]: 9987,\n          [10240]: 9729\n        }\n      });\n    }\n    return this._SpecularEnvSampler;\n  }\n  getBrdfTexture() {\n    if (!this._BrdfTexture) {\n      this._BrdfTexture = new Texture2D(this.gl, {\n        id: 'brdfLUT',\n        parameters: {\n          [10242]: 33071,\n          [10243]: 33071,\n          [10241]: 9729,\n          [10240]: 9729\n        },\n        data: loadImage(this.brdfLutUrl)\n      });\n    }\n    return this._BrdfTexture;\n  }\n  delete() {\n    if (this._DiffuseEnvSampler) {\n      this._DiffuseEnvSampler.delete();\n      this._DiffuseEnvSampler = null;\n    }\n    if (this._SpecularEnvSampler) {\n      this._SpecularEnvSampler.delete();\n      this._SpecularEnvSampler = null;\n    }\n    if (this._BrdfTexture) {\n      this._BrdfTexture.delete();\n      this._BrdfTexture = null;\n    }\n  }\n}","map":{"version":3,"sources":["../../../src/gltf/gltf-environment.js"],"names":["Texture2D","TextureCube","loadImage","GLTFEnvironment","constructor","gl","brdfLutUrl","getTexUrl","specularMipLevels","makeCube","id","getTextureForFace","parameters","pixels","FACES","forEach","face","mipmaps","getDiffuseEnvSampler","_DiffuseEnvSampler","dir","getSpecularEnvSampler","_SpecularEnvSampler","imageArray","lod","push","getBrdfTexture","_BrdfTexture","data","delete"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {Texture2D, TextureCube} from '@luma.gl/webgl';\nimport {loadImage} from '@loaders.gl/images';\n\nexport default class GLTFEnvironment {\n  constructor(gl, {brdfLutUrl, getTexUrl, specularMipLevels = 10}) {\n    this.gl = gl;\n    this.brdfLutUrl = brdfLutUrl;\n    this.getTexUrl = getTexUrl;\n    this.specularMipLevels = specularMipLevels;\n  }\n\n  makeCube({id, getTextureForFace, parameters}) {\n    const pixels = {};\n    TextureCube.FACES.forEach(face => {\n      pixels[face] = getTextureForFace(face);\n    });\n    return new TextureCube(this.gl, {\n      id,\n      mipmaps: false,\n      parameters,\n      pixels\n    });\n  }\n\n  getDiffuseEnvSampler() {\n    if (!this._DiffuseEnvSampler) {\n      this._DiffuseEnvSampler = this.makeCube({\n        id: 'DiffuseEnvSampler',\n        getTextureForFace: dir => loadImage(this.getTexUrl('diffuse', dir, 0)),\n        parameters: {\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_MAG_FILTER]: GL.LINEAR\n        }\n      });\n    }\n\n    return this._DiffuseEnvSampler;\n  }\n\n  getSpecularEnvSampler() {\n    if (!this._SpecularEnvSampler) {\n      this._SpecularEnvSampler = this.makeCube({\n        id: 'SpecularEnvSampler',\n        getTextureForFace: dir => {\n          const imageArray = [];\n          for (let lod = 0; lod <= this.specularMipLevels - 1; lod++) {\n            imageArray.push(loadImage(this.getTexUrl('specular', dir, lod)));\n          }\n          return imageArray;\n        },\n        parameters: {\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n          [GL.TEXTURE_MAG_FILTER]: GL.LINEAR\n        }\n      });\n    }\n\n    return this._SpecularEnvSampler;\n  }\n\n  getBrdfTexture() {\n    if (!this._BrdfTexture) {\n      this._BrdfTexture = new Texture2D(this.gl, {\n        id: 'brdfLUT',\n        parameters: {\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_MAG_FILTER]: GL.LINEAR\n        },\n        // Texture2D accepts a promise that returns an image as data (Async Textures)\n        data: loadImage(this.brdfLutUrl)\n      });\n    }\n\n    return this._BrdfTexture;\n  }\n\n  delete() {\n    if (this._DiffuseEnvSampler) {\n      this._DiffuseEnvSampler.delete();\n      this._DiffuseEnvSampler = null;\n    }\n\n    if (this._SpecularEnvSampler) {\n      this._SpecularEnvSampler.delete();\n      this._SpecularEnvSampler = null;\n    }\n\n    if (this._BrdfTexture) {\n      this._BrdfTexture.delete();\n      this._BrdfTexture = null;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}