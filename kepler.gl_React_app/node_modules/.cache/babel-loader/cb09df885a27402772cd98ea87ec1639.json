{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar DEFAULT_BATCH_SIZE = 100;\nvar DEFAULT_OPTIONS = {\n  batchSize: DEFAULT_BATCH_SIZE\n};\nvar TableBatchBuilder = function () {\n  function TableBatchBuilder(TableBatchType, schema) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    _classCallCheck(this, TableBatchBuilder);\n    this.TableBatchType = TableBatchType;\n    this.schema = schema;\n    this.options = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n    this.batch = null;\n    this.batchCount = 0;\n    this.bytesUsed = 0;\n  }\n  _createClass(TableBatchBuilder, [{\n    key: \"addRow\",\n    value: function addRow(row) {\n      if (!this.batch) {\n        var TableBatchType = this.TableBatchType;\n        this.batch = new TableBatchType(this.schema, this.options);\n      }\n      this.batch.addRow(row);\n    }\n  }, {\n    key: \"chunkComplete\",\n    value: function chunkComplete(chunk) {\n      this.bytesUsed += chunk.byteLength || chunk.length || 0;\n      if (this.batch) {\n        this.batch.chunkComplete();\n      }\n    }\n  }, {\n    key: \"isFull\",\n    value: function isFull() {\n      return this.batch && this.batch.isFull();\n    }\n  }, {\n    key: \"hasBatch\",\n    value: function hasBatch() {\n      return Boolean(this.batch);\n    }\n  }, {\n    key: \"getBatch\",\n    value: function getBatch() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (Number.isFinite(options.bytesUsed)) {\n        this.bytesUsed = options.bytesUsed;\n      }\n      if (this.batch) {\n        var normalizedBatch = this.batch.getBatch();\n        this.batch = null;\n        normalizedBatch.count = this.batchCount;\n        this.batchCount++;\n        normalizedBatch.bytesUsed = this.bytesUsed;\n        Object.assign(normalizedBatch, options);\n        return normalizedBatch;\n      }\n      return null;\n    }\n  }]);\n  return TableBatchBuilder;\n}();\nexport { TableBatchBuilder as default };","map":{"version":3,"sources":["../../../../src/lib/table/table-batch-builder.js"],"names":["DEFAULT_BATCH_SIZE","DEFAULT_OPTIONS","batchSize","TableBatchBuilder","TableBatchType","schema","options","batch","batchCount","bytesUsed","row","addRow","chunk","byteLength","length","chunkComplete","isFull","Boolean","Number","isFinite","normalizedBatch","getBatch","count","Object","assign"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,kBAAkB,GAAG,GAA3B;AAEA,IAAMC,eAAe,GAAG;EACtBC,SAAS,EAAEF;AADW,CAAxB;IAIqBG,iB;EACnB,SAAA,iBAAA,CAAYC,cAAZ,EAA4BC,MAA5B,EAAkD;IAAA,IAAdC,OAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,CAAA,CAAI;IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,CAAA;IAChD,IAAA,CAAKF,cAAL,GAAsBA,cAAtB;IACA,IAAA,CAAKC,MAAL,GAAcA,MAAd;IACA,IAAA,CAAKC,OAAL,GAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EAAmBL,eAAnB,CAAA,EAAuCK,OAAvC,CAAA;IAEA,IAAA,CAAKC,KAAL,GAAa,IAAb;IACA,IAAA,CAAKC,UAAL,GAAkB,CAAlB;IACA,IAAA,CAAKC,SAAL,GAAiB,CAAjB;EACD;;;2BAEMC,G,EAAK;MACV,IAAI,CAAC,IAAA,CAAKH,KAAV,EAAiB;QAAA,IACRH,cADQ,GACU,IADV,CACRA,cADQ;QAEf,IAAA,CAAKG,KAAL,GAAa,IAAIH,cAAJ,CAAmB,IAAA,CAAKC,MAAxB,EAAgC,IAAA,CAAKC,OAArC,CAAb;MACD;MAED,IAAA,CAAKC,KAAL,CAAWI,MAAX,CAAkBD,GAAlB,CAAA;IACD;;;kCAEaE,K,EAAO;MACnB,IAAA,CAAKH,SAAL,IAAkBG,KAAK,CAACC,UAAND,IAAoBA,KAAK,CAACE,MAA1BF,IAAoC,CAAtD;MACA,IAAI,IAAA,CAAKL,KAAT,EAAgB;QACd,IAAA,CAAKA,KAAL,CAAWQ,aAAX,EAAA;MACD;IACF;;;6BAEQ;MACP,OAAO,IAAA,CAAKR,KAAL,IAAc,IAAA,CAAKA,KAAL,CAAWS,MAAX,EAArB;IACD;;;+BAEU;MACT,OAAOC,OAAO,CAAC,IAAA,CAAKV,KAAN,CAAd;IACD;;;+BAEsB;MAAA,IAAdD,OAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,CAAA,CAAI;MACrB,IAAIY,MAAM,CAACC,QAAPD,CAAgBZ,OAAO,CAACG,SAAxBS,CAAJ,EAAwC;QACtC,IAAA,CAAKT,SAAL,GAAiBH,OAAO,CAACG,SAAzB;MACD;MAED,IAAI,IAAA,CAAKF,KAAT,EAAgB;QACd,IAAMa,eAAe,GAAG,IAAA,CAAKb,KAAL,CAAWc,QAAX,EAAxB;QACA,IAAA,CAAKd,KAAL,GAAa,IAAb;QACAa,eAAe,CAACE,KAAhBF,GAAwB,IAAA,CAAKZ,UAA7BY;QACA,IAAA,CAAKZ,UAAL,EAAA;QACAY,eAAe,CAACX,SAAhBW,GAA4B,IAAA,CAAKX,SAAjCW;QACAG,MAAM,CAACC,MAAPD,CAAcH,eAAdG,EAA+BjB,OAA/BiB,CAAAA;QACA,OAAOH,eAAP;MACD;MAED,OAAO,IAAP;IACD;;;;SAnDkBjB,iB","sourcesContent":["const DEFAULT_BATCH_SIZE = 100;\n\nconst DEFAULT_OPTIONS = {\n  batchSize: DEFAULT_BATCH_SIZE\n};\n\nexport default class TableBatchBuilder {\n  constructor(TableBatchType, schema, options = {}) {\n    this.TableBatchType = TableBatchType;\n    this.schema = schema;\n    this.options = {...DEFAULT_OPTIONS, ...options};\n\n    this.batch = null;\n    this.batchCount = 0;\n    this.bytesUsed = 0;\n  }\n\n  addRow(row) {\n    if (!this.batch) {\n      const {TableBatchType} = this;\n      this.batch = new TableBatchType(this.schema, this.options);\n    }\n\n    this.batch.addRow(row);\n  }\n\n  chunkComplete(chunk) {\n    this.bytesUsed += chunk.byteLength || chunk.length || 0;\n    if (this.batch) {\n      this.batch.chunkComplete();\n    }\n  }\n\n  isFull() {\n    return this.batch && this.batch.isFull();\n  }\n\n  hasBatch() {\n    return Boolean(this.batch);\n  }\n\n  getBatch(options = {}) {\n    if (Number.isFinite(options.bytesUsed)) {\n      this.bytesUsed = options.bytesUsed;\n    }\n\n    if (this.batch) {\n      const normalizedBatch = this.batch.getBatch();\n      this.batch = null;\n      normalizedBatch.count = this.batchCount;\n      this.batchCount++;\n      normalizedBatch.bytesUsed = this.bytesUsed;\n      Object.assign(normalizedBatch, options);\n      return normalizedBatch;\n    }\n\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}