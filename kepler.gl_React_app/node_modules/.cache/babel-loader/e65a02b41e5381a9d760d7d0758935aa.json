{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { loadDracoEncoderModule } from './lib/draco-module-loader';\nimport DRACOBuilder from './lib/draco-builder';\nexport default {\n  name: 'DRACO',\n  extensions: ['drc'],\n  encode: encode,\n  options: {\n    draco: {\n      pointcloud: false\n    }\n  }\n};\nfunction encode(_x, _x2) {\n  return _encode.apply(this, arguments);\n}\nfunction _encode() {\n  _encode = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, options) {\n    var dracoOptions, _yield$loadDracoEncod, draco, dracoBuilder;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dracoOptions = options && options.draco || options || {};\n            _context.next = 3;\n            return loadDracoEncoderModule(options || {});\n          case 3:\n            _yield$loadDracoEncod = _context.sent;\n            draco = _yield$loadDracoEncod.draco;\n            dracoBuilder = new DRACOBuilder(draco);\n            _context.prev = 6;\n            return _context.abrupt(\"return\", dracoBuilder.encodeSync(data, dracoOptions));\n          case 8:\n            _context.prev = 8;\n            dracoBuilder.destroy();\n            return _context.finish(8);\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[6,, 8, 11]]);\n  }));\n  return _encode.apply(this, arguments);\n}","map":{"version":3,"sources":["../../src/draco-writer.js"],"names":["loadDracoEncoderModule","DRACOBuilder","name","extensions","encode","options","draco","pointcloud","data","dracoOptions","dracoBuilder","encodeSync","destroy"],"mappings":";;AAAA,SAAQA,sBAAR,QAAqC,2BAArC;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AAEA,eAAe;EACbC,IAAI,EAAE,OADO;EAEbC,UAAU,EAAE,CAAC,KAAD,CAFC;EAGbC,MAAM,EAANA,MAHa;EAIbC,OAAO,EAAE;IACPC,KAAK,EAAE;MACLC,UAAU,EAAE;IADP;EADA;AAJI,CAAf;SAiBeH,M;;;;uDAAf,SAAA,OAAA,CAAsBI,IAAtB,EAA4BH,OAA5B,EAAA;IAAA,IAAA,YAAA,EAAA,qBAAA,EAAA,KAAA,EAAA,YAAA;IAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YAEQI,YAFR,GAEwBJ,OAAO,IAAIA,OAAO,CAACC,KAApB,IAA8BD,OAA9B,IAAyC,CAAA,CAFhE;YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OAKwBL,sBAAsB,CAACK,OAAO,IAAI,CAAA,CAAZ,CAL9C;UAAA,KAAA,CAAA;YAAA,qBAAA,GAAA,QAAA,CAAA,IAAA;YAKSC,KALT,GAAA,qBAAA,CAKSA,KALT;YAMQI,YANR,GAMuB,IAAIT,YAAJ,CAAiBK,KAAjB,CANvB;YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EASWI,YAAY,CAACC,UAAbD,CAAwBF,IAAxBE,EAA8BD,YAA9BC,CATX,CAAA;UAAA,KAAA,CAAA;YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;YAWIA,YAAY,CAACE,OAAbF,EAAAA;YAXJ,OAAA,QAAA,CAAA,MAAA,CAAA,CAAA,CAAA;UAAA,KAAA,EAAA;UAAA,KAAA,KAAA;YAAA,OAAA,QAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,OAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA;EAAA,C","sourcesContent":["import {loadDracoEncoderModule} from './lib/draco-module-loader';\nimport DRACOBuilder from './lib/draco-builder';\n\nexport default {\n  name: 'DRACO',\n  extensions: ['drc'],\n  encode,\n  options: {\n    draco: {\n      pointcloud: false // Set to true if pointcloud (mode: 0, no indices)\n      // Draco Compression Parameters\n      // method: 'MESH_EDGEBREAKER_ENCODING',\n      // speed: [5, 5],\n      // quantization: {\n      //   POSITION: 10\n      // }\n    }\n  }\n};\n\nasync function encode(data, options) {\n  // DEPRECATED - remove support for options\n  const dracoOptions = (options && options.draco) || options || {};\n\n  // Dynamically load draco\n  const {draco} = await loadDracoEncoderModule(options || {});\n  const dracoBuilder = new DRACOBuilder(draco);\n\n  try {\n    return dracoBuilder.encodeSync(data, dracoOptions);\n  } finally {\n    dracoBuilder.destroy();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}