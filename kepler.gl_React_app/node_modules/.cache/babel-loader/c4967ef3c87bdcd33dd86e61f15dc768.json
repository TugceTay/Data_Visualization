{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport assert from './assert';\nimport { LinearInterpolator } from './transition';\nimport MapState from './map-state';\nvar noop = function noop() {};\nexport function cropEasingFunction(easing, x0) {\n  var y0 = easing(x0);\n  return function (t) {\n    return 1 / (1 - y0) * (easing(t * (1 - x0) + x0) - y0);\n  };\n}\nexport var TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3,\n  UPDATE: 4\n};\nvar DEFAULT_PROPS = {\n  transitionDuration: 0,\n  transitionEasing: function transitionEasing(t) {\n    return t;\n  },\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop\n};\nvar TransitionManager = function () {\n  function TransitionManager() {\n    var _this = this;\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, TransitionManager);\n    _defineProperty(this, \"_animationFrame\", null);\n    _defineProperty(this, \"_onTransitionFrame\", function () {\n      _this._animationFrame = requestAnimationFrame(_this._onTransitionFrame);\n      _this._updateViewport();\n    });\n    this.props = null;\n    this.onViewportChange = opts.onViewportChange || noop;\n    this.onStateChange = opts.onStateChange || noop;\n    this.time = opts.getTime || Date.now;\n  }\n  _createClass(TransitionManager, [{\n    key: \"getViewportInTransition\",\n    value: function getViewportInTransition() {\n      return this._animationFrame ? this.state.propsInTransition : null;\n    }\n  }, {\n    key: \"processViewportChange\",\n    value: function processViewportChange(nextProps) {\n      var currentProps = this.props;\n      this.props = nextProps;\n      if (!currentProps || this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n        return false;\n      }\n      if (this._isTransitionEnabled(nextProps)) {\n        var startProps = Object.assign({}, currentProps);\n        var endProps = Object.assign({}, nextProps);\n        if (this._isTransitionInProgress()) {\n          currentProps.onTransitionInterrupt();\n          if (this.state.interruption === TRANSITION_EVENTS.SNAP_TO_END) {\n            Object.assign(startProps, this.state.endProps);\n          } else {\n            Object.assign(startProps, this.state.propsInTransition);\n          }\n          if (this.state.interruption === TRANSITION_EVENTS.UPDATE) {\n            var currentTime = this.time();\n            var x0 = (currentTime - this.state.startTime) / this.state.duration;\n            endProps.transitionDuration = this.state.duration - (currentTime - this.state.startTime);\n            endProps.transitionEasing = cropEasingFunction(this.state.easing, x0);\n            endProps.transitionInterpolator = startProps.transitionInterpolator;\n          }\n        }\n        endProps.onTransitionStart();\n        this._triggerTransition(startProps, endProps);\n        return true;\n      }\n      if (this._isTransitionInProgress()) {\n        currentProps.onTransitionInterrupt();\n        this._endTransition();\n      }\n      return false;\n    }\n  }, {\n    key: \"_isTransitionInProgress\",\n    value: function _isTransitionInProgress() {\n      return Boolean(this._animationFrame);\n    }\n  }, {\n    key: \"_isTransitionEnabled\",\n    value: function _isTransitionEnabled(props) {\n      var transitionDuration = props.transitionDuration,\n        transitionInterpolator = props.transitionInterpolator;\n      return (transitionDuration > 0 || transitionDuration === 'auto') && Boolean(transitionInterpolator);\n    }\n  }, {\n    key: \"_isUpdateDueToCurrentTransition\",\n    value: function _isUpdateDueToCurrentTransition(props) {\n      if (this.state.propsInTransition) {\n        return this.state.interpolator.arePropsEqual(props, this.state.propsInTransition);\n      }\n      return false;\n    }\n  }, {\n    key: \"_shouldIgnoreViewportChange\",\n    value: function _shouldIgnoreViewportChange(currentProps, nextProps) {\n      if (!currentProps) {\n        return true;\n      }\n      if (this._isTransitionInProgress()) {\n        return this.state.interruption === TRANSITION_EVENTS.IGNORE || this._isUpdateDueToCurrentTransition(nextProps);\n      }\n      if (this._isTransitionEnabled(nextProps)) {\n        return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n      }\n      return true;\n    }\n  }, {\n    key: \"_triggerTransition\",\n    value: function _triggerTransition(startProps, endProps) {\n      assert(this._isTransitionEnabled(endProps));\n      if (this._animationFrame) {\n        cancelAnimationFrame(this._animationFrame);\n      }\n      var transitionInterpolator = endProps.transitionInterpolator;\n      var duration = transitionInterpolator.getDuration ? transitionInterpolator.getDuration(startProps, endProps) : endProps.transitionDuration;\n      if (duration === 0) {\n        return;\n      }\n      var initialProps = endProps.transitionInterpolator.initializeProps(startProps, endProps);\n      var interactionState = {\n        inTransition: true,\n        isZooming: startProps.zoom !== endProps.zoom,\n        isPanning: startProps.longitude !== endProps.longitude || startProps.latitude !== endProps.latitude,\n        isRotating: startProps.bearing !== endProps.bearing || startProps.pitch !== endProps.pitch\n      };\n      this.state = {\n        duration: duration,\n        easing: endProps.transitionEasing,\n        interpolator: endProps.transitionInterpolator,\n        interruption: endProps.transitionInterruption,\n        startTime: this.time(),\n        startProps: initialProps.start,\n        endProps: initialProps.end,\n        animation: null,\n        propsInTransition: {}\n      };\n      this._onTransitionFrame();\n      this.onStateChange(interactionState);\n    }\n  }, {\n    key: \"_endTransition\",\n    value: function _endTransition() {\n      if (this._animationFrame) {\n        cancelAnimationFrame(this._animationFrame);\n        this._animationFrame = null;\n      }\n      this.onStateChange({\n        inTransition: false,\n        isZooming: false,\n        isPanning: false,\n        isRotating: false\n      });\n    }\n  }, {\n    key: \"_updateViewport\",\n    value: function _updateViewport() {\n      var currentTime = this.time();\n      var _this$state = this.state,\n        startTime = _this$state.startTime,\n        duration = _this$state.duration,\n        easing = _this$state.easing,\n        interpolator = _this$state.interpolator,\n        startProps = _this$state.startProps,\n        endProps = _this$state.endProps;\n      var shouldEnd = false;\n      var t = (currentTime - startTime) / duration;\n      if (t >= 1) {\n        t = 1;\n        shouldEnd = true;\n      }\n      t = easing(t);\n      var viewport = interpolator.interpolateProps(startProps, endProps, t);\n      var mapState = new MapState(Object.assign({}, this.props, viewport));\n      this.state.propsInTransition = mapState.getViewportProps();\n      this.onViewportChange(this.state.propsInTransition, this.props);\n      if (shouldEnd) {\n        this._endTransition();\n        this.props.onTransitionEnd();\n      }\n    }\n  }]);\n  return TransitionManager;\n}();\n_defineProperty(TransitionManager, \"defaultProps\", DEFAULT_PROPS);\nexport { TransitionManager as default };","map":{"version":3,"sources":["../../../src/utils/transition-manager.js"],"names":["assert","LinearInterpolator","MapState","noop","cropEasingFunction","easing","x0","y0","t","TRANSITION_EVENTS","BREAK","SNAP_TO_END","IGNORE","UPDATE","DEFAULT_PROPS","transitionDuration","transitionEasing","transitionInterpolator","transitionInterruption","onTransitionStart","onTransitionInterrupt","onTransitionEnd","TransitionManager","opts","props","onViewportChange","onStateChange","time","getTime","Date","now","_animationFrame","state","propsInTransition","nextProps","currentProps","_shouldIgnoreViewportChange","_isTransitionEnabled","startProps","Object","assign","endProps","_isTransitionInProgress","interruption","currentTime","startTime","duration","_triggerTransition","_endTransition","Boolean","interpolator","arePropsEqual","_isUpdateDueToCurrentTransition","cancelAnimationFrame","getDuration","initialProps","initializeProps","interactionState","inTransition","isZooming","zoom","isPanning","longitude","latitude","isRotating","bearing","pitch","start","end","animation","_onTransitionFrame","requestAnimationFrame","_updateViewport","shouldEnd","viewport","interpolateProps","mapState","getViewportProps"],"mappings":"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","sourcesContent":["/* global requestAnimationFrame, cancelAnimationFrame */\nimport assert from './assert';\nimport {LinearInterpolator} from './transition';\nimport MapState from './map-state';\n\nconst noop = () => {};\n\n// crops the old easing function from x0 to 1 where x0 is the interruption point\n// returns a new easing function with domain [0, 1] and range [0, 1]\nexport function cropEasingFunction(easing, x0) {\n  const y0 = easing(x0);\n  return t => (1 / (1 - y0)) * (easing(t * (1 - x0) + x0) - y0);\n}\n\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3,\n  UPDATE: 4\n};\n\nconst DEFAULT_PROPS = {\n  transitionDuration: 0,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop\n};\n\nexport default class TransitionManager {\n  static defaultProps = DEFAULT_PROPS;\n\n  constructor(opts = {}) {\n    this.props = null;\n    this.onViewportChange = opts.onViewportChange || noop;\n    this.onStateChange = opts.onStateChange || noop;\n    this.time = opts.getTime || Date.now;\n  }\n\n  _animationFrame = null;\n\n  // Returns current transitioned viewport.\n  getViewportInTransition() {\n    return this._animationFrame ? this.state.propsInTransition : null;\n  }\n\n  // Process the viewport change, either ignore or trigger a new transiton.\n  // Return true if a new transition is triggered, false otherwise.\n  processViewportChange(nextProps) {\n    const currentProps = this.props;\n    // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.\n    this.props = nextProps;\n\n    // NOTE: Be cautious re-ordering statements in this function.\n    if (!currentProps || this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return false;\n    }\n\n    if (this._isTransitionEnabled(nextProps)) {\n      const startProps = Object.assign({}, currentProps);\n      const endProps = Object.assign({}, nextProps);\n\n      if (this._isTransitionInProgress()) {\n        currentProps.onTransitionInterrupt();\n\n        if (this.state.interruption === TRANSITION_EVENTS.SNAP_TO_END) {\n          Object.assign(startProps, this.state.endProps);\n        } else {\n          Object.assign(startProps, this.state.propsInTransition);\n        }\n\n        if (this.state.interruption === TRANSITION_EVENTS.UPDATE) {\n          const currentTime = this.time();\n          const x0 = (currentTime - this.state.startTime) / this.state.duration;\n          endProps.transitionDuration = this.state.duration - (currentTime - this.state.startTime);\n          endProps.transitionEasing = cropEasingFunction(this.state.easing, x0);\n          endProps.transitionInterpolator = startProps.transitionInterpolator;\n        }\n      }\n      endProps.onTransitionStart();\n\n      this._triggerTransition(startProps, endProps);\n\n      return true;\n    }\n\n    if (this._isTransitionInProgress()) {\n      currentProps.onTransitionInterrupt();\n      this._endTransition();\n    }\n\n    return false;\n  }\n\n  // Helper methods\n\n  _isTransitionInProgress() {\n    return Boolean(this._animationFrame);\n  }\n\n  _isTransitionEnabled(props) {\n    const {transitionDuration, transitionInterpolator} = props;\n    return (\n      (transitionDuration > 0 || transitionDuration === 'auto') && Boolean(transitionInterpolator)\n    );\n  }\n\n  _isUpdateDueToCurrentTransition(props) {\n    if (this.state.propsInTransition) {\n      return this.state.interpolator.arePropsEqual(props, this.state.propsInTransition);\n    }\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps, nextProps) {\n    if (!currentProps) {\n      return true;\n    }\n    if (this._isTransitionInProgress()) {\n      // Ignore update if it is requested to be ignored\n      return (\n        this.state.interruption === TRANSITION_EVENTS.IGNORE ||\n        // Ignore update if it is due to current active transition.\n        this._isUpdateDueToCurrentTransition(nextProps)\n      );\n    }\n    if (this._isTransitionEnabled(nextProps)) {\n      // Ignore if none of the viewport props changed.\n      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n    }\n\n    return true;\n  }\n\n  _triggerTransition(startProps, endProps) {\n    assert(this._isTransitionEnabled(endProps));\n\n    if (this._animationFrame) {\n      cancelAnimationFrame(this._animationFrame);\n    }\n\n    // update transitionDuration for 'auto' mode\n    const {transitionInterpolator} = endProps;\n    const duration = transitionInterpolator.getDuration\n      ? transitionInterpolator.getDuration(startProps, endProps)\n      : endProps.transitionDuration;\n\n    if (duration === 0) {\n      return;\n    }\n\n    const initialProps = endProps.transitionInterpolator.initializeProps(startProps, endProps);\n\n    const interactionState = {\n      inTransition: true,\n      isZooming: startProps.zoom !== endProps.zoom,\n      isPanning:\n        startProps.longitude !== endProps.longitude || startProps.latitude !== endProps.latitude,\n      isRotating: startProps.bearing !== endProps.bearing || startProps.pitch !== endProps.pitch\n    };\n\n    this.state = {\n      // Save current transition props\n      duration,\n      easing: endProps.transitionEasing,\n      interpolator: endProps.transitionInterpolator,\n      interruption: endProps.transitionInterruption,\n\n      startTime: this.time(),\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n      animation: null,\n      propsInTransition: {}\n    };\n    this._onTransitionFrame();\n    this.onStateChange(interactionState);\n  }\n\n  _onTransitionFrame = () => {\n    // _updateViewport() may cancel the animation\n    this._animationFrame = requestAnimationFrame(this._onTransitionFrame);\n    this._updateViewport();\n  };\n\n  _endTransition() {\n    if (this._animationFrame) {\n      cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = null;\n    }\n    this.onStateChange({\n      inTransition: false,\n      isZooming: false,\n      isPanning: false,\n      isRotating: false\n    });\n  }\n\n  _updateViewport() {\n    // NOTE: Be cautious re-ordering statements in this function.\n    const currentTime = this.time();\n    const {startTime, duration, easing, interpolator, startProps, endProps} = this.state;\n    let shouldEnd = false;\n    let t = (currentTime - startTime) / duration;\n    if (t >= 1) {\n      t = 1;\n      shouldEnd = true;\n    }\n    t = easing(t);\n\n    const viewport = interpolator.interpolateProps(startProps, endProps, t);\n    // Normalize viewport props\n    const mapState = new MapState(Object.assign({}, this.props, viewport));\n    this.state.propsInTransition = mapState.getViewportProps();\n\n    this.onViewportChange(this.state.propsInTransition, this.props);\n\n    if (shouldEnd) {\n      this._endTransition();\n      this.props.onTransitionEnd();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}