{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseGeoJsonRawFeature = parseGeoJsonRawFeature;\nexports.getGeojsonDataMaps = getGeojsonDataMaps;\nexports.parseGeometryFromString = parseGeometryFromString;\nexports.getGeojsonBounds = getGeojsonBounds;\nexports.getGeojsonFeatureTypes = getGeojsonFeatureTypes;\nexports.featureToDeckGlGeoType = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _wellknown = _interopRequireDefault(require(\"wellknown\"));\nvar _geojsonNormalize = _interopRequireDefault(require(\"@mapbox/geojson-normalize\"));\nvar _bbox = _interopRequireDefault(require(\"@turf/bbox\"));\nvar _dataUtils = require(\"../../utils/data-utils\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction parseGeoJsonRawFeature(rawFeature) {\n  if ((0, _typeof2[\"default\"])(rawFeature) === 'object') {\n    // Support GeoJson feature as object\n    // probably need to normalize it as well\n    var normalized = (0, _geojsonNormalize[\"default\"])(rawFeature);\n    if (!normalized || !Array.isArray(normalized.features)) {\n      // fail to normalize GeoJson\n      return null;\n    }\n    return normalized.features[0];\n  } else if (typeof rawFeature === 'string') {\n    return parseGeometryFromString(rawFeature);\n  } else if (Array.isArray(rawFeature)) {\n    // Support GeoJson  LineString as an array of points\n    return {\n      type: 'Feature',\n      geometry: {\n        // why do we need to flip it...\n        coordinates: rawFeature.map(function (pts) {\n          return [pts[1], pts[0]];\n        }),\n        type: 'LineString'\n      }\n    };\n  }\n  return null;\n}\n/**\n * Parse raw data to GeoJson feature\n * @param dataContainer\n * @param getFeature\n * @returns {{}}\n */\n\nfunction getGeojsonDataMaps(dataContainer, getFeature) {\n  var acceptableTypes = ['Point', 'MultiPoint', 'LineString', 'MultiLineString', 'Polygon', 'MultiPolygon', 'GeometryCollection'];\n  var dataToFeature = [];\n  for (var index = 0; index < dataContainer.numRows(); index++) {\n    var feature = parseGeoJsonRawFeature(getFeature({\n      index: index\n    }));\n    if (feature && feature.geometry && acceptableTypes.includes(feature.geometry.type)) {\n      var cleaned = _objectSpread(_objectSpread({}, feature), {}, {\n        // store index of the data in feature properties\n        properties: _objectSpread(_objectSpread({}, feature.properties), {}, {\n          index: index\n        })\n      });\n      dataToFeature[index] = cleaned;\n    } else {\n      dataToFeature[index] = null;\n    }\n  }\n  return dataToFeature;\n}\n/**\n * Parse geojson from string\n * @param {String} geoString\n * @returns {null | Object} geojson object or null if failed\n */\n\nfunction parseGeometryFromString(geoString) {\n  var parsedGeo; // try parse as geojson string\n  // {\"type\":\"Polygon\",\"coordinates\":[[[-74.158491,40.83594]]]}\n\n  try {\n    parsedGeo = JSON.parse(geoString);\n  } catch (e) {// keep trying to parse\n  } // try parse as wkt\n\n  if (!parsedGeo) {\n    try {\n      parsedGeo = (0, _wellknown[\"default\"])(geoString);\n    } catch (e) {\n      return null;\n    }\n  }\n  if (!parsedGeo) {\n    return null;\n  }\n  var normalized = (0, _geojsonNormalize[\"default\"])(parsedGeo);\n  if (!normalized || !Array.isArray(normalized.features)) {\n    // fail to normalize geojson\n    return null;\n  }\n  return normalized.features[0];\n}\nfunction getGeojsonBounds() {\n  var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  // 70 ms for 10,000 polygons\n  // here we only pick couple\n  var maxCount = 10000;\n  var samples = features.length > maxCount ? (0, _dataUtils.getSampleData)(features, maxCount) : features;\n  var nonEmpty = samples.filter(function (d) {\n    return d && d.geometry && d.geometry.coordinates && d.geometry.coordinates.length;\n  });\n  try {\n    return (0, _bbox[\"default\"])({\n      type: 'FeatureCollection',\n      features: nonEmpty\n    });\n  } catch (e) {\n    return null;\n  }\n}\nvar featureToDeckGlGeoType = {\n  Point: 'point',\n  MultiPoint: 'point',\n  LineString: 'line',\n  MultiLineString: 'line',\n  Polygon: 'polygon',\n  MultiPolygon: 'polygon'\n};\n/**\n * Parse geojson from string\n * @param {Array<Object>} allFeatures\n * @returns {Object} mapping of feature type existence\n */\n\nexports.featureToDeckGlGeoType = featureToDeckGlGeoType;\nfunction getGeojsonFeatureTypes(allFeatures) {\n  var featureTypes = {};\n  for (var f = 0; f < allFeatures.length; f++) {\n    var feature = allFeatures[f];\n    var geoType = featureToDeckGlGeoType[feature && feature.geometry && feature.geometry.type];\n    if (geoType) {\n      featureTypes[geoType] = true;\n    }\n  }\n  return featureTypes;\n}","map":{"version":3,"sources":["../../../src/layers/geojson-layer/geojson-utils.js"],"names":["parseGeoJsonRawFeature","rawFeature","normalized","Array","isArray","features","parseGeometryFromString","type","geometry","coordinates","map","pts","getGeojsonDataMaps","dataContainer","getFeature","acceptableTypes","dataToFeature","index","numRows","feature","includes","cleaned","properties","geoString","parsedGeo","JSON","parse","e","getGeojsonBounds","maxCount","samples","length","nonEmpty","filter","d","featureToDeckGlGeoType","Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","getGeojsonFeatureTypes","allFeatures","featureTypes","f","geoType"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport wktParser from 'wellknown';\nimport normalize from '@mapbox/geojson-normalize';\nimport bbox from '@turf/bbox';\n\nimport {getSampleData} from 'utils/data-utils';\n\nexport function parseGeoJsonRawFeature(rawFeature) {\n  if (typeof rawFeature === 'object') {\n    // Support GeoJson feature as object\n    // probably need to normalize it as well\n    const normalized = normalize(rawFeature);\n    if (!normalized || !Array.isArray(normalized.features)) {\n      // fail to normalize GeoJson\n      return null;\n    }\n\n    return normalized.features[0];\n  } else if (typeof rawFeature === 'string') {\n    return parseGeometryFromString(rawFeature);\n  } else if (Array.isArray(rawFeature)) {\n    // Support GeoJson  LineString as an array of points\n    return {\n      type: 'Feature',\n      geometry: {\n        // why do we need to flip it...\n        coordinates: rawFeature.map(pts => [pts[1], pts[0]]),\n        type: 'LineString'\n      }\n    };\n  }\n\n  return null;\n}\n/**\n * Parse raw data to GeoJson feature\n * @param dataContainer\n * @param getFeature\n * @returns {{}}\n */\nexport function getGeojsonDataMaps(dataContainer, getFeature) {\n  const acceptableTypes = [\n    'Point',\n    'MultiPoint',\n    'LineString',\n    'MultiLineString',\n    'Polygon',\n    'MultiPolygon',\n    'GeometryCollection'\n  ];\n\n  const dataToFeature = [];\n\n  for (let index = 0; index < dataContainer.numRows(); index++) {\n    const feature = parseGeoJsonRawFeature(getFeature({index}));\n\n    if (feature && feature.geometry && acceptableTypes.includes(feature.geometry.type)) {\n      const cleaned = {\n        ...feature,\n        // store index of the data in feature properties\n        properties: {\n          ...feature.properties,\n          index\n        }\n      };\n\n      dataToFeature[index] = cleaned;\n    } else {\n      dataToFeature[index] = null;\n    }\n  }\n\n  return dataToFeature;\n}\n\n/**\n * Parse geojson from string\n * @param {String} geoString\n * @returns {null | Object} geojson object or null if failed\n */\nexport function parseGeometryFromString(geoString) {\n  let parsedGeo;\n\n  // try parse as geojson string\n  // {\"type\":\"Polygon\",\"coordinates\":[[[-74.158491,40.83594]]]}\n  try {\n    parsedGeo = JSON.parse(geoString);\n  } catch (e) {\n    // keep trying to parse\n  }\n\n  // try parse as wkt\n  if (!parsedGeo) {\n    try {\n      parsedGeo = wktParser(geoString);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  if (!parsedGeo) {\n    return null;\n  }\n\n  const normalized = normalize(parsedGeo);\n\n  if (!normalized || !Array.isArray(normalized.features)) {\n    // fail to normalize geojson\n    return null;\n  }\n\n  return normalized.features[0];\n}\n\nexport function getGeojsonBounds(features = []) {\n  // 70 ms for 10,000 polygons\n  // here we only pick couple\n  const maxCount = 10000;\n  const samples = features.length > maxCount ? getSampleData(features, maxCount) : features;\n\n  const nonEmpty = samples.filter(\n    d => d && d.geometry && d.geometry.coordinates && d.geometry.coordinates.length\n  );\n\n  try {\n    return bbox({\n      type: 'FeatureCollection',\n      features: nonEmpty\n    });\n  } catch (e) {\n    return null;\n  }\n}\n\nexport const featureToDeckGlGeoType = {\n  Point: 'point',\n  MultiPoint: 'point',\n  LineString: 'line',\n  MultiLineString: 'line',\n  Polygon: 'polygon',\n  MultiPolygon: 'polygon'\n};\n\n/**\n * Parse geojson from string\n * @param {Array<Object>} allFeatures\n * @returns {Object} mapping of feature type existence\n */\nexport function getGeojsonFeatureTypes(allFeatures) {\n  const featureTypes = {};\n  for (let f = 0; f < allFeatures.length; f++) {\n    const feature = allFeatures[f];\n    const geoType = featureToDeckGlGeoType[feature && feature.geometry && feature.geometry.type];\n    if (geoType) {\n      featureTypes[geoType] = true;\n    }\n  }\n\n  return featureTypes;\n}\n"]},"metadata":{},"sourceType":"script"}