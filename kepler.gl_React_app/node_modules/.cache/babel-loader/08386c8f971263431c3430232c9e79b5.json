{"ast":null,"code":"import { Matrix4 } from '@math.gl/core';\nconst IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\nconst DEFAULT_MODULE_OPTIONS = {\n  modelMatrix: IDENTITY_MATRIX,\n  viewMatrix: IDENTITY_MATRIX,\n  projectionMatrix: IDENTITY_MATRIX,\n  cameraPositionWorld: [0, 0, 0]\n};\nfunction getUniforms() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MODULE_OPTIONS;\n  let prevUniforms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const uniforms = {};\n  if (opts.modelMatrix !== undefined) {\n    uniforms.modelMatrix = opts.modelMatrix;\n  }\n  if (opts.viewMatrix !== undefined) {\n    uniforms.viewMatrix = opts.viewMatrix;\n  }\n  if (opts.projectionMatrix !== undefined) {\n    uniforms.projectionMatrix = opts.projectionMatrix;\n  }\n  if (opts.cameraPositionWorld !== undefined) {\n    uniforms.cameraPositionWorld = opts.cameraPositionWorld;\n  }\n  if (opts.projectionMatrix !== undefined || opts.viewMatrix !== undefined) {\n    uniforms.viewProjectionMatrix = new Matrix4(opts.projectionMatrix).multiplyRight(opts.viewMatrix);\n  }\n  return uniforms;\n}\nconst common = \"varying vec4 project_vPositionWorld;\\nvarying vec3 project_vNormalWorld;\\n\\nvec4 project_getPosition_World() {\\n  return project_vPositionWorld;\\n}\\n\\nvec3 project_getNormal_World() {\\n  return project_vNormalWorld;\\n}\\n\";\nconst vs = \"\".concat(common, \"\\nuniform mat4 modelMatrix;\\nuniform mat4 viewMatrix;\\nuniform mat4 projectionMatrix;\\nuniform mat4 viewProjectionMatrix;\\nuniform vec3 cameraPositionWorld;\\n\\nstruct World {\\n  vec3 position;\\n  vec3 normal;\\n};\\n\\nWorld world;\\n\\nvoid project_setPosition(vec4 position) {\\n  project_vPositionWorld = position;\\n}\\n\\nvoid project_setNormal(vec3 normal) {\\n  project_vNormalWorld = normal;\\n}\\n\\nvoid project_setPositionAndNormal_World(vec3 position, vec3 normal) {\\n  world.position = position;\\n  world.normal = normal;\\n}\\n\\nvoid project_setPositionAndNormal_Model(vec3 position, vec3 normal) {\\n  world.position = (modelMatrix * vec4(position, 1.)).xyz;\\n  world.normal = mat3(modelMatrix) * normal;\\n}\\n\\nvec4 project_model_to_clipspace(vec4 position) {\\n  return viewProjectionMatrix * modelMatrix * position;\\n}\\n\\nvec4 project_model_to_clipspace(vec3 position) {\\n  return viewProjectionMatrix * modelMatrix * vec4(position, 1.);\\n}\\n\\nvec4 project_world_to_clipspace(vec3 position) {\\n  return viewProjectionMatrix * vec4(position, 1.);\\n}\\n\\nvec4 project_view_to_clipspace(vec3 position) {\\n  return projectionMatrix * vec4(position, 1.);\\n}\\n\\nvec4 project_to_clipspace(vec3 position) {\\n  return viewProjectionMatrix * vec4(position, 1.);\\n}\\n\");\nconst fs = \"\\n\".concat(common);\nexport const project = {\n  name: 'project',\n  getUniforms,\n  vs,\n  fs\n};","map":{"version":3,"sources":["../../../../src/modules/project/project.js"],"names":["Matrix4","IDENTITY_MATRIX","DEFAULT_MODULE_OPTIONS","modelMatrix","viewMatrix","projectionMatrix","cameraPositionWorld","getUniforms","opts","prevUniforms","uniforms","undefined","viewProjectionMatrix","multiplyRight","common","vs","fs","project","name"],"mappings":"AAEA,SAAQA,OAAR,QAAsB,eAAtB;AAEA,MAAMC,eAAe,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,CAA9C,CAAxB;AAEA,MAAMC,sBAAsB,GAAG;EAC7BC,WAAW,EAAEF,eADgB;EAE7BG,UAAU,EAAEH,eAFiB;EAG7BI,gBAAgB,EAAEJ,eAHW;EAI7BK,mBAAmB,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAJQ,CAA/B;AAOA,SAASC,WAAT,GAAuE;EAAA,IAAlDC,IAAkD,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAA3CN,sBAA2C;EAAA,IAAnBO,YAAmB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,CAAA,CAAI;EAKrE,MAAMC,QAAQ,GAAG,CAAA,CAAjB;EACA,IAAIF,IAAI,CAACL,WAALK,KAAqBG,SAAzB,EAAoC;IAClCD,QAAQ,CAACP,WAATO,GAAuBF,IAAI,CAACL,WAA5BO;EACD;EACD,IAAIF,IAAI,CAACJ,UAALI,KAAoBG,SAAxB,EAAmC;IACjCD,QAAQ,CAACN,UAATM,GAAsBF,IAAI,CAACJ,UAA3BM;EACD;EACD,IAAIF,IAAI,CAACH,gBAALG,KAA0BG,SAA9B,EAAyC;IACvCD,QAAQ,CAACL,gBAATK,GAA4BF,IAAI,CAACH,gBAAjCK;EACD;EACD,IAAIF,IAAI,CAACF,mBAALE,KAA6BG,SAAjC,EAA4C;IAC1CD,QAAQ,CAACJ,mBAATI,GAA+BF,IAAI,CAACF,mBAApCI;EACD;EAGD,IAAIF,IAAI,CAACH,gBAALG,KAA0BG,SAA1BH,IAAuCA,IAAI,CAACJ,UAALI,KAAoBG,SAA/D,EAA0E;IACxED,QAAQ,CAACE,oBAATF,GAAgC,IAAIV,OAAJ,CAAYQ,IAAI,CAACH,gBAAjB,CAAA,CAAmCQ,aAAnC,CAC9BL,IAAI,CAACJ,UADyB,CAAhCM;EAGD;EAED,OAAOA,QAAP;AACD;AAED,MAAMI,MAAM,GAAA,8NAAZ;AAaA,MAAMC,EAAE,GAAA,EAAA,CAAA,MAAA,CACND,MADM,EAAA,yuCAAA,CAAR;AAwDA,MAAME,EAAE,GAAA,IAAA,CAAA,MAAA,CACNF,MADM,CAAR;AAKA,OAAO,MAAMG,OAAO,GAAG;EACrBC,IAAI,EAAE,SADe;EAErBX,WAFqB;EAGrBQ,EAHqB;EAIrBC;AAJqB,CAAhB","sourcesContent":["/** @typedef {import('../../types').ShaderModule} ShaderModule */\n\nimport {Matrix4} from '@math.gl/core';\n\nconst IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\nconst DEFAULT_MODULE_OPTIONS = {\n  modelMatrix: IDENTITY_MATRIX,\n  viewMatrix: IDENTITY_MATRIX,\n  projectionMatrix: IDENTITY_MATRIX,\n  cameraPositionWorld: [0, 0, 0]\n};\n\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS, prevUniforms = {}) {\n  // const viewProjectionInverse = viewProjection.invert();\n  // viewInverseMatrix: view.invert(),\n  // viewProjectionInverseMatrix: viewProjectionInverse\n\n  const uniforms = {};\n  if (opts.modelMatrix !== undefined) {\n    uniforms.modelMatrix = opts.modelMatrix;\n  }\n  if (opts.viewMatrix !== undefined) {\n    uniforms.viewMatrix = opts.viewMatrix;\n  }\n  if (opts.projectionMatrix !== undefined) {\n    uniforms.projectionMatrix = opts.projectionMatrix;\n  }\n  if (opts.cameraPositionWorld !== undefined) {\n    uniforms.cameraPositionWorld = opts.cameraPositionWorld;\n  }\n\n  // COMPOSITE UNIFORMS\n  if (opts.projectionMatrix !== undefined || opts.viewMatrix !== undefined) {\n    uniforms.viewProjectionMatrix = new Matrix4(opts.projectionMatrix).multiplyRight(\n      opts.viewMatrix\n    );\n  }\n\n  return uniforms;\n}\n\nconst common = `\\\nvarying vec4 project_vPositionWorld;\nvarying vec3 project_vNormalWorld;\n\nvec4 project_getPosition_World() {\n  return project_vPositionWorld;\n}\n\nvec3 project_getNormal_World() {\n  return project_vNormalWorld;\n}\n`;\n\nconst vs = `\\\n${common}\n\n// Unprefixed uniforms\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewProjectionMatrix;\nuniform vec3 cameraPositionWorld;\n\nstruct World {\n  vec3 position;\n  vec3 normal;\n};\n\nWorld world;\n\nvoid project_setPosition(vec4 position) {\n  project_vPositionWorld = position;\n}\n\nvoid project_setNormal(vec3 normal) {\n  project_vNormalWorld = normal;\n}\n\nvoid project_setPositionAndNormal_World(vec3 position, vec3 normal) {\n  world.position = position;\n  world.normal = normal;\n}\n\nvoid project_setPositionAndNormal_Model(vec3 position, vec3 normal) {\n  world.position = (modelMatrix * vec4(position, 1.)).xyz;\n  world.normal = mat3(modelMatrix) * normal;\n}\n\nvec4 project_model_to_clipspace(vec4 position) {\n  return viewProjectionMatrix * modelMatrix * position;\n}\n\nvec4 project_model_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * modelMatrix * vec4(position, 1.);\n}\n\nvec4 project_world_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_view_to_clipspace(vec3 position) {\n  return projectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n`;\n\nconst fs = `\n${common}\\\n`;\n\n/** @type {ShaderModule} */\nexport const project = {\n  name: 'project',\n  getUniforms,\n  vs,\n  fs\n};\n"]},"metadata":{},"sourceType":"module"}