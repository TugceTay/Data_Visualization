{"ast":null,"code":"import { assert } from '@loaders.gl/loader-utils';\nvar DEFAULT_OPTIONS = {\n  dataType: 'arraybuffer',\n  nothrow: true\n};\nvar isDataURL = function isDataURL(url) {\n  return url.startsWith('data:');\n};\nexport function readFileSyncBrowser(uri, options) {\n  options = getReadFileOptions(options);\n  if (isDataURL(uri)) {}\n  if (!options.nothrow) {\n    assert(false);\n  }\n  return null;\n}\nfunction getReadFileOptions() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  options = Object.assign({}, DEFAULT_OPTIONS, options);\n  options.responseType = options.responseType || options.dataType;\n  return options;\n}","map":{"version":3,"sources":["../../../../src/lib/fetch/read-file.browser.js"],"names":["assert","DEFAULT_OPTIONS","dataType","nothrow","isDataURL","url","startsWith","readFileSyncBrowser","uri","options","getReadFileOptions","Object","assign","responseType"],"mappings":"AACA,SAAQA,MAAR,QAAqB,0BAArB;AAEA,IAAMC,eAAe,GAAG;EACtBC,QAAQ,EAAE,aADY;EAGtBC,OAAO,EAAE;AAHa,CAAxB;AAMA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAA,GAAG,EAAA;EAAA,OAAIC,GAAG,CAACC,UAAJD,CAAe,OAAfA,CAAJ;AAAA,CAArB;AAGA,OAAO,SAASE,mBAAT,CAA6BC,GAA7B,EAAkCC,OAAlC,EAA2C;EAChDA,OAAO,GAAGC,kBAAkB,CAACD,OAAD,CAA5BA;EAEA,IAAIL,SAAS,CAACI,GAAD,CAAb,EAAoB,CAGnB;EAED,IAAI,CAACC,OAAO,CAACN,OAAb,EAAsB;IAEpBH,MAAM,CAAC,KAAD,CAANA;EACD;EAED,OAAO,IAAP;AACD;AAID,SAASU,kBAAT,GAA0C;EAAA,IAAdD,OAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,CAAA,CAAI;EACxCA,OAAO,GAAGE,MAAM,CAACC,MAAPD,CAAc,CAAA,CAAdA,EAAkBV,eAAlBU,EAAmCF,OAAnCE,CAAVF;EACAA,OAAO,CAACI,YAARJ,GAAuBA,OAAO,CAACI,YAARJ,IAAwBA,OAAO,CAACP,QAAvDO;EACA,OAAOA,OAAP;AACD","sourcesContent":["// TODO - this file is not tested\nimport {assert} from '@loaders.gl/loader-utils';\n\nconst DEFAULT_OPTIONS = {\n  dataType: 'arraybuffer',\n  // TODO - this was mostly set to true to make test cases work\n  nothrow: true\n};\n\nconst isDataURL = url => url.startsWith('data:');\n\n// In a few cases (data URIs, files under Node) \"files\" can be read synchronously\nexport function readFileSyncBrowser(uri, options) {\n  options = getReadFileOptions(options);\n\n  if (isDataURL(uri)) {\n    // TODO - removed until decodeDataUri does not depend on Node.js Buffer\n    //   return decodeDataUri(uri);\n  }\n\n  if (!options.nothrow) {\n    // throw new Error('Cant load URI synchronously');\n    assert(false);\n  }\n\n  return null;\n}\n\n// HELPER FUNCTIONS\n\nfunction getReadFileOptions(options = {}) {\n  options = Object.assign({}, DEFAULT_OPTIONS, options);\n  options.responseType = options.responseType || options.dataType;\n  return options;\n}\n"]},"metadata":{},"sourceType":"module"}