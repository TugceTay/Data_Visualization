{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport ClarinetParser from '../clarinet/clarinet';\nimport JSONPath from '../jsonpath/jsonpath';\nvar JSONParser = function () {\n  function JSONParser() {\n    _classCallCheck(this, JSONParser);\n    this.reset();\n    this._initializeParser();\n  }\n  _createClass(JSONParser, [{\n    key: \"reset\",\n    value: function reset() {\n      this.result = undefined;\n      this.previousStates = [];\n      this.currentState = Object.freeze({\n        container: [],\n        key: null\n      });\n      this.jsonpath = new JSONPath();\n    }\n  }, {\n    key: \"write\",\n    value: function write(chunk) {\n      this.parser.write(chunk);\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.parser.close();\n    }\n  }, {\n    key: \"_pushOrSet\",\n    value: function _pushOrSet(value) {\n      var _this$currentState = this.currentState,\n        container = _this$currentState.container,\n        key = _this$currentState.key;\n      if (key !== null) {\n        container[key] = value;\n        this.currentState.key = null;\n      } else {\n        container.push(value);\n      }\n    }\n  }, {\n    key: \"_openArray\",\n    value: function _openArray() {\n      var newContainer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      this.jsonpath.push(null);\n      this._pushOrSet(newContainer);\n      this.previousStates.push(this.currentState);\n      this.currentState = {\n        container: newContainer,\n        isArray: true,\n        key: null\n      };\n    }\n  }, {\n    key: \"_closeArray\",\n    value: function _closeArray() {\n      this.jsonpath.pop();\n      this.currentState = this.previousStates.pop();\n    }\n  }, {\n    key: \"_openObject\",\n    value: function _openObject() {\n      var newContainer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.jsonpath.push(null);\n      this._pushOrSet(newContainer);\n      this.previousStates.push(this.currentState);\n      this.currentState = {\n        container: newContainer,\n        isArray: false,\n        key: null\n      };\n    }\n  }, {\n    key: \"_closeObject\",\n    value: function _closeObject() {\n      this.jsonpath.pop();\n      this.currentState = this.previousStates.pop();\n    }\n  }, {\n    key: \"_initializeParser\",\n    value: function _initializeParser() {\n      var _this = this;\n      this.parser = new ClarinetParser({\n        onready: function onready() {\n          _this.jsonpath = new JSONPath();\n          _this.previousStates.length = 0;\n          _this.currentState.container.length = 0;\n        },\n        onopenobject: function onopenobject(name) {\n          _this._openObject({});\n          if (typeof name !== 'undefined') {\n            _this.parser.onkey(name);\n          }\n        },\n        onkey: function onkey(name) {\n          _this.jsonpath.set(name);\n          _this.currentState.key = name;\n        },\n        oncloseobject: function oncloseobject() {\n          _this._closeObject();\n        },\n        onopenarray: function onopenarray() {\n          _this._openArray();\n        },\n        onclosearray: function onclosearray() {\n          _this._closeArray();\n        },\n        onvalue: function onvalue(value) {\n          _this._pushOrSet(value);\n        },\n        onerror: function onerror(error) {\n          throw error;\n        },\n        onend: function onend() {\n          _this.result = _this.currentState.container.pop();\n        }\n      });\n    }\n  }]);\n  return JSONParser;\n}();\nexport { JSONParser as default };","map":{"version":3,"sources":["../../../../src/lib/parser/json-parser.js"],"names":["ClarinetParser","JSONPath","JSONParser","reset","_initializeParser","result","undefined","previousStates","currentState","freeze","container","key","jsonpath","chunk","parser","write","close","value","push","newContainer","_pushOrSet","isArray","pop","onready","length","onopenobject","_openObject","name","onkey","set","oncloseobject","_closeObject","onopenarray","_openArray","onclosearray","_closeArray","onvalue","onerror","error","onend"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\nimport ClarinetParser from '../clarinet/clarinet';\nimport JSONPath from '../jsonpath/jsonpath';\n\n// JSONParser builds a JSON object using the events emitted by the Clarinet parser\n\nexport default class JSONParser {\n  constructor() {\n    this.reset();\n    this._initializeParser();\n  }\n\n  reset() {\n    this.result = undefined;\n    this.previousStates = [];\n    this.currentState = Object.freeze({container: [], key: null});\n    this.jsonpath = new JSONPath();\n  }\n\n  write(chunk) {\n    this.parser.write(chunk);\n  }\n\n  close() {\n    this.parser.close();\n  }\n\n  // PRIVATE METHODS\n\n  _pushOrSet(value) {\n    const {container, key} = this.currentState;\n    if (key !== null) {\n      container[key] = value;\n      this.currentState.key = null;\n    } else {\n      container.push(value);\n    }\n  }\n\n  _openArray(newContainer = []) {\n    this.jsonpath.push(null);\n    this._pushOrSet(newContainer);\n    this.previousStates.push(this.currentState);\n    this.currentState = {container: newContainer, isArray: true, key: null};\n  }\n\n  _closeArray() {\n    this.jsonpath.pop();\n    this.currentState = this.previousStates.pop();\n  }\n\n  _openObject(newContainer = {}) {\n    this.jsonpath.push(null);\n    this._pushOrSet(newContainer);\n    this.previousStates.push(this.currentState);\n    this.currentState = {container: newContainer, isArray: false, key: null};\n  }\n\n  _closeObject() {\n    this.jsonpath.pop();\n    this.currentState = this.previousStates.pop();\n  }\n\n  _initializeParser() {\n    this.parser = new ClarinetParser({\n      onready: () => {\n        this.jsonpath = new JSONPath();\n        this.previousStates.length = 0;\n        this.currentState.container.length = 0;\n      },\n\n      onopenobject: name => {\n        this._openObject({});\n        if (typeof name !== 'undefined') {\n          this.parser.onkey(name);\n        }\n      },\n\n      onkey: name => {\n        this.jsonpath.set(name);\n        this.currentState.key = name;\n      },\n\n      oncloseobject: () => {\n        this._closeObject();\n      },\n\n      onopenarray: () => {\n        this._openArray();\n      },\n\n      onclosearray: () => {\n        this._closeArray();\n      },\n\n      onvalue: value => {\n        this._pushOrSet(value);\n      },\n\n      onerror: error => {\n        throw error;\n      },\n\n      onend: () => {\n        this.result = this.currentState.container.pop();\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}