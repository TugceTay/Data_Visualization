{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport { getFetchFunction } from './option-utils';\nexport function getLoaderContext(context, options) {\n  var previousContext = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  if (previousContext) {\n    return previousContext;\n  }\n  context = _objectSpread({\n    fetch: getFetchFunction(options || {}, context)\n  }, context);\n  if (!Array.isArray(context.loaders)) {\n    context.loaders = null;\n  }\n  return context;\n}\nexport function getLoaders(loaders, context) {\n  if (!context && loaders && !Array.isArray(loaders)) {\n    return loaders;\n  }\n  var candidateLoaders;\n  if (loaders) {\n    candidateLoaders = Array.isArray(loaders) ? loaders : [loaders];\n  }\n  if (context && context.loaders) {\n    var contextLoaders = Array.isArray(context.loaders) ? context.loaders : [context.loaders];\n    candidateLoaders = candidateLoaders ? [].concat(_toConsumableArray(candidateLoaders), _toConsumableArray(contextLoaders)) : contextLoaders;\n  }\n  return candidateLoaders && candidateLoaders.length ? candidateLoaders : null;\n}","map":{"version":3,"sources":["../../../../src/lib/loader-utils/context-utils.js"],"names":["getFetchFunction","getLoaderContext","context","options","previousContext","fetch","Array","isArray","loaders","getLoaders","candidateLoaders","contextLoaders","length"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAQA,gBAAR,QAA+B,gBAA/B;AAEA,OAAO,SAASC,gBAAT,CAA0BC,OAA1B,EAAmCC,OAAnC,EAAoE;EAAA,IAAxBC,eAAwB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAN,IAAM;EAGzE,IAAIA,eAAJ,EAAqB;IACnB,OAAOA,eAAP;EACD;EAEDF,OAAO,GAAA,aAAA,CAAA;IACLG,KAAK,EAAEL,gBAAgB,CAACG,OAAO,IAAI,CAAA,CAAZ,EAAgBD,OAAhB;EADlB,CAAA,EAEFA,OAFE,CAAPA;EAMA,IAAI,CAACI,KAAK,CAACC,OAAND,CAAcJ,OAAO,CAACM,OAAtBF,CAAL,EAAqC;IACnCJ,OAAO,CAACM,OAARN,GAAkB,IAAlBA;EACD;EAED,OAAOA,OAAP;AACD;AAGD,OAAO,SAASO,UAAT,CAAoBD,OAApB,EAA6BN,OAA7B,EAAsC;EAE3C,IAAI,CAACA,OAAD,IAAYM,OAAZ,IAAuB,CAACF,KAAK,CAACC,OAAND,CAAcE,OAAdF,CAA5B,EAAoD;IAClD,OAAOE,OAAP;EACD;EAGD,IAAIE,gBAAJ;EACA,IAAIF,OAAJ,EAAa;IACXE,gBAAgB,GAAGJ,KAAK,CAACC,OAAND,CAAcE,OAAdF,CAAAA,GAAyBE,OAAzBF,GAAmC,CAACE,OAAD,CAAtDE;EACD;EACD,IAAIR,OAAO,IAAIA,OAAO,CAACM,OAAvB,EAAgC;IAC9B,IAAMG,cAAc,GAAGL,KAAK,CAACC,OAAND,CAAcJ,OAAO,CAACM,OAAtBF,CAAAA,GAAiCJ,OAAO,CAACM,OAAzCF,GAAmD,CAACJ,OAAO,CAACM,OAAT,CAA1E;IACAE,gBAAgB,GAAGA,gBAAgB,GAAA,EAAA,CAAA,MAAA,CAAA,kBAAA,CAAOA,gBAAP,CAAA,EAAA,kBAAA,CAA4BC,cAA5B,CAAA,CAAA,GAA8CA,cAAjFD;EACD;EAED,OAAOA,gBAAgB,IAAIA,gBAAgB,CAACE,MAArCF,GAA8CA,gBAA9CA,GAAiE,IAAxE;AACD","sourcesContent":["import {getFetchFunction} from './option-utils';\n\nexport function getLoaderContext(context, options, previousContext = null) {\n  // For recursive calls, we already have a context\n  // TODO - add any additional loaders to context?\n  if (previousContext) {\n    return previousContext;\n  }\n\n  context = {\n    fetch: getFetchFunction(options || {}, context),\n    ...context\n  };\n\n  // Recursive loading does not use single loader\n  if (!Array.isArray(context.loaders)) {\n    context.loaders = null;\n  }\n\n  return context;\n}\n\n// eslint-disable-next-line complexity\nexport function getLoaders(loaders, context) {\n  // A single non-array loader is force selected, but only on top-level (context === null)\n  if (!context && loaders && !Array.isArray(loaders)) {\n    return loaders;\n  }\n\n  // Create a merged list\n  let candidateLoaders;\n  if (loaders) {\n    candidateLoaders = Array.isArray(loaders) ? loaders : [loaders];\n  }\n  if (context && context.loaders) {\n    const contextLoaders = Array.isArray(context.loaders) ? context.loaders : [context.loaders];\n    candidateLoaders = candidateLoaders ? [...candidateLoaders, ...contextLoaders] : contextLoaders;\n  }\n  // If no loaders, return null to look in globally registered loaders\n  return candidateLoaders && candidateLoaders.length ? candidateLoaders : null;\n}\n"]},"metadata":{},"sourceType":"module"}