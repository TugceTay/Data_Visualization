{"ast":null,"code":"/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { Context } from './injectIntl';\nimport { formatMessage } from '../formatters/message';\nimport { invariantIntlContext, DEFAULT_INTL_CONFIG, createFormatters } from '../utils';\nimport * as shallowEquals_ from 'shallow-equal/objects';\nconst shallowEquals = shallowEquals_.default || shallowEquals_;\nconst defaultFormatMessage = (descriptor, values) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.error('[React Intl] Could not find required `intl` object. <IntlProvider> needs to exist in the component ancestry. Using default message as fallback.');\n  }\n  return formatMessage(Object.assign(Object.assign({}, DEFAULT_INTL_CONFIG), {\n    locale: 'en'\n  }), createFormatters(), descriptor, values);\n};\nclass FormattedMessage extends React.Component {\n  shouldComponentUpdate(nextProps) {\n    const _a = this.props,\n      {\n        values\n      } = _a,\n      otherProps = __rest(_a, [\"values\"]);\n    const {\n        values: nextValues\n      } = nextProps,\n      nextOtherProps = __rest(nextProps, [\"values\"]);\n    return !shallowEquals(nextValues, values) || !shallowEquals(otherProps, nextOtherProps);\n  }\n  render() {\n    return React.createElement(Context.Consumer, null, intl => {\n      if (!this.props.defaultMessage) {\n        invariantIntlContext(intl);\n      }\n      const {\n        formatMessage = defaultFormatMessage,\n        textComponent: Text = React.Fragment\n      } = intl || {};\n      const {\n        id,\n        description,\n        defaultMessage,\n        values,\n        children,\n        tagName: Component = Text\n      } = this.props;\n      const descriptor = {\n        id,\n        description,\n        defaultMessage\n      };\n      let nodes = formatMessage(descriptor, values);\n      if (!Array.isArray(nodes)) {\n        nodes = [nodes];\n      }\n      if (typeof children === 'function') {\n        return children(...nodes);\n      }\n      if (Component) {\n        // Needs to use `createElement()` instead of JSX, otherwise React will\n        // warn about a missing `key` prop with rich-text message formatting.\n        return React.createElement(Component, null, ...nodes);\n      }\n      return nodes;\n    });\n  }\n}\nFormattedMessage.displayName = 'FormattedMessage';\nFormattedMessage.defaultProps = {\n  values: {}\n};\nexport default FormattedMessage;","map":{"version":3,"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","React","Context","formatMessage","invariantIntlContext","DEFAULT_INTL_CONFIG","createFormatters","shallowEquals_","shallowEquals","default","defaultFormatMessage","descriptor","values","process","env","NODE_ENV","console","error","assign","locale","FormattedMessage","Component","shouldComponentUpdate","nextProps","_a","props","otherProps","nextValues","nextOtherProps","render","createElement","Consumer","intl","defaultMessage","textComponent","Text","Fragment","id","description","children","tagName","nodes","Array","isArray","displayName","defaultProps"],"sources":["C:/Users/tugcetay/Documents/github/Data_visualization/kepler.gl_React_app/node_modules/react-intl/lib/components/message.js"],"sourcesContent":["/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { Context } from './injectIntl';\nimport { formatMessage } from '../formatters/message';\nimport { invariantIntlContext, DEFAULT_INTL_CONFIG, createFormatters, } from '../utils';\nimport * as shallowEquals_ from 'shallow-equal/objects';\nconst shallowEquals = shallowEquals_.default || shallowEquals_;\nconst defaultFormatMessage = (descriptor, values) => {\n    if (process.env.NODE_ENV !== 'production') {\n        console.error('[React Intl] Could not find required `intl` object. <IntlProvider> needs to exist in the component ancestry. Using default message as fallback.');\n    }\n    return formatMessage(Object.assign(Object.assign({}, DEFAULT_INTL_CONFIG), { locale: 'en' }), createFormatters(), descriptor, values);\n};\nclass FormattedMessage extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        const _a = this.props, { values } = _a, otherProps = __rest(_a, [\"values\"]);\n        const { values: nextValues } = nextProps, nextOtherProps = __rest(nextProps, [\"values\"]);\n        return (!shallowEquals(nextValues, values) ||\n            !shallowEquals(otherProps, nextOtherProps));\n    }\n    render() {\n        return (React.createElement(Context.Consumer, null, (intl) => {\n            if (!this.props.defaultMessage) {\n                invariantIntlContext(intl);\n            }\n            const { formatMessage = defaultFormatMessage, textComponent: Text = React.Fragment, } = intl || {};\n            const { id, description, defaultMessage, values, children, tagName: Component = Text, } = this.props;\n            const descriptor = { id, description, defaultMessage };\n            let nodes = formatMessage(descriptor, values);\n            if (!Array.isArray(nodes)) {\n                nodes = [nodes];\n            }\n            if (typeof children === 'function') {\n                return children(...nodes);\n            }\n            if (Component) {\n                // Needs to use `createElement()` instead of JSX, otherwise React will\n                // warn about a missing `key` prop with rich-text message formatting.\n                return React.createElement(Component, null, ...nodes);\n            }\n            return nodes;\n        }));\n    }\n}\nFormattedMessage.displayName = 'FormattedMessage';\nFormattedMessage.defaultProps = {\n    values: {},\n};\nexport default FormattedMessage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}