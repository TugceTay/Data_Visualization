{"ast":null,"code":"import Vector from './base/vector';\nimport { config, isArray } from '../lib/common';\nimport { checkNumber } from '../lib/validators';\nimport * as vec2 from 'gl-matrix/vec2';\nimport { vec2_transformMat4AsVector } from '../lib/gl-matrix-extras';\nexport default class Vector2 extends Vector {\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    super(2);\n    if (isArray(x) && arguments.length === 1) {\n      this.copy(x);\n    } else {\n      if (config.debug) {\n        checkNumber(x);\n        checkNumber(y);\n      }\n      this[0] = x;\n      this[1] = y;\n    }\n  }\n  set(x, y) {\n    this[0] = x;\n    this[1] = y;\n    return this.check();\n  }\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    return this.check();\n  }\n  fromObject(object) {\n    if (config.debug) {\n      checkNumber(object.x);\n      checkNumber(object.y);\n    }\n    this[0] = object.x;\n    this[1] = object.y;\n    return this.check();\n  }\n  toObject(object) {\n    object.x = this[0];\n    object.y = this[1];\n    return object;\n  }\n  get ELEMENTS() {\n    return 2;\n  }\n  horizontalAngle() {\n    return Math.atan2(this.y, this.x);\n  }\n  verticalAngle() {\n    return Math.atan2(this.x, this.y);\n  }\n  transform(matrix4) {\n    return this.transformAsPoint(matrix4);\n  }\n  transformAsPoint(matrix4) {\n    vec2.transformMat4(this, this, matrix4);\n    return this.check();\n  }\n  transformAsVector(matrix4) {\n    vec2_transformMat4AsVector(this, this, matrix4);\n    return this.check();\n  }\n  transformByMatrix3(matrix3) {\n    vec2.transformMat3(this, this, matrix3);\n    return this.check();\n  }\n  transformByMatrix2x3(matrix2x3) {\n    vec2.transformMat2d(this, this, matrix2x3);\n    return this.check();\n  }\n  transformByMatrix2(matrix2) {\n    vec2.transformMat2(this, this, matrix2);\n    return this.check();\n  }\n}","map":{"version":3,"sources":["../../../src/classes/vector2.ts"],"names":["Vector","config","isArray","checkNumber","vec2","vec2_transformMat4AsVector","Vector2","constructor","x","y","arguments","length","copy","debug","set","check","array","fromObject","object","toObject","ELEMENTS","horizontalAngle","Math","atan2","verticalAngle","transform","matrix4","transformAsPoint","transformMat4","transformAsVector","transformByMatrix3","matrix3","transformMat3","transformByMatrix2x3","matrix2x3","transformMat2d","transformByMatrix2","matrix2","transformMat2"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport Vector from './base/vector';\nimport {config, isArray} from '../lib/common';\nimport {checkNumber} from '../lib/validators';\nimport * as vec2 from 'gl-matrix/vec2';\n/* eslint-disable camelcase */\nimport {vec2_transformMat4AsVector} from '../lib/gl-matrix-extras';\nimport {NumericArray} from '@math.gl/types';\n\n/**\n * Two-element vector class.\n * Subclass of Array<number>\n */\nexport default class Vector2 extends Vector {\n  // Creates a new, empty vec2\n  constructor(x: number | Readonly<NumericArray> = 0, y: number = 0) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(2); // -0, -0);\n    if (isArray(x) && arguments.length === 1) {\n      this.copy(x as Readonly<NumericArray>);\n    } else {\n      if (config.debug) {\n        checkNumber(x);\n        checkNumber(y);\n      }\n      this[0] = x as number;\n      this[1] = y;\n    }\n  }\n\n  set(x: number, y: number): this {\n    this[0] = x;\n    this[1] = y;\n    return this.check();\n  }\n\n  copy(array: Readonly<NumericArray>): this {\n    this[0] = array[0];\n    this[1] = array[1];\n    return this.check();\n  }\n\n  fromObject(object: {x: number; y: number}): this {\n    if (config.debug) {\n      checkNumber(object.x);\n      checkNumber(object.y);\n    }\n    this[0] = object.x;\n    this[1] = object.y;\n    return this.check();\n  }\n\n  toObject(object: {x?: number; y?: number}): {x: number; y: number} {\n    object.x = this[0];\n    object.y = this[1];\n    return object as {x: number; y: number};\n  }\n\n  // Getters/setters\n\n  get ELEMENTS(): number {\n    return 2;\n  }\n\n  /**\n   * Returns angle from x axis\n   * @returns\n   */\n  horizontalAngle(): number {\n    return Math.atan2(this.y, this.x);\n  }\n\n  /**\n   * Returns angle from y axis\n   * @returns\n   */\n  verticalAngle(): number {\n    return Math.atan2(this.x, this.y);\n  }\n\n  // Transforms\n\n  /**\n   * Transforms as point\n   * @param matrix4\n   * @returns\n   */\n  transform(matrix4: Readonly<NumericArray>): this {\n    return this.transformAsPoint(matrix4);\n  }\n\n  /**\n   * transforms as point (4th component is implicitly 1)\n   * @param matrix4\n   * @returns\n   */\n  transformAsPoint(matrix4: Readonly<NumericArray>): this {\n    vec2.transformMat4(this, this, matrix4);\n    return this.check();\n  }\n\n  /**\n   * transforms as vector (4th component is implicitly 0, ignores translation. slightly faster)\n   * @param matrix4\n   * @returns\n   */\n  transformAsVector(matrix4: Readonly<NumericArray>): this {\n    vec2_transformMat4AsVector(this, this, matrix4);\n    return this.check();\n  }\n\n  transformByMatrix3(matrix3: Readonly<NumericArray>): this {\n    vec2.transformMat3(this, this, matrix3);\n    return this.check();\n  }\n\n  transformByMatrix2x3(matrix2x3: Readonly<NumericArray>): this {\n    vec2.transformMat2d(this, this, matrix2x3);\n    return this.check();\n  }\n\n  transformByMatrix2(matrix2: Readonly<NumericArray>): this {\n    vec2.transformMat2(this, this, matrix2);\n    return this.check();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}