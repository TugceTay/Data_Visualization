{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _awaitAsyncGenerator from \"@babel/runtime/helpers/esm/awaitAsyncGenerator\";\nimport _wrapAsyncGenerator from \"@babel/runtime/helpers/esm/wrapAsyncGenerator\";\nimport _asyncIterator from \"@babel/runtime/helpers/esm/asyncIterator\";\nexport function makeTransformIterator(_x, _x2, _x3) {\n  return _makeTransformIterator.apply(this, arguments);\n}\nfunction _makeTransformIterator() {\n  _makeTransformIterator = _wrapAsyncGenerator(_regeneratorRuntime.mark(function _callee(asyncIterator, IncrementalTransform, options) {\n    var transform, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk, _output, output;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            transform = new IncrementalTransform(options);\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 3;\n            _iterator = _asyncIterator(asyncIterator);\n          case 5:\n            _context.next = 7;\n            return _awaitAsyncGenerator(_iterator.next());\n          case 7:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 11;\n            return _awaitAsyncGenerator(_step.value);\n          case 11:\n            _value = _context.sent;\n            if (_iteratorNormalCompletion) {\n              _context.next = 23;\n              break;\n            }\n            chunk = _value;\n            _context.next = 16;\n            return _awaitAsyncGenerator(transform.write(chunk));\n          case 16:\n            _output = _context.sent;\n            if (!_output) {\n              _context.next = 20;\n              break;\n            }\n            _context.next = 20;\n            return _output;\n          case 20:\n            _iteratorNormalCompletion = true;\n            _context.next = 5;\n            break;\n          case 23:\n            _context.next = 29;\n            break;\n          case 25:\n            _context.prev = 25;\n            _context.t0 = _context[\"catch\"](3);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n          case 29:\n            _context.prev = 29;\n            _context.prev = 30;\n            if (!(!_iteratorNormalCompletion && _iterator[\"return\"] != null)) {\n              _context.next = 34;\n              break;\n            }\n            _context.next = 34;\n            return _awaitAsyncGenerator(_iterator[\"return\"]());\n          case 34:\n            _context.prev = 34;\n            if (!_didIteratorError) {\n              _context.next = 37;\n              break;\n            }\n            throw _iteratorError;\n          case 37:\n            return _context.finish(34);\n          case 38:\n            return _context.finish(29);\n          case 39:\n            _context.next = 41;\n            return _awaitAsyncGenerator(transform.end());\n          case 41:\n            output = _context.sent;\n            if (!output) {\n              _context.next = 45;\n              break;\n            }\n            _context.next = 45;\n            return output;\n          case 45:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 25, 29, 39], [30,, 34, 38]]);\n  }));\n  return _makeTransformIterator.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/iterator-utils/make-transform-iterator.js"],"names":["makeTransformIterator","asyncIterator","IncrementalTransform","options","transform","chunk","output","write","end"],"mappings":"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","sourcesContent":["export async function* makeTransformIterator(asyncIterator, IncrementalTransform, options) {\n  const transform = new IncrementalTransform(options);\n  for await (const chunk of asyncIterator) {\n    const output = await transform.write(chunk);\n    if (output) {\n      yield output;\n    }\n  }\n  const output = await transform.end();\n  if (output) {\n    yield output;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}