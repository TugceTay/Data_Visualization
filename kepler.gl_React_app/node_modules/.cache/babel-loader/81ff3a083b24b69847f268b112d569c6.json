{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport parseImage from '../parsers/parse-image';\nimport { getImageUrls } from './load-image';\nimport { deepLoad } from './deep-load';\nexport function loadImageArray(_x, _x2) {\n  return _loadImageArray.apply(this, arguments);\n}\nfunction _loadImageArray() {\n  _loadImageArray = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(count, getUrl) {\n    var options,\n      imageUrls,\n      _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            _context.next = 3;\n            return getImageArrayUrls(count, getUrl, options);\n          case 3:\n            imageUrls = _context.sent;\n            _context.next = 6;\n            return deepLoad(imageUrls, parseImage, options);\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadImageArray.apply(this, arguments);\n}\nexport function getImageArrayUrls(_x3, _x4) {\n  return _getImageArrayUrls.apply(this, arguments);\n}\nfunction _getImageArrayUrls() {\n  _getImageArrayUrls = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(count, getUrl) {\n    var options,\n      promises,\n      index,\n      promise,\n      _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n            promises = [];\n            for (index = 0; index < count; index++) {\n              promise = getImageUrls(getUrl, options, {\n                index: index\n              });\n              promises.push(promise);\n            }\n            _context2.next = 5;\n            return Promise.all(promises);\n          case 5:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getImageArrayUrls.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/texture-api/load-image-array.js"],"names":["parseImage","getImageUrls","deepLoad","loadImageArray","count","getUrl","options","imageUrls","getImageArrayUrls","promises","index","promise","push","Promise","all"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,wBAAvB;AACA,SAAQC,YAAR,QAA2B,cAA3B;AACA,SAAQC,QAAR,QAAuB,aAAvB;AAEA,OAAA,SAAsBC,cAAtB,CAAA,EAAA,EAAA,GAAA,EAAA;EAAA,OAAA,eAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;+DAAO,SAAA,OAAA,CAA8BC,KAA9B,EAAqCC,MAArC,EAAA;IAAA,IAAA,OAAA;MAAA,SAAA;MAAA,KAAA,GAAA,SAAA;IAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YAA6CC,OAA7C,GAAA,KAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,KAAA,CAAA,CAAA,CAAA,GAAuD,CAAA,CAAvD;YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OACmBE,iBAAiB,CAACJ,KAAD,EAAQC,MAAR,EAAgBC,OAAhB,CADpC;UAAA,KAAA,CAAA;YACCC,SADD,GAAA,QAAA,CAAA,IAAA;YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OAEQL,QAAQ,CAACK,SAAD,EAAYP,UAAZ,EAAwBM,OAAxB,CAFhB;UAAA,KAAA,CAAA;YAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,QAAA,CAAA,IAAA,CAAA;UAAA,KAAA,CAAA;UAAA,KAAA,KAAA;YAAA,OAAA,QAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,OAAA,CAAA;EAAA,C;;;AAKP,OAAA,SAAsBE,iBAAtB,CAAA,GAAA,EAAA,GAAA,EAAA;EAAA,OAAA,kBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;kEAAO,SAAA,QAAA,CAAiCJ,KAAjC,EAAwCC,MAAxC,EAAA;IAAA,IAAA,OAAA;MAAA,QAAA;MAAA,KAAA;MAAA,OAAA;MAAA,MAAA,GAAA,SAAA;IAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YAAgDC,OAAhD,GAAA,MAAA,CAAA,MAAA,GAAA,CAAA,IAAA,MAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,MAAA,CAAA,CAAA,CAAA,GAA0D,CAAA,CAA1D;YACCG,QADD,GACY,EADZ;YAEL,KAASC,KAAT,GAAiB,CAAjB,EAAoBA,KAAK,GAAGN,KAA5B,EAAmCM,KAAK,EAAxC,EAA4C;cACpCC,OADoC,GAC1BV,YAAY,CAACI,MAAD,EAASC,OAAT,EAAkB;gBAACI,KAAK,EAALA;cAAD,CAAlB,CADc;cAE1CD,QAAQ,CAACG,IAATH,CAAcE,OAAdF,CAAAA;YACD;YALI,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OAMQI,OAAO,CAACC,GAARD,CAAYJ,QAAZI,CANR;UAAA,KAAA,CAAA;YAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,SAAA,CAAA,IAAA,CAAA;UAAA,KAAA,CAAA;UAAA,KAAA,KAAA;YAAA,OAAA,SAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,QAAA,CAAA;EAAA,C","sourcesContent":["import parseImage from '../parsers/parse-image';\nimport {getImageUrls} from './load-image';\nimport {deepLoad} from './deep-load';\n\nexport async function loadImageArray(count, getUrl, options = {}) {\n  const imageUrls = await getImageArrayUrls(count, getUrl, options);\n  return await deepLoad(imageUrls, parseImage, options);\n}\n\nexport async function getImageArrayUrls(count, getUrl, options = {}) {\n  const promises = [];\n  for (let index = 0; index < count; index++) {\n    const promise = getImageUrls(getUrl, options, {index});\n    promises.push(promise);\n  }\n  return await Promise.all(promises);\n}\n"]},"metadata":{},"sourceType":"module"}