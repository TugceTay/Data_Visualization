{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _layers = require(\"@deck.gl/layers\");\nvar _constants = _interopRequireDefault(require(\"@luma.gl/constants\"));\nvar _shaderUtils = require(\"../layer-utils/shader-utils\");\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar defaultProps = _objectSpread(_objectSpread({}, _layers.LineLayer.defaultProps), {}, {\n  getTargetColor: function getTargetColor(x) {\n    return x.color || [0, 0, 0, 255];\n  }\n});\nfunction addInstanceColorShader(vs) {\n  var targetColorVs = (0, _shaderUtils.editShader)(vs, 'line target color vs', 'attribute vec4 instanceColors;', 'attribute vec4 instanceColors; attribute vec4 instanceTargetColors;');\n  return (0, _shaderUtils.editShader)(targetColorVs, 'line color vs', 'vColor = vec4(instanceColors.rgb, instanceColors.a * opacity);', \"vec4 color = mix(instanceColors, instanceTargetColors, positions.x);\" + \"vColor = vec4(color.rgb, color.a * opacity);\");\n}\nfunction addElevationScale(vs) {\n  var elevationVs = (0, _shaderUtils.editShader)(vs, 'line elevation scale 1 vs', 'uniform float widthMaxPixels;', \"uniform float widthMaxPixels;\\n     uniform float elevationScale;\");\n  elevationVs = (0, _shaderUtils.editShader)(elevationVs, 'line elevation scale 2 vs', \"geometry.worldPosition = instanceSourcePositions;\\n  geometry.worldPositionAlt = instanceTargetPositions;\", \"vec3 sourcePosAdjusted = instanceSourcePositions;\\n     vec3 targetPosAdjusted = instanceTargetPositions;\\n     sourcePosAdjusted.z *= elevationScale;\\n     targetPosAdjusted.z *= elevationScale;\\n     \\n     geometry.worldPosition = sourcePosAdjusted;\\n     geometry.worldPositionAlt = sourcePosAdjusted;\");\n  elevationVs = (0, _shaderUtils.editShader)(elevationVs, 'line elevation scale 3 vs', 'vec4 source = project_position_to_clipspace(instanceSourcePositions, instanceSourcePositions64Low, vec3(0.), source_commonspace);', 'vec4 source = project_position_to_clipspace(sourcePosAdjusted, instanceSourcePositions64Low, vec3(0.), source_commonspace);');\n  elevationVs = (0, _shaderUtils.editShader)(elevationVs, 'line elevation scale 4 vs', 'vec4 target = project_position_to_clipspace(instanceTargetPositions, instanceTargetPositions64Low, vec3(0.), target_commonspace);', 'vec4 target = project_position_to_clipspace(targetPosAdjusted, instanceTargetPositions64Low, vec3(0.), target_commonspace);');\n  return elevationVs;\n}\nvar EnhancedLineLayer = /*#__PURE__*/function (_LineLayer) {\n  (0, _inherits2[\"default\"])(EnhancedLineLayer, _LineLayer);\n  var _super = _createSuper(EnhancedLineLayer);\n  function EnhancedLineLayer() {\n    (0, _classCallCheck2[\"default\"])(this, EnhancedLineLayer);\n    return _super.apply(this, arguments);\n  }\n  (0, _createClass2[\"default\"])(EnhancedLineLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      var shaders = (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(EnhancedLineLayer.prototype), \"getShaders\", this).call(this);\n      var vs = addInstanceColorShader(shaders.vs);\n      vs = addElevationScale(vs);\n      return _objectSpread(_objectSpread({}, shaders), {}, {\n        vs: vs\n      });\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref) {\n      var uniforms = _ref.uniforms;\n      var elevationScale = this.props.elevationScale;\n      (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(EnhancedLineLayer.prototype), \"draw\", this).call(this, {\n        uniforms: _objectSpread(_objectSpread({}, uniforms), {}, {\n          elevationScale: elevationScale\n        })\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(EnhancedLineLayer.prototype), \"initializeState\", this).call(this);\n      var attributeManager = this.state.attributeManager;\n      attributeManager.addInstanced({\n        instanceTargetColors: {\n          size: this.props.colorFormat.length,\n          type: _constants[\"default\"].UNSIGNED_BYTE,\n          normalized: true,\n          transition: true,\n          accessor: 'getTargetColor',\n          defaultValue: [0, 0, 0, 255]\n        }\n      });\n    }\n  }]);\n  return EnhancedLineLayer;\n}(_layers.LineLayer);\nexports[\"default\"] = EnhancedLineLayer;\nEnhancedLineLayer.layerName = 'EnhancedLineLayer';\nEnhancedLineLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/deckgl-layers/line-layer/line-layer.js"],"names":["defaultProps","LineLayer","getTargetColor","x","color","addInstanceColorShader","vs","targetColorVs","addElevationScale","elevationVs","EnhancedLineLayer","shaders","uniforms","elevationScale","props","attributeManager","state","addInstanced","instanceTargetColors","size","colorFormat","length","type","GL","UNSIGNED_BYTE","normalized","transition","accessor","defaultValue","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LineLayer} from '@deck.gl/layers';\nimport GL from '@luma.gl/constants';\nimport {editShader} from 'deckgl-layers/layer-utils/shader-utils';\n\nconst defaultProps = {\n  ...LineLayer.defaultProps,\n  getTargetColor: x => x.color || [0, 0, 0, 255]\n};\n\nfunction addInstanceColorShader(vs) {\n  const targetColorVs = editShader(\n    vs,\n    'line target color vs',\n    'attribute vec4 instanceColors;',\n    'attribute vec4 instanceColors; attribute vec4 instanceTargetColors;'\n  );\n\n  return editShader(\n    targetColorVs,\n    'line color vs',\n    'vColor = vec4(instanceColors.rgb, instanceColors.a * opacity);',\n    `vec4 color = mix(instanceColors, instanceTargetColors, positions.x);` +\n      `vColor = vec4(color.rgb, color.a * opacity);`\n  );\n}\n\nfunction addElevationScale(vs) {\n  let elevationVs = editShader(\n    vs,\n    'line elevation scale 1 vs',\n    'uniform float widthMaxPixels;',\n    `uniform float widthMaxPixels;\n     uniform float elevationScale;`\n  );\n\n  elevationVs = editShader(\n    elevationVs,\n    'line elevation scale 2 vs',\n    `geometry.worldPosition = instanceSourcePositions;\n  geometry.worldPositionAlt = instanceTargetPositions;`,\n    `vec3 sourcePosAdjusted = instanceSourcePositions;\n     vec3 targetPosAdjusted = instanceTargetPositions;\n     sourcePosAdjusted.z *= elevationScale;\n     targetPosAdjusted.z *= elevationScale;\n     \n     geometry.worldPosition = sourcePosAdjusted;\n     geometry.worldPositionAlt = sourcePosAdjusted;`\n  );\n\n  elevationVs = editShader(\n    elevationVs,\n    'line elevation scale 3 vs',\n    'vec4 source = project_position_to_clipspace(instanceSourcePositions, instanceSourcePositions64Low, vec3(0.), source_commonspace);',\n    'vec4 source = project_position_to_clipspace(sourcePosAdjusted, instanceSourcePositions64Low, vec3(0.), source_commonspace);'\n  );\n\n  elevationVs = editShader(\n    elevationVs,\n    'line elevation scale 4 vs',\n    'vec4 target = project_position_to_clipspace(instanceTargetPositions, instanceTargetPositions64Low, vec3(0.), target_commonspace);',\n    'vec4 target = project_position_to_clipspace(targetPosAdjusted, instanceTargetPositions64Low, vec3(0.), target_commonspace);'\n  );\n\n  return elevationVs;\n}\n\nexport default class EnhancedLineLayer extends LineLayer {\n  getShaders() {\n    const shaders = super.getShaders();\n\n    let vs = addInstanceColorShader(shaders.vs);\n    vs = addElevationScale(vs);\n\n    return {\n      ...shaders,\n      vs\n    };\n  }\n\n  draw({uniforms}) {\n    const {elevationScale} = this.props;\n    super.draw({uniforms: {...uniforms, elevationScale}});\n  }\n\n  initializeState() {\n    super.initializeState();\n    const {attributeManager} = this.state;\n    attributeManager.addInstanced({\n      instanceTargetColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getTargetColor',\n        defaultValue: [0, 0, 0, 255]\n      }\n    });\n  }\n}\n\nEnhancedLineLayer.layerName = 'EnhancedLineLayer';\nEnhancedLineLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"script"}