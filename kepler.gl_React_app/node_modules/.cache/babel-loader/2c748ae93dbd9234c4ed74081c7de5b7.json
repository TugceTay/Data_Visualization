{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport { Buffer, Transform, Framebuffer, Texture2D, readPixelsToArray } from '@luma.gl/core';\nimport { padBuffer, getAttributeTypeFromSize, getSourceBufferAttribute, getAttributeBufferLength, cycleBuffers } from '../lib/attribute/attribute-transition-utils';\nimport Attribute from '../lib/attribute/attribute';\nimport Transition from './transition';\nvar GPUSpringTransition = function () {\n  function GPUSpringTransition(_ref) {\n    var gl = _ref.gl,\n      attribute = _ref.attribute,\n      timeline = _ref.timeline;\n    _classCallCheck(this, GPUSpringTransition);\n    this.gl = gl;\n    this.type = 'spring';\n    this.transition = new Transition(timeline);\n    this.attribute = attribute;\n    this.attributeInTransition = new Attribute(gl, Object.assign({}, attribute.settings, {\n      normalized: false\n    }));\n    this.currentStartIndices = attribute.startIndices;\n    this.currentLength = 0;\n    this.texture = getTexture(gl);\n    this.framebuffer = getFramebuffer(gl, this.texture);\n    this.transform = getTransform(gl, attribute, this.framebuffer);\n    var bufferOpts = {\n      byteLength: 0,\n      usage: 35050\n    };\n    this.buffers = [new Buffer(gl, bufferOpts), new Buffer(gl, bufferOpts), new Buffer(gl, bufferOpts)];\n  }\n  _createClass(GPUSpringTransition, [{\n    key: \"start\",\n    value: function start(transitionSettings, numInstances) {\n      var gl = this.gl,\n        buffers = this.buffers,\n        attribute = this.attribute;\n      var padBufferOpts = {\n        numInstances: numInstances,\n        attribute: attribute,\n        fromLength: this.currentLength,\n        fromStartIndices: this.currentStartIndices,\n        getData: transitionSettings.enter\n      };\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n      try {\n        for (var _iterator = buffers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var buffer = _step.value;\n          padBuffer(_objectSpread({\n            buffer: buffer\n          }, padBufferOpts));\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n      this.currentStartIndices = attribute.startIndices;\n      this.currentLength = getAttributeBufferLength(attribute, numInstances);\n      this.attributeInTransition.update({\n        buffer: buffers[1],\n        value: attribute.value\n      });\n      this.transition.start(transitionSettings);\n      this.transform.update({\n        elementCount: Math.floor(this.currentLength / attribute.size),\n        sourceBuffers: {\n          aTo: getSourceBufferAttribute(gl, attribute)\n        }\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var buffers = this.buffers,\n        transform = this.transform,\n        framebuffer = this.framebuffer,\n        transition = this.transition;\n      var updated = transition.update();\n      if (!updated) {\n        return false;\n      }\n      transform.update({\n        sourceBuffers: {\n          aPrev: buffers[0],\n          aCur: buffers[1]\n        },\n        feedbackBuffers: {\n          vNext: buffers[2]\n        }\n      });\n      transform.run({\n        framebuffer: framebuffer,\n        discard: false,\n        clearRenderTarget: true,\n        uniforms: {\n          stiffness: transition.settings.stiffness,\n          damping: transition.settings.damping\n        },\n        parameters: {\n          depthTest: false,\n          blend: true,\n          viewport: [0, 0, 1, 1],\n          blendFunc: [1, 1],\n          blendEquation: [32776, 32776]\n        }\n      });\n      cycleBuffers(buffers);\n      this.attributeInTransition.update({\n        buffer: buffers[1],\n        value: this.attribute.value\n      });\n      var isTransitioning = readPixelsToArray(framebuffer)[0] > 0;\n      if (!isTransitioning) {\n        transition.end();\n      }\n      return true;\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.transition.cancel();\n      this.transform[\"delete\"]();\n      while (this.buffers.length) {\n        this.buffers.pop()[\"delete\"]();\n      }\n      this.texture[\"delete\"]();\n      this.texture = null;\n      this.framebuffer[\"delete\"]();\n      this.framebuffer = null;\n    }\n  }, {\n    key: \"inProgress\",\n    get: function get() {\n      return this.transition.inProgress;\n    }\n  }]);\n  return GPUSpringTransition;\n}();\nexport { GPUSpringTransition as default };\nfunction getTransform(gl, attribute, framebuffer) {\n  var attributeType = getAttributeTypeFromSize(attribute.size);\n  return new Transform(gl, {\n    framebuffer: framebuffer,\n    vs: \"\\n#define SHADER_NAME spring-transition-vertex-shader\\n\\n#define EPSILON 0.00001\\n\\nuniform float stiffness;\\nuniform float damping;\\nattribute ATTRIBUTE_TYPE aPrev;\\nattribute ATTRIBUTE_TYPE aCur;\\nattribute ATTRIBUTE_TYPE aTo;\\nvarying ATTRIBUTE_TYPE vNext;\\nvarying float vIsTransitioningFlag;\\n\\nATTRIBUTE_TYPE getNextValue(ATTRIBUTE_TYPE cur, ATTRIBUTE_TYPE prev, ATTRIBUTE_TYPE dest) {\\n  ATTRIBUTE_TYPE velocity = cur - prev;\\n  ATTRIBUTE_TYPE delta = dest - cur;\\n  ATTRIBUTE_TYPE spring = delta * stiffness;\\n  ATTRIBUTE_TYPE damper = velocity * -1.0 * damping;\\n  return spring + damper + velocity + cur;\\n}\\n\\nvoid main(void) {\\n  bool isTransitioning = length(aCur - aPrev) > EPSILON || length(aTo - aCur) > EPSILON;\\n  vIsTransitioningFlag = isTransitioning ? 1.0 : 0.0;\\n\\n  vNext = getNextValue(aCur, aPrev, aTo);\\n  gl_Position = vec4(0, 0, 0, 1);\\n  gl_PointSize = 100.0;\\n}\\n\",\n    fs: \"\\n#define SHADER_NAME spring-transition-is-transitioning-fragment-shader\\n\\nvarying float vIsTransitioningFlag;\\n\\nvoid main(void) {\\n  if (vIsTransitioningFlag == 0.0) {\\n    discard;\\n  }\\n  gl_FragColor = vec4(1.0);\\n}\",\n    defines: {\n      ATTRIBUTE_TYPE: attributeType\n    },\n    varyings: ['vNext']\n  });\n}\nfunction getTexture(gl) {\n  return new Texture2D(gl, {\n    data: new Uint8Array(4),\n    format: 6408,\n    type: 5121,\n    border: 0,\n    mipmaps: false,\n    dataFormat: 6408,\n    width: 1,\n    height: 1\n  });\n}\nfunction getFramebuffer(gl, texture) {\n  return new Framebuffer(gl, {\n    id: 'spring-transition-is-transitioning-framebuffer',\n    width: 1,\n    height: 1,\n    attachments: _defineProperty({}, 36064, texture)\n  });\n}","map":{"version":3,"sources":["../../../src/transitions/gpu-spring-transition.js"],"names":["Buffer","Transform","Framebuffer","Texture2D","readPixelsToArray","padBuffer","getAttributeTypeFromSize","getSourceBufferAttribute","getAttributeBufferLength","cycleBuffers","Attribute","Transition","GPUSpringTransition","gl","attribute","timeline","type","transition","attributeInTransition","assign","settings","normalized","currentStartIndices","startIndices","currentLength","texture","getTexture","framebuffer","getFramebuffer","transform","getTransform","bufferOpts","byteLength","usage","buffers","inProgress","transitionSettings","numInstances","padBufferOpts","fromLength","fromStartIndices","getData","enter","buffer","update","value","start","elementCount","Math","floor","size","sourceBuffers","aTo","updated","aPrev","aCur","feedbackBuffers","vNext","run","discard","clearRenderTarget","uniforms","stiffness","damping","parameters","depthTest","blend","viewport","blendFunc","blendEquation","isTransitioning","end","cancel","length","pop","attributeType","vs","fs","defines","ATTRIBUTE_TYPE","varyings","data","Uint8Array","format","border","mipmaps","dataFormat","width","height","id","attachments"],"mappings":"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","sourcesContent":["/* eslint-disable complexity, max-statements, max-params */\nimport GL from '@luma.gl/constants';\nimport {Buffer, Transform, Framebuffer, Texture2D, readPixelsToArray} from '@luma.gl/core';\nimport {\n  padBuffer,\n  getAttributeTypeFromSize,\n  getSourceBufferAttribute,\n  getAttributeBufferLength,\n  cycleBuffers\n} from '../lib/attribute/attribute-transition-utils';\nimport Attribute from '../lib/attribute/attribute';\nimport Transition from './transition';\n\nexport default class GPUSpringTransition {\n  constructor({gl, attribute, timeline}) {\n    this.gl = gl;\n    this.type = 'spring';\n    this.transition = new Transition(timeline);\n    this.attribute = attribute;\n    // this is the attribute we return during the transition - note: if it is a constant\n    // attribute, it will be converted and returned as a regular attribute\n    // `attribute.userData` is the original options passed when constructing the attribute.\n    // This ensures that we set the proper `doublePrecision` flag and shader attributes.\n    this.attributeInTransition = new Attribute(\n      gl,\n      Object.assign({}, attribute.settings, {normalized: false})\n    );\n    this.currentStartIndices = attribute.startIndices;\n    // storing currentLength because this.buffer may be larger than the actual length we want to use\n    // this is because we only reallocate buffers when they grow, not when they shrink,\n    // due to performance costs\n    this.currentLength = 0;\n    this.texture = getTexture(gl);\n    this.framebuffer = getFramebuffer(gl, this.texture);\n    this.transform = getTransform(gl, attribute, this.framebuffer);\n    const bufferOpts = {\n      byteLength: 0,\n      usage: GL.DYNAMIC_COPY\n    };\n    this.buffers = [\n      new Buffer(gl, bufferOpts), // previous\n      new Buffer(gl, bufferOpts), // current\n      new Buffer(gl, bufferOpts) // next\n    ];\n  }\n\n  get inProgress() {\n    return this.transition.inProgress;\n  }\n\n  // this is called when an attribute's values have changed and\n  // we need to start animating towards the new values\n  // this also correctly resizes / pads the transform's buffers\n  // in case the attribute's buffer has changed in length or in\n  // startIndices\n  start(transitionSettings, numInstances) {\n    const {gl, buffers, attribute} = this;\n    const padBufferOpts = {\n      numInstances,\n      attribute,\n      fromLength: this.currentLength,\n      fromStartIndices: this.currentStartIndices,\n      getData: transitionSettings.enter\n    };\n\n    for (const buffer of buffers) {\n      padBuffer({buffer, ...padBufferOpts});\n    }\n\n    this.currentStartIndices = attribute.startIndices;\n    this.currentLength = getAttributeBufferLength(attribute, numInstances);\n    this.attributeInTransition.update({\n      buffer: buffers[1],\n      // Hack: Float64Array is required for double-precision attributes\n      // to generate correct shader attributes\n      value: attribute.value\n    });\n\n    // when an attribute changes values, a new transition is started. These\n    // are properties that we have to store on this.transition but can change\n    // when new transitions are started, so we have to keep them up-to-date.\n    // this.transition.start() takes the latest settings and updates them.\n    this.transition.start(transitionSettings);\n\n    this.transform.update({\n      elementCount: Math.floor(this.currentLength / attribute.size),\n      sourceBuffers: {\n        aTo: getSourceBufferAttribute(gl, attribute)\n      }\n    });\n  }\n\n  update() {\n    const {buffers, transform, framebuffer, transition} = this;\n    const updated = transition.update();\n    if (!updated) {\n      return false;\n    }\n\n    transform.update({\n      sourceBuffers: {\n        aPrev: buffers[0],\n        aCur: buffers[1]\n      },\n      feedbackBuffers: {\n        vNext: buffers[2]\n      }\n    });\n    transform.run({\n      framebuffer,\n      discard: false,\n      clearRenderTarget: true,\n      uniforms: {\n        stiffness: transition.settings.stiffness,\n        damping: transition.settings.damping\n      },\n      parameters: {\n        depthTest: false,\n        blend: true,\n        viewport: [0, 0, 1, 1],\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: [GL.MAX, GL.MAX]\n      }\n    });\n\n    cycleBuffers(buffers);\n    this.attributeInTransition.update({\n      buffer: buffers[1],\n      // Hack: Float64Array is required for double-precision attributes\n      // to generate correct shader attributes\n      value: this.attribute.value\n    });\n\n    const isTransitioning = readPixelsToArray(framebuffer)[0] > 0;\n\n    if (!isTransitioning) {\n      transition.end();\n    }\n\n    return true;\n  }\n\n  cancel() {\n    this.transition.cancel();\n    this.transform.delete();\n    while (this.buffers.length) {\n      this.buffers.pop().delete();\n    }\n    this.texture.delete();\n    this.texture = null;\n    this.framebuffer.delete();\n    this.framebuffer = null;\n  }\n}\n\nfunction getTransform(gl, attribute, framebuffer) {\n  const attributeType = getAttributeTypeFromSize(attribute.size);\n  return new Transform(gl, {\n    framebuffer,\n    vs: `\n#define SHADER_NAME spring-transition-vertex-shader\n\n#define EPSILON 0.00001\n\nuniform float stiffness;\nuniform float damping;\nattribute ATTRIBUTE_TYPE aPrev;\nattribute ATTRIBUTE_TYPE aCur;\nattribute ATTRIBUTE_TYPE aTo;\nvarying ATTRIBUTE_TYPE vNext;\nvarying float vIsTransitioningFlag;\n\nATTRIBUTE_TYPE getNextValue(ATTRIBUTE_TYPE cur, ATTRIBUTE_TYPE prev, ATTRIBUTE_TYPE dest) {\n  ATTRIBUTE_TYPE velocity = cur - prev;\n  ATTRIBUTE_TYPE delta = dest - cur;\n  ATTRIBUTE_TYPE spring = delta * stiffness;\n  ATTRIBUTE_TYPE damper = velocity * -1.0 * damping;\n  return spring + damper + velocity + cur;\n}\n\nvoid main(void) {\n  bool isTransitioning = length(aCur - aPrev) > EPSILON || length(aTo - aCur) > EPSILON;\n  vIsTransitioningFlag = isTransitioning ? 1.0 : 0.0;\n\n  vNext = getNextValue(aCur, aPrev, aTo);\n  gl_Position = vec4(0, 0, 0, 1);\n  gl_PointSize = 100.0;\n}\n`,\n    fs: `\n#define SHADER_NAME spring-transition-is-transitioning-fragment-shader\n\nvarying float vIsTransitioningFlag;\n\nvoid main(void) {\n  if (vIsTransitioningFlag == 0.0) {\n    discard;\n  }\n  gl_FragColor = vec4(1.0);\n}`,\n    defines: {\n      ATTRIBUTE_TYPE: attributeType\n    },\n    varyings: ['vNext']\n  });\n}\n\nfunction getTexture(gl) {\n  return new Texture2D(gl, {\n    data: new Uint8Array(4),\n    format: GL.RGBA,\n    type: GL.UNSIGNED_BYTE,\n    border: 0,\n    mipmaps: false,\n    dataFormat: GL.RGBA,\n    width: 1,\n    height: 1\n  });\n}\n\nfunction getFramebuffer(gl, texture) {\n  return new Framebuffer(gl, {\n    id: 'spring-transition-is-transitioning-framebuffer',\n    width: 1,\n    height: 1,\n    attachments: {\n      [GL.COLOR_ATTACHMENT0]: texture\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}