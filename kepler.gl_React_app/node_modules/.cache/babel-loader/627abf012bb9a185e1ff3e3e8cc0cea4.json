{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport WebMercatorViewport from './web-mercator-viewport';\nimport assert from './assert';\nexport default function fitBounds(_ref) {\n  var width = _ref.width,\n    height = _ref.height,\n    bounds = _ref.bounds,\n    _ref$minExtent = _ref.minExtent,\n    minExtent = _ref$minExtent === void 0 ? 0 : _ref$minExtent,\n    _ref$maxZoom = _ref.maxZoom,\n    maxZoom = _ref$maxZoom === void 0 ? 24 : _ref$maxZoom,\n    _ref$padding = _ref.padding,\n    padding = _ref$padding === void 0 ? 0 : _ref$padding,\n    _ref$offset = _ref.offset,\n    offset = _ref$offset === void 0 ? [0, 0] : _ref$offset;\n  var _bounds = _slicedToArray(bounds, 2),\n    _bounds$ = _slicedToArray(_bounds[0], 2),\n    west = _bounds$[0],\n    south = _bounds$[1],\n    _bounds$2 = _slicedToArray(_bounds[1], 2),\n    east = _bounds$2[0],\n    north = _bounds$2[1];\n  if (Number.isFinite(padding)) {\n    var p = padding;\n    padding = {\n      top: p,\n      bottom: p,\n      left: p,\n      right: p\n    };\n  } else {\n    assert(Number.isFinite(padding.top) && Number.isFinite(padding.bottom) && Number.isFinite(padding.left) && Number.isFinite(padding.right));\n  }\n  var viewport = new WebMercatorViewport({\n    width: width,\n    height: height,\n    longitude: 0,\n    latitude: 0,\n    zoom: 0\n  });\n  var nw = viewport.project([west, north]);\n  var se = viewport.project([east, south]);\n  var size = [Math.max(Math.abs(se[0] - nw[0]), minExtent), Math.max(Math.abs(se[1] - nw[1]), minExtent)];\n  var targetSize = [width - padding.left - padding.right - Math.abs(offset[0]) * 2, height - padding.top - padding.bottom - Math.abs(offset[1]) * 2];\n  assert(targetSize[0] > 0 && targetSize[1] > 0);\n  var scaleX = targetSize[0] / size[0];\n  var scaleY = targetSize[1] / size[1];\n  var offsetX = (padding.right - padding.left) / 2 / scaleX;\n  var offsetY = (padding.bottom - padding.top) / 2 / scaleY;\n  var center = [(se[0] + nw[0]) / 2 + offsetX, (se[1] + nw[1]) / 2 + offsetY];\n  var centerLngLat = viewport.unproject(center);\n  var zoom = viewport.zoom + Math.log2(Math.abs(Math.min(scaleX, scaleY)));\n  return {\n    longitude: centerLngLat[0],\n    latitude: centerLngLat[1],\n    zoom: Math.min(zoom, maxZoom)\n  };\n}","map":{"version":3,"sources":["../../src/fit-bounds.js"],"names":["WebMercatorViewport","assert","fitBounds","width","height","bounds","minExtent","maxZoom","padding","offset","west","south","east","north","Number","isFinite","p","top","bottom","left","right","viewport","longitude","latitude","zoom","nw","project","se","size","Math","max","abs","targetSize","scaleX","scaleY","offsetX","offsetY","center","centerLngLat","unproject","log2","min"],"mappings":"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","sourcesContent":["import WebMercatorViewport from './web-mercator-viewport';\nimport assert from './assert';\n\n/**\n * * An object describing the padding to add to the bounds.\n * @typedef {Object} PaddingObject\n * @property {Number} top - Padding from top in pixels to add to the given bounds\n * @property {Number} bottom - Padding from bottom in pixels to add to the given bounds\n * @property {Number} left - Padding from left in pixels to add to the given bounds\n * @property {Number} right - Padding from right in pixels to add to the given bounds\n */\n\n/**\n * Returns map settings {latitude, longitude, zoom}\n * that will contain the provided corners within the provided width.\n * Only supports non-perspective mode.\n * @param {Number} width - viewport width\n * @param {Number} height - viewport height\n * @param {Array} bounds - [[lon, lat], [lon, lat]]\n * @param {Array} minExtent - The width/height of the bounded area will never be smaller than this\n * @param {Number|PaddingObject} [padding] - The amount of padding in pixels\n *  to add to the given bounds. Can also be an object with top, bottom, left and right\n *  properties defining the padding.\n * @param {Array} [offset] - The center of the given bounds relative to the map's center,\n *    [x, y] measured in pixels.\n * @returns {Object} - latitude, longitude and zoom\n */\nexport default function fitBounds({\n  width,\n  height,\n  bounds,\n  minExtent = 0,  // 0.01 would be about 1000 meters (degree is ~110KM)\n  maxZoom = 24, // ~x4,000,000 => About 10 meter extents\n  // options\n  padding = 0,\n  offset = [0, 0]\n}) {\n  const [[west, south], [east, north]] = bounds;\n\n  if (Number.isFinite(padding)) {\n    const p = padding;\n    padding = {\n      top: p,\n      bottom: p,\n      left: p,\n      right: p\n    };\n  } else {\n    // Make sure all the required properties are set\n    assert(Number.isFinite(padding.top) &&\n      Number.isFinite(padding.bottom) &&\n      Number.isFinite(padding.left) &&\n      Number.isFinite(padding.right)\n    );\n  }\n\n  const viewport = new WebMercatorViewport({\n    width,\n    height,\n    longitude: 0,\n    latitude: 0,\n    zoom: 0\n  });\n\n  const nw = viewport.project([west, north]);\n  const se = viewport.project([east, south]);\n\n  // width/height on the Web Mercator plane\n  const size = [\n    Math.max(Math.abs(se[0] - nw[0]), minExtent),\n    Math.max(Math.abs(se[1] - nw[1]), minExtent)\n  ];\n\n  const targetSize = [\n    width - padding.left - padding.right - Math.abs(offset[0]) * 2,\n    height - padding.top - padding.bottom - Math.abs(offset[1]) * 2\n  ];\n\n  assert(targetSize[0] > 0 && targetSize[1] > 0);\n\n  // scale = screen pixels per unit on the Web Mercator plane\n  const scaleX = targetSize[0] / size[0];\n  const scaleY = targetSize[1] / size[1];\n\n  // Find how much we need to shift the center\n  const offsetX = (padding.right - padding.left) / 2 / scaleX;\n  const offsetY = (padding.bottom - padding.top) / 2 / scaleY;\n\n  const center = [\n    (se[0] + nw[0]) / 2 + offsetX,\n    (se[1] + nw[1]) / 2 + offsetY\n  ];\n\n  const centerLngLat = viewport.unproject(center);\n  const zoom = viewport.zoom + Math.log2(Math.abs(Math.min(scaleX, scaleY)));\n\n  return {\n    longitude: centerLngLat[0],\n    latitude: centerLngLat[1],\n    zoom: Math.min(zoom, maxZoom)\n  };\n}\n"]},"metadata":{},"sourceType":"module"}