{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { Layer, project32, picking } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './line-layer-vertex.glsl';\nimport fs from './line-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  getSourcePosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.sourcePosition;\n    }\n  },\n  getTargetPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.targetPosition;\n    }\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  widthUnits: 'pixels',\n  widthScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  widthMinPixels: {\n    type: 'number',\n    value: 0,\n    min: 0\n  },\n  widthMaxPixels: {\n    type: 'number',\n    value: Number.MAX_SAFE_INTEGER,\n    min: 0\n  }\n};\nvar LineLayer = function (_Layer) {\n  _inherits(LineLayer, _Layer);\n  function LineLayer() {\n    _classCallCheck(this, LineLayer);\n    return _possibleConstructorReturn(this, _getPrototypeOf(LineLayer).apply(this, arguments));\n  }\n  _createClass(LineLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _get(_getPrototypeOf(LineLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instanceSourcePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getSourcePosition'\n        },\n        instanceTargetPositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getTargetPosition'\n        },\n        instanceColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: true,\n          accessor: 'getColor',\n          defaultValue: [0, 0, 0, 255]\n        },\n        instanceWidths: {\n          size: 1,\n          transition: true,\n          accessor: 'getWidth',\n          defaultValue: 1\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n        oldProps = _ref.oldProps,\n        changeFlags = _ref.changeFlags;\n      _get(_getPrototypeOf(LineLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n      if (changeFlags.extensionsChanged) {\n        var gl = this.context.gl;\n        if (this.state.model) {\n          this.state.model[\"delete\"]();\n        }\n        this.setState({\n          model: this._getModel(gl)\n        });\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var viewport = this.context.viewport;\n      var _this$props = this.props,\n        widthUnits = _this$props.widthUnits,\n        widthScale = _this$props.widthScale,\n        widthMinPixels = _this$props.widthMinPixels,\n        widthMaxPixels = _this$props.widthMaxPixels;\n      var widthMultiplier = widthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n      this.state.model.setUniforms(Object.assign({}, uniforms, {\n        widthScale: widthScale * widthMultiplier,\n        widthMinPixels: widthMinPixels,\n        widthMaxPixels: widthMaxPixels\n      })).draw();\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var positions = [0, -1, 0, 0, 1, 0, 1, -1, 0, 1, 1, 0];\n      return new Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 5,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true\n      }));\n    }\n  }]);\n  return LineLayer;\n}(Layer);\nexport { LineLayer as default };\nLineLayer.layerName = 'LineLayer';\nLineLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/line-layer/line-layer.js"],"names":["Layer","project32","picking","Model","Geometry","vs","fs","DEFAULT_COLOR","defaultProps","getSourcePosition","type","value","x","sourcePosition","getTargetPosition","targetPosition","getColor","getWidth","widthUnits","widthScale","min","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","LineLayer","modules","attributeManager","getAttributeManager","addInstanced","instanceSourcePositions","size","fp64","use64bitPositions","transition","accessor","instanceTargetPositions","instanceColors","props","colorFormat","length","normalized","defaultValue","instanceWidths","oldProps","changeFlags","extensionsChanged","gl","context","state","model","setState","_getModel","invalidateAll","uniforms","viewport","widthMultiplier","metersPerPixel","setUniforms","assign","draw","positions","getShaders","id","geometry","drawMode","attributes","Float32Array","isInstanced","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './line-layer-vertex.glsl';\nimport fs from './line-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  getSourcePosition: {type: 'accessor', value: x => x.sourcePosition},\n  getTargetPosition: {type: 'accessor', value: x => x.targetPosition},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n\n  widthUnits: 'pixels',\n  widthScale: {type: 'number', value: 1, min: 0},\n  widthMinPixels: {type: 'number', value: 0, min: 0},\n  widthMaxPixels: {type: 'number', value: Number.MAX_SAFE_INTEGER, min: 0}\n};\n\nexport default class LineLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {viewport} = this.context;\n    const {widthUnits, widthScale, widthMinPixels, widthMaxPixels} = this.props;\n\n    const widthMultiplier = widthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n\n    this.state.model\n      .setUniforms(\n        Object.assign({}, uniforms, {\n          widthScale: widthScale * widthMultiplier,\n          widthMinPixels,\n          widthMaxPixels\n        })\n      )\n      .draw();\n  }\n\n  _getModel(gl) {\n    /*\n     *  (0, -1)-------------_(1, -1)\n     *       |          _,-\"  |\n     *       o      _,-\"      o\n     *       |  _,-\"          |\n     *   (0, 1)\"-------------(1, 1)\n     */\n    const positions = [0, -1, 0, 0, 1, 0, 1, -1, 0, 1, 1, 0];\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_STRIP,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true\n      })\n    );\n  }\n}\n\nLineLayer.layerName = 'LineLayer';\nLineLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}