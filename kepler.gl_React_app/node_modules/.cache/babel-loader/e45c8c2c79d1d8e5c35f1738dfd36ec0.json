{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _DEFAULT_PARAMETERS;\nimport { Framebuffer, Texture2D, isWebGL2 } from '@luma.gl/core';\nvar DEFAULT_PARAMETERS = (_DEFAULT_PARAMETERS = {}, _defineProperty(_DEFAULT_PARAMETERS, 10240, 9728), _defineProperty(_DEFAULT_PARAMETERS, 10241, 9728), _DEFAULT_PARAMETERS);\nexport function getFloatTexture(gl) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _opts$width = opts.width,\n    width = _opts$width === void 0 ? 1 : _opts$width,\n    _opts$height = opts.height,\n    height = _opts$height === void 0 ? 1 : _opts$height,\n    _opts$data = opts.data,\n    data = _opts$data === void 0 ? null : _opts$data,\n    _opts$unpackFlipY = opts.unpackFlipY,\n    unpackFlipY = _opts$unpackFlipY === void 0 ? true : _opts$unpackFlipY,\n    _opts$parameters = opts.parameters,\n    parameters = _opts$parameters === void 0 ? DEFAULT_PARAMETERS : _opts$parameters;\n  var texture = new Texture2D(gl, {\n    data: data,\n    format: isWebGL2(gl) ? 34836 : 6408,\n    type: 5126,\n    border: 0,\n    mipmaps: false,\n    parameters: parameters,\n    dataFormat: 6408,\n    width: width,\n    height: height,\n    unpackFlipY: unpackFlipY\n  });\n  return texture;\n}\nexport function getFramebuffer(gl, opts) {\n  var id = opts.id,\n    _opts$width2 = opts.width,\n    width = _opts$width2 === void 0 ? 1 : _opts$width2,\n    _opts$height2 = opts.height,\n    height = _opts$height2 === void 0 ? 1 : _opts$height2,\n    texture = opts.texture;\n  var fb = new Framebuffer(gl, {\n    id: id,\n    width: width,\n    height: height,\n    attachments: _defineProperty({}, 36064, texture)\n  });\n  return fb;\n}\nexport function getFloatArray(array, size) {\n  var fillValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  if (!array || array.length < size) {\n    return new Float32Array(size).fill(fillValue);\n  }\n  return array;\n}","map":{"version":3,"sources":["../../../src/utils/resource-utils.js"],"names":["Framebuffer","Texture2D","isWebGL2","DEFAULT_PARAMETERS","getFloatTexture","gl","opts","width","height","data","unpackFlipY","parameters","texture","format","type","border","mipmaps","dataFormat","getFramebuffer","id","fb","attachments","getFloatArray","array","size","fillValue","length","Float32Array","fill"],"mappings":";;AACA,SAAQA,WAAR,EAAqBC,SAArB,EAAgCC,QAAhC,QAA+C,eAA/C;AAEA,IAAMC,kBAAkB,IAAA,mBAAA,GAAA,CAAA,CAAA,EAAA,eAAA,CAAA,mBAAA,EAAA,KAAA,EAAA,IAAA,CAAA,EAAA,eAAA,CAAA,mBAAA,EAAA,KAAA,EAAA,IAAA,CAAA,EAAA,mBAAA,CAAxB;AAKA,OAAO,SAASC,eAAT,CAAyBC,EAAzB,EAAwC;EAAA,IAAXC,IAAW,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,CAAA,CAAI;EAAA,IAAA,WAAA,GAOzCA,IAPyC,CAE3CC,KAF2C;IAE3CA,KAF2C,GAAA,WAAA,KAAA,KAAA,CAAA,GAEnC,CAFmC,GAAA,WAAA;IAAA,YAAA,GAOzCD,IAPyC,CAG3CE,MAH2C;IAG3CA,MAH2C,GAAA,YAAA,KAAA,KAAA,CAAA,GAGlC,CAHkC,GAAA,YAAA;IAAA,UAAA,GAOzCF,IAPyC,CAI3CG,IAJ2C;IAI3CA,IAJ2C,GAAA,UAAA,KAAA,KAAA,CAAA,GAIpC,IAJoC,GAAA,UAAA;IAAA,iBAAA,GAOzCH,IAPyC,CAK3CI,WAL2C;IAK3CA,WAL2C,GAAA,iBAAA,KAAA,KAAA,CAAA,GAK7B,IAL6B,GAAA,iBAAA;IAAA,gBAAA,GAOzCJ,IAPyC,CAM3CK,UAN2C;IAM3CA,UAN2C,GAAA,gBAAA,KAAA,KAAA,CAAA,GAM9BR,kBAN8B,GAAA,gBAAA;EAQ7C,IAAMS,OAAO,GAAG,IAAIX,SAAJ,CAAcI,EAAd,EAAkB;IAChCI,IAAI,EAAJA,IADgC;IAEhCI,MAAM,EAAEX,QAAQ,CAACG,EAAD,CAARH,GAAAA,KAAAA,GAAAA,IAFwB;IAGhCY,IAAI,EAAA,IAH4B;IAIhCC,MAAM,EAAE,CAJwB;IAKhCC,OAAO,EAAE,KALuB;IAMhCL,UAAU,EAAVA,UANgC;IAOhCM,UAAU,EAAA,IAPsB;IAQhCV,KAAK,EAALA,KARgC;IAShCC,MAAM,EAANA,MATgC;IAUhCE,WAAW,EAAXA;EAVgC,CAAlB,CAAhB;EAYA,OAAOE,OAAP;AACD;AAED,OAAO,SAASM,cAAT,CAAwBb,EAAxB,EAA4BC,IAA5B,EAAkC;EAAA,IAChCa,EADgC,GACMb,IADN,CAChCa,EADgC;IAAA,YAAA,GACMb,IADN,CAC5BC,KAD4B;IAC5BA,KAD4B,GAAA,YAAA,KAAA,KAAA,CAAA,GACpB,CADoB,GAAA,YAAA;IAAA,aAAA,GACMD,IADN,CACjBE,MADiB;IACjBA,MADiB,GAAA,aAAA,KAAA,KAAA,CAAA,GACR,CADQ,GAAA,aAAA;IACLI,OADK,GACMN,IADN,CACLM,OADK;EAEvC,IAAMQ,EAAE,GAAG,IAAIpB,WAAJ,CAAgBK,EAAhB,EAAoB;IAC7Bc,EAAE,EAAFA,EAD6B;IAE7BZ,KAAK,EAALA,KAF6B;IAG7BC,MAAM,EAANA,MAH6B;IAI7Ba,WAAW,EAAA,eAAA,CAAA,CAAA,CAAA,EAAA,KAAA,EACeT,OADf;EAJkB,CAApB,CAAX;EASA,OAAOQ,EAAP;AACD;AAED,OAAO,SAASE,aAAT,CAAuBC,KAAvB,EAA8BC,IAA9B,EAAmD;EAAA,IAAfC,SAAe,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAH,CAAG;EACxD,IAAI,CAACF,KAAD,IAAUA,KAAK,CAACG,MAANH,GAAeC,IAA7B,EAAmC;IACjC,OAAO,IAAIG,YAAJ,CAAiBH,IAAjB,CAAA,CAAuBI,IAAvB,CAA4BH,SAA5B,CAAP;EACD;EACD,OAAOF,KAAP;AACD","sourcesContent":["import GL from '@luma.gl/constants';\nimport {Framebuffer, Texture2D, isWebGL2} from '@luma.gl/core';\n\nconst DEFAULT_PARAMETERS = {\n  [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n  [GL.TEXTURE_MIN_FILTER]: GL.NEAREST\n};\n\nexport function getFloatTexture(gl, opts = {}) {\n  const {\n    width = 1,\n    height = 1,\n    data = null,\n    unpackFlipY = true,\n    parameters = DEFAULT_PARAMETERS\n  } = opts;\n  const texture = new Texture2D(gl, {\n    data,\n    format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n    type: GL.FLOAT,\n    border: 0,\n    mipmaps: false,\n    parameters,\n    dataFormat: GL.RGBA,\n    width,\n    height,\n    unpackFlipY\n  });\n  return texture;\n}\n\nexport function getFramebuffer(gl, opts) {\n  const {id, width = 1, height = 1, texture} = opts;\n  const fb = new Framebuffer(gl, {\n    id,\n    width,\n    height,\n    attachments: {\n      [GL.COLOR_ATTACHMENT0]: texture\n    }\n  });\n\n  return fb;\n}\n\nexport function getFloatArray(array, size, fillValue = 0) {\n  if (!array || array.length < size) {\n    return new Float32Array(size).fill(fillValue);\n  }\n  return array;\n}\n"]},"metadata":{},"sourceType":"module"}