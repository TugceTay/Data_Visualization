{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport assert from '../utils/assert';\nexport function isImage(image) {\n  return Boolean(getImageTypeOrNull(image));\n}\nexport function deleteImage(image) {\n  switch (getImageType(image)) {\n    case 'imagebitmap':\n      image.close();\n      break;\n    default:\n  }\n}\nexport function getImageType(image) {\n  var format = getImageTypeOrNull(image);\n  if (!format) {\n    throw new Error('Not an image');\n  }\n  return format;\n}\nexport function getImageData(image) {\n  switch (getImageType(image)) {\n    case 'data':\n      return image;\n    case 'image':\n    case 'imagebitmap':\n      var canvas = document.createElement('canvas');\n      var context = canvas.getContext('2d');\n      if (context) {\n        canvas.width = image.width;\n        canvas.height = image.height;\n        context.drawImage(image, 0, 0);\n        return context.getImageData(0, 0, image.width, image.height);\n      }\n    default:\n      return assert(false);\n  }\n}\nexport { getImageData as getImageSize };\nfunction getImageTypeOrNull(image) {\n  if (typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    return 'imagebitmap';\n  }\n  if (typeof Image !== 'undefined' && image instanceof Image) {\n    return 'image';\n  }\n  if (image && _typeof(image) === 'object' && image.data && image.width && image.height) {\n    return 'data';\n  }\n  return null;\n}","map":{"version":3,"sources":["../../../../src/lib/category-api/parsed-image-api.js"],"names":["assert","isImage","image","Boolean","getImageTypeOrNull","deleteImage","getImageType","close","format","Error","getImageData","canvas","document","createElement","context","getContext","width","height","drawImage","getImageSize","ImageBitmap","Image","data"],"mappings":";AACA,OAAOA,MAAP,MAAmB,iBAAnB;AAEA,OAAO,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;EAC7B,OAAOC,OAAO,CAACC,kBAAkB,CAACF,KAAD,CAAnB,CAAd;AACD;AAED,OAAO,SAASG,WAAT,CAAqBH,KAArB,EAA4B;EACjC,QAAQI,YAAY,CAACJ,KAAD,CAApB;IACE,KAAK,aAAL;MACEA,KAAK,CAACK,KAANL,EAAAA;MACA;IACF;EAAA;AAGH;AAED,OAAO,SAASI,YAAT,CAAsBJ,KAAtB,EAA6B;EAClC,IAAMM,MAAM,GAAGJ,kBAAkB,CAACF,KAAD,CAAjC;EACA,IAAI,CAACM,MAAL,EAAa;IACX,MAAM,IAAIC,KAAJ,CAAU,cAAV,CAAN;EACD;EACD,OAAOD,MAAP;AACD;AAED,OAAO,SAASE,YAAT,CAAsBR,KAAtB,EAA6B;EAClC,QAAQI,YAAY,CAACJ,KAAD,CAApB;IACE,KAAK,MAAL;MACE,OAAOA,KAAP;IAEF,KAAK,OAAL;IACA,KAAK,aAAL;MAGE,IAAMS,MAAM,GAAGC,QAAQ,CAACC,aAATD,CAAuB,QAAvBA,CAAf;MAEA,IAAME,OAAO,GAAGH,MAAM,CAACI,UAAPJ,CAAkB,IAAlBA,CAAhB;MACA,IAAIG,OAAJ,EAAa;QACXH,MAAM,CAACK,KAAPL,GAAeT,KAAK,CAACc,KAArBL;QACAA,MAAM,CAACM,MAAPN,GAAgBT,KAAK,CAACe,MAAtBN;QACAG,OAAO,CAACI,SAARJ,CAAkBZ,KAAlBY,EAAyB,CAAzBA,EAA4B,CAA5BA,CAAAA;QACA,OAAOA,OAAO,CAACJ,YAARI,CAAqB,CAArBA,EAAwB,CAAxBA,EAA2BZ,KAAK,CAACc,KAAjCF,EAAwCZ,KAAK,CAACe,MAA9CH,CAAP;MACD;IAEH;MACE,OAAOd,MAAM,CAAC,KAAD,CAAb;EAAA;AAEL;AAGD,SAAQU,YAAY,IAAIS,YAAxB;AAKA,SAASf,kBAAT,CAA4BF,KAA5B,EAAmC;EACjC,IAAI,OAAOkB,WAAP,KAAuB,WAAvB,IAAsClB,KAAK,YAAYkB,WAA3D,EAAwE;IACtE,OAAO,aAAP;EACD;EACD,IAAI,OAAOC,KAAP,KAAiB,WAAjB,IAAgCnB,KAAK,YAAYmB,KAArD,EAA4D;IAC1D,OAAO,OAAP;EACD;EACD,IAAInB,KAAK,IAAI,OAAA,CAAOA,KAAP,CAAA,KAAiB,QAA1BA,IAAsCA,KAAK,CAACoB,IAA5CpB,IAAoDA,KAAK,CAACc,KAA1Dd,IAAmEA,KAAK,CAACe,MAA7E,EAAqF;IACnF,OAAO,MAAP;EACD;EACD,OAAO,IAAP;AACD","sourcesContent":["/* global Image, ImageBitmap */\nimport assert from '../utils/assert';\n\nexport function isImage(image) {\n  return Boolean(getImageTypeOrNull(image));\n}\n\nexport function deleteImage(image) {\n  switch (getImageType(image)) {\n    case 'imagebitmap':\n      image.close();\n      break;\n    default:\n    // Nothing to do for images and image data objects\n  }\n}\n\nexport function getImageType(image) {\n  const format = getImageTypeOrNull(image);\n  if (!format) {\n    throw new Error('Not an image');\n  }\n  return format;\n}\n\nexport function getImageData(image) {\n  switch (getImageType(image)) {\n    case 'data':\n      return image;\n\n    case 'image':\n    case 'imagebitmap':\n      // Extract the image data from the image via a canvas\n      /* global document */\n      const canvas = document.createElement('canvas');\n      // TODO - reuse the canvas?\n      const context = canvas.getContext('2d');\n      if (context) {\n        canvas.width = image.width;\n        canvas.height = image.height;\n        context.drawImage(image, 0, 0);\n        return context.getImageData(0, 0, image.width, image.height);\n      }\n    // eslint-disable no-fallthrough\n    default:\n      return assert(false);\n  }\n}\n\n// TODO DEPRECATED not needed (use getImageData)\nexport {getImageData as getImageSize};\n\n// PRIVATE\n\n// eslint-disable-next-line complexity\nfunction getImageTypeOrNull(image) {\n  if (typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    return 'imagebitmap';\n  }\n  if (typeof Image !== 'undefined' && image instanceof Image) {\n    return 'image';\n  }\n  if (image && typeof image === 'object' && image.data && image.width && image.height) {\n    return 'data';\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}