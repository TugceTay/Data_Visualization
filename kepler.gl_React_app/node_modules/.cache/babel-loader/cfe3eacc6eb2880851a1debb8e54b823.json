{"ast":null,"code":"import isOldIE from './check-old-ie';\nimport WEBGL_FEATURES from './webgl-features-table';\nimport { assert } from '../utils/assert';\nconst compiledGlslExtensions = {};\nexport default function canCompileGLGSExtension(gl, cap) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const feature = WEBGL_FEATURES[cap];\n  assert(feature, cap);\n  if (!isOldIE(options)) {\n    return true;\n  }\n  if (cap in compiledGlslExtensions) {\n    return compiledGlslExtensions[cap];\n  }\n  const extensionName = feature[0];\n  const source = \"#extension GL_\".concat(extensionName, \" : enable\\nvoid main(void) {}\");\n  const shader = gl.createShader(35633);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  const canCompile = gl.getShaderParameter(shader, 35713);\n  gl.deleteShader(shader);\n  compiledGlslExtensions[cap] = canCompile;\n  return canCompile;\n}","map":{"version":3,"sources":["../../../src/features/check-glsl-extension.js"],"names":["isOldIE","WEBGL_FEATURES","assert","compiledGlslExtensions","canCompileGLGSExtension","gl","cap","options","feature","extensionName","source","shader","createShader","shaderSource","compileShader","canCompile","getShaderParameter","deleteShader"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,gBAApB;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,SAAQC,MAAR,QAAqB,iBAArB;AAMA,MAAMC,sBAAsB,GAAG,CAAA,CAA/B;AAGA,eAAe,SAASC,uBAAT,CAAiCC,EAAjC,EAAqCC,GAArC,EAAwD;EAAA,IAAdC,OAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,CAAA,CAAI;EACrE,MAAMC,OAAO,GAAGP,cAAc,CAACK,GAAD,CAA9B;EACAJ,MAAM,CAACM,OAAD,EAAUF,GAAV,CAANJ;EAEA,IAAI,CAACF,OAAO,CAACO,OAAD,CAAZ,EAAuB;IACrB,OAAO,IAAP;EACD;EAED,IAAID,GAAG,IAAIH,sBAAX,EAAmC;IACjC,OAAOA,sBAAsB,CAACG,GAAD,CAA7B;EACD;EAED,MAAMG,aAAa,GAAGD,OAAO,CAAC,CAAD,CAA7B;EACA,MAAME,MAAM,GAAA,gBAAA,CAAA,MAAA,CAAoBD,aAApB,EAAA,+BAAA,CAAZ;EAEA,MAAME,MAAM,GAAGN,EAAE,CAACO,YAAHP,CAAAA,KAAAA,CAAf;EACAA,EAAE,CAACQ,YAAHR,CAAgBM,MAAhBN,EAAwBK,MAAxBL,CAAAA;EACAA,EAAE,CAACS,aAAHT,CAAiBM,MAAjBN,CAAAA;EACA,MAAMU,UAAU,GAAGV,EAAE,CAACW,kBAAHX,CAAsBM,MAAtBN,EAAAA,KAAAA,CAAnB;EACAA,EAAE,CAACY,YAAHZ,CAAgBM,MAAhBN,CAAAA;EACAF,sBAAsB,CAACG,GAAD,CAAtBH,GAA8BY,UAA9BZ;EACA,OAAOY,UAAP;AACD","sourcesContent":["import isOldIE from './check-old-ie';\nimport WEBGL_FEATURES from './webgl-features-table';\nimport {assert} from '../utils/assert';\n\n// Enables feature detection in IE11 due to a bug where gl.getExtension may return true\n// but fail to compile when the extension is enabled in the shader. Specifically,\n// the OES_standard_derivatives extension fails to compile in IE11 even though its included\n// in the list of supported extensions.\nconst compiledGlslExtensions = {};\n\n// options allows user agent to be overridden for testing\nexport default function canCompileGLGSExtension(gl, cap, options = {}) {\n  const feature = WEBGL_FEATURES[cap];\n  assert(feature, cap);\n\n  if (!isOldIE(options)) {\n    return true;\n  }\n\n  if (cap in compiledGlslExtensions) {\n    return compiledGlslExtensions[cap];\n  }\n\n  const extensionName = feature[0];\n  const source = `#extension GL_${extensionName} : enable\\nvoid main(void) {}`;\n\n  const shader = gl.createShader(gl.VERTEX_SHADER);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  const canCompile = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  gl.deleteShader(shader);\n  compiledGlslExtensions[cap] = canCompile;\n  return canCompile;\n}\n"]},"metadata":{},"sourceType":"module"}