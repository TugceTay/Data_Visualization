{"ast":null,"code":"export default function parseXML(xml) {\n  if (window.DOMParser) {\n    var xmlDoc = new window.DOMParser().parseFromString(xml, 'application/xml');\n    var parseError = isXMLParseError(xmlDoc);\n    if (parseError) {\n      throw new Error(parseError);\n    }\n    return xmlDoc;\n  }\n  if (typeof window.ActiveXObject !== 'undefined') {\n    var _xmlDoc = new window.ActiveXObject('Microsoft.XMLDOM');\n    if (_xmlDoc) {\n      _xmlDoc.async = 'false';\n      _xmlDoc.loadXML(xml);\n      return _xmlDoc;\n    }\n  }\n  throw new Error('No XML parser available');\n}\nexport function parseXMLSupported() {\n  if (typeof window === 'undefined') {\n    return false;\n  }\n  if (window.DOMParser) {\n    return true;\n  }\n  if (typeof window.ActiveXObject !== 'undefined' && new window.ActiveXObject('Microsoft.XMLDOM')) {\n    return true;\n  }\n  return false;\n}\nfunction isXMLParseError(parsedDocument) {\n  var parser = new DOMParser();\n  var erroneousParse = parser.parseFromString('<', 'text/xml');\n  var parsererrorNS = erroneousParse.getElementsByTagName('parsererror')[0].namespaceURI;\n  if (parsererrorNS === 'http://www.w3.org/1999/xhtml') {\n    var errorElements = parsedDocument.getElementsByTagName('parsererror');\n    return errorElements.length ? errorElements[0].innerHTML : null;\n  }\n  return parsedDocument.getElementsByTagNameNS(parsererrorNS, 'parsererror').length > 0;\n}","map":{"version":3,"sources":["../../../../src/lib/xml/parse-xml.js"],"names":["parseXML","xml","window","DOMParser","xmlDoc","parseFromString","parseError","isXMLParseError","Error","ActiveXObject","async","loadXML","parseXMLSupported","parsedDocument","parser","erroneousParse","parsererrorNS","getElementsByTagName","namespaceURI","errorElements","length","innerHTML","getElementsByTagNameNS"],"mappings":"AACA,eAAe,SAASA,QAAT,CAAkBC,GAAlB,EAAuB;EACpC,IAAIC,MAAM,CAACC,SAAX,EAAsB;IACpB,IAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,SAAX,EAAA,CAAuBE,eAAvB,CAAuCJ,GAAvC,EAA4C,iBAA5C,CAAf;IACA,IAAMK,UAAU,GAAGC,eAAe,CAACH,MAAD,CAAlC;IACA,IAAIE,UAAJ,EAAgB;MACd,MAAM,IAAIE,KAAJ,CAAUF,UAAV,CAAN;IACD;IACD,OAAOF,MAAP;EACD;EAED,IAAI,OAAOF,MAAM,CAACO,aAAd,KAAgC,WAApC,EAAiD;IAC/C,IAAML,OAAM,GAAG,IAAIF,MAAM,CAACO,aAAX,CAAyB,kBAAzB,CAAf;IACA,IAAIL,OAAJ,EAAY;MACVA,OAAM,CAACM,KAAPN,GAAe,OAAfA;MACAA,OAAM,CAACO,OAAPP,CAAeH,GAAfG,CAAAA;MACA,OAAOA,OAAP;IACD;EACF;EAED,MAAM,IAAII,KAAJ,CAAU,yBAAV,CAAN;AACD;AAED,OAAO,SAASI,iBAAT,GAA6B;EAClC,IAAI,OAAOV,MAAP,KAAkB,WAAtB,EAAmC;IACjC,OAAO,KAAP;EACD;EAED,IAAIA,MAAM,CAACC,SAAX,EAAsB;IACpB,OAAO,IAAP;EACD;EAED,IAAI,OAAOD,MAAM,CAACO,aAAd,KAAgC,WAAhC,IAA+C,IAAIP,MAAM,CAACO,aAAX,CAAyB,kBAAzB,CAAnD,EAAiG;IAC/F,OAAO,IAAP;EACD;EAED,OAAO,KAAP;AACD;AAGD,SAASF,eAAT,CAAyBM,cAAzB,EAAyC;EACvC,IAAMC,MAAM,GAAG,IAAIX,SAAJ,EAAf;EACA,IAAMY,cAAc,GAAGD,MAAM,CAACT,eAAPS,CAAuB,GAAvBA,EAA4B,UAA5BA,CAAvB;EACA,IAAME,aAAa,GAAGD,cAAc,CAACE,oBAAfF,CAAoC,aAApCA,CAAAA,CAAmD,CAAnDA,CAAAA,CAAsDG,YAA5E;EAEA,IAAIF,aAAa,KAAK,8BAAtB,EAAsD;IAGpD,IAAMG,aAAa,GAAGN,cAAc,CAACI,oBAAfJ,CAAoC,aAApCA,CAAtB;IACA,OAAOM,aAAa,CAACC,MAAdD,GAAuBA,aAAa,CAAC,CAAD,CAAbA,CAAiBE,SAAxCF,GAAoD,IAA3D;EACD;EAED,OAAON,cAAc,CAACS,sBAAfT,CAAsCG,aAAtCH,EAAqD,aAArDA,CAAAA,CAAoEO,MAApEP,GAA6E,CAApF;AACD","sourcesContent":["/* global window, DOMParser */\nexport default function parseXML(xml) {\n  if (window.DOMParser) {\n    const xmlDoc = new window.DOMParser().parseFromString(xml, 'application/xml');\n    const parseError = isXMLParseError(xmlDoc);\n    if (parseError) {\n      throw new Error(parseError);\n    }\n    return xmlDoc;\n  }\n\n  if (typeof window.ActiveXObject !== 'undefined') {\n    const xmlDoc = new window.ActiveXObject('Microsoft.XMLDOM');\n    if (xmlDoc) {\n      xmlDoc.async = 'false';\n      xmlDoc.loadXML(xml);\n      return xmlDoc;\n    }\n  }\n\n  throw new Error('No XML parser available');\n}\n\nexport function parseXMLSupported() {\n  if (typeof window === 'undefined') {\n    return false;\n  }\n\n  if (window.DOMParser) {\n    return true;\n  }\n\n  if (typeof window.ActiveXObject !== 'undefined' && new window.ActiveXObject('Microsoft.XMLDOM')) {\n    return true;\n  }\n\n  return false;\n}\n\n// https://stackoverflow.com/questions/11563554/how-do-i-detect-xml-parsing-errors-when-using-javascripts-domparser-in-a-cross\nfunction isXMLParseError(parsedDocument) {\n  const parser = new DOMParser();\n  const erroneousParse = parser.parseFromString('<', 'text/xml');\n  const parsererrorNS = erroneousParse.getElementsByTagName('parsererror')[0].namespaceURI;\n\n  if (parsererrorNS === 'http://www.w3.org/1999/xhtml') {\n    // In PhantomJS the parseerror element doesn't seem to have a special namespace,\n    // so we are just guessing here :(\n    const errorElements = parsedDocument.getElementsByTagName('parsererror');\n    return errorElements.length ? errorElements[0].innerHTML : null;\n  }\n\n  return parsedDocument.getElementsByTagNameNS(parsererrorNS, 'parsererror').length > 0;\n}\n"]},"metadata":{},"sourceType":"module"}