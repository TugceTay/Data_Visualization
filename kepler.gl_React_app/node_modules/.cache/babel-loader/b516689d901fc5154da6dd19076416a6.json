{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toggleSplitMap = exports.updateMap = exports.fitBounds = exports.togglePerspective = void 0;\nvar _reduxActions = require(\"redux-actions\");\nvar _actionTypes = _interopRequireDefault(require(\"../constants/action-types\"));\n\n// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/**\n *\n * Toggle between 3d and 2d map.\n * @memberof mapStateActions\n * @public\n * @example\n * import {togglePerspective} from 'kepler.gl/actions';\n * this.props.dispatch(togglePerspective());\n */\nvar togglePerspective = (0, _reduxActions.createAction)(_actionTypes[\"default\"].TOGGLE_PERSPECTIVE);\n/**\n * Fit map viewport to bounds\n * @memberof mapStateActions\n * @param {Array<Number>} bounds as `[lngMin, latMin, lngMax, latMax]`\n * @public\n * @example\n * import {fitBounds} from 'kepler.gl/actions';\n * this.props.dispatch(fitBounds([-122.23, 37.127, -122.11, 37.456]));\n */\n\nexports.togglePerspective = togglePerspective;\nvar fitBounds = (0, _reduxActions.createAction)(_actionTypes[\"default\"].FIT_BOUNDS, function (bounds) {\n  return bounds;\n});\n/**\n * Update map viewport\n * @memberof mapStateActions\n * @param {Object} viewport viewport object container one or any of these properties `width`, `height`, `latitude` `longitude`, `zoom`, `pitch`, `bearing`, `dragRotate`\n * @param {Number} [viewport.width] Width of viewport\n * @param {Number} [viewport.height] Height of viewport\n * @param {Number} [viewport.zoom] Zoom of viewport\n * @param {Number} [viewport.pitch] Camera angle in degrees (0 is straight down)\n * @param {Number} [viewport.bearing] Map rotation in degrees (0 means north is up)\n * @param {Number} [viewport.latitude] Latitude center of viewport on map in mercator projection\n * @param {Number} [viewport.longitude] Longitude Center of viewport on map in mercator projection\n * @param {boolean} [viewport.dragRotate] Whether to enable drag and rotate map into perspective viewport\n * @public\n * @example\n * import {updateMap} from 'kepler.gl/actions';\n * this.props.dispatch(updateMap({latitude: 37.75043, longitude: -122.34679, width: 800, height: 1200}));\n */\n\nexports.fitBounds = fitBounds;\nvar updateMap = (0, _reduxActions.createAction)(_actionTypes[\"default\"].UPDATE_MAP, function (viewport) {\n  return viewport;\n});\n/**\n * Toggle between single map or split maps\n * @memberof mapStateActions\n * @param {Number} [index] index is provided, close split map at index\n * @public\n * @example\n * import {toggleSplitMap} from 'kepler.gl/actions';\n * this.props.dispatch(toggleSplitMap());\n */\n\nexports.updateMap = updateMap;\nvar toggleSplitMap = (0, _reduxActions.createAction)(_actionTypes[\"default\"].TOGGLE_SPLIT_MAP, function (index) {\n  return index;\n});\n/**\n * This declaration is needed to group actions in docs\n */\n\n/**\n * Actions handled mostly by  `mapState` reducer.\n * They manage map viewport update, toggle between 2d and 3d map,\n * toggle between single and split maps.\n *\n * @public\n */\n\n/* eslint-disable no-unused-vars */\n// @ts-ignore\n\nexports.toggleSplitMap = toggleSplitMap;\nvar mapStateActions = null;\n/* eslint-enable no-unused-vars */","map":{"version":3,"sources":["../../src/actions/map-state-actions.js"],"names":["togglePerspective","ActionTypes","TOGGLE_PERSPECTIVE","fitBounds","FIT_BOUNDS","bounds","updateMap","UPDATE_MAP","viewport","toggleSplitMap","TOGGLE_SPLIT_MAP","index","mapStateActions"],"mappings":";;;;;;;AAoBA,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AACA,IAAA,YAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,2BAAA,CAAA,CAAA;;AArBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMA,iBAAiB,GAAG,CAAA,CAAA,EAAA,aAAA,CAAA,YAAA,EAAaC,YAAAA,CAAAA,SAAAA,CAAAA,CAAYC,kBAAzB,CAA1B;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,IAAMC,SAAS,GAAG,CAAA,CAAA,EAAA,aAAA,CAAA,YAAA,EAAaF,YAAAA,CAAAA,SAAAA,CAAAA,CAAYG,UAAzB,EAAqC,UAAA,MAAM,EAAA;EAAA,OAAIC,MAAJ;AAAA,CAA3C,CAAlB;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEO,IAAMC,SAAS,GAAG,CAAA,CAAA,EAAA,aAAA,CAAA,YAAA,EAAaL,YAAAA,CAAAA,SAAAA,CAAAA,CAAYM,UAAzB,EAAqC,UAAA,QAAQ,EAAA;EAAA,OAAIC,QAAJ;AAAA,CAA7C,CAAlB;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,IAAMC,cAAc,GAAG,CAAA,CAAA,EAAA,aAAA,CAAA,YAAA,EAAaR,YAAAA,CAAAA,SAAAA,CAAAA,CAAYS,gBAAzB,EAA2C,UAAA,KAAK,EAAA;EAAA,OAAIC,KAAJ;AAAA,CAAhD,CAAvB;AAEP;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;;AACA,IAAMC,eAAe,GAAG,IAAxB;AACA","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {createAction} from 'redux-actions';\nimport ActionTypes from 'constants/action-types';\n\n/**\n *\n * Toggle between 3d and 2d map.\n * @memberof mapStateActions\n * @public\n * @example\n * import {togglePerspective} from 'kepler.gl/actions';\n * this.props.dispatch(togglePerspective());\n */\nexport const togglePerspective = createAction(ActionTypes.TOGGLE_PERSPECTIVE);\n\n/**\n * Fit map viewport to bounds\n * @memberof mapStateActions\n * @param {Array<Number>} bounds as `[lngMin, latMin, lngMax, latMax]`\n * @public\n * @example\n * import {fitBounds} from 'kepler.gl/actions';\n * this.props.dispatch(fitBounds([-122.23, 37.127, -122.11, 37.456]));\n */\nexport const fitBounds = createAction(ActionTypes.FIT_BOUNDS, bounds => bounds);\n\n/**\n * Update map viewport\n * @memberof mapStateActions\n * @param {Object} viewport viewport object container one or any of these properties `width`, `height`, `latitude` `longitude`, `zoom`, `pitch`, `bearing`, `dragRotate`\n * @param {Number} [viewport.width] Width of viewport\n * @param {Number} [viewport.height] Height of viewport\n * @param {Number} [viewport.zoom] Zoom of viewport\n * @param {Number} [viewport.pitch] Camera angle in degrees (0 is straight down)\n * @param {Number} [viewport.bearing] Map rotation in degrees (0 means north is up)\n * @param {Number} [viewport.latitude] Latitude center of viewport on map in mercator projection\n * @param {Number} [viewport.longitude] Longitude Center of viewport on map in mercator projection\n * @param {boolean} [viewport.dragRotate] Whether to enable drag and rotate map into perspective viewport\n * @public\n * @example\n * import {updateMap} from 'kepler.gl/actions';\n * this.props.dispatch(updateMap({latitude: 37.75043, longitude: -122.34679, width: 800, height: 1200}));\n */\n\nexport const updateMap = createAction(ActionTypes.UPDATE_MAP, viewport => viewport);\n\n/**\n * Toggle between single map or split maps\n * @memberof mapStateActions\n * @param {Number} [index] index is provided, close split map at index\n * @public\n * @example\n * import {toggleSplitMap} from 'kepler.gl/actions';\n * this.props.dispatch(toggleSplitMap());\n */\nexport const toggleSplitMap = createAction(ActionTypes.TOGGLE_SPLIT_MAP, index => index);\n\n/**\n * This declaration is needed to group actions in docs\n */\n/**\n * Actions handled mostly by  `mapState` reducer.\n * They manage map viewport update, toggle between 2d and 3d map,\n * toggle between single and split maps.\n *\n * @public\n */\n/* eslint-disable no-unused-vars */\n// @ts-ignore\nconst mapStateActions = null;\n/* eslint-enable no-unused-vars */\n"]},"metadata":{},"sourceType":"script"}