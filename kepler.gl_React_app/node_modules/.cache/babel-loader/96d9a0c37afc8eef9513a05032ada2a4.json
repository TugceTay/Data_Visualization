{"ast":null,"code":"import { getBinaryImageMetadata } from '../category-api/binary-image-api';\nexport function isBinaryImage(arrayBuffer, mimeType) {\n  var metadata = getBinaryImageMetadata(arrayBuffer);\n  if (mimeType) {\n    return Boolean(metadata && metadata.mimeType === mimeType);\n  }\n  return Boolean(metadata);\n}\nexport function getBinaryImageMIMEType(arrayBuffer) {\n  var metadata = getBinaryImageMetadata(arrayBuffer);\n  return metadata ? metadata.mimeType : null;\n}\nexport function getBinaryImageSize(arrayBuffer) {\n  var mimeType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var metadata = getBinaryImageMetadata(arrayBuffer);\n  if (metadata) {\n    return {\n      width: metadata.width,\n      height: metadata.height\n    };\n  }\n  mimeType = mimeType || 'unknown';\n  throw new Error(\"invalid image data for type: \".concat(mimeType));\n}","map":{"version":3,"sources":["../../../../src/lib/deprecated/binary-image-api-deprecated.js"],"names":["getBinaryImageMetadata","isBinaryImage","arrayBuffer","mimeType","metadata","Boolean","getBinaryImageMIMEType","getBinaryImageSize","width","height","Error"],"mappings":"AAAA,SAAQA,sBAAR,QAAqC,kCAArC;AAGA,OAAO,SAASC,aAAT,CAAuBC,WAAvB,EAAoCC,QAApC,EAA8C;EACnD,IAAMC,QAAQ,GAAGJ,sBAAsB,CAACE,WAAD,CAAvC;EACA,IAAIC,QAAJ,EAAc;IACZ,OAAOE,OAAO,CAACD,QAAQ,IAAIA,QAAQ,CAACD,QAATC,KAAsBD,QAAnC,CAAd;EACD;EAED,OAAOE,OAAO,CAACD,QAAD,CAAd;AACD;AAGD,OAAO,SAASE,sBAAT,CAAgCJ,WAAhC,EAA6C;EAClD,IAAME,QAAQ,GAAGJ,sBAAsB,CAACE,WAAD,CAAvC;EACA,OAAOE,QAAQ,GAAGA,QAAQ,CAACD,QAAZ,GAAuB,IAAtC;AACD;AAED,OAAO,SAASI,kBAAT,CAA4BL,WAA5B,EAA0D;EAAA,IAAjBC,QAAiB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAN,IAAM;EAC/D,IAAMC,QAAQ,GAAGJ,sBAAsB,CAACE,WAAD,CAAvC;EAEA,IAAIE,QAAJ,EAAc;IACZ,OAAO;MACLI,KAAK,EAAEJ,QAAQ,CAACI,KADX;MAELC,MAAM,EAAEL,QAAQ,CAACK;IAFZ,CAAP;EAID;EAEDN,QAAQ,GAAGA,QAAQ,IAAI,SAAvBA;EACA,MAAM,IAAIO,KAAJ,CAAA,+BAAA,CAAA,MAAA,CAA0CP,QAA1C,CAAA,CAAN;AACD","sourcesContent":["import {getBinaryImageMetadata} from '../category-api/binary-image-api';\n\n// Supported image types are PNG, JPEG, GIF and BMP.\nexport function isBinaryImage(arrayBuffer, mimeType) {\n  const metadata = getBinaryImageMetadata(arrayBuffer);\n  if (mimeType) {\n    return Boolean(metadata && metadata.mimeType === mimeType);\n  }\n  // return true if any known type\n  return Boolean(metadata);\n}\n\n// Sniffs the contents of a file to attempt to deduce the image type\nexport function getBinaryImageMIMEType(arrayBuffer) {\n  const metadata = getBinaryImageMetadata(arrayBuffer);\n  return metadata ? metadata.mimeType : null;\n}\n\nexport function getBinaryImageSize(arrayBuffer, mimeType = null) {\n  const metadata = getBinaryImageMetadata(arrayBuffer);\n\n  if (metadata) {\n    return {\n      width: metadata.width,\n      height: metadata.height\n    };\n  }\n\n  mimeType = mimeType || 'unknown';\n  throw new Error(`invalid image data for type: ${mimeType}`);\n}\n"]},"metadata":{},"sourceType":"module"}