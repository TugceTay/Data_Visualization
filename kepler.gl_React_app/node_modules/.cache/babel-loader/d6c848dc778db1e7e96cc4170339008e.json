{"ast":null,"code":"import { copyPaddedStringToDataView, copyPaddedArrayBufferToDataView } from '@loaders.gl/loader-utils';\nvar MAGIC_glTF = 0x46546c67;\nvar MAGIC_JSON = 0x4e4f534a;\nvar MAGIC_BIN = 0x004e4942;\nvar LE = true;\nexport default function encodeGLBSync(glb, dataView) {\n  var byteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var _glb$magic = glb.magic,\n    magic = _glb$magic === void 0 ? MAGIC_glTF : _glb$magic,\n    _glb$version = glb.version,\n    version = _glb$version === void 0 ? 2 : _glb$version,\n    _glb$json = glb.json,\n    json = _glb$json === void 0 ? {} : _glb$json,\n    binary = glb.binary;\n  var byteOffsetStart = byteOffset;\n  if (dataView) {\n    dataView.setUint32(byteOffset + 0, magic, LE);\n    dataView.setUint32(byteOffset + 4, version, LE);\n    dataView.setUint32(byteOffset + 8, 0, LE);\n  }\n  var byteOffsetFileLength = byteOffset + 8;\n  byteOffset += 12;\n  var byteOffsetJsonHeader = byteOffset;\n  if (dataView) {\n    dataView.setUint32(byteOffset + 0, 0, LE);\n    dataView.setUint32(byteOffset + 4, MAGIC_JSON, LE);\n  }\n  byteOffset += 8;\n  var jsonString = JSON.stringify(json);\n  byteOffset = copyPaddedStringToDataView(dataView, byteOffset, jsonString);\n  if (dataView) {\n    var jsonByteLength = byteOffset - byteOffsetJsonHeader - 8;\n    dataView.setUint32(byteOffsetJsonHeader + 0, jsonByteLength, LE);\n  }\n  if (binary) {\n    var byteOffsetBinHeader = byteOffset;\n    if (dataView) {\n      dataView.setUint32(byteOffset + 0, 0, LE);\n      dataView.setUint32(byteOffset + 4, MAGIC_BIN, LE);\n    }\n    byteOffset += 8;\n    byteOffset = copyPaddedArrayBufferToDataView(dataView, byteOffset, binary);\n    if (dataView) {\n      var binByteLength = byteOffset - byteOffsetBinHeader - 8;\n      dataView.setUint32(byteOffsetBinHeader + 0, binByteLength, LE);\n    }\n  }\n  if (dataView) {\n    var fileByteLength = byteOffset - byteOffsetStart;\n    dataView.setUint32(byteOffsetFileLength, fileByteLength, LE);\n  }\n  return byteOffset;\n}","map":{"version":3,"sources":["../../../src/lib/encode-glb.js"],"names":["copyPaddedStringToDataView","copyPaddedArrayBufferToDataView","MAGIC_glTF","MAGIC_JSON","MAGIC_BIN","LE","encodeGLBSync","glb","dataView","byteOffset","options","magic","version","json","binary","byteOffsetStart","setUint32","byteOffsetFileLength","byteOffsetJsonHeader","jsonString","JSON","stringify","jsonByteLength","byteOffsetBinHeader","binByteLength","fileByteLength"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase, max-statements */\nimport {\n  copyPaddedStringToDataView,\n  copyPaddedArrayBufferToDataView\n} from '@loaders.gl/loader-utils';\n\nconst MAGIC_glTF = 0x46546c67; // glTF in ASCII\nconst MAGIC_JSON = 0x4e4f534a; // JSON in ASCII\nconst MAGIC_BIN = 0x004e4942; // BIN\\0 in ASCII\n\nconst LE = true; // Binary GLTF is little endian.\n\n// Encode the full GLB buffer with header etc\n// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#\n// glb-file-format-specification\nexport default function encodeGLBSync(glb, dataView, byteOffset = 0, options = {}) {\n  const {magic = MAGIC_glTF, version = 2, json = {}, binary} = glb;\n\n  const byteOffsetStart = byteOffset;\n\n  // Write GLB Header\n  if (dataView) {\n    dataView.setUint32(byteOffset + 0, magic, LE); // Magic number (the ASCII string 'glTF').\n    dataView.setUint32(byteOffset + 4, version, LE); // Version 2 of binary glTF container format uint32\n    dataView.setUint32(byteOffset + 8, 0, LE); // Total byte length of generated file (uint32), will be set last\n  }\n  const byteOffsetFileLength = byteOffset + 8;\n  byteOffset += 12; // GLB_FILE_HEADER_SIZE\n\n  // Write the JSON chunk header\n  const byteOffsetJsonHeader = byteOffset;\n  if (dataView) {\n    dataView.setUint32(byteOffset + 0, 0, LE); // Byte length of json chunk (will be written later)\n    dataView.setUint32(byteOffset + 4, MAGIC_JSON, LE); // Chunk type\n  }\n  byteOffset += 8; // GLB_CHUNK_HEADER_SIZE\n\n  // Write the JSON chunk\n  const jsonString = JSON.stringify(json);\n  byteOffset = copyPaddedStringToDataView(dataView, byteOffset, jsonString);\n\n  // Now we know the JSON chunk length so we can write it.\n  if (dataView) {\n    const jsonByteLength = byteOffset - byteOffsetJsonHeader - 8; // GLB_CHUNK_HEADER_SIZE\n    dataView.setUint32(byteOffsetJsonHeader + 0, jsonByteLength, LE); // Byte length of json chunk (uint32)\n  }\n\n  // Write the BIN chunk if present. The BIN chunk is optional.\n  if (binary) {\n    const byteOffsetBinHeader = byteOffset;\n\n    // Write the BIN chunk header\n    if (dataView) {\n      dataView.setUint32(byteOffset + 0, 0, LE); // Byte length BIN (uint32)\n      dataView.setUint32(byteOffset + 4, MAGIC_BIN, LE); // Chunk type\n    }\n    byteOffset += 8; // GLB_CHUNK_HEADER_SIZE\n\n    byteOffset = copyPaddedArrayBufferToDataView(dataView, byteOffset, binary);\n\n    // Now we know the BIN chunk length so we can write it.\n    if (dataView) {\n      const binByteLength = byteOffset - byteOffsetBinHeader - 8; // GLB_CHUNK_HEADER_SIZE\n      dataView.setUint32(byteOffsetBinHeader + 0, binByteLength, LE); // Byte length BIN (uint32)\n    }\n  }\n\n  // Now we know the glb file length so we can write it.\n  if (dataView) {\n    const fileByteLength = byteOffset - byteOffsetStart;\n    dataView.setUint32(byteOffsetFileLength, fileByteLength, LE); // Total byte length of generated file (uint32)\n  }\n\n  return byteOffset;\n}\n"]},"metadata":{},"sourceType":"module"}