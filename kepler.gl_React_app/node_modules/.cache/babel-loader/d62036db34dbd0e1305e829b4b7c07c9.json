{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nvar PERCENT_OR_PIXELS_REGEX = /([0-9]+\\.?[0-9]*)(%|px)/;\nexport function parsePosition(value) {\n  switch (_typeof(value)) {\n    case 'number':\n      return {\n        position: value,\n        relative: false\n      };\n    case 'string':\n      var match = value.match(PERCENT_OR_PIXELS_REGEX);\n      if (match && match.length >= 3) {\n        var relative = match[2] === '%';\n        var position = parseFloat(match[1]);\n        return {\n          position: relative ? position / 100 : position,\n          relative: relative\n        };\n      }\n    default:\n      throw new Error(\"Could not parse position string \".concat(value));\n  }\n}\nexport function getPosition(position, extent) {\n  return position.relative ? Math.round(position.position * extent) : position.position;\n}","map":{"version":3,"sources":["../../../src/utils/positions.js"],"names":["PERCENT_OR_PIXELS_REGEX","parsePosition","value","position","relative","match","length","parseFloat","Error","getPosition","extent","Math","round"],"mappings":";AAAA,IAAMA,uBAAuB,GAAG,yBAAhC;AAGA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;EACnC,QAAA,OAAA,CAAeA,KAAf,CAAA;IACE,KAAK,QAAL;MACE,OAAO;QACLC,QAAQ,EAAED,KADL;QAELE,QAAQ,EAAE;MAFL,CAAP;IAKF,KAAK,QAAL;MACE,IAAMC,KAAK,GAAGH,KAAK,CAACG,KAANH,CAAYF,uBAAZE,CAAd;MACA,IAAIG,KAAK,IAAIA,KAAK,CAACC,MAAND,IAAgB,CAA7B,EAAgC;QAC9B,IAAMD,QAAQ,GAAGC,KAAK,CAAC,CAAD,CAALA,KAAa,GAA9B;QACA,IAAMF,QAAQ,GAAGI,UAAU,CAACF,KAAK,CAAC,CAAD,CAAN,CAA3B;QACA,OAAO;UACLF,QAAQ,EAAEC,QAAQ,GAAGD,QAAQ,GAAG,GAAd,GAAoBA,QADjC;UAELC,QAAQ,EAARA;QAFK,CAAP;MAID;IAGH;MAEE,MAAM,IAAII,KAAJ,CAAA,kCAAA,CAAA,MAAA,CAA6CN,KAA7C,CAAA,CAAN;EAAA;AAEL;AAED,OAAO,SAASO,WAAT,CAAqBN,QAArB,EAA+BO,MAA/B,EAAuC;EAC5C,OAAOP,QAAQ,CAACC,QAATD,GAAoBQ,IAAI,CAACC,KAALD,CAAWR,QAAQ,CAACA,QAATA,GAAoBO,MAA/BC,CAApBR,GAA6DA,QAAQ,CAACA,QAA7E;AACD","sourcesContent":["const PERCENT_OR_PIXELS_REGEX = /([0-9]+\\.?[0-9]*)(%|px)/;\n\n// Takes a number or a string of formats `50%`, `33.3%` or `200px`\nexport function parsePosition(value) {\n  switch (typeof value) {\n    case 'number':\n      return {\n        position: value,\n        relative: false\n      };\n\n    case 'string':\n      const match = value.match(PERCENT_OR_PIXELS_REGEX);\n      if (match && match.length >= 3) {\n        const relative = match[2] === '%';\n        const position = parseFloat(match[1]);\n        return {\n          position: relative ? position / 100 : position,\n          relative\n        };\n      }\n    // fallthrough\n\n    default:\n      // eslint-disable-line\n      throw new Error(`Could not parse position string ${value}`);\n  }\n}\n\nexport function getPosition(position, extent) {\n  return position.relative ? Math.round(position.position * extent) : position.position;\n}\n"]},"metadata":{},"sourceType":"module"}