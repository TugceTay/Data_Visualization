{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { path } from '@loaders.gl/loader-utils';\nimport { TILESET_TYPE, LOD_METRIC_TYPE } from '@loaders.gl/tiles';\nimport { parse3DTile } from './lib/parsers/parse-3d-tile';\nimport { normalizeTileHeaders } from './lib/parsers/parse-3d-tile-header';\nvar VERSION = typeof \"2.3.13\" !== 'undefined' ? \"2.3.13\" : 'latest';\nfunction getBaseUri(tileset) {\n  return path.dirname(tileset.url);\n}\nfunction parseTile(_x, _x2, _x3) {\n  return _parseTile.apply(this, arguments);\n}\nfunction _parseTile() {\n  _parseTile = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer, options, context) {\n    var tile, byteOffset;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            tile = {};\n            tile.content = tile.content || {};\n            byteOffset = 0;\n            _context.next = 5;\n            return parse3DTile(arrayBuffer, byteOffset, options, context, tile.content);\n          case 5:\n            return _context.abrupt(\"return\", tile.content);\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseTile.apply(this, arguments);\n}\nfunction parseTileset(_x4, _x5, _x6) {\n  return _parseTileset.apply(this, arguments);\n}\nfunction _parseTileset() {\n  _parseTileset = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(data, options, context) {\n    var tilesetJson;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            tilesetJson = JSON.parse(new TextDecoder().decode(data));\n            tilesetJson.loader = options.loader || Tiles3DLoader;\n            tilesetJson.url = context.url;\n            tilesetJson.basePath = getBaseUri(tilesetJson);\n            tilesetJson.root = normalizeTileHeaders(tilesetJson);\n            tilesetJson.type = TILESET_TYPE.TILES3D;\n            tilesetJson.lodMetricType = LOD_METRIC_TYPE.GEOMETRIC_ERROR;\n            tilesetJson.lodMetricValue = tilesetJson.root.lodMetricValue;\n            return _context2.abrupt(\"return\", tilesetJson);\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _parseTileset.apply(this, arguments);\n}\nfunction parse(_x7, _x8, _x9, _x10) {\n  return _parse.apply(this, arguments);\n}\nfunction _parse() {\n  _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(data, options, context, loader) {\n    var loaderOptions, isTileset;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            loaderOptions = options['3d-tiles'] || {};\n            if (loaderOptions.isTileset === 'auto') {\n              isTileset = context.url && context.url.indexOf('.json') !== -1;\n            } else {\n              isTileset = loaderOptions.isTileset;\n            }\n            if (!isTileset) {\n              _context3.next = 8;\n              break;\n            }\n            _context3.next = 5;\n            return parseTileset(data, options, context);\n          case 5:\n            data = _context3.sent;\n            _context3.next = 11;\n            break;\n          case 8:\n            _context3.next = 10;\n            return parseTile(data, options, context);\n          case 10:\n            data = _context3.sent;\n          case 11:\n            return _context3.abrupt(\"return\", data);\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _parse.apply(this, arguments);\n}\nvar Tiles3DLoader = {\n  id: '3d-tiles',\n  name: '3D Tiles',\n  version: VERSION,\n  extensions: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  mimeTypes: ['application/octet-stream'],\n  tests: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  parse: parse,\n  options: {\n    '3d-tiles': {\n      loadGLTF: true,\n      decodeQuantizedPositions: false,\n      isTileset: 'auto',\n      tile: null,\n      tileset: null,\n      assetGltfUpAxis: null\n    }\n  }\n};\nexport default Tiles3DLoader;","map":{"version":3,"sources":["../../src/tiles-3d-loader.js"],"names":["path","TILESET_TYPE","LOD_METRIC_TYPE","parse3DTile","normalizeTileHeaders","VERSION","getBaseUri","tileset","dirname","url","parseTile","arrayBuffer","options","context","tile","content","byteOffset","parseTileset","data","tilesetJson","JSON","parse","TextDecoder","decode","loader","Tiles3DLoader","basePath","root","type","TILES3D","lodMetricType","GEOMETRIC_ERROR","lodMetricValue","loaderOptions","isTileset","indexOf","id","name","version","extensions","mimeTypes","tests","loadGLTF","decodeQuantizedPositions","assetGltfUpAxis"],"mappings":"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","sourcesContent":["/* global TextDecoder */\n/** @typedef {import('@loaders.gl/loader-utils').LoaderObject} LoaderObject */\n/** @typedef {import('@loaders.gl/loader-utils').WorkerLoaderObject} WorkerLoaderObject */\nimport {path} from '@loaders.gl/loader-utils';\nimport {TILESET_TYPE, LOD_METRIC_TYPE} from '@loaders.gl/tiles';\nimport {parse3DTile} from './lib/parsers/parse-3d-tile';\nimport {normalizeTileHeaders} from './lib/parsers/parse-3d-tile-header';\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nfunction getBaseUri(tileset) {\n  return path.dirname(tileset.url);\n}\n\nasync function parseTile(arrayBuffer, options, context) {\n  const tile = {};\n  tile.content = tile.content || {};\n  const byteOffset = 0;\n  await parse3DTile(arrayBuffer, byteOffset, options, context, tile.content);\n  return tile.content;\n}\n\nasync function parseTileset(data, options, context) {\n  const tilesetJson = JSON.parse(new TextDecoder().decode(data));\n  // eslint-disable-next-line no-use-before-define\n  tilesetJson.loader = options.loader || Tiles3DLoader;\n  tilesetJson.url = context.url;\n  // base path that non-absolute paths in tileset are relative to.\n  tilesetJson.basePath = getBaseUri(tilesetJson);\n  tilesetJson.root = normalizeTileHeaders(tilesetJson);\n  tilesetJson.type = TILESET_TYPE.TILES3D;\n\n  tilesetJson.lodMetricType = LOD_METRIC_TYPE.GEOMETRIC_ERROR;\n  tilesetJson.lodMetricValue = tilesetJson.root.lodMetricValue;\n\n  return tilesetJson;\n}\n\nasync function parse(data, options, context, loader) {\n  // auto detect file type\n  const loaderOptions = options['3d-tiles'] || {};\n  let isTileset;\n  if (loaderOptions.isTileset === 'auto') {\n    isTileset = context.url && context.url.indexOf('.json') !== -1;\n  } else {\n    isTileset = loaderOptions.isTileset;\n  }\n\n  if (isTileset) {\n    data = await parseTileset(data, options, context);\n  } else {\n    data = await parseTile(data, options, context);\n  }\n\n  return data;\n}\n\n/** @type {LoaderObject} */\nconst Tiles3DLoader = {\n  id: '3d-tiles',\n  name: '3D Tiles',\n  version: VERSION,\n  extensions: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  mimeTypes: ['application/octet-stream'],\n  tests: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  parse,\n  options: {\n    '3d-tiles': {\n      loadGLTF: true,\n      decodeQuantizedPositions: false,\n      isTileset: 'auto',\n      tile: null,\n      tileset: null,\n      assetGltfUpAxis: null\n    }\n  }\n};\n\nexport default Tiles3DLoader;\n"]},"metadata":{},"sourceType":"module"}