{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.KeplerGLSchema = exports.reducerSchema = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _window = require(\"global/window\");\nvar _visStateSchema = _interopRequireDefault(require(\"./vis-state-schema\"));\nvar _datasetSchema = _interopRequireDefault(require(\"./dataset-schema\"));\nvar _mapStyleSchema = _interopRequireDefault(require(\"./map-style-schema\"));\nvar _mapStateSchema = _interopRequireDefault(require(\"./map-state-schema\"));\nvar _versions = require(\"./versions\");\nvar _utils = require(\"../utils/utils\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar reducerSchema = {\n  visState: _visStateSchema[\"default\"],\n  mapState: _mapStateSchema[\"default\"],\n  mapStyle: _mapStyleSchema[\"default\"]\n};\n/** @type {typeof import('./schema-manager').KeplerGLSchema} */\n\nexports.reducerSchema = reducerSchema;\nvar KeplerGLSchema = /*#__PURE__*/function () {\n  function KeplerGLSchema() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$reducers = _ref.reducers,\n      reducers = _ref$reducers === void 0 ? reducerSchema : _ref$reducers,\n      _ref$datasets = _ref.datasets,\n      datasets = _ref$datasets === void 0 ? _datasetSchema[\"default\"] : _ref$datasets,\n      _ref$validVersions = _ref.validVersions,\n      validVersions = _ref$validVersions === void 0 ? _versions.VERSIONS : _ref$validVersions,\n      _ref$version = _ref.version,\n      version = _ref$version === void 0 ? _versions.CURRENT_VERSION : _ref$version;\n    (0, _classCallCheck2[\"default\"])(this, KeplerGLSchema);\n    this._validVersions = validVersions;\n    this._version = version;\n    this._reducerSchemas = reducers;\n    this._datasetSchema = datasets;\n    this._datasetLastSaved = null;\n    this._savedDataset = null;\n  }\n  /**\n   * stateToSave = {\n   *   datasets: [\n   *     {\n   *       version: 'v0',\n   *       data: {id, label, color, allData, fields}\n   *     },\n   *     {\n   *       version: 'v0',\n   *       data: {id, label, color, allData, fields}\n   *     }\n   *   ],\n   *   config: {\n   *     version: 'v0',\n   *     config: {}\n   *   },\n   *   info: {\n   *     app: 'kepler.gl',\n   *     create_at: 'Mon May 28 2018 21:04:46 GMT-0700 (PDT)'\n   *   }\n   * }\n   *\n   * Get config and data of current map to save\n   * @param state\n   * @returns app state to save\n   */\n\n  (0, _createClass2[\"default\"])(KeplerGLSchema, [{\n    key: \"save\",\n    value: function save(state) {\n      return {\n        datasets: this.getDatasetToSave(state),\n        config: this.getConfigToSave(state),\n        info: _objectSpread({\n          app: 'kepler.gl',\n          created_at: new Date().toString()\n        }, this.getMapInfo(state))\n      };\n    }\n  }, {\n    key: \"getMapInfo\",\n    value: function getMapInfo(state) {\n      return state.visState.mapInfo;\n    }\n    /**\n     *  Load saved map, argument can be (datasets, config) or ({datasets, config})\n     * @param savedDatasets\n     * @param savedConfig\n     */\n  }, {\n    key: \"load\",\n    value: function load(savedDatasets, savedConfig) {\n      // if pass dataset and config in as a single object\n      if (arguments.length === 1 && (0, _utils.isPlainObject)(arguments[0]) && (Array.isArray(arguments[0].datasets) || (0, _utils.isPlainObject)(arguments[0].config))) {\n        return this.load(arguments[0].datasets, arguments[0].config);\n      }\n      return _objectSpread(_objectSpread({}, Array.isArray(savedDatasets) ? {\n        datasets: this.parseSavedData(savedDatasets)\n      } : {}), savedConfig ? {\n        config: this.parseSavedConfig(savedConfig)\n      } : {});\n    }\n    /**\n     * Get data to save\n     * @param state - app state\n     * @returns - dataset to save\n     */\n  }, {\n    key: \"getDatasetToSave\",\n    value: function getDatasetToSave(state) {\n      var _this = this;\n      var dataChangedSinceLastSave = this.hasDataChanged(state);\n      if (!dataChangedSinceLastSave) {\n        return this._savedDataset;\n      }\n      var visState = state.visState;\n      var datasets = Object.values(visState.datasets).map(function (ds) {\n        return {\n          version: _this._version,\n          data: _this._datasetSchema[_this._version].save(ds)\n        };\n      }); // keep a copy of formatted datasets to save\n\n      this._datasetLastSaved = visState.datasets;\n      this._savedDataset = datasets;\n      return datasets;\n    }\n    /**\n     * Get App config to save\n     * @param {Object} state - app state\n     * @returns {{version: String, config: Object}} - config to save\n     */\n  }, {\n    key: \"getConfigToSave\",\n    value: function getConfigToSave(state) {\n      var _this2 = this;\n      var config = Object.keys(this._reducerSchemas).reduce(function (accu, key) {\n        return _objectSpread(_objectSpread({}, accu), state[key] ? _this2._reducerSchemas[key][_this2._version].save(state[key]) : {});\n      }, {});\n      return {\n        version: this._version,\n        config: config\n      };\n    }\n    /**\n     * Parse saved data\n     * @param datasets\n     * @returns - dataset to pass to addDataToMap\n     */\n  }, {\n    key: \"parseSavedData\",\n    value: function parseSavedData(datasets) {\n      var _this3 = this;\n      return datasets.reduce(function (accu, ds) {\n        var validVersion = _this3.validateVersion(ds.version);\n        if (!validVersion) {\n          return accu;\n        }\n        accu.push(_this3._datasetSchema[validVersion].load(ds.data));\n        return accu;\n      }, []);\n    }\n    /**\n     * Parse saved App config\n     */\n  }, {\n    key: \"parseSavedConfig\",\n    value: function parseSavedConfig(_ref2) {\n      var _this4 = this;\n      var version = _ref2.version,\n        config = _ref2.config;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var validVersion = this.validateVersion(version);\n      if (!validVersion) {\n        return null;\n      }\n      return Object.keys(config).reduce(function (accu, key) {\n        return _objectSpread(_objectSpread({}, accu), key in _this4._reducerSchemas ? _this4._reducerSchemas[key][validVersion].load(config[key]) : {});\n      }, {});\n    }\n    /**\n     * Validate version\n     * @param version\n     * @returns validVersion\n     */\n  }, {\n    key: \"validateVersion\",\n    value: function validateVersion(version) {\n      if (!version) {\n        _window.console.error('There is no version number associated with this saved map');\n        return null;\n      }\n      if (!this._validVersions[version]) {\n        _window.console.error(\"\".concat(version, \" is not a valid version\"));\n        return null;\n      }\n      return version;\n    }\n    /**\n     * Check if data has changed since last save\n     * @param state\n     * @returns - whether data has changed or not\n     */\n  }, {\n    key: \"hasDataChanged\",\n    value: function hasDataChanged(state) {\n      return this._datasetLastSaved !== state.visState.datasets;\n    }\n  }]);\n  return KeplerGLSchema;\n}();\nexports.KeplerGLSchema = KeplerGLSchema;\nvar KeplerGLSchemaManager = new KeplerGLSchema();\nvar _default = KeplerGLSchemaManager;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../../src/schemas/schema-manager.js"],"names":["reducerSchema","visState","visStateSchema","mapState","mapStateSchema","mapStyle","mapStyleSchema","KeplerGLSchema","reducers","datasets","datasetSchema","validVersions","VERSIONS","version","CURRENT_VERSION","_validVersions","_version","_reducerSchemas","_datasetSchema","_datasetLastSaved","_savedDataset","state","getDatasetToSave","config","getConfigToSave","info","app","created_at","Date","toString","getMapInfo","mapInfo","savedDatasets","savedConfig","arguments","length","Array","isArray","load","parseSavedData","parseSavedConfig","dataChangedSinceLastSave","hasDataChanged","values","map","data","save","ds","keys","reduce","accu","key","validVersion","validateVersion","push","Console","error","KeplerGLSchemaManager"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {console as Console} from 'global/window';\n\nimport visStateSchema from './vis-state-schema';\nimport datasetSchema from './dataset-schema';\nimport mapStyleSchema from './map-style-schema';\nimport mapStateSchema from './map-state-schema';\n\nimport {CURRENT_VERSION, VERSIONS} from './versions';\nimport {isPlainObject} from 'utils/utils';\n\nexport const reducerSchema = {\n  visState: visStateSchema,\n  mapState: mapStateSchema,\n  mapStyle: mapStyleSchema\n};\n\n/** @type {typeof import('./schema-manager').KeplerGLSchema} */\nexport class KeplerGLSchema {\n  constructor({\n    reducers = reducerSchema,\n    datasets = datasetSchema,\n    validVersions = VERSIONS,\n    version = CURRENT_VERSION\n  } = {}) {\n    this._validVersions = validVersions;\n    this._version = version;\n    this._reducerSchemas = reducers;\n    this._datasetSchema = datasets;\n\n    this._datasetLastSaved = null;\n    this._savedDataset = null;\n  }\n\n  /**\n   * stateToSave = {\n   *   datasets: [\n   *     {\n   *       version: 'v0',\n   *       data: {id, label, color, allData, fields}\n   *     },\n   *     {\n   *       version: 'v0',\n   *       data: {id, label, color, allData, fields}\n   *     }\n   *   ],\n   *   config: {\n   *     version: 'v0',\n   *     config: {}\n   *   },\n   *   info: {\n   *     app: 'kepler.gl',\n   *     create_at: 'Mon May 28 2018 21:04:46 GMT-0700 (PDT)'\n   *   }\n   * }\n   *\n   * Get config and data of current map to save\n   * @param state\n   * @returns app state to save\n   */\n  save(state) {\n    return {\n      datasets: this.getDatasetToSave(state),\n      config: this.getConfigToSave(state),\n      info: {\n        app: 'kepler.gl',\n        created_at: new Date().toString(),\n        ...this.getMapInfo(state)\n      }\n    };\n  }\n\n  getMapInfo(state) {\n    return state.visState.mapInfo;\n  }\n  /**\n   *  Load saved map, argument can be (datasets, config) or ({datasets, config})\n   * @param savedDatasets\n   * @param savedConfig\n   */\n  load(savedDatasets, savedConfig) {\n    // if pass dataset and config in as a single object\n    if (\n      arguments.length === 1 &&\n      isPlainObject(arguments[0]) &&\n      (Array.isArray(arguments[0].datasets) || isPlainObject(arguments[0].config))\n    ) {\n      return this.load(arguments[0].datasets, arguments[0].config);\n    }\n\n    return {\n      ...(Array.isArray(savedDatasets) ? {datasets: this.parseSavedData(savedDatasets)} : {}),\n      ...(savedConfig ? {config: this.parseSavedConfig(savedConfig)} : {})\n    };\n  }\n\n  /**\n   * Get data to save\n   * @param state - app state\n   * @returns - dataset to save\n   */\n  getDatasetToSave(state) {\n    const dataChangedSinceLastSave = this.hasDataChanged(state);\n    if (!dataChangedSinceLastSave) {\n      return this._savedDataset;\n    }\n\n    const {visState} = state;\n\n    const datasets = Object.values(visState.datasets).map(ds => ({\n      version: this._version,\n      data: this._datasetSchema[this._version].save(ds)\n    }));\n\n    // keep a copy of formatted datasets to save\n    this._datasetLastSaved = visState.datasets;\n    this._savedDataset = datasets;\n\n    return datasets;\n  }\n\n  /**\n   * Get App config to save\n   * @param {Object} state - app state\n   * @returns {{version: String, config: Object}} - config to save\n   */\n  getConfigToSave(state) {\n    const config = Object.keys(this._reducerSchemas).reduce(\n      (accu, key) => ({\n        ...accu,\n        ...(state[key] ? this._reducerSchemas[key][this._version].save(state[key]) : {})\n      }),\n      {}\n    );\n\n    return {\n      version: this._version,\n      config\n    };\n  }\n\n  /**\n   * Parse saved data\n   * @param datasets\n   * @returns - dataset to pass to addDataToMap\n   */\n  parseSavedData(datasets) {\n    return datasets.reduce((accu, ds) => {\n      const validVersion = this.validateVersion(ds.version);\n      if (!validVersion) {\n        return accu;\n      }\n      accu.push(this._datasetSchema[validVersion].load(ds.data));\n      return accu;\n    }, []);\n  }\n\n  /**\n   * Parse saved App config\n   */\n  parseSavedConfig({version, config}, state = {}) {\n    const validVersion = this.validateVersion(version);\n    if (!validVersion) {\n      return null;\n    }\n\n    return Object.keys(config).reduce(\n      (accu, key) => ({\n        ...accu,\n        ...(key in this._reducerSchemas\n          ? this._reducerSchemas[key][validVersion].load(config[key])\n          : {})\n      }),\n      {}\n    );\n  }\n\n  /**\n   * Validate version\n   * @param version\n   * @returns validVersion\n   */\n  validateVersion(version) {\n    if (!version) {\n      Console.error('There is no version number associated with this saved map');\n      return null;\n    }\n\n    if (!this._validVersions[version]) {\n      Console.error(`${version} is not a valid version`);\n      return null;\n    }\n\n    return version;\n  }\n\n  /**\n   * Check if data has changed since last save\n   * @param state\n   * @returns - whether data has changed or not\n   */\n  hasDataChanged(state) {\n    return this._datasetLastSaved !== state.visState.datasets;\n  }\n}\n\nconst KeplerGLSchemaManager = new KeplerGLSchema();\n\nexport default KeplerGLSchemaManager;\n"]},"metadata":{},"sourceType":"script"}