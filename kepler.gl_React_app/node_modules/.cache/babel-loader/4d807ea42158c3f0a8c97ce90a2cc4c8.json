{"ast":null,"code":"/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport * as React from 'react';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\nimport { invariant } from '@formatjs/intl-utils';\nconst MINUTE = 60;\nconst HOUR = 60 * 60;\nconst DAY = 60 * 60 * 24;\nfunction selectUnit(seconds) {\n  const absValue = Math.abs(seconds);\n  if (absValue < MINUTE) {\n    return 'second';\n  }\n  if (absValue < HOUR) {\n    return 'minute';\n  }\n  if (absValue < DAY) {\n    return 'hour';\n  }\n  return 'day';\n}\nfunction getDurationInSeconds(unit) {\n  switch (unit) {\n    case 'second':\n      return 1;\n    case 'minute':\n      return MINUTE;\n    case 'hour':\n      return HOUR;\n    default:\n      return DAY;\n  }\n}\nfunction valueToSeconds(value, unit) {\n  if (!value) {\n    return 0;\n  }\n  switch (unit) {\n    case 'second':\n      return value;\n    case 'minute':\n      return value * MINUTE;\n    default:\n      return value * HOUR;\n  }\n}\nconst INCREMENTABLE_UNITS = ['second', 'minute', 'hour'];\nfunction canIncrement() {\n  let unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'second';\n  return INCREMENTABLE_UNITS.includes(unit);\n}\nexport class FormattedRelativeTime extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    // Public for testing\n    this._updateTimer = null;\n    this.state = {\n      prevUnit: this.props.unit,\n      prevValue: this.props.value,\n      currentValueInSeconds: canIncrement(this.props.unit) ? valueToSeconds(this.props.value, this.props.unit) : 0\n    };\n    invariant(!props.updateIntervalInSeconds || !!(props.updateIntervalInSeconds && canIncrement(props.unit)), 'Cannot schedule update with unit longer than hour');\n  }\n  scheduleNextUpdate(_ref, _ref2) {\n    let {\n      updateIntervalInSeconds,\n      unit\n    } = _ref;\n    let {\n      currentValueInSeconds\n    } = _ref2;\n    clearTimeout(this._updateTimer);\n    this._updateTimer = null;\n    // If there's no interval and we cannot increment this unit, do nothing\n    if (!updateIntervalInSeconds || !canIncrement(unit)) {\n      return;\n    }\n    // Figure out the next interesting time\n    const nextValueInSeconds = currentValueInSeconds - updateIntervalInSeconds;\n    const nextUnit = selectUnit(nextValueInSeconds);\n    // We've reached the max auto incrementable unit, don't schedule another update\n    if (nextUnit === 'day') {\n      return;\n    }\n    const unitDuration = getDurationInSeconds(nextUnit);\n    const remainder = nextValueInSeconds % unitDuration;\n    const prevInterestingValueInSeconds = nextValueInSeconds - remainder;\n    const nextInterestingValueInSeconds = prevInterestingValueInSeconds >= currentValueInSeconds ? prevInterestingValueInSeconds - unitDuration : prevInterestingValueInSeconds;\n    const delayInSeconds = Math.abs(nextInterestingValueInSeconds - currentValueInSeconds);\n    this._updateTimer = setTimeout(() => this.setState({\n      currentValueInSeconds: nextInterestingValueInSeconds\n    }), delayInSeconds * 1e3);\n  }\n  componentDidMount() {\n    this.scheduleNextUpdate(this.props, this.state);\n  }\n  componentDidUpdate() {\n    this.scheduleNextUpdate(this.props, this.state);\n  }\n  componentWillUnmount() {\n    clearTimeout(this._updateTimer);\n    this._updateTimer = null;\n  }\n  static getDerivedStateFromProps(props, state) {\n    if (props.unit !== state.prevUnit || props.value !== state.prevValue) {\n      return {\n        prevValue: props.value,\n        prevUnit: props.unit,\n        currentValueInSeconds: canIncrement(props.unit) ? valueToSeconds(props.value, props.unit) : 0\n      };\n    }\n    return null;\n  }\n  render() {\n    return React.createElement(Context.Consumer, null, intl => {\n      invariantIntlContext(intl);\n      const {\n        formatRelativeTime,\n        textComponent: Text\n      } = intl;\n      const {\n        children,\n        value,\n        unit,\n        updateIntervalInSeconds\n      } = this.props;\n      const {\n        currentValueInSeconds\n      } = this.state;\n      let currentValue = value || 0;\n      let currentUnit = unit;\n      if (canIncrement(unit) && typeof currentValueInSeconds === 'number' && updateIntervalInSeconds) {\n        currentUnit = selectUnit(currentValueInSeconds);\n        const unitDuration = getDurationInSeconds(currentUnit);\n        currentValue = Math.round(currentValueInSeconds / unitDuration);\n      }\n      const formattedRelativeTime = formatRelativeTime(currentValue, currentUnit, Object.assign({}, this.props));\n      if (typeof children === 'function') {\n        return children(formattedRelativeTime);\n      }\n      if (Text) {\n        return React.createElement(Text, null, formattedRelativeTime);\n      }\n      return formattedRelativeTime;\n    });\n  }\n}\nFormattedRelativeTime.displayName = 'FormattedRelativeTime';\nFormattedRelativeTime.defaultProps = {\n  value: 0,\n  unit: 'second'\n};\nexport default FormattedRelativeTime;","map":{"version":3,"names":["React","Context","invariantIntlContext","invariant","MINUTE","HOUR","DAY","selectUnit","seconds","absValue","Math","abs","getDurationInSeconds","unit","valueToSeconds","value","INCREMENTABLE_UNITS","canIncrement","includes","FormattedRelativeTime","PureComponent","constructor","props","_updateTimer","state","prevUnit","prevValue","currentValueInSeconds","updateIntervalInSeconds","scheduleNextUpdate","clearTimeout","nextValueInSeconds","nextUnit","unitDuration","remainder","prevInterestingValueInSeconds","nextInterestingValueInSeconds","delayInSeconds","setTimeout","setState","componentDidMount","componentDidUpdate","componentWillUnmount","getDerivedStateFromProps","render","createElement","Consumer","intl","formatRelativeTime","textComponent","Text","children","currentValue","currentUnit","round","formattedRelativeTime","Object","assign","displayName","defaultProps"],"sources":["C:/Users/tugcetay/Documents/github/Data_visualization/kepler.gl_React_app/my_app/node_modules/react-intl/lib/components/relative.js"],"sourcesContent":["/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport * as React from 'react';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\nimport { invariant } from '@formatjs/intl-utils';\nconst MINUTE = 60;\nconst HOUR = 60 * 60;\nconst DAY = 60 * 60 * 24;\nfunction selectUnit(seconds) {\n    const absValue = Math.abs(seconds);\n    if (absValue < MINUTE) {\n        return 'second';\n    }\n    if (absValue < HOUR) {\n        return 'minute';\n    }\n    if (absValue < DAY) {\n        return 'hour';\n    }\n    return 'day';\n}\nfunction getDurationInSeconds(unit) {\n    switch (unit) {\n        case 'second':\n            return 1;\n        case 'minute':\n            return MINUTE;\n        case 'hour':\n            return HOUR;\n        default:\n            return DAY;\n    }\n}\nfunction valueToSeconds(value, unit) {\n    if (!value) {\n        return 0;\n    }\n    switch (unit) {\n        case 'second':\n            return value;\n        case 'minute':\n            return value * MINUTE;\n        default:\n            return value * HOUR;\n    }\n}\nconst INCREMENTABLE_UNITS = ['second', 'minute', 'hour'];\nfunction canIncrement(unit = 'second') {\n    return INCREMENTABLE_UNITS.includes(unit);\n}\nexport class FormattedRelativeTime extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        // Public for testing\n        this._updateTimer = null;\n        this.state = {\n            prevUnit: this.props.unit,\n            prevValue: this.props.value,\n            currentValueInSeconds: canIncrement(this.props.unit)\n                ? valueToSeconds(this.props.value, this.props.unit)\n                : 0,\n        };\n        invariant(!props.updateIntervalInSeconds ||\n            !!(props.updateIntervalInSeconds && canIncrement(props.unit)), 'Cannot schedule update with unit longer than hour');\n    }\n    scheduleNextUpdate({ updateIntervalInSeconds, unit }, { currentValueInSeconds }) {\n        clearTimeout(this._updateTimer);\n        this._updateTimer = null;\n        // If there's no interval and we cannot increment this unit, do nothing\n        if (!updateIntervalInSeconds || !canIncrement(unit)) {\n            return;\n        }\n        // Figure out the next interesting time\n        const nextValueInSeconds = currentValueInSeconds - updateIntervalInSeconds;\n        const nextUnit = selectUnit(nextValueInSeconds);\n        // We've reached the max auto incrementable unit, don't schedule another update\n        if (nextUnit === 'day') {\n            return;\n        }\n        const unitDuration = getDurationInSeconds(nextUnit);\n        const remainder = nextValueInSeconds % unitDuration;\n        const prevInterestingValueInSeconds = nextValueInSeconds - remainder;\n        const nextInterestingValueInSeconds = prevInterestingValueInSeconds >= currentValueInSeconds\n            ? prevInterestingValueInSeconds - unitDuration\n            : prevInterestingValueInSeconds;\n        const delayInSeconds = Math.abs(nextInterestingValueInSeconds - currentValueInSeconds);\n        this._updateTimer = setTimeout(() => this.setState({\n            currentValueInSeconds: nextInterestingValueInSeconds,\n        }), delayInSeconds * 1e3);\n    }\n    componentDidMount() {\n        this.scheduleNextUpdate(this.props, this.state);\n    }\n    componentDidUpdate() {\n        this.scheduleNextUpdate(this.props, this.state);\n    }\n    componentWillUnmount() {\n        clearTimeout(this._updateTimer);\n        this._updateTimer = null;\n    }\n    static getDerivedStateFromProps(props, state) {\n        if (props.unit !== state.prevUnit || props.value !== state.prevValue) {\n            return {\n                prevValue: props.value,\n                prevUnit: props.unit,\n                currentValueInSeconds: canIncrement(props.unit)\n                    ? valueToSeconds(props.value, props.unit)\n                    : 0,\n            };\n        }\n        return null;\n    }\n    render() {\n        return (React.createElement(Context.Consumer, null, (intl) => {\n            invariantIntlContext(intl);\n            const { formatRelativeTime, textComponent: Text } = intl;\n            const { children, value, unit, updateIntervalInSeconds } = this.props;\n            const { currentValueInSeconds } = this.state;\n            let currentValue = value || 0;\n            let currentUnit = unit;\n            if (canIncrement(unit) &&\n                typeof currentValueInSeconds === 'number' &&\n                updateIntervalInSeconds) {\n                currentUnit = selectUnit(currentValueInSeconds);\n                const unitDuration = getDurationInSeconds(currentUnit);\n                currentValue = Math.round(currentValueInSeconds / unitDuration);\n            }\n            const formattedRelativeTime = formatRelativeTime(currentValue, currentUnit, Object.assign({}, this.props));\n            if (typeof children === 'function') {\n                return children(formattedRelativeTime);\n            }\n            if (Text) {\n                return React.createElement(Text, null, formattedRelativeTime);\n            }\n            return formattedRelativeTime;\n        }));\n    }\n}\nFormattedRelativeTime.displayName = 'FormattedRelativeTime';\nFormattedRelativeTime.defaultProps = {\n    value: 0,\n    unit: 'second',\n};\nexport default FormattedRelativeTime;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}