{"ast":null,"code":"import { encodeGLTFSync } from './lib/encode-gltf';\nexport default {\n  name: 'glTF',\n  extensions: ['glb'],\n  mimeTypes: ['model/gltf-binary'],\n  encodeSync: encodeSync,\n  binary: true,\n  options: {}\n};\nfunction encodeSync(gltf) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$byteOffset = options.byteOffset,\n    byteOffset = _options$byteOffset === void 0 ? 0 : _options$byteOffset;\n  var byteLength = encodeGLTFSync(gltf, null, byteOffset, options);\n  var arrayBuffer = new ArrayBuffer(byteLength);\n  var dataView = new DataView(arrayBuffer);\n  encodeGLTFSync(gltf, dataView, byteOffset, options);\n  return arrayBuffer;\n}","map":{"version":3,"sources":["../../src/gltf-writer.js"],"names":["encodeGLTFSync","name","extensions","mimeTypes","encodeSync","binary","options","gltf","byteOffset","byteLength","arrayBuffer","ArrayBuffer","dataView","DataView"],"mappings":"AAAA,SAAQA,cAAR,QAA6B,mBAA7B;AAEA,eAAe;EACbC,IAAI,EAAE,MADO;EAEbC,UAAU,EAAE,CAAC,KAAD,CAFC;EAGbC,SAAS,EAAE,CAAC,mBAAD,CAHE;EAIbC,UAAU,EAAVA,UAJa;EAKbC,MAAM,EAAE,IALK;EAMbC,OAAO,EAAE,CAAA;AANI,CAAf;AASA,SAASF,UAAT,CAAoBG,IAApB,EAAwC;EAAA,IAAdD,OAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,CAAA,CAAI;EAAA,IAAA,mBAAA,GACbA,OADa,CAC/BE,UAD+B;IAC/BA,UAD+B,GAAA,mBAAA,KAAA,KAAA,CAAA,GAClB,CADkB,GAAA,mBAAA;EAItC,IAAMC,UAAU,GAAGT,cAAc,CAACO,IAAD,EAAO,IAAP,EAAaC,UAAb,EAAyBF,OAAzB,CAAjC;EACA,IAAMI,WAAW,GAAG,IAAIC,WAAJ,CAAgBF,UAAhB,CAApB;EACA,IAAMG,QAAQ,GAAG,IAAIC,QAAJ,CAAaH,WAAb,CAAjB;EACAV,cAAc,CAACO,IAAD,EAAOK,QAAP,EAAiBJ,UAAjB,EAA6BF,OAA7B,CAAdN;EAEA,OAAOU,WAAP;AACD","sourcesContent":["import {encodeGLTFSync} from './lib/encode-gltf';\n\nexport default {\n  name: 'glTF',\n  extensions: ['glb'], // We only support encoding to binary GLB, not to JSON GLTF\n  mimeTypes: ['model/gltf-binary'], // 'model/gltf+json',\n  encodeSync,\n  binary: true,\n  options: {}\n};\n\nfunction encodeSync(gltf, options = {}) {\n  const {byteOffset = 0} = options;\n\n  // Calculate length, then create arraybuffer and encode\n  const byteLength = encodeGLTFSync(gltf, null, byteOffset, options);\n  const arrayBuffer = new ArrayBuffer(byteLength);\n  const dataView = new DataView(arrayBuffer);\n  encodeGLTFSync(gltf, dataView, byteOffset, options);\n\n  return arrayBuffer;\n}\n"]},"metadata":{},"sourceType":"module"}