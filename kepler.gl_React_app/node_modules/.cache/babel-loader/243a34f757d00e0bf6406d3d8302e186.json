{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMapStyles = getMapStyles;\nexports.getInitialInputStyle = getInitialInputStyle;\nexports.set3dBuildingColorUpdater = exports.addCustomMapStyleUpdater = exports.inputMapStyleUpdater = exports.loadCustomMapStyleUpdater = exports.resetMapConfigMapStyleUpdater = exports.receiveMapConfigUpdater = exports.requestMapStylesUpdater = exports.loadMapStyleErrUpdater = exports.loadMapStylesUpdater = exports.mapStyleChangeUpdater = exports.mapConfigChangeUpdater = exports.initMapStyleUpdater = exports.INITIAL_MAP_STYLE = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _tasks = _interopRequireWildcard(require(\"react-palm/tasks\"));\nvar _lodash = _interopRequireDefault(require(\"lodash.clonedeep\"));\nvar _mapboxGlStyleEditor = require(\"../utils/map-style-utils/mapbox-gl-style-editor\");\nvar _defaultSettings = require(\"../constants/default-settings\");\nvar _utils = require(\"../utils/utils\");\nvar _tasks2 = require(\"../tasks/tasks\");\nvar _mapStyleActions = require(\"../actions/map-style-actions\");\nvar _d3Color = require(\"d3-color\");\nvar _colorUtils = require(\"../utils/color-utils\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar DEFAULT_BLDG_COLOR = '#D1CEC7';\n/**\n * @return {import('./map-style-updaters').MapStyle}\n */\n\nvar getDefaultState = function getDefaultState() {\n  var visibleLayerGroups = {};\n  var styleType = 'dark';\n  var topLayerGroups = {};\n  return {\n    styleType: styleType,\n    visibleLayerGroups: visibleLayerGroups,\n    topLayerGroups: topLayerGroups,\n    mapStyles: _defaultSettings.DEFAULT_MAP_STYLES.reduce(function (accu, curr) {\n      return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2[\"default\"])({}, curr.id, curr));\n    }, {}),\n    // save mapbox access token\n    mapboxApiAccessToken: null,\n    mapboxApiUrl: _defaultSettings.DEFAULT_MAPBOX_API_URL,\n    mapStylesReplaceDefault: false,\n    inputStyle: getInitialInputStyle(),\n    threeDBuildingColor: (0, _colorUtils.hexToRgb)(DEFAULT_BLDG_COLOR),\n    custom3DBuildingColor: false\n  };\n};\n/**\n * Updaters for `mapStyle`. Can be used in your root reducer to directly modify kepler.gl's state.\n * Read more about [Using updaters](../advanced-usage/using-updaters.md)\n * @public\n * @example\n *\n * import keplerGlReducer, {mapStyleUpdaters} from 'kepler.gl/reducers';\n * // Root Reducer\n * const reducers = combineReducers({\n *  keplerGl: keplerGlReducer,\n *  app: appReducer\n * });\n *\n * const composedReducer = (state, action) => {\n *  switch (action.type) {\n *    // click button to hide label from background map\n *    case 'CLICK_BUTTON':\n *      return {\n *        ...state,\n *        keplerGl: {\n *          ...state.keplerGl,\n *          foo: {\n *             ...state.keplerGl.foo,\n *             mapStyle: mapStyleUpdaters.mapConfigChangeUpdater(\n *               mapStyle,\n *               {payload: {visibleLayerGroups: {label: false, road: true, background: true}}}\n *             )\n *          }\n *        }\n *      };\n *  }\n *  return reducers(state, action);\n * };\n *\n * export default composedReducer;\n */\n\n/* eslint-disable no-unused-vars */\n\nvar mapStyleUpdaters = null;\n/* eslint-enable no-unused-vars */\n\n/**\n * Default initial `mapStyle`\n * @memberof mapStyleUpdaters\n * @constant\n * @property styleType - Default: `'dark'`\n * @property visibleLayerGroups - Default: `{}`\n * @property topLayerGroups - Default: `{}`\n * @property mapStyles - mapping from style key to style object\n * @property mapboxApiAccessToken - Default: `null`\n * @Property mapboxApiUrl - Default null\n * @Property mapStylesReplaceDefault - Default: `false`\n * @property inputStyle - Default: `{}`\n * @property threeDBuildingColor - Default: `[r, g, b]`\n * @type {import('./map-style-updaters').MapStyle}\n * @public\n */\n\nvar INITIAL_MAP_STYLE = getDefaultState();\n/**\n * Create two map styles from preset map style, one for top map one for bottom\n *\n * @param {string} styleType - current map style\n * @param {Object} visibleLayerGroups - visible layers of bottom map\n * @param {Object} topLayerGroups - visible layers of top map\n * @param {Object} mapStyles - a dictionary of all map styles\n * @returns {Object} bottomMapStyle | topMapStyle | isRaster\n */\n\nexports.INITIAL_MAP_STYLE = INITIAL_MAP_STYLE;\nfunction getMapStyles(_ref) {\n  var styleType = _ref.styleType,\n    visibleLayerGroups = _ref.visibleLayerGroups,\n    topLayerGroups = _ref.topLayerGroups,\n    mapStyles = _ref.mapStyles;\n  var mapStyle = mapStyles[styleType]; // style might not be loaded yet\n\n  if (!mapStyle || !mapStyle.style) {\n    return {};\n  }\n  var editable = Object.keys(visibleLayerGroups).length;\n  var bottomMapStyle = !editable ? mapStyle.style : (0, _mapboxGlStyleEditor.editBottomMapStyle)({\n    id: styleType,\n    mapStyle: mapStyle,\n    visibleLayerGroups: visibleLayerGroups\n  });\n  var hasTopLayer = editable && Object.values(topLayerGroups).some(function (v) {\n    return v;\n  }); // mute top layer if not visible in bottom layer\n\n  var topLayers = hasTopLayer && Object.keys(topLayerGroups).reduce(function (accu, key) {\n    return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2[\"default\"])({}, key, topLayerGroups[key] && visibleLayerGroups[key]));\n  }, {});\n  var topMapStyle = hasTopLayer ? (0, _mapboxGlStyleEditor.editTopMapStyle)({\n    id: styleType,\n    mapStyle: mapStyle,\n    visibleLayerGroups: topLayers\n  }) : null;\n  return {\n    bottomMapStyle: bottomMapStyle,\n    topMapStyle: topMapStyle,\n    editable: editable\n  };\n}\nfunction findLayerFillColor(layer) {\n  return layer && layer.paint && layer.paint['background-color'];\n}\nfunction get3DBuildingColor(style) {\n  // set building color to be the same as the background color.\n  if (!style.style) {\n    return (0, _colorUtils.hexToRgb)(DEFAULT_BLDG_COLOR);\n  }\n  var backgroundLayer = (style.style.layers || []).find(function (_ref2) {\n    var id = _ref2.id;\n    return id === 'background';\n  });\n  var buildingLayer = (style.style.layers || []).find(function (_ref3) {\n    var id = _ref3.id;\n    return id.match(/building/);\n  });\n  var buildingColor = findLayerFillColor(buildingLayer) || findLayerFillColor(backgroundLayer) || DEFAULT_BLDG_COLOR; // brighten or darken building based on style\n\n  var operation = style.id.match(/(?=(dark|night))/) ? 'brighter' : 'darker';\n  var alpha = 0.2;\n  var rgbObj = (0, _d3Color.rgb)(buildingColor)[operation]([alpha]);\n  return [rgbObj.r, rgbObj.g, rgbObj.b];\n}\nfunction getLayerGroupsFromStyle(style) {\n  return Array.isArray(style.layers) ? _defaultSettings.DEFAULT_LAYER_GROUPS.filter(function (lg) {\n    return style.layers.filter(lg.filter).length;\n  }) : [];\n} // Updaters\n\n/**\n * Propagate `mapStyle` reducer with `mapboxApiAccessToken` and `mapStylesReplaceDefault`.\n * if mapStylesReplaceDefault is true mapStyles is emptied; loadMapStylesUpdater() will\n * populate mapStyles.\n *\n * @memberof mapStyleUpdaters\n * @type {typeof import('./map-style-updaters').initMapStyleUpdater}\n * @public\n */\n\nvar initMapStyleUpdater = function initMapStyleUpdater(state, _ref4) {\n  var _ref4$payload = _ref4.payload,\n    payload = _ref4$payload === void 0 ? {} : _ref4$payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    // save mapbox access token to map style state\n    mapboxApiAccessToken: payload.mapboxApiAccessToken || state.mapboxApiAccessToken,\n    mapboxApiUrl: payload.mapboxApiUrl || state.mapboxApiUrl,\n    mapStyles: !payload.mapStylesReplaceDefault ? state.mapStyles : {},\n    mapStylesReplaceDefault: payload.mapStylesReplaceDefault || false\n  });\n}; // });\n\n/**\n * Update `visibleLayerGroups`to change layer group visibility\n * @memberof mapStyleUpdaters\n * @type {typeof import('./map-style-updaters').mapConfigChangeUpdater}\n * @public\n */\n\nexports.initMapStyleUpdater = initMapStyleUpdater;\nvar mapConfigChangeUpdater = function mapConfigChangeUpdater(state, action) {\n  return _objectSpread(_objectSpread(_objectSpread({}, state), action.payload), getMapStyles(_objectSpread(_objectSpread({}, state), action.payload)));\n};\n/**\n * Change to another map style. The selected style should already been loaded into `mapStyle.mapStyles`\n * @memberof mapStyleUpdaters\n * @type {typeof import('./map-style-updaters').mapStyleChangeUpdater}\n * @public\n */\n\nexports.mapConfigChangeUpdater = mapConfigChangeUpdater;\nvar mapStyleChangeUpdater = function mapStyleChangeUpdater(state, _ref5) {\n  var styleType = _ref5.payload;\n  if (!state.mapStyles[styleType]) {\n    // we might not have received the style yet\n    return state;\n  }\n  var defaultLGVisibility = (0, _mapboxGlStyleEditor.getDefaultLayerGroupVisibility)(state.mapStyles[styleType]);\n  var visibleLayerGroups = (0, _mapboxGlStyleEditor.mergeLayerGroupVisibility)(defaultLGVisibility, state.visibleLayerGroups);\n  var threeDBuildingColor = state.custom3DBuildingColor ? state.threeDBuildingColor : get3DBuildingColor(state.mapStyles[styleType]);\n  return _objectSpread(_objectSpread({}, state), {}, {\n    styleType: styleType,\n    visibleLayerGroups: visibleLayerGroups,\n    threeDBuildingColor: threeDBuildingColor\n  }, getMapStyles(_objectSpread(_objectSpread({}, state), {}, {\n    visibleLayerGroups: visibleLayerGroups,\n    styleType: styleType\n  })));\n};\n/**\n * Callback when load map style success\n * @memberof mapStyleUpdaters\n * @type {typeof import('./map-style-updaters').loadMapStylesUpdater}\n * @public\n */\n\nexports.mapStyleChangeUpdater = mapStyleChangeUpdater;\nvar loadMapStylesUpdater = function loadMapStylesUpdater(state, action) {\n  var newStyles = action.payload || {};\n  var addLayerGroups = Object.keys(newStyles).reduce(function (accu, id) {\n    return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2[\"default\"])({}, id, _objectSpread(_objectSpread({}, newStyles[id]), {}, {\n      layerGroups: newStyles[id].layerGroups || getLayerGroupsFromStyle(newStyles[id].style)\n    })));\n  }, {}); // add new styles to state\n\n  var newState = _objectSpread(_objectSpread({}, state), {}, {\n    mapStyles: _objectSpread(_objectSpread({}, state.mapStyles), addLayerGroups)\n  });\n  return newStyles[state.styleType] ? mapStyleChangeUpdater(newState, {\n    payload: state.styleType\n  }) : newState;\n};\n/**\n * Callback when load map style error\n * @memberof mapStyleUpdaters\n * @type {typeof import('./map-style-updaters').loadMapStyleErrUpdater}\n * @public\n */\n// do nothing for now, if didn't load, skip it\n\nexports.loadMapStylesUpdater = loadMapStylesUpdater;\nvar loadMapStyleErrUpdater = function loadMapStyleErrUpdater(state) {\n  return state;\n};\n/**\n * @memberof mapStyleUpdaters\n * @type {typeof import('./map-style-updaters').requestMapStylesUpdater}\n * @public\n */\n\nexports.loadMapStyleErrUpdater = loadMapStyleErrUpdater;\nvar requestMapStylesUpdater = function requestMapStylesUpdater(state, _ref6) {\n  var mapStyles = _ref6.payload;\n  var loadMapStyleTasks = getLoadMapStyleTasks(mapStyles, state.mapboxApiAccessToken, state.mapboxApiUrl);\n  return (0, _tasks.withTask)(state, loadMapStyleTasks);\n};\n/**\n * Load map style object when pass in saved map config\n * @memberof mapStyleUpdaters\n * @param state `mapStyle`\n * @param action\n * @param action.payload saved map config `{mapStyle, visState, mapState}`\n * @returns nextState or `react-pam` tasks to load map style object\n * @type {typeof import('./map-style-updaters').receiveMapConfigUpdater}\n */\n\nexports.requestMapStylesUpdater = requestMapStylesUpdater;\nvar receiveMapConfigUpdater = function receiveMapConfigUpdater(state, _ref7) {\n  var _ref7$payload$config = _ref7.payload.config,\n    config = _ref7$payload$config === void 0 ? {} : _ref7$payload$config;\n  var _ref8 = config || {},\n    mapStyle = _ref8.mapStyle;\n  if (!mapStyle) {\n    return state;\n  } // if saved custom mapStyles load the style object\n\n  var loadMapStyleTasks = mapStyle.mapStyles ? getLoadMapStyleTasks(mapStyle.mapStyles, state.mapboxApiAccessToken, state.mapboxApiUrl) : null; // merge default mapStyles\n\n  var merged = mapStyle.mapStyles ? _objectSpread(_objectSpread({}, mapStyle), {}, {\n    mapStyles: _objectSpread(_objectSpread({}, mapStyle.mapStyles), state.mapStyles)\n  }) : mapStyle; // set custom3DBuildingColor: true if mapStyle contains threeDBuildingColor\n\n  merged.custom3DBuildingColor = Boolean(mapStyle.threeDBuildingColor) || merged.custom3DBuildingColor;\n  var newState = mapConfigChangeUpdater(state, {\n    payload: merged\n  });\n  return loadMapStyleTasks ? (0, _tasks.withTask)(newState, loadMapStyleTasks) : newState;\n};\nexports.receiveMapConfigUpdater = receiveMapConfigUpdater;\nfunction getLoadMapStyleTasks(mapStyles, mapboxApiAccessToken, mapboxApiUrl) {\n  return [_tasks[\"default\"].all(Object.values(mapStyles).map(function (_ref9) {\n    var id = _ref9.id,\n      url = _ref9.url,\n      accessToken = _ref9.accessToken;\n    return {\n      id: id,\n      url: (0, _mapboxGlStyleEditor.isValidStyleUrl)(url) ? (0, _mapboxGlStyleEditor.getStyleDownloadUrl)(url, accessToken || mapboxApiAccessToken, mapboxApiUrl) : url\n    };\n  }).map(_tasks2.LOAD_MAP_STYLE_TASK)).bimap(\n  // success\n  function (results) {\n    return (0, _mapStyleActions.loadMapStyles)(results.reduce(function (accu, _ref10) {\n      var id = _ref10.id,\n        style = _ref10.style;\n      return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2[\"default\"])({}, id, _objectSpread(_objectSpread({}, mapStyles[id]), {}, {\n        style: style\n      })));\n    }, {}));\n  },\n  // error\n  _mapStyleActions.loadMapStyleErr)];\n}\n/**\n * Reset map style config to initial state\n * @memberof mapStyleUpdaters\n * @param state `mapStyle`\n * @returns nextState\n * @type {typeof import('./map-style-updaters').resetMapConfigMapStyleUpdater}\n * @public\n */\n\nvar resetMapConfigMapStyleUpdater = function resetMapConfigMapStyleUpdater(state) {\n  var emptyConfig = _objectSpread(_objectSpread(_objectSpread({}, INITIAL_MAP_STYLE), {}, {\n    mapboxApiAccessToken: state.mapboxApiAccessToken,\n    mapboxApiUrl: state.mapboxApiUrl,\n    mapStylesReplaceDefault: state.mapStylesReplaceDefault\n  }, state.initialState), {}, {\n    mapStyles: state.mapStyles,\n    initialState: state.initialState\n  });\n  return mapStyleChangeUpdater(emptyConfig, {\n    payload: emptyConfig.styleType\n  });\n};\n/**\n * Callback when a custom map style object is received\n * @memberof mapStyleUpdaters\n * @type {typeof import('./map-style-updaters').loadCustomMapStyleUpdater}\n * @public\n */\n\nexports.resetMapConfigMapStyleUpdater = resetMapConfigMapStyleUpdater;\nvar loadCustomMapStyleUpdater = function loadCustomMapStyleUpdater(state, _ref11) {\n  var _ref11$payload = _ref11.payload,\n    icon = _ref11$payload.icon,\n    style = _ref11$payload.style,\n    error = _ref11$payload.error;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    inputStyle: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, state.inputStyle), style ? {\n      id: style.id || (0, _utils.generateHashId)(),\n      // make a copy of the style object\n      style: (0, _lodash[\"default\"])(style),\n      label: style.name,\n      // gathering layer group info from style json\n      layerGroups: getLayerGroupsFromStyle(style)\n    } : {}), icon ? {\n      icon: icon\n    } : {}), error !== undefined ? {\n      error: error\n    } : {})\n  });\n};\n/**\n * Input a custom map style object\n * @memberof mapStyleUpdaters\n * @type {typeof import('./map-style-updaters').inputMapStyleUpdater}\n * @public\n */\n\nexports.loadCustomMapStyleUpdater = loadCustomMapStyleUpdater;\nvar inputMapStyleUpdater = function inputMapStyleUpdater(state, _ref12) {\n  var _ref12$payload = _ref12.payload,\n    inputStyle = _ref12$payload.inputStyle,\n    mapState = _ref12$payload.mapState;\n  var updated = _objectSpread(_objectSpread({}, state.inputStyle), inputStyle);\n  var isValid = (0, _mapboxGlStyleEditor.isValidStyleUrl)(updated.url);\n  var icon = isValid ? (0, _mapboxGlStyleEditor.getStyleImageIcon)({\n    mapState: mapState,\n    styleUrl: updated.url,\n    mapboxApiAccessToken: updated.accessToken || state.mapboxApiAccessToken,\n    mapboxApiUrl: state.mapboxApiUrl || _defaultSettings.DEFAULT_MAPBOX_API_URL\n  }) : state.inputStyle.icon;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    inputStyle: _objectSpread(_objectSpread({}, updated), {}, {\n      isValid: isValid,\n      icon: icon\n    })\n  });\n};\n/**\n * Add map style from user input to reducer and set it to current style\n * This action is called when user click confirm after putting in a valid style url in the custom map style dialog.\n * It should not be called from outside kepler.gl without a valid `inputStyle` in the `mapStyle` reducer.\n * @memberof mapStyleUpdaters\n * @type {typeof import('./map-style-updaters').addCustomMapStyleUpdater}\n */\n\nexports.inputMapStyleUpdater = inputMapStyleUpdater;\nvar addCustomMapStyleUpdater = function addCustomMapStyleUpdater(state) {\n  var styleId = state.inputStyle.id;\n  var newState = _objectSpread(_objectSpread({}, state), {}, {\n    mapStyles: _objectSpread(_objectSpread({}, state.mapStyles), {}, (0, _defineProperty2[\"default\"])({}, styleId, state.inputStyle)),\n    // set to default\n    inputStyle: getInitialInputStyle()\n  }); // set new style\n\n  return mapStyleChangeUpdater(newState, {\n    payload: styleId\n  });\n};\n/**\n * Updates 3d building color\n * @memberof mapStyleUpdaters\n * @type {typeof import('./map-style-updaters').set3dBuildingColorUpdater}\n */\n\nexports.addCustomMapStyleUpdater = addCustomMapStyleUpdater;\nvar set3dBuildingColorUpdater = function set3dBuildingColorUpdater(state, _ref13) {\n  var color = _ref13.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    threeDBuildingColor: color,\n    custom3DBuildingColor: true\n  });\n};\n/**\n * Return the initial input style\n * @return Object\n */\n\nexports.set3dBuildingColorUpdater = set3dBuildingColorUpdater;\nfunction getInitialInputStyle() {\n  return {\n    accessToken: null,\n    error: false,\n    isValid: false,\n    label: null,\n    style: null,\n    url: null,\n    icon: null,\n    custom: true\n  };\n}","map":{"version":3,"sources":["../../src/reducers/map-style-updaters.js"],"names":["DEFAULT_BLDG_COLOR","getDefaultState","visibleLayerGroups","styleType","topLayerGroups","mapStyles","reduce","accu","curr","id","mapboxApiAccessToken","mapboxApiUrl","DEFAULT_MAPBOX_API_URL","mapStylesReplaceDefault","inputStyle","getInitialInputStyle","threeDBuildingColor","custom3DBuildingColor","mapStyleUpdaters","INITIAL_MAP_STYLE","getMapStyles","mapStyle","style","editable","Object","keys","length","bottomMapStyle","hasTopLayer","values","some","v","topLayers","key","topMapStyle","findLayerFillColor","layer","paint","get3DBuildingColor","backgroundLayer","layers","find","buildingLayer","match","buildingColor","operation","alpha","rgbObj","r","g","b","getLayerGroupsFromStyle","isArray","filter","lg","initMapStyleUpdater","state","payload","mapConfigChangeUpdater","action","mapStyleChangeUpdater","defaultLGVisibility","loadMapStylesUpdater","newStyles","addLayerGroups","layerGroups","newState","loadMapStyleErrUpdater","requestMapStylesUpdater","loadMapStyleTasks","getLoadMapStyleTasks","receiveMapConfigUpdater","config","merged","Boolean","all","map","url","accessToken","LOAD_MAP_STYLE_TASK","bimap","loadMapStyleErr","resetMapConfigMapStyleUpdater","emptyConfig","initialState","loadCustomMapStyleUpdater","icon","error","label","name","undefined","inputMapStyleUpdater","mapState","updated","isValid","styleUrl","addCustomMapStyleUpdater","styleId","set3dBuildingColorUpdater","color","custom"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// @ts-nocheck\nimport Task, {withTask} from 'react-palm/tasks';\nimport cloneDeep from 'lodash.clonedeep';\n\n// Utils\nimport {\n  getDefaultLayerGroupVisibility,\n  isValidStyleUrl,\n  getStyleDownloadUrl,\n  mergeLayerGroupVisibility,\n  editTopMapStyle,\n  editBottomMapStyle,\n  getStyleImageIcon\n} from 'utils/map-style-utils/mapbox-gl-style-editor';\nimport {\n  DEFAULT_MAP_STYLES,\n  DEFAULT_LAYER_GROUPS,\n  DEFAULT_MAPBOX_API_URL\n} from 'constants/default-settings';\nimport {generateHashId} from 'utils/utils';\nimport {LOAD_MAP_STYLE_TASK} from 'tasks/tasks';\nimport {loadMapStyles, loadMapStyleErr} from 'actions/map-style-actions';\nimport {rgb} from 'd3-color';\nimport {hexToRgb} from 'utils/color-utils';\n\nconst DEFAULT_BLDG_COLOR = '#D1CEC7';\n\n/**\n * @return {import('./map-style-updaters').MapStyle}\n */\nconst getDefaultState = () => {\n  const visibleLayerGroups = {};\n  const styleType = 'dark';\n  const topLayerGroups = {};\n\n  return {\n    styleType,\n    visibleLayerGroups,\n    topLayerGroups,\n    mapStyles: DEFAULT_MAP_STYLES.reduce(\n      (accu, curr) => ({\n        ...accu,\n        [curr.id]: curr\n      }),\n      {}\n    ),\n    // save mapbox access token\n    mapboxApiAccessToken: null,\n    mapboxApiUrl: DEFAULT_MAPBOX_API_URL,\n    mapStylesReplaceDefault: false,\n    inputStyle: getInitialInputStyle(),\n    threeDBuildingColor: hexToRgb(DEFAULT_BLDG_COLOR),\n    custom3DBuildingColor: false\n  };\n};\n\n/**\n * Updaters for `mapStyle`. Can be used in your root reducer to directly modify kepler.gl's state.\n * Read more about [Using updaters](../advanced-usage/using-updaters.md)\n * @public\n * @example\n *\n * import keplerGlReducer, {mapStyleUpdaters} from 'kepler.gl/reducers';\n * // Root Reducer\n * const reducers = combineReducers({\n *  keplerGl: keplerGlReducer,\n *  app: appReducer\n * });\n *\n * const composedReducer = (state, action) => {\n *  switch (action.type) {\n *    // click button to hide label from background map\n *    case 'CLICK_BUTTON':\n *      return {\n *        ...state,\n *        keplerGl: {\n *          ...state.keplerGl,\n *          foo: {\n *             ...state.keplerGl.foo,\n *             mapStyle: mapStyleUpdaters.mapConfigChangeUpdater(\n *               mapStyle,\n *               {payload: {visibleLayerGroups: {label: false, road: true, background: true}}}\n *             )\n *          }\n *        }\n *      };\n *  }\n *  return reducers(state, action);\n * };\n *\n * export default composedReducer;\n */\n/* eslint-disable no-unused-vars */\nconst mapStyleUpdaters = null;\n/* eslint-enable no-unused-vars */\n/**\n * Default initial `mapStyle`\n * @memberof mapStyleUpdaters\n * @constant\n * @property styleType - Default: `'dark'`\n * @property visibleLayerGroups - Default: `{}`\n * @property topLayerGroups - Default: `{}`\n * @property mapStyles - mapping from style key to style object\n * @property mapboxApiAccessToken - Default: `null`\n * @Property mapboxApiUrl - Default null\n * @Property mapStylesReplaceDefault - Default: `false`\n * @property inputStyle - Default: `{}`\n * @property threeDBuildingColor - Default: `[r, g, b]`\n * @type {import('./map-style-updaters').MapStyle}\n * @public\n */\nexport const INITIAL_MAP_STYLE = getDefaultState();\n\n/**\n * Create two map styles from preset map style, one for top map one for bottom\n *\n * @param {string} styleType - current map style\n * @param {Object} visibleLayerGroups - visible layers of bottom map\n * @param {Object} topLayerGroups - visible layers of top map\n * @param {Object} mapStyles - a dictionary of all map styles\n * @returns {Object} bottomMapStyle | topMapStyle | isRaster\n */\nexport function getMapStyles({styleType, visibleLayerGroups, topLayerGroups, mapStyles}) {\n  const mapStyle = mapStyles[styleType];\n\n  // style might not be loaded yet\n  if (!mapStyle || !mapStyle.style) {\n    return {};\n  }\n\n  const editable = Object.keys(visibleLayerGroups).length;\n\n  const bottomMapStyle = !editable\n    ? mapStyle.style\n    : editBottomMapStyle({\n        id: styleType,\n        mapStyle,\n        visibleLayerGroups\n      });\n\n  const hasTopLayer = editable && Object.values(topLayerGroups).some(v => v);\n\n  // mute top layer if not visible in bottom layer\n  const topLayers =\n    hasTopLayer &&\n    Object.keys(topLayerGroups).reduce(\n      (accu, key) => ({\n        ...accu,\n        [key]: topLayerGroups[key] && visibleLayerGroups[key]\n      }),\n      {}\n    );\n\n  const topMapStyle = hasTopLayer\n    ? editTopMapStyle({\n        id: styleType,\n        mapStyle,\n        visibleLayerGroups: topLayers\n      })\n    : null;\n\n  return {bottomMapStyle, topMapStyle, editable};\n}\n\nfunction findLayerFillColor(layer) {\n  return layer && layer.paint && layer.paint['background-color'];\n}\n\nfunction get3DBuildingColor(style) {\n  // set building color to be the same as the background color.\n  if (!style.style) {\n    return hexToRgb(DEFAULT_BLDG_COLOR);\n  }\n\n  const backgroundLayer = (style.style.layers || []).find(({id}) => id === 'background');\n\n  const buildingLayer = (style.style.layers || []).find(({id}) => id.match(/building/));\n\n  const buildingColor =\n    findLayerFillColor(buildingLayer) || findLayerFillColor(backgroundLayer) || DEFAULT_BLDG_COLOR;\n\n  // brighten or darken building based on style\n  const operation = style.id.match(/(?=(dark|night))/) ? 'brighter' : 'darker';\n\n  const alpha = 0.2;\n  const rgbObj = rgb(buildingColor)[operation]([alpha]);\n  return [rgbObj.r, rgbObj.g, rgbObj.b];\n}\n\nfunction getLayerGroupsFromStyle(style) {\n  return Array.isArray(style.layers)\n    ? DEFAULT_LAYER_GROUPS.filter(lg => style.layers.filter(lg.filter).length)\n    : [];\n}\n\n// Updaters\n/**\n * Propagate `mapStyle` reducer with `mapboxApiAccessToken` and `mapStylesReplaceDefault`.\n * if mapStylesReplaceDefault is true mapStyles is emptied; loadMapStylesUpdater() will\n * populate mapStyles.\n *\n * @memberof mapStyleUpdaters\n * @type {typeof import('./map-style-updaters').initMapStyleUpdater}\n * @public\n */\nexport const initMapStyleUpdater = (state, {payload = {}}) => ({\n  ...state,\n  // save mapbox access token to map style state\n  mapboxApiAccessToken: payload.mapboxApiAccessToken || state.mapboxApiAccessToken,\n  mapboxApiUrl: payload.mapboxApiUrl || state.mapboxApiUrl,\n  mapStyles: !payload.mapStylesReplaceDefault ? state.mapStyles : {},\n  mapStylesReplaceDefault: payload.mapStylesReplaceDefault || false\n});\n// });\n\n/**\n * Update `visibleLayerGroups`to change layer group visibility\n * @memberof mapStyleUpdaters\n * @type {typeof import('./map-style-updaters').mapConfigChangeUpdater}\n * @public\n */\nexport const mapConfigChangeUpdater = (state, action) => ({\n  ...state,\n  ...action.payload,\n  ...getMapStyles({\n    ...state,\n    ...action.payload\n  })\n});\n\n/**\n * Change to another map style. The selected style should already been loaded into `mapStyle.mapStyles`\n * @memberof mapStyleUpdaters\n * @type {typeof import('./map-style-updaters').mapStyleChangeUpdater}\n * @public\n */\nexport const mapStyleChangeUpdater = (state, {payload: styleType}) => {\n  if (!state.mapStyles[styleType]) {\n    // we might not have received the style yet\n    return state;\n  }\n  const defaultLGVisibility = getDefaultLayerGroupVisibility(state.mapStyles[styleType]);\n\n  const visibleLayerGroups = mergeLayerGroupVisibility(\n    defaultLGVisibility,\n    state.visibleLayerGroups\n  );\n\n  const threeDBuildingColor = state.custom3DBuildingColor\n    ? state.threeDBuildingColor\n    : get3DBuildingColor(state.mapStyles[styleType]);\n\n  return {\n    ...state,\n    styleType,\n    visibleLayerGroups,\n    threeDBuildingColor,\n    ...getMapStyles({\n      ...state,\n      visibleLayerGroups,\n      styleType\n    })\n  };\n};\n\n/**\n * Callback when load map style success\n * @memberof mapStyleUpdaters\n * @type {typeof import('./map-style-updaters').loadMapStylesUpdater}\n * @public\n */\nexport const loadMapStylesUpdater = (state, action) => {\n  const newStyles = action.payload || {};\n  const addLayerGroups = Object.keys(newStyles).reduce(\n    (accu, id) => ({\n      ...accu,\n      [id]: {\n        ...newStyles[id],\n        layerGroups: newStyles[id].layerGroups || getLayerGroupsFromStyle(newStyles[id].style)\n      }\n    }),\n    {}\n  );\n\n  // add new styles to state\n  const newState = {\n    ...state,\n    mapStyles: {\n      ...state.mapStyles,\n      ...addLayerGroups\n    }\n  };\n\n  return newStyles[state.styleType]\n    ? mapStyleChangeUpdater(newState, {payload: state.styleType})\n    : newState;\n};\n\n/**\n * Callback when load map style error\n * @memberof mapStyleUpdaters\n * @type {typeof import('./map-style-updaters').loadMapStyleErrUpdater}\n * @public\n */\n// do nothing for now, if didn't load, skip it\nexport const loadMapStyleErrUpdater = state => state;\n\n/**\n * @memberof mapStyleUpdaters\n * @type {typeof import('./map-style-updaters').requestMapStylesUpdater}\n * @public\n */\nexport const requestMapStylesUpdater = (state, {payload: mapStyles}) => {\n  const loadMapStyleTasks = getLoadMapStyleTasks(\n    mapStyles,\n    state.mapboxApiAccessToken,\n    state.mapboxApiUrl\n  );\n  return withTask(state, loadMapStyleTasks);\n};\n\n/**\n * Load map style object when pass in saved map config\n * @memberof mapStyleUpdaters\n * @param state `mapStyle`\n * @param action\n * @param action.payload saved map config `{mapStyle, visState, mapState}`\n * @returns nextState or `react-pam` tasks to load map style object\n * @type {typeof import('./map-style-updaters').receiveMapConfigUpdater}\n */\nexport const receiveMapConfigUpdater = (state, {payload: {config = {}}}) => {\n  const {mapStyle} = config || {};\n\n  if (!mapStyle) {\n    return state;\n  }\n\n  // if saved custom mapStyles load the style object\n  const loadMapStyleTasks = mapStyle.mapStyles\n    ? getLoadMapStyleTasks(mapStyle.mapStyles, state.mapboxApiAccessToken, state.mapboxApiUrl)\n    : null;\n\n  // merge default mapStyles\n  const merged = mapStyle.mapStyles\n    ? {\n        ...mapStyle,\n        mapStyles: {\n          ...mapStyle.mapStyles,\n          ...state.mapStyles\n        }\n      }\n    : mapStyle;\n\n  // set custom3DBuildingColor: true if mapStyle contains threeDBuildingColor\n  merged.custom3DBuildingColor =\n    Boolean(mapStyle.threeDBuildingColor) || merged.custom3DBuildingColor;\n  const newState = mapConfigChangeUpdater(state, {payload: merged});\n\n  return loadMapStyleTasks ? withTask(newState, loadMapStyleTasks) : newState;\n};\n\nfunction getLoadMapStyleTasks(mapStyles, mapboxApiAccessToken, mapboxApiUrl) {\n  return [\n    Task.all(\n      Object.values(mapStyles)\n        .map(({id, url, accessToken}) => ({\n          id,\n          url: isValidStyleUrl(url)\n            ? getStyleDownloadUrl(url, accessToken || mapboxApiAccessToken, mapboxApiUrl)\n            : url\n        }))\n        .map(LOAD_MAP_STYLE_TASK)\n    ).bimap(\n      // success\n      results =>\n        loadMapStyles(\n          results.reduce(\n            (accu, {id, style}) => ({\n              ...accu,\n              [id]: {\n                ...mapStyles[id],\n                style\n              }\n            }),\n            {}\n          )\n        ),\n      // error\n      loadMapStyleErr\n    )\n  ];\n}\n/**\n * Reset map style config to initial state\n * @memberof mapStyleUpdaters\n * @param state `mapStyle`\n * @returns nextState\n * @type {typeof import('./map-style-updaters').resetMapConfigMapStyleUpdater}\n * @public\n */\nexport const resetMapConfigMapStyleUpdater = state => {\n  const emptyConfig = {\n    ...INITIAL_MAP_STYLE,\n    mapboxApiAccessToken: state.mapboxApiAccessToken,\n    mapboxApiUrl: state.mapboxApiUrl,\n    mapStylesReplaceDefault: state.mapStylesReplaceDefault,\n    ...state.initialState,\n    mapStyles: state.mapStyles,\n    initialState: state.initialState\n  };\n\n  return mapStyleChangeUpdater(emptyConfig, {payload: emptyConfig.styleType});\n};\n\n/**\n * Callback when a custom map style object is received\n * @memberof mapStyleUpdaters\n * @type {typeof import('./map-style-updaters').loadCustomMapStyleUpdater}\n * @public\n */\nexport const loadCustomMapStyleUpdater = (state, {payload: {icon, style, error}}) => ({\n  ...state,\n  inputStyle: {\n    ...state.inputStyle,\n    // style json and icon will load asynchronously\n    ...(style\n      ? {\n          id: style.id || generateHashId(),\n          // make a copy of the style object\n          style: cloneDeep(style),\n          label: style.name,\n          // gathering layer group info from style json\n          layerGroups: getLayerGroupsFromStyle(style)\n        }\n      : {}),\n    ...(icon ? {icon} : {}),\n    ...(error !== undefined ? {error} : {})\n  }\n});\n\n/**\n * Input a custom map style object\n * @memberof mapStyleUpdaters\n * @type {typeof import('./map-style-updaters').inputMapStyleUpdater}\n * @public\n */\nexport const inputMapStyleUpdater = (state, {payload: {inputStyle, mapState}}) => {\n  const updated = {\n    ...state.inputStyle,\n    ...inputStyle\n  };\n\n  const isValid = isValidStyleUrl(updated.url);\n  const icon = isValid\n    ? getStyleImageIcon({\n        mapState,\n        styleUrl: updated.url,\n        mapboxApiAccessToken: updated.accessToken || state.mapboxApiAccessToken,\n        mapboxApiUrl: state.mapboxApiUrl || DEFAULT_MAPBOX_API_URL\n      })\n    : state.inputStyle.icon;\n\n  return {\n    ...state,\n    inputStyle: {\n      ...updated,\n      isValid,\n      icon\n    }\n  };\n};\n\n/**\n * Add map style from user input to reducer and set it to current style\n * This action is called when user click confirm after putting in a valid style url in the custom map style dialog.\n * It should not be called from outside kepler.gl without a valid `inputStyle` in the `mapStyle` reducer.\n * @memberof mapStyleUpdaters\n * @type {typeof import('./map-style-updaters').addCustomMapStyleUpdater}\n */\nexport const addCustomMapStyleUpdater = state => {\n  const styleId = state.inputStyle.id;\n  const newState = {\n    ...state,\n    mapStyles: {\n      ...state.mapStyles,\n      [styleId]: state.inputStyle\n    },\n    // set to default\n    inputStyle: getInitialInputStyle()\n  };\n  // set new style\n  return mapStyleChangeUpdater(newState, {payload: styleId});\n};\n\n/**\n * Updates 3d building color\n * @memberof mapStyleUpdaters\n * @type {typeof import('./map-style-updaters').set3dBuildingColorUpdater}\n */\nexport const set3dBuildingColorUpdater = (state, {payload: color}) => ({\n  ...state,\n  threeDBuildingColor: color,\n  custom3DBuildingColor: true\n});\n\n/**\n * Return the initial input style\n * @return Object\n */\nexport function getInitialInputStyle() {\n  return {\n    accessToken: null,\n    error: false,\n    isValid: false,\n    label: null,\n    style: null,\n    url: null,\n    icon: null,\n    custom: true\n  };\n}\n"]},"metadata":{},"sourceType":"script"}