{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.HexagonIdVisConfigs = exports.defaultCoverage = exports.defaultElevation = exports.hexIdAccessor = exports.hexIdRequiredColumns = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _baseLayer = _interopRequireDefault(require(\"../base-layer\"));\nvar _datasetUtils = require(\"../../utils/dataset-utils\");\nvar _layers = require(\"@deck.gl/layers\");\nvar _geoLayers = require(\"@deck.gl/geo-layers\");\nvar _enhancedColumnLayer = _interopRequireDefault(require(\"../../deckgl-layers/column-layer/enhanced-column-layer\"));\nvar _h3Utils = require(\"./h3-utils\");\nvar _h3HexagonLayerIcon = _interopRequireDefault(require(\"./h3-hexagon-layer-icon\"));\nvar _defaultSettings = require(\"../../constants/default-settings\");\nvar _tableUtils = require(\"../../utils/table-utils\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar DEFAULT_LINE_SCALE_VALUE = 8;\nvar hexIdRequiredColumns = ['hex_id'];\nexports.hexIdRequiredColumns = hexIdRequiredColumns;\nvar hexIdAccessor = function hexIdAccessor(_ref) {\n  var hex_id = _ref.hex_id;\n  return function (dc) {\n    return function (d) {\n      return dc.valueAt(d.index, hex_id.fieldIdx);\n    };\n  };\n};\nexports.hexIdAccessor = hexIdAccessor;\nvar defaultElevation = 500;\nexports.defaultElevation = defaultElevation;\nvar defaultCoverage = 1;\nexports.defaultCoverage = defaultCoverage;\nvar HexagonIdVisConfigs = {\n  opacity: 'opacity',\n  colorRange: 'colorRange',\n  coverage: 'coverage',\n  enable3d: 'enable3d',\n  sizeRange: 'elevationRange',\n  coverageRange: 'coverageRange',\n  elevationScale: 'elevationScale',\n  enableElevationZoomFactor: 'enableElevationZoomFactor'\n};\nexports.HexagonIdVisConfigs = HexagonIdVisConfigs;\nvar HexagonIdLayer = /*#__PURE__*/function (_Layer) {\n  (0, _inherits2[\"default\"])(HexagonIdLayer, _Layer);\n  var _super = _createSuper(HexagonIdLayer);\n  function HexagonIdLayer(props) {\n    var _this;\n    (0, _classCallCheck2[\"default\"])(this, HexagonIdLayer);\n    _this = _super.call(this, props);\n    _this.registerVisConfig(HexagonIdVisConfigs);\n    _this.getPositionAccessor = function (dataContainer) {\n      return hexIdAccessor(_this.config.columns)(dataContainer);\n    };\n    return _this;\n  }\n  (0, _createClass2[\"default\"])(HexagonIdLayer, [{\n    key: \"type\",\n    get: function get() {\n      return 'hexagonId';\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'H3';\n    }\n  }, {\n    key: \"requiredLayerColumns\",\n    get: function get() {\n      return hexIdRequiredColumns;\n    }\n  }, {\n    key: \"layerIcon\",\n    get: function get() {\n      // use hexagon layer icon for now\n      return _h3HexagonLayerIcon[\"default\"];\n    }\n  }, {\n    key: \"visualChannels\",\n    get: function get() {\n      var visualChannels = (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(HexagonIdLayer.prototype), \"visualChannels\", this);\n      return {\n        color: _objectSpread(_objectSpread({}, visualChannels.color), {}, {\n          accessor: 'getFillColor'\n        }),\n        size: _objectSpread(_objectSpread({}, visualChannels.size), {}, {\n          property: 'height',\n          accessor: 'getElevation',\n          nullValue: 0,\n          condition: function condition(config) {\n            return config.visConfig.enable3d;\n          },\n          defaultValue: defaultElevation\n        }),\n        coverage: {\n          property: 'coverage',\n          field: 'coverageField',\n          scale: 'coverageScale',\n          domain: 'coverageDomain',\n          range: 'coverageRange',\n          key: 'coverage',\n          channelScaleType: _defaultSettings.CHANNEL_SCALES.radius,\n          accessor: 'getCoverage',\n          nullValue: 0,\n          defaultValue: defaultCoverage\n        }\n      };\n    }\n  }, {\n    key: \"setInitialLayerConfig\",\n    value: function setInitialLayerConfig(dataset) {\n      var defaultColorField = (0, _datasetUtils.findDefaultColorField)(dataset);\n      if (defaultColorField) {\n        this.updateLayerConfig({\n          colorField: defaultColorField\n        });\n        this.updateLayerVisualChannel(dataset, 'color');\n      }\n      return this;\n    }\n  }, {\n    key: \"getDefaultLayerConfig\",\n    value: function getDefaultLayerConfig() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _objectSpread(_objectSpread({}, (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(HexagonIdLayer.prototype), \"getDefaultLayerConfig\", this).call(this, props)), {}, {\n        // add height visual channel\n        coverageField: null,\n        coverageDomain: [0, 1],\n        coverageScale: 'linear'\n      });\n    }\n  }, {\n    key: \"calculateDataAttribute\",\n    value: function calculateDataAttribute(_ref2, getHexId) {\n      var dataContainer = _ref2.dataContainer,\n        filteredIndex = _ref2.filteredIndex;\n      var data = [];\n      for (var i = 0; i < filteredIndex.length; i++) {\n        var index = filteredIndex[i];\n        var id = getHexId({\n          index: index\n        });\n        var centroid = this.dataToFeature.centroids[index];\n        if (centroid) {\n          data.push({\n            index: index,\n            id: id,\n            centroid: centroid\n          });\n        }\n      }\n      return data;\n    } // TODO: fix complexity\n\n    /* eslint-disable complexity */\n  }, {\n    key: \"formatLayerData\",\n    value: function formatLayerData(datasets, oldLayerData) {\n      var opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _datasets$this$config = datasets[this.config.dataId],\n        gpuFilter = _datasets$this$config.gpuFilter,\n        dataContainer = _datasets$this$config.dataContainer;\n      var getHexId = this.getPositionAccessor(dataContainer);\n      var _this$updateData = this.updateData(datasets, oldLayerData),\n        data = _this$updateData.data;\n      var accessors = this.getAttributeAccessors({\n        dataContainer: dataContainer\n      });\n      return _objectSpread({\n        data: data,\n        getHexId: getHexId,\n        getFilterValue: gpuFilter.filterValueAccessor(dataContainer)()\n      }, accessors);\n    }\n    /* eslint-enable complexity */\n  }, {\n    key: \"updateLayerMeta\",\n    value: function updateLayerMeta(dataContainer, getHexId) {\n      var centroids = dataContainer.map(function (d, index) {\n        var id = getHexId({\n          index: index\n        });\n        if (!(0, _h3Utils.h3IsValid)(id)) {\n          return null;\n        } // save a reference of centroids to dataToFeature\n        // so we don't have to re calculate it again\n\n        return (0, _h3Utils.getCentroid)({\n          id: id\n        });\n      }, true);\n      var centroidsDataContainer = (0, _tableUtils.createDataContainer)(centroids);\n      var bounds = this.getPointsBounds(centroidsDataContainer, function (d, dc) {\n        return [dc.valueAt(d.index, 0), dc.valueAt(d.index, 1)];\n      });\n      this.dataToFeature = {\n        centroids: centroids\n      };\n      this.updateMeta({\n        bounds: bounds\n      });\n    }\n  }, {\n    key: \"renderLayer\",\n    value: function renderLayer(opts) {\n      var data = opts.data,\n        gpuFilter = opts.gpuFilter,\n        objectHovered = opts.objectHovered,\n        mapState = opts.mapState;\n      var zoomFactor = this.getZoomFactor(mapState);\n      var eleZoomFactor = this.getElevationZoomFactor(mapState);\n      var config = this.config;\n      var visConfig = config.visConfig;\n      var updateTriggers = this.getVisualChannelUpdateTriggers();\n      var h3HexagonLayerTriggers = {\n        getHexagon: this.config.columns,\n        getFillColor: updateTriggers.getFillColor,\n        getElevation: updateTriggers.getElevation,\n        getFilterValue: gpuFilter.filterValueUpdateTriggers\n      };\n      var columnLayerTriggers = {\n        getCoverage: updateTriggers.getCoverage\n      };\n      var defaultLayerProps = this.getDefaultDeckLayerProps(opts);\n      var hoveredObject = this.hasHoveredObject(objectHovered);\n      return [new _geoLayers.H3HexagonLayer(_objectSpread(_objectSpread(_objectSpread({}, defaultLayerProps), data), {}, {\n        wrapLongitude: false,\n        getHexagon: function getHexagon(x) {\n          return x.id;\n        },\n        // coverage\n        coverage: config.coverageField ? 1 : visConfig.coverage,\n        // highlight\n        autoHighlight: visConfig.enable3d,\n        highlightColor: _defaultSettings.HIGHLIGH_COLOR_3D,\n        // elevation\n        extruded: visConfig.enable3d,\n        elevationScale: visConfig.elevationScale * eleZoomFactor,\n        // render\n        updateTriggers: h3HexagonLayerTriggers,\n        _subLayerProps: {\n          'hexagon-cell': {\n            type: _enhancedColumnLayer[\"default\"],\n            getCoverage: data.getCoverage,\n            updateTriggers: columnLayerTriggers\n          }\n        }\n      }))].concat((0, _toConsumableArray2[\"default\"])(hoveredObject && !config.sizeField ? [new _layers.GeoJsonLayer(_objectSpread(_objectSpread({}, this.getDefaultHoverLayerProps()), {}, {\n        data: [(0, _h3Utils.idToPolygonGeo)(hoveredObject)],\n        getLineColor: config.highlightColor,\n        lineWidthScale: DEFAULT_LINE_SCALE_VALUE * zoomFactor,\n        wrapLongitude: false\n      }))] : []));\n    }\n  }], [{\n    key: \"findDefaultLayerProps\",\n    value: function findDefaultLayerProps(_ref3) {\n      var _ref3$fields = _ref3.fields,\n        fields = _ref3$fields === void 0 ? [] : _ref3$fields,\n        dataContainer = _ref3.dataContainer;\n      var hexFields = (0, _h3Utils.getHexFields)(fields, dataContainer);\n      if (!hexFields.length) {\n        return {\n          props: []\n        };\n      }\n      return {\n        props: hexFields.map(function (f) {\n          return {\n            isVisible: true,\n            label: f.displayName || f.name,\n            columns: {\n              hex_id: {\n                value: f.name,\n                fieldIdx: fields.findIndex(function (fid) {\n                  return fid.name === f.name;\n                })\n              }\n            }\n          };\n        })\n      };\n    }\n  }]);\n  return HexagonIdLayer;\n}(_baseLayer[\"default\"]);\nexports[\"default\"] = HexagonIdLayer;","map":{"version":3,"sources":["../../../src/layers/h3-hexagon-layer/h3-hexagon-layer.js"],"names":["DEFAULT_LINE_SCALE_VALUE","hexIdRequiredColumns","hexIdAccessor","hex_id","dc","valueAt","d","index","fieldIdx","defaultElevation","defaultCoverage","HexagonIdVisConfigs","opacity","colorRange","coverage","enable3d","sizeRange","coverageRange","elevationScale","enableElevationZoomFactor","HexagonIdLayer","Layer","props","registerVisConfig","getPositionAccessor","config","columns","dataContainer","H3HexagonLayerIcon","visualChannels","color","accessor","size","property","nullValue","condition","visConfig","defaultValue","field","scale","domain","range","key","channelScaleType","CHANNEL_SCALES","radius","dataset","defaultColorField","updateLayerConfig","colorField","updateLayerVisualChannel","fields","hexFields","length","map","isVisible","label","f","displayName","name","value","findIndex","fid","coverageField","coverageDomain","coverageScale","filteredIndex","getHexId","data","i","id","centroid","dataToFeature","centroids","push","datasets","oldLayerData","opt","gpuFilter","dataId","updateData","accessors","getAttributeAccessors","getFilterValue","filterValueAccessor","centroidsDataContainer","bounds","getPointsBounds","updateMeta","opts","objectHovered","mapState","zoomFactor","getZoomFactor","eleZoomFactor","getElevationZoomFactor","updateTriggers","getVisualChannelUpdateTriggers","h3HexagonLayerTriggers","getHexagon","getFillColor","getElevation","filterValueUpdateTriggers","columnLayerTriggers","getCoverage","defaultLayerProps","getDefaultDeckLayerProps","hoveredObject","hasHoveredObject","H3HexagonLayer","wrapLongitude","x","autoHighlight","highlightColor","HIGHLIGH_COLOR_3D","extruded","_subLayerProps","type","EnhancedColumnLayer","sizeField","GeoJsonLayer","getDefaultHoverLayerProps","getLineColor","lineWidthScale"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport Layer from '../base-layer';\nimport {findDefaultColorField} from 'utils/dataset-utils';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {H3HexagonLayer} from '@deck.gl/geo-layers';\nimport EnhancedColumnLayer from 'deckgl-layers/column-layer/enhanced-column-layer';\nimport {getCentroid, idToPolygonGeo, h3IsValid, getHexFields} from './h3-utils';\nimport H3HexagonLayerIcon from './h3-hexagon-layer-icon';\nimport {CHANNEL_SCALES, HIGHLIGH_COLOR_3D} from 'constants/default-settings';\n\nimport {createDataContainer} from 'utils/table-utils';\n\nconst DEFAULT_LINE_SCALE_VALUE = 8;\n\nexport const hexIdRequiredColumns = ['hex_id'];\nexport const hexIdAccessor = ({hex_id}) => dc => d => dc.valueAt(d.index, hex_id.fieldIdx);\n\nexport const defaultElevation = 500;\nexport const defaultCoverage = 1;\n\nexport const HexagonIdVisConfigs = {\n  opacity: 'opacity',\n  colorRange: 'colorRange',\n  coverage: 'coverage',\n  enable3d: 'enable3d',\n  sizeRange: 'elevationRange',\n  coverageRange: 'coverageRange',\n  elevationScale: 'elevationScale',\n  enableElevationZoomFactor: 'enableElevationZoomFactor'\n};\n\nexport default class HexagonIdLayer extends Layer {\n  constructor(props) {\n    super(props);\n    this.registerVisConfig(HexagonIdVisConfigs);\n    this.getPositionAccessor = dataContainer => hexIdAccessor(this.config.columns)(dataContainer);\n  }\n\n  get type() {\n    return 'hexagonId';\n  }\n\n  get name() {\n    return 'H3';\n  }\n\n  get requiredLayerColumns() {\n    return hexIdRequiredColumns;\n  }\n\n  get layerIcon() {\n    // use hexagon layer icon for now\n    return H3HexagonLayerIcon;\n  }\n\n  get visualChannels() {\n    const visualChannels = super.visualChannels;\n    return {\n      color: {\n        ...visualChannels.color,\n        accessor: 'getFillColor'\n      },\n      size: {\n        ...visualChannels.size,\n        property: 'height',\n        accessor: 'getElevation',\n        nullValue: 0,\n        condition: config => config.visConfig.enable3d,\n        defaultValue: defaultElevation\n      },\n      coverage: {\n        property: 'coverage',\n        field: 'coverageField',\n        scale: 'coverageScale',\n        domain: 'coverageDomain',\n        range: 'coverageRange',\n        key: 'coverage',\n        channelScaleType: CHANNEL_SCALES.radius,\n        accessor: 'getCoverage',\n        nullValue: 0,\n        defaultValue: defaultCoverage\n      }\n    };\n  }\n\n  setInitialLayerConfig(dataset) {\n    const defaultColorField = findDefaultColorField(dataset);\n\n    if (defaultColorField) {\n      this.updateLayerConfig({\n        colorField: defaultColorField\n      });\n      this.updateLayerVisualChannel(dataset, 'color');\n    }\n\n    return this;\n  }\n\n  static findDefaultLayerProps({fields = [], dataContainer}) {\n    const hexFields = getHexFields(fields, dataContainer);\n    if (!hexFields.length) {\n      return {props: []};\n    }\n\n    return {\n      props: hexFields.map(f => ({\n        isVisible: true,\n        label: f.displayName || f.name,\n        columns: {\n          hex_id: {\n            value: f.name,\n            fieldIdx: fields.findIndex(fid => fid.name === f.name)\n          }\n        }\n      }))\n    };\n  }\n\n  getDefaultLayerConfig(props = {}) {\n    return {\n      ...super.getDefaultLayerConfig(props),\n\n      // add height visual channel\n      coverageField: null,\n      coverageDomain: [0, 1],\n      coverageScale: 'linear'\n    };\n  }\n\n  calculateDataAttribute({dataContainer, filteredIndex}, getHexId) {\n    const data = [];\n\n    for (let i = 0; i < filteredIndex.length; i++) {\n      const index = filteredIndex[i];\n      const id = getHexId({index});\n      const centroid = this.dataToFeature.centroids[index];\n\n      if (centroid) {\n        data.push({\n          index,\n          id,\n          centroid\n        });\n      }\n    }\n    return data;\n  }\n\n  // TODO: fix complexity\n  /* eslint-disable complexity */\n  formatLayerData(datasets, oldLayerData, opt = {}) {\n    const {gpuFilter, dataContainer} = datasets[this.config.dataId];\n    const getHexId = this.getPositionAccessor(dataContainer);\n    const {data} = this.updateData(datasets, oldLayerData);\n    const accessors = this.getAttributeAccessors({dataContainer});\n\n    return {\n      data,\n      getHexId,\n      getFilterValue: gpuFilter.filterValueAccessor(dataContainer)(),\n      ...accessors\n    };\n  }\n  /* eslint-enable complexity */\n\n  updateLayerMeta(dataContainer, getHexId) {\n    const centroids = dataContainer.map((d, index) => {\n      const id = getHexId({index});\n      if (!h3IsValid(id)) {\n        return null;\n      }\n      // save a reference of centroids to dataToFeature\n      // so we don't have to re calculate it again\n      return getCentroid({id});\n    }, true);\n\n    const centroidsDataContainer = createDataContainer(centroids);\n\n    const bounds = this.getPointsBounds(centroidsDataContainer, (d, dc) => {\n      return [dc.valueAt(d.index, 0), dc.valueAt(d.index, 1)];\n    });\n    this.dataToFeature = {centroids};\n    this.updateMeta({bounds});\n  }\n\n  renderLayer(opts) {\n    const {data, gpuFilter, objectHovered, mapState} = opts;\n\n    const zoomFactor = this.getZoomFactor(mapState);\n    const eleZoomFactor = this.getElevationZoomFactor(mapState);\n    const {config} = this;\n    const {visConfig} = config;\n    const updateTriggers = this.getVisualChannelUpdateTriggers();\n\n    const h3HexagonLayerTriggers = {\n      getHexagon: this.config.columns,\n      getFillColor: updateTriggers.getFillColor,\n      getElevation: updateTriggers.getElevation,\n      getFilterValue: gpuFilter.filterValueUpdateTriggers\n    };\n\n    const columnLayerTriggers = {\n      getCoverage: updateTriggers.getCoverage\n    };\n\n    const defaultLayerProps = this.getDefaultDeckLayerProps(opts);\n    const hoveredObject = this.hasHoveredObject(objectHovered);\n\n    return [\n      new H3HexagonLayer({\n        ...defaultLayerProps,\n        ...data,\n        wrapLongitude: false,\n\n        getHexagon: x => x.id,\n\n        // coverage\n        coverage: config.coverageField ? 1 : visConfig.coverage,\n\n        // highlight\n        autoHighlight: visConfig.enable3d,\n        highlightColor: HIGHLIGH_COLOR_3D,\n\n        // elevation\n        extruded: visConfig.enable3d,\n        elevationScale: visConfig.elevationScale * eleZoomFactor,\n\n        // render\n        updateTriggers: h3HexagonLayerTriggers,\n        _subLayerProps: {\n          'hexagon-cell': {\n            type: EnhancedColumnLayer,\n            getCoverage: data.getCoverage,\n            updateTriggers: columnLayerTriggers\n          }\n        }\n      }),\n      ...(hoveredObject && !config.sizeField\n        ? [\n            new GeoJsonLayer({\n              ...this.getDefaultHoverLayerProps(),\n              data: [idToPolygonGeo(hoveredObject)],\n              getLineColor: config.highlightColor,\n              lineWidthScale: DEFAULT_LINE_SCALE_VALUE * zoomFactor,\n              wrapLongitude: false\n            })\n          ]\n        : [])\n    ];\n  }\n}\n"]},"metadata":{},"sourceType":"script"}