{"ast":null,"code":"import Input from './input';\nimport { INPUT_EVENT_TYPES } from '../constants';\nconst {\n  KEY_EVENTS\n} = INPUT_EVENT_TYPES;\nconst DOWN_EVENT_TYPE = 'keydown';\nconst UP_EVENT_TYPE = 'keyup';\nexport default class KeyInput extends Input {\n  constructor(element, callback, options) {\n    super(element, callback, options);\n    this.handleEvent = event => {\n      // Ignore if focused on text input\n      const targetElement = event.target || event.srcElement;\n      if (targetElement.tagName === 'INPUT' && targetElement.type === 'text' || targetElement.tagName === 'TEXTAREA') {\n        return;\n      }\n      if (this.enableDownEvent && event.type === 'keydown') {\n        this.callback({\n          type: DOWN_EVENT_TYPE,\n          srcEvent: event,\n          key: event.key,\n          target: event.target\n        });\n      }\n      if (this.enableUpEvent && event.type === 'keyup') {\n        this.callback({\n          type: UP_EVENT_TYPE,\n          srcEvent: event,\n          key: event.key,\n          target: event.target\n        });\n      }\n    };\n    this.enableDownEvent = this.options.enable;\n    this.enableUpEvent = this.options.enable;\n    this.events = (this.options.events || []).concat(KEY_EVENTS);\n    element.tabIndex = this.options.tabIndex || 0;\n    element.style.outline = 'none';\n    this.events.forEach(event => element.addEventListener(event, this.handleEvent));\n  }\n  destroy() {\n    this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n  }\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n  enableEventType(eventType, enabled) {\n    if (eventType === DOWN_EVENT_TYPE) {\n      this.enableDownEvent = enabled;\n    }\n    if (eventType === UP_EVENT_TYPE) {\n      this.enableUpEvent = enabled;\n    }\n  }\n}","map":{"version":3,"sources":["../../../src/inputs/key-input.ts"],"names":[],"mappings":"AACA,OAAO,KAAqB,MAAM,SAAS;AAE3C,SAAQ,iBAAiB,QAAO,cAAc;AAE9C,MAAM;EAAC;AAAU,CAAC,GAAG,iBAAiB;AACtC,MAAM,eAAe,GAAG,SAAS;AACjC,MAAM,aAAa,GAAG,OAAO;AAO7B,eAAc,MAAO,QAAS,SAAQ,KAA0C,CAAA;EAM9E,WAAA,CACE,OAAoB,EACpB,QAA6C,EAC7C,OAAwB,EAAA;IAExB,KAAK,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC;IA6BnC,IAAA,CAAA,WAAW,GAAI,KAAoB,IAAI;MACrC;MACA,MAAM,aAAa,GAAI,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,UAA0B;MACvE,IACG,aAAa,CAAC,OAAO,KAAK,OAAO,IAAK,aAAkC,CAAC,IAAI,KAAK,MAAM,IACzF,aAAa,CAAC,OAAO,KAAK,UAAU,EACpC;QACA;MACD;MAED,IAAI,IAAI,CAAC,eAAe,IAAI,KAAK,CAAC,IAAI,KAAK,SAAS,EAAE;QACpD,IAAI,CAAC,QAAQ,CAAC;UACZ,IAAI,EAAE,eAAe;UACrB,QAAQ,EAAE,KAAK;UACf,GAAG,EAAE,KAAK,CAAC,GAAG;UACd,MAAM,EAAE,KAAK,CAAC;SACf,CAAC;MACH;MAED,IAAI,IAAI,CAAC,aAAa,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,EAAE;QAChD,IAAI,CAAC,QAAQ,CAAC;UACZ,IAAI,EAAE,aAAa;UACnB,QAAQ,EAAE,KAAK;UACf,GAAG,EAAE,KAAK,CAAC,GAAG;UACd,MAAM,EAAE,KAAK,CAAC;SACf,CAAC;MACH;IACH,CAAC;IAtDC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM;IAC1C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM;IAExC,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,EAAE,EAAE,MAAM,CAAC,UAAU,CAAC;IAE5D,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,CAAC;IAC7C,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM;IAC9B,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,gBAAgB,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;EACjF;EAEA,OAAO,GAAA;IACL,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;EACzF;EAEA;;;AAGG;EACH,eAAe,CAAC,SAAiB,EAAE,OAAgB,EAAA;IACjD,IAAI,SAAS,KAAK,eAAe,EAAE;MACjC,IAAI,CAAC,eAAe,GAAG,OAAO;IAC/B;IACD,IAAI,SAAS,KAAK,aAAa,EAAE;MAC/B,IAAI,CAAC,aAAa,GAAG,OAAO;IAC7B;EACH;AA8BD","sourceRoot":"","sourcesContent":["import Input from './input';\nimport { INPUT_EVENT_TYPES } from '../constants';\nconst { KEY_EVENTS } = INPUT_EVENT_TYPES;\nconst DOWN_EVENT_TYPE = 'keydown';\nconst UP_EVENT_TYPE = 'keyup';\nexport default class KeyInput extends Input {\n    constructor(element, callback, options) {\n        super(element, callback, options);\n        this.handleEvent = (event) => {\n            // Ignore if focused on text input\n            const targetElement = (event.target || event.srcElement);\n            if ((targetElement.tagName === 'INPUT' && targetElement.type === 'text') ||\n                targetElement.tagName === 'TEXTAREA') {\n                return;\n            }\n            if (this.enableDownEvent && event.type === 'keydown') {\n                this.callback({\n                    type: DOWN_EVENT_TYPE,\n                    srcEvent: event,\n                    key: event.key,\n                    target: event.target\n                });\n            }\n            if (this.enableUpEvent && event.type === 'keyup') {\n                this.callback({\n                    type: UP_EVENT_TYPE,\n                    srcEvent: event,\n                    key: event.key,\n                    target: event.target\n                });\n            }\n        };\n        this.enableDownEvent = this.options.enable;\n        this.enableUpEvent = this.options.enable;\n        this.events = (this.options.events || []).concat(KEY_EVENTS);\n        element.tabIndex = this.options.tabIndex || 0;\n        element.style.outline = 'none';\n        this.events.forEach(event => element.addEventListener(event, this.handleEvent));\n    }\n    destroy() {\n        this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n    }\n    /**\n     * Enable this input (begin processing events)\n     * if the specified event type is among those handled by this input.\n     */\n    enableEventType(eventType, enabled) {\n        if (eventType === DOWN_EVENT_TYPE) {\n            this.enableDownEvent = enabled;\n        }\n        if (eventType === UP_EVENT_TYPE) {\n            this.enableUpEvent = enabled;\n        }\n    }\n}\n//# sourceMappingURL=key-input.js.map"]},"metadata":{},"sourceType":"module"}