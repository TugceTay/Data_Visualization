{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { Layer, project32, phongLighting, picking, COORDINATE_SYSTEM, log } from '@deck.gl/core';\nimport { Model, Geometry, Texture2D, isWebGL2 } from '@luma.gl/core';\nimport { hasFeature, FEATURES } from '@luma.gl/webgl';\nimport { MATRIX_ATTRIBUTES, shouldComposeModelMatrix } from '../utils/matrix';\nimport vs from './simple-mesh-layer-vertex.glsl';\nimport fs from './simple-mesh-layer-fragment.glsl';\nfunction getTextureFromData(gl, data, opts) {\n  if (data instanceof Texture2D) {\n    return data;\n  }\n  return new Texture2D(gl, Object.assign({\n    data: data\n  }, opts));\n}\nfunction validateGeometryAttributes(attributes) {\n  log.assert(attributes.positions || attributes.POSITION, 'SimpleMeshLayer requires \"postions\" or \"POSITION\" attribute in mesh property.');\n}\nfunction getGeometry(data) {\n  if (data.attributes) {\n    validateGeometryAttributes(data.attributes);\n    if (data instanceof Geometry) {\n      return data;\n    } else {\n      return new Geometry(data);\n    }\n  } else if (data.positions || data.POSITION) {\n    validateGeometryAttributes(data);\n    return new Geometry({\n      attributes: data\n    });\n  }\n  throw Error('Invalid mesh');\n}\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  mesh: {\n    value: null,\n    type: 'object',\n    async: true\n  },\n  texture: {\n    type: 'object',\n    value: null,\n    async: true\n  },\n  sizeScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  parameters: {\n    depthTest: true,\n    depthFunc: 515\n  },\n  _instanced: true,\n  wireframe: false,\n  material: true,\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getOrientation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getScale: {\n    type: 'accessor',\n    value: [1, 1, 1]\n  },\n  getTranslation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getTransformMatrix: {\n    type: 'accessor',\n    value: []\n  }\n};\nvar SimpleMeshLayer = function (_Layer) {\n  _inherits(SimpleMeshLayer, _Layer);\n  function SimpleMeshLayer() {\n    _classCallCheck(this, SimpleMeshLayer);\n    return _possibleConstructorReturn(this, _getPrototypeOf(SimpleMeshLayer).apply(this, arguments));\n  }\n  _createClass(SimpleMeshLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      var transpileToGLSL100 = !isWebGL2(this.context.gl);\n      var defines = {};\n      if (hasFeature(this.context.gl, FEATURES.GLSL_DERIVATIVES)) {\n        defines.DERIVATIVES_AVAILABLE = 1;\n      }\n      return _get(_getPrototypeOf(SimpleMeshLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, phongLighting, picking],\n        transpileToGLSL100: transpileToGLSL100,\n        defines: defines\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instancePositions: {\n          transition: true,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          size: 3,\n          accessor: 'getPosition'\n        },\n        instanceColors: {\n          type: 5121,\n          transition: true,\n          size: this.props.colorFormat.length,\n          normalized: true,\n          accessor: 'getColor',\n          defaultValue: [0, 0, 0, 255]\n        },\n        instanceModelMatrix: MATRIX_ATTRIBUTES\n      });\n      this.setState({\n        emptyTexture: new Texture2D(this.context.gl, {\n          data: new Uint8Array(4),\n          width: 1,\n          height: 1\n        })\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n        oldProps = _ref.oldProps,\n        changeFlags = _ref.changeFlags;\n      _get(_getPrototypeOf(SimpleMeshLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n      if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {\n        if (this.state.model) {\n          this.state.model[\"delete\"]();\n        }\n        if (props.mesh) {\n          this.setState({\n            model: this.getModel(props.mesh)\n          });\n          var attributes = props.mesh.attributes || props.mesh;\n          this.setState({\n            hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n          });\n        }\n        this.getAttributeManager().invalidateAll();\n      }\n      if (props.texture !== oldProps.texture) {\n        this.setTexture(props.texture);\n      }\n      if (this.state.model) {\n        this.state.model.setDrawMode(this.props.wireframe ? 3 : 4);\n      }\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      _get(_getPrototypeOf(SimpleMeshLayer.prototype), \"finalizeState\", this).call(this);\n      this.state.emptyTexture[\"delete\"]();\n      if (this.state.texture) {\n        this.state.texture[\"delete\"]();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      if (!this.state.model) {\n        return;\n      }\n      var viewport = this.context.viewport;\n      var _this$props = this.props,\n        sizeScale = _this$props.sizeScale,\n        coordinateSystem = _this$props.coordinateSystem,\n        _instanced = _this$props._instanced;\n      this.state.model.draw({\n        uniforms: Object.assign({}, uniforms, {\n          sizeScale: sizeScale,\n          composeModelMatrix: !_instanced || shouldComposeModelMatrix(viewport, coordinateSystem),\n          flatShading: !this.state.hasNormals\n        })\n      });\n    }\n  }, {\n    key: \"getModel\",\n    value: function getModel(mesh) {\n      var model = new Model(this.context.gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: getGeometry(mesh),\n        isInstanced: true\n      }));\n      var _this$state = this.state,\n        texture = _this$state.texture,\n        emptyTexture = _this$state.emptyTexture;\n      model.setUniforms({\n        sampler: texture || emptyTexture,\n        hasTexture: Boolean(texture)\n      });\n      return model;\n    }\n  }, {\n    key: \"setTexture\",\n    value: function setTexture(image) {\n      var gl = this.context.gl;\n      var _this$state2 = this.state,\n        emptyTexture = _this$state2.emptyTexture,\n        model = _this$state2.model;\n      if (this.state.texture) {\n        this.state.texture[\"delete\"]();\n      }\n      var texture = image ? getTextureFromData(gl, image) : null;\n      this.setState({\n        texture: texture\n      });\n      if (model) {\n        model.setUniforms({\n          sampler: texture || emptyTexture,\n          hasTexture: Boolean(texture)\n        });\n      }\n    }\n  }]);\n  return SimpleMeshLayer;\n}(Layer);\nexport { SimpleMeshLayer as default };\nSimpleMeshLayer.layerName = 'SimpleMeshLayer';\nSimpleMeshLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/simple-mesh-layer/simple-mesh-layer.js"],"names":["Layer","project32","phongLighting","picking","COORDINATE_SYSTEM","log","Model","Geometry","Texture2D","isWebGL2","hasFeature","FEATURES","MATRIX_ATTRIBUTES","shouldComposeModelMatrix","vs","fs","getTextureFromData","gl","data","opts","assign","validateGeometryAttributes","attributes","assert","positions","POSITION","getGeometry","Error","DEFAULT_COLOR","defaultProps","mesh","value","type","async","texture","sizeScale","min","parameters","depthTest","depthFunc","_instanced","wireframe","material","getPosition","x","position","getColor","getOrientation","getScale","getTranslation","getTransformMatrix","SimpleMeshLayer","transpileToGLSL100","context","defines","GLSL_DERIVATIVES","DERIVATIVES_AVAILABLE","modules","attributeManager","getAttributeManager","addInstanced","instancePositions","transition","fp64","use64bitPositions","size","accessor","instanceColors","props","colorFormat","length","normalized","defaultValue","instanceModelMatrix","setState","emptyTexture","Uint8Array","width","height","oldProps","changeFlags","extensionsChanged","state","model","getModel","hasNormals","Boolean","NORMAL","normals","invalidateAll","setTexture","setDrawMode","uniforms","viewport","coordinateSystem","draw","composeModelMatrix","flatShading","getShaders","id","geometry","isInstanced","setUniforms","sampler","hasTexture","image","layerName"],"mappings":"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","sourcesContent":["// Note: This file will either be moved back to deck.gl or reformatted to web-monorepo standards\n// Disabling lint temporarily to facilitate copying code in and out of this repo\n/* eslint-disable */\n\n// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, phongLighting, picking, COORDINATE_SYSTEM, log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Texture2D, isWebGL2} from '@luma.gl/core';\nimport {hasFeature, FEATURES} from '@luma.gl/webgl';\n\nimport {MATRIX_ATTRIBUTES, shouldComposeModelMatrix} from '../utils/matrix';\n\nimport vs from './simple-mesh-layer-vertex.glsl';\nimport fs from './simple-mesh-layer-fragment.glsl';\n\n/*\n * Convert image data into texture\n * @returns {Texture2D} texture\n */\nfunction getTextureFromData(gl, data, opts) {\n  if (data instanceof Texture2D) {\n    return data;\n  }\n  return new Texture2D(gl, Object.assign({data}, opts));\n}\n\nfunction validateGeometryAttributes(attributes) {\n  log.assert(\n    attributes.positions || attributes.POSITION,\n    'SimpleMeshLayer requires \"postions\" or \"POSITION\" attribute in mesh property.'\n  );\n}\n\n/*\n * Convert mesh data into geometry\n * @returns {Geometry} geometry\n */\nfunction getGeometry(data) {\n  if (data.attributes) {\n    validateGeometryAttributes(data.attributes);\n    if (data instanceof Geometry) {\n      return data;\n    } else {\n      return new Geometry(data);\n    }\n  } else if (data.positions || data.POSITION) {\n    validateGeometryAttributes(data);\n    return new Geometry({\n      attributes: data\n    });\n  }\n  throw Error('Invalid mesh');\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  mesh: {value: null, type: 'object', async: true},\n  texture: {type: 'object', value: null, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  // TODO - parameters should be merged, not completely overridden\n  parameters: {\n    depthTest: true,\n    depthFunc: GL.LEQUAL\n  },\n\n  // _instanced is a hack to use world position instead of meter offsets in mesh\n  // TODO - formalize API\n  _instanced: true,\n  // NOTE(Tarek): Quick and dirty wireframe. Just draws\n  // the same mesh with LINE_STRIPS. Won't follow edges\n  // of the original mesh.\n  wireframe: false,\n  // Optional material for 'lighting' shader module\n  material: true,\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {type: 'accessor', value: [0, 0, 0]},\n  getScale: {type: 'accessor', value: [1, 1, 1]},\n  getTranslation: {type: 'accessor', value: [0, 0, 0]},\n  // 4x4 matrix\n  getTransformMatrix: {type: 'accessor', value: []}\n};\n\nexport default class SimpleMeshLayer extends Layer {\n  getShaders() {\n    const transpileToGLSL100 = !isWebGL2(this.context.gl);\n\n    const defines = {};\n\n    if (hasFeature(this.context.gl, FEATURES.GLSL_DERIVATIVES)) {\n      defines.DERIVATIVES_AVAILABLE = 1;\n    }\n\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, phongLighting, picking],\n      transpileToGLSL100,\n      defines\n    });\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    attributeManager.addInstanced({\n      instancePositions: {\n        transition: true,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        size: 3,\n        accessor: 'getPosition'\n      },\n      instanceColors: {\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        size: this.props.colorFormat.length,\n        normalized: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n\n    this.setState({\n      // Avoid luma.gl's missing uniform warning\n      // TODO - add feature to luma.gl to specify ignored uniforms?\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      if (props.mesh) {\n        this.setState({model: this.getModel(props.mesh)});\n\n        const attributes = props.mesh.attributes || props.mesh;\n        this.setState({\n          hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n        });\n      }\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props.texture !== oldProps.texture) {\n      this.setTexture(props.texture);\n    }\n\n    if (this.state.model) {\n      this.state.model.setDrawMode(this.props.wireframe ? GL.LINE_STRIP : GL.TRIANGLES);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    this.state.emptyTexture.delete();\n    if (this.state.texture) {\n      this.state.texture.delete();\n    }\n  }\n\n  draw({uniforms}) {\n    if (!this.state.model) {\n      return;\n    }\n\n    const {viewport} = this.context;\n    const {sizeScale, coordinateSystem, _instanced} = this.props;\n\n    this.state.model.draw({\n      uniforms: Object.assign({}, uniforms, {\n        sizeScale,\n        composeModelMatrix: !_instanced || shouldComposeModelMatrix(viewport, coordinateSystem),\n        flatShading: !this.state.hasNormals\n      })\n    });\n  }\n\n  getModel(mesh) {\n    const model = new Model(\n      this.context.gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: getGeometry(mesh),\n        isInstanced: true\n      })\n    );\n\n    const {texture, emptyTexture} = this.state;\n    model.setUniforms({\n      sampler: texture || emptyTexture,\n      hasTexture: Boolean(texture)\n    });\n\n    return model;\n  }\n\n  setTexture(image) {\n    const {gl} = this.context;\n    const {emptyTexture, model} = this.state;\n\n    if (this.state.texture) {\n      this.state.texture.delete();\n    }\n\n    const texture = image ? getTextureFromData(gl, image) : null;\n    this.setState({texture});\n\n    if (model) {\n      // props.mesh may not be ready at this time.\n      // The sampler will be set when `getModel` is called\n      model.setUniforms({\n        sampler: texture || emptyTexture,\n        hasTexture: Boolean(texture)\n      });\n    }\n  }\n}\n\nSimpleMeshLayer.layerName = 'SimpleMeshLayer';\nSimpleMeshLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}