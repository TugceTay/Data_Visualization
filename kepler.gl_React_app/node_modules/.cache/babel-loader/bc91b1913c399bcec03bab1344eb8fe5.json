{"ast":null,"code":"var DATA_URL_PATTERN = /^data:([-\\w.]+\\/[-\\w.+]+)(;|,)/;\nvar MIME_TYPE_PATTERN = /^([-\\w.]+\\/[-\\w.+]+)/;\nexport function parseMIMEType(mimeString) {\n  if (typeof mimeString !== 'string') {\n    return '';\n  }\n  var matches = mimeString.match(MIME_TYPE_PATTERN);\n  if (matches) {\n    return matches[1];\n  }\n  return mimeString;\n}\nexport function parseMIMETypeFromURL(dataUrl) {\n  if (typeof dataUrl !== 'string') {\n    return '';\n  }\n  var matches = dataUrl.match(DATA_URL_PATTERN);\n  if (matches) {\n    return matches[1];\n  }\n  return '';\n}","map":{"version":3,"sources":["../../../../src/lib/utils/mime-type-utils.js"],"names":["DATA_URL_PATTERN","MIME_TYPE_PATTERN","parseMIMEType","mimeString","matches","match","parseMIMETypeFromURL","dataUrl"],"mappings":"AAGA,IAAMA,gBAAgB,GAAG,gCAAzB;AACA,IAAMC,iBAAiB,GAAG,sBAA1B;AAEA,OAAO,SAASC,aAAT,CAAuBC,UAAvB,EAAmC;EACxC,IAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;IAClC,OAAO,EAAP;EACD;EAGD,IAAMC,OAAO,GAAGD,UAAU,CAACE,KAAXF,CAAiBF,iBAAjBE,CAAhB;EACA,IAAIC,OAAJ,EAAa;IACX,OAAOA,OAAO,CAAC,CAAD,CAAd;EACD;EAED,OAAOD,UAAP;AACD;AAED,OAAO,SAASG,oBAAT,CAA8BC,OAA9B,EAAuC;EAC5C,IAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;IAC/B,OAAO,EAAP;EACD;EAGD,IAAMH,OAAO,GAAGG,OAAO,CAACF,KAARE,CAAcP,gBAAdO,CAAhB;EACA,IAAIH,OAAJ,EAAa;IACX,OAAOA,OAAO,CAAC,CAAD,CAAd;EACD;EAED,OAAO,EAAP;AACD","sourcesContent":["// TODO - build/integrate proper MIME type parsing\n// https://mimesniff.spec.whatwg.org/\n\nconst DATA_URL_PATTERN = /^data:([-\\w.]+\\/[-\\w.+]+)(;|,)/;\nconst MIME_TYPE_PATTERN = /^([-\\w.]+\\/[-\\w.+]+)/;\n\nexport function parseMIMEType(mimeString) {\n  if (typeof mimeString !== 'string') {\n    return '';\n  }\n\n  // If resource is a data url, extract any embedded mime type\n  const matches = mimeString.match(MIME_TYPE_PATTERN);\n  if (matches) {\n    return matches[1];\n  }\n\n  return mimeString;\n}\n\nexport function parseMIMETypeFromURL(dataUrl) {\n  if (typeof dataUrl !== 'string') {\n    return '';\n  }\n\n  // If resource is a data URL, extract any embedded mime type\n  const matches = dataUrl.match(DATA_URL_PATTERN);\n  if (matches) {\n    return matches[1];\n  }\n\n  return '';\n}\n"]},"metadata":{},"sourceType":"module"}