{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nimport { Vector3 } from '@math.gl/core';\nimport { GL } from '../constants';\nimport assert from '../utils/assert';\nimport { makePrimitiveIterator } from '../iterators/primitive-iterator';\nimport { getPrimitiveModeType } from '../primitives/modes';\nimport { getPositions } from './get-attribute-from-geometry';\nexport function computeVertexNormals(_ref) {\n  var mode = _ref.mode,\n    indices = _ref.indices,\n    attributes = _ref.attributes;\n  assert(getPrimitiveModeType(mode) === GL.TRIANGLES, 'TRIANGLES required');\n  var _getPositions = getPositions({\n      mode: mode,\n      indices: indices,\n      attributes: attributes\n    }),\n    positions = _getPositions.values;\n  var normals = new Float32Array(positions.length);\n  var vectorA = new Vector3();\n  var vectorB = new Vector3();\n  var vectorC = new Vector3();\n  var vectorCB = new Vector3();\n  var vectorAB = new Vector3();\n  var _iterator = _createForOfIteratorHelper(makePrimitiveIterator({\n      mode: mode,\n      indices: indices,\n      attributes: attributes\n    })),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var primitive = _step.value;\n      vectorA.fromArray(positions, primitive.i1 * 3);\n      vectorB.fromArray(positions, primitive.i2 * 3 + 3);\n      vectorC.fromArray(positions, primitive.i3 * 3 + 6);\n      vectorCB.subVectors(vectorC, vectorB);\n      vectorAB.subVectors(vectorA, vectorB);\n      var normal = vectorCB.cross(vectorAB);\n      normal.normalize();\n      var primitiveIndex = primitive.primitiveIndex;\n      normals[primitiveIndex * 9 + 0] = normal.x;\n      normals[primitiveIndex * 9 + 1] = normal.y;\n      normals[primitiveIndex * 9 + 2] = normal.z;\n      normals[primitiveIndex * 9 + 3] = normal.x;\n      normals[primitiveIndex * 9 + 4] = normal.y;\n      normals[primitiveIndex * 9 + 5] = normal.z;\n      normals[primitiveIndex * 9 + 6] = normal.x;\n      normals[primitiveIndex * 9 + 7] = normal.y;\n      normals[primitiveIndex * 9 + 8] = normal.z;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return normals;\n}","map":{"version":3,"sources":["../../../../src/geometry/attributes/compute-vertex-normals.js"],"names":["Vector3","GL","assert","makePrimitiveIterator","getPrimitiveModeType","getPositions","computeVertexNormals","mode","indices","attributes","TRIANGLES","values","positions","normals","Float32Array","length","vectorA","vectorB","vectorC","vectorCB","vectorAB","primitive","fromArray","i1","i2","i3","subVectors","normal","cross","normalize","primitiveIndex","x","y","z"],"mappings":"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","sourcesContent":["/** @typedef {import('./compute-vertex-normals')} types */\nimport {Vector3} from '@math.gl/core';\nimport {GL} from '../constants';\nimport assert from '../utils/assert';\nimport {makePrimitiveIterator} from '../iterators/primitive-iterator';\nimport {getPrimitiveModeType} from '../primitives/modes';\nimport {getPositions} from './get-attribute-from-geometry';\n\n/** @type {types['computeVertexNormals']} */\n// eslint-disable-next-line max-statements\nexport function computeVertexNormals({mode, indices, attributes}) {\n  // Only support GL.TRIANGLES, GL.TRIANGLE_STRIP, GL.TRIANGLE_FAN\n  assert(getPrimitiveModeType(mode) === GL.TRIANGLES, 'TRIANGLES required');\n\n  const {values: positions} = getPositions({mode, indices, attributes});\n\n  const normals = new Float32Array(positions.length);\n\n  const vectorA = new Vector3();\n  const vectorB = new Vector3();\n  const vectorC = new Vector3();\n\n  const vectorCB = new Vector3();\n  const vectorAB = new Vector3();\n\n  for (const primitive of makePrimitiveIterator({mode, indices, attributes})) {\n    vectorA.fromArray(positions, primitive.i1 * 3);\n    vectorB.fromArray(positions, primitive.i2 * 3 + 3);\n    vectorC.fromArray(positions, primitive.i3 * 3 + 6);\n\n    vectorCB.subVectors(vectorC, vectorB);\n    vectorAB.subVectors(vectorA, vectorB);\n    const normal = vectorCB.cross(vectorAB);\n    normal.normalize();\n\n    // @ts-ignore\n    const {primitiveIndex} = primitive;\n\n    normals[primitiveIndex * 9 + 0] = normal.x;\n    normals[primitiveIndex * 9 + 1] = normal.y;\n    normals[primitiveIndex * 9 + 2] = normal.z;\n\n    normals[primitiveIndex * 9 + 3] = normal.x;\n    normals[primitiveIndex * 9 + 4] = normal.y;\n    normals[primitiveIndex * 9 + 5] = normal.z;\n\n    normals[primitiveIndex * 9 + 6] = normal.x;\n    normals[primitiveIndex * 9 + 7] = normal.y;\n    normals[primitiveIndex * 9 + 8] = normal.z;\n  }\n\n  return normals;\n}\n"]},"metadata":{},"sourceType":"module"}