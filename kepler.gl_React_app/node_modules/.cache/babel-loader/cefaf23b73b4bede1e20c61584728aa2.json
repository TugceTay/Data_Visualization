{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { _WorkerFarm as WorkerFarm, toArrayBuffer, getTransferList } from '@loaders.gl/loader-utils';\nimport { parse } from '../api/parse';\nvar VERSION = typeof \"2.3.13\" !== 'undefined' ? \"2.3.13\" : 'latest';\nexport function canParseWithWorker(loader, data, options, context) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n  var loaderOptions = options && options[loader.id];\n  if (options.worker === 'local' && loaderOptions && loaderOptions.localWorkerUrl || options.worker && loaderOptions && loaderOptions.workerUrl) {\n    return loader.useWorker ? loader.useWorker(options) : true;\n  }\n  return false;\n}\nexport default function parseWithWorker(loader, data, options, context) {\n  var _ref = options || {},\n    worker = _ref.worker;\n  var loaderOptions = options && options[loader.id] || {};\n  var workerUrl = worker === 'local' ? loaderOptions.localWorkerUrl : loaderOptions.workerUrl;\n  var workerSource = \"url(\".concat(workerUrl, \")\");\n  var workerName = loader.name;\n  var workerFarm = getWorkerFarm(options);\n  options = JSON.parse(JSON.stringify(options));\n  var warning = loader.version !== VERSION ? \"(core version \".concat(VERSION, \")\") : '';\n  return workerFarm.process(workerSource, \"\".concat(workerName, \"-worker@\").concat(loader.version).concat(warning), {\n    arraybuffer: toArrayBuffer(data),\n    options: options,\n    source: \"loaders.gl@\".concat(VERSION),\n    type: 'parse'\n  });\n}\nvar _workerFarm = null;\nfunction getWorkerFarm() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var props = {};\n  if (options.maxConcurrency) {\n    props.maxConcurrency = options.maxConcurrency;\n  }\n  if (options.onDebug) {\n    props.onDebug = options.onDebug;\n  }\n  if ('reuseWorkers' in options) {\n    props.reuseWorkers = options.reuseWorkers;\n  }\n  if (!_workerFarm) {\n    _workerFarm = new WorkerFarm({\n      onMessage: onWorkerMessage\n    });\n  }\n  _workerFarm.setProps(props);\n  return _workerFarm;\n}\nfunction onWorkerMessage(_x) {\n  return _onWorkerMessage.apply(this, arguments);\n}\nfunction _onWorkerMessage() {\n  _onWorkerMessage = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(_ref2) {\n    var worker, data, resolve, reject, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            worker = _ref2.worker, data = _ref2.data, resolve = _ref2.resolve, reject = _ref2.reject;\n            _context.t0 = data.type;\n            _context.next = _context.t0 === 'done' ? 4 : _context.t0 === 'parse' ? 6 : _context.t0 === 'error' ? 17 : 19;\n            break;\n          case 4:\n            resolve(data.result);\n            return _context.abrupt(\"break\", 19);\n          case 6:\n            _context.prev = 6;\n            _context.next = 9;\n            return parse(data.arraybuffer, data.options, data.url);\n          case 9:\n            result = _context.sent;\n            worker.postMessage({\n              type: 'parse-done',\n              id: data.id,\n              result: result\n            }, getTransferList(result));\n            _context.next = 16;\n            break;\n          case 13:\n            _context.prev = 13;\n            _context.t1 = _context[\"catch\"](6);\n            worker.postMessage({\n              type: 'parse-error',\n              id: data.id,\n              message: _context.t1.message\n            });\n          case 16:\n            return _context.abrupt(\"break\", 19);\n          case 17:\n            reject(data.message);\n            return _context.abrupt(\"break\", 19);\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[6, 13]]);\n  }));\n  return _onWorkerMessage.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/loader-utils/parse-with-worker.js"],"names":["_WorkerFarm","WorkerFarm","toArrayBuffer","getTransferList","parse","VERSION","canParseWithWorker","loader","data","options","context","isSupported","loaderOptions","id","worker","localWorkerUrl","workerUrl","useWorker","parseWithWorker","workerSource","workerName","name","workerFarm","getWorkerFarm","JSON","stringify","warning","version","process","arraybuffer","source","type","_workerFarm","props","maxConcurrency","onDebug","reuseWorkers","onMessage","onWorkerMessage","setProps","resolve","reject","result","url","postMessage","message"],"mappings":"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","sourcesContent":["import {_WorkerFarm as WorkerFarm, toArrayBuffer, getTransferList} from '@loaders.gl/loader-utils';\nimport {parse} from '../api/parse';\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nexport function canParseWithWorker(loader, data, options, context) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n  const loaderOptions = options && options[loader.id];\n  if (\n    (options.worker === 'local' && loaderOptions && loaderOptions.localWorkerUrl) ||\n    (options.worker && loaderOptions && loaderOptions.workerUrl)\n  ) {\n    return loader.useWorker ? loader.useWorker(options) : true;\n  }\n  return false;\n}\n\n/**\n * this function expects that the worker function sends certain messages,\n * this can be automated if the worker is wrapper by a call to createWorker in @loaders.gl/loader-utils.\n */\nexport default function parseWithWorker(loader, data, options, context) {\n  const {worker} = options || {};\n  const loaderOptions = (options && options[loader.id]) || {};\n  const workerUrl = worker === 'local' ? loaderOptions.localWorkerUrl : loaderOptions.workerUrl;\n\n  // Mark as URL\n  const workerSource = `url(${workerUrl})`;\n  const workerName = loader.name;\n\n  const workerFarm = getWorkerFarm(options);\n\n  // options.log object contains functions which cannot be transferred\n  // TODO - decide how to handle logging on workers\n  options = JSON.parse(JSON.stringify(options));\n\n  const warning = loader.version !== VERSION ? `(core version ${VERSION})` : '';\n\n  return workerFarm.process(workerSource, `${workerName}-worker@${loader.version}${warning}`, {\n    arraybuffer: toArrayBuffer(data),\n    options,\n    source: `loaders.gl@${VERSION}`, // Lets worker ignore unrelated messages\n    type: 'parse' // For future extension\n  });\n}\n\nlet _workerFarm = null;\n\n// Create a single instance of a worker farm\nfunction getWorkerFarm(options = {}) {\n  const props = {};\n  if (options.maxConcurrency) {\n    props.maxConcurrency = options.maxConcurrency;\n  }\n  if (options.onDebug) {\n    props.onDebug = options.onDebug;\n  }\n\n  if ('reuseWorkers' in options) {\n    // @ts-ignore\n    props.reuseWorkers = options.reuseWorkers;\n  }\n\n  if (!_workerFarm) {\n    _workerFarm = new WorkerFarm({onMessage: onWorkerMessage});\n  }\n  _workerFarm.setProps(props);\n\n  return _workerFarm;\n}\n\nasync function onWorkerMessage({worker, data, resolve, reject}) {\n  switch (data.type) {\n    case 'done':\n      resolve(data.result);\n      break;\n\n    case 'parse':\n      try {\n        const result = await parse(data.arraybuffer, data.options, data.url);\n        worker.postMessage({type: 'parse-done', id: data.id, result}, getTransferList(result));\n      } catch (error) {\n        worker.postMessage({type: 'parse-error', id: data.id, message: error.message});\n      }\n      break;\n\n    case 'error':\n      reject(data.message);\n      break;\n\n    default:\n    // TODO - is this not an error case? Log a warning?\n  }\n}\n"]},"metadata":{},"sourceType":"module"}