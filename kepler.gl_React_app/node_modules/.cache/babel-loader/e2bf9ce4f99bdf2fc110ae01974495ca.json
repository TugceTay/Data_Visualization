{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { TILE3D_TYPE } from '../constants';\nimport { getMagicString } from './helpers/parse-utils';\nimport { parsePointCloud3DTile } from './parse-3d-tile-point-cloud';\nimport { parseBatchedModel3DTile } from './parse-3d-tile-batched-model';\nimport { parseInstancedModel3DTile } from './parse-3d-tile-instanced-model';\nimport { parseComposite3DTile } from './parse-3d-tile-composite';\nexport function parse3DTile(_x) {\n  return _parse3DTile.apply(this, arguments);\n}\nfunction _parse3DTile() {\n  _parse3DTile = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer) {\n    var byteOffset,\n      options,\n      context,\n      tile,\n      _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            byteOffset = _args.length > 1 && _args[1] !== undefined ? _args[1] : 0;\n            options = _args.length > 2 ? _args[2] : undefined;\n            context = _args.length > 3 ? _args[3] : undefined;\n            tile = _args.length > 4 && _args[4] !== undefined ? _args[4] : {};\n            tile.byteOffset = byteOffset;\n            tile.type = getMagicString(arrayBuffer, byteOffset);\n            _context.t0 = tile.type;\n            _context.next = _context.t0 === TILE3D_TYPE.COMPOSITE ? 9 : _context.t0 === TILE3D_TYPE.BATCHED_3D_MODEL ? 12 : _context.t0 === TILE3D_TYPE.INSTANCED_3D_MODEL ? 15 : _context.t0 === TILE3D_TYPE.POINT_CLOUD ? 18 : 21;\n            break;\n          case 9:\n            _context.next = 11;\n            return parseComposite3DTile(tile, arrayBuffer, byteOffset, options, context, parse3DTile);\n          case 11:\n            return _context.abrupt(\"return\", _context.sent);\n          case 12:\n            _context.next = 14;\n            return parseBatchedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n          case 14:\n            return _context.abrupt(\"return\", _context.sent);\n          case 15:\n            _context.next = 17;\n            return parseInstancedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n          case 17:\n            return _context.abrupt(\"return\", _context.sent);\n          case 18:\n            _context.next = 20;\n            return parsePointCloud3DTile(tile, arrayBuffer, byteOffset, options, context);\n          case 20:\n            return _context.abrupt(\"return\", _context.sent);\n          case 21:\n            throw new Error(\"3DTileLoader: unknown type \".concat(tile.type));\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parse3DTile.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-3d-tile.js"],"names":["TILE3D_TYPE","getMagicString","parsePointCloud3DTile","parseBatchedModel3DTile","parseInstancedModel3DTile","parseComposite3DTile","parse3DTile","arrayBuffer","byteOffset","options","context","tile","type","COMPOSITE","BATCHED_3D_MODEL","INSTANCED_3D_MODEL","POINT_CLOUD","Error"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {TILE3D_TYPE} from '../constants';\nimport {getMagicString} from './helpers/parse-utils';\n\nimport {parsePointCloud3DTile} from './parse-3d-tile-point-cloud';\nimport {parseBatchedModel3DTile} from './parse-3d-tile-batched-model';\nimport {parseInstancedModel3DTile} from './parse-3d-tile-instanced-model';\nimport {parseComposite3DTile} from './parse-3d-tile-composite';\n\n// Extracts\nexport async function parse3DTile(arrayBuffer, byteOffset = 0, options, context, tile = {}) {\n  tile.byteOffset = byteOffset;\n  tile.type = getMagicString(arrayBuffer, byteOffset);\n\n  switch (tile.type) {\n    case TILE3D_TYPE.COMPOSITE:\n      // Note: We pass this function as argument so that embedded tiles can be parsed recursively\n      return await parseComposite3DTile(\n        tile,\n        arrayBuffer,\n        byteOffset,\n        options,\n        context,\n        parse3DTile\n      );\n\n    case TILE3D_TYPE.BATCHED_3D_MODEL:\n      return await parseBatchedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    case TILE3D_TYPE.INSTANCED_3D_MODEL:\n      return await parseInstancedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    case TILE3D_TYPE.POINT_CLOUD:\n      return await parsePointCloud3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    default:\n      throw new Error(`3DTileLoader: unknown type ${tile.type}`); // eslint-disable-line\n  }\n}\n"]},"metadata":{},"sourceType":"module"}