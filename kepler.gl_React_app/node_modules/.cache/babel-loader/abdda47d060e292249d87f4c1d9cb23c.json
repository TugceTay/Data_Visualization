{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setLocale = exports.setExportHTMLMapMode = exports.setExportMapFormat = exports.setUserMapboxAccessToken = exports.setExportData = exports.setExportFiltered = exports.setExportDataType = exports.setExportSelectedDataset = exports.cleanupExportImage = exports.setExportImageError = exports.setExportImageDataUri = exports.startExportingImage = exports.setExportImageSetting = exports.removeNotification = exports.addNotification = exports.openDeleteModal = exports.setMapControlVisibility = exports.toggleMapControl = exports.hideExportDropdown = exports.showExportDropdown = exports.toggleModal = exports.toggleSidePanel = void 0;\nvar _reduxActions = require(\"redux-actions\");\nvar _actionTypes = _interopRequireDefault(require(\"../constants/action-types\"));\n\n// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/**\n * Toggle active side panel\n * @memberof uiStateActions\n * @param id  id of side panel to be shown, one of `layer`, `filter`, `interaction`, `map`\n * @type {typeof import('./ui-state-actions').toggleSidePanel}\n * @public\n */\nvar toggleSidePanel = (0, _reduxActions.createAction)(_actionTypes[\"default\"].TOGGLE_SIDE_PANEL, function (id) {\n  return id;\n});\n/**\n * Show and hide modal dialog\n * @memberof uiStateActions\n * @param id - id of modal to be shown, null to hide modals. One of:\n *  - [`DATA_TABLE_ID`](../constants/default-settings.md#data_table_id)\n *  - [`DELETE_DATA_ID`](../constants/default-settings.md#delete_data_id)\n *  - [`ADD_DATA_ID`](../constants/default-settings.md#add_data_id)\n *  - [`EXPORT_IMAGE_ID`](../constants/default-settings.md#export_image_id)\n *  - [`EXPORT_DATA_ID`](../constants/default-settings.md#export_data_id)\n *  - [`ADD_MAP_STYLE_ID`](../constants/default-settings.md#add_map_style_id)\n * @type {typeof import('./ui-state-actions').toggleModal}\n * @public\n */\n\nexports.toggleSidePanel = toggleSidePanel;\nvar toggleModal = (0, _reduxActions.createAction)(_actionTypes[\"default\"].TOGGLE_MODAL, function (id) {\n  return id;\n});\n/**\n * Hide and show side panel header dropdown, activated by clicking the share link on top of the side panel\n * @memberof uiStateActions\n * @param id - id of the dropdown\n * @type {typeof import('./ui-state-actions').showExportDropdown}\n * @public\n */\n\nexports.toggleModal = toggleModal;\nvar showExportDropdown = (0, _reduxActions.createAction)(_actionTypes[\"default\"].SHOW_EXPORT_DROPDOWN, function (id) {\n  return id;\n});\n/**\n * Hide side panel header dropdown, activated by clicking the share link on top of the side panel\n * @memberof uiStateActions\n * @type {typeof import('./ui-state-actions').hideExportDropdown}\n * @public\n */\n\nexports.showExportDropdown = showExportDropdown;\nvar hideExportDropdown = (0, _reduxActions.createAction)(_actionTypes[\"default\"].HIDE_EXPORT_DROPDOWN);\n/**\n * Toggle active map control panel\n * @memberof uiStateActions\n * @param panelId - map control panel id, one of the keys of: [`DEFAULT_MAP_CONTROLS`](#default_map_controls)\n * @type {typeof import('./ui-state-actions').toggleMapControl}\n * @public\n */\n\nexports.hideExportDropdown = hideExportDropdown;\nvar toggleMapControl = (0, _reduxActions.createAction)(_actionTypes[\"default\"].TOGGLE_MAP_CONTROL, function (panelId, index) {\n  return {\n    panelId: panelId,\n    index: index\n  };\n});\n/**\n * Toggle active map control panel\n * @memberof uiStateActions\n * @param panelId - map control panel id, one of the keys of: [`DEFAULT_MAP_CONTROLS`](#default_map_controls)\n * @type {typeof import('./ui-state-actions').setMapControlVisibility}\n * @public\n */\n\nexports.toggleMapControl = toggleMapControl;\nvar setMapControlVisibility = (0, _reduxActions.createAction)(_actionTypes[\"default\"].SET_MAP_CONTROL_VISIBILITY, function (panelId, show) {\n  return {\n    panelId: panelId,\n    show: show\n  };\n});\n/**\n * Toggle active map control panel\n * @memberof uiStateActions\n * @param datasetId - `id` of the dataset to be deleted\n * @type {typeof import('./ui-state-actions').openDeleteModal}\n * @public\n */\n\nexports.setMapControlVisibility = setMapControlVisibility;\nvar openDeleteModal = (0, _reduxActions.createAction)(_actionTypes[\"default\"].OPEN_DELETE_MODAL, function (datasetId) {\n  return datasetId;\n});\n/**\n * Add a notification to be displayed.\n * Existing notification will be updated in case of matching id.\n * @memberof uiStateActions\n * @param notification - The `notification` object to be added or updated\n * @type {typeof import('./ui-state-actions').addNotification}\n * @public\n */\n\nexports.openDeleteModal = openDeleteModal;\nvar addNotification = (0, _reduxActions.createAction)(_actionTypes[\"default\"].ADD_NOTIFICATION, function (notification) {\n  return notification;\n});\n/**\n * Remove a notification\n * @memberof uiStateActions\n * @param id - `id` of the notification to be removed\n * @type {typeof import('./ui-state-actions').removeNotification}\n * @public\n */\n\nexports.addNotification = addNotification;\nvar removeNotification = (0, _reduxActions.createAction)(_actionTypes[\"default\"].REMOVE_NOTIFICATION, function (id) {\n  return id;\n});\n/**\n * Set `exportImage` settings: ratio, resolution, legend\n * @memberof uiStateActions\n * @param newSetting - {ratio: '1x'}\n * @type {typeof import('./ui-state-actions').setExportImageSetting}\n * @public\n */\n\nexports.removeNotification = removeNotification;\nvar setExportImageSetting = (0, _reduxActions.createAction)(_actionTypes[\"default\"].SET_EXPORT_IMAGE_SETTING, function (newSetting) {\n  return newSetting;\n});\n/**\n * Start exporting image flow\n * @memberof uiStateActions\n * @type {typeof import('./ui-state-actions').startExportingImage}\n * @public\n */\n\nexports.setExportImageSetting = setExportImageSetting;\nvar startExportingImage = (0, _reduxActions.createAction)(_actionTypes[\"default\"].START_EXPORTING_IMAGE);\n/**\n * Set `exportImage.setExportImageDataUri` to a dataUri\n * @memberof uiStateActions\n * @param dataUri - export image data uri\n * @type {typeof import('./ui-state-actions').setExportImageDataUri}\n * @public\n */\n\nexports.startExportingImage = startExportingImage;\nvar setExportImageDataUri = (0, _reduxActions.createAction)(_actionTypes[\"default\"].SET_EXPORT_IMAGE_DATA_URI, function (dataUri) {\n  return dataUri;\n});\n/**\n * Set Export image error\n * @memberof uiStateActions\n * @type {typeof import('./ui-state-actions').setExportImageError}\n * @public\n */\n\nexports.setExportImageDataUri = setExportImageDataUri;\nvar setExportImageError = (0, _reduxActions.createAction)(_actionTypes[\"default\"].SET_EXPORT_IMAGE_ERROR, function (error) {\n  return error;\n});\n/**\n * Delete cached export image\n * @memberof uiStateActions\n * @type {typeof import('./ui-state-actions').cleanupExportImage}\n * @public\n */\n\nexports.setExportImageError = setExportImageError;\nvar cleanupExportImage = (0, _reduxActions.createAction)(_actionTypes[\"default\"].CLEANUP_EXPORT_IMAGE);\n/**\n * Set selected dataset for export\n * @memberof uiStateActions\n * @param datasetId - dataset id\n * @type {typeof import('./ui-state-actions').setExportSelectedDataset}\n * @public\n */\n\nexports.cleanupExportImage = cleanupExportImage;\nvar setExportSelectedDataset = (0, _reduxActions.createAction)(_actionTypes[\"default\"].SET_EXPORT_SELECTED_DATASET, function (datasetId) {\n  return datasetId;\n});\n/**\n * Set data format for exporting data\n * @memberof uiStateActions\n * @param dataType - one of `'text/csv'`\n * @type {typeof import('./ui-state-actions').setExportDataType}\n * @public\n */\n\nexports.setExportSelectedDataset = setExportSelectedDataset;\nvar setExportDataType = (0, _reduxActions.createAction)(_actionTypes[\"default\"].SET_EXPORT_DATA_TYPE, function (dataType) {\n  return dataType;\n});\n/**\n * Whether to export filtered data, `true` or `false`\n * @memberof uiStateActions\n * @param payload - set `true` to ony export filtered data\n * @type {typeof import('./ui-state-actions').setExportFiltered}\n * @public\n */\n\nexports.setExportDataType = setExportDataType;\nvar setExportFiltered = (0, _reduxActions.createAction)(_actionTypes[\"default\"].SET_EXPORT_FILTERED, function (payload) {\n  return payload;\n});\n/**\n * Whether to including data in map config, toggle between `true` or `false`\n * @memberof uiStateActions\n * @type {typeof import('./ui-state-actions').setExportData}\n * @public\n */\n\nexports.setExportFiltered = setExportFiltered;\nvar setExportData = (0, _reduxActions.createAction)(_actionTypes[\"default\"].SET_EXPORT_DATA);\n/**\n * Whether we export a mapbox access token used to create a single map html file\n * @memberof uiStateActions\n * @param payload - mapbox access token\n * @type {typeof import('./ui-state-actions').setUserMapboxAccessToken}\n * @public\n */\n\nexports.setExportData = setExportData;\nvar setUserMapboxAccessToken = (0, _reduxActions.createAction)(_actionTypes[\"default\"].SET_USER_MAPBOX_ACCESS_TOKEN, function (payload) {\n  return payload;\n});\n/**\n * Set the export map format (html, json)\n * @memberOf uiStateActions\n * @param payload - map format\n * @type {typeof import('./ui-state-actions').setExportMapFormat}\n * @public\n */\n\nexports.setUserMapboxAccessToken = setUserMapboxAccessToken;\nvar setExportMapFormat = (0, _reduxActions.createAction)(_actionTypes[\"default\"].SET_EXPORT_MAP_FORMAT, function (payload) {\n  return payload;\n});\n/**\n * Set the HTML mode to use to export HTML mode\n * @memberOf uiStateActions\n * @param payload - map mode\n * @type {typeof import('./ui-state-actions').setExportHTMLMapMode}\n */\n\nexports.setExportMapFormat = setExportMapFormat;\nvar setExportHTMLMapMode = (0, _reduxActions.createAction)(_actionTypes[\"default\"].SET_EXPORT_MAP_HTML_MODE, function (payload) {\n  return payload;\n});\n/**\n * Set `locale` value\n * @memberof uiStateActions\n * @param locale - locale of the UI\n * @type {typeof import('./ui-state-actions').setLocale}\n * @public\n */\n\nexports.setExportHTMLMapMode = setExportHTMLMapMode;\nvar setLocale = (0, _reduxActions.createAction)(_actionTypes[\"default\"].SET_LOCALE, function (locale) {\n  return {\n    locale: locale\n  };\n});\n/**\n * This declaration is needed to group actions in docs\n */\n\n/**\n * Actions handled mostly by  `uiState` reducer.\n * They manage UI changes in tha app, such as open and close side panel,\n * switch between tabs in the side panel, open and close modal dialog for exporting data / images etc.\n * It also manges which settings are selected during image and map export\n *\n * @public\n */\n\n/* eslint-disable no-unused-vars */\n// @ts-ignore\n\nexports.setLocale = setLocale;\nvar uiStateActions = null;\n/* eslint-enable no-unused-vars */","map":{"version":3,"sources":["../../src/actions/ui-state-actions.js"],"names":["toggleSidePanel","ActionTypes","TOGGLE_SIDE_PANEL","id","toggleModal","TOGGLE_MODAL","showExportDropdown","SHOW_EXPORT_DROPDOWN","hideExportDropdown","HIDE_EXPORT_DROPDOWN","toggleMapControl","TOGGLE_MAP_CONTROL","panelId","index","setMapControlVisibility","SET_MAP_CONTROL_VISIBILITY","show","openDeleteModal","OPEN_DELETE_MODAL","datasetId","addNotification","ADD_NOTIFICATION","notification","removeNotification","REMOVE_NOTIFICATION","setExportImageSetting","SET_EXPORT_IMAGE_SETTING","newSetting","startExportingImage","START_EXPORTING_IMAGE","setExportImageDataUri","SET_EXPORT_IMAGE_DATA_URI","dataUri","setExportImageError","SET_EXPORT_IMAGE_ERROR","error","cleanupExportImage","CLEANUP_EXPORT_IMAGE","setExportSelectedDataset","SET_EXPORT_SELECTED_DATASET","setExportDataType","SET_EXPORT_DATA_TYPE","dataType","setExportFiltered","SET_EXPORT_FILTERED","payload","setExportData","SET_EXPORT_DATA","setUserMapboxAccessToken","SET_USER_MAPBOX_ACCESS_TOKEN","setExportMapFormat","SET_EXPORT_MAP_FORMAT","setExportHTMLMapMode","SET_EXPORT_MAP_HTML_MODE","setLocale","SET_LOCALE","locale","uiStateActions"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {createAction} from 'redux-actions';\nimport ActionTypes from 'constants/action-types';\n\n/**\n * Toggle active side panel\n * @memberof uiStateActions\n * @param id  id of side panel to be shown, one of `layer`, `filter`, `interaction`, `map`\n * @type {typeof import('./ui-state-actions').toggleSidePanel}\n * @public\n */\nexport const toggleSidePanel = createAction(ActionTypes.TOGGLE_SIDE_PANEL, id => id);\n\n/**\n * Show and hide modal dialog\n * @memberof uiStateActions\n * @param id - id of modal to be shown, null to hide modals. One of:\n *  - [`DATA_TABLE_ID`](../constants/default-settings.md#data_table_id)\n *  - [`DELETE_DATA_ID`](../constants/default-settings.md#delete_data_id)\n *  - [`ADD_DATA_ID`](../constants/default-settings.md#add_data_id)\n *  - [`EXPORT_IMAGE_ID`](../constants/default-settings.md#export_image_id)\n *  - [`EXPORT_DATA_ID`](../constants/default-settings.md#export_data_id)\n *  - [`ADD_MAP_STYLE_ID`](../constants/default-settings.md#add_map_style_id)\n * @type {typeof import('./ui-state-actions').toggleModal}\n * @public\n */\nexport const toggleModal = createAction(ActionTypes.TOGGLE_MODAL, id => id);\n\n/**\n * Hide and show side panel header dropdown, activated by clicking the share link on top of the side panel\n * @memberof uiStateActions\n * @param id - id of the dropdown\n * @type {typeof import('./ui-state-actions').showExportDropdown}\n * @public\n */\nexport const showExportDropdown = createAction(ActionTypes.SHOW_EXPORT_DROPDOWN, id => id);\n\n/**\n * Hide side panel header dropdown, activated by clicking the share link on top of the side panel\n * @memberof uiStateActions\n * @type {typeof import('./ui-state-actions').hideExportDropdown}\n * @public\n */\nexport const hideExportDropdown = createAction(ActionTypes.HIDE_EXPORT_DROPDOWN);\n\n/**\n * Toggle active map control panel\n * @memberof uiStateActions\n * @param panelId - map control panel id, one of the keys of: [`DEFAULT_MAP_CONTROLS`](#default_map_controls)\n * @type {typeof import('./ui-state-actions').toggleMapControl}\n * @public\n */\nexport const toggleMapControl = createAction(ActionTypes.TOGGLE_MAP_CONTROL, (panelId, index) => ({\n  panelId,\n  index\n}));\n\n/**\n * Toggle active map control panel\n * @memberof uiStateActions\n * @param panelId - map control panel id, one of the keys of: [`DEFAULT_MAP_CONTROLS`](#default_map_controls)\n * @type {typeof import('./ui-state-actions').setMapControlVisibility}\n * @public\n */\nexport const setMapControlVisibility = createAction(\n  ActionTypes.SET_MAP_CONTROL_VISIBILITY,\n  (panelId, show) => ({\n    panelId,\n    show\n  })\n);\n\n/**\n * Toggle active map control panel\n * @memberof uiStateActions\n * @param datasetId - `id` of the dataset to be deleted\n * @type {typeof import('./ui-state-actions').openDeleteModal}\n * @public\n */\nexport const openDeleteModal = createAction(ActionTypes.OPEN_DELETE_MODAL, datasetId => datasetId);\n\n/**\n * Add a notification to be displayed.\n * Existing notification will be updated in case of matching id.\n * @memberof uiStateActions\n * @param notification - The `notification` object to be added or updated\n * @type {typeof import('./ui-state-actions').addNotification}\n * @public\n */\nexport const addNotification = createAction(\n  ActionTypes.ADD_NOTIFICATION,\n  notification => notification\n);\n\n/**\n * Remove a notification\n * @memberof uiStateActions\n * @param id - `id` of the notification to be removed\n * @type {typeof import('./ui-state-actions').removeNotification}\n * @public\n */\nexport const removeNotification = createAction(ActionTypes.REMOVE_NOTIFICATION, id => id);\n\n/**\n * Set `exportImage` settings: ratio, resolution, legend\n * @memberof uiStateActions\n * @param newSetting - {ratio: '1x'}\n * @type {typeof import('./ui-state-actions').setExportImageSetting}\n * @public\n */\nexport const setExportImageSetting = createAction(\n  ActionTypes.SET_EXPORT_IMAGE_SETTING,\n  newSetting => newSetting\n);\n\n/**\n * Start exporting image flow\n * @memberof uiStateActions\n * @type {typeof import('./ui-state-actions').startExportingImage}\n * @public\n */\nexport const startExportingImage = createAction(ActionTypes.START_EXPORTING_IMAGE);\n\n/**\n * Set `exportImage.setExportImageDataUri` to a dataUri\n * @memberof uiStateActions\n * @param dataUri - export image data uri\n * @type {typeof import('./ui-state-actions').setExportImageDataUri}\n * @public\n */\nexport const setExportImageDataUri = createAction(\n  ActionTypes.SET_EXPORT_IMAGE_DATA_URI,\n  dataUri => dataUri\n);\n\n/**\n * Set Export image error\n * @memberof uiStateActions\n * @type {typeof import('./ui-state-actions').setExportImageError}\n * @public\n */\nexport const setExportImageError = createAction(ActionTypes.SET_EXPORT_IMAGE_ERROR, error => error);\n\n/**\n * Delete cached export image\n * @memberof uiStateActions\n * @type {typeof import('./ui-state-actions').cleanupExportImage}\n * @public\n */\nexport const cleanupExportImage = createAction(ActionTypes.CLEANUP_EXPORT_IMAGE);\n\n/**\n * Set selected dataset for export\n * @memberof uiStateActions\n * @param datasetId - dataset id\n * @type {typeof import('./ui-state-actions').setExportSelectedDataset}\n * @public\n */\nexport const setExportSelectedDataset = createAction(\n  ActionTypes.SET_EXPORT_SELECTED_DATASET,\n  datasetId => datasetId\n);\n\n/**\n * Set data format for exporting data\n * @memberof uiStateActions\n * @param dataType - one of `'text/csv'`\n * @type {typeof import('./ui-state-actions').setExportDataType}\n * @public\n */\nexport const setExportDataType = createAction(\n  ActionTypes.SET_EXPORT_DATA_TYPE,\n  dataType => dataType\n);\n\n/**\n * Whether to export filtered data, `true` or `false`\n * @memberof uiStateActions\n * @param payload - set `true` to ony export filtered data\n * @type {typeof import('./ui-state-actions').setExportFiltered}\n * @public\n */\nexport const setExportFiltered = createAction(ActionTypes.SET_EXPORT_FILTERED, payload => payload);\n\n/**\n * Whether to including data in map config, toggle between `true` or `false`\n * @memberof uiStateActions\n * @type {typeof import('./ui-state-actions').setExportData}\n * @public\n */\nexport const setExportData = createAction(ActionTypes.SET_EXPORT_DATA);\n\n/**\n * Whether we export a mapbox access token used to create a single map html file\n * @memberof uiStateActions\n * @param payload - mapbox access token\n * @type {typeof import('./ui-state-actions').setUserMapboxAccessToken}\n * @public\n */\nexport const setUserMapboxAccessToken = createAction(\n  ActionTypes.SET_USER_MAPBOX_ACCESS_TOKEN,\n  payload => payload\n);\n\n/**\n * Set the export map format (html, json)\n * @memberOf uiStateActions\n * @param payload - map format\n * @type {typeof import('./ui-state-actions').setExportMapFormat}\n * @public\n */\nexport const setExportMapFormat = createAction(\n  ActionTypes.SET_EXPORT_MAP_FORMAT,\n  payload => payload\n);\n\n/**\n * Set the HTML mode to use to export HTML mode\n * @memberOf uiStateActions\n * @param payload - map mode\n * @type {typeof import('./ui-state-actions').setExportHTMLMapMode}\n */\nexport const setExportHTMLMapMode = createAction(\n  ActionTypes.SET_EXPORT_MAP_HTML_MODE,\n  payload => payload\n);\n\n/**\n * Set `locale` value\n * @memberof uiStateActions\n * @param locale - locale of the UI\n * @type {typeof import('./ui-state-actions').setLocale}\n * @public\n */\nexport const setLocale = createAction(ActionTypes.SET_LOCALE, locale => ({\n  locale\n}));\n\n/**\n * This declaration is needed to group actions in docs\n */\n/**\n * Actions handled mostly by  `uiState` reducer.\n * They manage UI changes in tha app, such as open and close side panel,\n * switch between tabs in the side panel, open and close modal dialog for exporting data / images etc.\n * It also manges which settings are selected during image and map export\n *\n * @public\n */\n/* eslint-disable no-unused-vars */\n// @ts-ignore\nconst uiStateActions = null;\n/* eslint-enable no-unused-vars */\n"]},"metadata":{},"sourceType":"script"}