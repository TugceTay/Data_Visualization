{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar TYPE_DEFINITIONS = {\n  \"boolean\": {\n    validate: function validate(value, propType) {\n      return true;\n    },\n    equal: function equal(value1, value2, propType) {\n      return Boolean(value1) === Boolean(value2);\n    }\n  },\n  number: {\n    validate: function validate(value, propType) {\n      return Number.isFinite(value) && (!('max' in propType) || value <= propType.max) && (!('min' in propType) || value >= propType.min);\n    }\n  },\n  color: {\n    validate: function validate(value, propType) {\n      return propType.optional && !value || isArray(value) && (value.length === 3 || value.length === 4);\n    },\n    equal: function equal(value1, value2, propType) {\n      return arrayEqual(value1, value2);\n    }\n  },\n  accessor: {\n    validate: function validate(value, propType) {\n      var valueType = getTypeOf(value);\n      return valueType === 'function' || valueType === getTypeOf(propType.value);\n    },\n    equal: function equal(value1, value2, propType) {\n      if (typeof value2 === 'function') {\n        return true;\n      }\n      return arrayEqual(value1, value2);\n    }\n  },\n  array: {\n    validate: function validate(value, propType) {\n      return propType.optional && !value || isArray(value);\n    },\n    equal: function equal(value1, value2, propType) {\n      return propType.compare ? arrayEqual(value1, value2) : value1 === value2;\n    }\n  },\n  \"function\": {\n    validate: function validate(value, propType) {\n      return propType.optional && !value || typeof value === 'function';\n    },\n    equal: function equal(value1, value2, propType) {\n      return !propType.compare || value1 === value2;\n    }\n  }\n};\nfunction arrayEqual(array1, array2) {\n  if (array1 === array2) {\n    return true;\n  }\n  if (!isArray(array1) || !isArray(array2)) {\n    return false;\n  }\n  var len = array1.length;\n  if (len !== array2.length) {\n    return false;\n  }\n  for (var i = 0; i < len; i++) {\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nexport function parsePropTypes(propDefs) {\n  var propTypes = {};\n  var defaultProps = {};\n  var deprecatedProps = {};\n  for (var _i = 0, _Object$entries = Object.entries(propDefs); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n      propName = _Object$entries$_i[0],\n      propDef = _Object$entries$_i[1];\n    if (propDef && propDef.deprecatedFor) {\n      deprecatedProps[propName] = Array.isArray(propDef.deprecatedFor) ? propDef.deprecatedFor : [propDef.deprecatedFor];\n    } else {\n      var propType = parsePropType(propName, propDef);\n      propTypes[propName] = propType;\n      defaultProps[propName] = propType.value;\n    }\n  }\n  return {\n    propTypes: propTypes,\n    defaultProps: defaultProps,\n    deprecatedProps: deprecatedProps\n  };\n}\nfunction parsePropType(name, propDef) {\n  switch (getTypeOf(propDef)) {\n    case 'object':\n      return normalizePropDefinition(name, propDef);\n    case 'array':\n      return normalizePropDefinition(name, {\n        type: 'array',\n        value: propDef,\n        compare: false\n      });\n    case 'boolean':\n      return normalizePropDefinition(name, {\n        type: 'boolean',\n        value: propDef\n      });\n    case 'number':\n      return normalizePropDefinition(name, {\n        type: 'number',\n        value: propDef\n      });\n    case 'function':\n      return normalizePropDefinition(name, {\n        type: 'function',\n        value: propDef,\n        compare: true\n      });\n    default:\n      return {\n        name: name,\n        type: 'unknown',\n        value: propDef\n      };\n  }\n}\nfunction normalizePropDefinition(name, propDef) {\n  if (!('type' in propDef)) {\n    if (!('value' in propDef)) {\n      return {\n        name: name,\n        type: 'object',\n        value: propDef\n      };\n    }\n    return Object.assign({\n      name: name,\n      type: getTypeOf(propDef.value)\n    }, propDef);\n  }\n  return Object.assign({\n    name: name\n  }, TYPE_DEFINITIONS[propDef.type], propDef);\n}\nfunction isArray(value) {\n  return Array.isArray(value) || ArrayBuffer.isView(value);\n}\nfunction getTypeOf(value) {\n  if (isArray(value)) {\n    return 'array';\n  }\n  if (value === null) {\n    return 'null';\n  }\n  return _typeof(value);\n}","map":{"version":3,"sources":["../../../src/lifecycle/prop-types.js"],"names":["TYPE_DEFINITIONS","validate","value","propType","equal","value1","value2","Boolean","number","Number","isFinite","max","min","color","optional","isArray","length","arrayEqual","accessor","valueType","getTypeOf","array","compare","array1","array2","len","i","parsePropTypes","propDefs","propTypes","defaultProps","deprecatedProps","propName","propDef","Object","entries","deprecatedFor","Array","parsePropType","name","normalizePropDefinition","type","assign","ArrayBuffer","isView"],"mappings":"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","sourcesContent":["const TYPE_DEFINITIONS = {\n  boolean: {\n    validate(value, propType) {\n      return true;\n    },\n    equal(value1, value2, propType) {\n      return Boolean(value1) === Boolean(value2);\n    }\n  },\n  number: {\n    validate(value, propType) {\n      return (\n        Number.isFinite(value) &&\n        (!('max' in propType) || value <= propType.max) &&\n        (!('min' in propType) || value >= propType.min)\n      );\n    }\n  },\n  color: {\n    validate(value, propType) {\n      return (\n        (propType.optional && !value) ||\n        (isArray(value) && (value.length === 3 || value.length === 4))\n      );\n    },\n    equal(value1, value2, propType) {\n      return arrayEqual(value1, value2);\n    }\n  },\n  accessor: {\n    validate(value, propType) {\n      const valueType = getTypeOf(value);\n      return valueType === 'function' || valueType === getTypeOf(propType.value);\n    },\n    equal(value1, value2, propType) {\n      if (typeof value2 === 'function') {\n        return true;\n      }\n      return arrayEqual(value1, value2);\n    }\n  },\n  array: {\n    validate(value, propType) {\n      return (propType.optional && !value) || isArray(value);\n    },\n    equal(value1, value2, propType) {\n      return propType.compare ? arrayEqual(value1, value2) : value1 === value2;\n    }\n  },\n  function: {\n    validate(value, propType) {\n      return (propType.optional && !value) || typeof value === 'function';\n    },\n    equal(value1, value2, propType) {\n      return !propType.compare || value1 === value2;\n    }\n  }\n};\n\nfunction arrayEqual(array1, array2) {\n  if (array1 === array2) {\n    return true;\n  }\n  if (!isArray(array1) || !isArray(array2)) {\n    return false;\n  }\n  const len = array1.length;\n  if (len !== array2.length) {\n    return false;\n  }\n  for (let i = 0; i < len; i++) {\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function parsePropTypes(propDefs) {\n  const propTypes = {};\n  const defaultProps = {};\n  const deprecatedProps = {};\n\n  for (const [propName, propDef] of Object.entries(propDefs)) {\n    if (propDef && propDef.deprecatedFor) {\n      deprecatedProps[propName] = Array.isArray(propDef.deprecatedFor)\n        ? propDef.deprecatedFor\n        : [propDef.deprecatedFor];\n    } else {\n      const propType = parsePropType(propName, propDef);\n      propTypes[propName] = propType;\n      defaultProps[propName] = propType.value;\n    }\n  }\n  return {propTypes, defaultProps, deprecatedProps};\n}\n\n// Parses one property definition entry. Either contains:\n// * a valid prop type object ({type, ...})\n// * or just a default value, in which case type and name inference is used\nfunction parsePropType(name, propDef) {\n  switch (getTypeOf(propDef)) {\n    case 'object':\n      return normalizePropDefinition(name, propDef);\n\n    case 'array':\n      return normalizePropDefinition(name, {type: 'array', value: propDef, compare: false});\n\n    case 'boolean':\n      return normalizePropDefinition(name, {type: 'boolean', value: propDef});\n\n    case 'number':\n      return normalizePropDefinition(name, {type: 'number', value: propDef});\n\n    case 'function':\n      return normalizePropDefinition(name, {type: 'function', value: propDef, compare: true});\n    // return guessFunctionType(name, propDef);\n\n    default:\n      return {name, type: 'unknown', value: propDef};\n  }\n}\n\nfunction normalizePropDefinition(name, propDef) {\n  if (!('type' in propDef)) {\n    if (!('value' in propDef)) {\n      // If no type and value this object is likely the value\n      return {name, type: 'object', value: propDef};\n    }\n    return Object.assign({name, type: getTypeOf(propDef.value)}, propDef);\n  }\n  return Object.assign({name}, TYPE_DEFINITIONS[propDef.type], propDef);\n}\n\nfunction isArray(value) {\n  return Array.isArray(value) || ArrayBuffer.isView(value);\n}\n\n// improved version of javascript typeof that can distinguish arrays and null values\nfunction getTypeOf(value) {\n  if (isArray(value)) {\n    return 'array';\n  }\n  if (value === null) {\n    return 'null';\n  }\n  return typeof value;\n}\n"]},"metadata":{},"sourceType":"module"}