{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = PlotContainerFactory;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _taggedTemplateLiteral2 = _interopRequireDefault(require(\"@babel/runtime/helpers/taggedTemplateLiteral\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _reselect = require(\"reselect\");\nvar _styledComponents = _interopRequireDefault(require(\"styled-components\"));\nvar _reactMapGl = require(\"react-map-gl\");\nvar _lodash = _interopRequireDefault(require(\"lodash.debounce\"));\nvar _notificationsUtils = require(\"../utils/notifications-utils\");\nvar _mapContainer = _interopRequireDefault(require(\"./map-container\"));\nvar _mapsLayout = _interopRequireDefault(require(\"./maps-layout\"));\nvar _exportUtils = require(\"../utils/export-utils\");\nvar _mapboxGlStyleEditor = require(\"../utils/map-style-utils/mapbox-gl-style-editor\");\nvar _dataUtils = require(\"../utils/data-utils\");\nvar _projectionUtils = require(\"../utils/projection-utils\");\nvar _defaultSettings = require(\"../constants/default-settings\");\nvar _templateObject, _templateObject2;\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar CLASS_FILTER = ['mapboxgl-control-container', 'attrition-link', 'attrition-logo'];\nvar DOM_FILTER_FUNC = function DOM_FILTER_FUNC(node) {\n  return !CLASS_FILTER.includes(node.className);\n};\nvar OUT_OF_SCREEN_POSITION = -9999;\nvar propTypes = {\n  width: _propTypes[\"default\"].number.isRequired,\n  height: _propTypes[\"default\"].number.isRequired,\n  exportImageSetting: _propTypes[\"default\"].object.isRequired,\n  addNotification: _propTypes[\"default\"].func.isRequired,\n  mapFields: _propTypes[\"default\"].object.isRequired,\n  setExportImageSetting: _propTypes[\"default\"].object.isRequired,\n  setExportImageDataUri: _propTypes[\"default\"].func.isRequired,\n  setExportImageError: _propTypes[\"default\"].func.isRequired,\n  splitMaps: _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].object)\n};\nPlotContainerFactory.deps = [_mapContainer[\"default\"], _mapsLayout[\"default\"]]; // Remove mapbox logo in exported map, because it contains non-ascii characters\n\nvar StyledPlotContainer = _styledComponents[\"default\"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2[\"default\"])([\"\\n  .mapboxgl-ctrl-bottom-left,\\n  .mapboxgl-ctrl-bottom-right,\\n  .mapbox-attribution-container {\\n    display: none;\\n  }\\n\\n  position: absolute;\\n  top: \", \"px;\\n  left: \", \"px;\\n\"])), OUT_OF_SCREEN_POSITION, OUT_OF_SCREEN_POSITION);\nvar StyledMapContainer = _styledComponents[\"default\"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2[\"default\"])([\"\\n  width: \", \"px;\\n  height: \", \"px;\\n  display: flex;\\n\"])), function (props) {\n  return props.width;\n}, function (props) {\n  return props.height;\n});\nvar deckGlProps = {\n  glOptions: {\n    preserveDrawingBuffer: true,\n    useDevicePixels: false\n  }\n};\nfunction PlotContainerFactory(MapContainer, MapsLayout) {\n  var PlotContainer = /*#__PURE__*/function (_Component) {\n    (0, _inherits2[\"default\"])(PlotContainer, _Component);\n    var _super = _createSuper(PlotContainer);\n    function PlotContainer(_props) {\n      var _this;\n      (0, _classCallCheck2[\"default\"])(this, PlotContainer);\n      _this = _super.call(this, _props);\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"plottingAreaRef\", /*#__PURE__*/(0, _react.createRef)());\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"mapStyleSelector\", function (props) {\n        return props.mapFields.mapStyle;\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"mapScaleSelector\", function (props) {\n        var imageSize = props.exportImageSetting.imageSize;\n        var mapState = props.mapFields.mapState;\n        if (imageSize.scale) {\n          return imageSize.scale;\n        }\n        var scale = (0, _exportUtils.getScaleFromImageSize)(imageSize.imageW, imageSize.imageH, mapState.width * (mapState.isSplit ? 2 : 1), mapState.height);\n        return scale > 0 ? scale : 1;\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"scaledMapStyleSelector\", (0, _reselect.createSelector)(_this.mapStyleSelector, _this.mapScaleSelector, function (mapStyle, scale) {\n        return _objectSpread(_objectSpread({}, mapStyle), {}, {\n          bottomMapStyle: (0, _mapboxGlStyleEditor.scaleMapStyleByResolution)(mapStyle.bottomMapStyle, scale),\n          topMapStyle: (0, _mapboxGlStyleEditor.scaleMapStyleByResolution)(mapStyle.topMapStyle, scale)\n        });\n      }));\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_onMapRender\", function (map) {\n        if (map.isStyleLoaded()) {\n          _this._retrieveNewScreenshot();\n        }\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_retrieveNewScreenshot\", function () {\n        if (_this.plottingAreaRef.current) {\n          (0, _exportUtils.convertToPng)(_this.plottingAreaRef.current, {\n            filter: DOM_FILTER_FUNC\n          }).then(_this.props.setExportImageDataUri)[\"catch\"](function (err) {\n            _this.props.setExportImageError(err);\n            if (_this.props.enableErrorNotification) {\n              _this.props.addNotification((0, _notificationsUtils.exportImageError)({\n                err: err\n              }));\n            }\n          });\n        }\n      });\n      _this._onMapRender = (0, _lodash[\"default\"])(_this._onMapRender, 500);\n      _this._retrieveNewScreenshot = (0, _lodash[\"default\"])(_this._retrieveNewScreenshot, 500);\n      return _this;\n    }\n    (0, _createClass2[\"default\"])(PlotContainer, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.props.setExportImageSetting({\n          processing: true\n        });\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        var _this2 = this;\n\n        // re-fetch the new screenshot only when ratio legend or resolution changes\n        var checks = ['ratio', 'resolution', 'legend'];\n        var shouldRetrieveScreenshot = checks.some(function (item) {\n          return _this2.props.exportImageSetting[item] !== prevProps.exportImageSetting[item];\n        });\n        if (shouldRetrieveScreenshot) {\n          this.props.setExportImageSetting({\n            processing: true\n          });\n          this._retrieveNewScreenshot();\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n          exportImageSetting = _this$props.exportImageSetting,\n          mapFields = _this$props.mapFields,\n          splitMaps = _this$props.splitMaps;\n        var _exportImageSetting$i = exportImageSetting.imageSize,\n          imageSize = _exportImageSetting$i === void 0 ? {} : _exportImageSetting$i,\n          legend = exportImageSetting.legend;\n        var mapState = mapFields.mapState;\n        var isSplit = splitMaps && splitMaps.length > 1;\n        var size = {\n          width: imageSize.imageW || 1,\n          height: imageSize.imageH || 1\n        };\n        var width = size.width / (isSplit ? 2 : 1);\n        var height = size.height;\n        var scale = this.mapScaleSelector(this.props);\n        var newMapState = _objectSpread(_objectSpread({}, mapState), {}, {\n          width: width,\n          height: height,\n          zoom: mapState.zoom + (Math.log2(scale) || 0)\n        }); // center and all layer bounds\n\n        if (exportImageSetting.center) {\n          var renderedLayers = mapFields.layers.filter(function (layer, idx) {\n            return layer.id !== _defaultSettings.GEOCODER_LAYER_ID && layer.shouldRenderLayer(mapFields.layerData[idx]);\n          });\n          var bounds = (0, _dataUtils.findMapBounds)(renderedLayers);\n          var centerAndZoom = (0, _projectionUtils.getCenterAndZoomFromBounds)(bounds, {\n            width: width,\n            height: height\n          });\n          if (centerAndZoom) {\n            var zoom = Number.isFinite(centerAndZoom.zoom) ? centerAndZoom.zoom : mapState.zoom;\n            newMapState.longitude = centerAndZoom.center[0];\n            newMapState.latitude = centerAndZoom.center[1];\n            newMapState.zoom = zoom + Number(Math.log2(scale) || 0);\n          }\n        }\n        var mapProps = _objectSpread(_objectSpread({}, mapFields), {}, {\n          mapStyle: this.scaledMapStyleSelector(this.props),\n          // override viewport based on export settings\n          mapState: newMapState,\n          mapControls: {\n            // override map legend visibility\n            mapLegend: {\n              show: legend,\n              active: true\n            }\n          },\n          MapComponent: _reactMapGl.StaticMap,\n          onMapRender: this._onMapRender,\n          isExport: true,\n          deckGlProps: deckGlProps\n        });\n        var mapContainers = !isSplit ? /*#__PURE__*/_react[\"default\"].createElement(MapContainer, (0, _extends2[\"default\"])({\n          index: 0,\n          primary: true\n        }, mapProps)) : /*#__PURE__*/_react[\"default\"].createElement(MapsLayout, null, splitMaps.map(function (settings, index) {\n          return /*#__PURE__*/_react[\"default\"].createElement(MapContainer, (0, _extends2[\"default\"])({\n            key: index,\n            index: index,\n            primary: index === 1\n          }, mapProps, {\n            mapLayers: splitMaps[index].layers\n          }));\n        }));\n        return /*#__PURE__*/_react[\"default\"].createElement(StyledPlotContainer, {\n          className: \"export-map-instance\"\n        }, /*#__PURE__*/_react[\"default\"].createElement(StyledMapContainer, {\n          ref: this.plottingAreaRef,\n          width: size.width,\n          height: size.height\n        }, mapContainers));\n      }\n    }]);\n    return PlotContainer;\n  }(_react.Component);\n  PlotContainer.propsTypes = propTypes;\n  return PlotContainer;\n}","map":{"version":3,"sources":["../../src/components/plot-container.js"],"names":["CLASS_FILTER","DOM_FILTER_FUNC","includes","node","className","OUT_OF_SCREEN_POSITION","propTypes","width","PropTypes","number","isRequired","height","exportImageSetting","object","addNotification","func","mapFields","setExportImageSetting","setExportImageDataUri","setExportImageError","splitMaps","arrayOf","PlotContainerFactory","deps","MapContainerFactory","MapsLayoutFactory","StyledPlotContainer","styled","div","StyledMapContainer","props","deckGlProps","glOptions","preserveDrawingBuffer","useDevicePixels","MapContainer","MapsLayout","PlotContainer","Component","_onMapRender","_retrieveNewScreenshot","processing","prevProps","checks","shouldRetrieveScreenshot","some","item","mapStyle","imageSize","mapState","scale","imageW","imageH","isSplit","mapStyleSelector","mapScaleSelector","bottomMapStyle","topMapStyle","map","isStyleLoaded","plottingAreaRef","current","filter","then","err","enableErrorNotification","legend","length","size","newMapState","zoom","Math","log2","center","renderedLayers","layers","layer","idx","id","GEOCODER_LAYER_ID","shouldRenderLayer","layerData","bounds","centerAndZoom","Number","isFinite","longitude","latitude","mapProps","scaledMapStyleSelector","mapControls","mapLegend","show","active","MapComponent","StaticMap","onMapRender","isExport","mapContainers","settings","index","propsTypes"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// libraries\nimport React, {Component, createRef} from 'react';\nimport PropTypes from 'prop-types';\nimport {createSelector} from 'reselect';\nimport styled from 'styled-components';\nimport {StaticMap} from 'react-map-gl';\nimport debounce from 'lodash.debounce';\nimport {exportImageError} from 'utils/notifications-utils';\nimport MapContainerFactory from './map-container';\nimport MapsLayoutFactory from './maps-layout';\nimport {convertToPng, getScaleFromImageSize} from 'utils/export-utils';\nimport {scaleMapStyleByResolution} from 'utils/map-style-utils/mapbox-gl-style-editor';\n\nimport {findMapBounds} from 'utils/data-utils';\nimport {getCenterAndZoomFromBounds} from 'utils/projection-utils';\nimport {GEOCODER_LAYER_ID} from 'constants/default-settings';\n\nconst CLASS_FILTER = ['mapboxgl-control-container', 'attrition-link', 'attrition-logo'];\nconst DOM_FILTER_FUNC = node => !CLASS_FILTER.includes(node.className);\nconst OUT_OF_SCREEN_POSITION = -9999;\n\nconst propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  exportImageSetting: PropTypes.object.isRequired,\n  addNotification: PropTypes.func.isRequired,\n  mapFields: PropTypes.object.isRequired,\n  setExportImageSetting: PropTypes.object.isRequired,\n  setExportImageDataUri: PropTypes.func.isRequired,\n  setExportImageError: PropTypes.func.isRequired,\n  splitMaps: PropTypes.arrayOf(PropTypes.object)\n};\n\nPlotContainerFactory.deps = [MapContainerFactory, MapsLayoutFactory];\n\n// Remove mapbox logo in exported map, because it contains non-ascii characters\nconst StyledPlotContainer = styled.div`\n  .mapboxgl-ctrl-bottom-left,\n  .mapboxgl-ctrl-bottom-right,\n  .mapbox-attribution-container {\n    display: none;\n  }\n\n  position: absolute;\n  top: ${OUT_OF_SCREEN_POSITION}px;\n  left: ${OUT_OF_SCREEN_POSITION}px;\n`;\n\nconst StyledMapContainer = styled.div`\n  width: ${props => props.width}px;\n  height: ${props => props.height}px;\n  display: flex;\n`;\n\nconst deckGlProps = {\n  glOptions: {\n    preserveDrawingBuffer: true,\n    useDevicePixels: false\n  }\n};\n\nexport default function PlotContainerFactory(MapContainer, MapsLayout) {\n  class PlotContainer extends Component {\n    constructor(props) {\n      super(props);\n      this._onMapRender = debounce(this._onMapRender, 500);\n      this._retrieveNewScreenshot = debounce(this._retrieveNewScreenshot, 500);\n    }\n\n    componentDidMount() {\n      this.props.setExportImageSetting({processing: true});\n    }\n\n    componentDidUpdate(prevProps) {\n      // re-fetch the new screenshot only when ratio legend or resolution changes\n      const checks = ['ratio', 'resolution', 'legend'];\n      const shouldRetrieveScreenshot = checks.some(\n        item => this.props.exportImageSetting[item] !== prevProps.exportImageSetting[item]\n      );\n      if (shouldRetrieveScreenshot) {\n        this.props.setExportImageSetting({processing: true});\n        this._retrieveNewScreenshot();\n      }\n    }\n\n    plottingAreaRef = createRef();\n\n    mapStyleSelector = props => props.mapFields.mapStyle;\n    mapScaleSelector = props => {\n      const {imageSize} = props.exportImageSetting;\n      const {mapState} = props.mapFields;\n      if (imageSize.scale) {\n        return imageSize.scale;\n      }\n\n      const scale = getScaleFromImageSize(\n        imageSize.imageW,\n        imageSize.imageH,\n        mapState.width * (mapState.isSplit ? 2 : 1),\n        mapState.height\n      );\n\n      return scale > 0 ? scale : 1;\n    };\n\n    scaledMapStyleSelector = createSelector(\n      this.mapStyleSelector,\n      this.mapScaleSelector,\n      (mapStyle, scale) => ({\n        ...mapStyle,\n        bottomMapStyle: scaleMapStyleByResolution(mapStyle.bottomMapStyle, scale),\n        topMapStyle: scaleMapStyleByResolution(mapStyle.topMapStyle, scale)\n      })\n    );\n\n    _onMapRender = map => {\n      if (map.isStyleLoaded()) {\n        this._retrieveNewScreenshot();\n      }\n    };\n\n    _retrieveNewScreenshot = () => {\n      if (this.plottingAreaRef.current) {\n        convertToPng(this.plottingAreaRef.current, {filter: DOM_FILTER_FUNC})\n          .then(this.props.setExportImageDataUri)\n          .catch(err => {\n            this.props.setExportImageError(err);\n            if (this.props.enableErrorNotification) {\n              this.props.addNotification(exportImageError({err}));\n            }\n          });\n      }\n    };\n\n    render() {\n      const {exportImageSetting, mapFields, splitMaps} = this.props;\n      const {imageSize = {}, legend} = exportImageSetting;\n      const {mapState} = mapFields;\n      const isSplit = splitMaps && splitMaps.length > 1;\n\n      const size = {\n        width: imageSize.imageW || 1,\n        height: imageSize.imageH || 1\n      };\n      const width = size.width / (isSplit ? 2 : 1);\n      const height = size.height;\n      const scale = this.mapScaleSelector(this.props);\n      const newMapState = {\n        ...mapState,\n        width,\n        height,\n        zoom: mapState.zoom + (Math.log2(scale) || 0)\n      };\n\n      // center and all layer bounds\n      if (exportImageSetting.center) {\n        const renderedLayers = mapFields.layers.filter(\n          (layer, idx) =>\n            layer.id !== GEOCODER_LAYER_ID && layer.shouldRenderLayer(mapFields.layerData[idx])\n        );\n        const bounds = findMapBounds(renderedLayers);\n        const centerAndZoom = getCenterAndZoomFromBounds(bounds, {width, height});\n        if (centerAndZoom) {\n          const zoom = Number.isFinite(centerAndZoom.zoom) ? centerAndZoom.zoom : mapState.zoom;\n\n          newMapState.longitude = centerAndZoom.center[0];\n          newMapState.latitude = centerAndZoom.center[1];\n          newMapState.zoom = zoom + Number(Math.log2(scale) || 0);\n        }\n      }\n\n      const mapProps = {\n        ...mapFields,\n        mapStyle: this.scaledMapStyleSelector(this.props),\n\n        // override viewport based on export settings\n        mapState: newMapState,\n        mapControls: {\n          // override map legend visibility\n          mapLegend: {\n            show: legend,\n            active: true\n          }\n        },\n        MapComponent: StaticMap,\n        onMapRender: this._onMapRender,\n        isExport: true,\n        deckGlProps\n      };\n\n      const mapContainers = !isSplit ? (\n        <MapContainer index={0} primary={true} {...mapProps} />\n      ) : (\n        <MapsLayout>\n          {splitMaps.map((settings, index) => (\n            <MapContainer\n              key={index}\n              index={index}\n              primary={index === 1}\n              {...mapProps}\n              mapLayers={splitMaps[index].layers}\n            />\n          ))}\n        </MapsLayout>\n      );\n      return (\n        <StyledPlotContainer className=\"export-map-instance\">\n          <StyledMapContainer ref={this.plottingAreaRef} width={size.width} height={size.height}>\n            {mapContainers}\n          </StyledMapContainer>\n        </StyledPlotContainer>\n      );\n    }\n  }\n\n  PlotContainer.propsTypes = propTypes;\n  return PlotContainer;\n}\n"]},"metadata":{},"sourceType":"script"}