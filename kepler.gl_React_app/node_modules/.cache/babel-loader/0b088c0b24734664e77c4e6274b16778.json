{"ast":null,"code":"import { assert } from '@loaders.gl/loader-utils';\nexport function getStringFromArrayBuffer(arrayBuffer, byteOffset, byteLength) {\n  assert(arrayBuffer instanceof ArrayBuffer);\n  var textDecoder = new TextDecoder('utf8');\n  var typedArray = new Uint8Array(arrayBuffer, byteOffset, byteLength);\n  var string = textDecoder.decode(typedArray);\n  return string;\n}\nexport function getStringFromTypedArray(typedArray) {\n  assert(ArrayBuffer.isView(typedArray));\n  var textDecoder = new TextDecoder('utf8');\n  var string = textDecoder.decode(typedArray);\n  return string;\n}\nexport function getMagicString(arrayBuffer) {\n  var byteOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var dataView = new DataView(arrayBuffer);\n  return \"\".concat(String.fromCharCode(dataView.getUint8(byteOffset + 0))).concat(String.fromCharCode(dataView.getUint8(byteOffset + 1))).concat(String.fromCharCode(dataView.getUint8(byteOffset + 2))).concat(String.fromCharCode(dataView.getUint8(byteOffset + 3)));\n}","map":{"version":3,"sources":["../../../../../src/lib/parsers/helpers/parse-utils.js"],"names":["assert","getStringFromArrayBuffer","arrayBuffer","byteOffset","byteLength","ArrayBuffer","textDecoder","TextDecoder","typedArray","Uint8Array","string","decode","getStringFromTypedArray","isView","getMagicString","dataView","DataView","String","fromCharCode","getUint8"],"mappings":"AAIA,SAAQA,MAAR,QAAqB,0BAArB;AAGA,OAAO,SAASC,wBAAT,CAAkCC,WAAlC,EAA+CC,UAA/C,EAA2DC,UAA3D,EAAuE;EAC5EJ,MAAM,CAACE,WAAW,YAAYG,WAAxB,CAANL;EACA,IAAMM,WAAW,GAAG,IAAIC,WAAJ,CAAgB,MAAhB,CAApB;EACA,IAAMC,UAAU,GAAG,IAAIC,UAAJ,CAAeP,WAAf,EAA4BC,UAA5B,EAAwCC,UAAxC,CAAnB;EACA,IAAMM,MAAM,GAAGJ,WAAW,CAACK,MAAZL,CAAmBE,UAAnBF,CAAf;EACA,OAAOI,MAAP;AACD;AAGD,OAAO,SAASE,uBAAT,CAAiCJ,UAAjC,EAA6C;EAClDR,MAAM,CAACK,WAAW,CAACQ,MAAZR,CAAmBG,UAAnBH,CAAD,CAANL;EACA,IAAMM,WAAW,GAAG,IAAIC,WAAJ,CAAgB,MAAhB,CAApB;EACA,IAAMG,MAAM,GAAGJ,WAAW,CAACK,MAAZL,CAAmBE,UAAnBF,CAAf;EACA,OAAOI,MAAP;AACD;AAED,OAAO,SAASI,cAAT,CAAwBZ,WAAxB,EAAqD;EAAA,IAAhBC,UAAgB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAH,CAAG;EAC1D,IAAMY,QAAQ,GAAG,IAAIC,QAAJ,CAAad,WAAb,CAAjB;EACA,OAAA,EAAA,CAAA,MAAA,CACAe,MAAM,CAACC,YAAPD,CAAoBF,QAAQ,CAACI,QAATJ,CAAkBZ,UAAU,GAAG,CAA/BY,CAApBE,CADA,CAAA,CAAA,MAAA,CAEAA,MAAM,CAACC,YAAPD,CAAoBF,QAAQ,CAACI,QAATJ,CAAkBZ,UAAU,GAAG,CAA/BY,CAApBE,CAFA,CAAA,CAAA,MAAA,CAGAA,MAAM,CAACC,YAAPD,CAAoBF,QAAQ,CAACI,QAATJ,CAAkBZ,UAAU,GAAG,CAA/BY,CAApBE,CAHA,CAAA,CAAA,MAAA,CAIAA,MAAM,CAACC,YAAPD,CAAoBF,QAAQ,CAACI,QAATJ,CAAkBZ,UAAU,GAAG,CAA/BY,CAApBE,CAJA,CAAA;AAKD","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/* global TextDecoder */\nimport {assert} from '@loaders.gl/loader-utils';\n\n// Decode the JSON binary array into clear text\nexport function getStringFromArrayBuffer(arrayBuffer, byteOffset, byteLength) {\n  assert(arrayBuffer instanceof ArrayBuffer);\n  const textDecoder = new TextDecoder('utf8');\n  const typedArray = new Uint8Array(arrayBuffer, byteOffset, byteLength);\n  const string = textDecoder.decode(typedArray);\n  return string;\n}\n\n// Decode the JSON binary array into clear text\nexport function getStringFromTypedArray(typedArray) {\n  assert(ArrayBuffer.isView(typedArray));\n  const textDecoder = new TextDecoder('utf8');\n  const string = textDecoder.decode(typedArray);\n  return string;\n}\n\nexport function getMagicString(arrayBuffer, byteOffset = 0) {\n  const dataView = new DataView(arrayBuffer);\n  return `\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 0))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 1))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 2))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 3))}`;\n}\n"]},"metadata":{},"sourceType":"module"}