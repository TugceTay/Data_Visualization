{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.hexagonVisConfigs = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _layers = require(\"@deck.gl/layers\");\nvar _aggregationLayer = _interopRequireDefault(require(\"../aggregation-layer\"));\nvar _enhancedHexagonLayer = _interopRequireDefault(require(\"../../deckgl-layers/hexagon-layer/enhanced-hexagon-layer\"));\nvar _hexagonUtils = require(\"./hexagon-utils\");\nvar _hexagonLayerIcon = _interopRequireDefault(require(\"./hexagon-layer-icon\"));\nvar _dataUtils = require(\"../../utils/data-utils\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar hexagonVisConfigs = {\n  opacity: 'opacity',\n  worldUnitSize: 'worldUnitSize',\n  resolution: 'resolution',\n  colorRange: 'colorRange',\n  coverage: 'coverage',\n  sizeRange: 'elevationRange',\n  percentile: 'percentile',\n  elevationPercentile: 'elevationPercentile',\n  elevationScale: 'elevationScale',\n  enableElevationZoomFactor: 'enableElevationZoomFactor',\n  colorAggregation: 'aggregation',\n  sizeAggregation: 'sizeAggregation',\n  enable3d: 'enable3d'\n};\nexports.hexagonVisConfigs = hexagonVisConfigs;\nvar HexagonLayer = /*#__PURE__*/function (_AggregationLayer) {\n  (0, _inherits2[\"default\"])(HexagonLayer, _AggregationLayer);\n  var _super = _createSuper(HexagonLayer);\n  function HexagonLayer(props) {\n    var _this;\n    (0, _classCallCheck2[\"default\"])(this, HexagonLayer);\n    _this = _super.call(this, props);\n    _this.registerVisConfig(hexagonVisConfigs);\n    _this.visConfigSettings.worldUnitSize.label = 'columns.hexagon.worldUnitSize';\n    return _this;\n  }\n  (0, _createClass2[\"default\"])(HexagonLayer, [{\n    key: \"type\",\n    get: function get() {\n      return 'hexagon';\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'Hexbin';\n    }\n  }, {\n    key: \"layerIcon\",\n    get: function get() {\n      return _hexagonLayerIcon[\"default\"];\n    }\n  }, {\n    key: \"renderLayer\",\n    value: function renderLayer(opts) {\n      var data = opts.data,\n        objectHovered = opts.objectHovered,\n        mapState = opts.mapState;\n      var zoomFactor = this.getZoomFactor(mapState);\n      var visConfig = this.config.visConfig;\n      var radius = visConfig.worldUnitSize * 1000;\n      var hoveredObject = this.hasHoveredObject(objectHovered);\n      return [new _enhancedHexagonLayer[\"default\"](_objectSpread(_objectSpread(_objectSpread({}, this.getDefaultAggregationLayerProp(opts)), data), {}, {\n        wrapLongitude: false,\n        radius: radius\n      }))].concat((0, _toConsumableArray2[\"default\"])(hoveredObject && !visConfig.enable3d ? [new _layers.GeoJsonLayer(_objectSpread(_objectSpread({}, this.getDefaultHoverLayerProps()), {}, {\n        wrapLongitude: false,\n        data: [(0, _hexagonUtils.hexagonToPolygonGeo)(hoveredObject, {}, radius * visConfig.coverage, mapState)].filter(function (d) {\n          return d;\n        }),\n        getLineColor: this.config.highlightColor,\n        lineWidthScale: (0, _dataUtils.clamp)([1, 100], radius * 0.1 * zoomFactor)\n      }))] : []));\n    }\n  }]);\n  return HexagonLayer;\n}(_aggregationLayer[\"default\"]);\nexports[\"default\"] = HexagonLayer;","map":{"version":3,"sources":["../../../src/layers/hexagon-layer/hexagon-layer.js"],"names":["hexagonVisConfigs","opacity","worldUnitSize","resolution","colorRange","coverage","sizeRange","percentile","elevationPercentile","elevationScale","enableElevationZoomFactor","colorAggregation","sizeAggregation","enable3d","HexagonLayer","AggregationLayer","props","registerVisConfig","visConfigSettings","label","HexagonLayerIcon","opts","data","objectHovered","mapState","zoomFactor","getZoomFactor","visConfig","config","radius","hoveredObject","hasHoveredObject","EnhancedHexagonLayer","getDefaultAggregationLayerProp","wrapLongitude","GeoJsonLayer","getDefaultHoverLayerProps","filter","d","getLineColor","highlightColor","lineWidthScale"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport AggregationLayer from '../aggregation-layer';\nimport EnhancedHexagonLayer from 'deckgl-layers/hexagon-layer/enhanced-hexagon-layer';\nimport {hexagonToPolygonGeo} from './hexagon-utils';\nimport HexagonLayerIcon from './hexagon-layer-icon';\nimport {clamp} from 'utils/data-utils';\n\nexport const hexagonVisConfigs = {\n  opacity: 'opacity',\n  worldUnitSize: 'worldUnitSize',\n  resolution: 'resolution',\n  colorRange: 'colorRange',\n  coverage: 'coverage',\n  sizeRange: 'elevationRange',\n  percentile: 'percentile',\n  elevationPercentile: 'elevationPercentile',\n  elevationScale: 'elevationScale',\n  enableElevationZoomFactor: 'enableElevationZoomFactor',\n  colorAggregation: 'aggregation',\n  sizeAggregation: 'sizeAggregation',\n  enable3d: 'enable3d'\n};\n\nexport default class HexagonLayer extends AggregationLayer {\n  constructor(props) {\n    super(props);\n\n    this.registerVisConfig(hexagonVisConfigs);\n    this.visConfigSettings.worldUnitSize.label = 'columns.hexagon.worldUnitSize';\n  }\n\n  get type() {\n    return 'hexagon';\n  }\n\n  get name() {\n    return 'Hexbin';\n  }\n\n  get layerIcon() {\n    return HexagonLayerIcon;\n  }\n\n  renderLayer(opts) {\n    const {data, objectHovered, mapState} = opts;\n    const zoomFactor = this.getZoomFactor(mapState);\n    const {visConfig} = this.config;\n    const radius = visConfig.worldUnitSize * 1000;\n    const hoveredObject = this.hasHoveredObject(objectHovered);\n\n    return [\n      new EnhancedHexagonLayer({\n        ...this.getDefaultAggregationLayerProp(opts),\n        ...data,\n        wrapLongitude: false,\n        radius\n      }),\n\n      // render an outline of each hexagon if not extruded\n      ...(hoveredObject && !visConfig.enable3d\n        ? [\n            new GeoJsonLayer({\n              ...this.getDefaultHoverLayerProps(),\n              wrapLongitude: false,\n              data: [\n                hexagonToPolygonGeo(hoveredObject, {}, radius * visConfig.coverage, mapState)\n              ].filter(d => d),\n              getLineColor: this.config.highlightColor,\n              lineWidthScale: clamp([1, 100], radius * 0.1 * zoomFactor)\n            })\n          ]\n        : [])\n    ];\n  }\n}\n"]},"metadata":{},"sourceType":"script"}