{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as KHR_draco_mesh_compression from './KHR_draco_mesh_compression';\nimport * as KHR_lights_punctual from './KHR_lights_punctual';\nimport * as KHR_materials_unlit from './KHR_materials_unlit';\nimport * as KHR_techniques_webgl from './KHR_techniques_webgl';\nexport var EXTENSIONS = {\n  KHR_draco_mesh_compression: KHR_draco_mesh_compression,\n  KHR_lights_punctual: KHR_lights_punctual,\n  KHR_materials_unlit: KHR_materials_unlit,\n  KHR_techniques_webgl: KHR_techniques_webgl\n};\nexport function decodeExtensions(_x) {\n  return _decodeExtensions.apply(this, arguments);\n}\nfunction _decodeExtensions() {\n  _decodeExtensions = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(gltf) {\n    var options,\n      context,\n      extensionName,\n      excludes,\n      exclude,\n      extension,\n      _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            context = _args.length > 2 ? _args[2] : undefined;\n            options.gltf = options.gltf || {};\n            _context.t0 = _regeneratorRuntime.keys(EXTENSIONS);\n          case 4:\n            if ((_context.t1 = _context.t0()).done) {\n              _context.next = 14;\n              break;\n            }\n            extensionName = _context.t1.value;\n            excludes = options.gltf.excludeExtensions || {};\n            exclude = extensionName in excludes && !excludes[extensionName];\n            if (exclude) {\n              _context.next = 12;\n              break;\n            }\n            extension = EXTENSIONS[extensionName];\n            _context.next = 12;\n            return extension.decode(gltf, options, context);\n          case 12:\n            _context.next = 4;\n            break;\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _decodeExtensions.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/extensions/gltf-extensions.js"],"names":["KHR_draco_mesh_compression","KHR_lights_punctual","KHR_materials_unlit","KHR_techniques_webgl","EXTENSIONS","decodeExtensions","gltf","options","context","extensionName","excludes","excludeExtensions","exclude","extension","decode"],"mappings":";;AAOA,OAAO,KAAKA,0BAAZ,MAA4C,8BAA5C;AACA,OAAO,KAAKC,mBAAZ,MAAqC,uBAArC;AACA,OAAO,KAAKC,mBAAZ,MAAqC,uBAArC;AACA,OAAO,KAAKC,oBAAZ,MAAsC,wBAAtC;AAKA,OAAO,IAAMC,UAAU,GAAG;EAKxBJ,0BAA0B,EAA1BA,0BALwB;EAMxBC,mBAAmB,EAAnBA,mBANwB;EAOxBC,mBAAmB,EAAnBA,mBAPwB;EAQxBC,oBAAoB,EAApBA;AARwB,CAAnB;AAWP,OAAA,SAAsBE,gBAAtB,CAAA,EAAA,EAAA;EAAA,OAAA,iBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;iEAAO,SAAA,OAAA,CAAgCC,IAAhC,EAAA;IAAA,IAAA,OAAA;MAAA,OAAA;MAAA,aAAA;MAAA,QAAA;MAAA,OAAA;MAAA,SAAA;MAAA,KAAA,GAAA,SAAA;IAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YAAsCC,OAAtC,GAAA,KAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,KAAA,CAAA,CAAA,CAAA,GAAgD,CAAA,CAAhD;YAAoDC,OAApD,GAAA,KAAA,CAAA,MAAA,GAAA,CAAA,GAAA,KAAA,CAAA,CAAA,CAAA,GAAA,SAAA;YACLD,OAAO,CAACD,IAARC,GAAeA,OAAO,CAACD,IAARC,IAAgB,CAAA,CAA/BA;YADK,QAAA,CAAA,EAAA,GAAA,mBAAA,CAAA,IAAA,CAEuBH,UAFvB,CAAA;UAAA,KAAA,CAAA;YAAA,IAAA,CAAA,QAAA,CAAA,EAAA,GAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA;cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;YAEMK,aAFN,GAAA,QAAA,CAAA,EAAA,CAAA,KAAA;YAGGC,QAHH,GAGcH,OAAO,CAACD,IAARC,CAAaI,iBAAbJ,IAAkC,CAAA,CAHhD;YAIGK,OAJH,GAIaH,aAAa,IAAIC,QAAjBD,IAA6B,CAACC,QAAQ,CAACD,aAAD,CAJnD;YAAA,IAKEG,OALF,EAAA;cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;YAMKC,SANL,GAMiBT,UAAU,CAACK,aAAD,CAN3B;YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;YAAA,OASKI,SAAS,CAACC,MAAVD,CAAiBP,IAAjBO,EAAuBN,OAAvBM,EAAgCL,OAAhCK,CATL;UAAA,KAAA,EAAA;YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;YAAA;UAAA,KAAA,EAAA;UAAA,KAAA,KAAA;YAAA,OAAA,QAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,OAAA,CAAA;EAAA,C","sourcesContent":["/* eslint-disable camelcase */\n\n// GLTF 1.0 extensions (read only)\n// Note: KHR_binary_gltf needs to be processed before other loading starts\n// import * as KHR_binary_gltf from './KHR_draco_mesh_compression';\n\n// GLTF 2.0 extensions (read/write)\nimport * as KHR_draco_mesh_compression from './KHR_draco_mesh_compression';\nimport * as KHR_lights_punctual from './KHR_lights_punctual';\nimport * as KHR_materials_unlit from './KHR_materials_unlit';\nimport * as KHR_techniques_webgl from './KHR_techniques_webgl';\n\n// other extensions\n// import UBER_POINT_CLOUD_COMPRESSION from './KHR_draco_mesh_compression';\n\nexport const EXTENSIONS = {\n  // 1.0\n  // KHR_binary_gltf,\n\n  // 2.0\n  KHR_draco_mesh_compression,\n  KHR_lights_punctual,\n  KHR_materials_unlit,\n  KHR_techniques_webgl\n};\n\nexport async function decodeExtensions(gltf, options = {}, context) {\n  options.gltf = options.gltf || {};\n  for (const extensionName in EXTENSIONS) {\n    const excludes = options.gltf.excludeExtensions || {};\n    const exclude = extensionName in excludes && !excludes[extensionName];\n    if (!exclude) {\n      const extension = EXTENSIONS[extensionName];\n      // Note: We decode async extensions sequentially, this might not be necessary\n      // Currently we only have Draco, but when we add Basis we may revisit\n      await extension.decode(gltf, options, context);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}