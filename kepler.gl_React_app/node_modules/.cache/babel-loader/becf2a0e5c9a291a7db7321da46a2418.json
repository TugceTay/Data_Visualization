{"ast":null,"code":"import Matrix from './base/matrix';\nimport { checkVector } from '../lib/validators';\nimport { vec2_transformMat4AsVector, vec3_transformMat4AsVector } from '../lib/gl-matrix-extras';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport * as vec4 from 'gl-matrix/vec4';\nvar INDICES;\n(function (INDICES) {\n  INDICES[INDICES[\"COL0ROW0\"] = 0] = \"COL0ROW0\";\n  INDICES[INDICES[\"COL0ROW1\"] = 1] = \"COL0ROW1\";\n  INDICES[INDICES[\"COL0ROW2\"] = 2] = \"COL0ROW2\";\n  INDICES[INDICES[\"COL0ROW3\"] = 3] = \"COL0ROW3\";\n  INDICES[INDICES[\"COL1ROW0\"] = 4] = \"COL1ROW0\";\n  INDICES[INDICES[\"COL1ROW1\"] = 5] = \"COL1ROW1\";\n  INDICES[INDICES[\"COL1ROW2\"] = 6] = \"COL1ROW2\";\n  INDICES[INDICES[\"COL1ROW3\"] = 7] = \"COL1ROW3\";\n  INDICES[INDICES[\"COL2ROW0\"] = 8] = \"COL2ROW0\";\n  INDICES[INDICES[\"COL2ROW1\"] = 9] = \"COL2ROW1\";\n  INDICES[INDICES[\"COL2ROW2\"] = 10] = \"COL2ROW2\";\n  INDICES[INDICES[\"COL2ROW3\"] = 11] = \"COL2ROW3\";\n  INDICES[INDICES[\"COL3ROW0\"] = 12] = \"COL3ROW0\";\n  INDICES[INDICES[\"COL3ROW1\"] = 13] = \"COL3ROW1\";\n  INDICES[INDICES[\"COL3ROW2\"] = 14] = \"COL3ROW2\";\n  INDICES[INDICES[\"COL3ROW3\"] = 15] = \"COL3ROW3\";\n})(INDICES || (INDICES = {}));\nconst DEFAULT_FOVY = 45 * Math.PI / 180;\nconst DEFAULT_ASPECT = 1;\nconst DEFAULT_NEAR = 0.1;\nconst DEFAULT_FAR = 500;\nconst IDENTITY_MATRIX = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\nexport default class Matrix4 extends Matrix {\n  static get IDENTITY() {\n    return getIdentityMatrix();\n  }\n  static get ZERO() {\n    return getZeroMatrix();\n  }\n  get ELEMENTS() {\n    return 16;\n  }\n  get RANK() {\n    return 4;\n  }\n  get INDICES() {\n    return INDICES;\n  }\n  constructor(array) {\n    super(-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0);\n    if (arguments.length === 1 && Array.isArray(array)) {\n      this.copy(array);\n    } else {\n      this.identity();\n    }\n  }\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    this[4] = array[4];\n    this[5] = array[5];\n    this[6] = array[6];\n    this[7] = array[7];\n    this[8] = array[8];\n    this[9] = array[9];\n    this[10] = array[10];\n    this[11] = array[11];\n    this[12] = array[12];\n    this[13] = array[13];\n    this[14] = array[14];\n    this[15] = array[15];\n    return this.check();\n  }\n  set(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33) {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m30;\n    this[4] = m01;\n    this[5] = m11;\n    this[6] = m21;\n    this[7] = m31;\n    this[8] = m02;\n    this[9] = m12;\n    this[10] = m22;\n    this[11] = m32;\n    this[12] = m03;\n    this[13] = m13;\n    this[14] = m23;\n    this[15] = m33;\n    return this.check();\n  }\n  setRowMajor(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m30;\n    this[4] = m01;\n    this[5] = m11;\n    this[6] = m21;\n    this[7] = m31;\n    this[8] = m02;\n    this[9] = m12;\n    this[10] = m22;\n    this[11] = m32;\n    this[12] = m03;\n    this[13] = m13;\n    this[14] = m23;\n    this[15] = m33;\n    return this.check();\n  }\n  toRowMajor(result) {\n    result[0] = this[0];\n    result[1] = this[4];\n    result[2] = this[8];\n    result[3] = this[12];\n    result[4] = this[1];\n    result[5] = this[5];\n    result[6] = this[9];\n    result[7] = this[13];\n    result[8] = this[2];\n    result[9] = this[6];\n    result[10] = this[10];\n    result[11] = this[14];\n    result[12] = this[3];\n    result[13] = this[7];\n    result[14] = this[11];\n    result[15] = this[15];\n    return result;\n  }\n  identity() {\n    return this.copy(IDENTITY_MATRIX);\n  }\n  fromObject(object) {\n    return this.check();\n  }\n  fromQuaternion(quaternion) {\n    mat4.fromQuat(this, quaternion);\n    return this.check();\n  }\n  frustum(view) {\n    const {\n      left,\n      right,\n      bottom,\n      top,\n      near = DEFAULT_NEAR,\n      far = DEFAULT_FAR\n    } = view;\n    if (far === Infinity) {\n      computeInfinitePerspectiveOffCenter(this, left, right, bottom, top, near);\n    } else {\n      mat4.frustum(this, left, right, bottom, top, near, far);\n    }\n    return this.check();\n  }\n  lookAt(view) {\n    const {\n      eye,\n      center = [0, 0, 0],\n      up = [0, 1, 0]\n    } = view;\n    mat4.lookAt(this, eye, center, up);\n    return this.check();\n  }\n  ortho(view) {\n    const {\n      left,\n      right,\n      bottom,\n      top,\n      near = DEFAULT_NEAR,\n      far = DEFAULT_FAR\n    } = view;\n    mat4.ortho(this, left, right, bottom, top, near, far);\n    return this.check();\n  }\n  orthographic(view) {\n    const {\n      fovy = DEFAULT_FOVY,\n      aspect = DEFAULT_ASPECT,\n      focalDistance = 1,\n      near = DEFAULT_NEAR,\n      far = DEFAULT_FAR\n    } = view;\n    checkRadians(fovy);\n    const halfY = fovy / 2;\n    const top = focalDistance * Math.tan(halfY);\n    const right = top * aspect;\n    return this.ortho({\n      left: -right,\n      right,\n      bottom: -top,\n      top,\n      near,\n      far\n    });\n  }\n  perspective(view) {\n    const {\n      fovy = 45 * Math.PI / 180,\n      aspect = 1,\n      near = 0.1,\n      far = 500\n    } = view;\n    checkRadians(fovy);\n    mat4.perspective(this, fovy, aspect, near, far);\n    return this.check();\n  }\n  determinant() {\n    return mat4.determinant(this);\n  }\n  getScale() {\n    let result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0];\n    result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);\n    result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);\n    result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);\n    return result;\n  }\n  getTranslation() {\n    let result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0];\n    result[0] = this[12];\n    result[1] = this[13];\n    result[2] = this[14];\n    return result;\n  }\n  getRotation(result, scaleResult) {\n    result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n    scaleResult = scaleResult || [-0, -0, -0];\n    const scale = this.getScale(scaleResult);\n    const inverseScale0 = 1 / scale[0];\n    const inverseScale1 = 1 / scale[1];\n    const inverseScale2 = 1 / scale[2];\n    result[0] = this[0] * inverseScale0;\n    result[1] = this[1] * inverseScale1;\n    result[2] = this[2] * inverseScale2;\n    result[3] = 0;\n    result[4] = this[4] * inverseScale0;\n    result[5] = this[5] * inverseScale1;\n    result[6] = this[6] * inverseScale2;\n    result[7] = 0;\n    result[8] = this[8] * inverseScale0;\n    result[9] = this[9] * inverseScale1;\n    result[10] = this[10] * inverseScale2;\n    result[11] = 0;\n    result[12] = 0;\n    result[13] = 0;\n    result[14] = 0;\n    result[15] = 1;\n    return result;\n  }\n  getRotationMatrix3(result, scaleResult) {\n    result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0];\n    scaleResult = scaleResult || [-0, -0, -0];\n    const scale = this.getScale(scaleResult);\n    const inverseScale0 = 1 / scale[0];\n    const inverseScale1 = 1 / scale[1];\n    const inverseScale2 = 1 / scale[2];\n    result[0] = this[0] * inverseScale0;\n    result[1] = this[1] * inverseScale1;\n    result[2] = this[2] * inverseScale2;\n    result[3] = this[4] * inverseScale0;\n    result[4] = this[5] * inverseScale1;\n    result[5] = this[6] * inverseScale2;\n    result[6] = this[8] * inverseScale0;\n    result[7] = this[9] * inverseScale1;\n    result[8] = this[10] * inverseScale2;\n    return result;\n  }\n  transpose() {\n    mat4.transpose(this, this);\n    return this.check();\n  }\n  invert() {\n    mat4.invert(this, this);\n    return this.check();\n  }\n  multiplyLeft(a) {\n    mat4.multiply(this, a, this);\n    return this.check();\n  }\n  multiplyRight(a) {\n    mat4.multiply(this, this, a);\n    return this.check();\n  }\n  rotateX(radians) {\n    mat4.rotateX(this, this, radians);\n    return this.check();\n  }\n  rotateY(radians) {\n    mat4.rotateY(this, this, radians);\n    return this.check();\n  }\n  rotateZ(radians) {\n    mat4.rotateZ(this, this, radians);\n    return this.check();\n  }\n  rotateXYZ(angleXYZ) {\n    return this.rotateX(angleXYZ[0]).rotateY(angleXYZ[1]).rotateZ(angleXYZ[2]);\n  }\n  rotateAxis(radians, axis) {\n    mat4.rotate(this, this, radians, axis);\n    return this.check();\n  }\n  scale(factor) {\n    mat4.scale(this, this, Array.isArray(factor) ? factor : [factor, factor, factor]);\n    return this.check();\n  }\n  translate(vector) {\n    mat4.translate(this, this, vector);\n    return this.check();\n  }\n  transform(vector, result) {\n    if (vector.length === 4) {\n      result = vec4.transformMat4(result || [-0, -0, -0, -0], vector, this);\n      checkVector(result, 4);\n      return result;\n    }\n    return this.transformAsPoint(vector, result);\n  }\n  transformAsPoint(vector, result) {\n    const {\n      length\n    } = vector;\n    let out;\n    switch (length) {\n      case 2:\n        out = vec2.transformMat4(result || [-0, -0], vector, this);\n        break;\n      case 3:\n        out = vec3.transformMat4(result || [-0, -0, -0], vector, this);\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(out, vector.length);\n    return out;\n  }\n  transformAsVector(vector, result) {\n    let out;\n    switch (vector.length) {\n      case 2:\n        out = vec2_transformMat4AsVector(result || [-0, -0], vector, this);\n        break;\n      case 3:\n        out = vec3_transformMat4AsVector(result || [-0, -0, -0], vector, this);\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(out, vector.length);\n    return out;\n  }\n  transformPoint(vector, result) {\n    return this.transformAsPoint(vector, result);\n  }\n  transformVector(vector, result) {\n    return this.transformAsPoint(vector, result);\n  }\n  transformDirection(vector, result) {\n    return this.transformAsVector(vector, result);\n  }\n  makeRotationX(radians) {\n    return this.identity().rotateX(radians);\n  }\n  makeTranslation(x, y, z) {\n    return this.identity().translate([x, y, z]);\n  }\n}\nlet ZERO;\nlet IDENTITY;\nfunction getZeroMatrix() {\n  if (!ZERO) {\n    ZERO = new Matrix4([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    Object.freeze(ZERO);\n  }\n  return ZERO;\n}\nfunction getIdentityMatrix() {\n  if (!IDENTITY) {\n    IDENTITY = new Matrix4();\n    Object.freeze(IDENTITY);\n  }\n  return IDENTITY;\n}\nfunction checkRadians(possiblyDegrees) {\n  if (possiblyDegrees > Math.PI * 2) {\n    throw Error('expected radians');\n  }\n}\nfunction computeInfinitePerspectiveOffCenter(result, left, right, bottom, top, near) {\n  const column0Row0 = 2 * near / (right - left);\n  const column1Row1 = 2 * near / (top - bottom);\n  const column2Row0 = (right + left) / (right - left);\n  const column2Row1 = (top + bottom) / (top - bottom);\n  const column2Row2 = -1;\n  const column2Row3 = -1;\n  const column3Row2 = -2 * near;\n  result[0] = column0Row0;\n  result[1] = 0;\n  result[2] = 0;\n  result[3] = 0;\n  result[4] = 0;\n  result[5] = column1Row1;\n  result[6] = 0;\n  result[7] = 0;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = column2Row3;\n  result[12] = 0;\n  result[13] = 0;\n  result[14] = column3Row2;\n  result[15] = 0;\n  return result;\n}","map":{"version":3,"sources":["../../../src/classes/matrix4.ts"],"names":["Matrix","checkVector","vec2_transformMat4AsVector","vec3_transformMat4AsVector","mat4","vec2","vec3","vec4","INDICES","DEFAULT_FOVY","Math","PI","DEFAULT_ASPECT","DEFAULT_NEAR","DEFAULT_FAR","IDENTITY_MATRIX","Object","freeze","Matrix4","IDENTITY","getIdentityMatrix","ZERO","getZeroMatrix","ELEMENTS","RANK","constructor","array","arguments","length","Array","isArray","copy","identity","check","set","m00","m10","m20","m30","m01","m11","m21","m31","m02","m12","m22","m32","m03","m13","m23","m33","setRowMajor","toRowMajor","result","fromObject","object","fromQuaternion","quaternion","fromQuat","frustum","view","left","right","bottom","top","near","far","Infinity","computeInfinitePerspectiveOffCenter","lookAt","eye","center","up","ortho","orthographic","fovy","aspect","focalDistance","checkRadians","halfY","tan","perspective","determinant","getScale","sqrt","getTranslation","getRotation","scaleResult","scale","inverseScale0","inverseScale1","inverseScale2","getRotationMatrix3","transpose","invert","multiplyLeft","a","multiply","multiplyRight","rotateX","radians","rotateY","rotateZ","rotateXYZ","angleXYZ","rotateAxis","axis","rotate","factor","translate","vector","transform","transformMat4","transformAsPoint","out","Error","transformAsVector","transformPoint","transformVector","transformDirection","makeRotationX","makeTranslation","x","y","z","possiblyDegrees","column0Row0","column1Row1","column2Row0","column2Row1","column2Row2","column2Row3","column3Row2"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport Matrix from './base/matrix';\nimport {NumericArray} from '@math.gl/types';\nimport {checkVector} from '../lib/validators';\n\n/* eslint-disable camelcase */\nimport {vec2_transformMat4AsVector, vec3_transformMat4AsVector} from '../lib/gl-matrix-extras';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport * as vec4 from 'gl-matrix/vec4';\n\nenum INDICES {\n  COL0ROW0 = 0,\n  COL0ROW1 = 1,\n  COL0ROW2 = 2,\n  COL0ROW3 = 3,\n  COL1ROW0 = 4,\n  COL1ROW1 = 5,\n  COL1ROW2 = 6,\n  COL1ROW3 = 7,\n  COL2ROW0 = 8,\n  COL2ROW1 = 9,\n  COL2ROW2 = 10,\n  COL2ROW3 = 11,\n  COL3ROW0 = 12,\n  COL3ROW1 = 13,\n  COL3ROW2 = 14,\n  COL3ROW3 = 15\n}\n\nconst DEFAULT_FOVY = (45 * Math.PI) / 180;\nconst DEFAULT_ASPECT = 1;\nconst DEFAULT_NEAR = 0.1;\nconst DEFAULT_FAR = 500;\n\nconst IDENTITY_MATRIX = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n\n/** 4x4 matrix */\nexport default class Matrix4 extends Matrix {\n  static get IDENTITY(): Readonly<Matrix4> {\n    return getIdentityMatrix();\n  }\n\n  static get ZERO(): Readonly<Matrix4> {\n    return getZeroMatrix();\n  }\n\n  get ELEMENTS(): number {\n    return 16;\n  }\n\n  get RANK(): number {\n    return 4;\n  }\n\n  get INDICES(): typeof INDICES {\n    return INDICES;\n  }\n\n  constructor(array?: Readonly<NumericArray>) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0);\n    if (arguments.length === 1 && Array.isArray(array)) {\n      this.copy(array);\n    } else {\n      this.identity();\n    }\n  }\n\n  copy(array: Readonly<NumericArray>): this {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    this[4] = array[4];\n    this[5] = array[5];\n    this[6] = array[6];\n    this[7] = array[7];\n    this[8] = array[8];\n    this[9] = array[9];\n    this[10] = array[10];\n    this[11] = array[11];\n    this[12] = array[12];\n    this[13] = array[13];\n    this[14] = array[14];\n    this[15] = array[15];\n    return this.check();\n  }\n\n  // eslint-disable-next-line max-params\n  set(\n    m00: number,\n    m10: number,\n    m20: number,\n    m30: number,\n    m01: number,\n    m11: number,\n    m21: number,\n    m31: number,\n    m02: number,\n    m12: number,\n    m22: number,\n    m32: number,\n    m03: number,\n    m13: number,\n    m23: number,\n    m33: number\n  ): this {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m30;\n    this[4] = m01;\n    this[5] = m11;\n    this[6] = m21;\n    this[7] = m31;\n    this[8] = m02;\n    this[9] = m12;\n    this[10] = m22;\n    this[11] = m32;\n    this[12] = m03;\n    this[13] = m13;\n    this[14] = m23;\n    this[15] = m33;\n    return this.check();\n  }\n\n  // accepts row major order, stores as column major\n  // eslint-disable-next-line max-params\n  setRowMajor(\n    m00: number,\n    m01: number,\n    m02: number,\n    m03: number,\n    m10: number,\n    m11: number,\n    m12: number,\n    m13: number,\n    m20: number,\n    m21: number,\n    m22: number,\n    m23: number,\n    m30: number,\n    m31: number,\n    m32: number,\n    m33: number\n  ): this {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m30;\n    this[4] = m01;\n    this[5] = m11;\n    this[6] = m21;\n    this[7] = m31;\n    this[8] = m02;\n    this[9] = m12;\n    this[10] = m22;\n    this[11] = m32;\n    this[12] = m03;\n    this[13] = m13;\n    this[14] = m23;\n    this[15] = m33;\n    return this.check();\n  }\n\n  toRowMajor(result: NumericArray): NumericArray {\n    result[0] = this[0];\n    result[1] = this[4];\n    result[2] = this[8];\n    result[3] = this[12];\n    result[4] = this[1];\n    result[5] = this[5];\n    result[6] = this[9];\n    result[7] = this[13];\n    result[8] = this[2];\n    result[9] = this[6];\n    result[10] = this[10];\n    result[11] = this[14];\n    result[12] = this[3];\n    result[13] = this[7];\n    result[14] = this[11];\n    result[15] = this[15];\n    return result;\n  }\n\n  // Constructors\n\n  /** Set to identity matrix */\n  identity(): this {\n    return this.copy(IDENTITY_MATRIX);\n  }\n\n  /**\n   *\n   * @param object\n   * @returns self\n   */\n  fromObject(object: {[key: string]: any}): this {\n    return this.check();\n  }\n\n  /**\n   * Calculates a 4x4 matrix from the given quaternion\n   * @param quaternion Quaternion to create matrix from\n   * @returns self\n   */\n  fromQuaternion(quaternion: Readonly<NumericArray>): this {\n    mat4.fromQuat(this, quaternion);\n    return this.check();\n  }\n\n  /**\n   * Generates a frustum matrix with the given bounds\n   * @param view.left - Left bound of the frustum\n   * @param view.right - Right bound of the frustum\n   * @param view.bottom - Bottom bound of the frustum\n   * @param view.top - Top bound of the frustum\n   * @param view.near - Near bound of the frustum\n   * @param view.far - Far bound of the frustum. Can be set to Infinity.\n   * @returns self\n   */\n  frustum(view: {\n    left: number;\n    right: number;\n    bottom: number;\n    top: number;\n    near: number;\n    far?: number;\n  }): this {\n    const {left, right, bottom, top, near = DEFAULT_NEAR, far = DEFAULT_FAR} = view;\n    if (far === Infinity) {\n      computeInfinitePerspectiveOffCenter(this, left, right, bottom, top, near);\n    } else {\n      mat4.frustum(this, left, right, bottom, top, near, far);\n    }\n    return this.check();\n  }\n\n  /**\n   * Generates a look-at matrix with the given eye position, focal point,\n   * and up axis\n   * @param view.eye - (vector) Position of the viewer\n   * @param view.center - (vector) Point the viewer is looking at\n   * @param view.up - (vector) Up axis\n   * @returns self\n   */\n  lookAt(view: {\n    eye: Readonly<NumericArray>;\n    center?: Readonly<NumericArray>;\n    up?: Readonly<NumericArray>;\n  }): this {\n    const {eye, center = [0, 0, 0], up = [0, 1, 0]} = view;\n    mat4.lookAt(this, eye, center, up);\n    return this.check();\n  }\n\n  /**\n   * Generates a orthogonal projection matrix with the given bounds\n   * from \"traditional\" view space parameters\n   * @param view.left - Left bound of the frustum\n   * @param view.right number  Right bound of the frustum\n   * @param view.bottom - Bottom bound of the frustum\n   * @param view.top number  Top bound of the frustum\n   * @param view.near - Near bound of the frustum\n   * @param view.far number  Far bound of the frustum\n   * @returns self\n   */\n  ortho(view: {\n    left: number;\n    right: number;\n    bottom: number;\n    top: number;\n    near?: number;\n    far?: number;\n  }): this {\n    const {left, right, bottom, top, near = DEFAULT_NEAR, far = DEFAULT_FAR} = view;\n    mat4.ortho(this, left, right, bottom, top, near, far);\n    return this.check();\n  }\n\n  /**\n   * Generates an orthogonal projection matrix with the same parameters\n   * as a perspective matrix (plus focalDistance)\n   * @param view.fovy Vertical field of view in radians\n   * @param view.aspect Aspect ratio. Typically viewport width / viewport height\n   * @param view.focalDistance Distance in the view frustum used for extent calculations\n   * @param view.near Near bound of the frustum\n   * @param view.far Far bound of the frustum\n   * @returns self\n   */\n  orthographic(view: {\n    fovy?: number;\n    aspect?: number;\n    focalDistance?: number;\n    near?: number;\n    far?: number;\n  }): this {\n    const {\n      fovy = DEFAULT_FOVY,\n      aspect = DEFAULT_ASPECT,\n      focalDistance = 1,\n      near = DEFAULT_NEAR,\n      far = DEFAULT_FAR\n    } = view;\n\n    checkRadians(fovy);\n\n    const halfY = fovy / 2;\n    const top = focalDistance * Math.tan(halfY); // focus_plane is the distance from the camera\n    const right = top * aspect;\n\n    return this.ortho({\n      left: -right,\n      right,\n      bottom: -top,\n      top,\n      near,\n      far\n    });\n  }\n\n  /**\n   * Generates a perspective projection matrix with the given bounds\n   * @param view.fovy Vertical field of view in radians\n   * @param view.aspect Aspect ratio. typically viewport width/height\n   * @param view.near Near bound of the frustum\n   * @param view.far Far bound of the frustum\n   * @returns self\n   */\n  perspective(view: {fovy: number; aspect?: number; near?: number; far?: number}): this {\n    const {fovy = (45 * Math.PI) / 180, aspect = 1, near = 0.1, far = 500} = view;\n    checkRadians(fovy);\n    mat4.perspective(this, fovy, aspect, near, far);\n    return this.check();\n  }\n\n  // Accessors\n\n  determinant(): number {\n    return mat4.determinant(this);\n  }\n\n  /**\n   * Extracts the non-uniform scale assuming the matrix is an affine transformation.\n   * The scales are the \"lengths\" of the column vectors in the upper-left 3x3 matrix.\n   * @param result\n   * @returns self\n   */\n  getScale(result: NumericArray = [-0, -0, -0]): NumericArray {\n    // explicit is faster than hypot...\n    result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);\n    result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);\n    result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);\n    // result[0] = Math.hypot(this[0], this[1], this[2]);\n    // result[1] = Math.hypot(this[4], this[5], this[6]);\n    // result[2] = Math.hypot(this[8], this[9], this[10]);\n    return result;\n  }\n\n  /**\n   * Gets the translation portion, assuming the matrix is a affine transformation matrix.\n   * @param result\n   * @returns self\n   */\n  getTranslation(result: NumericArray = [-0, -0, -0]): NumericArray {\n    result[0] = this[12];\n    result[1] = this[13];\n    result[2] = this[14];\n    return result;\n  }\n\n  /**\n   * Gets upper left 3x3 pure rotation matrix (non-scaling), assume affine transformation matrix\n   * @param result\n   * @param scaleResult\n   * @returns self\n   */\n  getRotation(result?: NumericArray, scaleResult?: NumericArray): NumericArray {\n    result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n    scaleResult = scaleResult || [-0, -0, -0];\n    const scale = this.getScale(scaleResult);\n    const inverseScale0 = 1 / scale[0];\n    const inverseScale1 = 1 / scale[1];\n    const inverseScale2 = 1 / scale[2];\n    result[0] = this[0] * inverseScale0;\n    result[1] = this[1] * inverseScale1;\n    result[2] = this[2] * inverseScale2;\n    result[3] = 0;\n    result[4] = this[4] * inverseScale0;\n    result[5] = this[5] * inverseScale1;\n    result[6] = this[6] * inverseScale2;\n    result[7] = 0;\n    result[8] = this[8] * inverseScale0;\n    result[9] = this[9] * inverseScale1;\n    result[10] = this[10] * inverseScale2;\n    result[11] = 0;\n    result[12] = 0;\n    result[13] = 0;\n    result[14] = 0;\n    result[15] = 1;\n    return result;\n  }\n\n  /**\n   *\n   * @param result\n   * @param scaleResult\n   * @returns self\n   */\n  getRotationMatrix3(result?: NumericArray, scaleResult?: NumericArray): NumericArray {\n    result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0];\n    scaleResult = scaleResult || [-0, -0, -0];\n    const scale = this.getScale(scaleResult);\n    const inverseScale0 = 1 / scale[0];\n    const inverseScale1 = 1 / scale[1];\n    const inverseScale2 = 1 / scale[2];\n    result[0] = this[0] * inverseScale0;\n    result[1] = this[1] * inverseScale1;\n    result[2] = this[2] * inverseScale2;\n    result[3] = this[4] * inverseScale0;\n    result[4] = this[5] * inverseScale1;\n    result[5] = this[6] * inverseScale2;\n    result[6] = this[8] * inverseScale0;\n    result[7] = this[9] * inverseScale1;\n    result[8] = this[10] * inverseScale2;\n    return result;\n  }\n\n  // Modifiers\n\n  transpose(): this {\n    mat4.transpose(this, this);\n    return this.check();\n  }\n\n  invert(): this {\n    mat4.invert(this, this);\n    return this.check();\n  }\n\n  // Operations\n\n  multiplyLeft(a: Readonly<NumericArray>): this {\n    mat4.multiply(this, a, this);\n    return this.check();\n  }\n\n  multiplyRight(a: Readonly<NumericArray>): this {\n    mat4.multiply(this, this, a);\n    return this.check();\n  }\n\n  // Rotates a matrix by the given angle around the X axis\n  rotateX(radians: number): this {\n    mat4.rotateX(this, this, radians);\n    // mat4.rotate(this, this, radians, [1, 0, 0]);\n    return this.check();\n  }\n\n  // Rotates a matrix by the given angle around the Y axis.\n  rotateY(radians: number): this {\n    mat4.rotateY(this, this, radians);\n    // mat4.rotate(this, this, radians, [0, 1, 0]);\n    return this.check();\n  }\n\n  /**\n   * Rotates a matrix by the given angle around the Z axis.\n   * @param radians\n   * @returns self\n   */\n  rotateZ(radians: number): this {\n    mat4.rotateZ(this, this, radians);\n    // mat4.rotate(this, this, radians, [0, 0, 1]);\n    return this.check();\n  }\n\n  /**\n   *\n   * @param param0\n   * @returns self\n   */\n  rotateXYZ(angleXYZ: Readonly<NumericArray>): this {\n    return this.rotateX(angleXYZ[0]).rotateY(angleXYZ[1]).rotateZ(angleXYZ[2]);\n  }\n\n  /**\n   *\n   * @param radians\n   * @param axis\n   * @returns self\n   */\n  rotateAxis(radians: number, axis: Readonly<NumericArray>): this {\n    mat4.rotate(this, this, radians, axis);\n    return this.check();\n  }\n\n  /**\n   *\n   * @param factor\n   * @returns self\n   */\n  scale(factor: number | Readonly<NumericArray>): this {\n    mat4.scale(this, this, Array.isArray(factor) ? factor : [factor, factor, factor]);\n    return this.check();\n  }\n\n  /**\n   *\n   * @param vec\n   * @returns self\n   */\n  translate(vector: Readonly<NumericArray>): this {\n    mat4.translate(this, this, vector);\n    return this.check();\n  }\n\n  // Transforms\n\n  /**\n   * Transforms any 2, 3 or 4 element vector. 2 and 3 elements are treated as points\n   * @param vector\n   * @param result\n   * @returns self\n   */\n  transform(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    if (vector.length === 4) {\n      result = vec4.transformMat4(result || [-0, -0, -0, -0], vector, this);\n      checkVector(result, 4);\n      return result;\n    }\n    return this.transformAsPoint(vector, result);\n  }\n\n  /**\n   * Transforms any 2 or 3 element array as point (w implicitly 1)\n   * @param vector\n   * @param result\n   * @returns self\n   */\n  transformAsPoint(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    const {length} = vector;\n    let out: NumericArray;\n    switch (length) {\n      case 2:\n        out = vec2.transformMat4(result || [-0, -0], vector, this);\n        break;\n      case 3:\n        out = vec3.transformMat4(result || [-0, -0, -0], vector, this);\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(out, vector.length);\n    return out;\n  }\n\n  /**\n   * Transforms any 2 or 3 element array as vector (w implicitly 0)\n   * @param vector\n   * @param result\n   * @returns self\n   */\n  transformAsVector(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    let out: NumericArray;\n    switch (vector.length) {\n      case 2:\n        out = vec2_transformMat4AsVector(result || [-0, -0], vector, this);\n        break;\n      case 3:\n        out = vec3_transformMat4AsVector(result || [-0, -0, -0], vector, this);\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(out, vector.length);\n    return out;\n  }\n\n  /** @deprecated */\n  transformPoint(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transformAsPoint(vector, result);\n  }\n\n  /** @deprecated */\n  transformVector(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transformAsPoint(vector, result);\n  }\n\n  /** @deprecated */\n  transformDirection(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transformAsVector(vector, result);\n  }\n\n  // three.js math API compatibility\n\n  makeRotationX(radians: number): this {\n    return this.identity().rotateX(radians);\n  }\n\n  makeTranslation(x: number, y: number, z: number): this {\n    return this.identity().translate([x, y, z]);\n  }\n}\n\n// TODO initializing static members directly is an option, but make sure no tree-shaking issues\nlet ZERO: Matrix4;\nlet IDENTITY: Matrix4;\n\nfunction getZeroMatrix(): Readonly<Matrix4> {\n  if (!ZERO) {\n    ZERO = new Matrix4([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    Object.freeze(ZERO);\n  }\n  return ZERO;\n}\n\nfunction getIdentityMatrix(): Matrix4 {\n  if (!IDENTITY) {\n    IDENTITY = new Matrix4();\n    Object.freeze(IDENTITY);\n  }\n  return IDENTITY;\n}\n\n// HELPER FUNCTIONS\n\nfunction checkRadians(possiblyDegrees: number) {\n  if (possiblyDegrees > Math.PI * 2) {\n    throw Error('expected radians');\n  }\n}\n\n// eslint-disable-next-line max-params\nfunction computeInfinitePerspectiveOffCenter(\n  result: NumericArray,\n  left: number,\n  right: number,\n  bottom: number,\n  top: number,\n  near: number\n): NumericArray {\n  const column0Row0 = (2 * near) / (right - left);\n  const column1Row1 = (2 * near) / (top - bottom);\n  const column2Row0 = (right + left) / (right - left);\n  const column2Row1 = (top + bottom) / (top - bottom);\n  const column2Row2 = -1;\n  const column2Row3 = -1;\n  const column3Row2 = -2 * near;\n  result[0] = column0Row0;\n  result[1] = 0;\n  result[2] = 0;\n  result[3] = 0;\n  result[4] = 0;\n  result[5] = column1Row1;\n  result[6] = 0;\n  result[7] = 0;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = column2Row3;\n  result[12] = 0;\n  result[13] = 0;\n  result[14] = column3Row2;\n  result[15] = 0;\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}