{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport getHiResTimestamp from '../utils/hi-res-timestamp';\nexport default class Stat {\n  constructor(name, type) {\n    _defineProperty(this, \"name\", void 0);\n    _defineProperty(this, \"type\", void 0);\n    _defineProperty(this, \"sampleSize\", 1);\n    _defineProperty(this, \"time\", void 0);\n    _defineProperty(this, \"count\", void 0);\n    _defineProperty(this, \"samples\", void 0);\n    _defineProperty(this, \"lastTiming\", void 0);\n    _defineProperty(this, \"lastSampleTime\", void 0);\n    _defineProperty(this, \"lastSampleCount\", void 0);\n    _defineProperty(this, \"_count\", 0);\n    _defineProperty(this, \"_time\", 0);\n    _defineProperty(this, \"_samples\", 0);\n    _defineProperty(this, \"_startTime\", 0);\n    _defineProperty(this, \"_timerPending\", false);\n    this.name = name;\n    this.type = type;\n    this.reset();\n  }\n  setSampleSize(samples) {\n    this.sampleSize = samples;\n    return this;\n  }\n  incrementCount() {\n    this.addCount(1);\n    return this;\n  }\n  decrementCount() {\n    this.subtractCount(1);\n    return this;\n  }\n  addCount(value) {\n    this._count += value;\n    this._samples++;\n    this._checkSampling();\n    return this;\n  }\n  subtractCount(value) {\n    this._count -= value;\n    this._samples++;\n    this._checkSampling();\n    return this;\n  }\n  addTime(time) {\n    this._time += time;\n    this.lastTiming = time;\n    this._samples++;\n    this._checkSampling();\n    return this;\n  }\n  timeStart() {\n    this._startTime = getHiResTimestamp();\n    this._timerPending = true;\n    return this;\n  }\n  timeEnd() {\n    if (!this._timerPending) {\n      return this;\n    }\n    this.addTime(getHiResTimestamp() - this._startTime);\n    this._timerPending = false;\n    this._checkSampling();\n    return this;\n  }\n  getSampleAverageCount() {\n    return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;\n  }\n  getSampleAverageTime() {\n    return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;\n  }\n  getSampleHz() {\n    return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1000) : 0;\n  }\n  getAverageCount() {\n    return this.samples > 0 ? this.count / this.samples : 0;\n  }\n  getAverageTime() {\n    return this.samples > 0 ? this.time / this.samples : 0;\n  }\n  getHz() {\n    return this.time > 0 ? this.samples / (this.time / 1000) : 0;\n  }\n  reset() {\n    this.time = 0;\n    this.count = 0;\n    this.samples = 0;\n    this.lastTiming = 0;\n    this.lastSampleTime = 0;\n    this.lastSampleCount = 0;\n    this._count = 0;\n    this._time = 0;\n    this._samples = 0;\n    this._startTime = 0;\n    this._timerPending = false;\n    return this;\n  }\n  _checkSampling() {\n    if (this._samples === this.sampleSize) {\n      this.lastSampleTime = this._time;\n      this.lastSampleCount = this._count;\n      this.count += this._count;\n      this.time += this._time;\n      this.samples += this._samples;\n      this._time = 0;\n      this._count = 0;\n      this._samples = 0;\n    }\n  }\n}","map":{"version":3,"sources":["../../../src/lib/stat.ts"],"names":["getHiResTimestamp","Stat","constructor","name","type","reset","setSampleSize","samples","sampleSize","incrementCount","addCount","decrementCount","subtractCount","value","_count","_samples","_checkSampling","addTime","time","_time","lastTiming","timeStart","_startTime","_timerPending","timeEnd","getSampleAverageCount","lastSampleCount","getSampleAverageTime","lastSampleTime","getSampleHz","getAverageCount","count","getAverageTime","getHz"],"mappings":"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","sourcesContent":["import getHiResTimestamp from '../utils/hi-res-timestamp';\n\nexport default class Stat {\n  readonly name: string;\n  readonly type: string;\n  sampleSize: number = 1;\n  time: number;\n  count: number;\n  samples: number;\n  lastTiming: number;\n  lastSampleTime: number;\n  lastSampleCount: number;\n\n  _count: number = 0;\n  _time: number = 0;\n  _samples: number = 0;\n  _startTime: number = 0;\n  _timerPending: boolean = false;\n\n  constructor(name: string, type?: string) {\n    this.name = name;\n    this.type = type;\n    this.reset();\n  }\n\n  setSampleSize(samples: number): this {\n    this.sampleSize = samples;\n    return this;\n  }\n\n  /** Call to increment count (+1) */\n  incrementCount(): this {\n    this.addCount(1);\n\n    return this;\n  }\n\n  /** Call to decrement count (-1) */\n  decrementCount(): this {\n    this.subtractCount(1);\n\n    return this;\n  }\n\n  /** Increase count */\n  addCount(value: number): this {\n    this._count += value;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  /** Decrease count */\n  subtractCount(value: number): this {\n    this._count -= value;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  /** Add an arbitrary timing and bump the count */\n  addTime(time: number): this {\n    this._time += time;\n    this.lastTiming = time;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  /** Start a timer */\n  timeStart(): this {\n    this._startTime = getHiResTimestamp();\n    this._timerPending = true;\n\n    return this;\n  }\n\n  /** End a timer. Adds to time and bumps the timing count. */\n  timeEnd(): this {\n    if (!this._timerPending) {\n      return this;\n    }\n    this.addTime(getHiResTimestamp() - this._startTime);\n    this._timerPending = false;\n    this._checkSampling();\n\n    return this;\n  }\n\n  getSampleAverageCount(): number {\n    return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;\n  }\n\n  /** Calculate average time / count for the previous window */\n  getSampleAverageTime(): number {\n    return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;\n  }\n\n  /** Calculate counts per second for the previous window */\n  getSampleHz(): number {\n    return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1000) : 0;\n  }\n\n  getAverageCount(): number {\n    return this.samples > 0 ? this.count / this.samples : 0;\n  }\n\n  /** Calculate average time / count */\n  getAverageTime(): number {\n    return this.samples > 0 ? this.time / this.samples : 0;\n  }\n\n  /** Calculate counts per second */\n  getHz(): number {\n    return this.time > 0 ? this.samples / (this.time / 1000) : 0;\n  }\n\n  reset(): this {\n    this.time = 0;\n    this.count = 0;\n    this.samples = 0;\n    this.lastTiming = 0;\n    this.lastSampleTime = 0;\n    this.lastSampleCount = 0;\n    this._count = 0;\n    this._time = 0;\n    this._samples = 0;\n    this._startTime = 0;\n    this._timerPending = false;\n\n    return this;\n  }\n\n  _checkSampling(): void {\n    if (this._samples === this.sampleSize) {\n      this.lastSampleTime = this._time;\n      this.lastSampleCount = this._count;\n      this.count += this._count;\n      this.time += this._time;\n      this.samples += this._samples;\n      this._time = 0;\n      this._count = 0;\n      this._samples = 0;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}