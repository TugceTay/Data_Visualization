{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { Layer, project32, gouraudLighting, picking, COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { Model, Geometry, hasFeatures, FEATURES } from '@luma.gl/core';\nimport PolygonTesselator from './polygon-tesselator';\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  _normalize: true,\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  getPolygon: {\n    type: 'accessor',\n    value: function value(f) {\n      return f.polygon;\n    }\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  material: true\n};\nvar ATTRIBUTE_TRANSITION = {\n  enter: function enter(value, chunk) {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\nvar SolidPolygonLayer = function (_Layer) {\n  _inherits(SolidPolygonLayer, _Layer);\n  function SolidPolygonLayer() {\n    _classCallCheck(this, SolidPolygonLayer);\n    return _possibleConstructorReturn(this, _getPrototypeOf(SolidPolygonLayer).apply(this, arguments));\n  }\n  _createClass(SolidPolygonLayer, [{\n    key: \"getShaders\",\n    value: function getShaders(vs) {\n      return _get(_getPrototypeOf(SolidPolygonLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        defines: {},\n        modules: [project32, gouraudLighting, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var _this = this;\n      var _this$context = this.context,\n        gl = _this$context.gl,\n        viewport = _this$context.viewport;\n      var coordinateSystem = this.props.coordinateSystem;\n      if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n        coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n      }\n      this.setState({\n        numInstances: 0,\n        polygonTesselator: new PolygonTesselator({\n          preproject: coordinateSystem === COORDINATE_SYSTEM.LNGLAT && viewport.projectFlat,\n          fp64: this.use64bitPositions(),\n          IndexType: !gl || hasFeatures(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n        })\n      });\n      var attributeManager = this.getAttributeManager();\n      var noAlloc = true;\n      attributeManager.remove(['instancePickingColors']);\n      attributeManager.add({\n        indices: {\n          size: 1,\n          isIndexed: true,\n          update: this.calculateIndices,\n          noAlloc: noAlloc\n        },\n        positions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: ATTRIBUTE_TRANSITION,\n          accessor: 'getPolygon',\n          update: this.calculatePositions,\n          noAlloc: noAlloc,\n          shaderAttributes: {\n            positions: {\n              vertexOffset: 0,\n              divisor: 0\n            },\n            instancePositions: {\n              vertexOffset: 0,\n              divisor: 1\n            },\n            nextPositions: {\n              vertexOffset: 1,\n              divisor: 1\n            }\n          }\n        },\n        vertexValid: {\n          size: 1,\n          divisor: 1,\n          type: 5121,\n          update: this.calculateVertexValid,\n          noAlloc: noAlloc\n        },\n        elevations: {\n          size: 1,\n          transition: ATTRIBUTE_TRANSITION,\n          accessor: 'getElevation',\n          shaderAttributes: {\n            elevations: {\n              divisor: 0\n            },\n            instanceElevations: {\n              divisor: 1\n            }\n          }\n        },\n        fillColors: {\n          alias: 'colors',\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: ATTRIBUTE_TRANSITION,\n          accessor: 'getFillColor',\n          defaultValue: DEFAULT_COLOR,\n          shaderAttributes: {\n            fillColors: {\n              divisor: 0\n            },\n            instanceFillColors: {\n              divisor: 1\n            }\n          }\n        },\n        lineColors: {\n          alias: 'colors',\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: ATTRIBUTE_TRANSITION,\n          accessor: 'getLineColor',\n          defaultValue: DEFAULT_COLOR,\n          shaderAttributes: {\n            lineColors: {\n              divisor: 0\n            },\n            instanceLineColors: {\n              divisor: 1\n            }\n          }\n        },\n        pickingColors: {\n          size: 3,\n          type: 5121,\n          accessor: function accessor(object, _ref) {\n            var index = _ref.index,\n              value = _ref.target;\n            return _this.encodePickingColor(object && object.__source ? object.__source.index : index, value);\n          },\n          shaderAttributes: {\n            pickingColors: {\n              divisor: 0\n            },\n            instancePickingColors: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(params) {\n      var info = _get(_getPrototypeOf(SolidPolygonLayer.prototype), \"getPickingInfo\", this).call(this, params);\n      var index = info.index;\n      var data = this.props.data;\n      if (data[0] && data[0].__source) {\n        info.object = data.find(function (d) {\n          return d.__source.index === index;\n        });\n      }\n      return info;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var _this$props = this.props,\n        extruded = _this$props.extruded,\n        filled = _this$props.filled,\n        wireframe = _this$props.wireframe,\n        elevationScale = _this$props.elevationScale;\n      var _this$state = this.state,\n        topModel = _this$state.topModel,\n        sideModel = _this$state.sideModel,\n        polygonTesselator = _this$state.polygonTesselator;\n      var renderUniforms = Object.assign({}, uniforms, {\n        extruded: Boolean(extruded),\n        elevationScale: elevationScale\n      });\n      if (sideModel) {\n        sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n        sideModel.setUniforms(renderUniforms);\n        if (wireframe) {\n          sideModel.setDrawMode(3);\n          sideModel.setUniforms({\n            isWireframe: true\n          }).draw();\n        }\n        if (filled) {\n          sideModel.setDrawMode(6);\n          sideModel.setUniforms({\n            isWireframe: false\n          }).draw();\n        }\n      }\n      if (topModel) {\n        topModel.setVertexCount(polygonTesselator.vertexCount);\n        topModel.setUniforms(renderUniforms).draw();\n      }\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(updateParams) {\n      _get(_getPrototypeOf(SolidPolygonLayer.prototype), \"updateState\", this).call(this, updateParams);\n      this.updateGeometry(updateParams);\n      var props = updateParams.props,\n        oldProps = updateParams.oldProps,\n        changeFlags = updateParams.changeFlags;\n      var attributeManager = this.getAttributeManager();\n      var regenerateModels = changeFlags.extensionsChanged || props.filled !== oldProps.filled || props.extruded !== oldProps.extruded;\n      if (regenerateModels) {\n        if (this.state.models) {\n          this.state.models.forEach(function (model) {\n            return model[\"delete\"]();\n          });\n        }\n        this.setState(this._getModels(this.context.gl));\n        attributeManager.invalidateAll();\n      }\n    }\n  }, {\n    key: \"updateGeometry\",\n    value: function updateGeometry(_ref3) {\n      var props = _ref3.props,\n        oldProps = _ref3.oldProps,\n        changeFlags = _ref3.changeFlags;\n      var geometryConfigChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon);\n      if (geometryConfigChanged) {\n        var polygonTesselator = this.state.polygonTesselator;\n        var buffers = props.data.attributes || {};\n        polygonTesselator.updateGeometry({\n          data: props.data,\n          normalize: props._normalize,\n          geometryBuffer: buffers.getPolygon,\n          buffers: buffers,\n          getGeometry: props.getPolygon,\n          positionFormat: props.positionFormat,\n          wrapLongitude: props.wrapLongitude,\n          resolution: this.context.viewport.resolution,\n          fp64: this.use64bitPositions(),\n          dataChanged: changeFlags.dataChanged\n        });\n        this.setState({\n          numInstances: polygonTesselator.instanceCount,\n          startIndices: polygonTesselator.vertexStarts\n        });\n        if (!changeFlags.dataChanged) {\n          this.getAttributeManager().invalidateAll();\n        }\n      }\n    }\n  }, {\n    key: \"_getModels\",\n    value: function _getModels(gl) {\n      var _this$props2 = this.props,\n        id = _this$props2.id,\n        filled = _this$props2.filled,\n        extruded = _this$props2.extruded;\n      var topModel;\n      var sideModel;\n      if (filled) {\n        var shaders = this.getShaders(vsTop);\n        shaders.defines.NON_INSTANCED_MODEL = 1;\n        topModel = new Model(gl, Object.assign({}, shaders, {\n          id: \"\".concat(id, \"-top\"),\n          drawMode: 4,\n          attributes: {\n            vertexPositions: new Float32Array([0, 1])\n          },\n          uniforms: {\n            isWireframe: false,\n            isSideVertex: false\n          },\n          vertexCount: 0,\n          isIndexed: true\n        }));\n      }\n      if (extruded) {\n        sideModel = new Model(gl, Object.assign({}, this.getShaders(vsSide), {\n          id: \"\".concat(id, \"-side\"),\n          geometry: new Geometry({\n            drawMode: 1,\n            vertexCount: 4,\n            attributes: {\n              vertexPositions: {\n                size: 2,\n                value: new Float32Array([1, 0, 0, 0, 0, 1, 1, 1])\n              }\n            }\n          }),\n          instanceCount: 0,\n          isInstanced: 1\n        }));\n        sideModel.userData.excludeAttributes = {\n          indices: true\n        };\n      }\n      return {\n        models: [sideModel, topModel].filter(Boolean),\n        topModel: topModel,\n        sideModel: sideModel\n      };\n    }\n  }, {\n    key: \"calculateIndices\",\n    value: function calculateIndices(attribute) {\n      var polygonTesselator = this.state.polygonTesselator;\n      attribute.startIndices = polygonTesselator.indexStarts;\n      attribute.value = polygonTesselator.get('indices');\n    }\n  }, {\n    key: \"calculatePositions\",\n    value: function calculatePositions(attribute) {\n      var polygonTesselator = this.state.polygonTesselator;\n      attribute.startIndices = polygonTesselator.vertexStarts;\n      attribute.value = polygonTesselator.get('positions');\n    }\n  }, {\n    key: \"calculateVertexValid\",\n    value: function calculateVertexValid(attribute) {\n      attribute.value = this.state.polygonTesselator.get('vertexValid');\n    }\n  }, {\n    key: \"wrapLongitude\",\n    get: function get() {\n      return false;\n    }\n  }]);\n  return SolidPolygonLayer;\n}(Layer);\nexport { SolidPolygonLayer as default };\nSolidPolygonLayer.layerName = 'SolidPolygonLayer';\nSolidPolygonLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/solid-polygon-layer/solid-polygon-layer.js"],"names":["Layer","project32","gouraudLighting","picking","COORDINATE_SYSTEM","Model","Geometry","hasFeatures","FEATURES","PolygonTesselator","vsTop","vsSide","fs","DEFAULT_COLOR","defaultProps","filled","extruded","wireframe","_normalize","elevationScale","type","min","value","getPolygon","f","polygon","getElevation","getFillColor","getLineColor","material","ATTRIBUTE_TRANSITION","enter","chunk","length","subarray","SolidPolygonLayer","vs","defines","modules","gl","viewport","context","coordinateSystem","props","isGeospatial","DEFAULT","LNGLAT","setState","numInstances","polygonTesselator","preproject","projectFlat","fp64","use64bitPositions","IndexType","ELEMENT_INDEX_UINT32","Uint32Array","Uint16Array","attributeManager","getAttributeManager","noAlloc","remove","add","indices","size","isIndexed","update","calculateIndices","positions","transition","accessor","calculatePositions","shaderAttributes","vertexOffset","divisor","instancePositions","nextPositions","vertexValid","calculateVertexValid","elevations","instanceElevations","fillColors","alias","colorFormat","normalized","defaultValue","instanceFillColors","lineColors","instanceLineColors","pickingColors","object","index","target","encodePickingColor","__source","instancePickingColors","params","info","data","find","d","uniforms","topModel","sideModel","state","renderUniforms","assign","Boolean","setInstanceCount","instanceCount","setUniforms","setDrawMode","isWireframe","draw","setVertexCount","vertexCount","updateParams","updateGeometry","oldProps","changeFlags","regenerateModels","extensionsChanged","models","forEach","model","_getModels","invalidateAll","geometryConfigChanged","dataChanged","updateTriggersChanged","all","buffers","attributes","normalize","geometryBuffer","getGeometry","positionFormat","wrapLongitude","resolution","startIndices","vertexStarts","id","shaders","getShaders","NON_INSTANCED_MODEL","drawMode","vertexPositions","Float32Array","isSideVertex","geometry","isInstanced","userData","excludeAttributes","filter","attribute","indexStarts","get","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, hasFeatures, FEATURES} from '@luma.gl/core';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport PolygonTesselator from './polygon-tesselator';\n\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  filled: true,\n  // Whether to extrude\n  extruded: false,\n  // Whether to draw a GL.LINES wireframe of the polygon\n  wireframe: false,\n  _normalize: true,\n\n  // elevation multiplier\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // Accessor for polygon geometry\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Accessor for extrusion height\n  getElevation: {type: 'accessor', value: 1000},\n  // Accessor for colors\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // Optional settings for 'lighting' shader module\n  material: true\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class SolidPolygonLayer extends Layer {\n  getShaders(vs) {\n    return super.getShaders({\n      vs,\n      fs,\n      defines: {},\n      modules: [project32, gouraudLighting, picking]\n    });\n  }\n\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const {gl, viewport} = this.context;\n    let {coordinateSystem} = this.props;\n    if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n      coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n    }\n\n    this.setState({\n      numInstances: 0,\n      polygonTesselator: new PolygonTesselator({\n        // Lnglat coordinates are usually projected non-linearly, which affects tesselation results\n        // Provide a preproject function if the coordinates are in lnglat\n        preproject: coordinateSystem === COORDINATE_SYSTEM.LNGLAT && viewport.projectFlat,\n        fp64: this.use64bitPositions(),\n        IndexType: !gl || hasFeatures(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n      })\n    });\n\n    const attributeManager = this.getAttributeManager();\n    const noAlloc = true;\n\n    attributeManager.remove(['instancePickingColors']);\n\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {size: 1, isIndexed: true, update: this.calculateIndices, noAlloc},\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          positions: {\n            vertexOffset: 0,\n            divisor: 0\n          },\n          instancePositions: {\n            vertexOffset: 0,\n            divisor: 1\n          },\n          nextPositions: {\n            vertexOffset: 1,\n            divisor: 1\n          }\n        }\n      },\n      vertexValid: {\n        size: 1,\n        divisor: 1,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        shaderAttributes: {\n          elevations: {\n            divisor: 0\n          },\n          instanceElevations: {\n            divisor: 1\n          }\n        }\n      },\n      fillColors: {\n        alias: 'colors',\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          fillColors: {\n            divisor: 0\n          },\n          instanceFillColors: {\n            divisor: 1\n          }\n        }\n      },\n      lineColors: {\n        alias: 'colors',\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          lineColors: {\n            divisor: 0\n          },\n          instanceLineColors: {\n            divisor: 1\n          }\n        }\n      },\n      pickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value),\n        shaderAttributes: {\n          pickingColors: {\n            divisor: 0\n          },\n          instancePickingColors: {\n            divisor: 1\n          }\n        }\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const {data} = this.props;\n\n    if (data[0] && data[0].__source) {\n      // data is wrapped\n      info.object = data.find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  draw({uniforms}) {\n    const {extruded, filled, wireframe, elevationScale} = this.props;\n    const {topModel, sideModel, polygonTesselator} = this.state;\n\n    const renderUniforms = Object.assign({}, uniforms, {\n      extruded: Boolean(extruded),\n      elevationScale\n    });\n\n    // Note: the order is important\n    if (sideModel) {\n      sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n      sideModel.setUniforms(renderUniforms);\n      if (wireframe) {\n        sideModel.setDrawMode(GL.LINE_STRIP);\n        sideModel.setUniforms({isWireframe: true}).draw();\n      }\n      if (filled) {\n        sideModel.setDrawMode(GL.TRIANGLE_FAN);\n        sideModel.setUniforms({isWireframe: false}).draw();\n      }\n    }\n\n    if (topModel) {\n      topModel.setVertexCount(polygonTesselator.vertexCount);\n      topModel.setUniforms(renderUniforms).draw();\n    }\n  }\n\n  updateState(updateParams) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps, changeFlags} = updateParams;\n    const attributeManager = this.getAttributeManager();\n\n    const regenerateModels =\n      changeFlags.extensionsChanged ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded;\n\n    if (regenerateModels) {\n      if (this.state.models) {\n        this.state.models.forEach(model => model.delete());\n      }\n\n      this.setState(this._getModels(this.context.gl));\n      attributeManager.invalidateAll();\n    }\n  }\n\n  updateGeometry({props, oldProps, changeFlags}) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      const {polygonTesselator} = this.state;\n      const buffers = props.data.attributes || {};\n      polygonTesselator.updateGeometry({\n        data: props.data,\n        normalize: props._normalize,\n        geometryBuffer: buffers.getPolygon,\n        buffers,\n        getGeometry: props.getPolygon,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        fp64: this.use64bitPositions(),\n        dataChanged: changeFlags.dataChanged\n      });\n\n      this.setState({\n        numInstances: polygonTesselator.instanceCount,\n        startIndices: polygonTesselator.vertexStarts\n      });\n\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }\n\n  _getModels(gl) {\n    const {id, filled, extruded} = this.props;\n\n    let topModel;\n    let sideModel;\n\n    if (filled) {\n      const shaders = this.getShaders(vsTop);\n      shaders.defines.NON_INSTANCED_MODEL = 1;\n\n      topModel = new Model(\n        gl,\n        Object.assign({}, shaders, {\n          id: `${id}-top`,\n          drawMode: GL.TRIANGLES,\n          attributes: {\n            vertexPositions: new Float32Array([0, 1])\n          },\n          uniforms: {\n            isWireframe: false,\n            isSideVertex: false\n          },\n          vertexCount: 0,\n          isIndexed: true\n        })\n      );\n    }\n    if (extruded) {\n      sideModel = new Model(\n        gl,\n        Object.assign({}, this.getShaders(vsSide), {\n          id: `${id}-side`,\n          geometry: new Geometry({\n            drawMode: GL.LINES,\n            vertexCount: 4,\n            attributes: {\n              // top right - top left - bootom left - bottom right\n              vertexPositions: {\n                size: 2,\n                value: new Float32Array([1, 0, 0, 0, 0, 1, 1, 1])\n              }\n            }\n          }),\n          instanceCount: 0,\n          isInstanced: 1\n        })\n      );\n\n      sideModel.userData.excludeAttributes = {indices: true};\n    }\n\n    return {\n      models: [sideModel, topModel].filter(Boolean),\n      topModel,\n      sideModel\n    };\n  }\n\n  calculateIndices(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.indexStarts;\n    attribute.value = polygonTesselator.get('indices');\n  }\n\n  calculatePositions(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.vertexStarts;\n    attribute.value = polygonTesselator.get('positions');\n  }\n\n  calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.get('vertexValid');\n  }\n}\n\nSolidPolygonLayer.layerName = 'SolidPolygonLayer';\nSolidPolygonLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}