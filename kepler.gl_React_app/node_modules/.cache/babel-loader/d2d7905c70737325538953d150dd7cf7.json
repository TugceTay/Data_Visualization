{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _asyncIterator from \"@babel/runtime/helpers/esm/asyncIterator\";\nimport { concatenateArrayBuffers, resolvePath } from '@loaders.gl/loader-utils';\nimport { isBrowser } from '@loaders.gl/loader-utils';\nimport { writeFile } from '../fetch/write-file';\nimport { fetchFile } from '../fetch/fetch-file';\nfunction getTemporaryFilename(filename) {\n  return \"/tmp/\".concat(filename);\n}\nexport function encode(_x, _x2, _x3, _x4) {\n  return _encode.apply(this, arguments);\n}\nfunction _encode() {\n  _encode = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, writer, options, url) {\n    var batches, chunks, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, batch, tmpInputFilename, tmpOutputFilename, outputFilename, response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!writer.encode) {\n              _context.next = 4;\n              break;\n            }\n            _context.next = 3;\n            return writer.encode(data, options);\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n          case 4:\n            if (!writer.encodeSync) {\n              _context.next = 6;\n              break;\n            }\n            return _context.abrupt(\"return\", writer.encodeSync(data, options));\n          case 6:\n            if (!writer.encodeText) {\n              _context.next = 12;\n              break;\n            }\n            _context.t0 = new TextEncoder();\n            _context.next = 10;\n            return writer.encodeText(data, options);\n          case 10:\n            _context.t1 = _context.sent;\n            return _context.abrupt(\"return\", _context.t0.encode.call(_context.t0, _context.t1));\n          case 12:\n            if (!writer.encodeInBatches) {\n              _context.next = 51;\n              break;\n            }\n            batches = encodeInBatches(data, writer, options);\n            chunks = [];\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 17;\n            _iterator = _asyncIterator(batches);\n          case 19:\n            _context.next = 21;\n            return _iterator.next();\n          case 21:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 25;\n            return _step.value;\n          case 25:\n            _value = _context.sent;\n            if (_iteratorNormalCompletion) {\n              _context.next = 32;\n              break;\n            }\n            batch = _value;\n            chunks.push(batch);\n          case 29:\n            _iteratorNormalCompletion = true;\n            _context.next = 19;\n            break;\n          case 32:\n            _context.next = 38;\n            break;\n          case 34:\n            _context.prev = 34;\n            _context.t2 = _context[\"catch\"](17);\n            _didIteratorError = true;\n            _iteratorError = _context.t2;\n          case 38:\n            _context.prev = 38;\n            _context.prev = 39;\n            if (!(!_iteratorNormalCompletion && _iterator[\"return\"] != null)) {\n              _context.next = 43;\n              break;\n            }\n            _context.next = 43;\n            return _iterator[\"return\"]();\n          case 43:\n            _context.prev = 43;\n            if (!_didIteratorError) {\n              _context.next = 46;\n              break;\n            }\n            throw _iteratorError;\n          case 46:\n            return _context.finish(43);\n          case 47:\n            return _context.finish(38);\n          case 48:\n            _context.next = 50;\n            return concatenateArrayBuffers.apply(void 0, chunks);\n          case 50:\n            return _context.abrupt(\"return\", _context.sent);\n          case 51:\n            if (!(!isBrowser && writer.encodeURLtoURL)) {\n              _context.next = 63;\n              break;\n            }\n            tmpInputFilename = getTemporaryFilename('input');\n            _context.next = 55;\n            return writeFile(tmpInputFilename, data);\n          case 55:\n            tmpOutputFilename = getTemporaryFilename('output');\n            _context.next = 58;\n            return encodeURLtoURL(tmpInputFilename, tmpOutputFilename, writer, options);\n          case 58:\n            outputFilename = _context.sent;\n            _context.next = 61;\n            return fetchFile(outputFilename);\n          case 61:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response.arrayBuffer());\n          case 63:\n            throw new Error('Writer could not encode data');\n          case 64:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[17, 34, 38, 48], [39,, 43, 47]]);\n  }));\n  return _encode.apply(this, arguments);\n}\nexport function encodeSync(data, writer, options, url) {\n  if (writer.encodeSync) {\n    return writer.encodeSync(data, options);\n  }\n  throw new Error('Writer could not synchronously encode data');\n}\nexport function encodeText(_x5, _x6, _x7, _x8) {\n  return _encodeText.apply(this, arguments);\n}\nfunction _encodeText() {\n  _encodeText = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(data, writer, options, url) {\n    var arrayBuffer;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(writer.text && writer.encodeText)) {\n              _context2.next = 4;\n              break;\n            }\n            _context2.next = 3;\n            return writer.encodeText(data, options);\n          case 3:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 4:\n            if (!(writer.text && (writer.encode || writer.encodeInBatches))) {\n              _context2.next = 9;\n              break;\n            }\n            _context2.next = 7;\n            return encode(data, writer, options);\n          case 7:\n            arrayBuffer = _context2.sent;\n            return _context2.abrupt(\"return\", new TextDecoder().decode(arrayBuffer));\n          case 9:\n            throw new Error('Writer could not encode data as text');\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _encodeText.apply(this, arguments);\n}\nexport function encodeInBatches(data, writer, options, url) {\n  if (writer.encodeInBatches) {\n    var dataIterator = getIterator(data);\n    return writer.encodeInBatches(dataIterator, options);\n  }\n  throw new Error('Writer could not encode data in batches');\n}\nfunction getIterator(data) {\n  var dataIterator = [{\n    table: data,\n    start: 0,\n    end: data.length\n  }];\n  return dataIterator;\n}\nexport function encodeURLtoURL(_x9, _x10, _x11, _x12) {\n  return _encodeURLtoURL.apply(this, arguments);\n}\nfunction _encodeURLtoURL() {\n  _encodeURLtoURL = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(inputUrl, outputUrl, writer, options) {\n    var outputFilename;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            inputUrl = resolvePath(inputUrl);\n            outputUrl = resolvePath(outputUrl);\n            if (!(isBrowser || !writer.encodeURLtoURL)) {\n              _context3.next = 4;\n              break;\n            }\n            throw new Error();\n          case 4:\n            _context3.next = 6;\n            return writer.encodeURLtoURL(inputUrl, outputUrl, options);\n          case 6:\n            outputFilename = _context3.sent;\n            return _context3.abrupt(\"return\", outputFilename);\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _encodeURLtoURL.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/api/encode.js"],"names":["concatenateArrayBuffers","resolvePath","isBrowser","writeFile","fetchFile","getTemporaryFilename","filename","encode","data","writer","options","url","encodeSync","encodeText","TextEncoder","encodeInBatches","batches","chunks","batch","push","encodeURLtoURL","tmpInputFilename","tmpOutputFilename","outputFilename","response","arrayBuffer","Error","text","TextDecoder","decode","dataIterator","getIterator","table","start","end","length","inputUrl","outputUrl"],"mappings":"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","sourcesContent":["/* global TextEncoder, TextDecoder */\n/** @typedef {import('./encode')} types */\nimport {concatenateArrayBuffers, resolvePath} from '@loaders.gl/loader-utils';\nimport {isBrowser} from '@loaders.gl/loader-utils';\nimport {writeFile} from '../fetch/write-file';\nimport {fetchFile} from '../fetch/fetch-file';\n\n/**\n * @param {string} filename\n * @returns {string}\n * @todo Move to utils\n */\nfunction getTemporaryFilename(filename) {\n  return `/tmp/${filename}`;\n}\n\nexport async function encode(data, writer, options, url) {\n  if (writer.encode) {\n    return await writer.encode(data, options);\n  }\n\n  if (writer.encodeSync) {\n    return writer.encodeSync(data, options);\n  }\n\n  if (writer.encodeText) {\n    return new TextEncoder().encode(await writer.encodeText(data, options));\n  }\n\n  if (writer.encodeInBatches) {\n    // Create an iterator representing the data\n    // TODO - Assumes this is a table\n    const batches = encodeInBatches(data, writer, options);\n\n    // Concatenate the output\n    const chunks = [];\n    for await (const batch of batches) {\n      chunks.push(batch);\n    }\n    // @ts-ignore\n    return await concatenateArrayBuffers(...chunks);\n  }\n\n  if (!isBrowser && writer.encodeURLtoURL) {\n    // TODO - how to generate filenames with correct extensions?\n    const tmpInputFilename = getTemporaryFilename('input');\n    await writeFile(tmpInputFilename, data);\n\n    const tmpOutputFilename = getTemporaryFilename('output');\n\n    const outputFilename = await encodeURLtoURL(\n      tmpInputFilename,\n      tmpOutputFilename,\n      writer,\n      options\n    );\n\n    const response = await fetchFile(outputFilename);\n    return response.arrayBuffer();\n  }\n\n  throw new Error('Writer could not encode data');\n}\n\nexport function encodeSync(data, writer, options, url) {\n  if (writer.encodeSync) {\n    return writer.encodeSync(data, options);\n  }\n  throw new Error('Writer could not synchronously encode data');\n}\n\nexport async function encodeText(data, writer, options, url) {\n  if (writer.text && writer.encodeText) {\n    return await writer.encodeText(data, options);\n  }\n\n  if (writer.text && (writer.encode || writer.encodeInBatches)) {\n    const arrayBuffer = await encode(data, writer, options);\n    return new TextDecoder().decode(arrayBuffer);\n  }\n\n  throw new Error('Writer could not encode data as text');\n}\n\nexport function encodeInBatches(data, writer, options, url) {\n  if (writer.encodeInBatches) {\n    const dataIterator = getIterator(data);\n    return writer.encodeInBatches(dataIterator, options);\n  }\n  // TODO -fall back to atomic encode?\n  throw new Error('Writer could not encode data in batches');\n}\n\nfunction getIterator(data) {\n  // TODO - this is an unacceptable hack!!!\n  const dataIterator = [{table: data, start: 0, end: data.length}];\n  return dataIterator;\n}\n\nexport async function encodeURLtoURL(inputUrl, outputUrl, writer, options) {\n  inputUrl = resolvePath(inputUrl);\n  outputUrl = resolvePath(outputUrl);\n  if (isBrowser || !writer.encodeURLtoURL) {\n    throw new Error();\n  }\n  const outputFilename = await writer.encodeURLtoURL(inputUrl, outputUrl, options);\n  return outputFilename;\n}\n"]},"metadata":{},"sourceType":"module"}