{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { Layer, project32, picking, log } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport PathTesselator from './path-tesselator';\nimport vs from './path-layer-vertex.glsl';\nimport fs from './path-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  widthUnits: 'meters',\n  widthScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  widthMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  widthMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  rounded: false,\n  miterLimit: {\n    type: 'number',\n    min: 0,\n    value: 4\n  },\n  billboard: false,\n  _pathType: null,\n  getPath: {\n    type: 'accessor',\n    value: function value(object) {\n      return object.path;\n    }\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getWidth: {\n    type: 'accessor',\n    value: 1\n  }\n};\nvar ATTRIBUTE_TRANSITION = {\n  enter: function enter(value, chunk) {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\nvar PathLayer = function (_Layer) {\n  _inherits(PathLayer, _Layer);\n  function PathLayer() {\n    _classCallCheck(this, PathLayer);\n    return _possibleConstructorReturn(this, _getPrototypeOf(PathLayer).apply(this, arguments));\n  }\n  _createClass(PathLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _get(_getPrototypeOf(PathLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var _this = this;\n      var noAlloc = true;\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        positions: {\n          size: 3,\n          vertexOffset: 1,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: ATTRIBUTE_TRANSITION,\n          accessor: 'getPath',\n          update: this.calculatePositions,\n          noAlloc: noAlloc,\n          shaderAttributes: {\n            instanceLeftPositions: {\n              vertexOffset: 0\n            },\n            instanceStartPositions: {\n              vertexOffset: 1\n            },\n            instanceEndPositions: {\n              vertexOffset: 2\n            },\n            instanceRightPositions: {\n              vertexOffset: 3\n            }\n          }\n        },\n        instanceTypes: {\n          size: 1,\n          type: 5121,\n          update: this.calculateSegmentTypes,\n          noAlloc: noAlloc\n        },\n        instanceStrokeWidths: {\n          size: 1,\n          accessor: 'getWidth',\n          transition: ATTRIBUTE_TRANSITION,\n          defaultValue: 1\n        },\n        instanceColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          accessor: 'getColor',\n          transition: ATTRIBUTE_TRANSITION,\n          defaultValue: DEFAULT_COLOR\n        },\n        instancePickingColors: {\n          size: 3,\n          type: 5121,\n          accessor: function accessor(object, _ref) {\n            var index = _ref.index,\n              value = _ref.target;\n            return _this.encodePickingColor(object && object.__source ? object.__source.index : index, value);\n          }\n        }\n      });\n      this.setState({\n        pathTesselator: new PathTesselator({\n          fp64: this.use64bitPositions()\n        })\n      });\n      if (this.props.getDashArray && !this.props.extensions.length) {\n        log.removed('getDashArray', 'PathStyleExtension')();\n      }\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref2) {\n      var oldProps = _ref2.oldProps,\n        props = _ref2.props,\n        changeFlags = _ref2.changeFlags;\n      _get(_getPrototypeOf(PathLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n      var attributeManager = this.getAttributeManager();\n      var geometryChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath);\n      if (geometryChanged) {\n        var pathTesselator = this.state.pathTesselator;\n        var buffers = props.data.attributes || {};\n        pathTesselator.updateGeometry({\n          data: props.data,\n          geometryBuffer: buffers.getPath,\n          buffers: buffers,\n          normalize: !props._pathType,\n          loop: props._pathType === 'loop',\n          getGeometry: props.getPath,\n          positionFormat: props.positionFormat,\n          wrapLongitude: props.wrapLongitude,\n          resolution: this.context.viewport.resolution,\n          dataChanged: changeFlags.dataChanged\n        });\n        this.setState({\n          numInstances: pathTesselator.instanceCount,\n          startIndices: pathTesselator.vertexStarts\n        });\n        if (!changeFlags.dataChanged) {\n          attributeManager.invalidateAll();\n        }\n      }\n      if (changeFlags.extensionsChanged) {\n        var gl = this.context.gl;\n        if (this.state.model) {\n          this.state.model[\"delete\"]();\n        }\n        this.setState({\n          model: this._getModel(gl)\n        });\n        attributeManager.invalidateAll();\n      }\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(params) {\n      var info = _get(_getPrototypeOf(PathLayer.prototype), \"getPickingInfo\", this).call(this, params);\n      var index = info.index;\n      var data = this.props.data;\n      if (data[0] && data[0].__source) {\n        info.object = data.find(function (d) {\n          return d.__source.index === index;\n        });\n      }\n      return info;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref3) {\n      var uniforms = _ref3.uniforms;\n      var viewport = this.context.viewport;\n      var _this$props = this.props,\n        rounded = _this$props.rounded,\n        billboard = _this$props.billboard,\n        miterLimit = _this$props.miterLimit,\n        widthUnits = _this$props.widthUnits,\n        widthScale = _this$props.widthScale,\n        widthMinPixels = _this$props.widthMinPixels,\n        widthMaxPixels = _this$props.widthMaxPixels;\n      var widthMultiplier = widthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n      this.state.model.setUniforms(Object.assign({}, uniforms, {\n        jointType: Number(rounded),\n        billboard: billboard,\n        widthScale: widthScale * widthMultiplier,\n        miterLimit: miterLimit,\n        widthMinPixels: widthMinPixels,\n        widthMaxPixels: widthMaxPixels\n      })).draw();\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var SEGMENT_INDICES = [0, 1, 2, 1, 4, 2, 1, 3, 4, 3, 5, 4];\n      var SEGMENT_POSITIONS = [0, 0, 0, -1, 0, 1, 1, -1, 1, 1, 1, 0];\n      return new Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 4,\n          attributes: {\n            indices: new Uint16Array(SEGMENT_INDICES),\n            positions: {\n              value: new Float32Array(SEGMENT_POSITIONS),\n              size: 2\n            }\n          }\n        }),\n        isInstanced: true\n      }));\n    }\n  }, {\n    key: \"calculatePositions\",\n    value: function calculatePositions(attribute) {\n      var pathTesselator = this.state.pathTesselator;\n      attribute.startIndices = pathTesselator.vertexStarts;\n      attribute.value = pathTesselator.get('positions');\n    }\n  }, {\n    key: \"calculateSegmentTypes\",\n    value: function calculateSegmentTypes(attribute) {\n      var pathTesselator = this.state.pathTesselator;\n      attribute.startIndices = pathTesselator.vertexStarts;\n      attribute.value = pathTesselator.get('segmentTypes');\n    }\n  }, {\n    key: \"wrapLongitude\",\n    get: function get() {\n      return false;\n    }\n  }]);\n  return PathLayer;\n}(Layer);\nexport { PathLayer as default };\nPathLayer.layerName = 'PathLayer';\nPathLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/path-layer/path-layer.js"],"names":["Layer","project32","picking","log","Model","Geometry","PathTesselator","vs","fs","DEFAULT_COLOR","defaultProps","widthUnits","widthScale","type","min","value","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","rounded","miterLimit","billboard","_pathType","getPath","object","path","getColor","getWidth","ATTRIBUTE_TRANSITION","enter","chunk","length","subarray","PathLayer","modules","noAlloc","attributeManager","getAttributeManager","addInstanced","positions","size","vertexOffset","fp64","use64bitPositions","transition","accessor","update","calculatePositions","shaderAttributes","instanceLeftPositions","instanceStartPositions","instanceEndPositions","instanceRightPositions","instanceTypes","calculateSegmentTypes","instanceStrokeWidths","defaultValue","instanceColors","props","colorFormat","normalized","instancePickingColors","index","target","encodePickingColor","__source","setState","pathTesselator","getDashArray","extensions","removed","oldProps","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","state","buffers","data","attributes","updateGeometry","geometryBuffer","normalize","loop","getGeometry","positionFormat","wrapLongitude","resolution","context","viewport","numInstances","instanceCount","startIndices","vertexStarts","invalidateAll","extensionsChanged","gl","model","_getModel","params","info","find","d","uniforms","widthMultiplier","metersPerPixel","setUniforms","assign","jointType","draw","SEGMENT_INDICES","SEGMENT_POSITIONS","getShaders","id","geometry","drawMode","indices","Uint16Array","Float32Array","isInstanced","attribute","get","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport PathTesselator from './path-tesselator';\n\nimport vs from './path-layer-vertex.glsl';\nimport fs from './path-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  widthUnits: 'meters',\n  widthScale: {type: 'number', min: 0, value: 1}, // stroke width in meters\n  widthMinPixels: {type: 'number', min: 0, value: 0}, //  min stroke width in pixels\n  widthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max stroke width in pixels\n  rounded: false,\n  miterLimit: {type: 'number', min: 0, value: 4},\n  billboard: false,\n  // `loop` or `open`\n  _pathType: null,\n\n  getPath: {type: 'accessor', value: object => object.path},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1}\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class PathLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]}); // 'project' module added by default.\n  }\n\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const noAlloc = true;\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      positions: {\n        size: 3,\n        // Start filling buffer from 1 vertex in\n        vertexOffset: 1,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPath',\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          instanceLeftPositions: {\n            vertexOffset: 0\n          },\n          instanceStartPositions: {\n            vertexOffset: 1\n          },\n          instanceEndPositions: {\n            vertexOffset: 2\n          },\n          instanceRightPositions: {\n            vertexOffset: 3\n          }\n        }\n      },\n      instanceTypes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculateSegmentTypes,\n        noAlloc\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getWidth',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: 1\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        accessor: 'getColor',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: DEFAULT_COLOR\n      },\n      instancePickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value)\n      }\n    });\n    /* eslint-enable max-len */\n\n    this.setState({\n      pathTesselator: new PathTesselator({\n        fp64: this.use64bitPositions()\n      })\n    });\n\n    if (this.props.getDashArray && !this.props.extensions.length) {\n      log.removed('getDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const attributeManager = this.getAttributeManager();\n\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath));\n\n    if (geometryChanged) {\n      const {pathTesselator} = this.state;\n      const buffers = props.data.attributes || {};\n\n      pathTesselator.updateGeometry({\n        data: props.data,\n        geometryBuffer: buffers.getPath,\n        buffers,\n        normalize: !props._pathType,\n        loop: props._pathType === 'loop',\n        getGeometry: props.getPath,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        dataChanged: changeFlags.dataChanged\n      });\n      this.setState({\n        numInstances: pathTesselator.instanceCount,\n        startIndices: pathTesselator.vertexStarts\n      });\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        attributeManager.invalidateAll();\n      }\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      attributeManager.invalidateAll();\n    }\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const {data} = this.props;\n\n    if (data[0] && data[0].__source) {\n      // data is wrapped\n      info.object = data.find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  draw({uniforms}) {\n    const {viewport} = this.context;\n    const {\n      rounded,\n      billboard,\n      miterLimit,\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels\n    } = this.props;\n\n    const widthMultiplier = widthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n\n    this.state.model\n      .setUniforms(\n        Object.assign({}, uniforms, {\n          jointType: Number(rounded),\n          billboard,\n          widthScale: widthScale * widthMultiplier,\n          miterLimit,\n          widthMinPixels,\n          widthMaxPixels\n        })\n      )\n      .draw();\n  }\n\n  _getModel(gl) {\n    /*\n     *       _\n     *        \"-_ 1                   3                       5\n     *     _     \"o---------------------o-------------------_-o\n     *       -   / \"\"--..__              '.             _.-' /\n     *   _     \"@- - - - - \"\"--..__- - - - x - - - -_.@'    /\n     *    \"-_  /                   \"\"--..__ '.  _,-` :     /\n     *       \"o----------------------------\"\"-o'    :     /\n     *      0,2                            4 / '.  :     /\n     *                                      /   '.:     /\n     *                                     /     :'.   /\n     *                                    /     :  ', /\n     *                                   /     :     o\n     */\n\n    // prettier-ignore\n    const SEGMENT_INDICES = [\n      // start corner\n      0, 1, 2,\n      // body\n      1, 4, 2,\n      1, 3, 4,\n      // end corner\n      3, 5, 4\n    ];\n\n    // [0] position on segment - 0: start, 1: end\n    // [1] side of path - -1: left, 0: center (joint), 1: right\n    // prettier-ignore\n    const SEGMENT_POSITIONS = [\n      // bevel start corner\n      0, 0,\n      // start inner corner\n      0, -1,\n      // start outer corner\n      0, 1,\n      // end inner corner\n      1, -1,\n      // end outer corner\n      1, 1,\n      // bevel end corner\n      1, 0\n    ];\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLES,\n          attributes: {\n            indices: new Uint16Array(SEGMENT_INDICES),\n            positions: {value: new Float32Array(SEGMENT_POSITIONS), size: 2}\n          }\n        }),\n        isInstanced: true\n      })\n    );\n  }\n\n  calculatePositions(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('positions');\n  }\n\n  calculateSegmentTypes(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('segmentTypes');\n  }\n}\n\nPathLayer.layerName = 'PathLayer';\nPathLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}