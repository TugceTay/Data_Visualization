{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _taggedTemplateLiteral2 = _interopRequireDefault(require(\"@babel/runtime/helpers/taggedTemplateLiteral\"));\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _styledComponents = _interopRequireDefault(require(\"styled-components\"));\nvar _reactIntl = require(\"react-intl\");\nvar _localization = require(\"../../../localization\");\nvar _styledComponents2 = require(\"../../common/styled-components\");\nvar _datasetTag = _interopRequireDefault(require(\"../common/dataset-tag\"));\nvar _tooltipChicklet = _interopRequireDefault(require(\"./tooltip-config/tooltip-chicklet\"));\nvar _switch = _interopRequireDefault(require(\"../../common/switch\"));\nvar _itemSelector = _interopRequireDefault(require(\"../../common/item-selector/item-selector\"));\nvar _tooltip = require(\"../../../constants/tooltip\");\nvar _fieldSelector = _interopRequireDefault(require(\"../../common/field-selector\"));\nvar _templateObject, _templateObject2, _templateObject3;\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar TooltipConfigWrapper = _styledComponents[\"default\"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2[\"default\"])([\"\\n  .item-selector > div > div {\\n    overflow: visible;\\n  }\\n\"])));\nvar ButtonWrapper = _styledComponents[\"default\"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2[\"default\"])([\"\\n  display: inherit;\\n  padding: 0;\\n\\n  .button.clear-all {\\n    background: transparent;\\n    color: \", \";\\n    margin: 0 0 0 8px;\\n    padding: 0;\\n\\n    &:hover {\\n      color: \", \";\\n    }\\n  }\\n\"])), function (props) {\n  return props.theme.subtextColor;\n}, function (props) {\n  return props.theme.textColor;\n});\nvar CompareSwitchWrapper = _styledComponents[\"default\"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2[\"default\"])([\"\\n  color: \", \";\\n  display: flex;\\n  font-size: \", \";\\n  justify-content: space-between;\\n  line-height: 11px;\\n  margin-bottom: 8px;\\n\"])), function (props) {\n  return props.theme.labelColor;\n}, function (props) {\n  return props.theme.inputFontSize;\n});\nTooltipConfigFactory.deps = [_datasetTag[\"default\"], _fieldSelector[\"default\"]];\nfunction TooltipConfigFactory(DatasetTag, FieldSelector) {\n  var DatasetTooltipConfig = function DatasetTooltipConfig(_ref) {\n    var config = _ref.config,\n      onChange = _ref.onChange,\n      dataset = _ref.dataset;\n    var dataId = dataset.id;\n    return /*#__PURE__*/_react[\"default\"].createElement(_styledComponents2.SidePanelSection, {\n      key: dataId\n    }, /*#__PURE__*/_react[\"default\"].createElement(_styledComponents2.SBFlexboxNoMargin, null, /*#__PURE__*/_react[\"default\"].createElement(DatasetTag, {\n      dataset: dataset\n    }), Boolean(config.fieldsToShow[dataId].length) && /*#__PURE__*/_react[\"default\"].createElement(ButtonWrapper, null, /*#__PURE__*/_react[\"default\"].createElement(_styledComponents2.Button, {\n      className: \"clear-all\",\n      onClick: function onClick() {\n        var newConfig = _objectSpread(_objectSpread({}, config), {}, {\n          fieldsToShow: _objectSpread(_objectSpread({}, config.fieldsToShow), {}, (0, _defineProperty2[\"default\"])({}, dataId, []))\n        });\n        onChange(newConfig);\n      },\n      width: \"54px\",\n      secondary: true\n    }, /*#__PURE__*/_react[\"default\"].createElement(_localization.FormattedMessage, {\n      id: \"fieldSelector.clearAll\"\n    })))), /*#__PURE__*/_react[\"default\"].createElement(FieldSelector, {\n      fields: dataset.fields,\n      value: config.fieldsToShow[dataId],\n      onSelect: function onSelect(selected) {\n        var newConfig = _objectSpread(_objectSpread({}, config), {}, {\n          fieldsToShow: _objectSpread(_objectSpread({}, config.fieldsToShow), {}, (0, _defineProperty2[\"default\"])({}, dataId, selected.map(function (f) {\n            return config.fieldsToShow[dataId].find(function (tooltipField) {\n              return tooltipField.name === f.name;\n            }) || {\n              name: f.name,\n              // default initial tooltip is null\n              format: null\n            };\n          })))\n        });\n        onChange(newConfig);\n      },\n      closeOnSelect: false,\n      multiSelect: true,\n      inputTheme: \"secondary\",\n      CustomChickletComponent: (0, _tooltipChicklet[\"default\"])(dataId, config, onChange, dataset.fields)\n    }));\n  };\n  var TooltipConfig = function TooltipConfig(_ref2) {\n    var config = _ref2.config,\n      datasets = _ref2.datasets,\n      _onChange = _ref2.onChange,\n      intl = _ref2.intl;\n    return /*#__PURE__*/_react[\"default\"].createElement(TooltipConfigWrapper, null, Object.keys(config.fieldsToShow).map(function (dataId) {\n      return /*#__PURE__*/_react[\"default\"].createElement(DatasetTooltipConfig, {\n        key: dataId,\n        config: config,\n        onChange: _onChange,\n        dataset: datasets[dataId]\n      });\n    }), /*#__PURE__*/_react[\"default\"].createElement(CompareSwitchWrapper, null, /*#__PURE__*/_react[\"default\"].createElement(_localization.FormattedMessage, {\n      id: \"compare.modeLabel\"\n    }), /*#__PURE__*/_react[\"default\"].createElement(_switch[\"default\"], {\n      checked: config.compareMode,\n      id: \"compare-mode-toggle\",\n      onChange: function onChange() {\n        var newConfig = _objectSpread(_objectSpread({}, config), {}, {\n          compareMode: !config.compareMode\n        });\n        _onChange(newConfig);\n      },\n      secondary: true\n    })), /*#__PURE__*/_react[\"default\"].createElement(_styledComponents2.SidePanelSection, null, /*#__PURE__*/_react[\"default\"].createElement(_styledComponents2.PanelLabel, null, /*#__PURE__*/_react[\"default\"].createElement(_localization.FormattedMessage, {\n      id: \"compare.typeLabel\"\n    })), /*#__PURE__*/_react[\"default\"].createElement(_itemSelector[\"default\"], {\n      disabled: !config.compareMode,\n      displayOption: function displayOption(d) {\n        return intl.formatMessage({\n          id: \"compare.types.\".concat(d)\n        });\n      },\n      selectedItems: config.compareType,\n      options: Object.values(_tooltip.COMPARE_TYPES),\n      multiSelect: false,\n      searchable: false,\n      inputTheme: 'secondary',\n      getOptionValue: function getOptionValue(d) {\n        return d;\n      },\n      onChange: function onChange(option) {\n        var newConfig = _objectSpread(_objectSpread({}, config), {}, {\n          compareType: option\n        });\n        _onChange(newConfig);\n      }\n    })));\n  };\n  return (0, _reactIntl.injectIntl)(TooltipConfig);\n}\nvar _default = TooltipConfigFactory;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../../../../src/components/side-panel/interaction-panel/tooltip-config.js"],"names":["TooltipConfigWrapper","styled","div","ButtonWrapper","props","theme","subtextColor","textColor","CompareSwitchWrapper","labelColor","inputFontSize","TooltipConfigFactory","deps","DatasetTagFactory","FieldSelectorFactory","DatasetTag","FieldSelector","DatasetTooltipConfig","config","onChange","dataset","dataId","id","Boolean","fieldsToShow","length","newConfig","fields","map","find","tooltipField","name","f","format","TooltipConfig","datasets","intl","keys","compareMode","formatMessage","d","compareType","Object","values","COMPARE_TYPES","option"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport {injectIntl} from 'react-intl';\nimport {FormattedMessage} from 'localization';\n\nimport {\n  SidePanelSection,\n  SBFlexboxNoMargin,\n  Button,\n  PanelLabel\n} from 'components/common/styled-components';\nimport DatasetTagFactory from 'components/side-panel/common/dataset-tag';\nimport TooltipChickletFactory from './tooltip-config/tooltip-chicklet';\nimport Switch from 'components/common/switch';\nimport ItemSelector from 'components/common/item-selector/item-selector';\nimport {COMPARE_TYPES} from 'constants/tooltip';\nimport FieldSelectorFactory from '../../common/field-selector';\n\nconst TooltipConfigWrapper = styled.div`\n  .item-selector > div > div {\n    overflow: visible;\n  }\n`;\n\nconst ButtonWrapper = styled.div`\n  display: inherit;\n  padding: 0;\n\n  .button.clear-all {\n    background: transparent;\n    color: ${props => props.theme.subtextColor};\n    margin: 0 0 0 8px;\n    padding: 0;\n\n    &:hover {\n      color: ${props => props.theme.textColor};\n    }\n  }\n`;\n\nconst CompareSwitchWrapper = styled.div`\n  color: ${props => props.theme.labelColor};\n  display: flex;\n  font-size: ${props => props.theme.inputFontSize};\n  justify-content: space-between;\n  line-height: 11px;\n  margin-bottom: 8px;\n`;\n\nTooltipConfigFactory.deps = [DatasetTagFactory, FieldSelectorFactory];\nfunction TooltipConfigFactory(DatasetTag, FieldSelector) {\n  const DatasetTooltipConfig = ({config, onChange, dataset}) => {\n    const dataId = dataset.id;\n    return (\n      <SidePanelSection key={dataId}>\n        <SBFlexboxNoMargin>\n          <DatasetTag dataset={dataset} />\n          {Boolean(config.fieldsToShow[dataId].length) && (\n            <ButtonWrapper>\n              <Button\n                className=\"clear-all\"\n                onClick={() => {\n                  const newConfig = {\n                    ...config,\n                    fieldsToShow: {\n                      ...config.fieldsToShow,\n                      [dataId]: []\n                    }\n                  };\n                  onChange(newConfig);\n                }}\n                width=\"54px\"\n                secondary\n              >\n                <FormattedMessage id=\"fieldSelector.clearAll\" />\n              </Button>\n            </ButtonWrapper>\n          )}\n        </SBFlexboxNoMargin>\n        <FieldSelector\n          fields={dataset.fields}\n          value={config.fieldsToShow[dataId]}\n          onSelect={selected => {\n            const newConfig = {\n              ...config,\n              fieldsToShow: {\n                ...config.fieldsToShow,\n                [dataId]: selected.map(\n                  f =>\n                    config.fieldsToShow[dataId].find(\n                      tooltipField => tooltipField.name === f.name\n                    ) || {\n                      name: f.name,\n                      // default initial tooltip is null\n                      format: null\n                    }\n                )\n              }\n            };\n            onChange(newConfig);\n          }}\n          closeOnSelect={false}\n          multiSelect\n          inputTheme=\"secondary\"\n          CustomChickletComponent={TooltipChickletFactory(dataId, config, onChange, dataset.fields)}\n        />\n      </SidePanelSection>\n    );\n  };\n\n  const TooltipConfig = ({config, datasets, onChange, intl}) => {\n    return (\n      <TooltipConfigWrapper>\n        {Object.keys(config.fieldsToShow).map(dataId => (\n          <DatasetTooltipConfig\n            key={dataId}\n            config={config}\n            onChange={onChange}\n            dataset={datasets[dataId]}\n          />\n        ))}\n        <CompareSwitchWrapper>\n          <FormattedMessage id=\"compare.modeLabel\" />\n          <Switch\n            checked={config.compareMode}\n            id=\"compare-mode-toggle\"\n            onChange={() => {\n              const newConfig = {\n                ...config,\n                compareMode: !config.compareMode\n              };\n              onChange(newConfig);\n            }}\n            secondary\n          />\n        </CompareSwitchWrapper>\n        <SidePanelSection>\n          <PanelLabel>\n            <FormattedMessage id=\"compare.typeLabel\" />\n          </PanelLabel>\n          <ItemSelector\n            disabled={!config.compareMode}\n            displayOption={d =>\n              intl.formatMessage({\n                id: `compare.types.${d}`\n              })\n            }\n            selectedItems={config.compareType}\n            options={Object.values(COMPARE_TYPES)}\n            multiSelect={false}\n            searchable={false}\n            inputTheme={'secondary'}\n            getOptionValue={d => d}\n            onChange={option => {\n              const newConfig = {\n                ...config,\n                compareType: option\n              };\n              onChange(newConfig);\n            }}\n          />\n        </SidePanelSection>\n      </TooltipConfigWrapper>\n    );\n  };\n\n  return injectIntl(TooltipConfig);\n}\n\nexport default TooltipConfigFactory;\n"]},"metadata":{},"sourceType":"script"}