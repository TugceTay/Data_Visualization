{"ast":null,"code":"import { getStringFromArrayBuffer } from './parse-utils';\nvar SIZEOF_UINT32 = 4;\nexport function parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset) {\n  var view = new DataView(arrayBuffer);\n  tile.header = tile.header || {};\n  tile.header.featureTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n  tile.header.featureTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n  tile.header.batchTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n  tile.header.batchTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n  return byteOffset;\n}\nexport function parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options) {\n  byteOffset = parse3DTileFeatureTable(tile, arrayBuffer, byteOffset, options);\n  byteOffset = parse3DTileBatchTable(tile, arrayBuffer, byteOffset, options);\n  return byteOffset;\n}\nfunction parse3DTileFeatureTable(tile, arrayBuffer, byteOffset, options) {\n  var _tile$header = tile.header,\n    featureTableJsonByteLength = _tile$header.featureTableJsonByteLength,\n    featureTableBinaryByteLength = _tile$header.featureTableBinaryByteLength;\n  tile.featureTableJson = {\n    BATCH_LENGTH: 0\n  };\n  if (featureTableJsonByteLength > 0) {\n    var featureTableString = getStringFromArrayBuffer(arrayBuffer, byteOffset, featureTableJsonByteLength);\n    tile.featureTableJson = JSON.parse(featureTableString);\n  }\n  byteOffset += featureTableJsonByteLength;\n  tile.featureTableBinary = new Uint8Array(arrayBuffer, byteOffset, featureTableBinaryByteLength);\n  byteOffset += featureTableBinaryByteLength;\n  return byteOffset;\n}\nfunction parse3DTileBatchTable(tile, arrayBuffer, byteOffset, options) {\n  var _tile$header2 = tile.header,\n    batchTableJsonByteLength = _tile$header2.batchTableJsonByteLength,\n    batchTableBinaryByteLength = _tile$header2.batchTableBinaryByteLength;\n  if (batchTableJsonByteLength > 0) {\n    var batchTableString = getStringFromArrayBuffer(arrayBuffer, byteOffset, batchTableJsonByteLength);\n    tile.batchTableJson = JSON.parse(batchTableString);\n    byteOffset += batchTableJsonByteLength;\n    if (batchTableBinaryByteLength > 0) {\n      tile.batchTableBinary = new Uint8Array(arrayBuffer, byteOffset, batchTableBinaryByteLength);\n      tile.batchTableBinary = new Uint8Array(tile.batchTableBinary);\n      byteOffset += batchTableBinaryByteLength;\n    }\n  }\n  return byteOffset;\n}","map":{"version":3,"sources":["../../../../../src/lib/parsers/helpers/parse-3d-tile-tables.js"],"names":["getStringFromArrayBuffer","SIZEOF_UINT32","parse3DTileTablesHeaderSync","tile","arrayBuffer","byteOffset","view","DataView","header","featureTableJsonByteLength","getUint32","featureTableBinaryByteLength","batchTableJsonByteLength","batchTableBinaryByteLength","parse3DTileTablesSync","options","parse3DTileFeatureTable","parse3DTileBatchTable","featureTableJson","BATCH_LENGTH","featureTableString","JSON","parse","featureTableBinary","Uint8Array","batchTableString","batchTableJson","batchTableBinary"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {getStringFromArrayBuffer} from './parse-utils';\n\nconst SIZEOF_UINT32 = 4;\n\n// eslint-disable-next-line max-statements\nexport function parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset) {\n  const view = new DataView(arrayBuffer);\n\n  tile.header = tile.header || {};\n\n  tile.header.featureTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  tile.header.featureTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  tile.header.batchTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  tile.header.batchTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  return byteOffset;\n}\n\nexport function parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options) {\n  byteOffset = parse3DTileFeatureTable(tile, arrayBuffer, byteOffset, options);\n  byteOffset = parse3DTileBatchTable(tile, arrayBuffer, byteOffset, options);\n  return byteOffset;\n}\n\nfunction parse3DTileFeatureTable(tile, arrayBuffer, byteOffset, options) {\n  const {featureTableJsonByteLength, featureTableBinaryByteLength} = tile.header;\n\n  tile.featureTableJson = {\n    BATCH_LENGTH: 0\n  };\n\n  if (featureTableJsonByteLength > 0) {\n    const featureTableString = getStringFromArrayBuffer(\n      arrayBuffer,\n      byteOffset,\n      featureTableJsonByteLength\n    );\n    tile.featureTableJson = JSON.parse(featureTableString);\n  }\n  byteOffset += featureTableJsonByteLength;\n\n  tile.featureTableBinary = new Uint8Array(arrayBuffer, byteOffset, featureTableBinaryByteLength);\n  byteOffset += featureTableBinaryByteLength;\n\n  /*\n  const featureTable = parseFeatureTable(featureTableJson, featureTableBinary);\n\n  const batchLength = featureTable.getGlobalProperty('BATCH_LENGTH');\n  featureTable.featuresLength = batchLength;\n  */\n\n  return byteOffset;\n}\n\nfunction parse3DTileBatchTable(tile, arrayBuffer, byteOffset, options) {\n  const {batchTableJsonByteLength, batchTableBinaryByteLength} = tile.header;\n\n  if (batchTableJsonByteLength > 0) {\n    const batchTableString = getStringFromArrayBuffer(\n      arrayBuffer,\n      byteOffset,\n      batchTableJsonByteLength\n    );\n    tile.batchTableJson = JSON.parse(batchTableString);\n    byteOffset += batchTableJsonByteLength;\n\n    if (batchTableBinaryByteLength > 0) {\n      // Has a batch table binary\n      tile.batchTableBinary = new Uint8Array(arrayBuffer, byteOffset, batchTableBinaryByteLength);\n      // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n      tile.batchTableBinary = new Uint8Array(tile.batchTableBinary);\n\n      byteOffset += batchTableBinaryByteLength;\n    }\n  }\n\n  return byteOffset;\n}\n"]},"metadata":{},"sourceType":"module"}