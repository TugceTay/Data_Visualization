{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport assert from '../utils/assert';\nimport { DataType } from '../types/arrow-like/type';\nvar Field = function () {\n  function Field(name) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var nullable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var metadata = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Map();\n    _classCallCheck(this, Field);\n    assert(typeof name === 'string');\n    assert(!type || type instanceof DataType);\n    assert(typeof nullable === 'boolean');\n    assert(!metadata || _typeof(metadata) === 'object');\n    this.name = name;\n    this.type = type;\n    this.nullable = nullable;\n    this.metadata = metadata;\n  }\n  _createClass(Field, [{\n    key: \"clone\",\n    value: function clone() {\n      return new Field(this.name, this.type, this.nullable, this.metadata);\n    }\n  }, {\n    key: \"compareTo\",\n    value: function compareTo(other) {\n      return this.name === other.name && this.type === other.type && this.nullable === other.nullable && this.metadata === other.metadata;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.type).concat(this.nullable ? ', nullable' : '').concat(this.metadata ? \", metadata: \".concat(this.metadata) : '');\n    }\n  }, {\n    key: \"typeId\",\n    get: function get() {\n      return this.type && this.type.typeId;\n    }\n  }]);\n  return Field;\n}();\nexport { Field as default };","map":{"version":3,"sources":["../../../../src/lib/schema/field.js"],"names":["assert","DataType","Field","name","type","nullable","metadata","Map","typeId","other"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,iBAAnB;AACA,SAAQC,QAAR,QAAuB,0BAAvB;IAOqBC,K;EACnB,SAAA,KAAA,CAAYC,IAAZ,EAAuE;IAAA,IAArDC,IAAqD,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAA9C,IAA8C;IAAA,IAAxCC,QAAwC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAA7B,KAA6B;IAAA,IAAtBC,QAAsB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAX,IAAIC,GAAJ,EAAW;IAAA,eAAA,CAAA,IAAA,EAAA,KAAA,CAAA;IACrEP,MAAM,CAAC,OAAOG,IAAP,KAAgB,QAAjB,CAANH;IACAA,MAAM,CAAC,CAACI,IAAD,IAASA,IAAI,YAAYH,QAA1B,CAAND;IACAA,MAAM,CAAC,OAAOK,QAAP,KAAoB,SAArB,CAANL;IACAA,MAAM,CAAC,CAACM,QAAD,IAAa,OAAA,CAAOA,QAAP,CAAA,KAAoB,QAAlC,CAANN;IAEA,IAAA,CAAKG,IAAL,GAAYA,IAAZ;IACA,IAAA,CAAKC,IAAL,GAAYA,IAAZ;IACA,IAAA,CAAKC,QAAL,GAAgBA,QAAhB;IACA,IAAA,CAAKC,QAAL,GAAgBA,QAAhB;EACD;;;4BAMO;MACN,OAAO,IAAIJ,KAAJ,CAAU,IAAA,CAAKC,IAAf,EAAqB,IAAA,CAAKC,IAA1B,EAAgC,IAAA,CAAKC,QAArC,EAA+C,IAAA,CAAKC,QAApD,CAAP;IACD;;;8BAESG,K,EAAO;MACf,OACE,IAAA,CAAKN,IAAL,KAAcM,KAAK,CAACN,IAApB,IACA,IAAA,CAAKC,IAAL,KAAcK,KAAK,CAACL,IADpB,IAEA,IAAA,CAAKC,QAAL,KAAkBI,KAAK,CAACJ,QAFxB,IAGA,IAAA,CAAKC,QAAL,KAAkBG,KAAK,CAACH,QAJ1B;IAMD;;;+BAEU;MACT,OAAA,EAAA,CAAA,MAAA,CAAU,IAAA,CAAKF,IAAf,CAAA,CAAA,MAAA,CAAsB,IAAA,CAAKC,QAAL,GAAgB,YAAhB,GAA+B,EAArD,CAAA,CAAA,MAAA,CACE,IAAA,CAAKC,QAAL,GAAA,cAAA,CAAA,MAAA,CAA+B,IAAA,CAAKA,QAApC,CAAA,GAAiD,EADnD,CAAA;IAGD;;;wBArBY;MACX,OAAO,IAAA,CAAKF,IAAL,IAAa,IAAA,CAAKA,IAAL,CAAUI,MAA9B;IACD;;;;SAfkBN,K","sourcesContent":["import assert from '../utils/assert';\nimport {DataType} from '../types/arrow-like/type';\n\n// ArrowJS `Schema` API-compatible class for row-based tables (returned from `DataTable`)\n// https://loaders.gl/arrowjs/docs/api-reference/field\n// A field holds name, nullable, and metadata information about a table \"column\"\n// A Schema is essentially a list of fields\n\nexport default class Field {\n  constructor(name, type = null, nullable = false, metadata = new Map()) {\n    assert(typeof name === 'string');\n    assert(!type || type instanceof DataType);\n    assert(typeof nullable === 'boolean');\n    assert(!metadata || typeof metadata === 'object');\n\n    this.name = name;\n    this.type = type;\n    this.nullable = nullable;\n    this.metadata = metadata;\n  }\n\n  get typeId() {\n    return this.type && this.type.typeId;\n  }\n\n  clone() {\n    return new Field(this.name, this.type, this.nullable, this.metadata);\n  }\n\n  compareTo(other) {\n    return (\n      this.name === other.name &&\n      this.type === other.type &&\n      this.nullable === other.nullable &&\n      this.metadata === other.metadata\n    );\n  }\n\n  toString() {\n    return `${this.type}${this.nullable ? ', nullable' : ''}${\n      this.metadata ? `, metadata: ${this.metadata}` : ''\n    }`;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}