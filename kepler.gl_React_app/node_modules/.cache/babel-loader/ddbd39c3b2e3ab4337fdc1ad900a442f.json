{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.pointVisConfigs = exports.iconOptionalColumns = exports.iconRequiredColumns = exports.iconAccessor = exports.iconPosAccessor = exports.SVG_ICON_URL = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _window = _interopRequireDefault(require(\"global/window\"));\nvar _extensions = require(\"@deck.gl/extensions\");\nvar _svgIconLayer = _interopRequireDefault(require(\"../../deckgl-layers/svg-icon-layer/svg-icon-layer\"));\nvar _iconLayerIcon = _interopRequireDefault(require(\"./icon-layer-icon\"));\nvar _defaultSettings = require(\"../../constants/default-settings\");\nvar _iconInfoModal = _interopRequireDefault(require(\"./icon-info-modal\"));\nvar _baseLayer = _interopRequireDefault(require(\"../base-layer\"));\nvar _layerTextLabel = require(\"../layer-text-label\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar brushingExtension = new _extensions.BrushingExtension();\nvar SVG_ICON_URL = \"\".concat(_defaultSettings.CLOUDFRONT, \"/icons/svg-icons.json\");\nexports.SVG_ICON_URL = SVG_ICON_URL;\nvar iconPosAccessor = function iconPosAccessor(_ref) {\n  var lat = _ref.lat,\n    lng = _ref.lng,\n    altitude = _ref.altitude;\n  return function (dc) {\n    return function (d) {\n      return [dc.valueAt(d.index, lng.fieldIdx), dc.valueAt(d.index, lat.fieldIdx), (altitude === null || altitude === void 0 ? void 0 : altitude.fieldIdx) > -1 ? dc.valueAt(d.index, altitude.fieldIdx) : 0];\n    };\n  };\n};\nexports.iconPosAccessor = iconPosAccessor;\nvar iconAccessor = function iconAccessor(_ref2) {\n  var icon = _ref2.icon;\n  return function (dc) {\n    return function (d) {\n      return dc.valueAt(d.index, icon.fieldIdx);\n    };\n  };\n};\nexports.iconAccessor = iconAccessor;\nvar iconRequiredColumns = ['lat', 'lng', 'icon'];\nexports.iconRequiredColumns = iconRequiredColumns;\nvar iconOptionalColumns = ['altitude'];\nexports.iconOptionalColumns = iconOptionalColumns;\nvar pointVisConfigs = {\n  radius: 'radius',\n  fixedRadius: 'fixedRadius',\n  opacity: 'opacity',\n  colorRange: 'colorRange',\n  radiusRange: 'radiusRange'\n};\nexports.pointVisConfigs = pointVisConfigs;\nfunction flatterIconPositions(icon) {\n  // had to flip y, since @luma modal has changed\n  return icon.mesh.cells.reduce(function (prev, cell) {\n    cell.forEach(function (p) {\n      prev.push.apply(prev, [icon.mesh.positions[p][0], -icon.mesh.positions[p][1], icon.mesh.positions[p][2]]);\n    });\n    return prev;\n  }, []);\n}\nvar IconLayer = /*#__PURE__*/function (_Layer) {\n  (0, _inherits2[\"default\"])(IconLayer, _Layer);\n  var _super = _createSuper(IconLayer);\n  function IconLayer() {\n    var _this;\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    (0, _classCallCheck2[\"default\"])(this, IconLayer);\n    _this = _super.call(this, props);\n    _this.registerVisConfig(pointVisConfigs);\n    _this.getPositionAccessor = function (dataContainer) {\n      return iconPosAccessor(_this.config.columns)(dataContainer);\n    };\n    _this.getIconAccessor = function (dataContainer) {\n      return iconAccessor(_this.config.columns)(dataContainer);\n    }; // prepare layer info modal\n\n    _this._layerInfoModal = (0, _iconInfoModal[\"default\"])();\n    _this.iconGeometry = props.iconGeometry || null;\n    _this.getSvgIcons();\n    return _this;\n  }\n  (0, _createClass2[\"default\"])(IconLayer, [{\n    key: \"type\",\n    get: function get() {\n      return 'icon';\n    }\n  }, {\n    key: \"requiredLayerColumns\",\n    get: function get() {\n      return iconRequiredColumns;\n    }\n  }, {\n    key: \"optionalColumns\",\n    get: function get() {\n      return iconOptionalColumns;\n    }\n  }, {\n    key: \"columnPairs\",\n    get: function get() {\n      return this.defaultPointColumnPairs;\n    }\n  }, {\n    key: \"layerIcon\",\n    get: function get() {\n      return _iconLayerIcon[\"default\"];\n    }\n  }, {\n    key: \"visualChannels\",\n    get: function get() {\n      return {\n        color: _objectSpread(_objectSpread({}, (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(IconLayer.prototype), \"visualChannels\", this).color), {}, {\n          accessor: 'getFillColor',\n          defaultValue: function defaultValue(config) {\n            return config.color;\n          }\n        }),\n        size: _objectSpread(_objectSpread({}, (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(IconLayer.prototype), \"visualChannels\", this).size), {}, {\n          property: 'radius',\n          range: 'radiusRange',\n          channelScaleType: 'radius',\n          accessor: 'getRadius',\n          defaultValue: 1\n        })\n      };\n    }\n  }, {\n    key: \"layerInfoModal\",\n    get: function get() {\n      return {\n        id: 'iconInfo',\n        template: this._layerInfoModal,\n        modalProps: {\n          title: 'modal.iconInfo.title'\n        }\n      };\n    }\n  }, {\n    key: \"getSvgIcons\",\n    value: function getSvgIcons() {\n      var _this2 = this;\n      var fetchConfig = {\n        method: 'GET',\n        mode: 'cors',\n        cache: 'no-cache'\n      };\n      if (_window[\"default\"].fetch) {\n        _window[\"default\"].fetch(SVG_ICON_URL, fetchConfig).then(function (response) {\n          return response.json();\n        }).then(function () {\n          var parsed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var _parsed$svgIcons = parsed.svgIcons,\n            svgIcons = _parsed$svgIcons === void 0 ? [] : _parsed$svgIcons;\n          _this2.iconGeometry = svgIcons.reduce(function (accu, curr) {\n            return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2[\"default\"])({}, curr.id, flatterIconPositions(curr)));\n          }, {});\n          _this2._layerInfoModal = (0, _iconInfoModal[\"default\"])(svgIcons);\n        });\n      }\n    }\n  }, {\n    key: \"calculateDataAttribute\",\n    value: function calculateDataAttribute(_ref3, getPosition) {\n      var dataContainer = _ref3.dataContainer,\n        filteredIndex = _ref3.filteredIndex;\n      var getIcon = this.getIconAccessor(dataContainer);\n      var data = [];\n      for (var i = 0; i < filteredIndex.length; i++) {\n        var index = filteredIndex[i];\n        var rowIndex = {\n          index: index\n        };\n        var pos = getPosition(rowIndex);\n        var icon = getIcon(rowIndex); // if doesn't have point lat or lng, do not add the point\n        // deck.gl can't handle position = null\n\n        if (pos.every(Number.isFinite) && typeof icon === 'string') {\n          data.push({\n            index: index,\n            icon: icon\n          });\n        }\n      }\n      return data;\n    }\n  }, {\n    key: \"formatLayerData\",\n    value: function formatLayerData(datasets, oldLayerData) {\n      var textLabel = this.config.textLabel;\n      var _datasets$this$config = datasets[this.config.dataId],\n        gpuFilter = _datasets$this$config.gpuFilter,\n        dataContainer = _datasets$this$config.dataContainer;\n      var getPosition = this.getPositionAccessor(dataContainer);\n      var _this$updateData = this.updateData(datasets, oldLayerData),\n        data = _this$updateData.data,\n        triggerChanged = _this$updateData.triggerChanged; // get all distinct characters in the text labels\n\n      var textLabels = (0, _layerTextLabel.formatTextLabelData)({\n        textLabel: textLabel,\n        triggerChanged: triggerChanged,\n        oldLayerData: oldLayerData,\n        data: data,\n        dataContainer: dataContainer\n      });\n      var accessors = this.getAttributeAccessors({\n        dataContainer: dataContainer\n      });\n      return _objectSpread({\n        data: data,\n        getPosition: getPosition,\n        getFilterValue: gpuFilter.filterValueAccessor(dataContainer)(),\n        textLabels: textLabels\n      }, accessors);\n    }\n  }, {\n    key: \"updateLayerMeta\",\n    value: function updateLayerMeta(dataContainer, getPosition) {\n      var bounds = this.getPointsBounds(dataContainer, getPosition);\n      this.updateMeta({\n        bounds: bounds\n      });\n    }\n  }, {\n    key: \"renderLayer\",\n    value: function renderLayer(opts) {\n      var _this$config$columns$,\n        _this3 = this;\n      var data = opts.data,\n        gpuFilter = opts.gpuFilter,\n        objectHovered = opts.objectHovered,\n        mapState = opts.mapState,\n        interactionConfig = opts.interactionConfig;\n      var radiusScale = this.getRadiusScaleByZoom(mapState);\n      var layerProps = _objectSpread({\n        radiusScale: radiusScale\n      }, this.config.visConfig.fixedRadius ? {} : {\n        radiusMaxPixels: 500\n      });\n      var updateTriggers = _objectSpread({\n        getPosition: this.config.columns,\n        getFilterValue: gpuFilter.filterValueUpdateTriggers\n      }, this.getVisualChannelUpdateTriggers());\n      var defaultLayerProps = this.getDefaultDeckLayerProps(opts);\n      var brushingProps = this.getBrushingExtensionProps(interactionConfig);\n      var getPixelOffset = (0, _layerTextLabel.getTextOffsetByRadius)(radiusScale, data.getRadius, mapState);\n      var extensions = [].concat((0, _toConsumableArray2[\"default\"])(defaultLayerProps.extensions), [brushingExtension]); // shared Props between layer and label layer\n\n      var sharedProps = _objectSpread({\n        getFilterValue: data.getFilterValue,\n        extensions: extensions,\n        filterRange: defaultLayerProps.filterRange\n      }, brushingProps);\n      var labelLayers = (0, _toConsumableArray2[\"default\"])(this.renderTextLabelLayer({\n        getPosition: data.getPosition,\n        sharedProps: sharedProps,\n        getPixelOffset: getPixelOffset,\n        updateTriggers: updateTriggers\n      }, opts));\n      var hoveredObject = this.hasHoveredObject(objectHovered);\n      var parameters = {\n        // icons will be flat on the map when the altitude column is not used\n        depthTest: ((_this$config$columns$ = this.config.columns.altitude) === null || _this$config$columns$ === void 0 ? void 0 : _this$config$columns$.fieldIdx) > -1\n      };\n      return !this.iconGeometry ? [] : [new _svgIconLayer[\"default\"](_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, defaultLayerProps), brushingProps), layerProps), data), {}, {\n        parameters: parameters,\n        getIconGeometry: function getIconGeometry(id) {\n          return _this3.iconGeometry[id];\n        },\n        // update triggers\n        updateTriggers: updateTriggers,\n        extensions: extensions\n      }))].concat((0, _toConsumableArray2[\"default\"])(hoveredObject ? [new _svgIconLayer[\"default\"](_objectSpread(_objectSpread(_objectSpread({}, this.getDefaultHoverLayerProps()), layerProps), {}, {\n        data: [hoveredObject],\n        parameters: parameters,\n        getPosition: data.getPosition,\n        getRadius: data.getRadius,\n        getFillColor: this.config.highlightColor,\n        getIconGeometry: function getIconGeometry(id) {\n          return _this3.iconGeometry[id];\n        }\n      }))] : []), (0, _toConsumableArray2[\"default\"])(labelLayers));\n    }\n  }], [{\n    key: \"findDefaultLayerProps\",\n    value: function findDefaultLayerProps(_ref4) {\n      var _ref4$fieldPairs = _ref4.fieldPairs,\n        fieldPairs = _ref4$fieldPairs === void 0 ? [] : _ref4$fieldPairs,\n        _ref4$fields = _ref4.fields,\n        fields = _ref4$fields === void 0 ? [] : _ref4$fields;\n      var notFound = {\n        props: []\n      };\n      if (!fieldPairs.length || !fields.length) {\n        return notFound;\n      }\n      var iconFields = fields.filter(function (_ref5) {\n        var name = _ref5.name;\n        return name.replace(/[_,.]+/g, ' ').trim().split(' ').some(function (seg) {\n          return _defaultSettings.ICON_FIELDS.icon.some(function (t) {\n            return t.includes(seg);\n          });\n        });\n      });\n      if (!iconFields.length) {\n        return notFound;\n      } // create icon layers for first point pair\n\n      var ptPair = fieldPairs[0];\n      var props = iconFields.map(function (iconField) {\n        return {\n          label: iconField.name.replace(/[_,.]+/g, ' ').trim(),\n          columns: {\n            lat: ptPair.pair.lat,\n            lng: ptPair.pair.lng,\n            icon: {\n              value: iconField.name,\n              fieldIdx: iconField.fieldIdx\n            }\n          },\n          isVisible: true\n        };\n      });\n      return {\n        props: props\n      };\n    }\n  }]);\n  return IconLayer;\n}(_baseLayer[\"default\"]);\nexports[\"default\"] = IconLayer;","map":{"version":3,"sources":["../../../src/layers/icon-layer/icon-layer.js"],"names":["brushingExtension","BrushingExtension","SVG_ICON_URL","CLOUDFRONT","iconPosAccessor","lat","lng","altitude","dc","valueAt","d","index","fieldIdx","iconAccessor","icon","iconRequiredColumns","iconOptionalColumns","pointVisConfigs","radius","fixedRadius","opacity","colorRange","radiusRange","flatterIconPositions","mesh","cells","reduce","prev","cell","forEach","push","positions","p","IconLayer","Layer","props","registerVisConfig","getPositionAccessor","config","columns","dataContainer","getIconAccessor","_layerInfoModal","iconGeometry","getSvgIcons","defaultPointColumnPairs","IconLayerIcon","color","accessor","defaultValue","size","property","range","channelScaleType","id","template","modalProps","title","fetchConfig","method","mode","cache","window","fetch","then","response","json","parsed","svgIcons","accu","curr","fieldPairs","fields","notFound","length","iconFields","filter","name","replace","trim","split","some","t","includes","seg","ptPair","map","label","iconField","pair","value","isVisible","filteredIndex","getPosition","getIcon","data","i","rowIndex","pos","every","Number","isFinite","datasets","oldLayerData","textLabel","gpuFilter","dataId","triggerChanged","updateData","textLabels","accessors","getAttributeAccessors","getFilterValue","filterValueAccessor","bounds","getPointsBounds","updateMeta","opts","objectHovered","mapState","interactionConfig","radiusScale","getRadiusScaleByZoom","layerProps","visConfig","radiusMaxPixels","updateTriggers","filterValueUpdateTriggers","getVisualChannelUpdateTriggers","defaultLayerProps","getDefaultDeckLayerProps","brushingProps","getBrushingExtensionProps","getPixelOffset","getRadius","extensions","sharedProps","filterRange","labelLayers","renderTextLabelLayer","hoveredObject","hasHoveredObject","parameters","depthTest","SvgIconLayer","getIconGeometry","getDefaultHoverLayerProps","getFillColor","highlightColor"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport window from 'global/window';\nimport {BrushingExtension} from '@deck.gl/extensions';\n\nimport SvgIconLayer from 'deckgl-layers/svg-icon-layer/svg-icon-layer';\nimport IconLayerIcon from './icon-layer-icon';\nimport {ICON_FIELDS, CLOUDFRONT} from 'constants/default-settings';\nimport IconInfoModalFactory from './icon-info-modal';\nimport Layer from '../base-layer';\nimport {getTextOffsetByRadius, formatTextLabelData} from '../layer-text-label';\n\nconst brushingExtension = new BrushingExtension();\n\nexport const SVG_ICON_URL = `${CLOUDFRONT}/icons/svg-icons.json`;\n\nexport const iconPosAccessor = ({lat, lng, altitude}) => dc => d => [\n  dc.valueAt(d.index, lng.fieldIdx),\n  dc.valueAt(d.index, lat.fieldIdx),\n  altitude?.fieldIdx > -1 ? dc.valueAt(d.index, altitude.fieldIdx) : 0\n];\n\nexport const iconAccessor = ({icon}) => dc => d => dc.valueAt(d.index, icon.fieldIdx);\n\nexport const iconRequiredColumns = ['lat', 'lng', 'icon'];\nexport const iconOptionalColumns = ['altitude'];\n\nexport const pointVisConfigs = {\n  radius: 'radius',\n  fixedRadius: 'fixedRadius',\n  opacity: 'opacity',\n  colorRange: 'colorRange',\n  radiusRange: 'radiusRange'\n};\n\nfunction flatterIconPositions(icon) {\n  // had to flip y, since @luma modal has changed\n  return icon.mesh.cells.reduce((prev, cell) => {\n    cell.forEach(p => {\n      prev.push(\n        ...[icon.mesh.positions[p][0], -icon.mesh.positions[p][1], icon.mesh.positions[p][2]]\n      );\n    });\n    return prev;\n  }, []);\n}\n\nexport default class IconLayer extends Layer {\n  constructor(props = {}) {\n    super(props);\n\n    this.registerVisConfig(pointVisConfigs);\n    this.getPositionAccessor = dataContainer => iconPosAccessor(this.config.columns)(dataContainer);\n    this.getIconAccessor = dataContainer => iconAccessor(this.config.columns)(dataContainer);\n\n    // prepare layer info modal\n    this._layerInfoModal = IconInfoModalFactory();\n    this.iconGeometry = props.iconGeometry || null;\n    this.getSvgIcons();\n  }\n\n  get type() {\n    return 'icon';\n  }\n\n  get requiredLayerColumns() {\n    return iconRequiredColumns;\n  }\n\n  get optionalColumns() {\n    return iconOptionalColumns;\n  }\n\n  get columnPairs() {\n    return this.defaultPointColumnPairs;\n  }\n\n  get layerIcon() {\n    return IconLayerIcon;\n  }\n\n  get visualChannels() {\n    return {\n      color: {\n        ...super.visualChannels.color,\n        accessor: 'getFillColor',\n        defaultValue: config => config.color\n      },\n      size: {\n        ...super.visualChannels.size,\n        property: 'radius',\n        range: 'radiusRange',\n        channelScaleType: 'radius',\n        accessor: 'getRadius',\n        defaultValue: 1\n      }\n    };\n  }\n\n  get layerInfoModal() {\n    return {\n      id: 'iconInfo',\n      template: this._layerInfoModal,\n      modalProps: {\n        title: 'modal.iconInfo.title'\n      }\n    };\n  }\n\n  getSvgIcons() {\n    const fetchConfig = {\n      method: 'GET',\n      mode: 'cors',\n      cache: 'no-cache'\n    };\n\n    if (window.fetch) {\n      window\n        .fetch(SVG_ICON_URL, fetchConfig)\n        .then(response => response.json())\n        .then((parsed = {}) => {\n          const {svgIcons = []} = parsed;\n          this.iconGeometry = svgIcons.reduce(\n            (accu, curr) => ({\n              ...accu,\n              [curr.id]: flatterIconPositions(curr)\n            }),\n            {}\n          );\n\n          this._layerInfoModal = IconInfoModalFactory(svgIcons);\n        });\n    }\n  }\n\n  static findDefaultLayerProps({fieldPairs = [], fields = []}) {\n    const notFound = {props: []};\n    if (!fieldPairs.length || !fields.length) {\n      return notFound;\n    }\n\n    const iconFields = fields.filter(({name}) =>\n      name\n        .replace(/[_,.]+/g, ' ')\n        .trim()\n        .split(' ')\n        .some(seg => ICON_FIELDS.icon.some(t => t.includes(seg)))\n    );\n\n    if (!iconFields.length) {\n      return notFound;\n    }\n\n    // create icon layers for first point pair\n    const ptPair = fieldPairs[0];\n\n    const props = iconFields.map(iconField => ({\n      label: iconField.name.replace(/[_,.]+/g, ' ').trim(),\n      columns: {\n        lat: ptPair.pair.lat,\n        lng: ptPair.pair.lng,\n        icon: {\n          value: iconField.name,\n          fieldIdx: iconField.fieldIdx\n        }\n      },\n      isVisible: true\n    }));\n\n    return {props};\n  }\n\n  calculateDataAttribute({dataContainer, filteredIndex}, getPosition) {\n    const getIcon = this.getIconAccessor(dataContainer);\n    const data = [];\n\n    for (let i = 0; i < filteredIndex.length; i++) {\n      const index = filteredIndex[i];\n      const rowIndex = {index};\n      const pos = getPosition(rowIndex);\n      const icon = getIcon(rowIndex);\n\n      // if doesn't have point lat or lng, do not add the point\n      // deck.gl can't handle position = null\n      if (pos.every(Number.isFinite) && typeof icon === 'string') {\n        data.push({\n          index,\n          icon\n        });\n      }\n    }\n\n    return data;\n  }\n\n  formatLayerData(datasets, oldLayerData) {\n    const {textLabel} = this.config;\n    const {gpuFilter, dataContainer} = datasets[this.config.dataId];\n\n    const getPosition = this.getPositionAccessor(dataContainer);\n\n    const {data, triggerChanged} = this.updateData(datasets, oldLayerData);\n\n    // get all distinct characters in the text labels\n    const textLabels = formatTextLabelData({\n      textLabel,\n      triggerChanged,\n      oldLayerData,\n      data,\n      dataContainer\n    });\n\n    const accessors = this.getAttributeAccessors({dataContainer});\n\n    return {\n      data,\n      getPosition,\n      getFilterValue: gpuFilter.filterValueAccessor(dataContainer)(),\n      textLabels,\n      ...accessors\n    };\n  }\n\n  updateLayerMeta(dataContainer, getPosition) {\n    const bounds = this.getPointsBounds(dataContainer, getPosition);\n    this.updateMeta({bounds});\n  }\n\n  renderLayer(opts) {\n    const {data, gpuFilter, objectHovered, mapState, interactionConfig} = opts;\n\n    const radiusScale = this.getRadiusScaleByZoom(mapState);\n\n    const layerProps = {\n      radiusScale,\n      ...(this.config.visConfig.fixedRadius ? {} : {radiusMaxPixels: 500})\n    };\n\n    const updateTriggers = {\n      getPosition: this.config.columns,\n      getFilterValue: gpuFilter.filterValueUpdateTriggers,\n      ...this.getVisualChannelUpdateTriggers()\n    };\n\n    const defaultLayerProps = this.getDefaultDeckLayerProps(opts);\n    const brushingProps = this.getBrushingExtensionProps(interactionConfig);\n    const getPixelOffset = getTextOffsetByRadius(radiusScale, data.getRadius, mapState);\n    const extensions = [...defaultLayerProps.extensions, brushingExtension];\n\n    // shared Props between layer and label layer\n    const sharedProps = {\n      getFilterValue: data.getFilterValue,\n      extensions,\n      filterRange: defaultLayerProps.filterRange,\n      ...brushingProps\n    };\n\n    const labelLayers = [\n      ...this.renderTextLabelLayer(\n        {\n          getPosition: data.getPosition,\n          sharedProps,\n          getPixelOffset,\n          updateTriggers\n        },\n        opts\n      )\n    ];\n    const hoveredObject = this.hasHoveredObject(objectHovered);\n\n    const parameters = {\n      // icons will be flat on the map when the altitude column is not used\n      depthTest: this.config.columns.altitude?.fieldIdx > -1\n    };\n\n    return !this.iconGeometry\n      ? []\n      : [\n          new SvgIconLayer({\n            ...defaultLayerProps,\n            ...brushingProps,\n            ...layerProps,\n            ...data,\n            parameters,\n            getIconGeometry: id => this.iconGeometry[id],\n\n            // update triggers\n            updateTriggers,\n            extensions\n          }),\n\n          ...(hoveredObject\n            ? [\n                new SvgIconLayer({\n                  ...this.getDefaultHoverLayerProps(),\n                  ...layerProps,\n                  data: [hoveredObject],\n                  parameters,\n                  getPosition: data.getPosition,\n                  getRadius: data.getRadius,\n                  getFillColor: this.config.highlightColor,\n                  getIconGeometry: id => this.iconGeometry[id]\n                })\n              ]\n            : []),\n\n          // text label layer\n          ...labelLayers\n        ];\n  }\n}\n"]},"metadata":{},"sourceType":"script"}