{"ast":null,"code":"import WEBGL_LIMITS from './webgl-limits-table';\nimport { isWebGL2, getContextDebugInfo } from '@luma.gl/gltools';\nexport function getContextLimits(gl) {\n  gl.luma = gl.luma || {};\n  if (!gl.luma.limits) {\n    gl.luma.limits = {};\n    gl.luma.webgl1MinLimits = {};\n    gl.luma.webgl2MinLimits = {};\n    const isWebgl2 = isWebGL2(gl);\n    for (const parameter in WEBGL_LIMITS) {\n      const limit = WEBGL_LIMITS[parameter];\n      const webgl1MinLimit = limit.gl1;\n      const webgl2MinLimit = 'gl2' in limit ? limit.gl2 : limit.gl1;\n      const minLimit = isWebgl2 ? webgl2MinLimit : webgl1MinLimit;\n      const limitNotAvailable = 'gl2' in limit && !isWebgl2 || 'extension' in limit && !gl.getExtension(limit.extension);\n      const value = limitNotAvailable ? minLimit : gl.getParameter(parameter);\n      gl.luma.limits[parameter] = value;\n      gl.luma.webgl1MinLimits[parameter] = webgl1MinLimit;\n      gl.luma.webgl2MinLimits[parameter] = webgl2MinLimit;\n    }\n  }\n  return gl.luma.limits;\n}\nexport function getGLContextInfo(gl) {\n  gl.luma = gl.luma || {};\n  const info = getContextDebugInfo(gl);\n  if (!gl.luma.info) {\n    gl.luma.info = {\n      [37445]: info.vendor,\n      [37446]: info.renderer,\n      [7936]: info.vendorMasked,\n      [7937]: info.rendererMasked,\n      [7938]: info.version,\n      [35724]: info.shadingLanguageVersion\n    };\n  }\n  return gl.luma.info;\n}\nexport function getContextInfo(gl) {\n  return Object.assign(getContextDebugInfo(gl), {\n    limits: getContextLimits(gl),\n    info: getGLContextInfo(gl),\n    webgl1MinLimits: gl.luma.webgl1MinLimits,\n    webgl2MinLimits: gl.luma.webgl2MinLimits\n  });\n}","map":{"version":3,"sources":["../../../src/features/limits.js"],"names":["WEBGL_LIMITS","isWebGL2","getContextDebugInfo","getContextLimits","gl","luma","limits","webgl1MinLimits","webgl2MinLimits","isWebgl2","parameter","limit","webgl1MinLimit","gl1","webgl2MinLimit","gl2","minLimit","limitNotAvailable","getExtension","extension","value","getParameter","getGLContextInfo","info","vendor","renderer","vendorMasked","rendererMasked","version","shadingLanguageVersion","getContextInfo","assign"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\n\nimport WEBGL_LIMITS from './webgl-limits-table';\nimport {isWebGL2, getContextDebugInfo} from '@luma.gl/gltools';\n\nexport function getContextLimits(gl) {\n  gl.luma = gl.luma || {};\n\n  if (!gl.luma.limits) {\n    gl.luma.limits = {};\n    gl.luma.webgl1MinLimits = {};\n    gl.luma.webgl2MinLimits = {};\n\n    const isWebgl2 = isWebGL2(gl);\n\n    // WEBGL limits\n    for (const parameter in WEBGL_LIMITS) {\n      const limit = WEBGL_LIMITS[parameter];\n\n      const webgl1MinLimit = limit.gl1;\n      const webgl2MinLimit = 'gl2' in limit ? limit.gl2 : limit.gl1;\n      const minLimit = isWebgl2 ? webgl2MinLimit : webgl1MinLimit;\n\n      // Check if we can query for this limit\n      const limitNotAvailable =\n        ('gl2' in limit && !isWebgl2) ||\n        // @ts-ignore\n        ('extension' in limit && !gl.getExtension(limit.extension));\n\n      const value = limitNotAvailable ? minLimit : gl.getParameter(parameter);\n      gl.luma.limits[parameter] = value;\n      gl.luma.webgl1MinLimits[parameter] = webgl1MinLimit;\n      gl.luma.webgl2MinLimits[parameter] = webgl2MinLimit;\n    }\n  }\n\n  return gl.luma.limits;\n}\n\nexport function getGLContextInfo(gl) {\n  gl.luma = gl.luma || {};\n\n  const info = getContextDebugInfo(gl);\n  if (!gl.luma.info) {\n    gl.luma.info = {\n      [GL.UNMASKED_VENDOR_WEBGL]: info.vendor,\n      [GL.UNMASKED_RENDERER_WEBGL]: info.renderer,\n      [GL.VENDOR]: info.vendorMasked,\n      [GL.RENDERER]: info.rendererMasked,\n      [GL.VERSION]: info.version,\n      [GL.SHADING_LANGUAGE_VERSION]: info.shadingLanguageVersion\n    };\n  }\n\n  return gl.luma.info;\n}\n\nexport function getContextInfo(gl) {\n  return Object.assign(getContextDebugInfo(gl), {\n    limits: getContextLimits(gl),\n    info: getGLContextInfo(gl),\n    webgl1MinLimits: gl.luma.webgl1MinLimits,\n    webgl2MinLimits: gl.luma.webgl2MinLimits\n  });\n}\n"]},"metadata":{},"sourceType":"module"}