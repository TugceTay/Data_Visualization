{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { Layer, project32, gouraudLighting, picking } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './point-cloud-layer-vertex.glsl';\nimport fs from './point-cloud-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar DEFAULT_NORMAL = [0, 0, 1];\nvar defaultProps = {\n  sizeUnits: 'pixels',\n  pointSize: {\n    type: 'number',\n    min: 0,\n    value: 10\n  },\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getNormal: {\n    type: 'accessor',\n    value: DEFAULT_NORMAL\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  material: true,\n  radiusPixels: {\n    deprecatedFor: 'pointSize'\n  }\n};\nfunction normalizeData(data) {\n  var header = data.header,\n    attributes = data.attributes;\n  if (!header || !attributes) {\n    return;\n  }\n  data.length = header.vertexCount;\n  if (attributes.POSITION) {\n    attributes.instancePositions = attributes.POSITION;\n  }\n  if (attributes.NORMAL) {\n    attributes.instanceNormals = attributes.NORMAL;\n  }\n  if (attributes.COLOR_0) {\n    attributes.instanceColors = attributes.COLOR_0;\n  }\n}\nvar PointCloudLayer = function (_Layer) {\n  _inherits(PointCloudLayer, _Layer);\n  function PointCloudLayer() {\n    _classCallCheck(this, PointCloudLayer);\n    return _possibleConstructorReturn(this, _getPrototypeOf(PointCloudLayer).apply(this, arguments));\n  }\n  _createClass(PointCloudLayer, [{\n    key: \"getShaders\",\n    value: function getShaders(id) {\n      return _get(_getPrototypeOf(PointCloudLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, gouraudLighting, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.getAttributeManager().addInstanced({\n        instancePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getPosition'\n        },\n        instanceNormals: {\n          size: 3,\n          transition: true,\n          accessor: 'getNormal',\n          defaultValue: DEFAULT_NORMAL\n        },\n        instanceColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: true,\n          accessor: 'getColor',\n          defaultValue: DEFAULT_COLOR\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n        oldProps = _ref.oldProps,\n        changeFlags = _ref.changeFlags;\n      _get(_getPrototypeOf(PointCloudLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n      if (changeFlags.extensionsChanged) {\n        var gl = this.context.gl;\n        if (this.state.model) {\n          this.state.model[\"delete\"]();\n        }\n        this.setState({\n          model: this._getModel(gl)\n        });\n        this.getAttributeManager().invalidateAll();\n      }\n      if (changeFlags.dataChanged) {\n        normalizeData(props.data);\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var viewport = this.context.viewport;\n      var _this$props = this.props,\n        pointSize = _this$props.pointSize,\n        sizeUnits = _this$props.sizeUnits;\n      var sizeMultiplier = sizeUnits === 'meters' ? 1 / viewport.metersPerPixel : 1;\n      this.state.model.setUniforms(Object.assign({}, uniforms, {\n        radiusPixels: pointSize * sizeMultiplier\n      })).draw();\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var positions = [];\n      for (var i = 0; i < 3; i++) {\n        var angle = i / 3 * Math.PI * 2;\n        positions.push(Math.cos(angle) * 2, Math.sin(angle) * 2, 0);\n      }\n      return new Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 4,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true\n      }));\n    }\n  }]);\n  return PointCloudLayer;\n}(Layer);\nexport { PointCloudLayer as default };\nPointCloudLayer.layerName = 'PointCloudLayer';\nPointCloudLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/point-cloud-layer/point-cloud-layer.js"],"names":["Layer","project32","gouraudLighting","picking","Model","Geometry","vs","fs","DEFAULT_COLOR","DEFAULT_NORMAL","defaultProps","sizeUnits","pointSize","type","min","value","getPosition","x","position","getNormal","getColor","material","radiusPixels","deprecatedFor","normalizeData","data","header","attributes","length","vertexCount","POSITION","instancePositions","NORMAL","instanceNormals","COLOR_0","instanceColors","PointCloudLayer","id","modules","getAttributeManager","addInstanced","size","fp64","use64bitPositions","transition","accessor","defaultValue","props","colorFormat","normalized","oldProps","changeFlags","extensionsChanged","gl","context","state","model","setState","_getModel","invalidateAll","dataChanged","uniforms","viewport","sizeMultiplier","metersPerPixel","setUniforms","assign","draw","positions","i","angle","Math","PI","push","cos","sin","getShaders","geometry","drawMode","Float32Array","isInstanced","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './point-cloud-layer-vertex.glsl';\nimport fs from './point-cloud-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst DEFAULT_NORMAL = [0, 0, 1];\n\nconst defaultProps = {\n  sizeUnits: 'pixels',\n  pointSize: {type: 'number', min: 0, value: 10}, //  point radius in pixels\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getNormal: {type: 'accessor', value: DEFAULT_NORMAL},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  material: true,\n\n  // Depreated\n  radiusPixels: {deprecatedFor: 'pointSize'}\n};\n\n// support loaders.gl point cloud format\nfunction normalizeData(data) {\n  const {header, attributes} = data;\n  if (!header || !attributes) {\n    return;\n  }\n\n  data.length = header.vertexCount;\n\n  if (attributes.POSITION) {\n    attributes.instancePositions = attributes.POSITION;\n  }\n  if (attributes.NORMAL) {\n    attributes.instanceNormals = attributes.NORMAL;\n  }\n  if (attributes.COLOR_0) {\n    attributes.instanceColors = attributes.COLOR_0;\n  }\n}\n\nexport default class PointCloudLayer extends Layer {\n  getShaders(id) {\n    return super.getShaders({vs, fs, modules: [project32, gouraudLighting, picking]});\n  }\n\n  initializeState() {\n    /* eslint-disable max-len */\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceNormals: {\n        size: 3,\n        transition: true,\n        accessor: 'getNormal',\n        defaultValue: DEFAULT_NORMAL\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n    if (changeFlags.dataChanged) {\n      normalizeData(props.data);\n    }\n  }\n\n  draw({uniforms}) {\n    const {viewport} = this.context;\n    const {pointSize, sizeUnits} = this.props;\n\n    const sizeMultiplier = sizeUnits === 'meters' ? 1 / viewport.metersPerPixel : 1;\n\n    this.state.model\n      .setUniforms(\n        Object.assign({}, uniforms, {\n          radiusPixels: pointSize * sizeMultiplier\n        })\n      )\n      .draw();\n  }\n\n  _getModel(gl) {\n    // a triangle that minimally cover the unit circle\n    const positions = [];\n    for (let i = 0; i < 3; i++) {\n      const angle = (i / 3) * Math.PI * 2;\n      positions.push(Math.cos(angle) * 2, Math.sin(angle) * 2, 0);\n    }\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLES,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true\n      })\n    );\n  }\n}\n\nPointCloudLayer.layerName = 'PointCloudLayer';\nPointCloudLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}