{"ast":null,"code":"import Hammer from './utils/hammer';\n// This module contains constants that must be conditionally required\n// due to `window`/`document` references downstream.\nexport const RECOGNIZERS = Hammer ? [[Hammer.Pan, {\n  event: 'tripan',\n  pointers: 3,\n  threshold: 0,\n  enable: false\n}], [Hammer.Rotate, {\n  enable: false\n}], [Hammer.Pinch, {\n  enable: false\n}], [Hammer.Swipe, {\n  enable: false\n}], [Hammer.Pan, {\n  threshold: 0,\n  enable: false\n}], [Hammer.Press, {\n  enable: false\n}], [Hammer.Tap, {\n  event: 'doubletap',\n  taps: 2,\n  enable: false\n}],\n// TODO - rename to 'tap' and 'singletap' in the next major release\n[Hammer.Tap, {\n  event: 'anytap',\n  enable: false\n}], [Hammer.Tap, {\n  enable: false\n}]] : null;\n// Recognize the following gestures even if a given recognizer succeeds\nexport const RECOGNIZER_COMPATIBLE_MAP = {\n  tripan: ['rotate', 'pinch', 'pan'],\n  rotate: ['pinch'],\n  pinch: ['pan'],\n  pan: ['press', 'doubletap', 'anytap', 'tap'],\n  doubletap: ['anytap'],\n  anytap: ['tap']\n};\n// Recognize the folling gestures only if a given recognizer fails\nexport const RECOGNIZER_FALLBACK_MAP = {\n  doubletap: ['tap']\n};\n/**\n * Only one set of basic input events will be fired by Hammer.js:\n * either pointer, touch, or mouse, depending on system support.\n * In order to enable an application to be agnostic of system support,\n * alias basic input events into \"classes\" of events: down, move, and up.\n * See `_onBasicInput()` for usage of these aliases.\n */\nexport const BASIC_EVENT_ALIASES = {\n  pointerdown: 'pointerdown',\n  pointermove: 'pointermove',\n  pointerup: 'pointerup',\n  touchstart: 'pointerdown',\n  touchmove: 'pointermove',\n  touchend: 'pointerup',\n  mousedown: 'pointerdown',\n  mousemove: 'pointermove',\n  mouseup: 'pointerup'\n};\nexport const INPUT_EVENT_TYPES = {\n  KEY_EVENTS: ['keydown', 'keyup'],\n  MOUSE_EVENTS: ['mousedown', 'mousemove', 'mouseup', 'mouseover', 'mouseout', 'mouseleave'],\n  WHEEL_EVENTS: [\n  // Chrome, Safari\n  'wheel',\n  // IE\n  'mousewheel']\n};\n/**\n * \"Gestural\" events are those that have semantic meaning beyond the basic input event,\n * e.g. a click or tap is a sequence of `down` and `up` events with no `move` event in between.\n * Hammer.js handles these with its Recognizer system;\n * this block maps event names to the Recognizers required to detect the events.\n */\nexport const EVENT_RECOGNIZER_MAP = {\n  tap: 'tap',\n  anytap: 'anytap',\n  doubletap: 'doubletap',\n  press: 'press',\n  pinch: 'pinch',\n  pinchin: 'pinch',\n  pinchout: 'pinch',\n  pinchstart: 'pinch',\n  pinchmove: 'pinch',\n  pinchend: 'pinch',\n  pinchcancel: 'pinch',\n  rotate: 'rotate',\n  rotatestart: 'rotate',\n  rotatemove: 'rotate',\n  rotateend: 'rotate',\n  rotatecancel: 'rotate',\n  tripan: 'tripan',\n  tripanstart: 'tripan',\n  tripanmove: 'tripan',\n  tripanup: 'tripan',\n  tripandown: 'tripan',\n  tripanleft: 'tripan',\n  tripanright: 'tripan',\n  tripanend: 'tripan',\n  tripancancel: 'tripan',\n  pan: 'pan',\n  panstart: 'pan',\n  panmove: 'pan',\n  panup: 'pan',\n  pandown: 'pan',\n  panleft: 'pan',\n  panright: 'pan',\n  panend: 'pan',\n  pancancel: 'pan',\n  swipe: 'swipe',\n  swipeleft: 'swipe',\n  swiperight: 'swipe',\n  swipeup: 'swipe',\n  swipedown: 'swipe'\n};\n/**\n * Map gestural events typically provided by browsers\n * that are not reported in 'hammer.input' events\n * to corresponding Hammer.js gestures.\n */\nexport const GESTURE_EVENT_ALIASES = {\n  click: 'tap',\n  anyclick: 'anytap',\n  dblclick: 'doubletap',\n  mousedown: 'pointerdown',\n  mousemove: 'pointermove',\n  mouseup: 'pointerup',\n  mouseover: 'pointerover',\n  mouseout: 'pointerout',\n  mouseleave: 'pointerleave'\n};","map":{"version":3,"sources":["../../src/constants.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,gBAAgB;AAGnC;AACA;AACA,OAAO,MAAM,WAAW,GAAsB,MAAM,GAChD,CACE,CAAC,MAAM,CAAC,GAAG,EAAE;EAAC,KAAK,EAAE,QAAQ;EAAE,QAAQ,EAAE,CAAC;EAAE,SAAS,EAAE,CAAC;EAAE,MAAM,EAAE;AAAK,CAAC,CAAC,EACzE,CAAC,MAAM,CAAC,MAAM,EAAE;EAAC,MAAM,EAAE;AAAK,CAAC,CAAC,EAChC,CAAC,MAAM,CAAC,KAAK,EAAE;EAAC,MAAM,EAAE;AAAK,CAAC,CAAC,EAC/B,CAAC,MAAM,CAAC,KAAK,EAAE;EAAC,MAAM,EAAE;AAAK,CAAC,CAAC,EAC/B,CAAC,MAAM,CAAC,GAAG,EAAE;EAAC,SAAS,EAAE,CAAC;EAAE,MAAM,EAAE;AAAK,CAAC,CAAC,EAC3C,CAAC,MAAM,CAAC,KAAK,EAAE;EAAC,MAAM,EAAE;AAAK,CAAC,CAAC,EAC/B,CAAC,MAAM,CAAC,GAAG,EAAE;EAAC,KAAK,EAAE,WAAW;EAAE,IAAI,EAAE,CAAC;EAAE,MAAM,EAAE;AAAK,CAAC,CAAC;AAC1D;AACA,CAAC,MAAM,CAAC,GAAG,EAAE;EAAC,KAAK,EAAE,QAAQ;EAAE,MAAM,EAAE;AAAK,CAAC,CAAC,EAC9C,CAAC,MAAM,CAAC,GAAG,EAAE;EAAC,MAAM,EAAE;AAAK,CAAC,CAAC,CAC9B,GACD,IAAI;AAER;AACA,OAAO,MAAM,yBAAyB,GAAG;EACvC,MAAM,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC;EAClC,MAAM,EAAE,CAAC,OAAO,CAAC;EACjB,KAAK,EAAE,CAAC,KAAK,CAAC;EACd,GAAG,EAAE,CAAC,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,KAAK,CAAC;EAC5C,SAAS,EAAE,CAAC,QAAQ,CAAC;EACrB,MAAM,EAAE,CAAC,KAAK;CACN;AAEV;AACA,OAAO,MAAM,uBAAuB,GAAG;EACrC,SAAS,EAAE,CAAC,KAAK;CACT;AAEV;;;;;;AAMG;AACH,OAAO,MAAM,mBAAmB,GAAG;EACjC,WAAW,EAAE,aAAa;EAC1B,WAAW,EAAE,aAAa;EAC1B,SAAS,EAAE,WAAW;EACtB,UAAU,EAAE,aAAa;EACzB,SAAS,EAAE,aAAa;EACxB,QAAQ,EAAE,WAAW;EACrB,SAAS,EAAE,aAAa;EACxB,SAAS,EAAE,aAAa;EACxB,OAAO,EAAE;CACD;AAEV,OAAO,MAAM,iBAAiB,GAAG;EAC/B,UAAU,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC;EAChC,YAAY,EAAE,CAAC,WAAW,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,YAAY,CAAC;EAC1F,YAAY,EAAE;EACZ;EACA,OAAO;EACP;EACA,YAAY;CAEN;AAEV;;;;;AAKG;AACH,OAAO,MAAM,oBAAoB,GAAG;EAClC,GAAG,EAAE,KAAK;EACV,MAAM,EAAE,QAAQ;EAChB,SAAS,EAAE,WAAW;EACtB,KAAK,EAAE,OAAO;EACd,KAAK,EAAE,OAAO;EACd,OAAO,EAAE,OAAO;EAChB,QAAQ,EAAE,OAAO;EACjB,UAAU,EAAE,OAAO;EACnB,SAAS,EAAE,OAAO;EAClB,QAAQ,EAAE,OAAO;EACjB,WAAW,EAAE,OAAO;EACpB,MAAM,EAAE,QAAQ;EAChB,WAAW,EAAE,QAAQ;EACrB,UAAU,EAAE,QAAQ;EACpB,SAAS,EAAE,QAAQ;EACnB,YAAY,EAAE,QAAQ;EACtB,MAAM,EAAE,QAAQ;EAChB,WAAW,EAAE,QAAQ;EACrB,UAAU,EAAE,QAAQ;EACpB,QAAQ,EAAE,QAAQ;EAClB,UAAU,EAAE,QAAQ;EACpB,UAAU,EAAE,QAAQ;EACpB,WAAW,EAAE,QAAQ;EACrB,SAAS,EAAE,QAAQ;EACnB,YAAY,EAAE,QAAQ;EACtB,GAAG,EAAE,KAAK;EACV,QAAQ,EAAE,KAAK;EACf,OAAO,EAAE,KAAK;EACd,KAAK,EAAE,KAAK;EACZ,OAAO,EAAE,KAAK;EACd,OAAO,EAAE,KAAK;EACd,QAAQ,EAAE,KAAK;EACf,MAAM,EAAE,KAAK;EACb,SAAS,EAAE,KAAK;EAChB,KAAK,EAAE,OAAO;EACd,SAAS,EAAE,OAAO;EAClB,UAAU,EAAE,OAAO;EACnB,OAAO,EAAE,OAAO;EAChB,SAAS,EAAE;CACH;AAEV;;;;AAIG;AACH,OAAO,MAAM,qBAAqB,GAAG;EACnC,KAAK,EAAE,KAAK;EACZ,QAAQ,EAAE,QAAQ;EAClB,QAAQ,EAAE,WAAW;EACrB,SAAS,EAAE,aAAa;EACxB,SAAS,EAAE,aAAa;EACxB,OAAO,EAAE,WAAW;EACpB,SAAS,EAAE,aAAa;EACxB,QAAQ,EAAE,YAAY;EACtB,UAAU,EAAE;CACJ","sourceRoot":"","sourcesContent":["import Hammer from './utils/hammer';\n// This module contains constants that must be conditionally required\n// due to `window`/`document` references downstream.\nexport const RECOGNIZERS = Hammer\n    ? [\n        [Hammer.Pan, { event: 'tripan', pointers: 3, threshold: 0, enable: false }],\n        [Hammer.Rotate, { enable: false }],\n        [Hammer.Pinch, { enable: false }],\n        [Hammer.Swipe, { enable: false }],\n        [Hammer.Pan, { threshold: 0, enable: false }],\n        [Hammer.Press, { enable: false }],\n        [Hammer.Tap, { event: 'doubletap', taps: 2, enable: false }],\n        // TODO - rename to 'tap' and 'singletap' in the next major release\n        [Hammer.Tap, { event: 'anytap', enable: false }],\n        [Hammer.Tap, { enable: false }]\n    ]\n    : null;\n// Recognize the following gestures even if a given recognizer succeeds\nexport const RECOGNIZER_COMPATIBLE_MAP = {\n    tripan: ['rotate', 'pinch', 'pan'],\n    rotate: ['pinch'],\n    pinch: ['pan'],\n    pan: ['press', 'doubletap', 'anytap', 'tap'],\n    doubletap: ['anytap'],\n    anytap: ['tap']\n};\n// Recognize the folling gestures only if a given recognizer fails\nexport const RECOGNIZER_FALLBACK_MAP = {\n    doubletap: ['tap']\n};\n/**\n * Only one set of basic input events will be fired by Hammer.js:\n * either pointer, touch, or mouse, depending on system support.\n * In order to enable an application to be agnostic of system support,\n * alias basic input events into \"classes\" of events: down, move, and up.\n * See `_onBasicInput()` for usage of these aliases.\n */\nexport const BASIC_EVENT_ALIASES = {\n    pointerdown: 'pointerdown',\n    pointermove: 'pointermove',\n    pointerup: 'pointerup',\n    touchstart: 'pointerdown',\n    touchmove: 'pointermove',\n    touchend: 'pointerup',\n    mousedown: 'pointerdown',\n    mousemove: 'pointermove',\n    mouseup: 'pointerup'\n};\nexport const INPUT_EVENT_TYPES = {\n    KEY_EVENTS: ['keydown', 'keyup'],\n    MOUSE_EVENTS: ['mousedown', 'mousemove', 'mouseup', 'mouseover', 'mouseout', 'mouseleave'],\n    WHEEL_EVENTS: [\n        // Chrome, Safari\n        'wheel',\n        // IE\n        'mousewheel'\n    ]\n};\n/**\n * \"Gestural\" events are those that have semantic meaning beyond the basic input event,\n * e.g. a click or tap is a sequence of `down` and `up` events with no `move` event in between.\n * Hammer.js handles these with its Recognizer system;\n * this block maps event names to the Recognizers required to detect the events.\n */\nexport const EVENT_RECOGNIZER_MAP = {\n    tap: 'tap',\n    anytap: 'anytap',\n    doubletap: 'doubletap',\n    press: 'press',\n    pinch: 'pinch',\n    pinchin: 'pinch',\n    pinchout: 'pinch',\n    pinchstart: 'pinch',\n    pinchmove: 'pinch',\n    pinchend: 'pinch',\n    pinchcancel: 'pinch',\n    rotate: 'rotate',\n    rotatestart: 'rotate',\n    rotatemove: 'rotate',\n    rotateend: 'rotate',\n    rotatecancel: 'rotate',\n    tripan: 'tripan',\n    tripanstart: 'tripan',\n    tripanmove: 'tripan',\n    tripanup: 'tripan',\n    tripandown: 'tripan',\n    tripanleft: 'tripan',\n    tripanright: 'tripan',\n    tripanend: 'tripan',\n    tripancancel: 'tripan',\n    pan: 'pan',\n    panstart: 'pan',\n    panmove: 'pan',\n    panup: 'pan',\n    pandown: 'pan',\n    panleft: 'pan',\n    panright: 'pan',\n    panend: 'pan',\n    pancancel: 'pan',\n    swipe: 'swipe',\n    swipeleft: 'swipe',\n    swiperight: 'swipe',\n    swipeup: 'swipe',\n    swipedown: 'swipe'\n};\n/**\n * Map gestural events typically provided by browsers\n * that are not reported in 'hammer.input' events\n * to corresponding Hammer.js gestures.\n */\nexport const GESTURE_EVENT_ALIASES = {\n    click: 'tap',\n    anyclick: 'anytap',\n    dblclick: 'doubletap',\n    mousedown: 'pointerdown',\n    mousemove: 'pointermove',\n    mouseup: 'pointerup',\n    mouseover: 'pointerover',\n    mouseout: 'pointerout',\n    mouseleave: 'pointerleave'\n};\n//# sourceMappingURL=constants.js.map"]},"metadata":{},"sourceType":"module"}