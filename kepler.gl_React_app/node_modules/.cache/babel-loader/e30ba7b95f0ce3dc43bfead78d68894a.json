{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { Texture2D } from '@luma.gl/core';\nimport TinySDF from '@mapbox/tiny-sdf';\nimport { buildMapping } from './utils';\nimport LRUCache from './lru-cache';\nfunction getDefaultCharacterSet() {\n  var charSet = [];\n  for (var i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n  return charSet;\n}\nexport var DEFAULT_CHAR_SET = getDefaultCharacterSet();\nexport var DEFAULT_FONT_FAMILY = 'Monaco, monospace';\nexport var DEFAULT_FONT_WEIGHT = 'normal';\nexport var DEFAULT_FONT_SIZE = 64;\nexport var DEFAULT_BUFFER = 2;\nexport var DEFAULT_CUTOFF = 0.25;\nexport var DEFAULT_RADIUS = 3;\nvar GL_TEXTURE_WRAP_S = 0x2802;\nvar GL_TEXTURE_WRAP_T = 0x2803;\nvar GL_CLAMP_TO_EDGE = 0x812f;\nvar MAX_CANVAS_WIDTH = 1024;\nvar BASELINE_SCALE = 0.9;\nvar HEIGHT_SCALE = 1.2;\nvar CACHE_LIMIT = 3;\nvar cache = new LRUCache(CACHE_LIMIT);\nvar VALID_PROPS = ['fontFamily', 'fontWeight', 'characterSet', 'fontSize', 'sdf', 'buffer', 'cutoff', 'radius'];\nfunction getNewChars(key, characterSet) {\n  var cachedFontAtlas = cache.get(key);\n  if (!cachedFontAtlas) {\n    return characterSet;\n  }\n  var newChars = [];\n  var cachedMapping = cachedFontAtlas.mapping;\n  var cachedCharSet = Object.keys(cachedMapping);\n  cachedCharSet = new Set(cachedCharSet);\n  var charSet = characterSet;\n  if (charSet instanceof Array) {\n    charSet = new Set(charSet);\n  }\n  charSet.forEach(function (_char) {\n    if (!cachedCharSet.has(_char)) {\n      newChars.push(_char);\n    }\n  });\n  return newChars;\n}\nfunction populateAlphaChannel(alphaChannel, imageData) {\n  for (var i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\nfunction setTextStyle(ctx, fontFamily, fontSize, fontWeight) {\n  ctx.font = \"\".concat(fontWeight, \" \").concat(fontSize, \"px \").concat(fontFamily);\n  ctx.fillStyle = '#000';\n  ctx.textBaseline = 'baseline';\n  ctx.textAlign = 'left';\n}\nvar FontAtlasManager = function () {\n  function FontAtlasManager(gl) {\n    _classCallCheck(this, FontAtlasManager);\n    this.gl = gl;\n    this.props = {\n      fontFamily: DEFAULT_FONT_FAMILY,\n      fontWeight: DEFAULT_FONT_WEIGHT,\n      characterSet: DEFAULT_CHAR_SET,\n      fontSize: DEFAULT_FONT_SIZE,\n      buffer: DEFAULT_BUFFER,\n      sdf: false,\n      cutoff: DEFAULT_CUTOFF,\n      radius: DEFAULT_RADIUS\n    };\n    this._key = null;\n    this._texture = new Texture2D(this.gl);\n  }\n  _createClass(FontAtlasManager, [{\n    key: \"finalize\",\n    value: function finalize() {\n      this._texture[\"delete\"]();\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps() {\n      var _this = this;\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      VALID_PROPS.forEach(function (prop) {\n        if (prop in props) {\n          _this.props[prop] = props[prop];\n        }\n      });\n      var oldKey = this._key;\n      this._key = this._getKey();\n      var charSet = getNewChars(this._key, this.props.characterSet);\n      var cachedFontAtlas = cache.get(this._key);\n      if (cachedFontAtlas && charSet.length === 0) {\n        if (this._key !== oldKey) {\n          this._updateTexture(cachedFontAtlas);\n        }\n        return;\n      }\n      var fontAtlas = this._generateFontAtlas(this._key, charSet, cachedFontAtlas);\n      this._updateTexture(fontAtlas);\n      cache.set(this._key, fontAtlas);\n    }\n  }, {\n    key: \"_updateTexture\",\n    value: function _updateTexture(_ref) {\n      var _parameters;\n      var canvas = _ref.data,\n        width = _ref.width,\n        height = _ref.height;\n      if (this._texture.width !== width || this._texture.height !== height) {\n        this._texture.resize({\n          width: width,\n          height: height\n        });\n      }\n      this._texture.setImageData({\n        data: canvas,\n        width: width,\n        height: height,\n        parameters: (_parameters = {}, _defineProperty(_parameters, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE), _defineProperty(_parameters, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE), _parameters)\n      });\n      this._texture.generateMipmap();\n    }\n  }, {\n    key: \"_generateFontAtlas\",\n    value: function _generateFontAtlas(key, characterSet, cachedFontAtlas) {\n      var _this$props = this.props,\n        fontFamily = _this$props.fontFamily,\n        fontWeight = _this$props.fontWeight,\n        fontSize = _this$props.fontSize,\n        buffer = _this$props.buffer,\n        sdf = _this$props.sdf,\n        radius = _this$props.radius,\n        cutoff = _this$props.cutoff;\n      var canvas = cachedFontAtlas && cachedFontAtlas.data;\n      if (!canvas) {\n        canvas = document.createElement('canvas');\n        canvas.width = MAX_CANVAS_WIDTH;\n      }\n      var ctx = canvas.getContext('2d');\n      setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n      var _buildMapping = buildMapping(Object.assign({\n          getFontWidth: function getFontWidth(_char2) {\n            return ctx.measureText(_char2).width;\n          },\n          fontHeight: fontSize * HEIGHT_SCALE,\n          buffer: buffer,\n          characterSet: characterSet,\n          maxCanvasWidth: MAX_CANVAS_WIDTH\n        }, cachedFontAtlas && {\n          mapping: cachedFontAtlas.mapping,\n          xOffset: cachedFontAtlas.xOffset,\n          yOffset: cachedFontAtlas.yOffset\n        })),\n        mapping = _buildMapping.mapping,\n        canvasHeight = _buildMapping.canvasHeight,\n        xOffset = _buildMapping.xOffset,\n        yOffset = _buildMapping.yOffset;\n      if (canvas.height !== canvasHeight) {\n        var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        canvas.height = canvasHeight;\n        ctx.putImageData(imageData, 0, 0);\n      }\n      setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n      if (sdf) {\n        var tinySDF = new TinySDF(fontSize, buffer, radius, cutoff, fontFamily, fontWeight);\n        var _imageData = ctx.getImageData(0, 0, tinySDF.size, tinySDF.size);\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n        try {\n          for (var _iterator = characterSet[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _char3 = _step.value;\n            populateAlphaChannel(tinySDF.draw(_char3), _imageData);\n            ctx.putImageData(_imageData, mapping[_char3].x - buffer, mapping[_char3].y - buffer);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      } else {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n        try {\n          for (var _iterator2 = characterSet[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var _char4 = _step2.value;\n            ctx.fillText(_char4, mapping[_char4].x, mapping[_char4].y + fontSize * BASELINE_SCALE);\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n              _iterator2[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n      return {\n        xOffset: xOffset,\n        yOffset: yOffset,\n        mapping: mapping,\n        data: canvas,\n        width: canvas.width,\n        height: canvas.height\n      };\n    }\n  }, {\n    key: \"_getKey\",\n    value: function _getKey() {\n      var _this$props2 = this.props,\n        gl = _this$props2.gl,\n        fontFamily = _this$props2.fontFamily,\n        fontWeight = _this$props2.fontWeight,\n        fontSize = _this$props2.fontSize,\n        buffer = _this$props2.buffer,\n        sdf = _this$props2.sdf,\n        radius = _this$props2.radius,\n        cutoff = _this$props2.cutoff;\n      if (sdf) {\n        return \"\".concat(gl, \" \").concat(fontFamily, \" \").concat(fontWeight, \" \").concat(fontSize, \" \").concat(buffer, \" \").concat(radius, \" \").concat(cutoff);\n      }\n      return \"\".concat(gl, \" \").concat(fontFamily, \" \").concat(fontWeight, \" \").concat(fontSize, \" \").concat(buffer);\n    }\n  }, {\n    key: \"texture\",\n    get: function get() {\n      return this._texture;\n    }\n  }, {\n    key: \"mapping\",\n    get: function get() {\n      var data = cache.get(this._key);\n      return data && data.mapping;\n    }\n  }, {\n    key: \"scale\",\n    get: function get() {\n      return HEIGHT_SCALE;\n    }\n  }]);\n  return FontAtlasManager;\n}();\nexport { FontAtlasManager as default };","map":{"version":3,"sources":["../../../src/text-layer/font-atlas-manager.js"],"names":["Texture2D","TinySDF","buildMapping","LRUCache","getDefaultCharacterSet","charSet","i","push","String","fromCharCode","DEFAULT_CHAR_SET","DEFAULT_FONT_FAMILY","DEFAULT_FONT_WEIGHT","DEFAULT_FONT_SIZE","DEFAULT_BUFFER","DEFAULT_CUTOFF","DEFAULT_RADIUS","GL_TEXTURE_WRAP_S","GL_TEXTURE_WRAP_T","GL_CLAMP_TO_EDGE","MAX_CANVAS_WIDTH","BASELINE_SCALE","HEIGHT_SCALE","CACHE_LIMIT","cache","VALID_PROPS","getNewChars","key","characterSet","cachedFontAtlas","get","newChars","cachedMapping","mapping","cachedCharSet","Object","keys","Set","Array","forEach","has","char","populateAlphaChannel","alphaChannel","imageData","length","data","setTextStyle","ctx","fontFamily","fontSize","fontWeight","font","fillStyle","textBaseline","textAlign","FontAtlasManager","gl","props","buffer","sdf","cutoff","radius","_key","_texture","prop","oldKey","_getKey","_updateTexture","fontAtlas","_generateFontAtlas","set","canvas","width","height","resize","setImageData","parameters","generateMipmap","document","createElement","getContext","canvasHeight","xOffset","yOffset","assign","getFontWidth","measureText","fontHeight","maxCanvasWidth","getImageData","putImageData","tinySDF","size","draw","x","y","fillText"],"mappings":"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","sourcesContent":["/* global document */\n\nimport {Texture2D} from '@luma.gl/core';\nimport TinySDF from '@mapbox/tiny-sdf';\n\nimport {buildMapping} from './utils';\nimport LRUCache from './lru-cache';\n\nfunction getDefaultCharacterSet() {\n  const charSet = [];\n  for (let i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n  return charSet;\n}\n\nexport const DEFAULT_CHAR_SET = getDefaultCharacterSet();\nexport const DEFAULT_FONT_FAMILY = 'Monaco, monospace';\nexport const DEFAULT_FONT_WEIGHT = 'normal';\nexport const DEFAULT_FONT_SIZE = 64;\nexport const DEFAULT_BUFFER = 2;\nexport const DEFAULT_CUTOFF = 0.25;\nexport const DEFAULT_RADIUS = 3;\n\nconst GL_TEXTURE_WRAP_S = 0x2802;\nconst GL_TEXTURE_WRAP_T = 0x2803;\nconst GL_CLAMP_TO_EDGE = 0x812f;\nconst MAX_CANVAS_WIDTH = 1024;\n\nconst BASELINE_SCALE = 0.9;\nconst HEIGHT_SCALE = 1.2;\n\n// only preserve latest three fontAtlas\nconst CACHE_LIMIT = 3;\n\n/**\n * [key]: {\n *   xOffset, // x position of last character in mapping\n *   yOffset, // y position of last character in mapping\n *   mapping, // x, y coordinate of each character in shared `fontAtlas`\n *   data, // canvas\n *   width. // canvas.width,\n *   height, // canvas.height\n * }\n *\n */\nconst cache = new LRUCache(CACHE_LIMIT);\n\nconst VALID_PROPS = [\n  'fontFamily',\n  'fontWeight',\n  'characterSet',\n  'fontSize',\n  'sdf',\n  'buffer',\n  'cutoff',\n  'radius'\n];\n\n/**\n * get all the chars not in cache\n * @param key cache key\n * @param characterSet (Array|Set)\n * @returns {Array} chars not in cache\n */\nfunction getNewChars(key, characterSet) {\n  const cachedFontAtlas = cache.get(key);\n  if (!cachedFontAtlas) {\n    return characterSet;\n  }\n\n  const newChars = [];\n  const cachedMapping = cachedFontAtlas.mapping;\n  let cachedCharSet = Object.keys(cachedMapping);\n  cachedCharSet = new Set(cachedCharSet);\n\n  let charSet = characterSet;\n  if (charSet instanceof Array) {\n    charSet = new Set(charSet);\n  }\n\n  charSet.forEach(char => {\n    if (!cachedCharSet.has(char)) {\n      newChars.push(char);\n    }\n  });\n\n  return newChars;\n}\n\nfunction populateAlphaChannel(alphaChannel, imageData) {\n  // populate distance value from tinySDF to image alpha channel\n  for (let i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\n\nfunction setTextStyle(ctx, fontFamily, fontSize, fontWeight) {\n  ctx.font = `${fontWeight} ${fontSize}px ${fontFamily}`;\n  ctx.fillStyle = '#000';\n  ctx.textBaseline = 'baseline';\n  ctx.textAlign = 'left';\n}\n\nexport default class FontAtlasManager {\n  constructor(gl) {\n    this.gl = gl;\n\n    // font settings\n    this.props = {\n      fontFamily: DEFAULT_FONT_FAMILY,\n      fontWeight: DEFAULT_FONT_WEIGHT,\n      characterSet: DEFAULT_CHAR_SET,\n      fontSize: DEFAULT_FONT_SIZE,\n      buffer: DEFAULT_BUFFER,\n      // sdf only props\n      // https://github.com/mapbox/tiny-sdf\n      sdf: false,\n      cutoff: DEFAULT_CUTOFF,\n      radius: DEFAULT_RADIUS\n    };\n\n    // key is used for caching generated fontAtlas\n    this._key = null;\n    this._texture = new Texture2D(this.gl);\n  }\n\n  finalize() {\n    this._texture.delete();\n  }\n\n  get texture() {\n    return this._texture;\n  }\n\n  get mapping() {\n    const data = cache.get(this._key);\n    return data && data.mapping;\n  }\n\n  get scale() {\n    return HEIGHT_SCALE;\n  }\n\n  setProps(props = {}) {\n    VALID_PROPS.forEach(prop => {\n      if (prop in props) {\n        this.props[prop] = props[prop];\n      }\n    });\n\n    // update cache key\n    const oldKey = this._key;\n    this._key = this._getKey();\n\n    const charSet = getNewChars(this._key, this.props.characterSet);\n    const cachedFontAtlas = cache.get(this._key);\n\n    // if a fontAtlas associated with the new settings is cached and\n    // there are no new chars\n    if (cachedFontAtlas && charSet.length === 0) {\n      // update texture with cached fontAtlas\n      if (this._key !== oldKey) {\n        this._updateTexture(cachedFontAtlas);\n      }\n      return;\n    }\n\n    // update fontAtlas with new settings\n    const fontAtlas = this._generateFontAtlas(this._key, charSet, cachedFontAtlas);\n    this._updateTexture(fontAtlas);\n\n    // update cache\n    cache.set(this._key, fontAtlas);\n  }\n\n  _updateTexture({data: canvas, width, height}) {\n    // resize texture\n    if (this._texture.width !== width || this._texture.height !== height) {\n      this._texture.resize({width, height});\n    }\n\n    // update image data\n    this._texture.setImageData({\n      data: canvas,\n      width,\n      height,\n      parameters: {\n        [GL_TEXTURE_WRAP_S]: GL_CLAMP_TO_EDGE,\n        [GL_TEXTURE_WRAP_T]: GL_CLAMP_TO_EDGE\n      }\n    });\n\n    // this is required step after texture data changed\n    this._texture.generateMipmap();\n  }\n\n  _generateFontAtlas(key, characterSet, cachedFontAtlas) {\n    const {fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    let canvas = cachedFontAtlas && cachedFontAtlas.data;\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.width = MAX_CANVAS_WIDTH;\n    }\n    const ctx = canvas.getContext('2d');\n\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 1. build mapping\n    const {mapping, canvasHeight, xOffset, yOffset} = buildMapping(\n      Object.assign(\n        {\n          getFontWidth: char => ctx.measureText(char).width,\n          fontHeight: fontSize * HEIGHT_SCALE,\n          buffer,\n          characterSet,\n          maxCanvasWidth: MAX_CANVAS_WIDTH\n        },\n        cachedFontAtlas && {\n          mapping: cachedFontAtlas.mapping,\n          xOffset: cachedFontAtlas.xOffset,\n          yOffset: cachedFontAtlas.yOffset\n        }\n      )\n    );\n\n    // 2. update canvas\n    // copy old canvas data to new canvas only when height changed\n    if (canvas.height !== canvasHeight) {\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      canvas.height = canvasHeight;\n      ctx.putImageData(imageData, 0, 0);\n    }\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 3. layout characters\n    if (sdf) {\n      const tinySDF = new TinySDF(fontSize, buffer, radius, cutoff, fontFamily, fontWeight);\n      // used to store distance values from tinySDF\n      // tinySDF.size equals `fontSize + buffer * 2`\n      const imageData = ctx.getImageData(0, 0, tinySDF.size, tinySDF.size);\n\n      for (const char of characterSet) {\n        populateAlphaChannel(tinySDF.draw(char), imageData);\n        ctx.putImageData(imageData, mapping[char].x - buffer, mapping[char].y - buffer);\n      }\n    } else {\n      for (const char of characterSet) {\n        ctx.fillText(char, mapping[char].x, mapping[char].y + fontSize * BASELINE_SCALE);\n      }\n    }\n\n    return {\n      xOffset,\n      yOffset,\n      mapping,\n      data: canvas,\n      width: canvas.width,\n      height: canvas.height\n    };\n  }\n\n  _getKey() {\n    const {gl, fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    if (sdf) {\n      return `${gl} ${fontFamily} ${fontWeight} ${fontSize} ${buffer} ${radius} ${cutoff}`;\n    }\n    return `${gl} ${fontFamily} ${fontWeight} ${fontSize} ${buffer}`;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}