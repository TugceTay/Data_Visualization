{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { log } from '@deck.gl/core';\nvar Tile2DHeader = function () {\n  function Tile2DHeader(_ref) {\n    var x = _ref.x,\n      y = _ref.y,\n      z = _ref.z,\n      onTileLoad = _ref.onTileLoad,\n      onTileError = _ref.onTileError;\n    _classCallCheck(this, Tile2DHeader);\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.isVisible = false;\n    this.isSelected = false;\n    this.parent = null;\n    this.children = [];\n    this.content = null;\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this.onTileLoad = onTileLoad;\n    this.onTileError = onTileError;\n  }\n  _createClass(Tile2DHeader, [{\n    key: \"_loadData\",\n    value: function () {\n      var _loadData2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(getTileData, requestScheduler) {\n        var x, y, z, bbox, requestToken, tileData, error;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                x = this.x, y = this.y, z = this.z, bbox = this.bbox;\n                _context.next = 3;\n                return requestScheduler.scheduleRequest(this, function (tile) {\n                  return tile.isSelected ? 1 : -1;\n                });\n              case 3:\n                requestToken = _context.sent;\n                if (requestToken) {\n                  _context.next = 7;\n                  break;\n                }\n                this._isCancelled = true;\n                return _context.abrupt(\"return\");\n              case 7:\n                this._isCancelled = false;\n                _context.prev = 8;\n                _context.next = 11;\n                return getTileData({\n                  x: x,\n                  y: y,\n                  z: z,\n                  bbox: bbox\n                });\n              case 11:\n                tileData = _context.sent;\n                _context.next = 17;\n                break;\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](8);\n                error = _context.t0 || true;\n              case 17:\n                _context.prev = 17;\n                requestToken.done();\n                this._isLoaded = true;\n                return _context.finish(17);\n              case 21:\n                if (error) {\n                  this.onTileError(error, this);\n                } else {\n                  this.content = tileData;\n                  this.onTileLoad(this);\n                }\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[8, 14, 17, 21]]);\n      }));\n      function _loadData(_x, _x2) {\n        return _loadData2.apply(this, arguments);\n      }\n      return _loadData;\n    }()\n  }, {\n    key: \"loadData\",\n    value: function loadData(getTileData, requestScheduler) {\n      if (!getTileData) {\n        return;\n      }\n      this._loader = this._loadData(getTileData, requestScheduler);\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._isLoaded ? this.content : this._loader;\n    }\n  }, {\n    key: \"isLoaded\",\n    get: function get() {\n      return this._isLoaded;\n    }\n  }, {\n    key: \"isCancelled\",\n    get: function get() {\n      return this._isCancelled;\n    }\n  }, {\n    key: \"byteLength\",\n    get: function get() {\n      var result = this.content ? this.content.byteLength : 0;\n      if (!Number.isFinite(result)) {\n        log.error('byteLength not defined in tile data')();\n      }\n      return result;\n    }\n  }]);\n  return Tile2DHeader;\n}();\nexport { Tile2DHeader as default };","map":{"version":3,"sources":["../../../src/tile-layer/tile-2d-header.js"],"names":["log","Tile2DHeader","x","y","z","onTileLoad","onTileError","isVisible","isSelected","parent","children","content","_isLoaded","_isCancelled","_loader","result","byteLength","Number","isFinite","error","getTileData","requestScheduler","bbox","requestToken","scheduleRequest","tile","tileData","done","_loadData"],"mappings":"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","sourcesContent":["import {log} from '@deck.gl/core';\n\nexport default class Tile2DHeader {\n  constructor({x, y, z, onTileLoad, onTileError}) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.isVisible = false;\n    this.isSelected = false;\n    this.parent = null;\n    this.children = [];\n\n    this.content = null;\n    this._isLoaded = false;\n    this._isCancelled = false;\n\n    this.onTileLoad = onTileLoad;\n    this.onTileError = onTileError;\n  }\n\n  get data() {\n    return this._isLoaded ? this.content : this._loader;\n  }\n\n  get isLoaded() {\n    return this._isLoaded;\n  }\n\n  get isCancelled() {\n    return this._isCancelled;\n  }\n\n  get byteLength() {\n    const result = this.content ? this.content.byteLength : 0;\n    if (!Number.isFinite(result)) {\n      log.error('byteLength not defined in tile data')();\n    }\n    return result;\n  }\n\n  async _loadData(getTileData, requestScheduler) {\n    const {x, y, z, bbox} = this;\n\n    const requestToken = await requestScheduler.scheduleRequest(this, tile => {\n      return tile.isSelected ? 1 : -1;\n    });\n\n    if (!requestToken) {\n      this._isCancelled = true;\n      return;\n    }\n\n    this._isCancelled = false;\n    let tileData;\n    let error;\n    try {\n      tileData = await getTileData({x, y, z, bbox});\n    } catch (err) {\n      error = err || true;\n    } finally {\n      requestToken.done();\n      this._isLoaded = true;\n    }\n\n    if (error) {\n      this.onTileError(error, this);\n    } else {\n      this.content = tileData;\n      this.onTileLoad(this);\n    }\n  }\n\n  loadData(getTileData, requestScheduler) {\n    if (!getTileData) {\n      return;\n    }\n\n    this._loader = this._loadData(getTileData, requestScheduler);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}