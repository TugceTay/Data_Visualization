{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { Layer, fp64LowPart, project32, gouraudLighting, picking } from '@deck.gl/core';\nimport { Model, CubeGeometry } from '@luma.gl/core';\nimport { fp64arithmetic } from '@luma.gl/shadertools';\nimport { defaultColorRange, colorRangeToFlatArray } from '../utils/color-utils';\nimport vs from './gpu-grid-cell-layer-vertex.glsl';\nimport fs from './gpu-grid-cell-layer-fragment.glsl';\nvar COLOR_DATA_UBO_INDEX = 0;\nvar ELEVATION_DATA_UBO_INDEX = 1;\nvar defaultProps = {\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  gridSize: {\n    type: 'array',\n    min: 0,\n    value: [1, 1]\n  },\n  gridOrigin: {\n    type: 'array',\n    min: 0,\n    value: [0, 0]\n  },\n  gridOffset: {\n    type: 'array',\n    min: 0,\n    value: [0, 0]\n  },\n  cellSize: {\n    type: 'number',\n    min: 0,\n    max: 1000,\n    value: 1000\n  },\n  offset: {\n    type: 'array',\n    min: 0,\n    value: [1, 1]\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  extruded: true,\n  material: true\n};\nvar GPUGridCellLayer = function (_Layer) {\n  _inherits(GPUGridCellLayer, _Layer);\n  function GPUGridCellLayer() {\n    _classCallCheck(this, GPUGridCellLayer);\n    return _possibleConstructorReturn(this, _getPrototypeOf(GPUGridCellLayer).apply(this, arguments));\n  }\n  _createClass(GPUGridCellLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _get(_getPrototypeOf(GPUGridCellLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, gouraudLighting, picking, fp64arithmetic]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var gl = this.context.gl;\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        colors: {\n          size: 4,\n          noAlloc: true\n        },\n        elevations: {\n          size: 4,\n          noAlloc: true\n        }\n      });\n      var model = this._getModel(gl);\n      this._setupUniformBuffer(model);\n      this.setState({\n        model: model\n      });\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      return new Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new CubeGeometry(),\n        isInstanced: true\n      }));\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref) {\n      var uniforms = _ref.uniforms;\n      var _this$props = this.props,\n        cellSize = _this$props.cellSize,\n        offset = _this$props.offset,\n        extruded = _this$props.extruded,\n        elevationScale = _this$props.elevationScale,\n        coverage = _this$props.coverage,\n        gridSize = _this$props.gridSize,\n        gridOrigin = _this$props.gridOrigin,\n        gridOffset = _this$props.gridOffset,\n        elevationRange = _this$props.elevationRange,\n        colorMaxMinBuffer = _this$props.colorMaxMinBuffer,\n        elevationMaxMinBuffer = _this$props.elevationMaxMinBuffer;\n      var gridOriginLow = [fp64LowPart(gridOrigin[0]), fp64LowPart(gridOrigin[1])];\n      var gridOffsetLow = [fp64LowPart(gridOffset[0]), fp64LowPart(gridOffset[1])];\n      var domainUniforms = this.getDomainUniforms();\n      var colorRange = colorRangeToFlatArray(this.props.colorRange);\n      this.bindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer);\n      this.state.model.setUniforms(Object.assign({}, uniforms, domainUniforms, {\n        cellSize: cellSize,\n        offset: offset,\n        extruded: extruded,\n        elevationScale: elevationScale,\n        coverage: coverage,\n        gridSize: gridSize,\n        gridOrigin: gridOrigin,\n        gridOriginLow: gridOriginLow,\n        gridOffset: gridOffset,\n        gridOffsetLow: gridOffsetLow,\n        colorRange: colorRange,\n        elevationRange: elevationRange\n      })).draw();\n      this.unbindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer);\n    }\n  }, {\n    key: \"bindUniformBuffers\",\n    value: function bindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer) {\n      colorMaxMinBuffer.bind({\n        target: 35345,\n        index: COLOR_DATA_UBO_INDEX\n      });\n      elevationMaxMinBuffer.bind({\n        target: 35345,\n        index: ELEVATION_DATA_UBO_INDEX\n      });\n    }\n  }, {\n    key: \"unbindUniformBuffers\",\n    value: function unbindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer) {\n      colorMaxMinBuffer.unbind({\n        target: 35345,\n        index: COLOR_DATA_UBO_INDEX\n      });\n      elevationMaxMinBuffer.unbind({\n        target: 35345,\n        index: ELEVATION_DATA_UBO_INDEX\n      });\n    }\n  }, {\n    key: \"getDomainUniforms\",\n    value: function getDomainUniforms() {\n      var _this$props2 = this.props,\n        colorDomain = _this$props2.colorDomain,\n        elevationDomain = _this$props2.elevationDomain;\n      var domainUniforms = {};\n      if (colorDomain !== null) {\n        domainUniforms.colorDomainValid = true;\n        domainUniforms.colorDomain = colorDomain;\n      } else {\n        domainUniforms.colorDomainValid = false;\n      }\n      if (elevationDomain !== null) {\n        domainUniforms.elevationDomainValid = true;\n        domainUniforms.elevationDomain = elevationDomain;\n      } else {\n        domainUniforms.elevationDomainValid = false;\n      }\n      return domainUniforms;\n    }\n  }, {\n    key: \"_setupUniformBuffer\",\n    value: function _setupUniformBuffer(model) {\n      var gl = this.context.gl;\n      var programHandle = model.program.handle;\n      var colorIndex = gl.getUniformBlockIndex(programHandle, 'ColorData');\n      var elevationIndex = gl.getUniformBlockIndex(programHandle, 'ElevationData');\n      gl.uniformBlockBinding(programHandle, colorIndex, COLOR_DATA_UBO_INDEX);\n      gl.uniformBlockBinding(programHandle, elevationIndex, ELEVATION_DATA_UBO_INDEX);\n    }\n  }]);\n  return GPUGridCellLayer;\n}(Layer);\nexport { GPUGridCellLayer as default };\nGPUGridCellLayer.layerName = 'GPUGridCellLayer';\nGPUGridCellLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/gpu-grid-layer/gpu-grid-cell-layer.js"],"names":["Layer","fp64LowPart","project32","gouraudLighting","picking","Model","CubeGeometry","fp64arithmetic","defaultColorRange","colorRangeToFlatArray","vs","fs","COLOR_DATA_UBO_INDEX","ELEVATION_DATA_UBO_INDEX","defaultProps","colorDomain","colorRange","elevationDomain","elevationRange","elevationScale","type","min","value","gridSize","gridOrigin","gridOffset","cellSize","max","offset","coverage","extruded","material","GPUGridCellLayer","modules","gl","context","attributeManager","getAttributeManager","addInstanced","colors","size","noAlloc","elevations","model","_getModel","_setupUniformBuffer","setState","assign","getShaders","id","props","geometry","isInstanced","uniforms","colorMaxMinBuffer","elevationMaxMinBuffer","gridOriginLow","gridOffsetLow","domainUniforms","getDomainUniforms","bindUniformBuffers","state","setUniforms","draw","unbindUniformBuffers","bind","target","index","unbind","colorDomainValid","elevationDomainValid","programHandle","program","handle","colorIndex","getUniformBlockIndex","elevationIndex","uniformBlockBinding","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, fp64LowPart, project32, gouraudLighting, picking} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, CubeGeometry} from '@luma.gl/core';\nimport {fp64arithmetic} from '@luma.gl/shadertools';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\n\nimport vs from './gpu-grid-cell-layer-vertex.glsl';\nimport fs from './gpu-grid-cell-layer-fragment.glsl';\n\nconst COLOR_DATA_UBO_INDEX = 0;\nconst ELEVATION_DATA_UBO_INDEX = 1;\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // grid\n  gridSize: {type: 'array', min: 0, value: [1, 1]},\n  gridOrigin: {type: 'array', min: 0, value: [0, 0]},\n  gridOffset: {type: 'array', min: 0, value: [0, 0]},\n\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  offset: {type: 'array', min: 0, value: [1, 1]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  extruded: true,\n\n  material: true // Use lighting module defaults\n};\n\nexport default class GPUGridCellLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, gouraudLighting, picking, fp64arithmetic]\n    });\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      colors: {\n        size: 4,\n        noAlloc: true\n      },\n      elevations: {\n        size: 4,\n        noAlloc: true\n      }\n    });\n    const model = this._getModel(gl);\n    this._setupUniformBuffer(model);\n    this.setState({model});\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new CubeGeometry(),\n        isInstanced: true\n      })\n    );\n  }\n\n  draw({uniforms}) {\n    const {\n      cellSize,\n      offset,\n      extruded,\n      elevationScale,\n      coverage,\n      gridSize,\n      gridOrigin,\n      gridOffset,\n      elevationRange,\n      colorMaxMinBuffer,\n      elevationMaxMinBuffer\n    } = this.props;\n\n    const gridOriginLow = [fp64LowPart(gridOrigin[0]), fp64LowPart(gridOrigin[1])];\n    const gridOffsetLow = [fp64LowPart(gridOffset[0]), fp64LowPart(gridOffset[1])];\n    const domainUniforms = this.getDomainUniforms();\n    const colorRange = colorRangeToFlatArray(this.props.colorRange);\n    this.bindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer);\n    this.state.model\n      .setUniforms(\n        Object.assign({}, uniforms, domainUniforms, {\n          cellSize,\n          offset,\n          extruded,\n          elevationScale,\n          coverage,\n          gridSize,\n          gridOrigin,\n          gridOriginLow,\n          gridOffset,\n          gridOffsetLow,\n          colorRange,\n          elevationRange\n        })\n      )\n      .draw();\n    this.unbindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer);\n  }\n\n  bindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer) {\n    colorMaxMinBuffer.bind({target: GL.UNIFORM_BUFFER, index: COLOR_DATA_UBO_INDEX});\n    elevationMaxMinBuffer.bind({target: GL.UNIFORM_BUFFER, index: ELEVATION_DATA_UBO_INDEX});\n  }\n\n  unbindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer) {\n    colorMaxMinBuffer.unbind({target: GL.UNIFORM_BUFFER, index: COLOR_DATA_UBO_INDEX});\n    elevationMaxMinBuffer.unbind({target: GL.UNIFORM_BUFFER, index: ELEVATION_DATA_UBO_INDEX});\n  }\n\n  getDomainUniforms() {\n    const {colorDomain, elevationDomain} = this.props;\n    const domainUniforms = {};\n    if (colorDomain !== null) {\n      domainUniforms.colorDomainValid = true;\n      domainUniforms.colorDomain = colorDomain;\n    } else {\n      domainUniforms.colorDomainValid = false;\n    }\n    if (elevationDomain !== null) {\n      domainUniforms.elevationDomainValid = true;\n      domainUniforms.elevationDomain = elevationDomain;\n    } else {\n      domainUniforms.elevationDomainValid = false;\n    }\n    return domainUniforms;\n  }\n\n  _setupUniformBuffer(model) {\n    const gl = this.context.gl;\n    const programHandle = model.program.handle;\n\n    const colorIndex = gl.getUniformBlockIndex(programHandle, 'ColorData');\n    const elevationIndex = gl.getUniformBlockIndex(programHandle, 'ElevationData');\n    gl.uniformBlockBinding(programHandle, colorIndex, COLOR_DATA_UBO_INDEX);\n    gl.uniformBlockBinding(programHandle, elevationIndex, ELEVATION_DATA_UBO_INDEX);\n  }\n}\n\nGPUGridCellLayer.layerName = 'GPUGridCellLayer';\nGPUGridCellLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}