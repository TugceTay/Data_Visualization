{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setLayerBlending = setLayerBlending;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _core = require(\"@luma.gl/core\");\nvar _defaultSettings = require(\"../constants/default-settings\");\nvar _constants = _interopRequireDefault(require(\"@luma.gl/constants\"));\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar getGlConst = function getGlConst(d) {\n  return _constants[\"default\"][d];\n};\nfunction setLayerBlending(gl, layerBlending) {\n  var blending = _defaultSettings.LAYER_BLENDINGS[layerBlending];\n  var blendFunc = blending.blendFunc,\n    blendEquation = blending.blendEquation;\n  (0, _core.setParameters)(gl, _objectSpread((0, _defineProperty2[\"default\"])({}, _constants[\"default\"].BLEND, true), blendFunc ? {\n    blendFunc: blendFunc.map(getGlConst),\n    blendEquation: Array.isArray(blendEquation) ? blendEquation.map(getGlConst) : getGlConst(blendEquation)\n  } : {}));\n}","map":{"version":3,"sources":["../../src/utils/gl-utils.js"],"names":["getGlConst","GL","d","setLayerBlending","gl","layerBlending","blending","LAYER_BLENDINGS","blendFunc","blendEquation","BLEND","map","Array","isArray"],"mappings":";;;;;;;;AAoBA,IAAA,KAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AACA,IAAA,gBAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAAA,CAAC,EAAA;EAAA,OAAIC,UAAAA,CAAAA,SAAAA,CAAAA,CAAGC,CAAHD,CAAJ;AAAA,CAApB;AAEO,SAASE,gBAAT,CAA0BC,EAA1B,EAA8BC,aAA9B,EAA6C;EAClD,IAAMC,QAAQ,GAAGC,gBAAAA,CAAAA,eAAAA,CAAgBF,aAAhBE,CAAjB;EADkD,IAE3CC,SAF2C,GAEfF,QAFe,CAE3CE,SAF2C;IAEhCC,aAFgC,GAEfH,QAFe,CAEhCG,aAFgC;EAIlD,CAAA,CAAA,EAAA,KAAA,CAAA,aAAA,EAAcL,EAAd,EAAA,aAAA,CAAA,CAAA,CAAA,EAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,CAAA,CAAA,EACGH,UAAAA,CAAAA,SAAAA,CAAAA,CAAGS,KADN,EACc,IADd,CAAA,EAEMF,SAAS,GACT;IACEA,SAAS,EAAEA,SAAS,CAACG,GAAVH,CAAcR,UAAdQ,CADb;IAEEC,aAAa,EAAEG,KAAK,CAACC,OAAND,CAAcH,aAAdG,CAAAA,GACXH,aAAa,CAACE,GAAdF,CAAkBT,UAAlBS,CADWG,GAEXZ,UAAU,CAACS,aAAD;EAJhB,CADS,GAOT,CAAA,CATN,CAAA,CAAA;AAWD","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {setParameters} from '@luma.gl/core';\nimport {LAYER_BLENDINGS} from 'constants/default-settings';\nimport GL from '@luma.gl/constants';\n\nconst getGlConst = d => GL[d];\n\nexport function setLayerBlending(gl, layerBlending) {\n  const blending = LAYER_BLENDINGS[layerBlending];\n  const {blendFunc, blendEquation} = blending;\n\n  setParameters(gl, {\n    [GL.BLEND]: true,\n    ...(blendFunc\n      ? {\n          blendFunc: blendFunc.map(getGlConst),\n          blendEquation: Array.isArray(blendEquation)\n            ? blendEquation.map(getGlConst)\n            : getGlConst(blendEquation)\n        }\n      : {})\n  });\n}\n"]},"metadata":{},"sourceType":"script"}