{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport { Model, Geometry } from '@luma.gl/core';\nimport { Layer, project32 } from '@deck.gl/core';\nimport vs from './triangle-layer-vertex.glsl';\nimport fs from './triangle-layer-fragment.glsl';\nvar defaultProps = {\n  count: 0,\n  texture: null\n};\nvar TriangleLayer = function (_Layer) {\n  _inherits(TriangleLayer, _Layer);\n  function TriangleLayer() {\n    _classCallCheck(this, TriangleLayer);\n    return _possibleConstructorReturn(this, _getPrototypeOf(TriangleLayer).apply(this, arguments));\n  }\n  _createClass(TriangleLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return {\n        vs: vs,\n        fs: fs,\n        modules: [project32]\n      };\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var gl = this.context.gl;\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add({\n        positions: {\n          size: 3,\n          noAlloc: true\n        },\n        texCoords: {\n          size: 2,\n          noAlloc: true\n        }\n      });\n      this.setState({\n        model: this._getModel(gl)\n      });\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var vertexCount = this.props.vertexCount;\n      return new Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 6,\n          vertexCount: vertexCount\n        })\n      }));\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref) {\n      var uniforms = _ref.uniforms;\n      var model = this.state.model;\n      var _this$props = this.props,\n        texture = _this$props.texture,\n        maxTexture = _this$props.maxTexture,\n        colorTexture = _this$props.colorTexture,\n        intensity = _this$props.intensity,\n        threshold = _this$props.threshold,\n        colorDomain = _this$props.colorDomain;\n      model.setUniforms(_objectSpread({}, uniforms, {\n        texture: texture,\n        maxTexture: maxTexture,\n        colorTexture: colorTexture,\n        intensity: intensity,\n        threshold: threshold,\n        colorDomain: colorDomain\n      })).draw();\n    }\n  }]);\n  return TriangleLayer;\n}(Layer);\nexport { TriangleLayer as default };\nTriangleLayer.layerName = 'TriangleLayer';\nTriangleLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/heatmap-layer/triangle-layer.js"],"names":["Model","Geometry","Layer","project32","vs","fs","defaultProps","count","texture","TriangleLayer","modules","gl","context","attributeManager","getAttributeManager","add","positions","size","noAlloc","texCoords","setState","model","_getModel","vertexCount","props","assign","getShaders","id","geometry","drawMode","uniforms","state","maxTexture","colorTexture","intensity","threshold","colorDomain","setUniforms","draw","layerName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,SAAQA,KAAR,EAAeC,QAAf,QAA8B,eAA9B;AACA,SAAQC,KAAR,EAAeC,SAAf,QAA+B,eAA/B;AACA,OAAOC,EAAP,MAAe,8BAAf;AACA,OAAOC,EAAP,MAAe,gCAAf;AAEA,IAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,CADY;EAEnBC,OAAO,EAAE;AAFU,CAArB;IAKqBC,a;;;;;;;;iCACN;MACX,OAAO;QAACL,EAAE,EAAFA,EAAD;QAAKC,EAAE,EAAFA,EAAL;QAASK,OAAO,EAAE,CAACP,SAAD;MAAlB,CAAP;IACD;;;sCAEiB;MAAA,IACTQ,EADS,GACH,IAAA,CAAKC,OADF,CACTD,EADS;MAEhB,IAAME,gBAAgB,GAAG,IAAA,CAAKC,mBAAL,EAAzB;MACAD,gBAAgB,CAACE,GAAjBF,CAAqB;QACnBG,SAAS,EAAE;UAACC,IAAI,EAAE,CAAP;UAAUC,OAAO,EAAE;QAAnB,CADQ;QAEnBC,SAAS,EAAE;UAACF,IAAI,EAAE,CAAP;UAAUC,OAAO,EAAE;QAAnB;MAFQ,CAArBL,CAAAA;MAIA,IAAA,CAAKO,QAAL,CAAc;QACZC,KAAK,EAAE,IAAA,CAAKC,SAAL,CAAeX,EAAf;MADK,CAAd,CAAA;IAGD;;;8BAESA,E,EAAI;MAAA,IACLY,WADK,GACU,IAAA,CAAKC,KADf,CACLD,WADK;MAGZ,OAAO,IAAIvB,KAAJ,CACLW,EADK,EAEL,MAAM,CAACc,MAAP,CAAc,CAAA,CAAd,EAAkB,IAAA,CAAKC,UAAL,EAAlB,EAAqC;QACnCC,EAAE,EAAE,IAAA,CAAKH,KAAL,CAAWG,EADoB;QAEnCC,QAAQ,EAAE,IAAI3B,QAAJ,CAAa;UACrB4B,QAAQ,EAAA,CADa;UAErBN,WAAW,EAAXA;QAFqB,CAAb;MAFyB,CAArC,CAFK,CAAP;IAUD;;;+BAEgB;MAAA,IAAXO,QAAW,GAAA,IAAA,CAAXA,QAAW;MAAA,IACRT,KADQ,GACC,IAAA,CAAKU,KADN,CACRV,KADQ;MAAA,IAAA,WAAA,GAGgE,IAAA,CAAKG,KAHrE;QAGRhB,OAHQ,GAAA,WAAA,CAGRA,OAHQ;QAGCwB,UAHD,GAAA,WAAA,CAGCA,UAHD;QAGaC,YAHb,GAAA,WAAA,CAGaA,YAHb;QAG2BC,SAH3B,GAAA,WAAA,CAG2BA,SAH3B;QAGsCC,SAHtC,GAAA,WAAA,CAGsCA,SAHtC;QAGiDC,WAHjD,GAAA,WAAA,CAGiDA,WAHjD;MAIff,KAAK,CACFgB,WADHhB,CAAAA,aAAAA,CAAAA,CAAAA,CAAAA,EAEOS,QAFPT,EAAAA;QAGIb,OAAO,EAAPA,OAHJa;QAIIW,UAAU,EAAVA,UAJJX;QAKIY,YAAY,EAAZA,YALJZ;QAMIa,SAAS,EAATA,SANJb;QAOIc,SAAS,EAATA,SAPJd;QAQIe,WAAW,EAAXA;MARJf,CAAAA,CAAAA,CAAAA,CAUGiB,IAVHjB,EAAAA;IAWD;;;EA/CwCnB,K;SAAtBO,a;AAkDrBA,aAAa,CAAC8B,SAAd9B,GAA0B,eAA1BA;AACAA,aAAa,CAACH,YAAdG,GAA6BH,YAA7BG","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\nimport {Layer, project32} from '@deck.gl/core';\nimport vs from './triangle-layer-vertex.glsl';\nimport fs from './triangle-layer-fragment.glsl';\n\nconst defaultProps = {\n  count: 0, // number of triangles to be rendered\n  texture: null\n};\n\nexport default class TriangleLayer extends Layer {\n  getShaders() {\n    return {vs, fs, modules: [project32]};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, noAlloc: true},\n      texCoords: {size: 2, noAlloc: true}\n    });\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n\n  _getModel(gl) {\n    const {vertexCount} = this.props;\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          vertexCount\n        })\n      })\n    );\n  }\n\n  draw({uniforms}) {\n    const {model} = this.state;\n\n    const {texture, maxTexture, colorTexture, intensity, threshold, colorDomain} = this.props;\n    model\n      .setUniforms({\n        ...uniforms,\n        texture,\n        maxTexture,\n        colorTexture,\n        intensity,\n        threshold,\n        colorDomain\n      })\n      .draw();\n  }\n}\n\nTriangleLayer.layerName = 'TriangleLayer';\nTriangleLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}