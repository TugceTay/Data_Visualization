{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { Layer, project32, gouraudLighting, picking } from '@deck.gl/core';\nimport { Model } from '@luma.gl/core';\nimport ColumnGeometry from './column-geometry';\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  diskResolution: {\n    type: 'number',\n    min: 4,\n    value: 20\n  },\n  vertices: null,\n  radius: {\n    type: 'number',\n    min: 0,\n    value: 1000\n  },\n  angle: {\n    type: 'number',\n    value: 0\n  },\n  offset: {\n    type: 'array',\n    value: [0, 0]\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  material: true,\n  getColor: {\n    deprecatedFor: ['getFillColor', 'getLineColor']\n  }\n};\nvar ColumnLayer = function (_Layer) {\n  _inherits(ColumnLayer, _Layer);\n  function ColumnLayer() {\n    _classCallCheck(this, ColumnLayer);\n    return _possibleConstructorReturn(this, _getPrototypeOf(ColumnLayer).apply(this, arguments));\n  }\n  _createClass(ColumnLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _get(_getPrototypeOf(ColumnLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, gouraudLighting, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instancePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getPosition'\n        },\n        instanceElevations: {\n          size: 1,\n          transition: true,\n          accessor: 'getElevation'\n        },\n        instanceFillColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: true,\n          accessor: 'getFillColor',\n          defaultValue: DEFAULT_COLOR\n        },\n        instanceLineColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: true,\n          accessor: 'getLineColor',\n          defaultValue: DEFAULT_COLOR\n        },\n        instanceStrokeWidths: {\n          size: 1,\n          accessor: 'getLineWidth',\n          transition: true\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n        oldProps = _ref.oldProps,\n        changeFlags = _ref.changeFlags;\n      _get(_getPrototypeOf(ColumnLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n      var regenerateModels = changeFlags.extensionsChanged;\n      if (regenerateModels) {\n        var gl = this.context.gl;\n        if (this.state.model) {\n          this.state.model[\"delete\"]();\n        }\n        this.setState({\n          model: this._getModel(gl)\n        });\n        this.getAttributeManager().invalidateAll();\n      }\n      if (regenerateModels || props.diskResolution !== oldProps.diskResolution || props.vertices !== oldProps.vertices) {\n        this._updateGeometry(props);\n      }\n    }\n  }, {\n    key: \"getGeometry\",\n    value: function getGeometry(diskResolution, vertices) {\n      var geometry = new ColumnGeometry({\n        radius: 1,\n        height: 2,\n        vertices: vertices,\n        nradial: diskResolution\n      });\n      var meanVertexDistance = 0;\n      if (vertices) {\n        for (var i = 0; i < diskResolution; i++) {\n          var p = vertices[i];\n          var d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n          meanVertexDistance += d / diskResolution;\n        }\n      } else {\n        meanVertexDistance = 1;\n      }\n      this.setState({\n        edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n      });\n      return geometry;\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      return new Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        isInstanced: true\n      }));\n    }\n  }, {\n    key: \"_updateGeometry\",\n    value: function _updateGeometry(_ref2) {\n      var diskResolution = _ref2.diskResolution,\n        vertices = _ref2.vertices;\n      var geometry = this.getGeometry(diskResolution, vertices);\n      this.setState({\n        fillVertexCount: geometry.attributes.POSITION.value.length / 3,\n        wireframeVertexCount: geometry.indices.value.length\n      });\n      this.state.model.setProps({\n        geometry: geometry\n      });\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref3) {\n      var uniforms = _ref3.uniforms;\n      var viewport = this.context.viewport;\n      var _this$props = this.props,\n        lineWidthUnits = _this$props.lineWidthUnits,\n        lineWidthScale = _this$props.lineWidthScale,\n        lineWidthMinPixels = _this$props.lineWidthMinPixels,\n        lineWidthMaxPixels = _this$props.lineWidthMaxPixels,\n        elevationScale = _this$props.elevationScale,\n        extruded = _this$props.extruded,\n        filled = _this$props.filled,\n        stroked = _this$props.stroked,\n        wireframe = _this$props.wireframe,\n        offset = _this$props.offset,\n        coverage = _this$props.coverage,\n        radius = _this$props.radius,\n        angle = _this$props.angle;\n      var _this$state = this.state,\n        model = _this$state.model,\n        fillVertexCount = _this$state.fillVertexCount,\n        wireframeVertexCount = _this$state.wireframeVertexCount,\n        edgeDistance = _this$state.edgeDistance;\n      var widthMultiplier = lineWidthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n      model.setUniforms(Object.assign({}, uniforms, {\n        radius: radius,\n        angle: angle / 180 * Math.PI,\n        offset: offset,\n        extruded: extruded,\n        coverage: coverage,\n        elevationScale: elevationScale,\n        edgeDistance: edgeDistance,\n        widthScale: lineWidthScale * widthMultiplier,\n        widthMinPixels: lineWidthMinPixels,\n        widthMaxPixels: lineWidthMaxPixels\n      }));\n      if (extruded && wireframe) {\n        model.setProps({\n          isIndexed: true\n        });\n        model.setVertexCount(wireframeVertexCount).setDrawMode(1).setUniforms({\n          isStroke: true\n        }).draw();\n      }\n      if (filled) {\n        model.setProps({\n          isIndexed: false\n        });\n        model.setVertexCount(fillVertexCount).setDrawMode(5).setUniforms({\n          isStroke: false\n        }).draw();\n      }\n      if (!extruded && stroked) {\n        model.setProps({\n          isIndexed: false\n        });\n        model.setVertexCount(fillVertexCount * 2 / 3).setDrawMode(5).setUniforms({\n          isStroke: true\n        }).draw();\n      }\n    }\n  }]);\n  return ColumnLayer;\n}(Layer);\nexport { ColumnLayer as default };\nColumnLayer.layerName = 'ColumnLayer';\nColumnLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/column-layer/column-layer.js"],"names":["Layer","project32","gouraudLighting","picking","Model","ColumnGeometry","vs","fs","DEFAULT_COLOR","defaultProps","diskResolution","type","min","value","vertices","radius","angle","offset","coverage","max","elevationScale","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","extruded","wireframe","filled","stroked","getPosition","x","position","getFillColor","getLineColor","getLineWidth","getElevation","material","getColor","deprecatedFor","ColumnLayer","modules","attributeManager","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceElevations","instanceFillColors","props","colorFormat","length","normalized","defaultValue","instanceLineColors","instanceStrokeWidths","oldProps","changeFlags","regenerateModels","extensionsChanged","gl","context","state","model","setState","_getModel","invalidateAll","_updateGeometry","geometry","height","nradial","meanVertexDistance","i","p","d","Math","sqrt","edgeDistance","cos","PI","assign","getShaders","id","isInstanced","getGeometry","fillVertexCount","attributes","POSITION","wireframeVertexCount","indices","setProps","uniforms","viewport","widthMultiplier","metersPerPixel","setUniforms","widthScale","widthMinPixels","widthMaxPixels","isIndexed","setVertexCount","setDrawMode","isStroke","draw","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model} from '@luma.gl/core';\nimport ColumnGeometry from './column-geometry';\n\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  diskResolution: {type: 'number', min: 4, value: 20},\n  vertices: null,\n  radius: {type: 'number', min: 0, value: 1000},\n  angle: {type: 'number', value: 0},\n  offset: {type: 'array', value: [0, 0]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n  getElevation: {type: 'accessor', value: 1000},\n  material: true,\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\nexport default class ColumnLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, gouraudLighting, picking]});\n  }\n\n  /**\n   * DeckGL calls initializeState when GL context is available\n   * Essentially a deferred constructor\n   */\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getLineWidth',\n        transition: true\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const regenerateModels = changeFlags.extensionsChanged;\n\n    if (regenerateModels) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (\n      regenerateModels ||\n      props.diskResolution !== oldProps.diskResolution ||\n      props.vertices !== oldProps.vertices\n    ) {\n      this._updateGeometry(props);\n    }\n  }\n\n  getGeometry(diskResolution, vertices) {\n    const geometry = new ColumnGeometry({\n      radius: 1,\n      height: 2,\n      vertices,\n      nradial: diskResolution\n    });\n\n    let meanVertexDistance = 0;\n    if (vertices) {\n      for (let i = 0; i < diskResolution; i++) {\n        const p = vertices[i];\n        const d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n        meanVertexDistance += d / diskResolution;\n      }\n    } else {\n      meanVertexDistance = 1;\n    }\n    this.setState({\n      edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n    });\n\n    return geometry;\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        isInstanced: true\n      })\n    );\n  }\n\n  _updateGeometry({diskResolution, vertices}) {\n    const geometry = this.getGeometry(diskResolution, vertices);\n\n    this.setState({\n      fillVertexCount: geometry.attributes.POSITION.value.length / 3,\n      wireframeVertexCount: geometry.indices.value.length\n    });\n\n    this.state.model.setProps({geometry});\n  }\n\n  draw({uniforms}) {\n    const {viewport} = this.context;\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n\n      elevationScale,\n      extruded,\n      filled,\n      stroked,\n      wireframe,\n      offset,\n      coverage,\n      radius,\n      angle\n    } = this.props;\n    const {model, fillVertexCount, wireframeVertexCount, edgeDistance} = this.state;\n\n    const widthMultiplier = lineWidthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n\n    model.setUniforms(\n      Object.assign({}, uniforms, {\n        radius,\n        angle: (angle / 180) * Math.PI,\n        offset,\n        extruded,\n        coverage,\n        elevationScale,\n        edgeDistance,\n        widthScale: lineWidthScale * widthMultiplier,\n        widthMinPixels: lineWidthMinPixels,\n        widthMaxPixels: lineWidthMaxPixels\n      })\n    );\n\n    // When drawing 3d: draw wireframe first so it doesn't get occluded by depth test\n    if (extruded && wireframe) {\n      model.setProps({isIndexed: true});\n      model\n        .setVertexCount(wireframeVertexCount)\n        .setDrawMode(GL.LINES)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n    if (filled) {\n      model.setProps({isIndexed: false});\n      model\n        .setVertexCount(fillVertexCount)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: false})\n        .draw();\n    }\n    // When drawing 2d: draw fill before stroke so that the outline is always on top\n    if (!extruded && stroked) {\n      model.setProps({isIndexed: false});\n      // The width of the stroke is achieved by flattening the side of the cylinder.\n      // Skip the last 1/3 of the vertices which is the top.\n      model\n        .setVertexCount((fillVertexCount * 2) / 3)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n  }\n}\n\nColumnLayer.layerName = 'ColumnLayer';\nColumnLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}