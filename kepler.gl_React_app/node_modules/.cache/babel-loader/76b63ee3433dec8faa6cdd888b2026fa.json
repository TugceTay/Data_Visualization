{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nvar env = {};\nexport var EVENTS = ['value', 'string', 'key', 'openobject', 'closeobject', 'openarray', 'closearray', 'error', 'end', 'ready'];\nvar MAX_BUFFER_LENGTH = Number.MAX_SAFE_INTEGER;\nvar DEBUG = env.CDEBUG === 'debug';\nvar buffers = {\n  textNode: undefined,\n  numberNode: ''\n};\nvar S = 0;\nvar STATE = {\n  BEGIN: S++,\n  VALUE: S++,\n  OPEN_OBJECT: S++,\n  CLOSE_OBJECT: S++,\n  OPEN_ARRAY: S++,\n  CLOSE_ARRAY: S++,\n  TEXT_ESCAPE: S++,\n  STRING: S++,\n  BACKSLASH: S++,\n  END: S++,\n  OPEN_KEY: S++,\n  CLOSE_KEY: S++,\n  TRUE: S++,\n  TRUE2: S++,\n  TRUE3: S++,\n  FALSE: S++,\n  FALSE2: S++,\n  FALSE3: S++,\n  FALSE4: S++,\n  NULL: S++,\n  NULL2: S++,\n  NULL3: S++,\n  NUMBER_DECIMAL_POINT: S++,\n  NUMBER_DIGIT: S++\n};\nfor (var s_ in STATE) {\n  STATE[STATE[s_]] = s_;\n}\nS = STATE;\nvar Char = {\n  tab: 0x09,\n  lineFeed: 0x0a,\n  carriageReturn: 0x0d,\n  space: 0x20,\n  doubleQuote: 0x22,\n  plus: 0x2b,\n  comma: 0x2c,\n  minus: 0x2d,\n  period: 0x2e,\n  _0: 0x30,\n  _9: 0x39,\n  colon: 0x3a,\n  E: 0x45,\n  openBracket: 0x5b,\n  backslash: 0x5c,\n  closeBracket: 0x5d,\n  a: 0x61,\n  b: 0x62,\n  e: 0x65,\n  f: 0x66,\n  l: 0x6c,\n  n: 0x6e,\n  r: 0x72,\n  s: 0x73,\n  t: 0x74,\n  u: 0x75,\n  openBrace: 0x7b,\n  closeBrace: 0x7d\n};\nfunction checkBufferLength(parser) {\n  var maxAllowed = Math.max(MAX_BUFFER_LENGTH, 10);\n  var maxActual = 0;\n  for (var buffer in buffers) {\n    var len = parser[buffer] === undefined ? 0 : parser[buffer].length;\n    if (len > maxAllowed) {\n      switch (buffer) {\n        case 'text':\n          closeText(parser);\n          break;\n        default:\n          error(parser, 'Max buffer length exceeded: ' + buffer);\n      }\n    }\n    maxActual = Math.max(maxActual, len);\n  }\n  parser.bufferCheckPosition = MAX_BUFFER_LENGTH - maxActual + parser.position;\n}\nvar stringTokenPattern = /[\\\\\"\\n]/g;\nvar ClarinetParser = function () {\n  function ClarinetParser() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, ClarinetParser);\n    this._initialize(options);\n  }\n  _createClass(ClarinetParser, [{\n    key: \"_initialize\",\n    value: function _initialize(options) {\n      this._clearBuffers(this);\n      this.bufferCheckPosition = MAX_BUFFER_LENGTH;\n      this.q = '';\n      this.c = '';\n      this.p = '';\n      this.options = options || {};\n      this.closed = false;\n      this.closedRoot = false;\n      this.sawRoot = false;\n      this.tag = null;\n      this.error = null;\n      this.state = S.BEGIN;\n      this.stack = new Array();\n      this.position = this.column = 0;\n      this.line = 1;\n      this.slashed = false;\n      this.unicodeI = 0;\n      this.unicodeS = null;\n      this.depth = 0;\n      if ('onready' in options) {\n        this.onready = options.onready;\n      }\n      if ('onopenobject' in options) {\n        this.onopenobject = options.onopenobject;\n      }\n      if ('onkey' in options) {\n        this.onkey = options.onkey;\n      }\n      if ('oncloseobject' in options) {\n        this.oncloseobject = options.oncloseobject;\n      }\n      if ('onopenarray' in options) {\n        this.onopenarray = options.onopenarray;\n      }\n      if ('onclosearray' in options) {\n        this.onclosearray = options.onclosearray;\n      }\n      if ('onvalue' in options) {\n        this.onvalue = options.onvalue;\n      }\n      if ('onerror' in options) {\n        this.onerror = options.onerror;\n      }\n      if ('onend' in options) {\n        this.onend = options.onend;\n      }\n      if ('onchunkparsed' in options) {\n        this.onchunkparsed = options.onchunkparsed;\n      }\n      emit(this, 'onready');\n    }\n  }, {\n    key: \"_clearBuffers\",\n    value: function _clearBuffers() {\n      for (var buffer in buffers) {\n        this[buffer] = buffers[buffer];\n      }\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      if (this.state !== S.VALUE || this.depth !== 0) error(this, 'Unexpected end');\n      closeValue(this);\n      this.c = '';\n      this.closed = true;\n      emit(this, 'onend');\n      this._initialize(this.options);\n      return this;\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this.error = null;\n      return this;\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.write(null);\n    }\n  }, {\n    key: \"write\",\n    value: function write(chunk) {\n      if (this.error) {\n        throw this.error;\n      }\n      if (this.closed) {\n        return error(this, 'Cannot write after close. Assign an onready handler.');\n      }\n      if (chunk === null) {\n        return this.end();\n      }\n      var i = 0,\n        c = chunk.charCodeAt(0),\n        p = this.p;\n      if (DEBUG) console.log('write -> [' + chunk + ']');\n      while (c) {\n        p = c;\n        this.c = c = chunk.charCodeAt(i++);\n        if (p !== c) {\n          this.p = p;\n        } else {\n          p = this.p;\n        }\n        if (!c) break;\n        if (DEBUG) console.log(i, c, STATE[this.state]);\n        this.position++;\n        if (c === Char.lineFeed) {\n          this.line++;\n          this.column = 0;\n        } else this.column++;\n        switch (this.state) {\n          case S.BEGIN:\n            if (c === Char.openBrace) this.state = S.OPEN_OBJECT;else if (c === Char.openBracket) this.state = S.OPEN_ARRAY;else if (!isWhitespace(c)) {\n              error(this, 'Non-whitespace before {[.');\n            }\n            continue;\n          case S.OPEN_KEY:\n          case S.OPEN_OBJECT:\n            if (isWhitespace(c)) continue;\n            if (this.state === S.OPEN_KEY) this.stack.push(S.CLOSE_KEY);else {\n              if (c === Char.closeBrace) {\n                emit(this, 'onopenobject');\n                this.depth++;\n                emit(this, 'oncloseobject');\n                this.depth--;\n                this.state = this.stack.pop() || S.VALUE;\n                continue;\n              } else this.stack.push(S.CLOSE_OBJECT);\n            }\n            if (c === Char.doubleQuote) this.state = S.STRING;else error(this, 'Malformed object key should start with \"');\n            continue;\n          case S.CLOSE_KEY:\n          case S.CLOSE_OBJECT:\n            if (isWhitespace(c)) continue;\n            var event = this.state === S.CLOSE_KEY ? 'key' : 'object';\n            if (c === Char.colon) {\n              if (this.state === S.CLOSE_OBJECT) {\n                this.stack.push(S.CLOSE_OBJECT);\n                closeValue(this, 'onopenobject');\n                this.depth++;\n              } else closeValue(this, 'onkey');\n              this.state = S.VALUE;\n            } else if (c === Char.closeBrace) {\n              emitNode(this, 'oncloseobject');\n              this.depth--;\n              this.state = this.stack.pop() || S.VALUE;\n            } else if (c === Char.comma) {\n              if (this.state === S.CLOSE_OBJECT) this.stack.push(S.CLOSE_OBJECT);\n              closeValue(this);\n              this.state = S.OPEN_KEY;\n            } else error(this, 'Bad object');\n            continue;\n          case S.OPEN_ARRAY:\n          case S.VALUE:\n            if (isWhitespace(c)) continue;\n            if (this.state === S.OPEN_ARRAY) {\n              emit(this, 'onopenarray');\n              this.depth++;\n              this.state = S.VALUE;\n              if (c === Char.closeBracket) {\n                emit(this, 'onclosearray');\n                this.depth--;\n                this.state = this.stack.pop() || S.VALUE;\n                continue;\n              } else {\n                this.stack.push(S.CLOSE_ARRAY);\n              }\n            }\n            if (c === Char.doubleQuote) this.state = S.STRING;else if (c === Char.openBrace) this.state = S.OPEN_OBJECT;else if (c === Char.openBracket) this.state = S.OPEN_ARRAY;else if (c === Char.t) this.state = S.TRUE;else if (c === Char.f) this.state = S.FALSE;else if (c === Char.n) this.state = S.NULL;else if (c === Char.minus) {\n              this.numberNode += '-';\n            } else if (Char._0 <= c && c <= Char._9) {\n              this.numberNode += String.fromCharCode(c);\n              this.state = S.NUMBER_DIGIT;\n            } else error(this, 'Bad value');\n            continue;\n          case S.CLOSE_ARRAY:\n            if (c === Char.comma) {\n              this.stack.push(S.CLOSE_ARRAY);\n              closeValue(this, 'onvalue');\n              this.state = S.VALUE;\n            } else if (c === Char.closeBracket) {\n              emitNode(this, 'onclosearray');\n              this.depth--;\n              this.state = this.stack.pop() || S.VALUE;\n            } else if (isWhitespace(c)) continue;else error(this, 'Bad array');\n            continue;\n          case S.STRING:\n            if (this.textNode === undefined) {\n              this.textNode = '';\n            }\n            var starti = i - 1,\n              slashed = this.slashed,\n              unicodeI = this.unicodeI;\n            STRING_BIGLOOP: while (true) {\n              if (DEBUG) console.log(i, c, STATE[this.state], slashed);\n              while (unicodeI > 0) {\n                this.unicodeS += String.fromCharCode(c);\n                c = chunk.charCodeAt(i++);\n                this.position++;\n                if (unicodeI === 4) {\n                  this.textNode += String.fromCharCode(parseInt(this.unicodeS, 16));\n                  unicodeI = 0;\n                  starti = i - 1;\n                } else {\n                  unicodeI++;\n                }\n                if (!c) break STRING_BIGLOOP;\n              }\n              if (c === Char.doubleQuote && !slashed) {\n                this.state = this.stack.pop() || S.VALUE;\n                this.textNode += chunk.substring(starti, i - 1);\n                this.position += i - 1 - starti;\n                break;\n              }\n              if (c === Char.backslash && !slashed) {\n                slashed = true;\n                this.textNode += chunk.substring(starti, i - 1);\n                this.position += i - 1 - starti;\n                c = chunk.charCodeAt(i++);\n                this.position++;\n                if (!c) break;\n              }\n              if (slashed) {\n                slashed = false;\n                if (c === Char.n) {\n                  this.textNode += '\\n';\n                } else if (c === Char.r) {\n                  this.textNode += '\\r';\n                } else if (c === Char.t) {\n                  this.textNode += '\\t';\n                } else if (c === Char.f) {\n                  this.textNode += '\\f';\n                } else if (c === Char.b) {\n                  this.textNode += '\\b';\n                } else if (c === Char.u) {\n                  unicodeI = 1;\n                  this.unicodeS = '';\n                } else {\n                  this.textNode += String.fromCharCode(c);\n                }\n                c = chunk.charCodeAt(i++);\n                this.position++;\n                starti = i - 1;\n                if (!c) break;else continue;\n              }\n              stringTokenPattern.lastIndex = i;\n              var reResult = stringTokenPattern.exec(chunk);\n              if (reResult === null) {\n                i = chunk.length + 1;\n                this.textNode += chunk.substring(starti, i - 1);\n                this.position += i - 1 - starti;\n                break;\n              }\n              i = reResult.index + 1;\n              c = chunk.charCodeAt(reResult.index);\n              if (!c) {\n                this.textNode += chunk.substring(starti, i - 1);\n                this.position += i - 1 - starti;\n                break;\n              }\n            }\n            this.slashed = slashed;\n            this.unicodeI = unicodeI;\n            continue;\n          case S.TRUE:\n            if (c === Char.r) this.state = S.TRUE2;else error(this, 'Invalid true started with t' + c);\n            continue;\n          case S.TRUE2:\n            if (c === Char.u) this.state = S.TRUE3;else error(this, 'Invalid true started with tr' + c);\n            continue;\n          case S.TRUE3:\n            if (c === Char.e) {\n              emit(this, 'onvalue', true);\n              this.state = this.stack.pop() || S.VALUE;\n            } else error(this, 'Invalid true started with tru' + c);\n            continue;\n          case S.FALSE:\n            if (c === Char.a) this.state = S.FALSE2;else error(this, 'Invalid false started with f' + c);\n            continue;\n          case S.FALSE2:\n            if (c === Char.l) this.state = S.FALSE3;else error(this, 'Invalid false started with fa' + c);\n            continue;\n          case S.FALSE3:\n            if (c === Char.s) this.state = S.FALSE4;else error(this, 'Invalid false started with fal' + c);\n            continue;\n          case S.FALSE4:\n            if (c === Char.e) {\n              emit(this, 'onvalue', false);\n              this.state = this.stack.pop() || S.VALUE;\n            } else error(this, 'Invalid false started with fals' + c);\n            continue;\n          case S.NULL:\n            if (c === Char.u) this.state = S.NULL2;else error(this, 'Invalid null started with n' + c);\n            continue;\n          case S.NULL2:\n            if (c === Char.l) this.state = S.NULL3;else error(this, 'Invalid null started with nu' + c);\n            continue;\n          case S.NULL3:\n            if (c === Char.l) {\n              emit(this, 'onvalue', null);\n              this.state = this.stack.pop() || S.VALUE;\n            } else error(this, 'Invalid null started with nul' + c);\n            continue;\n          case S.NUMBER_DECIMAL_POINT:\n            if (c === Char.period) {\n              this.numberNode += '.';\n              this.state = S.NUMBER_DIGIT;\n            } else error(this, 'Leading zero not followed by .');\n            continue;\n          case S.NUMBER_DIGIT:\n            if (Char._0 <= c && c <= Char._9) this.numberNode += String.fromCharCode(c);else if (c === Char.period) {\n              if (this.numberNode.indexOf('.') !== -1) error(this, 'Invalid number has two dots');\n              this.numberNode += '.';\n            } else if (c === Char.e || c === Char.E) {\n              if (this.numberNode.indexOf('e') !== -1 || this.numberNode.indexOf('E') !== -1) error(this, 'Invalid number has two exponential');\n              this.numberNode += 'e';\n            } else if (c === Char.plus || c === Char.minus) {\n              if (!(p === Char.e || p === Char.E)) error(this, 'Invalid symbol in number');\n              this.numberNode += String.fromCharCode(c);\n            } else {\n              closeNumber(this);\n              i--;\n              this.state = this.stack.pop() || S.VALUE;\n            }\n            continue;\n          default:\n            error(this, 'Unknown state: ' + this.state);\n        }\n      }\n      if (this.position >= this.bufferCheckPosition) {\n        checkBufferLength(this);\n      }\n      emit(this, 'onchunkparsed');\n      return this;\n    }\n  }]);\n  return ClarinetParser;\n}();\nexport { ClarinetParser as default };\nfunction emit(parser, event, data) {\n  if (DEBUG) {\n    console.log('-- emit', event, data);\n  }\n  if (parser[event]) {\n    parser[event](data, parser);\n  }\n}\nfunction emitNode(parser, event, data) {\n  closeValue(parser);\n  emit(parser, event, data);\n}\nfunction closeValue(parser, event) {\n  parser.textNode = textopts(parser.options, parser.textNode);\n  if (parser.textNode !== undefined) {\n    emit(parser, event ? event : 'onvalue', parser.textNode);\n  }\n  parser.textNode = undefined;\n}\nfunction closeNumber(parser) {\n  if (parser.numberNode) emit(parser, 'onvalue', parseFloat(parser.numberNode));\n  parser.numberNode = '';\n}\nfunction textopts(opt, text) {\n  if (text === undefined) {\n    return text;\n  }\n  if (opt.trim) text = text.trim();\n  if (opt.normalize) text = text.replace(/\\s+/g, ' ');\n  return text;\n}\nfunction error(parser, er) {\n  closeValue(parser);\n  er += '\\nLine: ' + parser.line + '\\nColumn: ' + parser.column + '\\nChar: ' + parser.c;\n  er = new Error(er);\n  parser.error = er;\n  emit(parser, 'onerror', er);\n  return parser;\n}\nfunction isWhitespace(c) {\n  return c === Char.carriageReturn || c === Char.lineFeed || c === Char.space || c === Char.tab;\n}","map":{"version":3,"sources":["../../../../src/lib/clarinet/clarinet.js"],"names":["env","EVENTS","MAX_BUFFER_LENGTH","Number","MAX_SAFE_INTEGER","DEBUG","CDEBUG","buffers","textNode","undefined","numberNode","S","STATE","BEGIN","VALUE","OPEN_OBJECT","CLOSE_OBJECT","OPEN_ARRAY","CLOSE_ARRAY","TEXT_ESCAPE","STRING","BACKSLASH","END","OPEN_KEY","CLOSE_KEY","TRUE","TRUE2","TRUE3","FALSE","FALSE2","FALSE3","FALSE4","NULL","NULL2","NULL3","NUMBER_DECIMAL_POINT","NUMBER_DIGIT","s_","Char","tab","lineFeed","carriageReturn","space","doubleQuote","plus","comma","minus","period","_0","_9","colon","E","openBracket","backslash","closeBracket","a","b","e","f","l","n","r","s","t","u","openBrace","closeBrace","checkBufferLength","parser","maxAllowed","Math","max","maxActual","buffer","len","length","closeText","error","bufferCheckPosition","position","stringTokenPattern","ClarinetParser","options","_initialize","_clearBuffers","q","c","p","closed","closedRoot","sawRoot","tag","state","stack","Array","column","line","slashed","unicodeI","unicodeS","depth","onready","onopenobject","onkey","oncloseobject","onopenarray","onclosearray","onvalue","onerror","onend","onchunkparsed","emit","closeValue","write","chunk","end","i","charCodeAt","console","log","isWhitespace","push","pop","event","emitNode","String","fromCharCode","starti","STRING_BIGLOOP","parseInt","substring","lastIndex","reResult","exec","index","indexOf","closeNumber","data","textopts","parseFloat","opt","text","trim","normalize","replace","er","Error"],"mappings":"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","sourcesContent":["/* eslint-disable */\n// @ts-nocheck\nconst env = {};\n\nexport const EVENTS = [\n  'value',\n  'string',\n  'key',\n  'openobject',\n  'closeobject',\n  'openarray',\n  'closearray',\n  'error',\n  'end',\n  'ready'\n];\n\n// Removes the MAX_BUFFER_LENGTH, originally set to 64 * 1024\nconst MAX_BUFFER_LENGTH = Number.MAX_SAFE_INTEGER;\nconst DEBUG = env.CDEBUG === 'debug';\n\nconst buffers = {\n  textNode: undefined,\n  numberNode: ''\n};\n\nlet S = 0;\n\nconst STATE = {\n  BEGIN: S++,\n  VALUE: S++, // general stuff\n  OPEN_OBJECT: S++, // {\n  CLOSE_OBJECT: S++, // }\n  OPEN_ARRAY: S++, // [\n  CLOSE_ARRAY: S++, // ]\n  TEXT_ESCAPE: S++, // \\ stuff\n  STRING: S++, // \"\"\n  BACKSLASH: S++,\n  END: S++, // No more stack\n  OPEN_KEY: S++, // , \"a\"\n  CLOSE_KEY: S++, // :\n  TRUE: S++, // r\n  TRUE2: S++, // u\n  TRUE3: S++, // e\n  FALSE: S++, // a\n  FALSE2: S++, // l\n  FALSE3: S++, // s\n  FALSE4: S++, // e\n  NULL: S++, // u\n  NULL2: S++, // l\n  NULL3: S++, // l\n  NUMBER_DECIMAL_POINT: S++, // .\n  NUMBER_DIGIT: S++ // [0-9]\n};\n\nfor (var s_ in STATE) STATE[STATE[s_]] = s_;\n\n// switcharoo\nS = STATE;\n\nconst Char = {\n  tab: 0x09, // \\t\n  lineFeed: 0x0a, // \\n\n  carriageReturn: 0x0d, // \\r\n  space: 0x20, // \" \"\n\n  doubleQuote: 0x22, // \"\n  plus: 0x2b, // +\n  comma: 0x2c, // ,\n  minus: 0x2d, // -\n  period: 0x2e, // .\n\n  _0: 0x30, // 0\n  _9: 0x39, // 9\n\n  colon: 0x3a, // :\n\n  E: 0x45, // E\n\n  openBracket: 0x5b, // [\n  backslash: 0x5c, // \\\n  closeBracket: 0x5d, // ]\n\n  a: 0x61, // a\n  b: 0x62, // b\n  e: 0x65, // e\n  f: 0x66, // f\n  l: 0x6c, // l\n  n: 0x6e, // n\n  r: 0x72, // r\n  s: 0x73, // s\n  t: 0x74, // t\n  u: 0x75, // u\n\n  openBrace: 0x7b, // {\n  closeBrace: 0x7d // }\n};\n\nfunction checkBufferLength(parser) {\n  const maxAllowed = Math.max(MAX_BUFFER_LENGTH, 10);\n  let maxActual = 0;\n\n  for (var buffer in buffers) {\n    var len = parser[buffer] === undefined ? 0 : parser[buffer].length;\n    if (len > maxAllowed) {\n      switch (buffer) {\n        case 'text':\n          closeText(parser);\n          break;\n\n        default:\n          error(parser, 'Max buffer length exceeded: ' + buffer);\n      }\n    }\n    maxActual = Math.max(maxActual, len);\n  }\n  parser.bufferCheckPosition = MAX_BUFFER_LENGTH - maxActual + parser.position;\n}\n\nvar stringTokenPattern = /[\\\\\"\\n]/g;\n\nexport default class ClarinetParser {\n  constructor(options = {}) {\n    this._initialize(options);\n  }\n\n  _initialize(options) {\n    this._clearBuffers(this);\n    this.bufferCheckPosition = MAX_BUFFER_LENGTH;\n    this.q = '';\n    this.c = '';\n    this.p = '';\n    this.options = options || {};\n    this.closed = false;\n    this.closedRoot = false;\n    this.sawRoot = false;\n    this.tag = null;\n    this.error = null;\n    this.state = S.BEGIN;\n    this.stack = new Array();\n    // mostly just for error reporting\n    this.position = this.column = 0;\n    this.line = 1;\n    this.slashed = false;\n    this.unicodeI = 0;\n    this.unicodeS = null;\n    this.depth = 0;\n\n    // install callbacks\n    if ('onready' in options) {\n      this.onready = options.onready;\n    }\n\n    if ('onopenobject' in options) {\n      this.onopenobject = options.onopenobject;\n    }\n\n    if ('onkey' in options) {\n      this.onkey = options.onkey;\n    }\n\n    if ('oncloseobject' in options) {\n      this.oncloseobject = options.oncloseobject;\n    }\n\n    if ('onopenarray' in options) {\n      this.onopenarray = options.onopenarray;\n    }\n\n    if ('onclosearray' in options) {\n      this.onclosearray = options.onclosearray;\n    }\n\n    if ('onvalue' in options) {\n      this.onvalue = options.onvalue;\n    }\n\n    if ('onerror' in options) {\n      this.onerror = options.onerror;\n    }\n\n    if ('onend' in options) {\n      this.onend = options.onend;\n    }\n\n    if ('onchunkparsed' in options) {\n      this.onchunkparsed = options.onchunkparsed;\n    }\n\n    emit(this, 'onready');\n  }\n\n  _clearBuffers() {\n    for (var buffer in buffers) {\n      this[buffer] = buffers[buffer];\n    }\n  }\n\n  end() {\n    if (this.state !== S.VALUE || this.depth !== 0) error(this, 'Unexpected end');\n\n    closeValue(this);\n    this.c = '';\n    this.closed = true;\n    emit(this, 'onend');\n    this._initialize(this.options);\n    return this;\n  }\n\n  resume() {\n    this.error = null;\n    return this;\n  }\n\n  close() {\n    return this.write(null);\n  }\n\n  write(chunk) {\n    if (this.error) {\n      throw this.error;\n    }\n    if (this.closed) {\n      return error(this, 'Cannot write after close. Assign an onready handler.');\n    }\n    if (chunk === null) {\n      return this.end();\n    }\n    var i = 0,\n      c = chunk.charCodeAt(0),\n      p = this.p;\n    if (DEBUG) console.log('write -> [' + chunk + ']');\n    while (c) {\n      p = c;\n      this.c = c = chunk.charCodeAt(i++);\n      // if chunk doesnt have next, like streaming char by char\n      // this way we need to check if previous is really previous\n      // if not we need to reset to what the this says is the previous\n      // from buffer\n      if (p !== c) {\n        this.p = p;\n      } else {\n        p = this.p;\n      }\n\n      if (!c) break;\n\n      if (DEBUG) console.log(i, c, STATE[this.state]);\n      this.position++;\n      if (c === Char.lineFeed) {\n        this.line++;\n        this.column = 0;\n      } else this.column++;\n\n      switch (this.state) {\n        case S.BEGIN:\n          if (c === Char.openBrace) this.state = S.OPEN_OBJECT;\n          else if (c === Char.openBracket) this.state = S.OPEN_ARRAY;\n          else if (!isWhitespace(c)) {\n            error(this, 'Non-whitespace before {[.');\n          }\n          continue;\n\n        case S.OPEN_KEY:\n        case S.OPEN_OBJECT:\n          if (isWhitespace(c)) continue;\n          if (this.state === S.OPEN_KEY) this.stack.push(S.CLOSE_KEY);\n          else {\n            if (c === Char.closeBrace) {\n              emit(this, 'onopenobject');\n              this.depth++;\n              emit(this, 'oncloseobject');\n              this.depth--;\n              this.state = this.stack.pop() || S.VALUE;\n              continue;\n            } else this.stack.push(S.CLOSE_OBJECT);\n          }\n          if (c === Char.doubleQuote) this.state = S.STRING;\n          else error(this, 'Malformed object key should start with \"');\n          continue;\n\n        case S.CLOSE_KEY:\n        case S.CLOSE_OBJECT:\n          if (isWhitespace(c)) continue;\n          var event = this.state === S.CLOSE_KEY ? 'key' : 'object';\n          if (c === Char.colon) {\n            if (this.state === S.CLOSE_OBJECT) {\n              this.stack.push(S.CLOSE_OBJECT);\n              closeValue(this, 'onopenobject');\n              this.depth++;\n            } else closeValue(this, 'onkey');\n            this.state = S.VALUE;\n          } else if (c === Char.closeBrace) {\n            emitNode(this, 'oncloseobject');\n            this.depth--;\n            this.state = this.stack.pop() || S.VALUE;\n          } else if (c === Char.comma) {\n            if (this.state === S.CLOSE_OBJECT) this.stack.push(S.CLOSE_OBJECT);\n            closeValue(this);\n            this.state = S.OPEN_KEY;\n          } else error(this, 'Bad object');\n          continue;\n\n        case S.OPEN_ARRAY: // after an array there always a value\n        case S.VALUE:\n          if (isWhitespace(c)) continue;\n          if (this.state === S.OPEN_ARRAY) {\n            emit(this, 'onopenarray');\n            this.depth++;\n            this.state = S.VALUE;\n            if (c === Char.closeBracket) {\n              emit(this, 'onclosearray');\n              this.depth--;\n              this.state = this.stack.pop() || S.VALUE;\n              continue;\n            } else {\n              this.stack.push(S.CLOSE_ARRAY);\n            }\n          }\n          if (c === Char.doubleQuote) this.state = S.STRING;\n          else if (c === Char.openBrace) this.state = S.OPEN_OBJECT;\n          else if (c === Char.openBracket) this.state = S.OPEN_ARRAY;\n          else if (c === Char.t) this.state = S.TRUE;\n          else if (c === Char.f) this.state = S.FALSE;\n          else if (c === Char.n) this.state = S.NULL;\n          else if (c === Char.minus) {\n            // keep and continue\n            this.numberNode += '-';\n          } else if (Char._0 <= c && c <= Char._9) {\n            this.numberNode += String.fromCharCode(c);\n            this.state = S.NUMBER_DIGIT;\n          } else error(this, 'Bad value');\n          continue;\n\n        case S.CLOSE_ARRAY:\n          if (c === Char.comma) {\n            this.stack.push(S.CLOSE_ARRAY);\n            closeValue(this, 'onvalue');\n            this.state = S.VALUE;\n          } else if (c === Char.closeBracket) {\n            emitNode(this, 'onclosearray');\n            this.depth--;\n            this.state = this.stack.pop() || S.VALUE;\n          } else if (isWhitespace(c)) continue;\n          else error(this, 'Bad array');\n          continue;\n\n        case S.STRING:\n          if (this.textNode === undefined) {\n            this.textNode = '';\n          }\n\n          // thanks thejh, this is an about 50% performance improvement.\n          var starti = i - 1,\n            slashed = this.slashed,\n            unicodeI = this.unicodeI;\n          STRING_BIGLOOP: while (true) {\n            if (DEBUG) console.log(i, c, STATE[this.state], slashed);\n            // zero means \"no unicode active\". 1-4 mean \"parse some more\". end after 4.\n            while (unicodeI > 0) {\n              this.unicodeS += String.fromCharCode(c);\n              c = chunk.charCodeAt(i++);\n              this.position++;\n              if (unicodeI === 4) {\n                // TODO this might be slow? well, probably not used too often anyway\n                this.textNode += String.fromCharCode(parseInt(this.unicodeS, 16));\n                unicodeI = 0;\n                starti = i - 1;\n              } else {\n                unicodeI++;\n              }\n              // we can just break here: no stuff we skipped that still has to be sliced out or so\n              if (!c) break STRING_BIGLOOP;\n            }\n            if (c === Char.doubleQuote && !slashed) {\n              this.state = this.stack.pop() || S.VALUE;\n              this.textNode += chunk.substring(starti, i - 1);\n              this.position += i - 1 - starti;\n              break;\n            }\n            if (c === Char.backslash && !slashed) {\n              slashed = true;\n              this.textNode += chunk.substring(starti, i - 1);\n              this.position += i - 1 - starti;\n              c = chunk.charCodeAt(i++);\n              this.position++;\n              if (!c) break;\n            }\n            if (slashed) {\n              slashed = false;\n              if (c === Char.n) {\n                this.textNode += '\\n';\n              } else if (c === Char.r) {\n                this.textNode += '\\r';\n              } else if (c === Char.t) {\n                this.textNode += '\\t';\n              } else if (c === Char.f) {\n                this.textNode += '\\f';\n              } else if (c === Char.b) {\n                this.textNode += '\\b';\n              } else if (c === Char.u) {\n                // \\uxxxx. meh!\n                unicodeI = 1;\n                this.unicodeS = '';\n              } else {\n                this.textNode += String.fromCharCode(c);\n              }\n              c = chunk.charCodeAt(i++);\n              this.position++;\n              starti = i - 1;\n              if (!c) break;\n              else continue;\n            }\n\n            stringTokenPattern.lastIndex = i;\n            var reResult = stringTokenPattern.exec(chunk);\n            if (reResult === null) {\n              i = chunk.length + 1;\n              this.textNode += chunk.substring(starti, i - 1);\n              this.position += i - 1 - starti;\n              break;\n            }\n            i = reResult.index + 1;\n            c = chunk.charCodeAt(reResult.index);\n            if (!c) {\n              this.textNode += chunk.substring(starti, i - 1);\n              this.position += i - 1 - starti;\n              break;\n            }\n          }\n          this.slashed = slashed;\n          this.unicodeI = unicodeI;\n          continue;\n\n        case S.TRUE:\n          if (c === Char.r) this.state = S.TRUE2;\n          else error(this, 'Invalid true started with t' + c);\n          continue;\n\n        case S.TRUE2:\n          if (c === Char.u) this.state = S.TRUE3;\n          else error(this, 'Invalid true started with tr' + c);\n          continue;\n\n        case S.TRUE3:\n          if (c === Char.e) {\n            emit(this, 'onvalue', true);\n            this.state = this.stack.pop() || S.VALUE;\n          } else error(this, 'Invalid true started with tru' + c);\n          continue;\n\n        case S.FALSE:\n          if (c === Char.a) this.state = S.FALSE2;\n          else error(this, 'Invalid false started with f' + c);\n          continue;\n\n        case S.FALSE2:\n          if (c === Char.l) this.state = S.FALSE3;\n          else error(this, 'Invalid false started with fa' + c);\n          continue;\n\n        case S.FALSE3:\n          if (c === Char.s) this.state = S.FALSE4;\n          else error(this, 'Invalid false started with fal' + c);\n          continue;\n\n        case S.FALSE4:\n          if (c === Char.e) {\n            emit(this, 'onvalue', false);\n            this.state = this.stack.pop() || S.VALUE;\n          } else error(this, 'Invalid false started with fals' + c);\n          continue;\n\n        case S.NULL:\n          if (c === Char.u) this.state = S.NULL2;\n          else error(this, 'Invalid null started with n' + c);\n          continue;\n\n        case S.NULL2:\n          if (c === Char.l) this.state = S.NULL3;\n          else error(this, 'Invalid null started with nu' + c);\n          continue;\n\n        case S.NULL3:\n          if (c === Char.l) {\n            emit(this, 'onvalue', null);\n            this.state = this.stack.pop() || S.VALUE;\n          } else error(this, 'Invalid null started with nul' + c);\n          continue;\n\n        case S.NUMBER_DECIMAL_POINT:\n          if (c === Char.period) {\n            this.numberNode += '.';\n            this.state = S.NUMBER_DIGIT;\n          } else error(this, 'Leading zero not followed by .');\n          continue;\n\n        case S.NUMBER_DIGIT:\n          if (Char._0 <= c && c <= Char._9) this.numberNode += String.fromCharCode(c);\n          else if (c === Char.period) {\n            if (this.numberNode.indexOf('.') !== -1) error(this, 'Invalid number has two dots');\n            this.numberNode += '.';\n          } else if (c === Char.e || c === Char.E) {\n            if (this.numberNode.indexOf('e') !== -1 || this.numberNode.indexOf('E') !== -1)\n              error(this, 'Invalid number has two exponential');\n            this.numberNode += 'e';\n          } else if (c === Char.plus || c === Char.minus) {\n            if (!(p === Char.e || p === Char.E)) error(this, 'Invalid symbol in number');\n            this.numberNode += String.fromCharCode(c);\n          } else {\n            closeNumber(this);\n            i--; // go back one\n            this.state = this.stack.pop() || S.VALUE;\n          }\n          continue;\n\n        default:\n          error(this, 'Unknown state: ' + this.state);\n      }\n    }\n    if (this.position >= this.bufferCheckPosition) {\n      checkBufferLength(this);\n    }\n\n    emit(this, 'onchunkparsed');\n\n    return this;\n  }\n}\n\nfunction emit(parser, event, data) {\n  if (DEBUG) {\n    console.log('-- emit', event, data);\n  }\n  if (parser[event]) {\n    parser[event](data, parser);\n  }\n}\n\nfunction emitNode(parser, event, data) {\n  closeValue(parser);\n  emit(parser, event, data);\n}\n\nfunction closeValue(parser, event) {\n  parser.textNode = textopts(parser.options, parser.textNode);\n  if (parser.textNode !== undefined) {\n    emit(parser, event ? event : 'onvalue', parser.textNode);\n  }\n  parser.textNode = undefined;\n}\n\nfunction closeNumber(parser) {\n  if (parser.numberNode) emit(parser, 'onvalue', parseFloat(parser.numberNode));\n  parser.numberNode = '';\n}\n\nfunction textopts(opt, text) {\n  if (text === undefined) {\n    return text;\n  }\n  if (opt.trim) text = text.trim();\n  if (opt.normalize) text = text.replace(/\\s+/g, ' ');\n  return text;\n}\n\nfunction error(parser, er) {\n  closeValue(parser);\n  er += '\\nLine: ' + parser.line + '\\nColumn: ' + parser.column + '\\nChar: ' + parser.c;\n  er = new Error(er);\n  parser.error = er;\n  emit(parser, 'onerror', er);\n  return parser;\n}\n\nfunction isWhitespace(c) {\n  return c === Char.carriageReturn || c === Char.lineFeed || c === Char.space || c === Char.tab;\n}\n"]},"metadata":{},"sourceType":"module"}