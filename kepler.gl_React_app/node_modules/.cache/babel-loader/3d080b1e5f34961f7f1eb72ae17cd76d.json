{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { GL, GLType } from '@loaders.gl/math';\nvar Tile3DFeatureTable = function () {\n  function Tile3DFeatureTable(featureTableJson, featureTableBinary) {\n    _classCallCheck(this, Tile3DFeatureTable);\n    this.json = featureTableJson;\n    this.buffer = featureTableBinary;\n    this.featuresLength = 0;\n    this._cachedTypedArrays = {};\n  }\n  _createClass(Tile3DFeatureTable, [{\n    key: \"getExtension\",\n    value: function getExtension(extensionName) {\n      return this.json.extensions && this.json.extensions[extensionName];\n    }\n  }, {\n    key: \"hasProperty\",\n    value: function hasProperty(propertyName) {\n      return Boolean(this.json[propertyName]);\n    }\n  }, {\n    key: \"getGlobalProperty\",\n    value: function getGlobalProperty(propertyName) {\n      var componentType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : GL.UNSIGNED_INT;\n      var componentLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var jsonValue = this.json[propertyName];\n      if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {\n        return this._getTypedArrayFromBinary(propertyName, componentType, componentLength, 1, jsonValue.byteOffset);\n      }\n      return jsonValue;\n    }\n  }, {\n    key: \"getPropertyArray\",\n    value: function getPropertyArray(propertyName, componentType, componentLength) {\n      var jsonValue = this.json[propertyName];\n      if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {\n        if ('componentType' in jsonValue) {\n          componentType = GLType.fromName(jsonValue.componentType);\n        }\n        return this._getTypedArrayFromBinary(propertyName, componentType, componentLength, this.featuresLength, jsonValue.byteOffset);\n      }\n      return this._getTypedArrayFromArray(propertyName, componentType, jsonValue);\n    }\n  }, {\n    key: \"getProperty\",\n    value: function getProperty(propertyName, componentType, componentLength, featureId, result) {\n      var jsonValue = this.json[propertyName];\n      if (!jsonValue) {\n        return jsonValue;\n      }\n      var typedArray = this.getPropertyArray(propertyName, componentType, componentLength);\n      if (componentLength === 1) {\n        return typedArray[featureId];\n      }\n      for (var i = 0; i < componentLength; ++i) {\n        result[i] = typedArray[componentLength * featureId + i];\n      }\n      return result;\n    }\n  }, {\n    key: \"_getTypedArrayFromBinary\",\n    value: function _getTypedArrayFromBinary(propertyName, componentType, componentLength, count, byteOffset) {\n      var cachedTypedArrays = this._cachedTypedArrays;\n      var typedArray = cachedTypedArrays[propertyName];\n      if (!typedArray) {\n        typedArray = GLType.createTypedArray(componentType, this.buffer.buffer, this.buffer.byteOffset + byteOffset, count * componentLength);\n        cachedTypedArrays[propertyName] = typedArray;\n      }\n      return typedArray;\n    }\n  }, {\n    key: \"_getTypedArrayFromArray\",\n    value: function _getTypedArrayFromArray(propertyName, componentType, array) {\n      var cachedTypedArrays = this._cachedTypedArrays;\n      var typedArray = cachedTypedArrays[propertyName];\n      if (!typedArray) {\n        typedArray = GLType.createTypedArray(componentType, array);\n        cachedTypedArrays[propertyName] = typedArray;\n      }\n      return typedArray;\n    }\n  }]);\n  return Tile3DFeatureTable;\n}();\nexport { Tile3DFeatureTable as default };","map":{"version":3,"sources":["../../../../src/lib/classes/tile-3d-feature-table.js"],"names":["GL","GLType","Tile3DFeatureTable","featureTableJson","featureTableBinary","json","buffer","featuresLength","_cachedTypedArrays","extensionName","extensions","propertyName","Boolean","componentType","UNSIGNED_INT","componentLength","jsonValue","Number","isFinite","byteOffset","_getTypedArrayFromBinary","fromName","_getTypedArrayFromArray","featureId","result","typedArray","getPropertyArray","i","count","cachedTypedArrays","createTypedArray","array"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {GL, GLType} from '@loaders.gl/math';\n\n// Reference:\n// https://github.com/AnalyticalGraphicsInc/cesium/blob/1de96d087f0b17575eb1a3f736407b348c765d59/Source/Scene/Cesium3DTileFeatureTable.js\nexport default class Tile3DFeatureTable {\n  constructor(featureTableJson, featureTableBinary) {\n    this.json = featureTableJson;\n    this.buffer = featureTableBinary;\n    this.featuresLength = 0;\n    this._cachedTypedArrays = {};\n  }\n\n  getExtension(extensionName) {\n    return this.json.extensions && this.json.extensions[extensionName];\n  }\n\n  hasProperty(propertyName) {\n    return Boolean(this.json[propertyName]);\n  }\n\n  getGlobalProperty(propertyName, componentType = GL.UNSIGNED_INT, componentLength = 1) {\n    const jsonValue = this.json[propertyName];\n\n    if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {\n      return this._getTypedArrayFromBinary(\n        propertyName,\n        componentType,\n        componentLength,\n        1,\n        jsonValue.byteOffset\n      );\n    }\n\n    return jsonValue;\n  }\n\n  getPropertyArray(propertyName, componentType, componentLength) {\n    const jsonValue = this.json[propertyName];\n\n    if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {\n      if ('componentType' in jsonValue) {\n        componentType = GLType.fromName(jsonValue.componentType);\n      }\n      return this._getTypedArrayFromBinary(\n        propertyName,\n        componentType,\n        componentLength,\n        this.featuresLength,\n        jsonValue.byteOffset\n      );\n    }\n\n    return this._getTypedArrayFromArray(propertyName, componentType, jsonValue);\n  }\n\n  getProperty(propertyName, componentType, componentLength, featureId, result) {\n    const jsonValue = this.json[propertyName];\n    if (!jsonValue) {\n      return jsonValue;\n    }\n\n    const typedArray = this.getPropertyArray(propertyName, componentType, componentLength);\n\n    if (componentLength === 1) {\n      return typedArray[featureId];\n    }\n\n    for (let i = 0; i < componentLength; ++i) {\n      result[i] = typedArray[componentLength * featureId + i];\n    }\n\n    return result;\n  }\n\n  // HELPERS\n\n  _getTypedArrayFromBinary(propertyName, componentType, componentLength, count, byteOffset) {\n    const cachedTypedArrays = this._cachedTypedArrays;\n    let typedArray = cachedTypedArrays[propertyName];\n    if (!typedArray) {\n      typedArray = GLType.createTypedArray(\n        componentType,\n        this.buffer.buffer,\n        this.buffer.byteOffset + byteOffset,\n        count * componentLength\n      );\n      cachedTypedArrays[propertyName] = typedArray;\n    }\n    return typedArray;\n  }\n\n  _getTypedArrayFromArray(propertyName, componentType, array) {\n    const cachedTypedArrays = this._cachedTypedArrays;\n    let typedArray = cachedTypedArrays[propertyName];\n    if (!typedArray) {\n      typedArray = GLType.createTypedArray(componentType, array);\n      cachedTypedArrays[propertyName] = typedArray;\n    }\n    return typedArray;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}