{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pointToPolygonGeo = pointToPolygonGeo;\nvar _core = require(\"@deck.gl/core\");\n\n// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/**\n * top left of the grid to a square polygon for the hover layer\n * and current latitude\n * @param {object} object\n * @param {number} cellSize\n * @param {number} coverage\n * @param {object} properties\n * @param {object} mapState\n * @returns {object} - geojson feature\n */\n// TODO: TEST\nfunction pointToPolygonGeo(_ref) {\n  var object = _ref.object,\n    cellSize = _ref.cellSize,\n    coverage = _ref.coverage,\n    properties = _ref.properties,\n    mapState = _ref.mapState;\n  var position = object.position;\n  var viewport = new _core.WebMercatorViewport(mapState);\n  if (!position) {\n    return null;\n  }\n  return {\n    geometry: {\n      coordinates: [viewport.addMetersToLngLat(position, [cellSize * (0.5 - coverage / 2), cellSize * (0.5 - coverage / 2)]), viewport.addMetersToLngLat(position, [cellSize * (0.5 + coverage / 2), cellSize * (0.5 - coverage / 2)]), viewport.addMetersToLngLat(position, [cellSize * (0.5 + coverage / 2), cellSize * (0.5 + coverage / 2)]), viewport.addMetersToLngLat(position, [cellSize * (0.5 - coverage / 2), cellSize * (0.5 + coverage / 2)]), viewport.addMetersToLngLat(position, [cellSize * (0.5 - coverage / 2), cellSize * (0.5 - coverage / 2)])],\n      type: 'LineString'\n    },\n    properties: properties\n  };\n}","map":{"version":3,"sources":["../../../src/layers/grid-layer/grid-utils.js"],"names":["pointToPolygonGeo","object","cellSize","coverage","properties","mapState","position","viewport","WebMercatorViewport","geometry","coordinates","addMetersToLngLat","type"],"mappings":";;;;;;AAoBA,IAAA,KAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AApBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACO,SAASA,iBAAT,CAAA,IAAA,EAA+E;EAAA,IAAnDC,MAAmD,GAAA,IAAA,CAAnDA,MAAmD;IAA3CC,QAA2C,GAAA,IAAA,CAA3CA,QAA2C;IAAjCC,QAAiC,GAAA,IAAA,CAAjCA,QAAiC;IAAvBC,UAAuB,GAAA,IAAA,CAAvBA,UAAuB;IAAXC,QAAW,GAAA,IAAA,CAAXA,QAAW;EAAA,IAC7EC,QAD6E,GACjEL,MADiE,CAC7EK,QAD6E;EAEpF,IAAMC,QAAQ,GAAG,IAAIC,KAAAA,CAAAA,mBAAJ,CAAwBH,QAAxB,CAAjB;EAEA,IAAI,CAACC,QAAL,EAAe;IACb,OAAO,IAAP;EACD;EAED,OAAO;IACLG,QAAQ,EAAE;MACRC,WAAW,EAAE,CACXH,QAAQ,CAACI,iBAATJ,CAA2BD,QAA3BC,EAAqC,CACnCL,QAAQ,IAAI,GAAA,GAAMC,QAAQ,GAAG,CAArB,CAD2B,EAEnCD,QAAQ,IAAI,GAAA,GAAMC,QAAQ,GAAG,CAArB,CAF2B,CAArCI,CADW,EAKXA,QAAQ,CAACI,iBAATJ,CAA2BD,QAA3BC,EAAqC,CACnCL,QAAQ,IAAI,GAAA,GAAMC,QAAQ,GAAG,CAArB,CAD2B,EAEnCD,QAAQ,IAAI,GAAA,GAAMC,QAAQ,GAAG,CAArB,CAF2B,CAArCI,CALW,EASXA,QAAQ,CAACI,iBAATJ,CAA2BD,QAA3BC,EAAqC,CACnCL,QAAQ,IAAI,GAAA,GAAMC,QAAQ,GAAG,CAArB,CAD2B,EAEnCD,QAAQ,IAAI,GAAA,GAAMC,QAAQ,GAAG,CAArB,CAF2B,CAArCI,CATW,EAaXA,QAAQ,CAACI,iBAATJ,CAA2BD,QAA3BC,EAAqC,CACnCL,QAAQ,IAAI,GAAA,GAAMC,QAAQ,GAAG,CAArB,CAD2B,EAEnCD,QAAQ,IAAI,GAAA,GAAMC,QAAQ,GAAG,CAArB,CAF2B,CAArCI,CAbW,EAiBXA,QAAQ,CAACI,iBAATJ,CAA2BD,QAA3BC,EAAqC,CACnCL,QAAQ,IAAI,GAAA,GAAMC,QAAQ,GAAG,CAArB,CAD2B,EAEnCD,QAAQ,IAAI,GAAA,GAAMC,QAAQ,GAAG,CAArB,CAF2B,CAArCI,CAjBW,CADL;MAuBRK,IAAI,EAAE;IAvBE,CADL;IA0BLR,UAAU,EAAVA;EA1BK,CAAP;AA4BD","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {WebMercatorViewport} from '@deck.gl/core';\n\n/**\n * top left of the grid to a square polygon for the hover layer\n * and current latitude\n * @param {object} object\n * @param {number} cellSize\n * @param {number} coverage\n * @param {object} properties\n * @param {object} mapState\n * @returns {object} - geojson feature\n */\n\n// TODO: TEST\nexport function pointToPolygonGeo({object, cellSize, coverage, properties, mapState}) {\n  const {position} = object;\n  const viewport = new WebMercatorViewport(mapState);\n\n  if (!position) {\n    return null;\n  }\n\n  return {\n    geometry: {\n      coordinates: [\n        viewport.addMetersToLngLat(position, [\n          cellSize * (0.5 - coverage / 2),\n          cellSize * (0.5 - coverage / 2)\n        ]),\n        viewport.addMetersToLngLat(position, [\n          cellSize * (0.5 + coverage / 2),\n          cellSize * (0.5 - coverage / 2)\n        ]),\n        viewport.addMetersToLngLat(position, [\n          cellSize * (0.5 + coverage / 2),\n          cellSize * (0.5 + coverage / 2)\n        ]),\n        viewport.addMetersToLngLat(position, [\n          cellSize * (0.5 - coverage / 2),\n          cellSize * (0.5 + coverage / 2)\n        ]),\n        viewport.addMetersToLngLat(position, [\n          cellSize * (0.5 - coverage / 2),\n          cellSize * (0.5 - coverage / 2)\n        ])\n      ],\n      type: 'LineString'\n    },\n    properties\n  };\n}\n"]},"metadata":{},"sourceType":"script"}