{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _layers = require(\"@deck.gl/layers\");\nvar _shaderUtils = require(\"../layer-utils/shader-utils\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction addInstanceCoverage(vs) {\n  var addDecl = (0, _shaderUtils.editShader)(vs, 'hexagon cell vs add instance', 'attribute vec3 instancePickingColors;', \"attribute vec3 instancePickingColors;\\n     attribute float instanceCoverage;\");\n  return (0, _shaderUtils.editShader)(addDecl, 'hexagon cell vs add instance', 'float dotRadius = radius * coverage * shouldRender;', 'float dotRadius = radius * coverage * instanceCoverage * shouldRender;');\n} // TODO: export all deck.gl layers from kepler.gl\n\nvar EnhancedColumnLayer = /*#__PURE__*/function (_ColumnLayer) {\n  (0, _inherits2[\"default\"])(EnhancedColumnLayer, _ColumnLayer);\n  var _super = _createSuper(EnhancedColumnLayer);\n  function EnhancedColumnLayer() {\n    (0, _classCallCheck2[\"default\"])(this, EnhancedColumnLayer);\n    return _super.apply(this, arguments);\n  }\n  (0, _createClass2[\"default\"])(EnhancedColumnLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      var shaders = (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(EnhancedColumnLayer.prototype), \"getShaders\", this).call(this);\n      return _objectSpread(_objectSpread({}, shaders), {}, {\n        vs: addInstanceCoverage(shaders.vs)\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(EnhancedColumnLayer.prototype), \"initializeState\", this).call(this);\n      this.getAttributeManager().addInstanced({\n        instanceCoverage: {\n          size: 1,\n          accessor: 'getCoverage'\n        }\n      });\n    }\n  }]);\n  return EnhancedColumnLayer;\n}(_layers.ColumnLayer);\nEnhancedColumnLayer.layerName = 'EnhancedColumnLayer';\nvar _default = EnhancedColumnLayer;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../../../src/deckgl-layers/column-layer/enhanced-column-layer.js"],"names":["addInstanceCoverage","vs","addDecl","EnhancedColumnLayer","ColumnLayer","shaders","getAttributeManager","addInstanced","instanceCoverage","size","accessor","layerName"],"mappings":";;;;;;;;;;;;;;AAoBA,IAAA,OAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAASA,mBAAT,CAA6BC,EAA7B,EAAiC;EAC/B,IAAMC,OAAO,GAAG,CAAA,CAAA,EAAA,YAAA,CAAA,UAAA,EACdD,EADc,EAEd,8BAFc,EAGd,uCAHc,EAAA,+EAAA,CAAhB;EAQA,OAAO,CAAA,CAAA,EAAA,YAAA,CAAA,UAAA,EACLC,OADK,EAEL,8BAFK,EAGL,qDAHK,EAIL,wEAJK,CAAP;AAMD,C,CAED;;IACMC,mB;;;;;;;;;WACJ,SAAA,UAAA,GAAa;MACX,IAAME,OAAO,GAAA,CAAA,CAAA,EAAA,KAAA,CAAA,SAAA,CAAA,EAAA,CAAA,CAAA,EAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,mBAAA,CAAA,SAAA,CAAA,EAAA,YAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAb;MAEA,OAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EACKA,OADL,CAAA,EAAA,CAAA,CAAA,EAAA;QAEEJ,EAAE,EAAED,mBAAmB,CAACK,OAAO,CAACJ,EAAT;MAFzB,CAAA,CAAA;IAID;;;WAED,SAAA,eAAA,GAAkB;MAChB,CAAA,CAAA,EAAA,KAAA,CAAA,SAAA,CAAA,EAAA,CAAA,CAAA,EAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,mBAAA,CAAA,SAAA,CAAA,EAAA,iBAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA;MAEA,IAAA,CAAKK,mBAAL,EAAA,CAA2BC,YAA3B,CAAwC;QACtCC,gBAAgB,EAAE;UAACC,IAAI,EAAE,CAAP;UAAUC,QAAQ,EAAE;QAApB;MADoB,CAAxC,CAAA;IAGD;;;EAhB+BN,OAAAA,CAAAA,W;AAmBlCD,mBAAmB,CAACQ,SAApBR,GAAgC,qBAAhCA;eAEeA,mB","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {ColumnLayer} from '@deck.gl/layers';\nimport {editShader} from 'deckgl-layers/layer-utils/shader-utils';\n\nfunction addInstanceCoverage(vs) {\n  const addDecl = editShader(\n    vs,\n    'hexagon cell vs add instance',\n    'attribute vec3 instancePickingColors;',\n    `attribute vec3 instancePickingColors;\n     attribute float instanceCoverage;`\n  );\n\n  return editShader(\n    addDecl,\n    'hexagon cell vs add instance',\n    'float dotRadius = radius * coverage * shouldRender;',\n    'float dotRadius = radius * coverage * instanceCoverage * shouldRender;'\n  );\n}\n\n// TODO: export all deck.gl layers from kepler.gl\nclass EnhancedColumnLayer extends ColumnLayer {\n  getShaders() {\n    const shaders = super.getShaders();\n\n    return {\n      ...shaders,\n      vs: addInstanceCoverage(shaders.vs)\n    };\n  }\n\n  initializeState() {\n    super.initializeState();\n\n    this.getAttributeManager().addInstanced({\n      instanceCoverage: {size: 1, accessor: 'getCoverage'}\n    });\n  }\n}\n\nEnhancedColumnLayer.layerName = 'EnhancedColumnLayer';\n\nexport default EnhancedColumnLayer;\n"]},"metadata":{},"sourceType":"script"}