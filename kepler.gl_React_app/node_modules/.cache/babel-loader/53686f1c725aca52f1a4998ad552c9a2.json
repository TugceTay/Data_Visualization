{"ast":null,"code":"const ERR_TYPE_DEDUCTION = 'Failed to deduce GL constant from typed array';\nexport function getGLTypeFromTypedArray(arrayOrType) {\n  const type = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n  switch (type) {\n    case Float32Array:\n      return 5126;\n    case Uint16Array:\n      return 5123;\n    case Uint32Array:\n      return 5125;\n    case Uint8Array:\n      return 5121;\n    case Uint8ClampedArray:\n      return 5121;\n    case Int8Array:\n      return 5120;\n    case Int16Array:\n      return 5122;\n    case Int32Array:\n      return 5124;\n    default:\n      throw new Error(ERR_TYPE_DEDUCTION);\n  }\n}\nexport function getTypedArrayFromGLType(glType) {\n  let {\n    clamped = true\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  switch (glType) {\n    case 5126:\n      return Float32Array;\n    case 5123:\n    case 33635:\n    case 32819:\n    case 32820:\n      return Uint16Array;\n    case 5125:\n      return Uint32Array;\n    case 5121:\n      return clamped ? Uint8ClampedArray : Uint8Array;\n    case 5120:\n      return Int8Array;\n    case 5122:\n      return Int16Array;\n    case 5124:\n      return Int32Array;\n    default:\n      throw new Error('Failed to deduce typed array type from GL constant');\n  }\n}\nexport function flipRows(_ref) {\n  let {\n    data,\n    width,\n    height,\n    bytesPerPixel = 4,\n    temp\n  } = _ref;\n  const bytesPerRow = width * bytesPerPixel;\n  temp = temp || new Uint8Array(bytesPerRow);\n  for (let y = 0; y < height / 2; ++y) {\n    const topOffset = y * bytesPerRow;\n    const bottomOffset = (height - y - 1) * bytesPerRow;\n    temp.set(data.subarray(topOffset, topOffset + bytesPerRow));\n    data.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);\n    data.set(temp, bottomOffset);\n  }\n}\nexport function scalePixels(_ref2) {\n  let {\n    data,\n    width,\n    height\n  } = _ref2;\n  const newWidth = Math.round(width / 2);\n  const newHeight = Math.round(height / 2);\n  const newData = new Uint8Array(newWidth * newHeight * 4);\n  for (let y = 0; y < newHeight; y++) {\n    for (let x = 0; x < newWidth; x++) {\n      for (let c = 0; c < 4; c++) {\n        newData[(y * newWidth + x) * 4 + c] = data[(y * 2 * width + x * 2) * 4 + c];\n      }\n    }\n  }\n  return {\n    data: newData,\n    width: newWidth,\n    height: newHeight\n  };\n}","map":{"version":3,"sources":["../../../src/webgl-utils/typed-array-utils.js"],"names":["ERR_TYPE_DEDUCTION","getGLTypeFromTypedArray","arrayOrType","type","ArrayBuffer","isView","constructor","Float32Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray","Int8Array","Int16Array","Int32Array","Error","getTypedArrayFromGLType","glType","clamped","flipRows","data","width","height","bytesPerPixel","temp","bytesPerRow","y","topOffset","bottomOffset","set","subarray","copyWithin","scalePixels","newWidth","Math","round","newHeight","newData","x","c"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\n\nconst ERR_TYPE_DEDUCTION = 'Failed to deduce GL constant from typed array';\n\n// Converts TYPED ARRAYS to corresponding GL constant\n// Used to auto deduce gl parameter types\nexport function getGLTypeFromTypedArray(arrayOrType) {\n  // If typed array, look up constructor\n  const type = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n  switch (type) {\n    case Float32Array:\n      return GL.FLOAT;\n    case Uint16Array:\n      return GL.UNSIGNED_SHORT;\n    case Uint32Array:\n      return GL.UNSIGNED_INT;\n    case Uint8Array:\n      return GL.UNSIGNED_BYTE;\n    case Uint8ClampedArray:\n      return GL.UNSIGNED_BYTE;\n    case Int8Array:\n      return GL.BYTE;\n    case Int16Array:\n      return GL.SHORT;\n    case Int32Array:\n      return GL.INT;\n    default:\n      throw new Error(ERR_TYPE_DEDUCTION);\n  }\n}\n\n// Converts GL constant to corresponding TYPED ARRAY\n// Used to auto deduce gl parameter types\n\n/* eslint-disable complexity */\nexport function getTypedArrayFromGLType(glType, {clamped = true} = {}) {\n  // Sorted in some order of likelihood to reduce amount of comparisons\n  switch (glType) {\n    case GL.FLOAT:\n      return Float32Array;\n    case GL.UNSIGNED_SHORT:\n    case GL.UNSIGNED_SHORT_5_6_5:\n    case GL.UNSIGNED_SHORT_4_4_4_4:\n    case GL.UNSIGNED_SHORT_5_5_5_1:\n      return Uint16Array;\n    case GL.UNSIGNED_INT:\n      return Uint32Array;\n    case GL.UNSIGNED_BYTE:\n      return clamped ? Uint8ClampedArray : Uint8Array;\n    case GL.BYTE:\n      return Int8Array;\n    case GL.SHORT:\n      return Int16Array;\n    case GL.INT:\n      return Int32Array;\n    default:\n      throw new Error('Failed to deduce typed array type from GL constant');\n  }\n}\n/* eslint-enable complexity */\n\n// Flip rows (can be used on arrays returned from `Framebuffer.readPixels`)\n// https://stackoverflow.com/questions/41969562/\n// how-can-i-flip-the-result-of-webglrenderingcontext-readpixels\nexport function flipRows({data, width, height, bytesPerPixel = 4, temp}) {\n  const bytesPerRow = width * bytesPerPixel;\n\n  // make a temp buffer to hold one row\n  temp = temp || new Uint8Array(bytesPerRow);\n  for (let y = 0; y < height / 2; ++y) {\n    const topOffset = y * bytesPerRow;\n    const bottomOffset = (height - y - 1) * bytesPerRow;\n    // make copy of a row on the top half\n    temp.set(data.subarray(topOffset, topOffset + bytesPerRow));\n    // copy a row from the bottom half to the top\n    data.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);\n    // copy the copy of the top half row to the bottom half\n    data.set(temp, bottomOffset);\n  }\n}\n\nexport function scalePixels({data, width, height}) {\n  const newWidth = Math.round(width / 2);\n  const newHeight = Math.round(height / 2);\n  const newData = new Uint8Array(newWidth * newHeight * 4);\n  for (let y = 0; y < newHeight; y++) {\n    for (let x = 0; x < newWidth; x++) {\n      for (let c = 0; c < 4; c++) {\n        newData[(y * newWidth + x) * 4 + c] = data[(y * 2 * width + x * 2) * 4 + c];\n      }\n    }\n  }\n  return {data: newData, width: newWidth, height: newHeight};\n}\n"]},"metadata":{},"sourceType":"module"}