{"ast":null,"code":"export function getFirstCharacters(data) {\n  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n  if (typeof data === 'string') {\n    return data.slice(0, length);\n  } else if (ArrayBuffer.isView(data)) {\n    return getMagicString(data.buffer, data.byteOffset, length);\n  } else if (data instanceof ArrayBuffer) {\n    var byteOffset = 0;\n    return getMagicString(data, byteOffset, length);\n  }\n  return '';\n}\nexport function getMagicString(arrayBuffer, byteOffset, length) {\n  if (arrayBuffer.byteLength <= byteOffset + length) {\n    return '';\n  }\n  var dataView = new DataView(arrayBuffer);\n  var magic = '';\n  for (var i = 0; i < length; i++) {\n    magic += String.fromCharCode(dataView.getUint8(byteOffset + i));\n  }\n  return magic;\n}","map":{"version":3,"sources":["../../../../src/lib/binary-utils/get-first-characters.js"],"names":["getFirstCharacters","data","length","slice","ArrayBuffer","isView","getMagicString","buffer","byteOffset","arrayBuffer","byteLength","dataView","DataView","magic","i","String","fromCharCode","getUint8"],"mappings":"AAAA,OAAO,SAASA,kBAAT,CAA4BC,IAA5B,EAA8C;EAAA,IAAZC,MAAY,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAH,CAAG;EACnD,IAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;IAC5B,OAAOA,IAAI,CAACE,KAALF,CAAW,CAAXA,EAAcC,MAAdD,CAAP;EACD,CAFD,MAEO,IAAIG,WAAW,CAACC,MAAZD,CAAmBH,IAAnBG,CAAJ,EAA8B;IAEnC,OAAOE,cAAc,CAACL,IAAI,CAACM,MAAN,EAAcN,IAAI,CAACO,UAAnB,EAA+BN,MAA/B,CAArB;EACD,CAHM,MAGA,IAAID,IAAI,YAAYG,WAApB,EAAiC;IACtC,IAAMI,UAAU,GAAG,CAAnB;IACA,OAAOF,cAAc,CAACL,IAAD,EAAOO,UAAP,EAAmBN,MAAnB,CAArB;EACD;EACD,OAAO,EAAP;AACD;AAED,OAAO,SAASI,cAAT,CAAwBG,WAAxB,EAAqCD,UAArC,EAAiDN,MAAjD,EAAyD;EAC9D,IAAIO,WAAW,CAACC,UAAZD,IAA0BD,UAAU,GAAGN,MAA3C,EAAmD;IACjD,OAAO,EAAP;EACD;EACD,IAAMS,QAAQ,GAAG,IAAIC,QAAJ,CAAaH,WAAb,CAAjB;EACA,IAAII,KAAK,GAAG,EAAZ;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,MAApB,EAA4BY,CAAC,EAA7B,EAAiC;IAC/BD,KAAK,IAAIE,MAAM,CAACC,YAAPD,CAAoBJ,QAAQ,CAACM,QAATN,CAAkBH,UAAU,GAAGM,CAA/BH,CAApBI,CAATF;EACD;EACD,OAAOA,KAAP;AACD","sourcesContent":["export function getFirstCharacters(data, length = 5) {\n  if (typeof data === 'string') {\n    return data.slice(0, length);\n  } else if (ArrayBuffer.isView(data)) {\n    // Typed Arrays can have offsets into underlying buffer\n    return getMagicString(data.buffer, data.byteOffset, length);\n  } else if (data instanceof ArrayBuffer) {\n    const byteOffset = 0;\n    return getMagicString(data, byteOffset, length);\n  }\n  return '';\n}\n\nexport function getMagicString(arrayBuffer, byteOffset, length) {\n  if (arrayBuffer.byteLength <= byteOffset + length) {\n    return '';\n  }\n  const dataView = new DataView(arrayBuffer);\n  let magic = '';\n  for (let i = 0; i < length; i++) {\n    magic += String.fromCharCode(dataView.getUint8(byteOffset + i));\n  }\n  return magic;\n}\n"]},"metadata":{},"sourceType":"module"}