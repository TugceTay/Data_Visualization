{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { createMat4 } from './math-utils';\nimport { worldToPixels, pixelsToWorld } from './web-mercator-utils';\nimport * as mat4 from 'gl-matrix/mat4';\nvar IDENTITY = createMat4();\nvar Viewport = function () {\n  function Viewport() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      width = _ref.width,\n      height = _ref.height,\n      _ref$viewMatrix = _ref.viewMatrix,\n      viewMatrix = _ref$viewMatrix === void 0 ? IDENTITY : _ref$viewMatrix,\n      _ref$projectionMatrix = _ref.projectionMatrix,\n      projectionMatrix = _ref$projectionMatrix === void 0 ? IDENTITY : _ref$projectionMatrix;\n    _classCallCheck(this, Viewport);\n    this.width = width || 1;\n    this.height = height || 1;\n    this.scale = 1;\n    this.pixelsPerMeter = 1;\n    this.viewMatrix = viewMatrix;\n    this.projectionMatrix = projectionMatrix;\n    var vpm = createMat4();\n    mat4.multiply(vpm, vpm, this.projectionMatrix);\n    mat4.multiply(vpm, vpm, this.viewMatrix);\n    this.viewProjectionMatrix = vpm;\n    var m = createMat4();\n    mat4.scale(m, m, [this.width / 2, -this.height / 2, 1]);\n    mat4.translate(m, m, [1, -1, 0]);\n    mat4.multiply(m, m, this.viewProjectionMatrix);\n    var mInverse = mat4.invert(createMat4(), m);\n    if (!mInverse) {\n      throw new Error('Pixel project matrix not invertible');\n    }\n    this.pixelProjectionMatrix = m;\n    this.pixelUnprojectionMatrix = mInverse;\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n    this.projectFlat = this.projectFlat.bind(this);\n    this.unprojectFlat = this.unprojectFlat.bind(this);\n  }\n  _createClass(Viewport, [{\n    key: \"equals\",\n    value: function equals(viewport) {\n      if (!(viewport instanceof Viewport)) {\n        return false;\n      }\n      return viewport.width === this.width && viewport.height === this.height && mat4.equals(viewport.projectionMatrix, this.projectionMatrix) && mat4.equals(viewport.viewMatrix, this.viewMatrix);\n    }\n  }, {\n    key: \"project\",\n    value: function project(xyz) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref2$topLeft = _ref2.topLeft,\n        topLeft = _ref2$topLeft === void 0 ? true : _ref2$topLeft;\n      var worldPosition = this.projectPosition(xyz);\n      var coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n      var _coord = _slicedToArray(coord, 2),\n        x = _coord[0],\n        y = _coord[1];\n      var y2 = topLeft ? y : this.height - y;\n      return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n    }\n  }, {\n    key: \"unproject\",\n    value: function unproject(xyz) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref3$topLeft = _ref3.topLeft,\n        topLeft = _ref3$topLeft === void 0 ? true : _ref3$topLeft,\n        targetZ = _ref3.targetZ;\n      var _xyz = _slicedToArray(xyz, 3),\n        x = _xyz[0],\n        y = _xyz[1],\n        z = _xyz[2];\n      var y2 = topLeft ? y : this.height - y;\n      var targetZWorld = targetZ && targetZ * this.pixelsPerMeter;\n      var coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n      var _this$unprojectPositi = this.unprojectPosition(coord),\n        _this$unprojectPositi2 = _slicedToArray(_this$unprojectPositi, 3),\n        X = _this$unprojectPositi2[0],\n        Y = _this$unprojectPositi2[1],\n        Z = _this$unprojectPositi2[2];\n      if (Number.isFinite(z)) {\n        return [X, Y, Z];\n      }\n      return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n    }\n  }, {\n    key: \"projectPosition\",\n    value: function projectPosition(xyz) {\n      var _this$projectFlat = this.projectFlat(xyz),\n        _this$projectFlat2 = _slicedToArray(_this$projectFlat, 2),\n        X = _this$projectFlat2[0],\n        Y = _this$projectFlat2[1];\n      var Z = (xyz[2] || 0) * this.pixelsPerMeter;\n      return [X, Y, Z];\n    }\n  }, {\n    key: \"unprojectPosition\",\n    value: function unprojectPosition(xyz) {\n      var _this$unprojectFlat = this.unprojectFlat(xyz),\n        _this$unprojectFlat2 = _slicedToArray(_this$unprojectFlat, 2),\n        X = _this$unprojectFlat2[0],\n        Y = _this$unprojectFlat2[1];\n      var Z = (xyz[2] || 0) / this.pixelsPerMeter;\n      return [X, Y, Z];\n    }\n  }, {\n    key: \"projectFlat\",\n    value: function projectFlat(xyz) {\n      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.scale;\n      return xyz;\n    }\n  }, {\n    key: \"unprojectFlat\",\n    value: function unprojectFlat(xyz) {\n      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.scale;\n      return xyz;\n    }\n  }]);\n  return Viewport;\n}();\nexport { Viewport as default };","map":{"version":3,"sources":["../../src/viewport.js"],"names":["createMat4","worldToPixels","pixelsToWorld","mat4","IDENTITY","Viewport","width","height","viewMatrix","projectionMatrix","scale","pixelsPerMeter","vpm","multiply","viewProjectionMatrix","m","translate","mInverse","invert","Error","pixelProjectionMatrix","pixelUnprojectionMatrix","equals","bind","project","unproject","projectPosition","unprojectPosition","projectFlat","unprojectFlat","viewport","xyz","topLeft","worldPosition","coord","x","y","y2","length","targetZ","z","targetZWorld","X","Y","Z","Number","isFinite"],"mappings":"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","sourcesContent":["// View and Projection Matrix management\n\nimport {createMat4} from './math-utils';\nimport {worldToPixels, pixelsToWorld} from './web-mercator-utils';\n\nimport * as mat4 from 'gl-matrix/mat4';\n\nconst IDENTITY = createMat4();\n\nexport default class Viewport {\n  /**\n   * @classdesc\n   * Manages coordinate system transformations for deck.gl.\n   *\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   *\n   * @class\n   * @param {Object} opt - options\n   * @param {Boolean} mercator=true - Whether to use mercator projection\n   *\n   * @param {Number} opt.width=1 - Width of \"viewport\" or window\n   * @param {Number} opt.height=1 - Height of \"viewport\" or window\n   * @param {Array} opt.center=[0, 0] - Center of viewport\n   *   [longitude, latitude] or [x, y]\n   * @param {Number} opt.scale=1 - Either use scale or zoom\n   * @param {Number} opt.pitch=0 - Camera angle in degrees (0 is straight down)\n   * @param {Number} opt.bearing=0 - Map rotation in degrees (0 means north is up)\n   * @param {Number} opt.altitude= - Altitude of camera in screen units\n   *\n   * Web mercator projection short-hand parameters\n   * @param {Number} opt.latitude - Center of viewport on map (alternative to opt.center)\n   * @param {Number} opt.longitude - Center of viewport on map (alternative to opt.center)\n   * @param {Number} opt.zoom - Scale = Math.pow(2,zoom) on map (alternative to opt.scale)\n   */\n  /* eslint-disable complexity */\n  constructor({\n    // Window width/height in pixels (for pixel projection)\n    width,\n    height,\n    // Desc\n    viewMatrix = IDENTITY,\n    projectionMatrix = IDENTITY\n  } = {}) {\n    // Silently allow apps to send in 0,0\n    this.width = width || 1;\n    this.height = height || 1;\n    this.scale = 1;\n    this.pixelsPerMeter = 1;\n\n    this.viewMatrix = viewMatrix;\n    this.projectionMatrix = projectionMatrix;\n\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, this.projectionMatrix);\n    mat4.multiply(vpm, vpm, this.viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // Calculate matrices and scales needed for projection\n    /**\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n    const m = createMat4();\n\n    // matrix for conversion from location to screen coordinates\n    mat4.scale(m, m, [this.width / 2, -this.height / 2, 1]);\n    mat4.translate(m, m, [1, -1, 0]);\n\n    mat4.multiply(m, m, this.viewProjectionMatrix);\n\n    const mInverse = mat4.invert(createMat4(), m);\n    if (!mInverse) {\n      throw new Error('Pixel project matrix not invertible');\n    }\n\n    this.pixelProjectionMatrix = m;\n    this.pixelUnprojectionMatrix = mInverse;\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n    this.projectFlat = this.projectFlat.bind(this);\n    this.unprojectFlat = this.unprojectFlat.bind(this);\n  }\n  /* eslint-enable complexity */\n\n  // Two viewports are equal if width and height are identical, and if\n  // their view and projection matrices are (approximately) equal.\n  equals(viewport) {\n    if (!(viewport instanceof Viewport)) {\n      return false;\n    }\n\n    return viewport.width === this.width &&\n      viewport.height === this.height &&\n      mat4.equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      mat4.equals(viewport.viewMatrix, this.viewMatrix);\n  }\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether projected coords are top left\n   * @return {Array} - screen coordinates [x, y] or [x, y, z], z as pixel depth\n   */\n  project(xyz, {topLeft = true} = {}) {\n    const worldPosition = this.projectPosition(xyz);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz - screen coordinates, z as pixel depth\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether projected coords are top left\n   * @param {Object} opts.targetZ=0 - If pixel depth is unknown, targetZ is used as\n   *   the elevation plane to unproject onto\n   * @return {Array} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, {topLeft = true, targetZ} = {}) {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.pixelsPerMeter;\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  projectPosition(xyz) {\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.pixelsPerMeter;\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) / this.pixelsPerMeter;\n    return [X, Y, Z];\n  }\n\n  /**\n   * Project map coordinates to world coordinates.\n   * This should be overridden by each viewport that implements a specific\n   * geographic projection.\n   * @param {Array} xyz - map coordinates\n   * @return {Array} [x,y,z] world coordinates.\n   */\n  projectFlat(xyz, scale = this.scale) {\n    return xyz;\n  }\n\n  /**\n   * Project world coordinates to map coordinates.\n   * This should be overridden by each viewport that implements a specific\n   * geographic projection.\n   * @param {Array} xyz - world coordinates\n   * @return {Array} [x,y,z] map coordinates.\n   */\n  unprojectFlat(xyz, scale = this.scale) {\n    return xyz;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}