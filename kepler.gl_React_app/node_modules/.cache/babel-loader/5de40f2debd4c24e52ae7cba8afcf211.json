{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport parseGLBSync from './lib/parse-glb';\nvar VERSION = typeof \"2.3.13\" !== 'undefined' ? \"2.3.13\" : 'latest';\nexport default {\n  id: 'glb',\n  name: 'GLB',\n  version: VERSION,\n  extensions: ['glb'],\n  mimeTypes: ['model/gltf-binary'],\n  binary: true,\n  parse: function () {\n    var _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer, options) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", parseSync(arrayBuffer, options));\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    function parse(_x, _x2) {\n      return _parse.apply(this, arguments);\n    }\n    return parse;\n  }(),\n  parseSync: parseSync,\n  options: {\n    glb: {\n      strict: false\n    }\n  }\n};\nfunction parseSync(arrayBuffer, options) {\n  var _options$byteOffset = options.byteOffset,\n    byteOffset = _options$byteOffset === void 0 ? 0 : _options$byteOffset;\n  var glb = {};\n  parseGLBSync(glb, arrayBuffer, byteOffset, options);\n  return glb;\n}","map":{"version":3,"sources":["../../src/glb-loader.js"],"names":["parseGLBSync","VERSION","id","name","version","extensions","mimeTypes","binary","parse","arrayBuffer","options","parseSync","glb","strict","byteOffset"],"mappings":";;AACA,OAAOA,YAAP,MAAyB,iBAAzB;AAKA,IAAMC,OAAO,GAAG,OAAA,QAAA,KAAuB,WAAvB,GAAA,QAAA,GAAmD,QAAnE;AAGA,eAAe;EACbC,EAAE,EAAE,KADS;EAEbC,IAAI,EAAE,KAFO;EAGbC,OAAO,EAAEH,OAHI;EAIbI,UAAU,EAAE,CAAC,KAAD,CAJC;EAKbC,SAAS,EAAE,CAAC,mBAAD,CALE;EAMbC,MAAM,EAAE,IANK;EAObC,KAAK,EAAA,YAAA;IAAA,IAAA,MAAA,GAAA,iBAAA,CAAA,mBAAA,CAAA,IAAA,CAAE,SAAA,OAAA,CAAOC,WAAP,EAAoBC,OAApB,EAAA;MAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;QAAA,OAAA,CAAA,EAAA;UAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;YAAA,KAAA,CAAA;cAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAgCC,SAAS,CAACF,WAAD,EAAcC,OAAd,CAAzC,CAAA;YAAA,KAAA,CAAA;YAAA,KAAA,KAAA;cAAA,OAAA,QAAA,CAAA,IAAA,EAAA;UAAA;QAAA;MAAA,CAAA,EAAA,OAAA,CAAA;IAAA,CAAF,CAAA,CAAA;IAAA,SAAA,KAAA,CAAA,EAAA,EAAA,GAAA,EAAA;MAAA,OAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;IAAA;IAAA,OAAA,KAAA;EAAA,CAAA,EAPQ;EAQbC,SAAS,EAATA,SARa;EASbD,OAAO,EAAE;IACPE,GAAG,EAAE;MACHC,MAAM,EAAE;IADL;EADE;AATI,CAAf;AAgBA,SAASF,SAAT,CAAmBF,WAAnB,EAAgCC,OAAhC,EAAyC;EAAA,IAAA,mBAAA,GACdA,OADc,CAChCI,UADgC;IAChCA,UADgC,GAAA,mBAAA,KAAA,KAAA,CAAA,GACnB,CADmB,GAAA,mBAAA;EAEvC,IAAMF,GAAG,GAAG,CAAA,CAAZ;EACAZ,YAAY,CAACY,GAAD,EAAMH,WAAN,EAAmBK,UAAnB,EAA+BJ,OAA/B,CAAZV;EACA,OAAOY,GAAP;AACD","sourcesContent":["// GLB is the binary container format for GLTF\nimport parseGLBSync from './lib/parse-glb';\n/** @typedef {import('@loaders.gl/loader-utils').LoaderObject} LoaderObject */\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\n/** @type {LoaderObject} */\nexport default {\n  id: 'glb',\n  name: 'GLB',\n  version: VERSION,\n  extensions: ['glb'],\n  mimeTypes: ['model/gltf-binary'],\n  binary: true,\n  parse: async (arrayBuffer, options) => parseSync(arrayBuffer, options),\n  parseSync,\n  options: {\n    glb: {\n      strict: false // Enables deprecated XVIZ support (illegal CHUNK formats)\n    }\n  }\n};\n\nfunction parseSync(arrayBuffer, options) {\n  const {byteOffset = 0} = options;\n  const glb = {};\n  parseGLBSync(glb, arrayBuffer, byteOffset, options);\n  return glb;\n}\n"]},"metadata":{},"sourceType":"module"}