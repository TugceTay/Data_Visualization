{"ast":null,"code":"import ChildProcess from 'child_process';\nexport function getAvailablePort() {\n  var defaultPort = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3000;\n  return new Promise(function (resolve, reject) {\n    ChildProcess.exec('lsof -i -P -n | grep LISTEN', function (error, stdout, stderr) {\n      if (error) {\n        resolve(defaultPort);\n        return;\n      }\n      var portsInUse = [];\n      var regex = /:(\\d+) \\(LISTEN\\)/;\n      stdout.split('\\n').forEach(function (line) {\n        var match = line.match(regex);\n        if (match) {\n          portsInUse.push(Number(match[1]));\n        }\n      });\n      var port = defaultPort;\n      while (portsInUse.includes(port)) {\n        port++;\n      }\n      resolve(port);\n    });\n  });\n}","map":{"version":3,"sources":["../../../../src/lib/process-utils/process-utils.js"],"names":["ChildProcess","getAvailablePort","defaultPort","Promise","resolve","reject","exec","error","stdout","stderr","portsInUse","regex","split","forEach","match","line","push","Number","port","includes"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,eAAzB;AAIA,OAAO,SAASC,gBAAT,GAA8C;EAAA,IAApBC,WAAoB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAN,IAAM;EACnD,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;IAEtCL,YAAY,CAACM,IAAbN,CAAkB,6BAAlBA,EAAiD,UAACO,KAAD,EAAQC,MAAR,EAAgBC,MAAhB,EAA2B;MAC1E,IAAIF,KAAJ,EAAW;QAETH,OAAO,CAACF,WAAD,CAAPE;QACA;MACD;MAED,IAAMM,UAAU,GAAG,EAAnB;MACA,IAAMC,KAAK,GAAG,mBAAd;MACAH,MAAM,CAACI,KAAPJ,CAAa,IAAbA,CAAAA,CAAmBK,OAAnBL,CAA2B,UAAA,IAAI,EAAI;QACjC,IAAMM,KAAK,GAAGC,IAAI,CAACD,KAALC,CAAWJ,KAAXI,CAAd;QACA,IAAID,KAAJ,EAAW;UACTJ,UAAU,CAACM,IAAXN,CAAgBO,MAAM,CAACH,KAAK,CAAC,CAAD,CAAN,CAAtBJ,CAAAA;QACD;MACF,CALDF,CAAAA;MAMA,IAAIU,IAAI,GAAGhB,WAAX;MACA,OAAOQ,UAAU,CAACS,QAAXT,CAAoBQ,IAApBR,CAAP,EAAkC;QAChCQ,IAAI,EAAA;MACL;MACDd,OAAO,CAACc,IAAD,CAAPd;IACD,CApBDJ,CAAAA;EAqBD,CAvBM,CAAP;AAwBD","sourcesContent":["import ChildProcess from 'child_process';\n\n// Get an available port\n// Works on Unix systems\nexport function getAvailablePort(defaultPort = 3000) {\n  return new Promise((resolve, reject) => {\n    // Get a list of all ports in use\n    ChildProcess.exec('lsof -i -P -n | grep LISTEN', (error, stdout, stderr) => {\n      if (error) {\n        // likely no permission, e.g. CI\n        resolve(defaultPort);\n        return;\n      }\n\n      const portsInUse = [];\n      const regex = /:(\\d+) \\(LISTEN\\)/;\n      stdout.split('\\n').forEach(line => {\n        const match = line.match(regex);\n        if (match) {\n          portsInUse.push(Number(match[1]));\n        }\n      });\n      let port = defaultPort;\n      while (portsInUse.includes(port)) {\n        port++;\n      }\n      resolve(port);\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}