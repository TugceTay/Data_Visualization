{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nimport GLTFScenegraph from '../gltf-scenegraph';\nimport { KHR_MATERIALS_UNLIT } from '../gltf-constants';\nexport function decode(gltfData, options) {\n  var gltfScenegraph = new GLTFScenegraph(gltfData);\n  var json = gltfScenegraph.json;\n  gltfScenegraph.removeExtension(KHR_MATERIALS_UNLIT);\n  var _iterator = _createForOfIteratorHelper(json.materials || []),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var material = _step.value;\n      var extension = material.extensions && material.extensions.KHR_materials_unlit;\n      if (extension) {\n        material.unlit = true;\n      }\n      gltfScenegraph.removeObjectExtension(material, KHR_MATERIALS_UNLIT);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nexport function encode(gltfData, options) {\n  var gltfScenegraph = new GLTFScenegraph(gltfData);\n  var json = gltfScenegraph.json;\n  if (gltfScenegraph.materials) {\n    var _iterator2 = _createForOfIteratorHelper(json.materials),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var material = _step2.value;\n        if (material.unlit) {\n          delete material.unlit;\n          gltfScenegraph.addObjectExtension(material, KHR_MATERIALS_UNLIT, {});\n          gltfScenegraph.addExtension(KHR_MATERIALS_UNLIT);\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n}","map":{"version":3,"sources":["../../../../src/lib/extensions/KHR_materials_unlit.js"],"names":["GLTFScenegraph","KHR_MATERIALS_UNLIT","decode","gltfData","options","gltfScenegraph","json","removeExtension","material","materials","extension","extensions","KHR_materials_unlit","unlit","removeObjectExtension","encode","addObjectExtension","addExtension"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,OAAOA,cAAP,MAA2B,oBAA3B;AACA,SAAQC,mBAAR,QAAkC,mBAAlC;AAEA,OAAO,SAASC,MAAT,CAAgBC,QAAhB,EAA0BC,OAA1B,EAAmC;EACxC,IAAMC,cAAc,GAAG,IAAIL,cAAJ,CAAmBG,QAAnB,CAAvB;EADwC,IAEjCG,IAFiC,GAEzBD,cAFyB,CAEjCC,IAFiC;EAKxCD,cAAc,CAACE,eAAfF,CAA+BJ,mBAA/BI,CAAAA;EALwC,IAAA,SAAA,GAAA,0BAAA,CASjBC,IAAI,CAACG,SAALH,IAAkB,EATD,CAAA;IAAA,KAAA;EAAA,IAAA;IASxC,KAAA,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAA6C;MAAA,IAAlCE,QAAkC,GAAA,KAAA,CAAA,KAAA;MAC3C,IAAME,SAAS,GAAGF,QAAQ,CAACG,UAATH,IAAuBA,QAAQ,CAACG,UAATH,CAAoBI,mBAA7D;MACA,IAAIF,SAAJ,EAAe;QACbF,QAAQ,CAACK,KAATL,GAAiB,IAAjBA;MACD;MACDH,cAAc,CAACS,qBAAfT,CAAqCG,QAArCH,EAA+CJ,mBAA/CI,CAAAA;IACD;EAfuC,CAAA,CAAA,OAAA,GAAA,EAAA;IAAA,SAAA,CAAA,CAAA,CAAA,GAAA,CAAA;EAAA,CAAA,SAAA;IAAA,SAAA,CAAA,CAAA,EAAA;EAAA;AAgBzC;AAED,OAAO,SAASU,MAAT,CAAgBZ,QAAhB,EAA0BC,OAA1B,EAAmC;EACxC,IAAMC,cAAc,GAAG,IAAIL,cAAJ,CAAmBG,QAAnB,CAAvB;EADwC,IAEjCG,IAFiC,GAEzBD,cAFyB,CAEjCC,IAFiC;EAOxC,IAAID,cAAc,CAACI,SAAnB,EAA8B;IAAA,IAAA,UAAA,GAAA,0BAAA,CACLH,IAAI,CAACG,SADA,CAAA;MAAA,MAAA;IAAA,IAAA;MAC5B,KAAA,UAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,MAAA,GAAA,UAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAuC;QAAA,IAA5BD,QAA4B,GAAA,MAAA,CAAA,KAAA;QACrC,IAAIA,QAAQ,CAACK,KAAb,EAAoB;UAClB,OAAOL,QAAQ,CAACK,KAAhB;UACAR,cAAc,CAACW,kBAAfX,CAAkCG,QAAlCH,EAA4CJ,mBAA5CI,EAAiE,CAAA,CAAjEA,CAAAA;UACAA,cAAc,CAACY,YAAfZ,CAA4BJ,mBAA5BI,CAAAA;QACD;MACF;IAP2B,CAAA,CAAA,OAAA,GAAA,EAAA;MAAA,UAAA,CAAA,CAAA,CAAA,GAAA,CAAA;IAAA,CAAA,SAAA;MAAA,UAAA,CAAA,CAAA,EAAA;IAAA;EAQ7B;AACF","sourcesContent":["// GLTF EXTENSION: KHR_materials_unlit\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit\n\nimport GLTFScenegraph from '../gltf-scenegraph';\nimport {KHR_MATERIALS_UNLIT} from '../gltf-constants';\n\nexport function decode(gltfData, options) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  // Remove the top-level extension\n  gltfScenegraph.removeExtension(KHR_MATERIALS_UNLIT);\n\n  // Any nodes that have the extension, add lights field pointing to light object\n  // and remove the extension\n  for (const material of json.materials || []) {\n    const extension = material.extensions && material.extensions.KHR_materials_unlit;\n    if (extension) {\n      material.unlit = true;\n    }\n    gltfScenegraph.removeObjectExtension(material, KHR_MATERIALS_UNLIT);\n  }\n}\n\nexport function encode(gltfData, options) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  // Any nodes that have lights field pointing to light object\n  // add the extension\n  // @ts-ignore\n  if (gltfScenegraph.materials) {\n    for (const material of json.materials) {\n      if (material.unlit) {\n        delete material.unlit;\n        gltfScenegraph.addObjectExtension(material, KHR_MATERIALS_UNLIT, {});\n        gltfScenegraph.addExtension(KHR_MATERIALS_UNLIT);\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}