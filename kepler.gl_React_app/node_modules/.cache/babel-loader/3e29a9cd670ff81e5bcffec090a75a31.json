{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { isWebGL2 } from '@luma.gl/core';\nexport function getBounds(points) {\n  var x = points.map(function (p) {\n    return p[0];\n  });\n  var y = points.map(function (p) {\n    return p[1];\n  });\n  var xMin = Math.min.apply(null, x);\n  var xMax = Math.max.apply(null, x);\n  var yMin = Math.min.apply(null, y);\n  var yMax = Math.max.apply(null, y);\n  return [xMin, yMin, xMax, yMax];\n}\nexport function boundsContain(currentBounds, targetBounds) {\n  if (targetBounds[0] >= currentBounds[0] && targetBounds[2] <= currentBounds[2] && targetBounds[1] >= currentBounds[1] && targetBounds[3] <= currentBounds[3]) {\n    return true;\n  }\n  return false;\n}\nvar scratchArray = new Float32Array(12);\nexport function packVertices(points) {\n  var dimensions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var index = 0;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n  try {\n    for (var _iterator = points[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var point = _step.value;\n      for (var i = 0; i < dimensions; i++) {\n        scratchArray[index++] = point[i] || 0;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n  return scratchArray;\n}\nexport function scaleToAspectRatio(boundingBox, width, height) {\n  var _boundingBox = _slicedToArray(boundingBox, 4),\n    xMin = _boundingBox[0],\n    yMin = _boundingBox[1],\n    xMax = _boundingBox[2],\n    yMax = _boundingBox[3];\n  var currentWidth = xMax - xMin;\n  var currentHeight = yMax - yMin;\n  var newWidth = currentWidth;\n  var newHeight = currentHeight;\n  if (currentWidth / currentHeight < width / height) {\n    newWidth = width / height * currentHeight;\n  } else {\n    newHeight = height / width * currentWidth;\n  }\n  if (newWidth < width) {\n    newWidth = width;\n    newHeight = height;\n  }\n  var xCenter = (xMax + xMin) / 2;\n  var yCenter = (yMax + yMin) / 2;\n  return [xCenter - newWidth / 2, yCenter - newHeight / 2, xCenter + newWidth / 2, yCenter + newHeight / 2];\n}\nexport function getTextureCoordinates(point, bounds) {\n  var _bounds = _slicedToArray(bounds, 4),\n    xMin = _bounds[0],\n    yMin = _bounds[1],\n    xMax = _bounds[2],\n    yMax = _bounds[3];\n  return [(point[0] - xMin) / (xMax - xMin), (point[1] - yMin) / (yMax - yMin)];\n}\nexport function getTextureParams(_ref) {\n  var gl = _ref.gl,\n    floatTargetSupport = _ref.floatTargetSupport;\n  return {\n    format: isWebGL2(gl) ? 34836 : 6408,\n    type: floatTargetSupport ? 5126 : 5121\n  };\n}","map":{"version":3,"sources":["../../../src/heatmap-layer/heatmap-layer-utils.js"],"names":["isWebGL2","getBounds","points","x","map","p","y","xMin","Math","min","apply","xMax","max","yMin","yMax","boundsContain","currentBounds","targetBounds","scratchArray","Float32Array","packVertices","dimensions","index","point","i","scaleToAspectRatio","boundingBox","width","height","currentWidth","currentHeight","newWidth","newHeight","xCenter","yCenter","getTextureCoordinates","bounds","getTextureParams","gl","floatTargetSupport","format","type"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {isWebGL2} from '@luma.gl/core';\n\nexport function getBounds(points) {\n  // Now build bounding box in world space (aligned to world coordiante system)\n  const x = points.map(p => p[0]);\n  const y = points.map(p => p[1]);\n\n  const xMin = Math.min.apply(null, x);\n  const xMax = Math.max.apply(null, x);\n  const yMin = Math.min.apply(null, y);\n  const yMax = Math.max.apply(null, y);\n\n  return [xMin, yMin, xMax, yMax];\n}\n\n// true if currentBounds contains targetBounds, false otherwise\nexport function boundsContain(currentBounds, targetBounds) {\n  if (\n    targetBounds[0] >= currentBounds[0] &&\n    targetBounds[2] <= currentBounds[2] &&\n    targetBounds[1] >= currentBounds[1] &&\n    targetBounds[3] <= currentBounds[3]\n  ) {\n    return true;\n  }\n  return false;\n}\n\nconst scratchArray = new Float32Array(12);\n\n// For given rectangle bounds generates two triangles vertices that coverit completely\nexport function packVertices(points, dimensions = 2) {\n  let index = 0;\n  for (const point of points) {\n    for (let i = 0; i < dimensions; i++) {\n      scratchArray[index++] = point[i] || 0;\n    }\n  }\n  return scratchArray;\n}\n\n// Expands boundingBox:[xMin, yMin, xMax, yMax] to match aspect ratio of given width and height\nexport function scaleToAspectRatio(boundingBox, width, height) {\n  const [xMin, yMin, xMax, yMax] = boundingBox;\n\n  const currentWidth = xMax - xMin;\n  const currentHeight = yMax - yMin;\n\n  let newWidth = currentWidth;\n  let newHeight = currentHeight;\n  if (currentWidth / currentHeight < width / height) {\n    // expand bounding box width\n    newWidth = (width / height) * currentHeight;\n  } else {\n    newHeight = (height / width) * currentWidth;\n  }\n\n  if (newWidth < width) {\n    newWidth = width;\n    newHeight = height;\n  }\n\n  const xCenter = (xMax + xMin) / 2;\n  const yCenter = (yMax + yMin) / 2;\n\n  return [\n    xCenter - newWidth / 2,\n    yCenter - newHeight / 2,\n    xCenter + newWidth / 2,\n    yCenter + newHeight / 2\n  ];\n}\n\n// Get texture coordiante of point inside a bounding box\nexport function getTextureCoordinates(point, bounds) {\n  const [xMin, yMin, xMax, yMax] = bounds;\n  return [(point[0] - xMin) / (xMax - xMin), (point[1] - yMin) / (yMax - yMin)];\n}\n\n// Returns format and type for creating texture objects\nexport function getTextureParams({gl, floatTargetSupport}) {\n  return {\n    // format:  should be RGBA32F on WebGL2 (float textures), RGBA in WebGL1 for float or non float textures\n    format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n    type: floatTargetSupport ? GL.FLOAT : GL.UNSIGNED_BYTE\n  };\n}\n"]},"metadata":{},"sourceType":"module"}