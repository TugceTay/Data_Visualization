{"ast":null,"code":"import { Vector3, toRadians, toDegrees, config } from '@math.gl/core';\nimport { WGS84_CONSTANTS } from './constants';\nfunction identity(x) {\n  return x;\n}\nconst scratchVector = new Vector3();\nexport function fromCartographic(cartographic) {\n  let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let map = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : identity;\n  if ('longitude' in cartographic) {\n    result[0] = map(cartographic.longitude);\n    result[1] = map(cartographic.latitude);\n    result[2] = cartographic.height;\n  } else if ('x' in cartographic) {\n    result[0] = map(cartographic.x);\n    result[1] = map(cartographic.y);\n    result[2] = cartographic.z;\n  } else {\n    result[0] = map(cartographic[0]);\n    result[1] = map(cartographic[1]);\n    result[2] = cartographic[2];\n  }\n  return result;\n}\nexport function fromCartographicToRadians(cartographic) {\n  let vector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return fromCartographic(cartographic, vector, config._cartographicRadians ? identity : toRadians);\n}\nexport function fromCartographicToDegrees(cartographic) {\n  let vector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return fromCartographic(cartographic, vector, config._cartographicRadians ? toDegrees : identity);\n}\nexport function toCartographic(vector, cartographic) {\n  let map = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : identity;\n  if ('longitude' in cartographic) {\n    cartographic.longitude = map(vector[0]);\n    cartographic.latitude = map(vector[1]);\n    cartographic.height = vector[2];\n  } else if ('x' in cartographic) {\n    cartographic.x = map(vector[0]);\n    cartographic.y = map(vector[1]);\n    cartographic.z = vector[2];\n  } else {\n    cartographic[0] = map(vector[0]);\n    cartographic[1] = map(vector[1]);\n    cartographic[2] = vector[2];\n  }\n  return cartographic;\n}\nexport function toCartographicFromRadians(vector, cartographic) {\n  return toCartographic(vector, cartographic, config._cartographicRadians ? identity : toDegrees);\n}\nexport function toCartographicFromDegrees(vector, cartographic) {\n  return toCartographic(vector, cartographic, config._cartographicRadians ? toRadians : identity);\n}\nexport function isWGS84(vector) {\n  if (!vector) {\n    return false;\n  }\n  scratchVector.from(vector);\n  const {\n    oneOverRadiiSquared,\n    centerToleranceSquared\n  } = WGS84_CONSTANTS;\n  const x2 = vector[0] * vector[0] * oneOverRadiiSquared[0];\n  const y2 = vector[1] * vector[1] * oneOverRadiiSquared[1];\n  const z2 = vector[2] * vector[2] * oneOverRadiiSquared[2];\n  return Math.abs(x2 + y2 + z2 - 1) < centerToleranceSquared;\n}","map":{"version":3,"sources":["../../src/type-utils.ts"],"names":["Vector3","toRadians","toDegrees","config","WGS84_CONSTANTS","identity","x","scratchVector","fromCartographic","cartographic","result","map","longitude","latitude","height","y","z","fromCartographicToRadians","vector","_cartographicRadians","fromCartographicToDegrees","toCartographic","toCartographicFromRadians","toCartographicFromDegrees","isWGS84","from","oneOverRadiiSquared","centerToleranceSquared","x2","y2","z2","Math","abs"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport type {NumericArray} from '@math.gl/core';\nimport {Vector3, toRadians, toDegrees, config} from '@math.gl/core';\nimport {WGS84_CONSTANTS} from './constants';\n\ntype LngLatHeightObject = {\n  longitude: number;\n  latitude: number;\n  height: number;\n};\n\ntype XYZObject = {\n  x: number;\n  y: number;\n  z: number;\n};\n\ntype Cartographic = LngLatHeightObject | XYZObject | NumericArray;\n\nfunction identity(x: number): number {\n  return x;\n}\n\nconst scratchVector = new Vector3();\n\nexport function fromCartographic(cartographic: Cartographic): number[];\nexport function fromCartographic<NumArrayT>(\n  cartographic: Cartographic,\n  result: NumArrayT,\n  map?: (x: number) => number\n): NumArrayT;\nexport function fromCartographic(\n  cartographic: Cartographic,\n  result = [] as number[],\n  map = identity\n): number[] {\n  if ('longitude' in cartographic) {\n    result[0] = map(cartographic.longitude);\n    result[1] = map(cartographic.latitude);\n    result[2] = cartographic.height;\n  } else if ('x' in cartographic) {\n    result[0] = map(cartographic.x);\n    result[1] = map(cartographic.y);\n    result[2] = cartographic.z;\n  } else {\n    result[0] = map(cartographic[0]);\n    result[1] = map(cartographic[1]);\n    result[2] = cartographic[2];\n  }\n  return result;\n}\n\nexport function fromCartographicToRadians(cartographic: Cartographic, result?: number[]): number[];\nexport function fromCartographicToRadians<TArray>(\n  cartographic: Cartographic,\n  result: TArray\n): TArray;\nexport function fromCartographicToRadians(\n  cartographic: Cartographic,\n  vector = [] as number[]\n): number[] {\n  return fromCartographic(cartographic, vector, config._cartographicRadians ? identity : toRadians);\n}\n\nexport function fromCartographicToDegrees(cartographic: Cartographic, result?: number[]): number[];\nexport function fromCartographicToDegrees<TArray>(\n  cartographic: Cartographic,\n  result: TArray\n): TArray;\nexport function fromCartographicToDegrees(\n  cartographic: Cartographic,\n  vector = [] as number[]\n): number[] {\n  return fromCartographic(cartographic, vector, config._cartographicRadians ? toDegrees : identity);\n}\n\nexport function toCartographic<T extends Cartographic>(\n  vector: Readonly<NumericArray>,\n  cartographic: T,\n  map: (x: number) => number = identity\n): T {\n  if ('longitude' in cartographic) {\n    cartographic.longitude = map(vector[0]);\n    cartographic.latitude = map(vector[1]);\n    cartographic.height = vector[2];\n  } else if ('x' in cartographic) {\n    cartographic.x = map(vector[0]);\n    cartographic.y = map(vector[1]);\n    cartographic.z = vector[2];\n  } else {\n    cartographic[0] = map(vector[0]);\n    cartographic[1] = map(vector[1]);\n    cartographic[2] = vector[2];\n  }\n  return cartographic;\n}\n\nexport function toCartographicFromRadians<T extends Cartographic>(\n  vector: Readonly<NumericArray>,\n  cartographic: T\n): T {\n  return toCartographic(vector, cartographic, config._cartographicRadians ? identity : toDegrees);\n}\n\nexport function toCartographicFromDegrees<T extends Cartographic>(\n  vector: Readonly<NumericArray>,\n  cartographic: T\n): T {\n  return toCartographic(vector, cartographic, config._cartographicRadians ? toRadians : identity);\n}\n\n// Estimates if a vector is close to the surface of the WGS84 Ellipsoid\nexport function isWGS84(vector: Readonly<NumericArray>): boolean {\n  if (!vector) {\n    return false;\n  }\n  scratchVector.from(vector);\n  const {oneOverRadiiSquared, centerToleranceSquared} = WGS84_CONSTANTS;\n  const x2 = vector[0] * vector[0] * oneOverRadiiSquared[0];\n  const y2 = vector[1] * vector[1] * oneOverRadiiSquared[1];\n  const z2 = vector[2] * vector[2] * oneOverRadiiSquared[2];\n  return Math.abs(x2 + y2 + z2 - 1) < centerToleranceSquared;\n}\n\n/*\n\nexport function fromCartographic(cartographic: Cartographic, result?: number[]): number[];\nexport function fromCartographic(cartographic: Cartographic, result: TypedArray): TypedArray;\nexport function fromCartographicToRadians(cartographic: Cartographic, result?: number[]): number[];\nexport function fromCartographicToRadians(\n  cartographic: Cartographic,\n  result: TypedArray\n): TypedArray;\nexport function fromCartographicToDegrees(cartographic: Cartographic, result?: number[]): number[];\nexport function fromCartographicToDegrees(\n  cartographic: Cartographic,\n  result: TypedArray\n): TypedArray;\n\nexport function toCartographic(vector: number[] | TypedArray, result: Cartographic): number[];\nexport function toCartographicFromRadians(\n  vector: number[] | TypedArray,\n  result: Cartographic\n): number[];\nexport function toCartographicFromDegrees(\n  vector: number[] | TypedArray,\n  result: Cartographic\n): number[];\n\n// Estimates if a vector is close to the surface of the WGS84 Ellipsoid\nexport function isWGS84(vector: number[] | TypedArray): boolean;\n*/\n"]},"metadata":{},"sourceType":"module"}