{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.heatmapVisConfigs = exports.pointColResolver = exports.pointPosAccessor = exports.MAX_ZOOM_LEVEL = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _reselect = require(\"reselect\");\nvar _lodash = _interopRequireDefault(require(\"lodash.memoize\"));\nvar _defaultSettings = require(\"../../constants/default-settings\");\nvar _colorUtils = require(\"../../utils/color-utils\");\nvar _mapboxglLayer = _interopRequireDefault(require(\"../mapboxgl-layer\"));\nvar _heatmapLayerIcon = _interopRequireDefault(require(\"./heatmap-layer-icon\"));\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar MAX_ZOOM_LEVEL = 18;\nexports.MAX_ZOOM_LEVEL = MAX_ZOOM_LEVEL;\nvar pointPosAccessor = function pointPosAccessor(_ref) {\n  var lat = _ref.lat,\n    lng = _ref.lng;\n  return function (dc) {\n    return function (d) {\n      return [dc.valueAt(d.index, lng.fieldIdx), dc.valueAt(d.index, lat.fieldIdx)];\n    };\n  };\n};\nexports.pointPosAccessor = pointPosAccessor;\nvar pointColResolver = function pointColResolver(_ref2) {\n  var lat = _ref2.lat,\n    lng = _ref2.lng;\n  return \"\".concat(lat.fieldIdx, \"-\").concat(lng.fieldIdx);\n};\nexports.pointColResolver = pointColResolver;\nvar heatmapVisConfigs = {\n  opacity: 'opacity',\n  colorRange: 'colorRange',\n  radius: 'heatmapRadius'\n};\n/**\n *\n * @param {Object} colorRange\n * @return {Array} [\n *  0, \"rgba(33,102,172,0)\",\n *  0.2, \"rgb(103,169,207)\",\n *  0.4, \"rgb(209,229,240)\",\n *  0.6, \"rgb(253,219,199)\",\n *  0.8, \"rgb(239,138,98)\",\n *  1, \"rgb(178,24,43)\"\n * ]\n */\n\nexports.heatmapVisConfigs = heatmapVisConfigs;\nvar heatmapDensity = function heatmapDensity(colorRange) {\n  var scaleFunction = _defaultSettings.SCALE_FUNC.quantize;\n  var colors = ['#000000'].concat((0, _toConsumableArray2[\"default\"])(colorRange.colors));\n  var scale = scaleFunction().domain([0, 1]).range(colors);\n  var colorDensity = scale.range().reduce(function (bands, level) {\n    var invert = scale.invertExtent(level);\n    return [].concat((0, _toConsumableArray2[\"default\"])(bands), [invert[0],\n    // first value in the range\n    \"rgb(\".concat((0, _colorUtils.hexToRgb)(level).join(','), \")\") // color\n    ]);\n  }, []);\n  colorDensity[1] = 'rgba(0,0,0,0)';\n  return colorDensity;\n};\nvar HeatmapLayer = /*#__PURE__*/function (_MapboxGLLayer) {\n  (0, _inherits2[\"default\"])(HeatmapLayer, _MapboxGLLayer);\n  var _super = _createSuper(HeatmapLayer);\n  function HeatmapLayer(props) {\n    var _this;\n    (0, _classCallCheck2[\"default\"])(this, HeatmapLayer);\n    _this = _super.call(this, props);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"columnsSelector\", function (config) {\n      return pointColResolver(config.columns);\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"visConfigSelector\", function (config) {\n      return config.visConfig;\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"weightFieldSelector\", function (config) {\n      return config.weightField ? config.weightField.name : null;\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"weightDomainSelector\", function (config) {\n      return config.weightDomain;\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"paintSelector\", (0, _reselect.createSelector)(_this.visConfigSelector, _this.weightFieldSelector, _this.weightDomainSelector, function (visConfig, weightField, weightDomain) {\n      return {\n        'heatmap-weight': weightField ? ['interpolate', ['linear'], ['get', weightField], weightDomain[0], 0, weightDomain[1], 1] : 1,\n        'heatmap-intensity': ['interpolate', ['linear'], ['zoom'], 0, 1, MAX_ZOOM_LEVEL, 3],\n        'heatmap-color': ['interpolate', ['linear'], ['heatmap-density']].concat((0, _toConsumableArray2[\"default\"])(heatmapDensity(visConfig.colorRange))),\n        'heatmap-radius': ['interpolate', ['linear'], ['zoom'], 0, 2, MAX_ZOOM_LEVEL, visConfig.radius // radius\n        ],\n\n        'heatmap-opacity': visConfig.opacity\n      };\n    }));\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"computeHeatmapConfiguration\", (0, _reselect.createSelector)(_this.sourceSelector, _this.filterSelector, _this.paintSelector, function (source, filter, paint) {\n      return _objectSpread({\n        type: 'heatmap',\n        id: _this.id,\n        source: source,\n        layout: {\n          visibility: 'visible'\n        },\n        maxzoom: MAX_ZOOM_LEVEL,\n        paint: paint\n      }, _this.isValidFilter(filter) ? {\n        filter: filter\n      } : {});\n    }));\n    _this.registerVisConfig(heatmapVisConfigs);\n    _this.getPosition = (0, _lodash[\"default\"])(pointPosAccessor, pointColResolver);\n    return _this;\n  }\n  (0, _createClass2[\"default\"])(HeatmapLayer, [{\n    key: \"type\",\n    get: function get() {\n      return 'heatmap';\n    }\n  }, {\n    key: \"visualChannels\",\n    get: function get() {\n      return {\n        weight: {\n          property: 'weight',\n          field: 'weightField',\n          scale: 'weightScale',\n          domain: 'weightDomain',\n          key: 'weight',\n          // supportedFieldTypes can be determined by channelScaleType\n          // or specified here\n          defaultMeasure: 'property.density',\n          supportedFieldTypes: [_defaultSettings.ALL_FIELD_TYPES.real, _defaultSettings.ALL_FIELD_TYPES.integer],\n          channelScaleType: _defaultSettings.CHANNEL_SCALES.size\n        }\n      };\n    }\n  }, {\n    key: \"layerIcon\",\n    get: function get() {\n      return _heatmapLayerIcon[\"default\"];\n    }\n  }, {\n    key: \"getVisualChannelDescription\",\n    value: function getVisualChannelDescription(channel) {\n      return channel === 'color' ? {\n        label: 'property.color',\n        measure: 'property.density'\n      } : {\n        label: 'property.weight',\n        measure: this.config.weightField ? this.config.weightField.name : 'property.density'\n      };\n    }\n  }, {\n    key: \"getDefaultLayerConfig\",\n    value: function getDefaultLayerConfig() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      // mapbox heatmap layer color is always based on density\n      // no need to set colorField, colorDomain and colorScale\n\n      /* eslint-disable no-unused-vars */\n      var _get$call$weightField = _objectSpread(_objectSpread({}, (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(HeatmapLayer.prototype), \"getDefaultLayerConfig\", this).call(this, props)), {}, {\n          weightField: null,\n          weightDomain: [0, 1],\n          weightScale: 'linear'\n        }),\n        colorField = _get$call$weightField.colorField,\n        colorDomain = _get$call$weightField.colorDomain,\n        colorScale = _get$call$weightField.colorScale,\n        layerConfig = (0, _objectWithoutProperties2[\"default\"])(_get$call$weightField, [\"colorField\", \"colorDomain\", \"colorScale\"]);\n      /* eslint-enable no-unused-vars */\n\n      return layerConfig;\n    }\n  }, {\n    key: \"getPositionAccessor\",\n    value: function getPositionAccessor(dataContainer) {\n      return this.getPosition(this.config.columns)(dataContainer);\n    }\n  }, {\n    key: \"updateLayerMeta\",\n    value: function updateLayerMeta(dataContainer) {\n      var getPosition = this.getPositionAccessor(dataContainer);\n      var bounds = this.getPointsBounds(dataContainer, getPosition);\n      this.updateMeta({\n        bounds: bounds\n      });\n    }\n  }, {\n    key: \"getGeometry\",\n    value: function getGeometry(position) {\n      return position.every(Number.isFinite) ? {\n        type: 'Point',\n        coordinates: position\n      } : null;\n    }\n  }, {\n    key: \"formatLayerData\",\n    value: function formatLayerData(datasets, oldLayerData) {\n      var weightField = this.config.weightField;\n      var dataContainer = datasets[this.config.dataId].dataContainer;\n      var getPosition = this.getPositionAccessor(dataContainer);\n      var _this$updateData = this.updateData(datasets, oldLayerData),\n        data = _this$updateData.data;\n      var newConfig = this.computeHeatmapConfiguration(this.config, datasets);\n      newConfig.id = this.id;\n      return {\n        columns: this.config.columns,\n        config: newConfig,\n        data: data,\n        weightField: weightField,\n        getPosition: getPosition\n      };\n    }\n  }]);\n  return HeatmapLayer;\n}(_mapboxglLayer[\"default\"]);\nvar _default = HeatmapLayer;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../../../src/layers/heatmap-layer/heatmap-layer.js"],"names":["MAX_ZOOM_LEVEL","pointPosAccessor","lat","lng","dc","valueAt","d","index","fieldIdx","pointColResolver","heatmapVisConfigs","opacity","colorRange","radius","heatmapDensity","scaleFunction","SCALE_FUNC","quantize","colors","scale","domain","range","colorDensity","reduce","bands","level","invert","invertExtent","join","HeatmapLayer","MapboxGLLayer","props","registerVisConfig","getPosition","weight","property","field","key","defaultMeasure","supportedFieldTypes","ALL_FIELD_TYPES","real","integer","channelScaleType","CHANNEL_SCALES","size","HeatmapLayerIcon","channel","label","measure","config","weightField","name","colorField","colorDomain","colorScale","layerConfig","weightDomain","weightScale","dataContainer","columns","getPositionAccessor","bounds","getPointsBounds","updateMeta","visConfig","visConfigSelector","weightFieldSelector","weightDomainSelector","sourceSelector","filterSelector","paintSelector","source","filter","paint","type","id","layout","visibility","maxzoom","isValidFilter","position","every","Number","isFinite","coordinates","datasets","oldLayerData","dataId","data","updateData","newConfig","computeHeatmapConfiguration"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {createSelector} from 'reselect';\nimport memoize from 'lodash.memoize';\nimport {CHANNEL_SCALES, SCALE_FUNC, ALL_FIELD_TYPES} from 'constants/default-settings';\nimport {hexToRgb} from 'utils/color-utils';\nimport MapboxGLLayer from '../mapboxgl-layer';\nimport HeatmapLayerIcon from './heatmap-layer-icon';\n\nexport const MAX_ZOOM_LEVEL = 18;\n\nexport const pointPosAccessor = ({lat, lng}) => dc => d => [\n  dc.valueAt(d.index, lng.fieldIdx),\n  dc.valueAt(d.index, lat.fieldIdx)\n];\n\nexport const pointColResolver = ({lat, lng}) => `${lat.fieldIdx}-${lng.fieldIdx}`;\n\nexport const heatmapVisConfigs = {\n  opacity: 'opacity',\n  colorRange: 'colorRange',\n  radius: 'heatmapRadius'\n};\n\n/**\n *\n * @param {Object} colorRange\n * @return {Array} [\n *  0, \"rgba(33,102,172,0)\",\n *  0.2, \"rgb(103,169,207)\",\n *  0.4, \"rgb(209,229,240)\",\n *  0.6, \"rgb(253,219,199)\",\n *  0.8, \"rgb(239,138,98)\",\n *  1, \"rgb(178,24,43)\"\n * ]\n */\nconst heatmapDensity = colorRange => {\n  const scaleFunction = SCALE_FUNC.quantize;\n\n  const colors = ['#000000', ...colorRange.colors];\n\n  const scale = scaleFunction()\n    .domain([0, 1])\n    .range(colors);\n\n  const colorDensity = scale.range().reduce((bands, level) => {\n    const invert = scale.invertExtent(level);\n    return [\n      ...bands,\n      invert[0], // first value in the range\n      `rgb(${hexToRgb(level).join(',')})` // color\n    ];\n  }, []);\n  colorDensity[1] = 'rgba(0,0,0,0)';\n  return colorDensity;\n};\n\nclass HeatmapLayer extends MapboxGLLayer {\n  constructor(props) {\n    super(props);\n    this.registerVisConfig(heatmapVisConfigs);\n    this.getPosition = memoize(pointPosAccessor, pointColResolver);\n  }\n\n  get type() {\n    return 'heatmap';\n  }\n\n  get visualChannels() {\n    return {\n      weight: {\n        property: 'weight',\n        field: 'weightField',\n        scale: 'weightScale',\n        domain: 'weightDomain',\n        key: 'weight',\n        // supportedFieldTypes can be determined by channelScaleType\n        // or specified here\n        defaultMeasure: 'property.density',\n        supportedFieldTypes: [ALL_FIELD_TYPES.real, ALL_FIELD_TYPES.integer],\n        channelScaleType: CHANNEL_SCALES.size\n      }\n    };\n  }\n\n  get layerIcon() {\n    return HeatmapLayerIcon;\n  }\n\n  getVisualChannelDescription(channel) {\n    return channel === 'color'\n      ? {\n          label: 'property.color',\n          measure: 'property.density'\n        }\n      : {\n          label: 'property.weight',\n          measure: this.config.weightField ? this.config.weightField.name : 'property.density'\n        };\n  }\n\n  getDefaultLayerConfig(props = {}) {\n    // mapbox heatmap layer color is always based on density\n    // no need to set colorField, colorDomain and colorScale\n    /* eslint-disable no-unused-vars */\n    const {colorField, colorDomain, colorScale, ...layerConfig} = {\n      ...super.getDefaultLayerConfig(props),\n\n      weightField: null,\n      weightDomain: [0, 1],\n      weightScale: 'linear'\n    };\n    /* eslint-enable no-unused-vars */\n\n    return layerConfig;\n  }\n\n  getPositionAccessor(dataContainer) {\n    return this.getPosition(this.config.columns)(dataContainer);\n  }\n\n  updateLayerMeta(dataContainer) {\n    const getPosition = this.getPositionAccessor(dataContainer);\n    const bounds = this.getPointsBounds(dataContainer, getPosition);\n    this.updateMeta({bounds});\n  }\n\n  columnsSelector = config => pointColResolver(config.columns);\n  visConfigSelector = config => config.visConfig;\n  weightFieldSelector = config => (config.weightField ? config.weightField.name : null);\n  weightDomainSelector = config => config.weightDomain;\n\n  paintSelector = createSelector(\n    this.visConfigSelector,\n    this.weightFieldSelector,\n    this.weightDomainSelector,\n    (visConfig, weightField, weightDomain) => ({\n      'heatmap-weight': weightField\n        ? ['interpolate', ['linear'], ['get', weightField], weightDomain[0], 0, weightDomain[1], 1]\n        : 1,\n      'heatmap-intensity': ['interpolate', ['linear'], ['zoom'], 0, 1, MAX_ZOOM_LEVEL, 3],\n      'heatmap-color': [\n        'interpolate',\n        ['linear'],\n        ['heatmap-density'],\n        ...heatmapDensity(visConfig.colorRange)\n      ],\n      'heatmap-radius': [\n        'interpolate',\n        ['linear'],\n        ['zoom'],\n        0,\n        2,\n        MAX_ZOOM_LEVEL,\n        visConfig.radius // radius\n      ],\n      'heatmap-opacity': visConfig.opacity\n    })\n  );\n\n  computeHeatmapConfiguration = createSelector(\n    this.sourceSelector,\n    this.filterSelector,\n    this.paintSelector,\n    (source, filter, paint) => {\n      return {\n        type: 'heatmap',\n        id: this.id,\n        source,\n        layout: {\n          visibility: 'visible'\n        },\n        maxzoom: MAX_ZOOM_LEVEL,\n        paint,\n        ...(this.isValidFilter(filter) ? {filter} : {})\n      };\n    }\n  );\n\n  getGeometry(position) {\n    return position.every(Number.isFinite)\n      ? {\n          type: 'Point',\n          coordinates: position\n        }\n      : null;\n  }\n\n  formatLayerData(datasets, oldLayerData) {\n    const {weightField} = this.config;\n    const {dataContainer} = datasets[this.config.dataId];\n    const getPosition = this.getPositionAccessor(dataContainer);\n    const {data} = this.updateData(datasets, oldLayerData);\n\n    const newConfig = this.computeHeatmapConfiguration(this.config, datasets);\n    newConfig.id = this.id;\n\n    return {\n      columns: this.config.columns,\n      config: newConfig,\n      data,\n      weightField,\n      getPosition\n    };\n  }\n}\n\nexport default HeatmapLayer;\n"]},"metadata":{},"sourceType":"script"}