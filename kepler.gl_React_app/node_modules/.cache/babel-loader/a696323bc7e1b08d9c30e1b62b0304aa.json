{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { LayerExtension, _mergeShaders as mergeShaders } from '@deck.gl/core';\nimport { dashShaders, offsetShaders } from './shaders.glsl';\nvar defaultProps = {\n  getDashArray: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  getOffset: {\n    type: 'accessor',\n    value: 0\n  },\n  dashJustified: false\n};\nvar PathStyleExtension = function (_LayerExtension) {\n  _inherits(PathStyleExtension, _LayerExtension);\n  function PathStyleExtension() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$dash = _ref.dash,\n      dash = _ref$dash === void 0 ? false : _ref$dash,\n      _ref$offset = _ref.offset,\n      offset = _ref$offset === void 0 ? false : _ref$offset;\n    _classCallCheck(this, PathStyleExtension);\n    return _possibleConstructorReturn(this, _getPrototypeOf(PathStyleExtension).call(this, {\n      dash: dash,\n      offset: offset\n    }));\n  }\n  _createClass(PathStyleExtension, [{\n    key: \"isEnabled\",\n    value: function isEnabled(layer) {\n      return layer.state.pathTesselator;\n    }\n  }, {\n    key: \"getShaders\",\n    value: function getShaders(extension) {\n      if (!extension.isEnabled(this)) {\n        return null;\n      }\n      var result = {};\n      if (extension.opts.dash) {\n        result = mergeShaders(result, dashShaders);\n      }\n      if (extension.opts.offset) {\n        result = mergeShaders(result, offsetShaders);\n      }\n      return result;\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState(context, extension) {\n      var attributeManager = this.getAttributeManager();\n      if (!attributeManager || !extension.isEnabled(this)) {\n        return;\n      }\n      extension.enabled = true;\n      if (extension.opts.dash) {\n        attributeManager.addInstanced({\n          instanceDashArrays: {\n            size: 2,\n            accessor: 'getDashArray'\n          }\n        });\n      }\n      if (extension.opts.offset) {\n        attributeManager.addInstanced({\n          instanceOffsets: {\n            size: 1,\n            accessor: 'getOffset'\n          }\n        });\n      }\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(params, extension) {\n      if (!extension.isEnabled(this)) {\n        return;\n      }\n      var uniforms = {};\n      if (extension.opts.dash) {\n        uniforms.dashAlignMode = this.props.dashJustified ? 1 : 0;\n      }\n      this.state.model.setUniforms(uniforms);\n    }\n  }]);\n  return PathStyleExtension;\n}(LayerExtension);\nexport { PathStyleExtension as default };\nPathStyleExtension.extensionName = 'PathStyleExtension';\nPathStyleExtension.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/path-style/path-style.js"],"names":["LayerExtension","_mergeShaders","mergeShaders","dashShaders","offsetShaders","defaultProps","getDashArray","type","value","getOffset","dashJustified","PathStyleExtension","dash","offset","layer","state","pathTesselator","extension","isEnabled","result","opts","context","attributeManager","getAttributeManager","enabled","addInstanced","instanceDashArrays","size","accessor","instanceOffsets","params","uniforms","dashAlignMode","props","model","setUniforms","extensionName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerExtension, _mergeShaders as mergeShaders} from '@deck.gl/core';\nimport {dashShaders, offsetShaders} from './shaders.glsl';\n\nconst defaultProps = {\n  getDashArray: {type: 'accessor', value: [0, 0]},\n  getOffset: {type: 'accessor', value: 0},\n  dashJustified: false\n};\n\nexport default class PathStyleExtension extends LayerExtension {\n  constructor({dash = false, offset = false} = {}) {\n    super({dash, offset});\n  }\n\n  isEnabled(layer) {\n    return layer.state.pathTesselator;\n  }\n\n  getShaders(extension) {\n    if (!extension.isEnabled(this)) {\n      return null;\n    }\n\n    // Merge shader injection\n    let result = {};\n    if (extension.opts.dash) {\n      result = mergeShaders(result, dashShaders);\n    }\n    if (extension.opts.offset) {\n      result = mergeShaders(result, offsetShaders);\n    }\n\n    return result;\n  }\n\n  initializeState(context, extension) {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager || !extension.isEnabled(this)) {\n      // This extension only works with the PathLayer\n      return;\n    }\n\n    extension.enabled = true;\n\n    if (extension.opts.dash) {\n      attributeManager.addInstanced({\n        instanceDashArrays: {size: 2, accessor: 'getDashArray'}\n      });\n    }\n    if (extension.opts.offset) {\n      attributeManager.addInstanced({\n        instanceOffsets: {size: 1, accessor: 'getOffset'}\n      });\n    }\n  }\n\n  updateState(params, extension) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    const uniforms = {};\n\n    if (extension.opts.dash) {\n      uniforms.dashAlignMode = this.props.dashJustified ? 1 : 0;\n    }\n\n    this.state.model.setUniforms(uniforms);\n  }\n}\n\nPathStyleExtension.extensionName = 'PathStyleExtension';\nPathStyleExtension.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}