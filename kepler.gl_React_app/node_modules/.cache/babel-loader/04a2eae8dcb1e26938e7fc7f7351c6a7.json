{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport DoublyLinkedListNode from '../utils/doubly-linked-list-node';\nvar DoublyLinkedList = function () {\n  function DoublyLinkedList() {\n    _classCallCheck(this, DoublyLinkedList);\n    this.head = null;\n    this.tail = null;\n    this._length = 0;\n  }\n  _createClass(DoublyLinkedList, [{\n    key: \"add\",\n    value: function add(item) {\n      var node = new DoublyLinkedListNode(item, this.tail, null);\n      if (this.tail) {\n        this.tail.next = node;\n        this.tail = node;\n      } else {\n        this.head = node;\n        this.tail = node;\n      }\n      ++this._length;\n      return node;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(node) {\n      if (!node) {\n        return;\n      }\n      if (node.previous && node.next) {\n        node.previous.next = node.next;\n        node.next.previous = node.previous;\n      } else if (node.previous) {\n        node.previous.next = null;\n        this.tail = node.previous;\n      } else if (node.next) {\n        node.next.previous = null;\n        this.head = node.next;\n      } else {\n        this.head = null;\n        this.tail = null;\n      }\n      node.next = null;\n      node.previous = null;\n      --this._length;\n    }\n  }, {\n    key: \"splice\",\n    value: function splice(node, nextNode) {\n      if (node === nextNode) {\n        return;\n      }\n      this.remove(nextNode);\n      this._insert(node, nextNode);\n    }\n  }, {\n    key: \"_insert\",\n    value: function _insert(node, nextNode) {\n      var oldNodeNext = node.next;\n      node.next = nextNode;\n      if (this.tail === node) {\n        this.tail = nextNode;\n      } else {\n        oldNodeNext.previous = nextNode;\n      }\n      nextNode.next = oldNodeNext;\n      nextNode.previous = node;\n      ++this._length;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._length;\n    }\n  }]);\n  return DoublyLinkedList;\n}();\nexport { DoublyLinkedList as default };","map":{"version":3,"sources":["../../../src/utils/doubly-linked-list.js"],"names":["DoublyLinkedListNode","DoublyLinkedList","head","tail","_length","item","node","next","previous","nextNode","remove","_insert","oldNodeNext"],"mappings":";;AAGA,OAAOA,oBAAP,MAAiC,kCAAjC;IAOqBC,gB;EACnB,SAAA,gBAAA,GAAc;IAAA,eAAA,CAAA,IAAA,EAAA,gBAAA,CAAA;IACZ,IAAA,CAAKC,IAAL,GAAY,IAAZ;IACA,IAAA,CAAKC,IAAL,GAAY,IAAZ;IACA,IAAA,CAAKC,OAAL,GAAe,CAAf;EACD;;;wBAWGC,I,EAAM;MACR,IAAMC,IAAI,GAAG,IAAIN,oBAAJ,CAAyBK,IAAzB,EAA+B,IAAA,CAAKF,IAApC,EAA0C,IAA1C,CAAb;MAEA,IAAI,IAAA,CAAKA,IAAT,EAAe;QACb,IAAA,CAAKA,IAAL,CAAUI,IAAV,GAAiBD,IAAjB;QACA,IAAA,CAAKH,IAAL,GAAYG,IAAZ;MACD,CAHD,MAGO;QACL,IAAA,CAAKJ,IAAL,GAAYI,IAAZ;QACA,IAAA,CAAKH,IAAL,GAAYG,IAAZ;MACD;MAED,EAAE,IAAA,CAAKF,OAAP;MAEA,OAAOE,IAAP;IACD;;;2BAMMA,I,EAAM;MACX,IAAI,CAACA,IAAL,EAAW;QACT;MACD;MAED,IAAIA,IAAI,CAACE,QAALF,IAAiBA,IAAI,CAACC,IAA1B,EAAgC;QAC9BD,IAAI,CAACE,QAALF,CAAcC,IAAdD,GAAqBA,IAAI,CAACC,IAA1BD;QACAA,IAAI,CAACC,IAALD,CAAUE,QAAVF,GAAqBA,IAAI,CAACE,QAA1BF;MACD,CAHD,MAGO,IAAIA,IAAI,CAACE,QAAT,EAAmB;QAExBF,IAAI,CAACE,QAALF,CAAcC,IAAdD,GAAqB,IAArBA;QACA,IAAA,CAAKH,IAAL,GAAYG,IAAI,CAACE,QAAjB;MACD,CAJM,MAIA,IAAIF,IAAI,CAACC,IAAT,EAAe;QAEpBD,IAAI,CAACC,IAALD,CAAUE,QAAVF,GAAqB,IAArBA;QACA,IAAA,CAAKJ,IAAL,GAAYI,IAAI,CAACC,IAAjB;MACD,CAJM,MAIA;QAEL,IAAA,CAAKL,IAAL,GAAY,IAAZ;QACA,IAAA,CAAKC,IAAL,GAAY,IAAZ;MACD;MAEDG,IAAI,CAACC,IAALD,GAAY,IAAZA;MACAA,IAAI,CAACE,QAALF,GAAgB,IAAhBA;MAEA,EAAE,IAAA,CAAKF,OAAP;IACD;;;2BAOME,I,EAAMG,Q,EAAU;MACrB,IAAIH,IAAI,KAAKG,QAAb,EAAuB;QACrB;MACD;MAGD,IAAA,CAAKC,MAAL,CAAYD,QAAZ,CAAA;MACA,IAAA,CAAKE,OAAL,CAAaL,IAAb,EAAmBG,QAAnB,CAAA;IACD;;;4BAEOH,I,EAAMG,Q,EAAU;MACtB,IAAMG,WAAW,GAAGN,IAAI,CAACC,IAAzB;MACAD,IAAI,CAACC,IAALD,GAAYG,QAAZH;MAGA,IAAI,IAAA,CAAKH,IAAL,KAAcG,IAAlB,EAAwB;QACtB,IAAA,CAAKH,IAAL,GAAYM,QAAZ;MACD,CAFD,MAEO;QACLG,WAAW,CAACJ,QAAZI,GAAuBH,QAAvBG;MACD;MAEDH,QAAQ,CAACF,IAATE,GAAgBG,WAAhBH;MACAA,QAAQ,CAACD,QAATC,GAAoBH,IAApBG;MAEA,EAAE,IAAA,CAAKL,OAAP;IACD;;;wBAvFY;MACX,OAAO,IAAA,CAAKA,OAAZ;IACD;;;;SATkBH,gB","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport DoublyLinkedListNode from '../utils/doubly-linked-list-node';\n\n/**\n * Doubly linked list\n *\n * @private\n */\nexport default class DoublyLinkedList {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n    this._length = 0;\n  }\n\n  get length() {\n    return this._length;\n  }\n\n  /**\n   * Adds the item to the end of the list\n   * @param {*} [item]\n   * @return {DoublyLinkedListNode}\n   */\n  add(item) {\n    const node = new DoublyLinkedListNode(item, this.tail, null);\n\n    if (this.tail) {\n      this.tail.next = node;\n      this.tail = node;\n    } else {\n      this.head = node;\n      this.tail = node;\n    }\n\n    ++this._length;\n\n    return node;\n  }\n\n  /**\n   * Removes the given node from the list\n   * @param {DoublyLinkedListNode} node\n   */\n  remove(node) {\n    if (!node) {\n      return;\n    }\n\n    if (node.previous && node.next) {\n      node.previous.next = node.next;\n      node.next.previous = node.previous;\n    } else if (node.previous) {\n      // Remove last node\n      node.previous.next = null;\n      this.tail = node.previous;\n    } else if (node.next) {\n      // Remove first node\n      node.next.previous = null;\n      this.head = node.next;\n    } else {\n      // Remove last node in the linked list\n      this.head = null;\n      this.tail = null;\n    }\n\n    node.next = null;\n    node.previous = null;\n\n    --this._length;\n  }\n\n  /**\n   * Moves nextNode after node\n   * @param {DoublyLinkedListNode} node\n   * @param {DoublyLinkedListNode} nextNode\n   */\n  splice(node, nextNode) {\n    if (node === nextNode) {\n      return;\n    }\n\n    // Remove nextNode, then insert after node\n    this.remove(nextNode);\n    this._insert(node, nextNode);\n  }\n\n  _insert(node, nextNode) {\n    const oldNodeNext = node.next;\n    node.next = nextNode;\n\n    // nextNode is the new tail\n    if (this.tail === node) {\n      this.tail = nextNode;\n    } else {\n      oldNodeNext.previous = nextNode;\n    }\n\n    nextNode.next = oldNodeNext;\n    nextNode.previous = node;\n\n    ++this._length;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}