{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _marked = _regeneratorRuntime.mark(makeArrayBufferIterator);\nexport function makeArrayBufferIterator(arrayBuffer) {\n  var options,\n    _options$chunkSize,\n    chunkSize,\n    byteOffset,\n    chunkByteLength,\n    chunk,\n    sourceArray,\n    chunkArray,\n    _args = arguments;\n  return _regeneratorRuntime.wrap(function makeArrayBufferIterator$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          _options$chunkSize = options.chunkSize, chunkSize = _options$chunkSize === void 0 ? 256 * 1024 : _options$chunkSize;\n          byteOffset = 0;\n        case 3:\n          if (!(byteOffset < arrayBuffer.byteLength)) {\n            _context.next = 14;\n            break;\n          }\n          chunkByteLength = Math.min(arrayBuffer.byteLength - byteOffset, chunkSize);\n          chunk = new ArrayBuffer(chunkByteLength);\n          sourceArray = new Uint8Array(arrayBuffer, byteOffset, chunkByteLength);\n          chunkArray = new Uint8Array(chunk);\n          chunkArray.set(sourceArray);\n          byteOffset += chunkByteLength;\n          _context.next = 12;\n          return chunk;\n        case 12:\n          _context.next = 3;\n          break;\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["../../../../src/iterator-utils/make-iterator/array-buffer-iterator.js"],"names":["makeArrayBufferIterator","arrayBuffer","options","chunkSize","byteOffset","byteLength","chunkByteLength","Math","min","chunk","ArrayBuffer","sourceArray","Uint8Array","chunkArray","set"],"mappings":";uCAAiBA,uB;AAAjB,OAAO,SAAUA,uBAAV,CAAkCC,WAAlC,EAAA;EAAA,IAAA,OAAA;IAAA,kBAAA;IAAA,SAAA;IAAA,UAAA;IAAA,eAAA;IAAA,KAAA;IAAA,WAAA;IAAA,UAAA;IAAA,KAAA,GAAA,SAAA;EAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,wBAAA,CAAA,QAAA,EAAA;IAAA,OAAA,CAAA,EAAA;MAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;QAAA,KAAA,CAAA;UAA+CC,OAA/C,GAAA,KAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,KAAA,CAAA,CAAA,CAAA,GAAyD,CAAA,CAAzD;UAAA,kBAAA,GAC4BA,OAD5B,CACEC,SADF,EACEA,SADF,GAAA,kBAAA,KAAA,KAAA,CAAA,GACc,GAAA,GAAM,IADpB,GAAA,kBAAA;UAGDC,UAHC,GAGY,CAHZ;QAAA,KAAA,CAAA;UAAA,IAAA,EAKEA,UAAU,GAAGH,WAAW,CAACI,UAL3B,CAAA,EAAA;YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;YAAA;UAAA;UAOGC,eAPH,GAOqBC,IAAI,CAACC,GAALD,CAASN,WAAW,CAACI,UAAZJ,GAAyBG,UAAlCG,EAA8CJ,SAA9CI,CAPrB;UAQGE,KARH,GAQW,IAAIC,WAAJ,CAAgBJ,eAAhB,CARX;UAWGK,WAXH,GAWiB,IAAIC,UAAJ,CAAeX,WAAf,EAA4BG,UAA5B,EAAwCE,eAAxC,CAXjB;UAYGO,UAZH,GAYgB,IAAID,UAAJ,CAAeH,KAAf,CAZhB;UAaHI,UAAU,CAACC,GAAXD,CAAeF,WAAfE,CAAAA;UAGAT,UAAU,IAAIE,eAAdF;UAhBG,QAAA,CAAA,IAAA,GAAA,EAAA;UAiBH,OAAMK,KAAN;QAjBG,KAAA,EAAA;UAAA,QAAA,CAAA,IAAA,GAAA,CAAA;UAAA;QAAA,KAAA,EAAA;QAAA,KAAA,KAAA;UAAA,OAAA,QAAA,CAAA,IAAA,EAAA;MAAA;IAAA;EAAA,CAAA,EAAA,OAAA,CAAA;AAAA","sourcesContent":["export function* makeArrayBufferIterator(arrayBuffer, options = {}) {\n  const {chunkSize = 256 * 1024} = options;\n\n  let byteOffset = 0;\n\n  while (byteOffset < arrayBuffer.byteLength) {\n    // Create a chunk of the right size\n    const chunkByteLength = Math.min(arrayBuffer.byteLength - byteOffset, chunkSize);\n    const chunk = new ArrayBuffer(chunkByteLength);\n\n    // Copy data from the big chunk\n    const sourceArray = new Uint8Array(arrayBuffer, byteOffset, chunkByteLength);\n    const chunkArray = new Uint8Array(chunk);\n    chunkArray.set(sourceArray);\n\n    // yield the chunk\n    byteOffset += chunkByteLength;\n    yield chunk;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}