{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport { Matrix4, Vector3 } from '@math.gl/core';\nimport { Ellipsoid } from '@math.gl/geospatial';\nimport { Stats } from '@probe.gl/stats';\nimport { RequestScheduler, assert, path } from '@loaders.gl/loader-utils';\nimport TilesetCache from './tileset-cache';\nimport { calculateTransformProps } from './helpers/transform-utils';\nimport { getFrameState } from './helpers/frame-state';\nimport { getZoomFromBoundingVolume } from './helpers/zoom';\nimport Tile3D from './tile-3d';\nimport Tileset3DTraverser from './traversers/tileset-3d-traverser';\nimport TilesetTraverser from './traversers/tileset-traverser';\nimport I3SetTraverser from './traversers/i3s-tilset-traverser';\nimport { TILESET_TYPE } from '../constants';\nvar TILES_TOTAL = 'Tiles In Tileset(s)';\nvar TILES_IN_MEMORY = 'Tiles In Memory';\nvar TILES_IN_VIEW = 'Tiles In View';\nvar TILES_RENDERABLE = 'Tiles To Render';\nvar TILES_LOADED = 'Tiles Loaded';\nvar TILES_LOADING = 'Tiles Loading';\nvar TILES_UNLOADED = 'Tiles Unloaded';\nvar TILES_LOAD_FAILED = 'Failed Tile Loads';\nvar POINTS_COUNT = 'Points';\nvar TILES_GPU_MEMORY = 'Tile Memory Use';\nfunction getQueryParamString(queryParams) {\n  var queryParamStrings = [];\n  for (var _i = 0, _Object$keys = Object.keys(queryParams); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    queryParamStrings.push(\"\".concat(key, \"=\").concat(queryParams[key]));\n  }\n  switch (queryParamStrings.length) {\n    case 0:\n      return '';\n    case 1:\n      return \"?\".concat(queryParamStrings[0]);\n    default:\n      return \"?\".concat(queryParamStrings.join('&'));\n  }\n}\nvar DEFAULT_OPTIONS = {\n  ellipsoid: Ellipsoid.WGS84,\n  modelMatrix: new Matrix4(),\n  throttleRequests: false,\n  maximumMemoryUsage: 32,\n  onTileLoad: function onTileLoad() {},\n  onTileUnload: function onTileUnload() {},\n  onTileError: function onTileError(tile, message, url) {},\n  maximumScreenSpaceError: 8\n};\nvar Tileset3D = function () {\n  function Tileset3D(json) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Tileset3D);\n    assert(json);\n    this.options = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n    this.tileset = json;\n    this.loader = json.loader;\n    this.type = json.type;\n    this.url = json.url;\n    this.basePath = json.basePath || path.dirname(this.url);\n    this.modelMatrix = this.options.modelMatrix;\n    this.ellipsoid = this.options.ellipsoid;\n    this.lodMetricType = json.lodMetricType;\n    this.lodMetricValue = json.lodMetricValue;\n    this.refine = json.root.refine;\n    this.fetchOptions = this.options.fetchOptions || {};\n    if (this.options.headers) {\n      this.fetchOptions.headers = this.options.headers;\n    }\n    if (this.options.token) {\n      this.fetchOptions.token = this.options.token;\n    }\n    this.root = null;\n    this.cartographicCenter = null;\n    this.cartesianCenter = null;\n    this.zoom = 1;\n    this.boundingVolume = null;\n    this._traverser = this._initializeTraverser();\n    this._cache = new TilesetCache();\n    this._requestScheduler = new RequestScheduler({\n      throttleRequests: this.options.throttleRequests\n    });\n    this._frameNumber = 0;\n    this._updateFrameNumber = 0;\n    this._pendingCount = 0;\n    this._tiles = {};\n    this.selectedTiles = [];\n    this._emptyTiles = [];\n    this._requestedTiles = [];\n    this._selectedTilesToStyle = [];\n    this._queryParams = {};\n    this._queryParamsString = null;\n    this.maximumMemoryUsage = this.options.maximumMemoryUsage;\n    this.gpuMemoryUsageInBytes = 0;\n    this.stats = new Stats({\n      id: this.url\n    });\n    this._initializeStats();\n    this._hasMixedContent = false;\n    this._maximumScreenSpaceError = this.options.maximumScreenSpaceError;\n    this._properties = undefined;\n    this._extensionsUsed = undefined;\n    this._gltfUpAxis = undefined;\n    this._dynamicScreenSpaceErrorComputedDensity = 0.0;\n    this.extras = null;\n    this.asset = {};\n    this.credits = {};\n    this.description = this.options.description;\n    this._defaultGeometrySchema = [];\n    this._initializeTileSet(json, this.options);\n  }\n  _createClass(Tileset3D, [{\n    key: \"isLoaded\",\n    value: function isLoaded() {\n      return this._pendingCount === 0;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._destroy();\n    }\n  }, {\n    key: \"getTileUrl\",\n    value: function getTileUrl(tilePath) {\n      var isDataUrl = tilePath.startsWith('data:');\n      if (isDataUrl) {\n        return tilePath;\n      }\n      return \"\".concat(tilePath).concat(this.queryParams);\n    }\n  }, {\n    key: \"update\",\n    value: function update(viewport) {\n      this._cache.reset();\n      this._frameNumber++;\n      this._frameState = getFrameState(viewport, this._frameNumber);\n      this._traverser.traverse(this.root, this._frameState, this.options);\n    }\n  }, {\n    key: \"_onTraversalEnd\",\n    value: function _onTraversalEnd() {\n      var selectedTiles = Object.values(this._traverser.selectedTiles);\n      if (this._tilesChanged(this.selectedTiles, selectedTiles)) {\n        this._updateFrameNumber++;\n      }\n      this.selectedTiles = selectedTiles;\n      var _iterator = _createForOfIteratorHelper(this.selectedTiles),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var tile = _step.value;\n          this._tiles[tile.id] = tile;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      this._requestedTiles = Object.values(this._traverser.requestedTiles);\n      this._emptyTiles = Object.values(this._traverser.emptyTiles);\n      this._loadTiles(this._frameState);\n      this._unloadTiles();\n      this._updateStats();\n      return this._updateFrameNumber;\n    }\n  }, {\n    key: \"_tilesChanged\",\n    value: function _tilesChanged(oldSelectedTiles, selectedTiles) {\n      if (oldSelectedTiles.length !== selectedTiles.length) {\n        return true;\n      }\n      var set1 = new Set(oldSelectedTiles.map(function (t) {\n        return t.id;\n      }));\n      var set2 = new Set(selectedTiles.map(function (t) {\n        return t.id;\n      }));\n      var changed = oldSelectedTiles.filter(function (x) {\n        return !set2.has(x.id);\n      }).length > 0;\n      changed = changed || selectedTiles.filter(function (x) {\n        return !set1.has(x.id);\n      }).length > 0;\n      return changed;\n    }\n  }, {\n    key: \"_loadTiles\",\n    value: function _loadTiles(frameState) {\n      var _iterator2 = _createForOfIteratorHelper(this._requestedTiles),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var tile = _step2.value;\n          if (tile.contentUnloaded) {\n            this._loadTile(tile, frameState);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"_unloadTiles\",\n    value: function _unloadTiles() {\n      this._cache.unloadTiles(this, function (tileset, tile) {\n        return tileset._unloadTile(tile);\n      });\n    }\n  }, {\n    key: \"_updateStats\",\n    value: function _updateStats() {\n      var tilesRenderable = 0;\n      var pointsRenderable = 0;\n      var _iterator3 = _createForOfIteratorHelper(this.selectedTiles),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var tile = _step3.value;\n          if (tile.contentAvailable) {\n            tilesRenderable++;\n            if (tile.content.pointCount) {\n              pointsRenderable += tile.content.pointCount;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      this.stats.get(TILES_IN_VIEW).count = this.selectedTiles.length;\n      this.stats.get(TILES_RENDERABLE).count = tilesRenderable;\n      this.stats.get(POINTS_COUNT).count = pointsRenderable;\n    }\n  }, {\n    key: \"_initializeTileSet\",\n    value: function _initializeTileSet(tilesetJson) {\n      this.root = this._initializeTileHeaders(tilesetJson, null, this.basePath);\n      if (this.type === TILESET_TYPE.TILES3D) {\n        this._initializeCesiumTileset(tilesetJson);\n      }\n      if (this.type === TILESET_TYPE.I3S) {\n        this._initializeI3STileset(tilesetJson);\n      }\n      this._calculateViewProps();\n    }\n  }, {\n    key: \"_calculateViewProps\",\n    value: function _calculateViewProps() {\n      var root = this.root;\n      var center = root.boundingVolume.center;\n      if (!center) {\n        console.warn('center was not pre-calculated for the root tile');\n        this.cartographicCenter = new Vector3();\n        this.zoom = 1;\n        return;\n      }\n      this.cartographicCenter = Ellipsoid.WGS84.cartesianToCartographic(center, new Vector3());\n      this.cartesianCenter = center;\n      this.zoom = getZoomFromBoundingVolume(root.boundingVolume);\n    }\n  }, {\n    key: \"_initializeStats\",\n    value: function _initializeStats() {\n      this.stats.get(TILES_TOTAL);\n      this.stats.get(TILES_LOADING);\n      this.stats.get(TILES_IN_MEMORY);\n      this.stats.get(TILES_IN_VIEW);\n      this.stats.get(TILES_RENDERABLE);\n      this.stats.get(TILES_LOADED);\n      this.stats.get(TILES_UNLOADED);\n      this.stats.get(TILES_LOAD_FAILED);\n      this.stats.get(POINTS_COUNT, 'memory');\n      this.stats.get(TILES_GPU_MEMORY, 'memory');\n    }\n  }, {\n    key: \"_initializeTileHeaders\",\n    value: function _initializeTileHeaders(tilesetJson, parentTileHeader, basePath) {\n      var rootTile = new Tile3D(this, tilesetJson.root, parentTileHeader, basePath);\n      if (parentTileHeader) {\n        parentTileHeader.children.push(rootTile);\n        rootTile.depth = parentTileHeader.depth + 1;\n      }\n      if (this.type === TILESET_TYPE.TILES3D) {\n        var stack = [];\n        stack.push(rootTile);\n        while (stack.length > 0) {\n          var tile = stack.pop();\n          this.stats.get(TILES_TOTAL).incrementCount();\n          var children = tile.header.children || [];\n          var _iterator4 = _createForOfIteratorHelper(children),\n            _step4;\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var childHeader = _step4.value;\n              var childTile = new Tile3D(this, childHeader, tile, basePath);\n              tile.children.push(childTile);\n              childTile.depth = tile.depth + 1;\n              stack.push(childTile);\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n        }\n      }\n      return rootTile;\n    }\n  }, {\n    key: \"_initializeTraverser\",\n    value: function _initializeTraverser() {\n      var TraverserClass;\n      var type = this.type;\n      switch (type) {\n        case TILESET_TYPE.TILES3D:\n          TraverserClass = Tileset3DTraverser;\n          break;\n        case TILESET_TYPE.I3S:\n          TraverserClass = I3SetTraverser;\n          break;\n        default:\n          TraverserClass = TilesetTraverser;\n      }\n      return new TraverserClass({\n        basePath: this.basePath,\n        onTraversalEnd: this._onTraversalEnd.bind(this)\n      });\n    }\n  }, {\n    key: \"_destroyTileHeaders\",\n    value: function _destroyTileHeaders(parentTile) {\n      this._destroySubtree(parentTile);\n    }\n  }, {\n    key: \"_loadTile\",\n    value: function () {\n      var _loadTile2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(tile, frameState) {\n        var loaded;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                this._onStartTileLoading();\n                _context.next = 4;\n                return tile.loadContent(frameState);\n              case 4:\n                loaded = _context.sent;\n                _context.next = 10;\n                break;\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                this._onTileLoadError(tile, _context.t0);\n              case 10:\n                _context.prev = 10;\n                this._onEndTileLoading();\n                this._onTileLoad(tile, loaded);\n                return _context.finish(10);\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 7, 10, 14]]);\n      }));\n      function _loadTile(_x, _x2) {\n        return _loadTile2.apply(this, arguments);\n      }\n      return _loadTile;\n    }()\n  }, {\n    key: \"_onTileLoadError\",\n    value: function _onTileLoadError(tile, error) {\n      this.stats.get(TILES_LOAD_FAILED).incrementCount();\n      var message = error.message || error.toString();\n      var url = tile.url;\n      console.error(\"A 3D tile failed to load: \".concat(tile.url, \" \").concat(message));\n      this.options.onTileError(tile, message, url);\n    }\n  }, {\n    key: \"_onTileLoad\",\n    value: function _onTileLoad(tile, loaded) {\n      if (!loaded) {\n        return;\n      }\n      if (tile && tile.content) {\n        calculateTransformProps(tile, tile.content);\n      }\n      this._addTileToCache(tile);\n      this.options.onTileLoad(tile);\n    }\n  }, {\n    key: \"_onStartTileLoading\",\n    value: function _onStartTileLoading() {\n      this._pendingCount++;\n      this.stats.get(TILES_LOADING).incrementCount();\n    }\n  }, {\n    key: \"_onEndTileLoading\",\n    value: function _onEndTileLoading() {\n      this._pendingCount--;\n      this.stats.get(TILES_LOADING).decrementCount();\n    }\n  }, {\n    key: \"_addTileToCache\",\n    value: function _addTileToCache(tile) {\n      this._cache.add(this, tile, function (tileset) {\n        return tileset._updateCacheStats(tile);\n      });\n    }\n  }, {\n    key: \"_updateCacheStats\",\n    value: function _updateCacheStats(tile) {\n      this.stats.get(TILES_LOADED).incrementCount();\n      this.stats.get(TILES_IN_MEMORY).incrementCount();\n      this.gpuMemoryUsageInBytes += tile.content.byteLength || 0;\n      this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n    }\n  }, {\n    key: \"_unloadTile\",\n    value: function _unloadTile(tile) {\n      this.gpuMemoryUsageInBytes -= tile.content.byteLength || 0;\n      this.stats.get(TILES_IN_MEMORY).decrementCount();\n      this.stats.get(TILES_UNLOADED).incrementCount();\n      this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n      this.options.onTileUnload(tile);\n      tile.unloadContent();\n    }\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      var stack = [];\n      if (this.root) {\n        stack.push(this.root);\n      }\n      while (stack.length > 0) {\n        var tile = stack.pop();\n        var _iterator5 = _createForOfIteratorHelper(tile.children),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var child = _step5.value;\n            stack.push(child);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n        this._destroyTile(tile);\n      }\n      this.root = null;\n    }\n  }, {\n    key: \"_destroySubtree\",\n    value: function _destroySubtree(tile) {\n      var root = tile;\n      var stack = [];\n      stack.push(root);\n      while (stack.length > 0) {\n        tile = stack.pop();\n        var _iterator6 = _createForOfIteratorHelper(tile.children),\n          _step6;\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var child = _step6.value;\n            stack.push(child);\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n        if (tile !== root) {\n          this._destroyTile(tile);\n        }\n      }\n      root.children = [];\n    }\n  }, {\n    key: \"_destroyTile\",\n    value: function _destroyTile(tile) {\n      this._cache.unloadTile(this, tile);\n      this._unloadTile(tile);\n      tile.destroy();\n    }\n  }, {\n    key: \"_initializeCesiumTileset\",\n    value: function _initializeCesiumTileset(tilesetJson) {\n      this.asset = tilesetJson.asset;\n      if (!this.asset) {\n        throw new Error('Tileset must have an asset property.');\n      }\n      if (this.asset.version !== '0.0' && this.asset.version !== '1.0') {\n        throw new Error('The tileset must be 3D Tiles version 0.0 or 1.0.');\n      }\n      if ('tilesetVersion' in this.asset) {\n        this._queryParams.v = this.asset.tilesetVersion;\n      }\n      this.credits = {\n        attributions: this.options.attributions || []\n      };\n      this.description = this.options.description;\n      this.properties = tilesetJson.properties;\n      this.geometricError = tilesetJson.geometricError;\n      this._extensionsUsed = tilesetJson.extensionsUsed;\n      this.extras = tilesetJson.extras;\n    }\n  }, {\n    key: \"_initializeI3STileset\",\n    value: function _initializeI3STileset(tilesetJson) {\n      if ('token' in this.options) {\n        this._queryParams.token = this.options.token;\n      }\n      this._defaultGeometrySchema = tilesetJson.store.defaultGeometrySchema;\n    }\n  }, {\n    key: \"hasExtension\",\n    value: function hasExtension(extensionName) {\n      return Boolean(this._extensionsUsed && this._extensionsUsed.indexOf(extensionName) > -1);\n    }\n  }, {\n    key: \"tiles\",\n    get: function get() {\n      return Object.values(this._tiles);\n    }\n  }, {\n    key: \"queryParams\",\n    get: function get() {\n      if (!this._queryParamsString) {\n        this._queryParamsString = getQueryParamString(this._queryParams);\n      }\n      return this._queryParamsString;\n    }\n  }]);\n  return Tileset3D;\n}();\nexport { Tileset3D as default };","map":{"version":3,"sources":["../../../src/tileset/tileset-3d.js"],"names":["Matrix4","Vector3","Ellipsoid","Stats","RequestScheduler","assert","path","TilesetCache","calculateTransformProps","getFrameState","getZoomFromBoundingVolume","Tile3D","Tileset3DTraverser","TilesetTraverser","I3SetTraverser","TILESET_TYPE","TILES_TOTAL","TILES_IN_MEMORY","TILES_IN_VIEW","TILES_RENDERABLE","TILES_LOADED","TILES_LOADING","TILES_UNLOADED","TILES_LOAD_FAILED","POINTS_COUNT","TILES_GPU_MEMORY","getQueryParamString","queryParams","queryParamStrings","key","Object","keys","push","length","join","DEFAULT_OPTIONS","ellipsoid","WGS84","modelMatrix","throttleRequests","maximumMemoryUsage","onTileLoad","onTileUnload","onTileError","tile","message","url","maximumScreenSpaceError","Tileset3D","json","options","tileset","loader","type","basePath","dirname","lodMetricType","lodMetricValue","refine","root","fetchOptions","headers","token","cartographicCenter","cartesianCenter","zoom","boundingVolume","_traverser","_initializeTraverser","_cache","_requestScheduler","_frameNumber","_updateFrameNumber","_pendingCount","_tiles","selectedTiles","_emptyTiles","_requestedTiles","_selectedTilesToStyle","_queryParams","_queryParamsString","gpuMemoryUsageInBytes","stats","id","_initializeStats","_hasMixedContent","_maximumScreenSpaceError","_properties","undefined","_extensionsUsed","_gltfUpAxis","_dynamicScreenSpaceErrorComputedDensity","extras","asset","credits","description","_defaultGeometrySchema","_initializeTileSet","_destroy","values","tilePath","isDataUrl","startsWith","viewport","reset","_frameState","traverse","_tilesChanged","requestedTiles","emptyTiles","_loadTiles","_unloadTiles","_updateStats","oldSelectedTiles","set1","Set","map","t","set2","changed","filter","has","x","frameState","contentUnloaded","_loadTile","unloadTiles","_unloadTile","tilesRenderable","pointsRenderable","contentAvailable","content","pointCount","get","count","tilesetJson","_initializeTileHeaders","TILES3D","_initializeCesiumTileset","I3S","_initializeI3STileset","_calculateViewProps","center","console","warn","cartesianToCartographic","parentTileHeader","rootTile","children","depth","stack","pop","incrementCount","header","childHeader","childTile","TraverserClass","onTraversalEnd","_onTraversalEnd","bind","parentTile","_destroySubtree","_onStartTileLoading","loaded","loadContent","_onTileLoadError","_onEndTileLoading","_onTileLoad","error","toString","_addTileToCache","decrementCount","add","_updateCacheStats","byteLength","unloadContent","child","_destroyTile","unloadTile","destroy","Error","version","v","tilesetVersion","attributions","properties","geometricError","extensionsUsed","store","defaultGeometrySchema","extensionName","Boolean","indexOf"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/*\n\n  The Tileset loading and rendering flow is as below,\n  A rendered (i.e. deck.gl `Tile3DLayer`) triggers `tileset.update()` after a `tileset` is loaded\n  `tileset` starts traversing the tile tree and update `requestTiles` (tiles of which content need\n  to be fetched) and `selectedTiles` (tiles ready for rendering under the current viewport).\n  `Tile3DLayer` will update rendering based on `selectedTiles`.\n  `Tile3DLayer` also listens to `onTileLoad` callback and trigger another round of `update and then traversal`\n  when new tiles are loaded.\n\n  As I3S tileset have stored `tileHeader` file (metadata) and tile content files (geometry, texture, ...) separately.\n  During each traversal, it issues `tilHeader` requests if that `tileHeader` is not yet fetched,\n  after the tile header is fulfilled, it will resume the traversal starting from the tile just fetched (not root).\n\n  Tile3DLayer\n       |\n   await load(tileset)\n       |\n   tileset.update()\n       |                async load tileHeader\n   tileset.traverse() -------------------------- Queued\n       |        resume traversal after fetched  |\n       |----------------------------------------|\n       |\n       |                     async load tile content\n  tilset.requestedTiles  ----------------------------- RequestScheduler\n                                                              |\n  tilset.selectedTiles (ready for rendering)                  |\n       |         Listen to                                    |\n    Tile3DLayer ----------- onTileLoad  ----------------------|\n       |                         |   notify new tile is available\n    updateLayers                 |\n                        tileset.update // trigger another round of update\n\n*/\n\nimport {Matrix4, Vector3} from '@math.gl/core';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {Stats} from '@probe.gl/stats';\nimport {RequestScheduler, assert, path} from '@loaders.gl/loader-utils';\n\nimport TilesetCache from './tileset-cache';\nimport {calculateTransformProps} from './helpers/transform-utils';\nimport {getFrameState} from './helpers/frame-state';\nimport {getZoomFromBoundingVolume} from './helpers/zoom';\nimport Tile3D from './tile-3d';\nimport Tileset3DTraverser from './traversers/tileset-3d-traverser';\nimport TilesetTraverser from './traversers/tileset-traverser';\nimport I3SetTraverser from './traversers/i3s-tilset-traverser';\nimport {TILESET_TYPE} from '../constants';\n\n// Tracked Stats\nconst TILES_TOTAL = 'Tiles In Tileset(s)';\nconst TILES_IN_MEMORY = 'Tiles In Memory';\nconst TILES_IN_VIEW = 'Tiles In View';\nconst TILES_RENDERABLE = 'Tiles To Render';\nconst TILES_LOADED = 'Tiles Loaded';\nconst TILES_LOADING = 'Tiles Loading';\nconst TILES_UNLOADED = 'Tiles Unloaded';\nconst TILES_LOAD_FAILED = 'Failed Tile Loads';\nconst POINTS_COUNT = 'Points';\nconst TILES_GPU_MEMORY = 'Tile Memory Use';\n\nfunction getQueryParamString(queryParams) {\n  const queryParamStrings = [];\n  for (const key of Object.keys(queryParams)) {\n    queryParamStrings.push(`${key}=${queryParams[key]}`);\n  }\n  switch (queryParamStrings.length) {\n    case 0:\n      return '';\n    case 1:\n      return `?${queryParamStrings[0]}`;\n    default:\n      return `?${queryParamStrings.join('&')}`;\n  }\n}\n\nconst DEFAULT_OPTIONS = {\n  ellipsoid: Ellipsoid.WGS84,\n  // A 4x4 transformation matrix this transforms the entire tileset.\n  modelMatrix: new Matrix4(),\n\n  // Set to true to enable experimental request throttling, for improved performance\n  throttleRequests: false,\n\n  maximumMemoryUsage: 32,\n\n  // Indicates this a tile's content was loaded\n  onTileLoad: () => {},\n  // Indicates this a tile's content was unloaded\n  onTileUnload: () => {},\n  onTileError: (tile, message, url) => {},\n\n  // TODO CESIUM\n  // The maximum screen space error used to drive level of detail refinement.\n  maximumScreenSpaceError: 8\n  // dynamicScreenSpaceError: false,\n  // dynamicScreenSpaceErrorDensity: 0.00278,\n  // dynamicScreenSpaceErrorFactor: 4.0,\n  // Optimization option. Determines if level of detail skipping should be applied during the traversal.\n  // skipLevelOfDetail: false,\n  // The screen space error this must be reached before skipping levels of detail.\n  // baseScreenSpaceError: 1024\n};\n\nexport default class Tileset3D {\n  // eslint-disable-next-line max-statements\n  constructor(json, options = {}) {\n    assert(json);\n\n    // PUBLIC MEMBERS\n    this.options = {...DEFAULT_OPTIONS, ...options};\n    // raw data\n    this.tileset = json;\n    this.loader = json.loader;\n    // could be  3d tiles, i3s\n    this.type = json.type;\n    // The url to a tileset JSON file.\n    this.url = json.url;\n    this.basePath = json.basePath || path.dirname(this.url);\n    this.modelMatrix = this.options.modelMatrix;\n    this.ellipsoid = this.options.ellipsoid;\n\n    // Geometric error when the tree is not rendered at all\n    this.lodMetricType = json.lodMetricType;\n    this.lodMetricValue = json.lodMetricValue;\n    this.refine = json.root.refine;\n\n    // TODO add to loader context?\n    this.fetchOptions = this.options.fetchOptions || {};\n    if (this.options.headers) {\n      this.fetchOptions.headers = this.options.headers;\n    }\n    if (this.options.token) {\n      this.fetchOptions.token = this.options.token;\n    }\n\n    this.root = null;\n    // view props\n    this.cartographicCenter = null;\n    this.cartesianCenter = null;\n    this.zoom = 1;\n    this.boundingVolume = null;\n\n    // TRAVERSAL\n    this._traverser = this._initializeTraverser();\n    this._cache = new TilesetCache();\n    this._requestScheduler = new RequestScheduler({\n      throttleRequests: this.options.throttleRequests\n    });\n    // update tracker\n    // increase in each update cycle\n    this._frameNumber = 0;\n    // increase when tiles selected for rendering changed\n    this._updateFrameNumber = 0;\n    // counter for tracking tiles requests\n    this._pendingCount = 0;\n\n    // HOLD TRAVERSAL RESULTS\n    this._tiles = {};\n    this.selectedTiles = [];\n    this._emptyTiles = [];\n    this._requestedTiles = [];\n    this._selectedTilesToStyle = [];\n\n    this._queryParams = {};\n    this._queryParamsString = null;\n\n    // METRICS\n    // The maximum amount of GPU memory (in MB) that may be used to cache tiles.\n    // Tiles not in view are unloaded to enforce this.\n    this.maximumMemoryUsage = this.options.maximumMemoryUsage;\n    // The total amount of GPU memory in bytes used by the tileset.\n    this.gpuMemoryUsageInBytes = 0;\n    this.stats = new Stats({id: this.url});\n    this._initializeStats();\n\n    // TODO CESIUM specific\n    this._hasMixedContent = false;\n    this._maximumScreenSpaceError = this.options.maximumScreenSpaceError;\n    // EXTRACTED FROM TILESET\n    this._properties = undefined; // Metadata for per-model/point/etc properties\n    this._extensionsUsed = undefined;\n    this._gltfUpAxis = undefined;\n    this._dynamicScreenSpaceErrorComputedDensity = 0.0; // Updated based on the camera position and direction\n    // Metadata for the entire tileset\n    this.extras = null;\n    this.asset = {};\n    this.credits = {};\n    this.description = this.options.description;\n\n    // TODO I3S Specific\n    this._defaultGeometrySchema = [];\n\n    this._initializeTileSet(json, this.options);\n  }\n\n  isLoaded() {\n    return this._pendingCount === 0;\n  }\n\n  destroy() {\n    this._destroy();\n  }\n\n  get tiles() {\n    return Object.values(this._tiles);\n  }\n\n  getTileUrl(tilePath) {\n    const isDataUrl = tilePath.startsWith('data:');\n    if (isDataUrl) {\n      return tilePath;\n    }\n    return `${tilePath}${this.queryParams}`;\n  }\n\n  update(viewport) {\n    this._cache.reset();\n    this._frameNumber++;\n    this._frameState = getFrameState(viewport, this._frameNumber);\n    this._traverser.traverse(this.root, this._frameState, this.options);\n  }\n\n  _onTraversalEnd() {\n    const selectedTiles = Object.values(this._traverser.selectedTiles);\n    if (this._tilesChanged(this.selectedTiles, selectedTiles)) {\n      this._updateFrameNumber++;\n    }\n\n    this.selectedTiles = selectedTiles;\n    for (const tile of this.selectedTiles) {\n      this._tiles[tile.id] = tile;\n    }\n    this._requestedTiles = Object.values(this._traverser.requestedTiles);\n    this._emptyTiles = Object.values(this._traverser.emptyTiles);\n\n    this._loadTiles(this._frameState);\n    this._unloadTiles();\n    this._updateStats();\n\n    return this._updateFrameNumber;\n  }\n\n  _tilesChanged(oldSelectedTiles, selectedTiles) {\n    if (oldSelectedTiles.length !== selectedTiles.length) {\n      return true;\n    }\n    const set1 = new Set(oldSelectedTiles.map(t => t.id));\n    const set2 = new Set(selectedTiles.map(t => t.id));\n    let changed = oldSelectedTiles.filter(x => !set2.has(x.id)).length > 0;\n    changed = changed || selectedTiles.filter(x => !set1.has(x.id)).length > 0;\n    return changed;\n  }\n\n  _loadTiles(frameState) {\n    // Sort requests by priority before making any requests.\n    // This makes it less likely this requests will be cancelled after being issued.\n    // requestedTiles.sort((a, b) => a._priority - b._priority);\n    for (const tile of this._requestedTiles) {\n      if (tile.contentUnloaded) {\n        this._loadTile(tile, frameState);\n      }\n    }\n  }\n\n  _unloadTiles() {\n    // unload tiles from cache when hit maximumMemoryUsage\n    this._cache.unloadTiles(this, (tileset, tile) => tileset._unloadTile(tile));\n  }\n\n  _updateStats() {\n    let tilesRenderable = 0;\n    let pointsRenderable = 0;\n    for (const tile of this.selectedTiles) {\n      if (tile.contentAvailable) {\n        tilesRenderable++;\n        if (tile.content.pointCount) {\n          pointsRenderable += tile.content.pointCount;\n        }\n      }\n    }\n\n    this.stats.get(TILES_IN_VIEW).count = this.selectedTiles.length;\n    this.stats.get(TILES_RENDERABLE).count = tilesRenderable;\n    this.stats.get(POINTS_COUNT).count = pointsRenderable;\n  }\n\n  _initializeTileSet(tilesetJson) {\n    this.root = this._initializeTileHeaders(tilesetJson, null, this.basePath);\n\n    // TODO CESIUM Specific\n    if (this.type === TILESET_TYPE.TILES3D) {\n      this._initializeCesiumTileset(tilesetJson);\n    }\n\n    if (this.type === TILESET_TYPE.I3S) {\n      this._initializeI3STileset(tilesetJson);\n    }\n    // Calculate cartographicCenter & zoom props to help apps center view on tileset\n    this._calculateViewProps();\n  }\n\n  // Called during initialize Tileset to initialize the tileset's cartographic center (longitude, latitude) and zoom.\n  _calculateViewProps() {\n    const root = this.root;\n    const {center} = root.boundingVolume;\n    // TODO - handle all cases\n    if (!center) {\n      // eslint-disable-next-line\n      console.warn('center was not pre-calculated for the root tile');\n      this.cartographicCenter = new Vector3();\n      this.zoom = 1;\n      return;\n    }\n    this.cartographicCenter = Ellipsoid.WGS84.cartesianToCartographic(center, new Vector3());\n    this.cartesianCenter = center;\n    this.zoom = getZoomFromBoundingVolume(root.boundingVolume);\n  }\n\n  _initializeStats() {\n    this.stats.get(TILES_TOTAL);\n    this.stats.get(TILES_LOADING);\n    this.stats.get(TILES_IN_MEMORY);\n    this.stats.get(TILES_IN_VIEW);\n    this.stats.get(TILES_RENDERABLE);\n    this.stats.get(TILES_LOADED);\n    this.stats.get(TILES_UNLOADED);\n    this.stats.get(TILES_LOAD_FAILED);\n    this.stats.get(POINTS_COUNT, 'memory');\n    this.stats.get(TILES_GPU_MEMORY, 'memory');\n  }\n\n  // Installs the main tileset JSON file or a tileset JSON file referenced from a tile.\n  // eslint-disable-next-line max-statements\n  _initializeTileHeaders(tilesetJson, parentTileHeader, basePath) {\n    // A tileset JSON file referenced from a tile may exist in a different directory than the root tileset.\n    // Get the basePath relative to the external tileset.\n    const rootTile = new Tile3D(this, tilesetJson.root, parentTileHeader, basePath); // resource\n\n    // If there is a parentTileHeader, add the root of the currently loading tileset\n    // to parentTileHeader's children, and update its depth.\n    if (parentTileHeader) {\n      parentTileHeader.children.push(rootTile);\n      rootTile.depth = parentTileHeader.depth + 1;\n    }\n\n    // Cesium 3d tiles knows the hierarchy beforehand\n    if (this.type === TILESET_TYPE.TILES3D) {\n      const stack = [];\n      stack.push(rootTile);\n\n      while (stack.length > 0) {\n        const tile = stack.pop();\n        this.stats.get(TILES_TOTAL).incrementCount();\n        const children = tile.header.children || [];\n        for (const childHeader of children) {\n          const childTile = new Tile3D(this, childHeader, tile, basePath);\n          tile.children.push(childTile);\n          childTile.depth = tile.depth + 1;\n          stack.push(childTile);\n        }\n      }\n    }\n\n    return rootTile;\n  }\n\n  _initializeTraverser() {\n    let TraverserClass;\n    const type = this.type;\n    switch (type) {\n      case TILESET_TYPE.TILES3D:\n        TraverserClass = Tileset3DTraverser;\n        break;\n      case TILESET_TYPE.I3S:\n        TraverserClass = I3SetTraverser;\n        break;\n      default:\n        TraverserClass = TilesetTraverser;\n    }\n\n    return new TraverserClass({\n      basePath: this.basePath,\n      onTraversalEnd: this._onTraversalEnd.bind(this)\n    });\n  }\n\n  _destroyTileHeaders(parentTile) {\n    this._destroySubtree(parentTile);\n  }\n\n  async _loadTile(tile, frameState) {\n    let loaded;\n    try {\n      this._onStartTileLoading();\n      loaded = await tile.loadContent(frameState);\n    } catch (error) {\n      this._onTileLoadError(tile, error);\n    } finally {\n      this._onEndTileLoading();\n      this._onTileLoad(tile, loaded);\n    }\n  }\n\n  _onTileLoadError(tile, error) {\n    this.stats.get(TILES_LOAD_FAILED).incrementCount();\n\n    const message = error.message || error.toString();\n    const url = tile.url;\n    // TODO - Allow for probe log to be injected instead of console?\n    console.error(`A 3D tile failed to load: ${tile.url} ${message}`); // eslint-disable-line\n    this.options.onTileError(tile, message, url);\n  }\n\n  _onTileLoad(tile, loaded) {\n    if (!loaded) {\n      return;\n    }\n\n    // add coordinateOrigin and modelMatrix to tile\n    if (tile && tile.content) {\n      calculateTransformProps(tile, tile.content);\n    }\n\n    this._addTileToCache(tile);\n    this.options.onTileLoad(tile);\n  }\n\n  _onStartTileLoading() {\n    this._pendingCount++;\n    this.stats.get(TILES_LOADING).incrementCount();\n  }\n\n  _onEndTileLoading() {\n    this._pendingCount--;\n    this.stats.get(TILES_LOADING).decrementCount();\n  }\n\n  _addTileToCache(tile) {\n    this._cache.add(this, tile, tileset => tileset._updateCacheStats(tile));\n  }\n\n  _updateCacheStats(tile) {\n    this.stats.get(TILES_LOADED).incrementCount();\n    this.stats.get(TILES_IN_MEMORY).incrementCount();\n\n    // Good enough? Just use the raw binary ArrayBuffer's byte length.\n    this.gpuMemoryUsageInBytes += tile.content.byteLength || 0;\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n  }\n\n  _unloadTile(tile) {\n    this.gpuMemoryUsageInBytes -= tile.content.byteLength || 0;\n\n    this.stats.get(TILES_IN_MEMORY).decrementCount();\n    this.stats.get(TILES_UNLOADED).incrementCount();\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n\n    this.options.onTileUnload(tile);\n    tile.unloadContent();\n  }\n\n  // Traverse the tree and destroy all tiles\n  _destroy() {\n    const stack = [];\n\n    if (this.root) {\n      stack.push(this.root);\n    }\n\n    while (stack.length > 0) {\n      const tile = stack.pop();\n\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n\n      this._destroyTile(tile);\n    }\n    this.root = null;\n  }\n\n  // Traverse the tree and destroy all sub tiles\n  _destroySubtree(tile) {\n    const root = tile;\n    const stack = [];\n    stack.push(root);\n    while (stack.length > 0) {\n      tile = stack.pop();\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n      if (tile !== root) {\n        this._destroyTile(tile);\n      }\n    }\n    root.children = [];\n  }\n\n  _destroyTile(tile) {\n    this._cache.unloadTile(this, tile);\n    this._unloadTile(tile);\n    tile.destroy();\n  }\n\n  _initializeCesiumTileset(tilesetJson) {\n    this.asset = tilesetJson.asset;\n    if (!this.asset) {\n      throw new Error('Tileset must have an asset property.');\n    }\n    if (this.asset.version !== '0.0' && this.asset.version !== '1.0') {\n      throw new Error('The tileset must be 3D Tiles version 0.0 or 1.0.');\n    }\n\n    // Note: `asset.tilesetVersion` is version of the tileset itself (not the version of the 3D TILES standard)\n    // We add this version as a `v=1.0` query param to fetch the right version and not get an older cached version\n    if ('tilesetVersion' in this.asset) {\n      this._queryParams.v = this.asset.tilesetVersion;\n    }\n\n    // TODO - ion resources have a credits property we can use for additional attribution.\n    this.credits = {\n      attributions: this.options.attributions || []\n    };\n    this.description = this.options.description;\n\n    // Gets the tileset's properties dictionary object, which contains metadata about per-feature properties.\n    this.properties = tilesetJson.properties;\n    this.geometricError = tilesetJson.geometricError;\n    this._extensionsUsed = tilesetJson.extensionsUsed;\n    // Returns the extras property at the top of the tileset JSON (application specific metadata).\n    this.extras = tilesetJson.extras;\n  }\n\n  _initializeI3STileset(tilesetJson) {\n    if ('token' in this.options) {\n      this._queryParams.token = this.options.token;\n    }\n    // Initialize default Geometry schema\n    this._defaultGeometrySchema = tilesetJson.store.defaultGeometrySchema;\n  }\n\n  // TODO CESIUM specific\n  hasExtension(extensionName) {\n    return Boolean(this._extensionsUsed && this._extensionsUsed.indexOf(extensionName) > -1);\n  }\n\n  get queryParams() {\n    if (!this._queryParamsString) {\n      this._queryParamsString = getQueryParamString(this._queryParams);\n    }\n    return this._queryParamsString;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}