{"ast":null,"code":"import { Vector3 } from '@math.gl/core';\nvar WGS84_RADIUS_X = 6378137.0;\nvar WGS84_RADIUS_Y = 6378137.0;\nvar WGS84_RADIUS_Z = 6356752.3142451793;\nvar scratchVector = new Vector3();\nexport function getZoomFromBoundingVolume(boundingVolume) {\n  var halfAxes = boundingVolume.halfAxes,\n    radius = boundingVolume.radius,\n    width = boundingVolume.width,\n    height = boundingVolume.height;\n  if (halfAxes) {\n    halfAxes.getColumn(0, scratchVector);\n    var x = scratchVector.len();\n    halfAxes.getColumn(1, scratchVector);\n    var y = scratchVector.len();\n    halfAxes.getColumn(2, scratchVector);\n    var z = scratchVector.len();\n    var halfX = x / 2;\n    var halfY = y / 2;\n    var halfZ = z / 2;\n    var zoomX = Math.log2(WGS84_RADIUS_X / halfX);\n    var zoomY = Math.log2(WGS84_RADIUS_Y / halfY);\n    var zoomZ = Math.log2(WGS84_RADIUS_Z / halfZ);\n    return (zoomX + zoomY + zoomZ) / 3;\n  } else if (radius) {\n    return Math.log2(WGS84_RADIUS_Z / radius);\n  } else if (height && width) {\n    var _zoomX = Math.log2(WGS84_RADIUS_X / width);\n    var _zoomY = Math.log2(WGS84_RADIUS_Y / height);\n    return (_zoomX + _zoomY) / 2;\n  }\n  return 1;\n}","map":{"version":3,"sources":["../../../../src/tileset/helpers/zoom.js"],"names":["Vector3","WGS84_RADIUS_X","WGS84_RADIUS_Y","WGS84_RADIUS_Z","scratchVector","getZoomFromBoundingVolume","boundingVolume","halfAxes","radius","width","height","getColumn","x","len","y","z","halfX","halfY","halfZ","zoomX","Math","log2","zoomY","zoomZ"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,eAAtB;AAEA,IAAMC,cAAc,GAAG,SAAvB;AACA,IAAMC,cAAc,GAAG,SAAvB;AACA,IAAMC,cAAc,GAAG,kBAAvB;AAEA,IAAMC,aAAa,GAAG,IAAIJ,OAAJ,EAAtB;AAEA,OAAO,SAASK,yBAAT,CAAmCC,cAAnC,EAAmD;EAAA,IACjDC,QADiD,GACdD,cADc,CACjDC,QADiD;IACvCC,MADuC,GACdF,cADc,CACvCE,MADuC;IAC/BC,KAD+B,GACdH,cADc,CAC/BG,KAD+B;IACxBC,MADwB,GACdJ,cADc,CACxBI,MADwB;EAGxD,IAAIH,QAAJ,EAAc;IAEZA,QAAQ,CAACI,SAATJ,CAAmB,CAAnBA,EAAsBH,aAAtBG,CAAAA;IACA,IAAMK,CAAC,GAAGR,aAAa,CAACS,GAAdT,EAAV;IACAG,QAAQ,CAACI,SAATJ,CAAmB,CAAnBA,EAAsBH,aAAtBG,CAAAA;IACA,IAAMO,CAAC,GAAGV,aAAa,CAACS,GAAdT,EAAV;IACAG,QAAQ,CAACI,SAATJ,CAAmB,CAAnBA,EAAsBH,aAAtBG,CAAAA;IACA,IAAMQ,CAAC,GAAGX,aAAa,CAACS,GAAdT,EAAV;IAEA,IAAMY,KAAK,GAAGJ,CAAC,GAAG,CAAlB;IACA,IAAMK,KAAK,GAAGH,CAAC,GAAG,CAAlB;IACA,IAAMI,KAAK,GAAGH,CAAC,GAAG,CAAlB;IAEA,IAAMI,KAAK,GAAGC,IAAI,CAACC,IAALD,CAAUnB,cAAc,GAAGe,KAA3BI,CAAd;IACA,IAAME,KAAK,GAAGF,IAAI,CAACC,IAALD,CAAUlB,cAAc,GAAGe,KAA3BG,CAAd;IACA,IAAMG,KAAK,GAAGH,IAAI,CAACC,IAALD,CAAUjB,cAAc,GAAGe,KAA3BE,CAAd;IACA,OAAO,CAACD,KAAK,GAAGG,KAARH,GAAgBI,KAAjB,IAA0B,CAAjC;EACD,CAjBD,MAiBO,IAAIf,MAAJ,EAAY;IAEjB,OAAOY,IAAI,CAACC,IAALD,CAAUjB,cAAc,GAAGK,MAA3BY,CAAP;EACD,CAHM,MAGA,IAAIV,MAAM,IAAID,KAAd,EAAqB;IAE1B,IAAMU,MAAK,GAAGC,IAAI,CAACC,IAALD,CAAUnB,cAAc,GAAGQ,KAA3BW,CAAd;IACA,IAAME,MAAK,GAAGF,IAAI,CAACC,IAALD,CAAUlB,cAAc,GAAGQ,MAA3BU,CAAd;IAEA,OAAO,CAACD,MAAK,GAAGG,MAAT,IAAkB,CAAzB;EACD;EAED,OAAO,CAAP;AACD","sourcesContent":["import {Vector3} from '@math.gl/core';\n\nconst WGS84_RADIUS_X = 6378137.0;\nconst WGS84_RADIUS_Y = 6378137.0;\nconst WGS84_RADIUS_Z = 6356752.3142451793;\n\nconst scratchVector = new Vector3();\n\nexport function getZoomFromBoundingVolume(boundingVolume) {\n  const {halfAxes, radius, width, height} = boundingVolume;\n\n  if (halfAxes) {\n    // OrientedBoundingBox\n    halfAxes.getColumn(0, scratchVector);\n    const x = scratchVector.len();\n    halfAxes.getColumn(1, scratchVector);\n    const y = scratchVector.len();\n    halfAxes.getColumn(2, scratchVector);\n    const z = scratchVector.len();\n\n    const halfX = x / 2;\n    const halfY = y / 2;\n    const halfZ = z / 2;\n\n    const zoomX = Math.log2(WGS84_RADIUS_X / halfX);\n    const zoomY = Math.log2(WGS84_RADIUS_Y / halfY);\n    const zoomZ = Math.log2(WGS84_RADIUS_Z / halfZ);\n    return (zoomX + zoomY + zoomZ) / 3;\n  } else if (radius) {\n    // BoundingSphere\n    return Math.log2(WGS84_RADIUS_Z / radius);\n  } else if (height && width) {\n    // BoundingRectangle\n    const zoomX = Math.log2(WGS84_RADIUS_X / width);\n    const zoomY = Math.log2(WGS84_RADIUS_Y / height);\n\n    return (zoomX + zoomY) / 2;\n  }\n\n  return 1;\n}\n"]},"metadata":{},"sourceType":"module"}