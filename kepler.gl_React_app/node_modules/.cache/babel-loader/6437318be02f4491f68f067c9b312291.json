{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { GridCellLayer } from '@deck.gl/layers';\nimport { defaultColorRange } from '../utils/color-utils';\nimport { pointToDensityGridDataCPU } from './grid-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer from '../aggregation-layer';\nfunction nop() {}\nvar defaultProps = {\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {\n    type: 'accessor',\n    value: null\n  },\n  getColorWeight: {\n    type: 'accessor',\n    value: function value(x) {\n      return 1;\n    }\n  },\n  colorAggregation: 'SUM',\n  lowerPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 0\n  },\n  upperPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 100\n  },\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {\n    type: 'accessor',\n    value: null\n  },\n  getElevationWeight: {\n    type: 'accessor',\n    value: function value(x) {\n      return 1;\n    }\n  },\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 0\n  },\n  elevationUpperPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 100\n  },\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n  gridAggregator: pointToDensityGridDataCPU,\n  cellSize: {\n    type: 'number',\n    min: 0,\n    max: 1000,\n    value: 1000\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  extruded: false,\n  material: true,\n  _filterData: {\n    type: 'function',\n    value: null,\n    optional: true\n  }\n};\nvar CPUGridLayer = function (_AggregationLayer) {\n  _inherits(CPUGridLayer, _AggregationLayer);\n  function CPUGridLayer() {\n    _classCallCheck(this, CPUGridLayer);\n    return _possibleConstructorReturn(this, _getPrototypeOf(CPUGridLayer).apply(this, arguments));\n  }\n  _createClass(CPUGridLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var cpuAggregator = new CPUAggregator({\n        getAggregator: function getAggregator(props) {\n          return props.gridAggregator;\n        },\n        getCellSize: function getCellSize(props) {\n          return props.cellSize;\n        }\n      });\n      this.state = {\n        cpuAggregator: cpuAggregator,\n        aggregatorState: cpuAggregator.state\n      };\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add({\n        positions: {\n          size: 3,\n          accessor: 'getPosition'\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      _get(_getPrototypeOf(CPUGridLayer.prototype), \"updateState\", this).call(this, opts);\n      this.setState({\n        aggregatorState: this.state.cpuAggregator.updateState(opts, {\n          viewport: this.context.viewport,\n          attributes: this.getAttributes(),\n          numInstances: this.getNumInstances(opts.props)\n        })\n      });\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref) {\n      var info = _ref.info;\n      return this.state.cpuAggregator.getPickingInfo({\n        info: info\n      });\n    }\n  }, {\n    key: \"_onGetSublayerColor\",\n    value: function _onGetSublayerColor(cell) {\n      return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n    }\n  }, {\n    key: \"_onGetSublayerElevation\",\n    value: function _onGetSublayerElevation(cell) {\n      return this.state.cpuAggregator.getAccessor('elevation')(cell);\n    }\n  }, {\n    key: \"_getSublayerUpdateTriggers\",\n    value: function _getSublayerUpdateTriggers() {\n      return this.state.cpuAggregator.getUpdateTriggers(this.props);\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props = this.props,\n        elevationScale = _this$props.elevationScale,\n        extruded = _this$props.extruded,\n        cellSize = _this$props.cellSize,\n        coverage = _this$props.coverage,\n        material = _this$props.material,\n        transitions = _this$props.transitions;\n      var cpuAggregator = this.state.cpuAggregator;\n      var SubLayerClass = this.getSubLayerClass('grid-cell', GridCellLayer);\n      var updateTriggers = this._getSublayerUpdateTriggers();\n      return new SubLayerClass({\n        cellSize: cellSize,\n        coverage: coverage,\n        material: material,\n        elevationScale: elevationScale,\n        extruded: extruded,\n        getFillColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getFillColor: transitions.getColorValue || transitions.getColorWeight,\n          getElevation: transitions.getElevationValue || transitions.getElevationWeight\n        }\n      }, this.getSubLayerProps({\n        id: 'grid-cell',\n        updateTriggers: updateTriggers\n      }), {\n        data: cpuAggregator.state.layerData.data\n      });\n    }\n  }]);\n  return CPUGridLayer;\n}(AggregationLayer);\nexport { CPUGridLayer as default };\nCPUGridLayer.layerName = 'CPUGridLayer';\nCPUGridLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/cpu-grid-layer/cpu-grid-layer.js"],"names":["GridCellLayer","defaultColorRange","pointToDensityGridDataCPU","CPUAggregator","AggregationLayer","nop","defaultProps","colorDomain","colorRange","getColorValue","type","value","getColorWeight","colorAggregation","lowerPercentile","min","max","upperPercentile","colorScaleType","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","getElevationWeight","elevationAggregation","elevationLowerPercentile","elevationUpperPercentile","elevationScale","elevationScaleType","onSetElevationDomain","gridAggregator","cellSize","coverage","getPosition","x","position","extruded","material","_filterData","optional","CPUGridLayer","cpuAggregator","getAggregator","props","getCellSize","state","aggregatorState","attributeManager","getAttributeManager","add","positions","size","accessor","opts","setState","updateState","viewport","context","attributes","getAttributes","numInstances","getNumInstances","info","getPickingInfo","cell","getAccessor","getUpdateTriggers","transitions","SubLayerClass","getSubLayerClass","updateTriggers","_getSublayerUpdateTriggers","getFillColor","_onGetSublayerColor","bind","getElevation","_onGetSublayerElevation","getSubLayerProps","id","data","layerData","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {GridCellLayer} from '@deck.gl/layers';\n\nimport {defaultColorRange} from '../utils/color-utils';\nimport {pointToDensityGridDataCPU} from './grid-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer from '../aggregation-layer';\n\nfunction nop() {}\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {type: 'accessor', value: null}, // default value is calculated from `getColorWeight` and `colorAggregation`\n  getColorWeight: {type: 'accessor', value: x => 1},\n  colorAggregation: 'SUM',\n  lowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  upperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {type: 'accessor', value: null}, // default value is calculated from `getElevationWeight` and `elevationAggregation`\n  getElevationWeight: {type: 'accessor', value: x => 1},\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  elevationUpperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n\n  gridAggregator: pointToDensityGridDataCPU,\n\n  // grid\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getPosition: {type: 'accessor', value: x => x.position},\n  extruded: false,\n\n  // Optional material for 'lighting' shader module\n  material: true,\n\n  // data filter\n  _filterData: {type: 'function', value: null, optional: true}\n};\n\nexport default class CPUGridLayer extends AggregationLayer {\n  initializeState() {\n    const cpuAggregator = new CPUAggregator({\n      getAggregator: props => props.gridAggregator,\n      getCellSize: props => props.cellSize\n    });\n\n    this.state = {\n      cpuAggregator,\n      aggregatorState: cpuAggregator.state\n    };\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, accessor: 'getPosition'}\n    });\n    // color and elevation attributes can't be added as attributes\n    // they are calcualted using 'getValue' accessor that takes an array of pints.\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n    this.setState({\n      // make a copy of the internal state of cpuAggregator for testing\n      aggregatorState: this.state.cpuAggregator.updateState(opts, {\n        viewport: this.context.viewport,\n        attributes: this.getAttributes(),\n        numInstances: this.getNumInstances(opts.props)\n      })\n    });\n  }\n\n  getPickingInfo({info}) {\n    return this.state.cpuAggregator.getPickingInfo({info});\n  }\n\n  // create a method for testing\n  _onGetSublayerColor(cell) {\n    return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n  }\n\n  // create a method for testing\n  _onGetSublayerElevation(cell) {\n    return this.state.cpuAggregator.getAccessor('elevation')(cell);\n  }\n\n  _getSublayerUpdateTriggers() {\n    return this.state.cpuAggregator.getUpdateTriggers(this.props);\n  }\n\n  renderLayers() {\n    const {elevationScale, extruded, cellSize, coverage, material, transitions} = this.props;\n    const {cpuAggregator} = this.state;\n    const SubLayerClass = this.getSubLayerClass('grid-cell', GridCellLayer);\n    const updateTriggers = this._getSublayerUpdateTriggers();\n\n    return new SubLayerClass(\n      {\n        cellSize,\n        coverage,\n        material,\n        elevationScale,\n        extruded,\n\n        getFillColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getFillColor: transitions.getColorValue || transitions.getColorWeight,\n          getElevation: transitions.getElevationValue || transitions.getElevationWeight\n        }\n      },\n      this.getSubLayerProps({\n        id: 'grid-cell',\n        updateTriggers\n      }),\n      {\n        data: cpuAggregator.state.layerData.data\n      }\n    );\n  }\n}\n\nCPUGridLayer.layerName = 'CPUGridLayer';\nCPUGridLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}