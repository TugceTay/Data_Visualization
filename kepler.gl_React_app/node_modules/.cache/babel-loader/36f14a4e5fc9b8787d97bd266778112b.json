{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport { log } from '@deck.gl/core';\nimport { Geometry, uid } from '@luma.gl/core';\nvar ColumnGeometry = function (_Geometry) {\n  _inherits(ColumnGeometry, _Geometry);\n  function ColumnGeometry() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, ColumnGeometry);\n    var _props$id = props.id,\n      id = _props$id === void 0 ? uid('column-geometry') : _props$id;\n    var _tesselateColumn = tesselateColumn(props),\n      indices = _tesselateColumn.indices,\n      attributes = _tesselateColumn.attributes;\n    return _possibleConstructorReturn(this, _getPrototypeOf(ColumnGeometry).call(this, _objectSpread({}, props, {\n      id: id,\n      indices: indices,\n      attributes: attributes\n    })));\n  }\n  return ColumnGeometry;\n}(Geometry);\nexport { ColumnGeometry as default };\nfunction tesselateColumn(props) {\n  var radius = props.radius,\n    _props$height = props.height,\n    height = _props$height === void 0 ? 1 : _props$height,\n    _props$nradial = props.nradial,\n    nradial = _props$nradial === void 0 ? 10 : _props$nradial,\n    vertices = props.vertices;\n  log.assert(!vertices || vertices.length >= nradial);\n  var vertsAroundEdge = nradial + 1;\n  var numVertices = vertsAroundEdge * 3;\n  var stepAngle = Math.PI * 2 / nradial;\n  var indices = new Uint16Array(nradial * 3 * 2);\n  var positions = new Float32Array(numVertices * 3);\n  var normals = new Float32Array(numVertices * 3);\n  var i = 0;\n  for (var j = 0; j < vertsAroundEdge; j++) {\n    var a = j * stepAngle;\n    var vertex = vertices && vertices[j % nradial];\n    var nextVertex = vertices && vertices[(j + 1) % nradial];\n    var sin = Math.sin(a);\n    var cos = Math.cos(a);\n    for (var k = 0; k < 2; k++) {\n      positions[i + 0] = vertex ? vertex[0] : cos * radius;\n      positions[i + 1] = vertex ? vertex[1] : sin * radius;\n      positions[i + 2] = (1 / 2 - k) * height;\n      normals[i + 0] = vertex ? nextVertex[0] - vertex[0] : cos;\n      normals[i + 1] = vertex ? nextVertex[1] - vertex[1] : sin;\n      i += 3;\n    }\n  }\n  for (var _j = 0; _j < vertsAroundEdge; _j++) {\n    var v = Math.floor(_j / 2) * Math.sign(_j % 2 - 0.5);\n    var _a = v * stepAngle;\n    var _vertex = vertices && vertices[(v + nradial) % nradial];\n    var _sin = Math.sin(_a);\n    var _cos = Math.cos(_a);\n    positions[i + 0] = _vertex ? _vertex[0] : _cos * radius;\n    positions[i + 1] = _vertex ? _vertex[1] : _sin * radius;\n    positions[i + 2] = height / 2;\n    normals[i + 2] = 1;\n    i += 3;\n  }\n  var index = 0;\n  for (var _j2 = 0; _j2 < nradial; _j2++) {\n    indices[index++] = _j2 * 2 + 0;\n    indices[index++] = _j2 * 2 + 2;\n    indices[index++] = _j2 * 2 + 0;\n    indices[index++] = _j2 * 2 + 1;\n    indices[index++] = _j2 * 2 + 1;\n    indices[index++] = _j2 * 2 + 3;\n  }\n  return {\n    indices: indices,\n    attributes: {\n      POSITION: {\n        size: 3,\n        value: positions\n      },\n      NORMAL: {\n        size: 3,\n        value: normals\n      }\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/column-layer/column-geometry.js"],"names":["log","Geometry","uid","ColumnGeometry","props","id","indices","attributes","tesselateColumn","radius","height","nradial","vertices","assert","length","vertsAroundEdge","numVertices","stepAngle","Math","PI","Uint16Array","positions","Float32Array","normals","i","j","a","vertex","nextVertex","sin","cos","k","v","floor","sign","index","POSITION","size","value","NORMAL"],"mappings":"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","sourcesContent":["import {log} from '@deck.gl/core';\nimport {Geometry, uid} from '@luma.gl/core';\n\nexport default class ColumnGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('column-geometry')} = props;\n    const {indices, attributes} = tesselateColumn(props);\n    super({\n      ...props,\n      id,\n      indices,\n      attributes\n    });\n  }\n}\n\n/* eslint-disable max-statements, complexity */\nfunction tesselateColumn(props) {\n  const {radius, height = 1, nradial = 10, vertices} = props;\n  log.assert(!vertices || vertices.length >= nradial);\n\n  const vertsAroundEdge = nradial + 1; // loop\n  const numVertices = vertsAroundEdge * 3; // top, side top edge, side bottom edge\n\n  const stepAngle = (Math.PI * 2) / nradial;\n\n  // Used for wireframe\n  const indices = new Uint16Array(nradial * 3 * 2); // top loop, side vertical, bottom loop\n\n  const positions = new Float32Array(numVertices * 3);\n  const normals = new Float32Array(numVertices * 3);\n\n  let i = 0;\n\n  // side tesselation: 0, 1, 2, 3, 4, 5, ...\n  //\n  // 0 - 2 - 4  ... top\n  // | / | / |\n  // 1 - 3 - 5  ... bottom\n  //\n  for (let j = 0; j < vertsAroundEdge; j++) {\n    const a = j * stepAngle;\n    const vertex = vertices && vertices[j % nradial];\n    const nextVertex = vertices && vertices[(j + 1) % nradial];\n    const sin = Math.sin(a);\n    const cos = Math.cos(a);\n\n    for (let k = 0; k < 2; k++) {\n      positions[i + 0] = vertex ? vertex[0] : cos * radius;\n      positions[i + 1] = vertex ? vertex[1] : sin * radius;\n      positions[i + 2] = (1 / 2 - k) * height;\n\n      normals[i + 0] = vertex ? nextVertex[0] - vertex[0] : cos;\n      normals[i + 1] = vertex ? nextVertex[1] - vertex[1] : sin;\n\n      i += 3;\n    }\n  }\n\n  // top tesselation: 0, -1, 1, -2, 2, -3, 3, ...\n  //\n  //    0 -- 1\n  //   /      \\\n  // -1        2\n  //  |        |\n  // -2        3\n  //   \\      /\n  //   -3 -- 4\n  //\n  for (let j = 0; j < vertsAroundEdge; j++) {\n    const v = Math.floor(j / 2) * Math.sign((j % 2) - 0.5);\n    const a = v * stepAngle;\n    const vertex = vertices && vertices[(v + nradial) % nradial];\n    const sin = Math.sin(a);\n    const cos = Math.cos(a);\n\n    positions[i + 0] = vertex ? vertex[0] : cos * radius;\n    positions[i + 1] = vertex ? vertex[1] : sin * radius;\n    positions[i + 2] = height / 2;\n\n    normals[i + 2] = 1;\n\n    i += 3;\n  }\n\n  let index = 0;\n  for (let j = 0; j < nradial; j++) {\n    // top loop\n    indices[index++] = j * 2 + 0;\n    indices[index++] = j * 2 + 2;\n    // side vertical\n    indices[index++] = j * 2 + 0;\n    indices[index++] = j * 2 + 1;\n    // bottom loop\n    indices[index++] = j * 2 + 1;\n    indices[index++] = j * 2 + 3;\n  }\n\n  return {\n    indices,\n    attributes: {\n      POSITION: {size: 3, value: positions},\n      NORMAL: {size: 3, value: normals}\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}