{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { global, isBrowser, isWorker } from '../env-utils/globals';\nimport * as node from '../node/require-utils.node';\nimport assert from '../env-utils/assert';\nvar LATEST = 'beta';\nvar VERSION = typeof \"2.3.13\" !== 'undefined' ? \"2.3.13\" : LATEST;\nvar loadLibraryPromises = {};\nexport function loadLibrary(_x) {\n  return _loadLibrary.apply(this, arguments);\n}\nfunction _loadLibrary() {\n  _loadLibrary = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(libraryUrl) {\n    var moduleName,\n      options,\n      _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            moduleName = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            if (moduleName) {\n              libraryUrl = getLibraryUrl(libraryUrl, moduleName, options);\n            }\n            loadLibraryPromises[libraryUrl] = loadLibraryPromises[libraryUrl] || loadLibraryFromFile(libraryUrl);\n            _context.next = 6;\n            return loadLibraryPromises[libraryUrl];\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadLibrary.apply(this, arguments);\n}\nexport function getLibraryUrl(library, moduleName, options) {\n  var modules = options.modules || {};\n  if (modules[library]) {\n    return modules[library];\n  }\n  if (!isBrowser) {\n    return \"modules/\".concat(moduleName, \"/dist/libs/\").concat(library);\n  }\n  if (options.CDN) {\n    assert(options.CDN.startsWith('http'));\n    return \"\".concat(options.CDN, \"/\").concat(moduleName, \"@\").concat(VERSION, \"/dist/libs/\").concat(library);\n  }\n  if (isWorker) {\n    return \"../src/libs/\".concat(library);\n  }\n  return \"modules/\".concat(moduleName, \"/src/libs/\").concat(library);\n}\nfunction loadLibraryFromFile(_x2) {\n  return _loadLibraryFromFile.apply(this, arguments);\n}\nfunction _loadLibraryFromFile() {\n  _loadLibraryFromFile = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(libraryUrl) {\n    var _response, response, scriptSource;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!libraryUrl.endsWith('wasm')) {\n              _context2.next = 7;\n              break;\n            }\n            _context2.next = 3;\n            return fetch(libraryUrl);\n          case 3:\n            _response = _context2.sent;\n            _context2.next = 6;\n            return _response.arrayBuffer();\n          case 6:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 7:\n            if (isBrowser) {\n              _context2.next = 9;\n              break;\n            }\n            return _context2.abrupt(\"return\", node.requireFromFile && node.requireFromFile(libraryUrl));\n          case 9:\n            if (!isWorker) {\n              _context2.next = 11;\n              break;\n            }\n            return _context2.abrupt(\"return\", importScripts(libraryUrl));\n          case 11:\n            _context2.next = 13;\n            return fetch(libraryUrl);\n          case 13:\n            response = _context2.sent;\n            _context2.next = 16;\n            return response.text();\n          case 16:\n            scriptSource = _context2.sent;\n            return _context2.abrupt(\"return\", loadLibraryFromString(scriptSource, libraryUrl));\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _loadLibraryFromFile.apply(this, arguments);\n}\nfunction loadLibraryFromString(scriptSource, id) {\n  if (!isBrowser) {\n    return node.requireFromString && node.requireFromString(scriptSource, id);\n  }\n  if (isWorker) {\n    eval.call(global, scriptSource);\n    return null;\n  }\n  var script = document.createElement('script');\n  script.id = id;\n  try {\n    script.appendChild(document.createTextNode(scriptSource));\n  } catch (e) {\n    script.text = scriptSource;\n  }\n  document.body.appendChild(script);\n  return null;\n}","map":{"version":3,"sources":["../../../../src/lib/library-utils/library-utils.js"],"names":["global","isBrowser","isWorker","node","assert","LATEST","VERSION","loadLibraryPromises","loadLibrary","libraryUrl","moduleName","options","getLibraryUrl","loadLibraryFromFile","library","modules","CDN","startsWith","endsWith","response","fetch","arrayBuffer","requireFromFile","importScripts","scriptSource","text","loadLibraryFromString","id","requireFromString","eval","call","script","document","createElement","appendChild","createTextNode","e","body"],"mappings":";;AACA,SAAQA,MAAR,EAAgBC,SAAhB,EAA2BC,QAA3B,QAA0C,sBAA1C;AACA,OAAO,KAAKC,IAAZ,MAAsB,4BAAtB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AAGA,IAAMC,MAAM,GAAG,MAAf;AAIA,IAAMC,OAAO,GAAG,OAAA,QAAA,KAAuB,WAAvB,GAAA,QAAA,GAAmDD,MAAnE;AAEA,IAAME,mBAAmB,GAAG,CAAA,CAA5B;AAGA,OAAA,SAAsBC,WAAtB,CAAA,EAAA,EAAA;EAAA,OAAA,YAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;4DAAO,SAAA,OAAA,CAA2BC,UAA3B,EAAA;IAAA,IAAA,UAAA;MAAA,OAAA;MAAA,KAAA,GAAA,SAAA;IAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YAAuCC,UAAvC,GAAA,KAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,KAAA,CAAA,CAAA,CAAA,GAAoD,IAApD;YAA0DC,OAA1D,GAAA,KAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,KAAA,CAAA,CAAA,CAAA,GAAoE,CAAA,CAApE;YACL,IAAID,UAAJ,EAAgB;cACdD,UAAU,GAAGG,aAAa,CAACH,UAAD,EAAaC,UAAb,EAAyBC,OAAzB,CAA1BF;YACD;YAGDF,mBAAmB,CAACE,UAAD,CAAnBF,GACEA,mBAAmB,CAACE,UAAD,CAAnBF,IAAmCM,mBAAmB,CAACJ,UAAD,CADxDF;YANK,QAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OAQQA,mBAAmB,CAACE,UAAD,CAR3B;UAAA,KAAA,CAAA;YAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,QAAA,CAAA,IAAA,CAAA;UAAA,KAAA,CAAA;UAAA,KAAA,KAAA;YAAA,OAAA,QAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,OAAA,CAAA;EAAA,C;;;AAYP,OAAO,SAASG,aAAT,CAAuBE,OAAvB,EAAgCJ,UAAhC,EAA4CC,OAA5C,EAAqD;EAE1D,IAAMI,OAAO,GAAGJ,OAAO,CAACI,OAARJ,IAAmB,CAAA,CAAnC;EACA,IAAII,OAAO,CAACD,OAAD,CAAX,EAAsB;IACpB,OAAOC,OAAO,CAACD,OAAD,CAAd;EACD;EAID,IAAI,CAACb,SAAL,EAAgB;IACd,OAAA,UAAA,CAAA,MAAA,CAAkBS,UAAlB,EAAA,aAAA,CAAA,CAAA,MAAA,CAA0CI,OAA1C,CAAA;EACD;EAGD,IAAIH,OAAO,CAACK,GAAZ,EAAiB;IACfZ,MAAM,CAACO,OAAO,CAACK,GAARL,CAAYM,UAAZN,CAAuB,MAAvBA,CAAD,CAANP;IACA,OAAA,EAAA,CAAA,MAAA,CAAUO,OAAO,CAACK,GAAlB,EAAA,GAAA,CAAA,CAAA,MAAA,CAAyBN,UAAzB,EAAA,GAAA,CAAA,CAAA,MAAA,CAAuCJ,OAAvC,EAAA,aAAA,CAAA,CAAA,MAAA,CAA4DQ,OAA5D,CAAA;EACD;EAGD,IAAIZ,QAAJ,EAAc;IACZ,OAAA,cAAA,CAAA,MAAA,CAAsBY,OAAtB,CAAA;EACD;EAED,OAAA,UAAA,CAAA,MAAA,CAAkBJ,UAAlB,EAAA,YAAA,CAAA,CAAA,MAAA,CAAyCI,OAAzC,CAAA;AACD;SAEcD,mB;;;;oEAAf,SAAA,QAAA,CAAmCJ,UAAnC,EAAA;IAAA,IAAA,SAAA,EAAA,QAAA,EAAA,YAAA;IAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YAAA,IAAA,CACMA,UAAU,CAACS,QAAXT,CAAoB,MAApBA,CADN,EAAA;cAAA,SAAA,CAAA,IAAA,GAAA,CAAA;cAAA;YAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OAE2BW,KAAK,CAACX,UAAD,CAFhC;UAAA,KAAA,CAAA;YAEUU,SAFV,GAAA,SAAA,CAAA,IAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OAGiBA,SAAQ,CAACE,WAATF,EAHjB;UAAA,KAAA,CAAA;YAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,SAAA,CAAA,IAAA,CAAA;UAAA,KAAA,CAAA;YAAA,IAMOlB,SANP,EAAA;cAAA,SAAA,CAAA,IAAA,GAAA,CAAA;cAAA;YAAA;YAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAOWE,IAAI,CAACmB,eAALnB,IAAwBA,IAAI,CAACmB,eAALnB,CAAqBM,UAArBN,CAPnC,CAAA;UAAA,KAAA,CAAA;YAAA,IAAA,CASMD,QATN,EAAA;cAAA,SAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;YAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAWWqB,aAAa,CAACd,UAAD,CAXxB,CAAA;UAAA,KAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,OAkByBW,KAAK,CAACX,UAAD,CAlB9B;UAAA,KAAA,EAAA;YAkBQU,QAlBR,GAAA,SAAA,CAAA,IAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,OAmB6BA,QAAQ,CAACM,IAATN,EAnB7B;UAAA,KAAA,EAAA;YAmBQK,YAnBR,GAAA,SAAA,CAAA,IAAA;YAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAoBSE,qBAAqB,CAACF,YAAD,EAAef,UAAf,CApB9B,CAAA;UAAA,KAAA,EAAA;UAAA,KAAA,KAAA;YAAA,OAAA,SAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,QAAA,CAAA;EAAA,C;;;AAyCA,SAASiB,qBAAT,CAA+BF,YAA/B,EAA6CG,EAA7C,EAAiD;EAC/C,IAAI,CAAC1B,SAAL,EAAgB;IACd,OAAOE,IAAI,CAACyB,iBAALzB,IAA0BA,IAAI,CAACyB,iBAALzB,CAAuBqB,YAAvBrB,EAAqCwB,EAArCxB,CAAjC;EACD;EAED,IAAID,QAAJ,EAAc;IAEZ2B,IAAI,CAACC,IAALD,CAAU7B,MAAV6B,EAAkBL,YAAlBK,CAAAA;IAGA,OAAO,IAAP;EACD;EAED,IAAME,MAAM,GAAGC,QAAQ,CAACC,aAATD,CAAuB,QAAvBA,CAAf;EACAD,MAAM,CAACJ,EAAPI,GAAYJ,EAAZI;EAEA,IAAI;IACFA,MAAM,CAACG,WAAPH,CAAmBC,QAAQ,CAACG,cAATH,CAAwBR,YAAxBQ,CAAnBD,CAAAA;EACD,CAFD,CAEE,OAAOK,CAAP,EAAU;IACVL,MAAM,CAACN,IAAPM,GAAcP,YAAdO;EACD;EACDC,QAAQ,CAACK,IAATL,CAAcE,WAAdF,CAA0BD,MAA1BC,CAAAA;EACA,OAAO,IAAP;AACD","sourcesContent":["/* global fetch, document */\nimport {global, isBrowser, isWorker} from '../env-utils/globals';\nimport * as node from '../node/require-utils.node';\nimport assert from '../env-utils/assert';\n\n// TODO - unpkg.com doesn't seem to have a `latest` specifier for alpha releases...\nconst LATEST = 'beta';\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : LATEST;\n\nconst loadLibraryPromises = {}; // promises\n\n// Dynamically loads a library (\"module\")\nexport async function loadLibrary(libraryUrl, moduleName = null, options = {}) {\n  if (moduleName) {\n    libraryUrl = getLibraryUrl(libraryUrl, moduleName, options);\n  }\n\n  // Ensure libraries are only loaded once\n  loadLibraryPromises[libraryUrl] =\n    loadLibraryPromises[libraryUrl] || loadLibraryFromFile(libraryUrl);\n  return await loadLibraryPromises[libraryUrl];\n}\n\n// TODO - sort out how to resolve paths for main/worker and dev/prod\nexport function getLibraryUrl(library, moduleName, options) {\n  // Allow application to import and supply libraries through `options.modules`\n  const modules = options.modules || {};\n  if (modules[library]) {\n    return modules[library];\n  }\n\n  // Load from local files, not from CDN scripts in Node.js\n  // TODO - needs to locate the modules directory when installed!\n  if (!isBrowser) {\n    return `modules/${moduleName}/dist/libs/${library}`;\n  }\n\n  // In browser, load from external scripts\n  if (options.CDN) {\n    assert(options.CDN.startsWith('http'));\n    return `${options.CDN}/${moduleName}@${VERSION}/dist/libs/${library}`;\n  }\n\n  // TODO - loading inside workers requires paths relative to worker script location...\n  if (isWorker) {\n    return `../src/libs/${library}`;\n  }\n\n  return `modules/${moduleName}/src/libs/${library}`;\n}\n\nasync function loadLibraryFromFile(libraryUrl) {\n  if (libraryUrl.endsWith('wasm')) {\n    const response = await fetch(libraryUrl);\n    return await response.arrayBuffer();\n  }\n\n  if (!isBrowser) {\n    return node.requireFromFile && node.requireFromFile(libraryUrl);\n  }\n  if (isWorker) {\n    /* global importScripts */\n    return importScripts(libraryUrl);\n  }\n  // TODO - fix - should be more secure than string parsing since observes CORS\n  // if (isBrowser) {\n  //   return await loadScriptFromFile(libraryUrl);\n  // }\n\n  const response = await fetch(libraryUrl);\n  const scriptSource = await response.text();\n  return loadLibraryFromString(scriptSource, libraryUrl);\n}\n\n/*\nasync function loadScriptFromFile(libraryUrl) {\n  const script = document.createElement('script');\n  script.src = libraryUrl;\n  return await new Promise((resolve, reject) => {\n    script.onload = data => {\n      resolve(data);\n    };\n    script.onerror = reject;\n  });\n}\n*/\n\n// TODO - Needs security audit...\n//  - Raw eval call\n//  - Potentially bypasses CORS\n// Upside is that this separates fetching and parsing\n// we could create a`LibraryLoader` or`ModuleLoader`\nfunction loadLibraryFromString(scriptSource, id) {\n  if (!isBrowser) {\n    return node.requireFromString && node.requireFromString(scriptSource, id);\n  }\n\n  if (isWorker) {\n    // Use lvalue trick to make eval run in global scope\n    eval.call(global, scriptSource); // eslint-disable-line no-eval\n    // https://stackoverflow.com/questions/9107240/1-evalthis-vs-evalthis-in-javascript\n    // http://perfectionkills.com/global-eval-what-are-the-options/\n    return null;\n  }\n\n  const script = document.createElement('script');\n  script.id = id;\n  // most browsers like a separate text node but some throw an error. The second method covers those.\n  try {\n    script.appendChild(document.createTextNode(scriptSource));\n  } catch (e) {\n    script.text = scriptSource;\n  }\n  document.body.appendChild(script);\n  return null;\n}\n\n// TODO - technique for module injection into worker, from THREE.DracoLoader...\n/*\nfunction combineWorkerWithLibrary(worker, jsContent) {\n  var fn = wWorker.toString();\n  var body = [\n    '// injected',\n    jsContent,\n    '',\n    '// worker',\n    fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))\n  ].join('\\n');\n  this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n}\n*/\n"]},"metadata":{},"sourceType":"module"}