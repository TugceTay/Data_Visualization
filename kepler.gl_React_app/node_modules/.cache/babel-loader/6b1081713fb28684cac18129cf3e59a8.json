{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport { clamp } from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport { normalizeViewportProps } from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport { TRANSITION_EVENTS } from './transition-manager';\nvar PITCH_MOUSE_THRESHOLD = 5;\nvar PITCH_ACCEL = 1.2;\nvar LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: function transitionEasing(t) {\n    return t;\n  },\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\nvar NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nexport var MAPBOX_LIMITS = {\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60\n};\nvar DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5\n};\nexport var MapState = function (_ViewState) {\n  _inherits(MapState, _ViewState);\n  function MapState() {\n    var _this;\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      makeViewport = _ref.makeViewport,\n      width = _ref.width,\n      height = _ref.height,\n      latitude = _ref.latitude,\n      longitude = _ref.longitude,\n      zoom = _ref.zoom,\n      _ref$bearing = _ref.bearing,\n      bearing = _ref$bearing === void 0 ? DEFAULT_STATE.bearing : _ref$bearing,\n      _ref$pitch = _ref.pitch,\n      pitch = _ref$pitch === void 0 ? DEFAULT_STATE.pitch : _ref$pitch,\n      _ref$altitude = _ref.altitude,\n      altitude = _ref$altitude === void 0 ? DEFAULT_STATE.altitude : _ref$altitude,\n      _ref$maxZoom = _ref.maxZoom,\n      maxZoom = _ref$maxZoom === void 0 ? MAPBOX_LIMITS.maxZoom : _ref$maxZoom,\n      _ref$minZoom = _ref.minZoom,\n      minZoom = _ref$minZoom === void 0 ? MAPBOX_LIMITS.minZoom : _ref$minZoom,\n      _ref$maxPitch = _ref.maxPitch,\n      maxPitch = _ref$maxPitch === void 0 ? MAPBOX_LIMITS.maxPitch : _ref$maxPitch,\n      _ref$minPitch = _ref.minPitch,\n      minPitch = _ref$minPitch === void 0 ? MAPBOX_LIMITS.minPitch : _ref$minPitch,\n      startPanLngLat = _ref.startPanLngLat,\n      startZoomLngLat = _ref.startZoomLngLat,\n      startBearing = _ref.startBearing,\n      startPitch = _ref.startPitch,\n      startZoom = _ref.startZoom;\n    _classCallCheck(this, MapState);\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapState).call(this, {\n      width: width,\n      height: height,\n      latitude: latitude,\n      longitude: longitude,\n      zoom: zoom,\n      bearing: bearing,\n      pitch: pitch,\n      altitude: altitude,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n      maxPitch: maxPitch,\n      minPitch: minPitch\n    }));\n    _this._interactiveState = {\n      startPanLngLat: startPanLngLat,\n      startZoomLngLat: startZoomLngLat,\n      startBearing: startBearing,\n      startPitch: startPitch,\n      startZoom: startZoom\n    };\n    _this.makeViewport = makeViewport;\n    return _this;\n  }\n  _createClass(MapState, [{\n    key: \"getViewportProps\",\n    value: function getViewportProps() {\n      return this._viewportProps;\n    }\n  }, {\n    key: \"getInteractiveState\",\n    value: function getInteractiveState() {\n      return this._interactiveState;\n    }\n  }, {\n    key: \"panStart\",\n    value: function panStart(_ref2) {\n      var pos = _ref2.pos;\n      return this._getUpdatedState({\n        startPanLngLat: this._unproject(pos)\n      });\n    }\n  }, {\n    key: \"pan\",\n    value: function pan(_ref3) {\n      var pos = _ref3.pos,\n        startPos = _ref3.startPos;\n      var startPanLngLat = this._interactiveState.startPanLngLat || this._unproject(startPos);\n      if (!startPanLngLat) {\n        return this;\n      }\n      var _this$_calculateNewLn = this._calculateNewLngLat({\n          startPanLngLat: startPanLngLat,\n          pos: pos\n        }),\n        _this$_calculateNewLn2 = _slicedToArray(_this$_calculateNewLn, 2),\n        longitude = _this$_calculateNewLn2[0],\n        latitude = _this$_calculateNewLn2[1];\n      return this._getUpdatedState({\n        longitude: longitude,\n        latitude: latitude\n      });\n    }\n  }, {\n    key: \"panEnd\",\n    value: function panEnd() {\n      return this._getUpdatedState({\n        startPanLngLat: null\n      });\n    }\n  }, {\n    key: \"rotateStart\",\n    value: function rotateStart(_ref4) {\n      var pos = _ref4.pos;\n      return this._getUpdatedState({\n        startBearing: this._viewportProps.bearing,\n        startPitch: this._viewportProps.pitch\n      });\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(_ref5) {\n      var _ref5$deltaScaleX = _ref5.deltaScaleX,\n        deltaScaleX = _ref5$deltaScaleX === void 0 ? 0 : _ref5$deltaScaleX,\n        _ref5$deltaScaleY = _ref5.deltaScaleY,\n        deltaScaleY = _ref5$deltaScaleY === void 0 ? 0 : _ref5$deltaScaleY;\n      var _this$_interactiveSta = this._interactiveState,\n        startBearing = _this$_interactiveSta.startBearing,\n        startPitch = _this$_interactiveSta.startPitch;\n      if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n        return this;\n      }\n      var _this$_calculateNewPi = this._calculateNewPitchAndBearing({\n          deltaScaleX: deltaScaleX,\n          deltaScaleY: deltaScaleY,\n          startBearing: startBearing,\n          startPitch: startPitch\n        }),\n        pitch = _this$_calculateNewPi.pitch,\n        bearing = _this$_calculateNewPi.bearing;\n      return this._getUpdatedState({\n        bearing: bearing,\n        pitch: pitch\n      });\n    }\n  }, {\n    key: \"rotateEnd\",\n    value: function rotateEnd() {\n      return this._getUpdatedState({\n        startBearing: null,\n        startPitch: null\n      });\n    }\n  }, {\n    key: \"zoomStart\",\n    value: function zoomStart(_ref6) {\n      var pos = _ref6.pos;\n      return this._getUpdatedState({\n        startZoomLngLat: this._unproject(pos),\n        startZoom: this._viewportProps.zoom\n      });\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(_ref7) {\n      var pos = _ref7.pos,\n        startPos = _ref7.startPos,\n        scale = _ref7.scale;\n      var _this$_interactiveSta2 = this._interactiveState,\n        startZoom = _this$_interactiveSta2.startZoom,\n        startZoomLngLat = _this$_interactiveSta2.startZoomLngLat;\n      if (!Number.isFinite(startZoom)) {\n        startZoom = this._viewportProps.zoom;\n        startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n      }\n      var zoom = this._calculateNewZoom({\n        scale: scale,\n        startZoom: startZoom\n      });\n      var zoomedViewport = this.makeViewport(_objectSpread({}, this._viewportProps, {\n        zoom: zoom\n      }));\n      var _zoomedViewport$getMa = zoomedViewport.getMapCenterByLngLatPosition({\n          lngLat: startZoomLngLat,\n          pos: pos\n        }),\n        _zoomedViewport$getMa2 = _slicedToArray(_zoomedViewport$getMa, 2),\n        longitude = _zoomedViewport$getMa2[0],\n        latitude = _zoomedViewport$getMa2[1];\n      return this._getUpdatedState({\n        zoom: zoom,\n        longitude: longitude,\n        latitude: latitude\n      });\n    }\n  }, {\n    key: \"zoomEnd\",\n    value: function zoomEnd() {\n      return this._getUpdatedState({\n        startZoomLngLat: null,\n        startZoom: null\n      });\n    }\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn() {\n      return this._zoomFromCenter(2);\n    }\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut() {\n      return this._zoomFromCenter(0.5);\n    }\n  }, {\n    key: \"moveLeft\",\n    value: function moveLeft() {\n      return this._panFromCenter([100, 0]);\n    }\n  }, {\n    key: \"moveRight\",\n    value: function moveRight() {\n      return this._panFromCenter([-100, 0]);\n    }\n  }, {\n    key: \"moveUp\",\n    value: function moveUp() {\n      return this._panFromCenter([0, 100]);\n    }\n  }, {\n    key: \"moveDown\",\n    value: function moveDown() {\n      return this._panFromCenter([0, -100]);\n    }\n  }, {\n    key: \"rotateLeft\",\n    value: function rotateLeft() {\n      return this._getUpdatedState({\n        bearing: this._viewportProps.bearing - 15\n      });\n    }\n  }, {\n    key: \"rotateRight\",\n    value: function rotateRight() {\n      return this._getUpdatedState({\n        bearing: this._viewportProps.bearing + 15\n      });\n    }\n  }, {\n    key: \"rotateUp\",\n    value: function rotateUp() {\n      return this._getUpdatedState({\n        pitch: this._viewportProps.pitch + 10\n      });\n    }\n  }, {\n    key: \"rotateDown\",\n    value: function rotateDown() {\n      return this._getUpdatedState({\n        pitch: this._viewportProps.pitch - 10\n      });\n    }\n  }, {\n    key: \"shortestPathFrom\",\n    value: function shortestPathFrom(viewState) {\n      var fromProps = viewState.getViewportProps();\n      var props = Object.assign({}, this._viewportProps);\n      var bearing = props.bearing,\n        longitude = props.longitude;\n      if (Math.abs(bearing - fromProps.bearing) > 180) {\n        props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n      }\n      if (Math.abs(longitude - fromProps.longitude) > 180) {\n        props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n      }\n      return props;\n    }\n  }, {\n    key: \"_zoomFromCenter\",\n    value: function _zoomFromCenter(scale) {\n      var _this$_viewportProps = this._viewportProps,\n        width = _this$_viewportProps.width,\n        height = _this$_viewportProps.height;\n      return this.zoom({\n        pos: [width / 2, height / 2],\n        scale: scale\n      });\n    }\n  }, {\n    key: \"_panFromCenter\",\n    value: function _panFromCenter(offset) {\n      var _this$_viewportProps2 = this._viewportProps,\n        width = _this$_viewportProps2.width,\n        height = _this$_viewportProps2.height;\n      return this.pan({\n        startPos: [width / 2, height / 2],\n        pos: [width / 2 + offset[0], height / 2 + offset[1]]\n      });\n    }\n  }, {\n    key: \"_getUpdatedState\",\n    value: function _getUpdatedState(newProps) {\n      return new this.constructor(_objectSpread({\n        makeViewport: this.makeViewport\n      }, this._viewportProps, {}, this._interactiveState, {}, newProps));\n    }\n  }, {\n    key: \"_applyConstraints\",\n    value: function _applyConstraints(props) {\n      var maxZoom = props.maxZoom,\n        minZoom = props.minZoom,\n        zoom = props.zoom;\n      props.zoom = clamp(zoom, minZoom, maxZoom);\n      var maxPitch = props.maxPitch,\n        minPitch = props.minPitch,\n        pitch = props.pitch;\n      props.pitch = clamp(pitch, minPitch, maxPitch);\n      Object.assign(props, normalizeViewportProps(props));\n      return props;\n    }\n  }, {\n    key: \"_unproject\",\n    value: function _unproject(pos) {\n      var viewport = this.makeViewport(this._viewportProps);\n      return pos && viewport.unproject(pos);\n    }\n  }, {\n    key: \"_calculateNewLngLat\",\n    value: function _calculateNewLngLat(_ref8) {\n      var startPanLngLat = _ref8.startPanLngLat,\n        pos = _ref8.pos;\n      var viewport = this.makeViewport(this._viewportProps);\n      return viewport.getMapCenterByLngLatPosition({\n        lngLat: startPanLngLat,\n        pos: pos\n      });\n    }\n  }, {\n    key: \"_calculateNewZoom\",\n    value: function _calculateNewZoom(_ref9) {\n      var scale = _ref9.scale,\n        startZoom = _ref9.startZoom;\n      var _this$_viewportProps3 = this._viewportProps,\n        maxZoom = _this$_viewportProps3.maxZoom,\n        minZoom = _this$_viewportProps3.minZoom;\n      var zoom = startZoom + Math.log2(scale);\n      return clamp(zoom, minZoom, maxZoom);\n    }\n  }, {\n    key: \"_calculateNewPitchAndBearing\",\n    value: function _calculateNewPitchAndBearing(_ref10) {\n      var deltaScaleX = _ref10.deltaScaleX,\n        deltaScaleY = _ref10.deltaScaleY,\n        startBearing = _ref10.startBearing,\n        startPitch = _ref10.startPitch;\n      deltaScaleY = clamp(deltaScaleY, -1, 1);\n      var _this$_viewportProps4 = this._viewportProps,\n        minPitch = _this$_viewportProps4.minPitch,\n        maxPitch = _this$_viewportProps4.maxPitch;\n      var bearing = startBearing + 180 * deltaScaleX;\n      var pitch = startPitch;\n      if (deltaScaleY > 0) {\n        pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n      } else if (deltaScaleY < 0) {\n        pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n      }\n      return {\n        pitch: pitch,\n        bearing: bearing\n      };\n    }\n  }]);\n  return MapState;\n}(ViewState);\nvar MapController = function (_Controller) {\n  _inherits(MapController, _Controller);\n  function MapController(props) {\n    var _this2;\n    _classCallCheck(this, MapController);\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(MapController).call(this, MapState, props));\n    _this2.invertPan = true;\n    return _this2;\n  }\n  _createClass(MapController, [{\n    key: \"_getTransitionProps\",\n    value: function _getTransitionProps() {\n      return LINEAR_TRANSITION_PROPS;\n    }\n  }, {\n    key: \"_onPanRotate\",\n    value: function _onPanRotate(event) {\n      if (!this.dragRotate) {\n        return false;\n      }\n      var deltaX = event.deltaX,\n        deltaY = event.deltaY;\n      var _this$getCenter = this.getCenter(event),\n        _this$getCenter2 = _slicedToArray(_this$getCenter, 2),\n        centerY = _this$getCenter2[1];\n      var startY = centerY - deltaY;\n      var _this$controllerState = this.controllerState.getViewportProps(),\n        width = _this$controllerState.width,\n        height = _this$controllerState.height;\n      var deltaScaleX = deltaX / width;\n      var deltaScaleY = 0;\n      if (deltaY > 0) {\n        if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n          deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL;\n        }\n      } else if (deltaY < 0) {\n        if (startY > PITCH_MOUSE_THRESHOLD) {\n          deltaScaleY = 1 - centerY / startY;\n        }\n      }\n      deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n      var newControllerState = this.controllerState.rotate({\n        deltaScaleX: deltaScaleX,\n        deltaScaleY: deltaScaleY\n      });\n      return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true,\n        isRotating: true\n      });\n    }\n  }]);\n  return MapController;\n}(Controller);\nexport { MapController as default };","map":{"version":3,"sources":["../../../src/controllers/map-controller.js"],"names":["clamp","Controller","ViewState","normalizeViewportProps","assert","LinearInterpolator","TRANSITION_EVENTS","PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","LINEAR_TRANSITION_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","transitionInterruption","BREAK","NO_TRANSITION_PROPS","MAPBOX_LIMITS","minZoom","maxZoom","minPitch","maxPitch","DEFAULT_STATE","pitch","bearing","altitude","MapState","makeViewport","width","height","latitude","longitude","zoom","startPanLngLat","startZoomLngLat","startBearing","startPitch","startZoom","Number","isFinite","_interactiveState","_viewportProps","pos","_getUpdatedState","_unproject","startPos","_calculateNewLngLat","deltaScaleX","deltaScaleY","_calculateNewPitchAndBearing","scale","_calculateNewZoom","zoomedViewport","getMapCenterByLngLatPosition","lngLat","_zoomFromCenter","_panFromCenter","viewState","fromProps","getViewportProps","props","Object","assign","Math","abs","offset","pan","newProps","constructor","viewport","unproject","log2","MapController","invertPan","event","dragRotate","deltaX","deltaY","centerY","getCenter","startY","controllerState","min","max","newControllerState","rotate","updateViewport","isDragging","isRotating"],"mappings":"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","sourcesContent":["import {clamp} from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport {normalizeViewportProps} from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {TRANSITION_EVENTS} from './transition-manager';\n\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\n\n// MAPBOX LIMITS\nexport const MAPBOX_LIMITS = {\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60\n};\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5\n};\n\n/* Utils */\n\nexport class MapState extends ViewState {\n  constructor({\n    makeViewport,\n\n    /** Mapbox viewport properties */\n    /** The width of the viewport */\n    width,\n    /** The height of the viewport */\n    height,\n    /** The latitude at the center of the viewport */\n    latitude,\n    /** The longitude at the center of the viewport */\n    longitude,\n    /** The tile zoom level of the map. */\n    zoom,\n    /** The bearing of the viewport in degrees */\n    bearing = DEFAULT_STATE.bearing,\n    /** The pitch of the viewport in degrees */\n    pitch = DEFAULT_STATE.pitch,\n    /**\n     * Specify the altitude of the viewport camera\n     * Unit: map heights, default 1.5\n     * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n     */\n    altitude = DEFAULT_STATE.altitude,\n\n    /** Viewport constraints */\n    maxZoom = MAPBOX_LIMITS.maxZoom,\n    minZoom = MAPBOX_LIMITS.minZoom,\n    maxPitch = MAPBOX_LIMITS.maxPitch,\n    minPitch = MAPBOX_LIMITS.minPitch,\n\n    /** Interaction states, required to calculate change during transform */\n    /* The point on map being grabbed when the operation first started */\n    startPanLngLat,\n    /* Center of the zoom when the operation first started */\n    startZoomLngLat,\n    /** Bearing when current perspective rotate operation started */\n    startBearing,\n    /** Pitch when current perspective rotate operation started */\n    startPitch,\n    /** Zoom when current zoom operation started */\n    startZoom\n  } = {}) {\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n\n    super({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch\n    });\n\n    this._interactiveState = {\n      startPanLngLat,\n      startZoomLngLat,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n\n    this.makeViewport = makeViewport;\n  }\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}) {\n    const startPanLngLat = this._interactiveState.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const [longitude, latitude] = this._calculateNewLngLat({startPanLngLat, pos});\n\n    return this._getUpdatedState({\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {Number} deltaScaleX - a number between [-1, 1] specifying the\n   *   change to bearing.\n   * @param {Number} deltaScaleY - a number between [-1, 1] specifying the\n   *   change to pitch. -1 sets to minPitch and 1 sets to maxPitch.\n   */\n  rotate({deltaScaleX = 0, deltaScaleY = 0}) {\n    const {startBearing, startPitch} = this._interactiveState;\n\n    if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    const {pitch, bearing} = this._calculateNewPitchAndBearing({\n      deltaScaleX,\n      deltaScaleY,\n      startBearing,\n      startPitch\n    });\n\n    return this._getUpdatedState({\n      bearing,\n      pitch\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._interactiveState;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    const zoom = this._calculateNewZoom({scale, startZoom});\n\n    const zoomedViewport = this.makeViewport({...this._viewportProps, zoom});\n    const [longitude, latitude] = zoomedViewport.getMapCenterByLngLatPosition({\n      lngLat: startZoomLngLat,\n      pos\n    });\n\n    return this._getUpdatedState({\n      zoom,\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn() {\n    return this._zoomFromCenter(2);\n  }\n\n  zoomOut() {\n    return this._zoomFromCenter(0.5);\n  }\n\n  moveLeft() {\n    return this._panFromCenter([100, 0]);\n  }\n\n  moveRight() {\n    return this._panFromCenter([-100, 0]);\n  }\n\n  moveUp() {\n    return this._panFromCenter([0, 100]);\n  }\n\n  moveDown() {\n    return this._panFromCenter([0, -100]);\n  }\n\n  rotateLeft() {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - 15\n    });\n  }\n\n  rotateRight() {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + 15\n    });\n  }\n\n  rotateUp() {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + 10\n    });\n  }\n\n  rotateDown() {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - 10\n    });\n  }\n\n  shortestPathFrom(viewState) {\n    // const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n    const fromProps = viewState.getViewportProps();\n    const props = Object.assign({}, this._viewportProps);\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n\n  _zoomFromCenter(scale) {\n    const {width, height} = this._viewportProps;\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {width, height} = this._viewportProps;\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this._viewportProps,\n      ...this._interactiveState,\n      ...newProps\n    });\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    Object.assign(props, normalizeViewportProps(props));\n\n    return props;\n  }\n\n  _unproject(pos) {\n    const viewport = this.makeViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculate a new lnglat based on pixel dragging position\n  _calculateNewLngLat({startPanLngLat, pos}) {\n    const viewport = this.makeViewport(this._viewportProps);\n    return viewport.getMapCenterByLngLatPosition({lngLat: startPanLngLat, pos});\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({deltaScaleX, deltaScaleY, startBearing, startPitch}) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n}\n\nexport default class MapController extends Controller {\n  constructor(props) {\n    super(MapState, props);\n    this.invertPan = true;\n  }\n\n  _getTransitionProps() {\n    // Enables Transitions on double-tap and key-down events.\n    return LINEAR_TRANSITION_PROPS;\n  }\n\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const {deltaX, deltaY} = event;\n    const [, centerY] = this.getCenter(event);\n    const startY = centerY - deltaY;\n    const {width, height} = this.controllerState.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n\n    const newControllerState = this.controllerState.rotate({deltaScaleX, deltaScaleY});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}