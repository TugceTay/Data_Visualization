{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport { parseGLTF } from './lib/parse-gltf';\nvar VERSION = typeof \"2.3.13\" !== 'undefined' ? \"2.3.13\" : 'latest';\nvar GLTFLoader = {\n  id: 'gltf',\n  name: 'glTF',\n  version: VERSION,\n  extensions: ['gltf', 'glb'],\n  mimeTypes: ['model/gltf+json', 'model/gltf-binary'],\n  text: true,\n  binary: true,\n  tests: ['glTF'],\n  parse: parse,\n  options: {\n    gltf: {\n      normalize: false,\n      loadBuffers: true,\n      loadImages: true,\n      decompressMeshes: true,\n      postProcess: true\n    },\n    baseUri: '',\n    log: console\n  },\n  deprecatedOptions: {\n    fetchImages: 'gltf.loadImages',\n    createImages: 'gltf.loadImages',\n    decompress: 'gltf.decompressMeshes',\n    postProcess: 'gltf.postProcess',\n    gltf: {\n      decompress: 'gltf.decompressMeshes'\n    }\n  }\n};\nexport default GLTFLoader;\nexport function parse(_x) {\n  return _parse.apply(this, arguments);\n}\nfunction _parse() {\n  _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer) {\n    var options,\n      context,\n      _options,\n      _options$byteOffset,\n      byteOffset,\n      gltf,\n      _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            context = _args.length > 2 ? _args[2] : undefined;\n            options = _objectSpread(_objectSpread({}, GLTFLoader.options), options);\n            options.gltf = _objectSpread(_objectSpread({}, GLTFLoader.options.gltf), options.gltf);\n            addDeprecatedGLTFOptions(options);\n            _options = options, _options$byteOffset = _options.byteOffset, byteOffset = _options$byteOffset === void 0 ? 0 : _options$byteOffset;\n            gltf = {};\n            _context.next = 9;\n            return parseGLTF(gltf, arrayBuffer, byteOffset, options, context);\n          case 9:\n            return _context.abrupt(\"return\", _context.sent);\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parse.apply(this, arguments);\n}\nfunction addDeprecatedGLTFOptions(options) {\n  if ('fetchImages' in options) {\n    options.gltf.loadImages = options.fetchImages;\n  }\n  if ('createImages' in options) {\n    options.gltf.loadImages = options.createImages;\n  }\n  if ('fetchLinkedResources' in options) {\n    options.gltf.fetchBuffers = options.fetchLinkedResources;\n  }\n  if ('decompress' in options) {\n    options.gltf.decompressMeshes = options.decompress;\n  }\n  if ('decompress' in options.gltf) {\n    options.gltf.decompressMeshes = options.gltf.decompress;\n  }\n  if ('postProcess' in options) {\n    options.gltf.postProcess = options.postProcess;\n  }\n}","map":{"version":3,"sources":["../../src/gltf-loader.js"],"names":["parseGLTF","VERSION","GLTFLoader","id","name","version","extensions","mimeTypes","text","binary","tests","parse","options","gltf","normalize","loadBuffers","loadImages","decompressMeshes","postProcess","baseUri","log","console","deprecatedOptions","fetchImages","createImages","decompress","arrayBuffer","context","addDeprecatedGLTFOptions","byteOffset","fetchBuffers","fetchLinkedResources"],"mappings":"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","sourcesContent":["import {parseGLTF} from './lib/parse-gltf';\n/** @typedef {import('@loaders.gl/loader-utils').LoaderObject} LoaderObject */\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\n/** @type {LoaderObject} */\nconst GLTFLoader = {\n  id: 'gltf',\n  name: 'glTF',\n  version: VERSION,\n  extensions: ['gltf', 'glb'],\n  mimeTypes: ['model/gltf+json', 'model/gltf-binary'],\n\n  text: true,\n  binary: true,\n  tests: ['glTF'],\n  parse,\n\n  options: {\n    gltf: {\n      normalize: false, // Normalize glTF v1 to glTF v2 format (not yet stable)\n      loadBuffers: true, // Fetch any linked .BIN buffers, decode base64\n      loadImages: true, // Create image objects\n      decompressMeshes: true, // Decompress Draco encoded meshes\n      postProcess: true // Postprocess glTF and return json structure directly\n    },\n    baseUri: '',\n    log: console // eslint-disable-line\n  },\n  deprecatedOptions: {\n    fetchImages: 'gltf.loadImages',\n    createImages: 'gltf.loadImages',\n    decompress: 'gltf.decompressMeshes',\n    postProcess: 'gltf.postProcess',\n    gltf: {\n      decompress: 'gltf.decompressMeshes'\n    }\n  }\n};\n\nexport default GLTFLoader;\n\nexport async function parse(arrayBuffer, options = {}, context) {\n  // Apps can call the parse method directly, we so apply default options here\n  options = {...GLTFLoader.options, ...options};\n  // @ts-ignore\n  options.gltf = {...GLTFLoader.options.gltf, ...options.gltf};\n  addDeprecatedGLTFOptions(options);\n\n  const {byteOffset = 0} = options;\n  const gltf = {};\n  return await parseGLTF(gltf, arrayBuffer, byteOffset, options, context);\n}\n\n// DEPRECATED\n\nfunction addDeprecatedGLTFOptions(options) {\n  if ('fetchImages' in options) {\n    options.gltf.loadImages = options.fetchImages;\n  }\n  if ('createImages' in options) {\n    options.gltf.loadImages = options.createImages;\n  }\n  if ('fetchLinkedResources' in options) {\n    options.gltf.fetchBuffers = options.fetchLinkedResources;\n  }\n  if ('decompress' in options) {\n    options.gltf.decompressMeshes = options.decompress;\n  }\n  if ('decompress' in options.gltf) {\n    options.gltf.decompressMeshes = options.gltf.decompress;\n  }\n  if ('postProcess' in options) {\n    options.gltf.postProcess = options.postProcess;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}