{"ast":null,"code":"import { hexbin } from 'd3-hexbin';\nimport { createIterable, log } from '@deck.gl/core';\nexport function pointToHexbin(props, aggregationParams) {\n  var data = props.data,\n    radius = props.radius;\n  var viewport = aggregationParams.viewport,\n    attributes = aggregationParams.attributes;\n  var centerLngLat = data.length ? getPointsCenter(data, aggregationParams) : null;\n  var radiusCommon = getRadiusInCommon(radius, viewport, centerLngLat);\n  var screenPoints = [];\n  var _createIterable = createIterable(data),\n    iterable = _createIterable.iterable,\n    objectInfo = _createIterable.objectInfo;\n  var positions = attributes.positions.value;\n  var _attributes$positions = attributes.positions.getAccessor(),\n    size = _attributes$positions.size;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n  try {\n    for (var _iterator = iterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var object = _step.value;\n      objectInfo.index++;\n      var posIndex = objectInfo.index * size;\n      var position = [positions[posIndex], positions[posIndex + 1]];\n      var arrayIsFinite = Number.isFinite(position[0]) && Number.isFinite(position[1]);\n      if (arrayIsFinite) {\n        screenPoints.push(Object.assign({\n          screenCoord: viewport.projectFlat(position)\n        }, object));\n      } else {\n        log.warn('HexagonLayer: invalid position')();\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n  var newHexbin = hexbin().radius(radiusCommon).x(function (d) {\n    return d.screenCoord[0];\n  }).y(function (d) {\n    return d.screenCoord[1];\n  });\n  var hexagonBins = newHexbin(screenPoints);\n  return {\n    hexagons: hexagonBins.map(function (hex, index) {\n      return {\n        position: viewport.unprojectFlat([hex.x, hex.y]),\n        points: hex,\n        index: index\n      };\n    }),\n    radiusCommon: radiusCommon\n  };\n}\nexport function getPointsCenter(data, aggregationParams) {\n  var attributes = aggregationParams.attributes;\n  var positions = attributes.positions.value;\n  var _attributes$positions2 = attributes.positions.getAccessor(),\n    size = _attributes$positions2.size;\n  var minX = Infinity;\n  var minY = Infinity;\n  var maxX = -Infinity;\n  var maxY = -Infinity;\n  var i;\n  for (i = 0; i < size * data.length; i += size) {\n    var x = positions[i];\n    var y = positions[i + 1];\n    var arrayIsFinite = Number.isFinite(x) && Number.isFinite(y);\n    if (arrayIsFinite) {\n      minX = Math.min(x, minX);\n      maxX = Math.max(x, maxX);\n      minY = Math.min(y, minY);\n      maxY = Math.max(y, maxY);\n    }\n  }\n  return [minX, minY, maxX, maxY].every(Number.isFinite) ? [(minX + maxX) / 2, (minY + maxY) / 2] : null;\n}\nexport function getRadiusInCommon(radius, viewport, center) {\n  var _viewport$getDistance = viewport.getDistanceScales(center),\n    unitsPerMeter = _viewport$getDistance.unitsPerMeter;\n  return radius * unitsPerMeter[0];\n}","map":{"version":3,"sources":["../../../src/hexagon-layer/hexagon-aggregator.js"],"names":["hexbin","createIterable","log","pointToHexbin","props","aggregationParams","data","radius","viewport","attributes","centerLngLat","length","getPointsCenter","radiusCommon","getRadiusInCommon","screenPoints","iterable","objectInfo","positions","value","size","getAccessor","object","index","posIndex","position","arrayIsFinite","Number","isFinite","push","assign","screenCoord","projectFlat","warn","newHexbin","x","d","y","hexagonBins","hexagons","map","hex","unprojectFlat","points","minX","Infinity","minY","maxX","maxY","i","Math","min","max","every","center","unitsPerMeter","getDistanceScales"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {hexbin} from 'd3-hexbin';\nimport {createIterable, log} from '@deck.gl/core';\n\n/**\n * Use d3-hexbin to performs hexagonal binning from geo points to hexagons\n * @param {Iterable} data - array of points\n * @param {Number} radius - hexagon radius in meter\n * @param {function} getPosition - get points lon lat\n * @param {Object} viewport - current viewport object\n\n * @return {Object} - hexagons and countRange\n */\nexport function pointToHexbin(props, aggregationParams) {\n  const {data, radius} = props;\n  const {viewport, attributes} = aggregationParams;\n  // get hexagon radius in mercator world unit\n  const centerLngLat = data.length ? getPointsCenter(data, aggregationParams) : null;\n  const radiusCommon = getRadiusInCommon(radius, viewport, centerLngLat);\n\n  // add world space coordinates to points\n  const screenPoints = [];\n  const {iterable, objectInfo} = createIterable(data);\n  const positions = attributes.positions.value;\n  const {size} = attributes.positions.getAccessor();\n  for (const object of iterable) {\n    objectInfo.index++;\n    const posIndex = objectInfo.index * size;\n    const position = [positions[posIndex], positions[posIndex + 1]];\n    const arrayIsFinite = Number.isFinite(position[0]) && Number.isFinite(position[1]);\n    if (arrayIsFinite) {\n      screenPoints.push(\n        Object.assign(\n          {\n            screenCoord: viewport.projectFlat(position)\n          },\n          object\n        )\n      );\n    } else {\n      log.warn('HexagonLayer: invalid position')();\n    }\n  }\n\n  const newHexbin = hexbin()\n    .radius(radiusCommon)\n    .x(d => d.screenCoord[0])\n    .y(d => d.screenCoord[1]);\n\n  const hexagonBins = newHexbin(screenPoints);\n\n  return {\n    hexagons: hexagonBins.map((hex, index) => ({\n      position: viewport.unprojectFlat([hex.x, hex.y]),\n      points: hex,\n      index\n    })),\n    radiusCommon\n  };\n}\n\n/**\n * Get the bounding box of all data points\n */\nexport function getPointsCenter(data, aggregationParams) {\n  const {attributes} = aggregationParams;\n  const positions = attributes.positions.value;\n  const {size} = attributes.positions.getAccessor();\n\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  let i;\n\n  for (i = 0; i < size * data.length; i += size) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    const arrayIsFinite = Number.isFinite(x) && Number.isFinite(y);\n\n    if (arrayIsFinite) {\n      minX = Math.min(x, minX);\n      maxX = Math.max(x, maxX);\n      minY = Math.min(y, minY);\n      maxY = Math.max(y, maxY);\n    }\n  }\n\n  // return center\n  return [minX, minY, maxX, maxY].every(Number.isFinite)\n    ? [(minX + maxX) / 2, (minY + maxY) / 2]\n    : null;\n}\n\n/**\n * Get radius in mercator world space coordinates from meter\n * @param {Number} radius - in meter\n * @param {Object} viewport - current viewport object\n * @param {Array<Number>} center - data center\n\n * @return {Number} radius in mercator world spcae coordinates\n */\nexport function getRadiusInCommon(radius, viewport, center) {\n  const {unitsPerMeter} = viewport.getDistanceScales(center);\n  // x, y distance should be the same\n  return radius * unitsPerMeter[0];\n}\n"]},"metadata":{},"sourceType":"module"}