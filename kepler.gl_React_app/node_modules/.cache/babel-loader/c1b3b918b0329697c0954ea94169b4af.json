{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport * as React from 'react';\nimport { createContext, useState, useContext } from 'react';\nvar MapContext = createContext({\n  viewport: null,\n  map: null,\n  container: null,\n  onViewportChange: null,\n  onViewStateChange: null,\n  eventManager: null\n});\nexport var MapContextProvider = MapContext.Provider;\nfunction WrappedProvider(_ref) {\n  var value = _ref.value,\n    children = _ref.children;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    map = _useState2[0],\n    setMap = _useState2[1];\n  var context = useContext(MapContext);\n  value = _objectSpread(_objectSpread({\n    setMap: setMap\n  }, context), {}, {\n    map: context && context.map || map\n  }, value);\n  return React.createElement(MapContextProvider, {\n    value: value\n  }, children);\n}\nMapContext.Provider = WrappedProvider;\nexport default MapContext;","map":{"version":3,"sources":["../../../src/components/map-context.js"],"names":["React","createContext","useState","useContext","MapContext","viewport","map","container","onViewportChange","onViewStateChange","eventManager","MapContextProvider","Provider","WrappedProvider","value","children","setMap","context"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,aAAR,EAAuBC,QAAvB,EAAiCC,UAAjC,QAAkD,OAAlD;AAEA,IAAMC,UAAU,GAAGH,aAAa,CAAC;EAI/BI,QAAQ,EAAE,IAJqB;EAM/BC,GAAG,EAAE,IAN0B;EAQ/BC,SAAS,EAAE,IARoB;EAW/BC,gBAAgB,EAAE,IAXa;EAY/BC,iBAAiB,EAAE,IAZY;EAe/BC,YAAY,EAAE;AAfiB,CAAD,CAAhC;AAmBA,OAAO,IAAMC,kBAAkB,GAAGP,UAAU,CAACQ,QAAtC;AAGP,SAASC,eAAT,CAAA,IAAA,EAA4C;EAAA,IAAlBC,KAAkB,GAAA,IAAA,CAAlBA,KAAkB;IAAXC,QAAW,GAAA,IAAA,CAAXA,QAAW;EAAA,IAAA,SAAA,GACpBb,QAAQ,CAAC,IAAD,CADY;IAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;IACnCI,GADmC,GAAA,UAAA,CAAA,CAAA,CAAA;IAC9BU,MAD8B,GAAA,UAAA,CAAA,CAAA,CAAA;EAE1C,IAAMC,OAAO,GAAGd,UAAU,CAACC,UAAD,CAA1B;EAEAU,KAAK,GAAA,aAAA,CAAA,aAAA,CAAA;IACHE,MAAM,EAANA;EADG,CAAA,EAEAC,OAFA,CAAA,EAAA,CAAA,CAAA,EAAA;IAGHX,GAAG,EAAGW,OAAO,IAAIA,OAAO,CAACX,GAApB,IAA4BA;EAH9B,CAAA,EAIAQ,KAJA,CAALA;EAOA,OAAO,KAAA,CAAA,aAAA,CAAC,kBAAD,EAAA;IAAoB,KAAK,EAAEA;EAA3B,CAAA,EAAmCC,QAAnC,CAAP;AACD;AAEDX,UAAU,CAACQ,QAAXR,GAAsBS,eAAtBT;AAEA,eAAeA,UAAf","sourcesContent":["import * as React from 'react';\nimport {createContext, useState, useContext} from 'react';\n\nconst MapContext = createContext({\n  /* Map context */\n\n  // Viewport\n  viewport: null,\n  // mapboxgl.Map instance\n  map: null,\n  // DOM element that contains the map\n  container: null,\n\n  /* Interaction callbacks */\n  onViewportChange: null,\n  onViewStateChange: null,\n\n  // EventManager instance\n  eventManager: null\n});\n\n// Save the original Provider component\nexport const MapContextProvider = MapContext.Provider;\n\n// And replace Provider with our own\nfunction WrappedProvider({value, children}) {\n  const [map, setMap] = useState(null);\n  const context = useContext(MapContext);\n\n  value = {\n    setMap,\n    ...context,\n    map: (context && context.map) || map,\n    ...value\n  };\n\n  return <MapContextProvider value={value}>{children}</MapContextProvider>;\n}\n\nMapContext.Provider = WrappedProvider;\n\nexport default MapContext;\n"]},"metadata":{},"sourceType":"module"}