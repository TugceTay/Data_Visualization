{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { assert } from '@loaders.gl/loader-utils';\nvar ManagedArray = function () {\n  function ManagedArray() {\n    var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    _classCallCheck(this, ManagedArray);\n    this._array = new Array(length);\n    this._map = new Map();\n    this._length = length;\n  }\n  _createClass(ManagedArray, [{\n    key: \"get\",\n    value: function get(index) {\n      assert(index < this._array.length);\n      return this._array[index];\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, element) {\n      assert(index >= 0);\n      if (index >= this.length) {\n        this.length = index + 1;\n      }\n      if (this._map.has(this._array[index])) {\n        this._map[\"delete\"](this._array[index]);\n      }\n      this._array[index] = element;\n      this._map.set(element, index);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(element) {\n      var index = this._map.get(element);\n      if (index >= 0) {\n        this._array.splice(index, 1);\n        this._map[\"delete\"](element);\n        this.length--;\n      }\n    }\n  }, {\n    key: \"peek\",\n    value: function peek() {\n      return this._array[this._length - 1];\n    }\n  }, {\n    key: \"push\",\n    value: function push(element) {\n      if (!this._map.has(element)) {\n        var index = this.length++;\n        this._array[index] = element;\n        this._map.set(element, index);\n      }\n    }\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      var element = this._array[--this.length];\n      this._map[\"delete\"](element);\n      return element;\n    }\n  }, {\n    key: \"reserve\",\n    value: function reserve(length) {\n      assert(length >= 0);\n      if (length > this._array.length) {\n        this._array.length = length;\n      }\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(length) {\n      assert(length >= 0);\n      this.length = length;\n    }\n  }, {\n    key: \"trim\",\n    value: function trim(length) {\n      if (length === null || length === undefined) {\n        length = this.length;\n      }\n      this._array.length = length;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._array = [];\n      this._map = new Map();\n      this._length = 0;\n    }\n  }, {\n    key: \"find\",\n    value: function find(target) {\n      return this._map.has(target);\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._length;\n    },\n    set: function set(length) {\n      this._length = length;\n      if (length > this._array.length) {\n        this._array.length = length;\n      }\n    }\n  }, {\n    key: \"values\",\n    get: function get() {\n      return this._array;\n    }\n  }]);\n  return ManagedArray;\n}();\nexport { ManagedArray as default };","map":{"version":3,"sources":["../../../src/utils/managed-array.js"],"names":["assert","ManagedArray","length","_array","Array","_map","Map","_length","index","element","has","set","get","splice","undefined","target"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {assert} from '@loaders.gl/loader-utils';\n\n/**\n * A wrapper around arrays so that the internal length of the array can be manually managed.\n *\n * @alias ManagedArray\n * @constructor\n * @private\n *\n * @param {Number} [length=0] The initial length of the array.\n */\nexport default class ManagedArray {\n  constructor(length = 0) {\n    this._array = new Array(length);\n    this._map = new Map();\n    this._length = length;\n  }\n\n  /**\n   * Gets or sets the length of the array.\n   * If the set length is greater than the length of the internal array, the internal array is resized.\n   *\n   * @memberof ManagedArray.prototype\n   * @type Number\n   */\n  get length() {\n    return this._length;\n  }\n\n  set length(length) {\n    this._length = length;\n    if (length > this._array.length) {\n      this._array.length = length;\n    }\n  }\n\n  /**\n   * Gets the internal array.\n   *\n   * @memberof ManagedArray.prototype\n   * @type Array\n   * @readonly\n   */\n  get values() {\n    return this._array;\n  }\n\n  /**\n   * Gets the element at an index.\n   *\n   * @param {Number} index The index to get.\n   */\n  get(index) {\n    assert(index < this._array.length);\n    return this._array[index];\n  }\n\n  /**\n   * Sets the element at an index. Resizes the array if index is greater than the length of the array.\n   *\n   * @param {Number} index The index to set.\n   * @param {*} element The element to set at index.\n   */\n  set(index, element) {\n    assert(index >= 0);\n\n    if (index >= this.length) {\n      this.length = index + 1;\n    }\n\n    if (this._map.has(this._array[index])) {\n      this._map.delete(this._array[index]);\n    }\n\n    this._array[index] = element;\n    this._map.set(element, index);\n  }\n\n  delete(element) {\n    const index = this._map.get(element);\n    if (index >= 0) {\n      this._array.splice(index, 1);\n      this._map.delete(element);\n      this.length--;\n    }\n  }\n\n  /**\n   * Returns the last element in the array without modifying the array.\n   *\n   * @returns {*} The last element in the array.\n   */\n  peek() {\n    return this._array[this._length - 1];\n  }\n\n  /**\n   * Push an element into the array.\n   *\n   * @param {*} element The element to push.\n   */\n  push(element) {\n    if (!this._map.has(element)) {\n      const index = this.length++;\n      this._array[index] = element;\n      this._map.set(element, index);\n    }\n  }\n\n  /**\n   * Pop an element from the array.\n   *\n   * @returns {*} The last element in the array.\n   */\n  pop() {\n    const element = this._array[--this.length];\n    this._map.delete(element);\n    return element;\n  }\n\n  /**\n   * Resize the internal array if length > _array.length.\n   *\n   * @param {Number} length The length.\n   */\n  reserve(length) {\n    assert(length >= 0);\n\n    if (length > this._array.length) {\n      this._array.length = length;\n    }\n  }\n\n  /**\n   * Resize the array.\n   *\n   * @param {Number} length The length.\n   */\n  resize(length) {\n    assert(length >= 0);\n\n    this.length = length;\n  }\n\n  /**\n   * Trim the internal array to the specified length. Defaults to the current length.\n   *\n   * @param {Number} [length] The length.\n   */\n  trim(length) {\n    if (length === null || length === undefined) {\n      length = this.length;\n    }\n    this._array.length = length;\n  }\n\n  reset() {\n    this._array = [];\n    this._map = new Map();\n    this._length = 0;\n  }\n\n  find(target) {\n    return this._map.has(target);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}