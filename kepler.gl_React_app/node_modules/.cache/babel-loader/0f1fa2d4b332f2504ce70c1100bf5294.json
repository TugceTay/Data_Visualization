{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport assert from '../utils/assert';\nimport parseImage from '../parsers/parse-image';\nimport { getImageSize } from '../category-api/parsed-image-api';\nimport { generateUrl } from './generate-url';\nimport { deepLoad, shallowLoad } from './deep-load';\nexport function loadImage(_x) {\n  return _loadImage.apply(this, arguments);\n}\nfunction _loadImage() {\n  _loadImage = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(getUrl) {\n    var options,\n      imageUrls,\n      _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            _context.next = 3;\n            return getImageUrls(getUrl, options);\n          case 3:\n            imageUrls = _context.sent;\n            _context.next = 6;\n            return deepLoad(imageUrls, parseImage, options);\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadImage.apply(this, arguments);\n}\nexport function getImageUrls(_x2, _x3) {\n  return _getImageUrls.apply(this, arguments);\n}\nfunction _getImageUrls() {\n  _getImageUrls = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(getUrl, options) {\n    var urlOptions,\n      mipLevels,\n      _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            urlOptions = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n            mipLevels = options && options.image && options.image.mipLevels || 0;\n            if (!(mipLevels !== 0)) {\n              _context2.next = 8;\n              break;\n            }\n            _context2.next = 5;\n            return getMipmappedImageUrls(getUrl, mipLevels, options, urlOptions);\n          case 5:\n            _context2.t0 = _context2.sent;\n            _context2.next = 9;\n            break;\n          case 8:\n            _context2.t0 = generateUrl(getUrl, options, urlOptions);\n          case 9:\n            return _context2.abrupt(\"return\", _context2.t0);\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getImageUrls.apply(this, arguments);\n}\nfunction getMipmappedImageUrls(_x4, _x5, _x6, _x7) {\n  return _getMipmappedImageUrls.apply(this, arguments);\n}\nfunction _getMipmappedImageUrls() {\n  _getMipmappedImageUrls = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(getUrl, mipLevels, options, urlOptions) {\n    var urls, url, image, _getImageSize, width, height, mipLevel, _url;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            urls = [];\n            if (!(mipLevels === 'auto')) {\n              _context3.next = 9;\n              break;\n            }\n            url = generateUrl(getUrl, options, _objectSpread(_objectSpread({}, urlOptions), {}, {\n              lod: 0\n            }));\n            _context3.next = 5;\n            return shallowLoad(url, parseImage, options);\n          case 5:\n            image = _context3.sent;\n            _getImageSize = getImageSize(image), width = _getImageSize.width, height = _getImageSize.height;\n            mipLevels = getMipLevels({\n              width: width,\n              height: height\n            });\n            urls.push(url);\n          case 9:\n            assert(mipLevels > 0);\n            for (mipLevel = urls.length; mipLevel < mipLevels; ++mipLevel) {\n              _url = generateUrl(getUrl, options, _objectSpread(_objectSpread({}, urlOptions), {}, {\n                lod: mipLevel\n              }));\n              urls.push(_url);\n            }\n            return _context3.abrupt(\"return\", urls);\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getMipmappedImageUrls.apply(this, arguments);\n}\nexport function getMipLevels(_ref) {\n  var width = _ref.width,\n    height = _ref.height;\n  return 1 + Math.floor(Math.log2(Math.max(width, height)));\n}","map":{"version":3,"sources":["../../../../src/lib/texture-api/load-image.js"],"names":["assert","parseImage","getImageSize","generateUrl","deepLoad","shallowLoad","loadImage","getUrl","options","imageUrls","getImageUrls","urlOptions","mipLevels","image","getMipmappedImageUrls","urls","url","lod","width","height","getMipLevels","push","mipLevel","length","Math","floor","log2","max"],"mappings":"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","sourcesContent":["import assert from '../utils/assert';\nimport parseImage from '../parsers/parse-image';\nimport {getImageSize} from '../category-api/parsed-image-api';\nimport {generateUrl} from './generate-url';\nimport {deepLoad, shallowLoad} from './deep-load';\n\nexport async function loadImage(getUrl, options = {}) {\n  const imageUrls = await getImageUrls(getUrl, options);\n  return await deepLoad(imageUrls, parseImage, options);\n}\n\nexport async function getImageUrls(getUrl, options, urlOptions = {}) {\n  const mipLevels = (options && options.image && options.image.mipLevels) || 0;\n  return mipLevels !== 0\n    ? await getMipmappedImageUrls(getUrl, mipLevels, options, urlOptions)\n    : generateUrl(getUrl, options, urlOptions);\n}\n\nasync function getMipmappedImageUrls(getUrl, mipLevels, options, urlOptions) {\n  const urls = [];\n\n  // If no mip levels supplied, we need to load the level 0 image and calculate based on size\n  if (mipLevels === 'auto') {\n    const url = generateUrl(getUrl, options, {...urlOptions, lod: 0});\n    const image = await shallowLoad(url, parseImage, options);\n\n    const {width, height} = getImageSize(image);\n    mipLevels = getMipLevels({width, height});\n\n    // TODO - push image and make `deepLoad` pass through non-url values, avoid loading twice?\n    urls.push(url);\n  }\n\n  // We now know how many mipLevels we need, remaining image urls can now be constructed\n  assert(mipLevels > 0);\n\n  for (let mipLevel = urls.length; mipLevel < mipLevels; ++mipLevel) {\n    const url = generateUrl(getUrl, options, {...urlOptions, lod: mipLevel});\n    urls.push(url);\n  }\n\n  return urls;\n}\n\n// Calculates number of mipmaps based on texture size (log2)\nexport function getMipLevels({width, height}) {\n  return 1 + Math.floor(Math.log2(Math.max(width, height)));\n}\n"]},"metadata":{},"sourceType":"module"}