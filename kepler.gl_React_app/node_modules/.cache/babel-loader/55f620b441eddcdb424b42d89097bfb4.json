{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { GL } from '@loaders.gl/math';\nimport Tile3DFeatureTable from '../classes/tile-3d-feature-table';\nimport { parse3DTileHeaderSync } from './helpers/parse-3d-tile-header';\nimport { parse3DTileTablesHeaderSync, parse3DTileTablesSync } from './helpers/parse-3d-tile-tables';\nimport { parse3DTileGLTFViewSync, extractGLTF, GLTF_FORMAT } from './helpers/parse-3d-tile-gltf-view';\nexport function parseBatchedModel3DTile(_x, _x2, _x3, _x4, _x5) {\n  return _parseBatchedModel3DTile.apply(this, arguments);\n}\nfunction _parseBatchedModel3DTile() {\n  _parseBatchedModel3DTile = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(tile, arrayBuffer, byteOffset, options, context) {\n    var _ref, extensions;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            byteOffset = parseBatchedModel(tile, arrayBuffer, byteOffset, options, context);\n            _context.next = 3;\n            return extractGLTF(tile, GLTF_FORMAT.EMBEDDED, options, context);\n          case 3:\n            _ref = tile.gltf || {}, extensions = _ref.extensions;\n            if (extensions && extensions.CESIUM_RTC) {\n              tile.rtcCenter = extensions.CESIUM_RTC.center;\n            }\n            return _context.abrupt(\"return\", byteOffset);\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseBatchedModel3DTile.apply(this, arguments);\n}\nfunction parseBatchedModel(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset);\n  byteOffset = parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset);\n  byteOffset = parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options);\n  byteOffset = parse3DTileGLTFViewSync(tile, arrayBuffer, byteOffset, options);\n  var featureTable = new Tile3DFeatureTable(tile.featureTableJson, tile.featureTableBinary);\n  tile.rtcCenter = featureTable.getGlobalProperty('RTC_CENTER', GL.FLOAT, 3);\n  return byteOffset;\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-3d-tile-batched-model.js"],"names":["GL","Tile3DFeatureTable","parse3DTileHeaderSync","parse3DTileTablesHeaderSync","parse3DTileTablesSync","parse3DTileGLTFViewSync","extractGLTF","GLTF_FORMAT","parseBatchedModel3DTile","tile","arrayBuffer","byteOffset","options","context","parseBatchedModel","EMBEDDED","extensions","gltf","CESIUM_RTC","rtcCenter","center","featureTable","featureTableJson","featureTableBinary","getGlobalProperty","FLOAT"],"mappings":";;AAGA,SAAQA,EAAR,QAAiB,kBAAjB;AACA,OAAOC,kBAAP,MAA+B,kCAA/B;AAGA,SAAQC,qBAAR,QAAoC,gCAApC;AACA,SAAQC,2BAAR,EAAqCC,qBAArC,QAAiE,gCAAjE;AACA,SAAQC,uBAAR,EAAiCC,WAAjC,EAA8CC,WAA9C,QAAgE,mCAAhE;AAEA,OAAA,SAAsBC,uBAAtB,CAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA;EAAA,OAAA,wBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;wEAAO,SAAA,OAAA,CAAuCC,IAAvC,EAA6CC,WAA7C,EAA0DC,UAA1D,EAAsEC,OAAtE,EAA+EC,OAA/E,EAAA;IAAA,IAAA,IAAA,EAAA,UAAA;IAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YACLF,UAAU,GAAGG,iBAAiB,CAACL,IAAD,EAAOC,WAAP,EAAoBC,UAApB,EAAgCC,OAAhC,EAAyCC,OAAzC,CAA9BF;YADK,QAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OAECL,WAAW,CAACG,IAAD,EAAOF,WAAW,CAACQ,QAAnB,EAA6BH,OAA7B,EAAsCC,OAAtC,CAFZ;UAAA,KAAA,CAAA;YAAA,IAAA,GAIgBJ,IAAI,CAACQ,IAALR,IAAa,CAAA,CAJ7B,EAIEO,UAJF,GAAA,IAAA,CAIEA,UAJF;YAKL,IAAIA,UAAU,IAAIA,UAAU,CAACE,UAA7B,EAAyC;cACvCT,IAAI,CAACU,SAALV,GAAiBO,UAAU,CAACE,UAAXF,CAAsBI,MAAvCX;YACD;YAPI,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EASEE,UATF,CAAA;UAAA,KAAA,CAAA;UAAA,KAAA,KAAA;YAAA,OAAA,QAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,OAAA,CAAA;EAAA,C;;;AAYP,SAASG,iBAAT,CAA2BL,IAA3B,EAAiCC,WAAjC,EAA8CC,UAA9C,EAA0DC,OAA1D,EAAmEC,OAAnE,EAA4E;EAC1EF,UAAU,GAAGT,qBAAqB,CAACO,IAAD,EAAOC,WAAP,EAAoBC,UAApB,CAAlCA;EAEAA,UAAU,GAAGR,2BAA2B,CAACM,IAAD,EAAOC,WAAP,EAAoBC,UAApB,CAAxCA;EACAA,UAAU,GAAGP,qBAAqB,CAACK,IAAD,EAAOC,WAAP,EAAoBC,UAApB,EAAgCC,OAAhC,CAAlCD;EAEAA,UAAU,GAAGN,uBAAuB,CAACI,IAAD,EAAOC,WAAP,EAAoBC,UAApB,EAAgCC,OAAhC,CAApCD;EAEA,IAAMU,YAAY,GAAG,IAAIpB,kBAAJ,CAAuBQ,IAAI,CAACa,gBAA5B,EAA8Cb,IAAI,CAACc,kBAAnD,CAArB;EACAd,IAAI,CAACU,SAALV,GAAiBY,YAAY,CAACG,iBAAbH,CAA+B,YAA/BA,EAA6CrB,EAAE,CAACyB,KAAhDJ,EAAuD,CAAvDA,CAAjBZ;EAEA,OAAOE,UAAP;AACD","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {GL} from '@loaders.gl/math'; // math.gl/geometry;\nimport Tile3DFeatureTable from '../classes/tile-3d-feature-table';\n// import Tile3DBatchTable from '../classes/tile-3d-batch-table';\n\nimport {parse3DTileHeaderSync} from './helpers/parse-3d-tile-header';\nimport {parse3DTileTablesHeaderSync, parse3DTileTablesSync} from './helpers/parse-3d-tile-tables';\nimport {parse3DTileGLTFViewSync, extractGLTF, GLTF_FORMAT} from './helpers/parse-3d-tile-gltf-view';\n\nexport async function parseBatchedModel3DTile(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parseBatchedModel(tile, arrayBuffer, byteOffset, options, context);\n  await extractGLTF(tile, GLTF_FORMAT.EMBEDDED, options, context);\n\n  const {extensions} = tile.gltf || {};\n  if (extensions && extensions.CESIUM_RTC) {\n    tile.rtcCenter = extensions.CESIUM_RTC.center;\n  }\n\n  return byteOffset;\n}\n\nfunction parseBatchedModel(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset);\n\n  byteOffset = parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset);\n  byteOffset = parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options);\n\n  byteOffset = parse3DTileGLTFViewSync(tile, arrayBuffer, byteOffset, options);\n\n  const featureTable = new Tile3DFeatureTable(tile.featureTableJson, tile.featureTableBinary);\n  tile.rtcCenter = featureTable.getGlobalProperty('RTC_CENTER', GL.FLOAT, 3);\n\n  return byteOffset;\n}\n"]},"metadata":{},"sourceType":"module"}