{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { CubeGeometry } from '@luma.gl/core';\nimport ColumnLayer from './column-layer';\nvar defaultProps = {\n  cellSize: {\n    type: 'number',\n    min: 0,\n    value: 1000\n  },\n  offset: {\n    type: 'array',\n    min: 0,\n    value: [1, 1]\n  }\n};\nvar GridCellLayer = function (_ColumnLayer) {\n  _inherits(GridCellLayer, _ColumnLayer);\n  function GridCellLayer() {\n    _classCallCheck(this, GridCellLayer);\n    return _possibleConstructorReturn(this, _getPrototypeOf(GridCellLayer).apply(this, arguments));\n  }\n  _createClass(GridCellLayer, [{\n    key: \"getGeometry\",\n    value: function getGeometry(diskResolution) {\n      return new CubeGeometry();\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref) {\n      var uniforms = _ref.uniforms;\n      var _this$props = this.props,\n        elevationScale = _this$props.elevationScale,\n        extruded = _this$props.extruded,\n        offset = _this$props.offset,\n        coverage = _this$props.coverage,\n        cellSize = _this$props.cellSize,\n        angle = _this$props.angle;\n      this.state.model.setUniforms(Object.assign({}, uniforms, {\n        radius: cellSize / 2,\n        angle: angle,\n        offset: offset,\n        extruded: extruded,\n        coverage: coverage,\n        elevationScale: elevationScale,\n        edgeDistance: 1,\n        isWireframe: false\n      })).draw();\n    }\n  }]);\n  return GridCellLayer;\n}(ColumnLayer);\nexport { GridCellLayer as default };\nGridCellLayer.layerName = 'GridCellLayer';\nGridCellLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/column-layer/grid-cell-layer.js"],"names":["CubeGeometry","ColumnLayer","defaultProps","cellSize","type","min","value","offset","GridCellLayer","diskResolution","uniforms","elevationScale","extruded","coverage","angle","props","state","model","setUniforms","assign","radius","edgeDistance","isWireframe","draw","layerName"],"mappings":";;;;;AAoBA,SAAQA,YAAR,QAA2B,eAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AAEA,IAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE;IAACC,IAAI,EAAE,QAAP;IAAiBC,GAAG,EAAE,CAAtB;IAAyBC,KAAK,EAAE;EAAhC,CADS;EAEnBC,MAAM,EAAE;IAACH,IAAI,EAAE,OAAP;IAAgBC,GAAG,EAAE,CAArB;IAAwBC,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;EAA/B;AAFW,CAArB;IAKqBE,a;;;;;;;;gCACPC,c,EAAgB;MAC1B,OAAO,IAAIT,YAAJ,EAAP;IACD;;;+BAEgB;MAAA,IAAXU,QAAW,GAAA,IAAA,CAAXA,QAAW;MAAA,IAAA,WAAA,GACuD,IAAA,CAAKK,KAD5D;QACRJ,cADQ,GAAA,WAAA,CACRA,cADQ;QACQC,QADR,GAAA,WAAA,CACQA,QADR;QACkBL,MADlB,GAAA,WAAA,CACkBA,MADlB;QAC0BM,QAD1B,GAAA,WAAA,CAC0BA,QAD1B;QACoCV,QADpC,GAAA,WAAA,CACoCA,QADpC;QAC8CW,KAD9C,GAAA,WAAA,CAC8CA,KAD9C;MAEf,IAAA,CAAKE,KAAL,CAAWC,KAAX,CACGC,WADH,CAEI,MAAM,CAACC,MAAP,CAAc,CAAA,CAAd,EAAkBT,QAAlB,EAA4B;QAC1BU,MAAM,EAAEjB,QAAQ,GAAG,CADO;QAE1BW,KAAK,EAALA,KAF0B;QAG1BP,MAAM,EAANA,MAH0B;QAI1BK,QAAQ,EAARA,QAJ0B;QAK1BC,QAAQ,EAARA,QAL0B;QAM1BF,cAAc,EAAdA,cAN0B;QAO1BU,YAAY,EAAE,CAPY;QAQ1BC,WAAW,EAAE;MARa,CAA5B,CAFJ,CAAA,CAaGC,IAbH,EAAA;IAcD;;;EArBwCtB,W;SAAtBO,a;AAwBrBA,aAAa,CAACgB,SAAdhB,GAA0B,eAA1BA;AACAA,aAAa,CAACN,YAAdM,GAA6BN,YAA7BM","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CubeGeometry} from '@luma.gl/core';\nimport ColumnLayer from './column-layer';\n\nconst defaultProps = {\n  cellSize: {type: 'number', min: 0, value: 1000},\n  offset: {type: 'array', min: 0, value: [1, 1]}\n};\n\nexport default class GridCellLayer extends ColumnLayer {\n  getGeometry(diskResolution) {\n    return new CubeGeometry();\n  }\n\n  draw({uniforms}) {\n    const {elevationScale, extruded, offset, coverage, cellSize, angle} = this.props;\n    this.state.model\n      .setUniforms(\n        Object.assign({}, uniforms, {\n          radius: cellSize / 2,\n          angle,\n          offset,\n          extruded,\n          coverage,\n          elevationScale,\n          edgeDistance: 1,\n          isWireframe: false\n        })\n      )\n      .draw();\n  }\n}\n\nGridCellLayer.layerName = 'GridCellLayer';\nGridCellLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}