{"ast":null,"code":"var SIZEOF_UINT32 = 4;\nexport function parse3DTileHeaderSync(tile, arrayBuffer) {\n  var byteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var view = new DataView(arrayBuffer);\n  tile.magic = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n  tile.version = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n  tile.byteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n  if (tile.version !== 1) {\n    throw new Error(\"3D Tile Version \".concat(tile.version, \" not supported\"));\n  }\n  return byteOffset;\n}","map":{"version":3,"sources":["../../../../../src/lib/parsers/helpers/parse-3d-tile-header.js"],"names":["SIZEOF_UINT32","parse3DTileHeaderSync","tile","arrayBuffer","byteOffset","view","DataView","magic","getUint32","version","byteLength","Error"],"mappings":"AAGA,IAAMA,aAAa,GAAG,CAAtB;AASA,OAAO,SAASC,qBAAT,CAA+BC,IAA/B,EAAqCC,WAArC,EAAkE;EAAA,IAAhBC,UAAgB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAH,CAAG;EACvE,IAAMC,IAAI,GAAG,IAAIC,QAAJ,CAAaH,WAAb,CAAb;EAEAD,IAAI,CAACK,KAALL,GAAaG,IAAI,CAACG,SAALH,CAAeD,UAAfC,EAA2B,IAA3BA,CAAbH;EACAE,UAAU,IAAIJ,aAAdI;EAEAF,IAAI,CAACO,OAALP,GAAeG,IAAI,CAACG,SAALH,CAAeD,UAAfC,EAA2B,IAA3BA,CAAfH;EACAE,UAAU,IAAIJ,aAAdI;EAEAF,IAAI,CAACQ,UAALR,GAAkBG,IAAI,CAACG,SAALH,CAAeD,UAAfC,EAA2B,IAA3BA,CAAlBH;EACAE,UAAU,IAAIJ,aAAdI;EAGA,IAAIF,IAAI,CAACO,OAALP,KAAiB,CAArB,EAAwB;IACtB,MAAM,IAAIS,KAAJ,CAAA,kBAAA,CAAA,MAAA,CAA6BT,IAAI,CAACO,OAAlC,EAAA,gBAAA,CAAA,CAAN;EACD;EAED,OAAOL,UAAP;AACD","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nconst SIZEOF_UINT32 = 4;\n\n/* PARSE FIXED HEADER:\nPopulates\n  magic, // identifies type of tile\n  type, // String version of magic\n  version,\n  byteLength\n */\nexport function parse3DTileHeaderSync(tile, arrayBuffer, byteOffset = 0) {\n  const view = new DataView(arrayBuffer);\n\n  tile.magic = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  tile.version = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  tile.byteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  // TODO - move version check into each tile parser?\n  if (tile.version !== 1) {\n    throw new Error(`3D Tile Version ${tile.version} not supported`);\n  }\n\n  return byteOffset; // Indicates where the parsing ended\n}\n"]},"metadata":{},"sourceType":"module"}