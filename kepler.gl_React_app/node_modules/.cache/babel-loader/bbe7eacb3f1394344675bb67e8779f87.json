{"ast":null,"code":"import { assert } from '../utils/assert';\nlet pathPrefix = '';\nexport function setPathPrefix(prefix) {\n  pathPrefix = prefix;\n}\nexport function loadFile(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  assert(typeof url === 'string');\n  url = pathPrefix + url;\n  const dataType = options.dataType || 'text';\n  return fetch(url, options).then(res => res[dataType]());\n}\nexport function loadImage(url, opts) {\n  assert(typeof url === 'string');\n  url = pathPrefix + url;\n  return new Promise((resolve, reject) => {\n    try {\n      const image = new Image();\n      image.onload = () => resolve(image);\n      image.onerror = () => reject(new Error(\"Could not load image \".concat(url, \".\")));\n      image.crossOrigin = opts && opts.crossOrigin || 'anonymous';\n      image.src = url;\n    } catch (error) {\n      reject(error);\n    }\n  });\n}","map":{"version":3,"sources":["../../../src/utils/load-file.js"],"names":["assert","pathPrefix","setPathPrefix","prefix","loadFile","url","options","dataType","fetch","then","res","loadImage","opts","Promise","resolve","reject","image","Image","onload","onerror","Error","crossOrigin","src","error"],"mappings":"AAAA,SAAQA,MAAR,QAAqB,iBAArB;AAEA,IAAIC,UAAU,GAAG,EAAjB;AAKA,OAAO,SAASC,aAAT,CAAuBC,MAAvB,EAA+B;EACpCF,UAAU,GAAGE,MAAbF;AACD;AAGD,OAAO,SAASG,QAAT,CAAkBC,GAAlB,EAAqC;EAAA,IAAdC,OAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,CAAA,CAAI;EAC1CN,MAAM,CAAC,OAAOK,GAAP,KAAe,QAAhB,CAANL;EACAK,GAAG,GAAGJ,UAAU,GAAGI,GAAnBA;EACA,MAAME,QAAQ,GAAGD,OAAO,CAACC,QAARD,IAAoB,MAArC;EACA,OAAOE,KAAK,CAACH,GAAD,EAAMC,OAAN,CAALE,CAAoBC,IAApBD,CAAyBE,GAAG,IAAIA,GAAG,CAACH,QAAD,CAAHG,EAAhCF,CAAP;AACD;AAOD,OAAO,SAASG,SAAT,CAAmBN,GAAnB,EAAwBO,IAAxB,EAA8B;EACnCZ,MAAM,CAAC,OAAOK,GAAP,KAAe,QAAhB,CAANL;EACAK,GAAG,GAAGJ,UAAU,GAAGI,GAAnBA;EACA,OAAO,IAAIQ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACtC,IAAI;MACF,MAAMC,KAAK,GAAG,IAAIC,KAAJ,EAAd;MACAD,KAAK,CAACE,MAANF,GAAe,MAAMF,OAAO,CAACE,KAAD,CAA5BA;MACAA,KAAK,CAACG,OAANH,GAAgB,MAAMD,MAAM,CAAC,IAAIK,KAAJ,CAAA,uBAAA,CAAA,MAAA,CAAkCf,GAAlC,EAAA,GAAA,CAAA,CAAD,CAA5BW;MACAA,KAAK,CAACK,WAANL,GAAqBJ,IAAI,IAAIA,IAAI,CAACS,WAAd,IAA8B,WAAlDL;MACAA,KAAK,CAACM,GAANN,GAAYX,GAAZW;IACD,CAND,CAME,OAAOO,KAAP,EAAc;MACdR,MAAM,CAACQ,KAAD,CAANR;IACD;EACF,CAVM,CAAP;AAWD","sourcesContent":["import {assert} from '../utils/assert';\n\nlet pathPrefix = '';\n\n/*\n * Set a relative path prefix\n */\nexport function setPathPrefix(prefix) {\n  pathPrefix = prefix;\n}\n\n// Reads raw file data from:\nexport function loadFile(url, options = {}) {\n  assert(typeof url === 'string');\n  url = pathPrefix + url;\n  const dataType = options.dataType || 'text';\n  return fetch(url, options).then(res => res[dataType]());\n}\n\n/*\n * Loads images asynchronously\n * image.crossOrigin can be set via opts.crossOrigin, default to 'anonymous'\n * returns a promise tracking the load\n */\nexport function loadImage(url, opts) {\n  assert(typeof url === 'string');\n  url = pathPrefix + url;\n  return new Promise((resolve, reject) => {\n    try {\n      const image = new Image();\n      image.onload = () => resolve(image);\n      image.onerror = () => reject(new Error(`Could not load image ${url}.`));\n      image.crossOrigin = (opts && opts.crossOrigin) || 'anonymous';\n      image.src = url;\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}