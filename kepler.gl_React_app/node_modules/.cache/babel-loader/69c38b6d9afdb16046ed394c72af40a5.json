{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateStateWithLayerAndData = updateStateWithLayerAndData;\nexports.updateStateOnLayerVisibilityChange = updateStateOnLayerVisibilityChange;\nexports.layerConfigChangeUpdater = layerConfigChangeUpdater;\nexports.layerTextLabelChangeUpdater = layerTextLabelChangeUpdater;\nexports.layerDataIdChangeUpdater = layerDataIdChangeUpdater;\nexports.layerTypeChangeUpdater = layerTypeChangeUpdater;\nexports.layerVisualChannelChangeUpdater = layerVisualChannelChangeUpdater;\nexports.layerVisConfigChangeUpdater = layerVisConfigChangeUpdater;\nexports.setFilterAnimationTimeUpdater = setFilterAnimationTimeUpdater;\nexports.setFilterAnimationWindowUpdater = setFilterAnimationWindowUpdater;\nexports.setFilterUpdater = setFilterUpdater;\nexports.interactionConfigChangeUpdater = interactionConfigChangeUpdater;\nexports.renameDatasetUpdater = renameDatasetUpdater;\nexports.closeSpecificMapAtIndex = closeSpecificMapAtIndex;\nexports.loadFileStepSuccessUpdater = loadFileStepSuccessUpdater;\nexports.loadNextFileUpdater = loadNextFileUpdater;\nexports.makeLoadFileTask = makeLoadFileTask;\nexports.processFileContentUpdater = processFileContentUpdater;\nexports.parseProgress = parseProgress;\nexports.addDefaultLayers = addDefaultLayers;\nexports.addDefaultTooltips = addDefaultTooltips;\nexports.initialFileLoadingProgress = initialFileLoadingProgress;\nexports.updateFileLoadingProgressUpdater = updateFileLoadingProgressUpdater;\nexports.updateAllLayerDomainData = updateAllLayerDomainData;\nexports.updateAnimationDomain = updateAnimationDomain;\nexports.setFeaturesUpdater = setFeaturesUpdater;\nexports.deleteFeatureUpdater = deleteFeatureUpdater;\nexports.setPolygonFilterLayerUpdater = setPolygonFilterLayerUpdater;\nexports.sortTableColumnUpdater = sortTableColumnUpdater;\nexports.pinTableColumnUpdater = pinTableColumnUpdater;\nexports.copyTableColumnUpdater = copyTableColumnUpdater;\nexports.toggleEditorVisibilityUpdater = toggleEditorVisibilityUpdater;\nexports.setFilterAnimationTimeConfigUpdater = setFilterAnimationTimeConfigUpdater;\nexports.setLayerAnimationTimeConfigUpdater = setLayerAnimationTimeConfigUpdater;\nexports.setSelectedFeatureUpdater = exports.setEditorModeUpdater = exports.setMapInfoUpdater = exports.applyCPUFilterUpdater = exports.loadFilesErrUpdater = exports.nextFileBatchUpdater = exports.loadFilesUpdater = exports.updateVisDataUpdater = exports.toggleLayerForMapUpdater = exports.toggleSplitMapUpdater = exports.mouseMoveUpdater = exports.mapClickUpdater = exports.layerClickUpdater = exports.layerHoverUpdater = exports.receiveMapConfigUpdater = exports.resetMapConfigUpdater = exports.showDatasetTableUpdater = exports.updateLayerBlendingUpdater = exports.removeDatasetUpdater = exports.reorderLayerUpdater = exports.duplicateLayerUpdater = exports.removeLayerUpdater = exports.addLayerUpdater = exports.removeFilterUpdater = exports.toggleFilterFeatureUpdater = exports.enlargeFilterUpdater = exports.updateLayerAnimationSpeedUpdater = exports.setLayerAnimationTimeUpdater = exports.updateFilterAnimationSpeedUpdater = exports.toggleLayerAnimationControlUpdater = exports.toggleLayerAnimationUpdater = exports.toggleFilterAnimationUpdater = exports.layerColorUIChangeUpdater = exports.addFilterUpdater = exports.setFilterPlotUpdater = exports.INITIAL_VIS_STATE = exports.DEFAULT_EDITOR = exports.DEFAULT_ANIMATION_CONFIG = void 0;\nvar _toArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toArray\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _window = require(\"global/window\");\nvar _tasks = require(\"react-palm/tasks\");\nvar _lodash = _interopRequireDefault(require(\"lodash.clonedeep\"));\nvar _lodash2 = _interopRequireDefault(require(\"lodash.uniq\"));\nvar _lodash3 = _interopRequireDefault(require(\"lodash.get\"));\nvar _lodash4 = _interopRequireDefault(require(\"lodash.xor\"));\nvar _copyToClipboard = _interopRequireDefault(require(\"copy-to-clipboard\"));\nvar _dataUtils = require(\"../utils/data-utils\");\nvar _tasks2 = require(\"../tasks/tasks\");\nvar _visStateActions = require(\"../actions/vis-state-actions\");\nvar _interactionUtils = require(\"../utils/interaction-utils\");\nvar _filterUtils = require(\"../utils/filter-utils\");\nvar _gpuFilterUtils = require(\"../utils/gpu-filter-utils\");\nvar _datasetUtils = require(\"../utils/dataset-utils\");\nvar _keplerTable = require(\"../utils/table-utils/kepler-table\");\nvar _utils = require(\"../utils/utils\");\nvar _layerUtils = require(\"../utils/layer-utils\");\nvar _visStateMerger = require(\"./vis-state-merger\");\nvar _splitMapUtils = require(\"../utils/split-map-utils\");\nvar _layers = require(\"../layers\");\nvar _layerFactory = require(\"../layers/layer-factory\");\nvar _defaultSettings = require(\"../constants/default-settings\");\nvar _composerHelpers = require(\"./composer-helpers\");\nvar _schemas = _interopRequireDefault(require(\"../schemas\"));\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\n\n// type imports\n\n/** @typedef {import('./vis-state-updaters').Field} Field */\n\n/** @typedef {import('./vis-state-updaters').Filter} Filter */\n\n/** @typedef {import('./vis-state-updaters').KeplerTable} KeplerTable */\n\n/** @typedef {import('./vis-state-updaters').VisState} VisState */\n\n/** @typedef {import('./vis-state-updaters').Datasets} Datasets */\n\n/** @typedef {import('./vis-state-updaters').AnimationConfig} AnimationConfig */\n\n/** @typedef {import('./vis-state-updaters').Editor} Editor */\n// react-palm\n// disable capture exception for react-palm call to withTask\n(0, _tasks.disableStackCapturing)();\n/**\n * Updaters for `visState` reducer. Can be used in your root reducer to directly modify kepler.gl's state.\n * Read more about [Using updaters](../advanced-usage/using-updaters.md)\n *\n * @public\n * @example\n *\n * import keplerGlReducer, {visStateUpdaters} from 'kepler.gl/reducers';\n * // Root Reducer\n * const reducers = combineReducers({\n *  keplerGl: keplerGlReducer,\n *  app: appReducer\n * });\n *\n * const composedReducer = (state, action) => {\n *  switch (action.type) {\n *    case 'CLICK_BUTTON':\n *      return {\n *        ...state,\n *        keplerGl: {\n *          ...state.keplerGl,\n *          foo: {\n *             ...state.keplerGl.foo,\n *             visState: visStateUpdaters.enlargeFilterUpdater(\n *               state.keplerGl.foo.visState,\n *               {idx: 0}\n *             )\n *          }\n *        }\n *      };\n *  }\n *  return reducers(state, action);\n * };\n *\n * export default composedReducer;\n */\n\n/* eslint-disable no-unused-vars */\n// @ts-ignore\n\nvar visStateUpdaters = null;\n/* eslint-enable no-unused-vars */\n\n/** @type {AnimationConfig} */\n\nvar DEFAULT_ANIMATION_CONFIG = {\n  domain: null,\n  currentTime: null,\n  speed: 1,\n  isAnimating: false,\n  timeFormat: null,\n  timezone: null,\n  defaultTimeFormat: null\n};\n/** @type {Editor} */\n\nexports.DEFAULT_ANIMATION_CONFIG = DEFAULT_ANIMATION_CONFIG;\nvar DEFAULT_EDITOR = {\n  mode: _defaultSettings.EDITOR_MODES.DRAW_POLYGON,\n  features: [],\n  selectedFeature: null,\n  visible: true\n};\n/**\n * Default initial `visState`\n * @memberof visStateUpdaters\n * @constant\n * @type {VisState}\n * @public\n */\n\nexports.DEFAULT_EDITOR = DEFAULT_EDITOR;\nvar INITIAL_VIS_STATE = {\n  // map info\n  mapInfo: {\n    title: '',\n    description: ''\n  },\n  // layers\n  layers: [],\n  layerData: [],\n  layerToBeMerged: [],\n  layerOrder: [],\n  // filters\n  filters: [],\n  filterToBeMerged: [],\n  // a collection of multiple dataset\n  datasets: {},\n  editingDataset: undefined,\n  interactionConfig: (0, _interactionUtils.getDefaultInteraction)(),\n  interactionToBeMerged: undefined,\n  layerBlending: 'normal',\n  hoverInfo: undefined,\n  clicked: undefined,\n  mousePos: {},\n  // this is used when user split maps\n  splitMaps: [// this will contain a list of objects to\n    // describe the state of layer availability and visibility for each map\n    // [\n    //   {\n    //      layers: {layer_id: true | false}\n    //   }\n    // ]\n  ],\n  splitMapsToBeMerged: [],\n  // defaults layer classes\n  layerClasses: _layers.LayerClasses,\n  // default animation\n  // time in unix timestamp (milliseconds) (the number of seconds since the Unix Epoch)\n  animationConfig: DEFAULT_ANIMATION_CONFIG,\n  editor: DEFAULT_EDITOR,\n  fileLoading: false,\n  fileLoadingProgress: {},\n  loaders: [],\n  loadOptions: {},\n  // visStateMergers\n  mergers: _visStateMerger.VIS_STATE_MERGERS,\n  // kepler schemas\n  schema: _schemas[\"default\"]\n};\n/**\n * Update state with updated layer and layerData\n * @type {typeof import('./vis-state-updaters').updateStateWithLayerAndData}\n *\n */\n\nexports.INITIAL_VIS_STATE = INITIAL_VIS_STATE;\nfunction updateStateWithLayerAndData(state, _ref) {\n  var layerData = _ref.layerData,\n    layer = _ref.layer,\n    idx = _ref.idx;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    layers: state.layers.map(function (lyr, i) {\n      return i === idx ? layer : lyr;\n    }),\n    layerData: layerData ? state.layerData.map(function (d, i) {\n      return i === idx ? layerData : d;\n    }) : state.layerData\n  });\n}\nfunction updateStateOnLayerVisibilityChange(state, layer) {\n  var newState = state;\n  if (state.splitMaps.length) {\n    newState = _objectSpread(_objectSpread({}, state), {}, {\n      splitMaps: layer.config.isVisible ? (0, _splitMapUtils.addNewLayersToSplitMap)(state.splitMaps, layer) : (0, _splitMapUtils.removeLayerFromSplitMaps)(state.splitMaps, layer)\n    });\n  }\n  if (layer.config.animation.enabled) {\n    newState = updateAnimationDomain(state);\n  }\n  return newState;\n}\n/**\n * Update layer base config: dataId, label, column, isVisible\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').layerConfigChangeUpdater}\n * @returns nextState\n */\n\nfunction layerConfigChangeUpdater(state, action) {\n  var oldLayer = action.oldLayer;\n  var idx = state.layers.findIndex(function (l) {\n    return l.id === oldLayer.id;\n  });\n  var props = Object.keys(action.newConfig);\n  if (typeof action.newConfig.dataId === 'string') {\n    var _action$newConfig = action.newConfig,\n      dataId = _action$newConfig.dataId,\n      restConfig = (0, _objectWithoutProperties2[\"default\"])(_action$newConfig, [\"dataId\"]);\n    var stateWithDataId = layerDataIdChangeUpdater(state, {\n      oldLayer: oldLayer,\n      newConfig: {\n        dataId: dataId\n      }\n    });\n    var nextLayer = stateWithDataId.layers.find(function (l) {\n      return l.id === oldLayer.id;\n    });\n    return nextLayer && Object.keys(restConfig).length ? layerConfigChangeUpdater(stateWithDataId, {\n      oldLayer: nextLayer,\n      newConfig: restConfig\n    }) : stateWithDataId;\n  }\n  var newLayer = oldLayer.updateLayerConfig(action.newConfig);\n  var layerData; // let newLayer;\n\n  if (newLayer.shouldCalculateLayerData(props)) {\n    var oldLayerData = state.layerData[idx];\n    var updateLayerDataResult = (0, _layerUtils.calculateLayerData)(newLayer, state, oldLayerData);\n    layerData = updateLayerDataResult.layerData;\n    newLayer = updateLayerDataResult.layer;\n  }\n  var newState = state;\n  if ('isVisible' in action.newConfig) {\n    newState = updateStateOnLayerVisibilityChange(state, newLayer);\n  }\n  return updateStateWithLayerAndData(newState, {\n    layer: newLayer,\n    layerData: layerData,\n    idx: idx\n  });\n}\nfunction addOrRemoveTextLabels(newFields, textLabel) {\n  var newTextLabel = textLabel.slice();\n  var currentFields = textLabel.map(function (tl) {\n    return tl.field && tl.field.name;\n  }).filter(function (d) {\n    return d;\n  });\n  var addFields = newFields.filter(function (f) {\n    return !currentFields.includes(f.name);\n  });\n  var deleteFields = currentFields.filter(function (f) {\n    return !newFields.find(function (fd) {\n      return fd.name === f;\n    });\n  }); // delete\n\n  newTextLabel = newTextLabel.filter(function (tl) {\n    return tl.field && !deleteFields.includes(tl.field.name);\n  });\n  newTextLabel = !newTextLabel.length ? [_layerFactory.DEFAULT_TEXT_LABEL] : newTextLabel; // add\n\n  newTextLabel = [].concat((0, _toConsumableArray2[\"default\"])(newTextLabel.filter(function (tl) {\n    return tl.field;\n  })), (0, _toConsumableArray2[\"default\"])(addFields.map(function (af) {\n    return _objectSpread(_objectSpread({}, _layerFactory.DEFAULT_TEXT_LABEL), {}, {\n      field: af\n    });\n  })));\n  return newTextLabel;\n}\nfunction updateTextLabelPropAndValue(idx, prop, value, textLabel) {\n  if (!textLabel[idx].hasOwnProperty(prop)) {\n    return textLabel;\n  }\n  var newTextLabel = textLabel.slice();\n  if (prop && (value || textLabel.length === 1)) {\n    newTextLabel = textLabel.map(function (tl, i) {\n      return i === idx ? _objectSpread(_objectSpread({}, tl), {}, (0, _defineProperty2[\"default\"])({}, prop, value)) : tl;\n    });\n  } else if (prop === 'field' && value === null && textLabel.length > 1) {\n    // remove label when field value is set to null\n    newTextLabel.splice(idx, 1);\n  }\n  return newTextLabel;\n}\n/**\n * Update layer base config: dataId, label, column, isVisible\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').layerTextLabelChangeUpdater}\n * @returns nextState\n */\n\nfunction layerTextLabelChangeUpdater(state, action) {\n  var oldLayer = action.oldLayer,\n    idx = action.idx,\n    prop = action.prop,\n    value = action.value;\n  var textLabel = oldLayer.config.textLabel;\n  var newTextLabel = textLabel.slice();\n  if (!textLabel[idx] && idx === textLabel.length) {\n    // if idx is set to length, add empty text label\n    newTextLabel = [].concat((0, _toConsumableArray2[\"default\"])(textLabel), [_layerFactory.DEFAULT_TEXT_LABEL]);\n  }\n  if (idx === 'all' && prop === 'fields') {\n    newTextLabel = addOrRemoveTextLabels(value, textLabel);\n  } else {\n    newTextLabel = updateTextLabelPropAndValue(idx, prop, value, newTextLabel);\n  } // update text label prop and value\n\n  return layerConfigChangeUpdater(state, {\n    oldLayer: oldLayer,\n    newConfig: {\n      textLabel: newTextLabel\n    }\n  });\n}\nfunction validateExistingLayerWithData(dataset, layerClasses, layer) {\n  var loadedLayer = (0, _visStateMerger.serializeLayer)(layer);\n  return (0, _visStateMerger.validateLayerWithData)(dataset, loadedLayer, layerClasses, {\n    allowEmptyColumn: true\n  });\n}\n/**\n * Update layer config dataId\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').layerDataIdChangeUpdater}\n * @returns nextState\n */\n\nfunction layerDataIdChangeUpdater(state, action) {\n  var oldLayer = action.oldLayer,\n    newConfig = action.newConfig;\n  var dataId = newConfig.dataId;\n  if (!oldLayer || !state.datasets[dataId]) {\n    return state;\n  }\n  var idx = state.layers.findIndex(function (l) {\n    return l.id === oldLayer.id;\n  });\n  var newLayer = oldLayer.updateLayerConfig({\n    dataId: dataId\n  }); // this may happen when a layer is new (type: null and no columns) but it's not ready to be saved\n\n  if (newLayer.isValidToSave()) {\n    var validated = validateExistingLayerWithData(state.datasets[dataId], state.layerClasses, newLayer); // if cant validate it with data create a new one\n\n    if (!validated) {\n      newLayer = new state.layerClasses[oldLayer.type]({\n        dataId: dataId,\n        id: oldLayer.id\n      });\n    } else {\n      newLayer = validated;\n    }\n  }\n  newLayer = newLayer.updateLayerConfig({\n    isVisible: oldLayer.config.isVisible,\n    isConfigActive: true\n  });\n  newLayer.updateLayerDomain(state.datasets);\n  var _calculateLayerData = (0, _layerUtils.calculateLayerData)(newLayer, state, undefined),\n    layerData = _calculateLayerData.layerData,\n    layer = _calculateLayerData.layer;\n  return updateStateWithLayerAndData(state, {\n    layerData: layerData,\n    layer: layer,\n    idx: idx\n  });\n}\n/**\n * Update layer type. Previews layer config will be copied if applicable.\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').layerTypeChangeUpdater}\n * @public\n */\n\nfunction layerTypeChangeUpdater(state, action) {\n  var oldLayer = action.oldLayer,\n    newType = action.newType;\n  if (!oldLayer) {\n    return state;\n  }\n  var oldId = oldLayer.id;\n  var idx = state.layers.findIndex(function (l) {\n    return l.id === oldId;\n  });\n  if (!state.layerClasses[newType]) {\n    _window.console.error(\"\".concat(newType, \" is not a valid layer type\"));\n    return state;\n  } // get a mint layer, with new id and type\n  // because deck.gl uses id to match between new and old layer.\n  // If type has changed but id is the same, it will break\n\n  var newLayer = new state.layerClasses[newType]();\n  newLayer.assignConfigToLayer(oldLayer.config, oldLayer.visConfigSettings);\n  newLayer.updateLayerDomain(state.datasets);\n  var _calculateLayerData2 = (0, _layerUtils.calculateLayerData)(newLayer, state),\n    layerData = _calculateLayerData2.layerData,\n    layer = _calculateLayerData2.layer;\n  var newState = updateStateWithLayerAndData(state, {\n    layerData: layerData,\n    layer: layer,\n    idx: idx\n  });\n  if (layer.config.animation.enabled || oldLayer.config.animation.enabled) {\n    newState = updateAnimationDomain(newState);\n  } // update splitMap layer id\n\n  if (state.splitMaps.length) {\n    newState = _objectSpread(_objectSpread({}, newState), {}, {\n      splitMaps: newState.splitMaps.map(function (settings) {\n        var _settings$layers = settings.layers,\n          oldLayerMap = _settings$layers[oldId],\n          otherLayers = (0, _objectWithoutProperties2[\"default\"])(_settings$layers, [oldId].map(_toPropertyKey));\n        return oldId in settings.layers ? _objectSpread(_objectSpread({}, settings), {}, {\n          layers: _objectSpread(_objectSpread({}, otherLayers), {}, (0, _defineProperty2[\"default\"])({}, layer.id, oldLayerMap))\n        }) : settings;\n      })\n    });\n  }\n  return newState;\n}\n/**\n * Update layer visual channel\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').layerVisualChannelChangeUpdater}\n * @returns {Object} nextState\n * @public\n */\n\nfunction layerVisualChannelChangeUpdater(state, action) {\n  var oldLayer = action.oldLayer,\n    newConfig = action.newConfig,\n    channel = action.channel;\n  if (!oldLayer.config.dataId) {\n    return state;\n  }\n  var dataset = state.datasets[oldLayer.config.dataId];\n  var idx = state.layers.findIndex(function (l) {\n    return l.id === oldLayer.id;\n  });\n  var newLayer = oldLayer.updateLayerConfig(newConfig);\n  newLayer.updateLayerVisualChannel(dataset, channel);\n  var oldLayerData = state.layerData[idx];\n  var _calculateLayerData3 = (0, _layerUtils.calculateLayerData)(newLayer, state, oldLayerData),\n    layerData = _calculateLayerData3.layerData,\n    layer = _calculateLayerData3.layer;\n  return updateStateWithLayerAndData(state, {\n    layerData: layerData,\n    layer: layer,\n    idx: idx\n  });\n}\n/**\n * Update layer `visConfig`\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').layerVisConfigChangeUpdater}\n * @public\n */\n\nfunction layerVisConfigChangeUpdater(state, action) {\n  var oldLayer = action.oldLayer;\n  var idx = state.layers.findIndex(function (l) {\n    return l.id === oldLayer.id;\n  });\n  var props = Object.keys(action.newVisConfig);\n  var newVisConfig = _objectSpread(_objectSpread({}, oldLayer.config.visConfig), action.newVisConfig);\n  var newLayer = oldLayer.updateLayerConfig({\n    visConfig: newVisConfig\n  });\n  if (newLayer.shouldCalculateLayerData(props)) {\n    var oldLayerData = state.layerData[idx];\n    var _calculateLayerData4 = (0, _layerUtils.calculateLayerData)(newLayer, state, oldLayerData),\n      layerData = _calculateLayerData4.layerData,\n      layer = _calculateLayerData4.layer;\n    return updateStateWithLayerAndData(state, {\n      layerData: layerData,\n      layer: layer,\n      idx: idx\n    });\n  }\n  return updateStateWithLayerAndData(state, {\n    layer: newLayer,\n    idx: idx\n  });\n}\n/**\n * Update filter property\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').setFilterAnimationTimeUpdater}\n * @public\n */\n\nfunction setFilterAnimationTimeUpdater(state, action) {\n  return setFilterUpdater(state, action);\n}\n/**\n * Update filter animation window\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').setFilterAnimationWindowUpdater}\n * @public\n */\n\nfunction setFilterAnimationWindowUpdater(state, _ref2) {\n  var id = _ref2.id,\n    animationWindow = _ref2.animationWindow;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    filters: state.filters.map(function (f) {\n      return f.id === id ? _objectSpread(_objectSpread({}, f), {}, {\n        animationWindow: animationWindow\n      }) : f;\n    })\n  });\n}\n/**\n * Update filter property\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').setFilterUpdater}\n * @public\n */\n\nfunction setFilterUpdater(state, action) {\n  var idx = action.idx,\n    prop = action.prop,\n    value = action.value,\n    _action$valueIndex = action.valueIndex,\n    valueIndex = _action$valueIndex === void 0 ? 0 : _action$valueIndex;\n  var oldFilter = state.filters[idx];\n  if (!oldFilter) {\n    _window.console.error(\"filters.\".concat(idx, \" is undefined\"));\n    return state;\n  }\n  var newFilter = (0, _utils.set)([prop], value, oldFilter);\n  var newState = state;\n  var _newFilter = newFilter,\n    dataId = _newFilter.dataId; // Ensuring backward compatibility\n\n  var datasetIds = (0, _utils.toArray)(dataId);\n  switch (prop) {\n    // TODO: Next PR for UI if we update dataId, we need to consider two cases:\n    // 1. dataId is empty: create a default filter\n    // 2. Add a new dataset id\n    case _filterUtils.FILTER_UPDATER_PROPS.dataId:\n      // if trying to update filter dataId. create an empty new filter\n      newFilter = (0, _filterUtils.updateFilterDataId)(dataId);\n      break;\n    case _filterUtils.FILTER_UPDATER_PROPS.name:\n      // we are supporting the current functionality\n      // TODO: Next PR for UI filter name will only update filter name but it won't have side effects\n      // we are gonna use pair of datasets and fieldIdx to update the filter\n      var datasetId = newFilter.dataId[valueIndex];\n      var _applyFilterFieldName = (0, _filterUtils.applyFilterFieldName)(newFilter, state.datasets[datasetId], value, valueIndex, {\n          mergeDomain: false\n        }),\n        updatedFilter = _applyFilterFieldName.filter,\n        newDataset = _applyFilterFieldName.dataset;\n      if (!updatedFilter) {\n        return state;\n      }\n      newFilter = updatedFilter;\n      if (newFilter.gpu) {\n        newFilter = (0, _gpuFilterUtils.setFilterGpuMode)(newFilter, state.filters);\n        newFilter = (0, _gpuFilterUtils.assignGpuChannel)(newFilter, state.filters);\n      }\n      newState = (0, _utils.set)(['datasets', datasetId], newDataset, state); // only filter the current dataset\n\n      break;\n    case _filterUtils.FILTER_UPDATER_PROPS.layerId:\n      // We need to update only datasetId/s if we have added/removed layers\n      // - check for layerId changes (XOR works because of string values)\n      // if no differences between layerIds, don't do any filtering\n      // @ts-ignore\n      var layerIdDifference = (0, _lodash4[\"default\"])(newFilter.layerId, oldFilter.layerId);\n      var layerDataIds = (0, _lodash2[\"default\"])(layerIdDifference.map(function (lid) {\n        return (0, _lodash3[\"default\"])(state.layers.find(function (l) {\n          return l.id === lid;\n        }), ['config', 'dataId']);\n      }).filter(function (d) {\n        return d;\n      })); // only filter datasetsIds\n\n      datasetIds = layerDataIds; // Update newFilter dataIds\n\n      var newDataIds = (0, _lodash2[\"default\"])(newFilter.layerId.map(function (lid) {\n        return (0, _lodash3[\"default\"])(state.layers.find(function (l) {\n          return l.id === lid;\n        }), ['config', 'dataId']);\n      }).filter(function (d) {\n        return d;\n      }));\n      newFilter = _objectSpread(_objectSpread({}, newFilter), {}, {\n        dataId: newDataIds\n      });\n      break;\n    default:\n      break;\n  }\n  var enlargedFilter = state.filters.find(function (f) {\n    return f.enlarged;\n  });\n  if (enlargedFilter && enlargedFilter.id !== newFilter.id) {\n    // there should be only one enlarged filter\n    newFilter.enlarged = false;\n  } // save new filters to newState\n\n  newState = (0, _utils.set)(['filters', idx], newFilter, newState); // if we are currently setting a prop that only requires to filter the current\n  // dataset we will pass only the current dataset to applyFiltersToDatasets and\n  // updateAllLayerDomainData otherwise we pass the all list of datasets as defined in dataId\n\n  var datasetIdsToFilter = _filterUtils.LIMITED_FILTER_EFFECT_PROPS[prop] ? [datasetIds[valueIndex]] : datasetIds; // filter data\n\n  var filteredDatasets = (0, _filterUtils.applyFiltersToDatasets)(datasetIdsToFilter, newState.datasets, newState.filters, newState.layers);\n  newState = (0, _utils.set)(['datasets'], filteredDatasets, newState); // dataId is an array\n  // pass only the dataset we need to update\n\n  newState = updateAllLayerDomainData(newState, datasetIdsToFilter, newFilter);\n  return newState;\n}\n/**\n * Set the property of a filter plot\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').setFilterPlotUpdater}\n * @public\n */\n\nvar setFilterPlotUpdater = function setFilterPlotUpdater(state, _ref3) {\n  var idx = _ref3.idx,\n    newProp = _ref3.newProp,\n    _ref3$valueIndex = _ref3.valueIndex,\n    valueIndex = _ref3$valueIndex === void 0 ? 0 : _ref3$valueIndex;\n  var newFilter = _objectSpread(_objectSpread({}, state.filters[idx]), newProp);\n  var prop = Object.keys(newProp)[0];\n  if (prop === 'yAxis') {\n    var plotType = (0, _filterUtils.getDefaultFilterPlotType)(newFilter); // TODO: plot is not supported in multi dataset filter for now\n\n    if (plotType) {\n      newFilter = _objectSpread(_objectSpread(_objectSpread({}, newFilter), (0, _filterUtils.getFilterPlot)(_objectSpread(_objectSpread({}, newFilter), {}, {\n        plotType: plotType\n      }), state.datasets[newFilter.dataId[valueIndex]])), {}, {\n        plotType: plotType\n      });\n    }\n  }\n  return _objectSpread(_objectSpread({}, state), {}, {\n    filters: state.filters.map(function (f, i) {\n      return i === idx ? newFilter : f;\n    })\n  });\n};\n/**\n * Add a new filter\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').addFilterUpdater}\n * @public\n */\n\nexports.setFilterPlotUpdater = setFilterPlotUpdater;\nvar addFilterUpdater = function addFilterUpdater(state, action) {\n  return !action.dataId ? state : _objectSpread(_objectSpread({}, state), {}, {\n    filters: [].concat((0, _toConsumableArray2[\"default\"])(state.filters), [(0, _filterUtils.getDefaultFilter)(action.dataId)])\n  });\n};\n/**\n * Set layer color palette ui state\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').layerColorUIChangeUpdater}\n */\n\nexports.addFilterUpdater = addFilterUpdater;\nvar layerColorUIChangeUpdater = function layerColorUIChangeUpdater(state, _ref4) {\n  var oldLayer = _ref4.oldLayer,\n    prop = _ref4.prop,\n    newConfig = _ref4.newConfig;\n  var oldVixConfig = oldLayer.config.visConfig[prop];\n  var newLayer = oldLayer.updateLayerColorUI(prop, newConfig);\n  var newVisConfig = newLayer.config.visConfig[prop];\n  if (oldVixConfig !== newVisConfig) {\n    return layerVisConfigChangeUpdater(state, {\n      oldLayer: oldLayer,\n      newVisConfig: (0, _defineProperty2[\"default\"])({}, prop, newVisConfig)\n    });\n  }\n  return _objectSpread(_objectSpread({}, state), {}, {\n    layers: state.layers.map(function (l) {\n      return l.id === oldLayer.id ? newLayer : l;\n    })\n  });\n};\n/**\n * Start and end filter animation\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').toggleFilterAnimationUpdater}\n * @public\n */\n\nexports.layerColorUIChangeUpdater = layerColorUIChangeUpdater;\nvar toggleFilterAnimationUpdater = function toggleFilterAnimationUpdater(state, action) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    filters: state.filters.map(function (f, i) {\n      return i === action.idx ? _objectSpread(_objectSpread({}, f), {}, {\n        isAnimating: !f.isAnimating\n      }) : f;\n    })\n  });\n};\n/**\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').toggleLayerAnimationUpdater}\n * @public\n */\n\nexports.toggleFilterAnimationUpdater = toggleFilterAnimationUpdater;\nvar toggleLayerAnimationUpdater = function toggleLayerAnimationUpdater(state) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    animationConfig: _objectSpread(_objectSpread({}, state.animationConfig), {}, {\n      isAnimating: !state.animationConfig.isAnimating\n    })\n  });\n};\n/**\n * Hide and show layer animation control\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').toggleLayerAnimationControlUpdater}\n * @public\n */\n\nexports.toggleLayerAnimationUpdater = toggleLayerAnimationUpdater;\nvar toggleLayerAnimationControlUpdater = function toggleLayerAnimationControlUpdater(state) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    animationConfig: _objectSpread(_objectSpread({}, state.animationConfig), {}, {\n      hideControl: !state.animationConfig.hideControl\n    })\n  });\n};\n/**\n * Change filter animation speed\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').updateFilterAnimationSpeedUpdater}\n * @public\n */\n\nexports.toggleLayerAnimationControlUpdater = toggleLayerAnimationControlUpdater;\nvar updateFilterAnimationSpeedUpdater = function updateFilterAnimationSpeedUpdater(state, action) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    filters: state.filters.map(function (f, i) {\n      return i === action.idx ? _objectSpread(_objectSpread({}, f), {}, {\n        speed: action.speed\n      }) : f;\n    })\n  });\n};\n/**\n * Reset animation config current time to a specified value\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').setLayerAnimationTimeUpdater}\n * @public\n *\n */\n\nexports.updateFilterAnimationSpeedUpdater = updateFilterAnimationSpeedUpdater;\nvar setLayerAnimationTimeUpdater = function setLayerAnimationTimeUpdater(state, _ref5) {\n  var value = _ref5.value;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    animationConfig: _objectSpread(_objectSpread({}, state.animationConfig), {}, {\n      currentTime: value\n    })\n  });\n};\n/**\n * Update animation speed with the vertical speed slider\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').updateLayerAnimationSpeedUpdater}\n * @public\n *\n */\n\nexports.setLayerAnimationTimeUpdater = setLayerAnimationTimeUpdater;\nvar updateLayerAnimationSpeedUpdater = function updateLayerAnimationSpeedUpdater(state, _ref6) {\n  var speed = _ref6.speed;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    animationConfig: _objectSpread(_objectSpread({}, state.animationConfig), {}, {\n      speed: speed\n    })\n  });\n};\n/**\n * Show larger time filter at bottom for time playback (apply to time filter only)\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').enlargeFilterUpdater}\n * @public\n */\n\nexports.updateLayerAnimationSpeedUpdater = updateLayerAnimationSpeedUpdater;\nvar enlargeFilterUpdater = function enlargeFilterUpdater(state, action) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    filters: state.filters.map(function (f, i) {\n      return i === action.idx ? _objectSpread(_objectSpread({}, f), {}, {\n        enlarged: !f.enlarged\n      }) : f;\n    })\n  });\n};\n/**\n * Toggles filter feature visibility\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').toggleFilterFeatureUpdater}\n */\n\nexports.enlargeFilterUpdater = enlargeFilterUpdater;\nvar toggleFilterFeatureUpdater = function toggleFilterFeatureUpdater(state, action) {\n  var filter = state.filters[action.idx];\n  var isVisible = (0, _lodash3[\"default\"])(filter, ['value', 'properties', 'isVisible']);\n  var newFilter = _objectSpread(_objectSpread({}, filter), {}, {\n    value: (0, _filterUtils.featureToFilterValue)(filter.value, filter.id, {\n      isVisible: !isVisible\n    })\n  });\n  return _objectSpread(_objectSpread({}, state), {}, {\n    filters: Object.assign((0, _toConsumableArray2[\"default\"])(state.filters), (0, _defineProperty2[\"default\"])({}, action.idx, newFilter))\n  });\n};\n/**\n * Remove a filter\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').removeFilterUpdater}\n * @public\n */\n\nexports.toggleFilterFeatureUpdater = toggleFilterFeatureUpdater;\nvar removeFilterUpdater = function removeFilterUpdater(state, action) {\n  var idx = action.idx;\n  var _state$filters$idx = state.filters[idx],\n    dataId = _state$filters$idx.dataId,\n    id = _state$filters$idx.id;\n  var newFilters = [].concat((0, _toConsumableArray2[\"default\"])(state.filters.slice(0, idx)), (0, _toConsumableArray2[\"default\"])(state.filters.slice(idx + 1, state.filters.length)));\n  var filteredDatasets = (0, _filterUtils.applyFiltersToDatasets)(dataId, state.datasets, newFilters, state.layers);\n  var newEditor = (0, _filterUtils.getFilterIdInFeature)(state.editor.selectedFeature) === id ? _objectSpread(_objectSpread({}, state.editor), {}, {\n    selectedFeature: null\n  }) : state.editor;\n  var newState = (0, _utils.set)(['filters'], newFilters, state);\n  newState = (0, _utils.set)(['datasets'], filteredDatasets, newState);\n  newState = (0, _utils.set)(['editor'], newEditor, newState);\n  return updateAllLayerDomainData(newState, dataId, undefined);\n};\n/**\n * Add a new layer\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').addLayerUpdater}\n * @public\n */\n\nexports.removeFilterUpdater = removeFilterUpdater;\nvar addLayerUpdater = function addLayerUpdater(state, action) {\n  var newLayer;\n  var newLayerData;\n  if (action.config) {\n    newLayer = (0, _visStateMerger.createLayerFromConfig)(state, action.config);\n    if (!newLayer) {\n      _window.console.warn('Failed to create layer from config, it usually means the config is not be in correct format', action.config);\n      return state;\n    }\n    var result = (0, _layerUtils.calculateLayerData)(newLayer, state);\n    newLayer = result.layer;\n    newLayerData = result.layerData;\n  } else {\n    // create an empty layer with the first available dataset\n    var defaultDataset = Object.keys(state.datasets)[0];\n    newLayer = new _layers.Layer({\n      isVisible: true,\n      isConfigActive: true,\n      dataId: defaultDataset\n    });\n    newLayerData = {};\n  }\n  return _objectSpread(_objectSpread({}, state), {}, {\n    layers: [].concat((0, _toConsumableArray2[\"default\"])(state.layers), [newLayer]),\n    layerData: [].concat((0, _toConsumableArray2[\"default\"])(state.layerData), [newLayerData]),\n    layerOrder: [].concat((0, _toConsumableArray2[\"default\"])(state.layerOrder), [state.layerOrder.length]),\n    splitMaps: (0, _splitMapUtils.addNewLayersToSplitMap)(state.splitMaps, newLayer)\n  });\n};\n/**\n * remove layer\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').removeLayerUpdater}\n * @public\n */\n\nexports.addLayerUpdater = addLayerUpdater;\nvar removeLayerUpdater = function removeLayerUpdater(state, _ref7) {\n  var idx = _ref7.idx;\n  var layers = state.layers,\n    layerData = state.layerData,\n    clicked = state.clicked,\n    hoverInfo = state.hoverInfo;\n  var layerToRemove = state.layers[idx];\n  var newMaps = (0, _splitMapUtils.removeLayerFromSplitMaps)(state.splitMaps, layerToRemove);\n  var newState = _objectSpread(_objectSpread({}, state), {}, {\n    layers: [].concat((0, _toConsumableArray2[\"default\"])(layers.slice(0, idx)), (0, _toConsumableArray2[\"default\"])(layers.slice(idx + 1, layers.length))),\n    layerData: [].concat((0, _toConsumableArray2[\"default\"])(layerData.slice(0, idx)), (0, _toConsumableArray2[\"default\"])(layerData.slice(idx + 1, layerData.length))),\n    layerOrder: state.layerOrder.filter(function (i) {\n      return i !== idx;\n    }).map(function (pid) {\n      return pid > idx ? pid - 1 : pid;\n    }),\n    clicked: layerToRemove.isLayerHovered(clicked) ? undefined : clicked,\n    hoverInfo: layerToRemove.isLayerHovered(hoverInfo) ? undefined : hoverInfo,\n    splitMaps: newMaps // TODO: update filters, create helper to remove layer form filter (remove layerid and dataid) if mapped\n  });\n\n  return updateAnimationDomain(newState);\n};\n/**\n * duplicate layer\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').duplicateLayerUpdater}\n * @public\n */\n\nexports.removeLayerUpdater = removeLayerUpdater;\nvar duplicateLayerUpdater = function duplicateLayerUpdater(state, _ref8) {\n  var idx = _ref8.idx;\n  var layers = state.layers;\n  var original = state.layers[idx];\n  var originalLayerOrderIdx = state.layerOrder.findIndex(function (i) {\n    return i === idx;\n  });\n  if (!original) {\n    _window.console.warn(\"layer.\".concat(idx, \" is undefined\"));\n    return state;\n  }\n  var newLabel = \"Copy of \".concat(original.config.label);\n  var postfix = 0; // eslint-disable-next-line no-loop-func\n\n  while (layers.find(function (l) {\n    return l.config.label === newLabel;\n  })) {\n    newLabel = \"Copy of \".concat(original.config.label, \" \").concat(++postfix);\n  } // collect layer config from original\n\n  var loadedLayer = (0, _visStateMerger.serializeLayer)(original); // assign new id and label to copied layer\n\n  if (!loadedLayer.config) {\n    return state;\n  }\n  loadedLayer.config.label = newLabel;\n  loadedLayer.id = (0, _utils.generateHashId)(_layers.LAYER_ID_LENGTH); // add layer to state\n\n  var nextState = addLayerUpdater(state, {\n    config: loadedLayer\n  }); // new added layer are at the end, move it to be on top of original layer\n\n  var newLayerOrderIdx = nextState.layerOrder.length - 1;\n  var newLayerOrder = (0, _utils.arrayInsert)(nextState.layerOrder.slice(0, newLayerOrderIdx), originalLayerOrderIdx, newLayerOrderIdx);\n  nextState = _objectSpread(_objectSpread({}, nextState), {}, {\n    layerOrder: newLayerOrder\n  });\n  return updateAnimationDomain(nextState);\n};\n/**\n * Reorder layer\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').reorderLayerUpdater}\n * @public\n */\n\nexports.duplicateLayerUpdater = duplicateLayerUpdater;\nvar reorderLayerUpdater = function reorderLayerUpdater(state, _ref9) {\n  var order = _ref9.order;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    layerOrder: order\n  });\n};\n/**\n * Remove a dataset and all layers, filters, tooltip configs that based on it\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').removeDatasetUpdater}\n * @public\n */\n\nexports.reorderLayerUpdater = reorderLayerUpdater;\nvar removeDatasetUpdater = function removeDatasetUpdater(state, action) {\n  // extract dataset key\n  var datasetKey = action.dataId;\n  var datasets = state.datasets; // check if dataset is present\n\n  if (!datasets[datasetKey]) {\n    return state;\n  }\n  /* eslint-disable no-unused-vars */\n\n  var layers = state.layers,\n    _state$datasets = state.datasets,\n    dataset = _state$datasets[datasetKey],\n    newDatasets = (0, _objectWithoutProperties2[\"default\"])(_state$datasets, [datasetKey].map(_toPropertyKey));\n  /* eslint-enable no-unused-vars */\n\n  var indexes = layers.reduce(function (listOfIndexes, layer, index) {\n    if (layer.config.dataId === datasetKey) {\n      // @ts-ignore\n      listOfIndexes.push(index);\n    }\n    return listOfIndexes;\n  }, []); // remove layers and datasets\n\n  var _indexes$reduce = indexes.reduce(function (_ref10, idx) {\n      var currentState = _ref10.newState,\n        indexCounter = _ref10.indexCounter;\n      var currentIndex = idx - indexCounter;\n      currentState = removeLayerUpdater(currentState, {\n        idx: currentIndex\n      });\n      indexCounter++;\n      return {\n        newState: currentState,\n        indexCounter: indexCounter\n      };\n    }, {\n      newState: _objectSpread(_objectSpread({}, state), {}, {\n        datasets: newDatasets\n      }),\n      indexCounter: 0\n    }),\n    newState = _indexes$reduce.newState; // remove filters\n\n  var filters = state.filters.filter(function (filter) {\n    return !filter.dataId.includes(datasetKey);\n  }); // update interactionConfig\n\n  var interactionConfig = state.interactionConfig;\n  var _interactionConfig = interactionConfig,\n    tooltip = _interactionConfig.tooltip;\n  if (tooltip) {\n    var config = tooltip.config;\n    /* eslint-disable no-unused-vars */\n\n    var _config$fieldsToShow = config.fieldsToShow,\n      fields = _config$fieldsToShow[datasetKey],\n      fieldsToShow = (0, _objectWithoutProperties2[\"default\"])(_config$fieldsToShow, [datasetKey].map(_toPropertyKey));\n    /* eslint-enable no-unused-vars */\n\n    interactionConfig = _objectSpread(_objectSpread({}, interactionConfig), {}, {\n      tooltip: _objectSpread(_objectSpread({}, tooltip), {}, {\n        config: _objectSpread(_objectSpread({}, config), {}, {\n          fieldsToShow: fieldsToShow\n        })\n      })\n    });\n  }\n  return _objectSpread(_objectSpread({}, newState), {}, {\n    filters: filters,\n    interactionConfig: interactionConfig\n  });\n};\n/**\n * update layer blending mode\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').updateLayerBlendingUpdater}\n * @public\n */\n\nexports.removeDatasetUpdater = removeDatasetUpdater;\nvar updateLayerBlendingUpdater = function updateLayerBlendingUpdater(state, action) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    layerBlending: action.mode\n  });\n};\n/**\n * Display dataset table in a modal\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').showDatasetTableUpdater}\n * @public\n */\n\nexports.updateLayerBlendingUpdater = updateLayerBlendingUpdater;\nvar showDatasetTableUpdater = function showDatasetTableUpdater(state, action) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    editingDataset: action.dataId\n  });\n};\n/**\n * reset visState to initial State\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').resetMapConfigUpdater}\n * @public\n */\n\nexports.showDatasetTableUpdater = showDatasetTableUpdater;\nvar resetMapConfigUpdater = function resetMapConfigUpdater(state) {\n  return _objectSpread(_objectSpread(_objectSpread({}, INITIAL_VIS_STATE), state.initialState), {}, {\n    initialState: state.initialState\n  });\n};\n/**\n * Propagate `visState` reducer with a new configuration. Current config will be override.\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').receiveMapConfigUpdater}\n * @public\n */\n\nexports.resetMapConfigUpdater = resetMapConfigUpdater;\nvar receiveMapConfigUpdater = function receiveMapConfigUpdater(state, _ref11) {\n  var _ref11$payload = _ref11.payload,\n    _ref11$payload$config = _ref11$payload.config,\n    config = _ref11$payload$config === void 0 ? {} : _ref11$payload$config,\n    _ref11$payload$option = _ref11$payload.options,\n    options = _ref11$payload$option === void 0 ? {} : _ref11$payload$option;\n  if (!config.visState) {\n    return state;\n  }\n  var keepExistingConfig = options.keepExistingConfig; // reset config if keepExistingConfig is falsy\n\n  var mergedState = !keepExistingConfig ? resetMapConfigUpdater(state) : state;\n  var _iterator = _createForOfIteratorHelper(state.mergers),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var merger = _step.value;\n      if ((0, _visStateMerger.isValidMerger)(merger) && config.visState[merger.prop]) {\n        mergedState = merger.merge(mergedState, config.visState[merger.prop], true);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return mergedState;\n};\n/**\n * Trigger layer hover event with hovered object\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').layerHoverUpdater}\n * @public\n */\n\nexports.receiveMapConfigUpdater = receiveMapConfigUpdater;\nvar layerHoverUpdater = function layerHoverUpdater(state, action) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    hoverInfo: action.info\n  });\n};\n/* eslint-enable max-statements */\n\n/**\n * Update `interactionConfig`\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').interactionConfigChangeUpdater}\n * @public\n */\n\nexports.layerHoverUpdater = layerHoverUpdater;\nfunction interactionConfigChangeUpdater(state, action) {\n  var config = action.config;\n  var interactionConfig = _objectSpread(_objectSpread({}, state.interactionConfig), (0, _defineProperty2[\"default\"])({}, config.id, config)); // Don't enable tooltip and brush at the same time\n  // but coordinates can be shown at all time\n\n  var contradict = ['brush', 'tooltip'];\n  if (contradict.includes(config.id) && config.enabled && !state.interactionConfig[config.id].enabled) {\n    // only enable one interaction at a time\n    contradict.forEach(function (k) {\n      if (k !== config.id) {\n        interactionConfig[k] = _objectSpread(_objectSpread({}, interactionConfig[k]), {}, {\n          enabled: false\n        });\n      }\n    });\n  }\n  var newState = _objectSpread(_objectSpread({}, state), {}, {\n    interactionConfig: interactionConfig\n  });\n  if (config.id === 'geocoder' && !config.enabled) {\n    return removeDatasetUpdater(newState, {\n      dataId: 'geocoder_dataset'\n    });\n  }\n  return newState;\n}\n/**\n * Trigger layer click event with clicked object\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').layerClickUpdater}\n * @public\n */\n\nvar layerClickUpdater = function layerClickUpdater(state, action) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    mousePos: state.interactionConfig.coordinate.enabled ? _objectSpread(_objectSpread({}, state.mousePos), {}, {\n      pinned: state.mousePos.pinned ? null : (0, _lodash[\"default\"])(state.mousePos)\n    }) : state.mousePos,\n    clicked: action.info && action.info.picked ? action.info : null\n  });\n};\n/**\n * Trigger map click event, unselect clicked object\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').mapClickUpdater}\n * @public\n */\n\nexports.layerClickUpdater = layerClickUpdater;\nvar mapClickUpdater = function mapClickUpdater(state) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    clicked: null\n  });\n};\n/**\n * Trigger map move event\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').mouseMoveUpdater}\n * @public\n */\n\nexports.mapClickUpdater = mapClickUpdater;\nvar mouseMoveUpdater = function mouseMoveUpdater(state, _ref12) {\n  var evt = _ref12.evt;\n  if (Object.values(state.interactionConfig).some(function (config) {\n    return config.enabled;\n  })) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      mousePos: _objectSpread(_objectSpread({}, state.mousePos), {}, {\n        mousePosition: (0, _toConsumableArray2[\"default\"])(evt.point),\n        coordinate: (0, _toConsumableArray2[\"default\"])(evt.lngLat)\n      })\n    });\n  }\n  return state;\n};\n/**\n * Toggle visibility of a layer for a split map\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').toggleSplitMapUpdater}\n * @public\n */\n\nexports.mouseMoveUpdater = mouseMoveUpdater;\nvar toggleSplitMapUpdater = function toggleSplitMapUpdater(state, action) {\n  return state.splitMaps && state.splitMaps.length === 0 ? _objectSpread(_objectSpread({}, state), {}, {\n    // maybe we should use an array to store state for a single map as well\n    // if current maps length is equal to 0 it means that we are about to split the view\n    splitMaps: (0, _splitMapUtils.computeSplitMapLayers)(state.layers)\n  }) : closeSpecificMapAtIndex(state, action);\n};\n/**\n * Toggle visibility of a layer in a split map\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').toggleLayerForMapUpdater}\n * @public\n */\n\nexports.toggleSplitMapUpdater = toggleSplitMapUpdater;\nvar toggleLayerForMapUpdater = function toggleLayerForMapUpdater(state, _ref13) {\n  var mapIndex = _ref13.mapIndex,\n    layerId = _ref13.layerId;\n  var splitMaps = state.splitMaps;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    splitMaps: splitMaps.map(function (sm, i) {\n      return i === mapIndex ? _objectSpread(_objectSpread({}, splitMaps[i]), {}, {\n        layers: _objectSpread(_objectSpread({}, splitMaps[i].layers), {}, (0, _defineProperty2[\"default\"])({}, layerId, !splitMaps[i].layers[layerId]))\n      }) : sm;\n    })\n  });\n};\n/**\n * Add new dataset to `visState`, with option to load a map config along with the datasets\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').updateVisDataUpdater}\n * @public\n */\n\n/* eslint-disable max-statements */\n// eslint-disable-next-line complexity\n\nexports.toggleLayerForMapUpdater = toggleLayerForMapUpdater;\nvar updateVisDataUpdater = function updateVisDataUpdater(state, action) {\n  // datasets can be a single data entries or an array of multiple data entries\n  var config = action.config,\n    options = action.options;\n  var datasets = (0, _utils.toArray)(action.datasets);\n  var newDataEntries = datasets.reduce(function (accu) {\n    var _ref14 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref14$info = _ref14.info,\n      info = _ref14$info === void 0 ? {} : _ref14$info,\n      rest = (0, _objectWithoutProperties2[\"default\"])(_ref14, [\"info\"]);\n    return _objectSpread(_objectSpread({}, accu), (0, _datasetUtils.createNewDataEntry)(_objectSpread({\n      info: info\n    }, rest), state.datasets) || {});\n  }, {});\n  var dataEmpty = Object.keys(newDataEntries).length < 1; // apply config if passed from action\n\n  var previousState = config ? receiveMapConfigUpdater(state, {\n    payload: {\n      config: config,\n      options: options\n    }\n  }) : state;\n  var mergedState = _objectSpread(_objectSpread({}, previousState), {}, {\n    datasets: _objectSpread(_objectSpread({}, previousState.datasets), newDataEntries)\n  }); // merge state with config to be merged\n\n  var _iterator2 = _createForOfIteratorHelper(mergedState.mergers),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var merger = _step2.value;\n      if ((0, _visStateMerger.isValidMerger)(merger) && merger.toMergeProp && mergedState[merger.toMergeProp]) {\n        var toMerge = mergedState[merger.toMergeProp];\n        mergedState[merger.toMergeProp] = INITIAL_VIS_STATE[merger.toMergeProp];\n        mergedState = merger.merge(mergedState, toMerge);\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  var newLayers = !dataEmpty ? mergedState.layers.filter(function (l) {\n    return l.config.dataId && l.config.dataId in newDataEntries;\n  }) : [];\n  if (!newLayers.length && (options || {}).autoCreateLayers !== false) {\n    // no layer merged, find defaults\n    var result = addDefaultLayers(mergedState, newDataEntries);\n    mergedState = result.state;\n    newLayers = result.newLayers;\n  }\n  if (mergedState.splitMaps.length) {\n    // if map is split, add new layers to splitMaps\n    newLayers = mergedState.layers.filter(function (l) {\n      return l.config.dataId && l.config.dataId in newDataEntries;\n    });\n    mergedState = _objectSpread(_objectSpread({}, mergedState), {}, {\n      splitMaps: (0, _splitMapUtils.addNewLayersToSplitMap)(mergedState.splitMaps, newLayers)\n    });\n  } // if no tooltips merged add default tooltips\n\n  Object.keys(newDataEntries).forEach(function (dataId) {\n    var tooltipFields = mergedState.interactionConfig.tooltip.config.fieldsToShow[dataId];\n    if (!Array.isArray(tooltipFields) || !tooltipFields.length) {\n      mergedState = addDefaultTooltips(mergedState, newDataEntries[dataId]);\n    }\n  });\n  var updatedState = updateAllLayerDomainData(mergedState, dataEmpty ? Object.keys(mergedState.datasets) : Object.keys(newDataEntries), undefined); // register layer animation domain,\n  // need to be called after layer data is calculated\n\n  updatedState = updateAnimationDomain(updatedState);\n  return updatedState;\n};\n/* eslint-enable max-statements */\n\n/**\n * Rename an existing dataset in `visState`\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').renameDatasetUpdater}\n * @public\n */\n\nexports.updateVisDataUpdater = updateVisDataUpdater;\nfunction renameDatasetUpdater(state, action) {\n  var dataId = action.dataId,\n    label = action.label;\n  var datasets = state.datasets;\n  var existing = datasets[dataId]; // @ts-ignore\n\n  return existing ? _objectSpread(_objectSpread({}, state), {}, {\n    datasets: _objectSpread(_objectSpread({}, datasets), {}, (0, _defineProperty2[\"default\"])({}, dataId, _objectSpread(_objectSpread({}, existing), {}, {\n      label: label\n    })))\n  }) :\n  // No-op if the dataset doesn't exist\n  state;\n}\n/**\n * When a user clicks on the specific map closing icon\n * the application will close the selected map\n * and will merge the remaining one with the global state\n * TODO: i think in the future this action should be called merge map layers with global settings\n * @param {Object} state `visState`\n * @param {Object} action action\n * @returns {Object} nextState\n */\n\nfunction closeSpecificMapAtIndex(state, action) {\n  // retrieve layers meta data from the remaining map that we need to keep\n  var indexToRetrieve = 1 - action.payload;\n  var mapLayers = state.splitMaps[indexToRetrieve].layers;\n  var layers = state.layers; // update layer visibility\n\n  var newLayers = layers.map(function (layer) {\n    return !mapLayers[layer.id] && layer.config.isVisible ? layer.updateLayerConfig({\n      // if layer.id is not in mapLayers, it should be inVisible\n      isVisible: false\n    }) : layer;\n  }); // delete map\n\n  return _objectSpread(_objectSpread({}, state), {}, {\n    layers: newLayers,\n    splitMaps: []\n  });\n}\n/**\n * Trigger file loading dispatch `addDataToMap` if succeed, or `loadFilesErr` if failed\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').loadFilesUpdater}\n * @public\n */\n\nvar loadFilesUpdater = function loadFilesUpdater(state, action) {\n  var files = action.files,\n    _action$onFinish = action.onFinish,\n    onFinish = _action$onFinish === void 0 ? _visStateActions.loadFilesSuccess : _action$onFinish;\n  if (!files.length) {\n    return state;\n  }\n  var fileLoadingProgress = Array.from(files).reduce(function (accu, f, i) {\n    return (0, _composerHelpers.merge_)(initialFileLoadingProgress(f, i))(accu);\n  }, {});\n  var fileLoading = {\n    fileCache: [],\n    filesToLoad: files,\n    onFinish: onFinish\n  };\n  var nextState = (0, _composerHelpers.merge_)({\n    fileLoadingProgress: fileLoadingProgress,\n    fileLoading: fileLoading\n  })(state);\n  return loadNextFileUpdater(nextState);\n};\n/**\n * Sucessfully loaded one file, move on to the next one\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').loadFileStepSuccessUpdater}\n * @public\n */\n\nexports.loadFilesUpdater = loadFilesUpdater;\nfunction loadFileStepSuccessUpdater(state, action) {\n  if (!state.fileLoading) {\n    return state;\n  }\n  var fileName = action.fileName,\n    fileCache = action.fileCache;\n  var _state$fileLoading = state.fileLoading,\n    filesToLoad = _state$fileLoading.filesToLoad,\n    onFinish = _state$fileLoading.onFinish;\n  var stateWithProgress = updateFileLoadingProgressUpdater(state, {\n    fileName: fileName,\n    progress: {\n      percent: 1,\n      message: 'Done'\n    }\n  }); // save processed file to fileCache\n\n  var stateWithCache = (0, _composerHelpers.pick_)('fileLoading')((0, _composerHelpers.merge_)({\n    fileCache: fileCache\n  }))(stateWithProgress);\n  return (0, _tasks.withTask)(stateWithCache, (0, _tasks2.DELAY_TASK)(200).map(filesToLoad.length ? _visStateActions.loadNextFile : function () {\n    return onFinish(fileCache);\n  }));\n} // withTask<T>(state: T, task: any): T\n\n/**\n *\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').loadNextFileUpdater}\n * @public\n */\n\nfunction loadNextFileUpdater(state) {\n  if (!state.fileLoading) {\n    return state;\n  }\n  var filesToLoad = state.fileLoading.filesToLoad;\n  var _filesToLoad = (0, _toArray2[\"default\"])(filesToLoad),\n    file = _filesToLoad[0],\n    remainingFilesToLoad = _filesToLoad.slice(1); // save filesToLoad to state\n\n  var nextState = (0, _composerHelpers.pick_)('fileLoading')((0, _composerHelpers.merge_)({\n    filesToLoad: remainingFilesToLoad\n  }))(state);\n  var stateWithProgress = updateFileLoadingProgressUpdater(nextState, {\n    fileName: file.name,\n    progress: {\n      percent: 0,\n      message: 'loading...'\n    }\n  });\n  var loaders = state.loaders,\n    loadOptions = state.loadOptions;\n  return (0, _tasks.withTask)(stateWithProgress, makeLoadFileTask(file, nextState.fileLoading.fileCache, loaders, loadOptions));\n}\nfunction makeLoadFileTask(file, fileCache) {\n  var loaders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var loadOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return (0, _tasks2.LOAD_FILE_TASK)({\n    file: file,\n    fileCache: fileCache,\n    loaders: loaders,\n    loadOptions: loadOptions\n  }).bimap(\n  // prettier ignore\n  // success\n  function (gen) {\n    return (0, _visStateActions.nextFileBatch)({\n      gen: gen,\n      fileName: file.name,\n      onFinish: function onFinish(result) {\n        return (0, _visStateActions.processFileContent)({\n          content: result,\n          fileCache: fileCache\n        });\n      }\n    });\n  },\n  // error\n  function (err) {\n    return (0, _visStateActions.loadFilesErr)(file.name, err);\n  });\n}\n/**\n *\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').processFileContentUpdater}\n * @public\n */\n\nfunction processFileContentUpdater(state, action) {\n  var _action$payload = action.payload,\n    content = _action$payload.content,\n    fileCache = _action$payload.fileCache;\n  var stateWithProgress = updateFileLoadingProgressUpdater(state, {\n    fileName: content.fileName,\n    progress: {\n      percent: 1,\n      message: 'processing...'\n    }\n  });\n  return (0, _tasks.withTask)(stateWithProgress, (0, _tasks2.PROCESS_FILE_DATA)({\n    content: content,\n    fileCache: fileCache\n  }).bimap(function (result) {\n    return (0, _visStateActions.loadFileStepSuccess)({\n      fileName: content.fileName,\n      fileCache: result\n    });\n  }, function (err) {\n    return (0, _visStateActions.loadFilesErr)(content.fileName, err);\n  }));\n}\nfunction parseProgress() {\n  var prevProgress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var progress = arguments.length > 1 ? arguments[1] : undefined;\n\n  // This happens when receiving query metadata or other cases we don't\n  // have an update for the user.\n  if (!progress || !progress.percent) {\n    return {};\n  }\n  return {\n    percent: progress.percent\n  };\n}\n/**\n * gets called with payload = AsyncGenerator<???>\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').nextFileBatchUpdater}\n * @public\n */\n\nvar nextFileBatchUpdater = function nextFileBatchUpdater(state, _ref15) {\n  var _ref15$payload = _ref15.payload,\n    gen = _ref15$payload.gen,\n    fileName = _ref15$payload.fileName,\n    progress = _ref15$payload.progress,\n    accumulated = _ref15$payload.accumulated,\n    onFinish = _ref15$payload.onFinish;\n  var stateWithProgress = updateFileLoadingProgressUpdater(state, {\n    fileName: fileName,\n    progress: parseProgress(state.fileLoadingProgress[fileName], progress)\n  });\n  return (0, _tasks.withTask)(stateWithProgress, (0, _tasks2.UNWRAP_TASK)(gen.next()).bimap(function (_ref16) {\n    var value = _ref16.value,\n      done = _ref16.done;\n    return done ? onFinish(accumulated) : (0, _visStateActions.nextFileBatch)({\n      gen: gen,\n      fileName: fileName,\n      progress: value.progress,\n      accumulated: value,\n      onFinish: onFinish\n    });\n  }, function (err) {\n    return (0, _visStateActions.loadFilesErr)(fileName, err);\n  }));\n};\n/**\n * Trigger loading file error\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').loadFilesErrUpdater}\n * @public\n */\n\nexports.nextFileBatchUpdater = nextFileBatchUpdater;\nvar loadFilesErrUpdater = function loadFilesErrUpdater(state, _ref17) {\n  var error = _ref17.error,\n    fileName = _ref17.fileName;\n\n  // update ui with error message\n  _window.console.warn(error);\n  if (!state.fileLoading) {\n    return state;\n  }\n  var _state$fileLoading2 = state.fileLoading,\n    filesToLoad = _state$fileLoading2.filesToLoad,\n    onFinish = _state$fileLoading2.onFinish,\n    fileCache = _state$fileLoading2.fileCache;\n  var nextState = updateFileLoadingProgressUpdater(state, {\n    fileName: fileName,\n    progress: {\n      error: error\n    }\n  }); // kick off next file or finish\n\n  return (0, _tasks.withTask)(nextState, (0, _tasks2.DELAY_TASK)(200).map(filesToLoad.length ? _visStateActions.loadNextFile : function () {\n    return onFinish(fileCache);\n  }));\n};\n/**\n * When select dataset for export, apply cpu filter to selected dataset\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').applyCPUFilterUpdater}\n * @public\n */\n\nexports.loadFilesErrUpdater = loadFilesErrUpdater;\nvar applyCPUFilterUpdater = function applyCPUFilterUpdater(state, _ref18) {\n  var dataId = _ref18.dataId;\n  // apply cpuFilter\n  var dataIds = (0, _utils.toArray)(dataId);\n  return dataIds.reduce(function (accu, id) {\n    return (0, _filterUtils.filterDatasetCPU)(accu, id);\n  }, state);\n};\n/**\n * User input to update the info of the map\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').setMapInfoUpdater}\n * @public\n */\n\nexports.applyCPUFilterUpdater = applyCPUFilterUpdater;\nvar setMapInfoUpdater = function setMapInfoUpdater(state, action) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    mapInfo: _objectSpread(_objectSpread({}, state.mapInfo), action.info)\n  });\n};\n/**\n * Helper function to update All layer domain and layer data of state\n * @type {typeof import('./vis-state-updaters').addDefaultLayers}\n */\n\nexports.setMapInfoUpdater = setMapInfoUpdater;\nfunction addDefaultLayers(state, datasets) {\n  /** @type {Layer[]} */\n  var empty = [];\n  var defaultLayers = Object.values(datasets).reduce(function (accu, dataset) {\n    var foundLayers = (0, _layerUtils.findDefaultLayer)(dataset, state.layerClasses);\n    return foundLayers && foundLayers.length ? accu.concat(foundLayers) : accu;\n  }, empty);\n  return {\n    state: _objectSpread(_objectSpread({}, state), {}, {\n      layers: [].concat((0, _toConsumableArray2[\"default\"])(state.layers), (0, _toConsumableArray2[\"default\"])(defaultLayers)),\n      layerOrder: [].concat((0, _toConsumableArray2[\"default\"])(defaultLayers.map(function (_, i) {\n        return state.layers.length + i;\n      })), (0, _toConsumableArray2[\"default\"])(state.layerOrder))\n    }),\n    newLayers: defaultLayers\n  };\n}\n/**\n * helper function to find default tooltips\n * @param {Object} state\n * @param {Object} dataset\n * @returns {Object} nextState\n */\n\nfunction addDefaultTooltips(state, dataset) {\n  var tooltipFields = (0, _interactionUtils.findFieldsToShow)(dataset);\n  var merged = _objectSpread(_objectSpread({}, state.interactionConfig.tooltip.config.fieldsToShow), tooltipFields);\n  return (0, _utils.set)(['interactionConfig', 'tooltip', 'config', 'fieldsToShow'], merged, state);\n}\nfunction initialFileLoadingProgress(file, index) {\n  var fileName = file.name || \"Untitled File \".concat(index);\n  return (0, _defineProperty2[\"default\"])({}, fileName, {\n    // percent of current file\n    percent: 0,\n    message: '',\n    fileName: fileName,\n    error: null\n  });\n}\nfunction updateFileLoadingProgressUpdater(state, _ref20) {\n  var fileName = _ref20.fileName,\n    progress = _ref20.progress;\n  return (0, _composerHelpers.pick_)('fileLoadingProgress')((0, _composerHelpers.pick_)(fileName)((0, _composerHelpers.merge_)(progress)))(state);\n}\n/**\n * Helper function to update layer domains for an array of datasets\n * @type {typeof import('./vis-state-updaters').updateAllLayerDomainData}\n */\n\nfunction updateAllLayerDomainData(state, dataId, updatedFilter) {\n  var dataIds = typeof dataId === 'string' ? [dataId] : dataId;\n  var newLayers = [];\n  var newLayerData = [];\n  state.layers.forEach(function (oldLayer, i) {\n    if (oldLayer.config.dataId && dataIds.includes(oldLayer.config.dataId)) {\n      // No need to recalculate layer domain if filter has fixed domain\n      var newLayer = updatedFilter && updatedFilter.fixedDomain ? oldLayer : oldLayer.updateLayerDomain(state.datasets, updatedFilter);\n      var _calculateLayerData5 = (0, _layerUtils.calculateLayerData)(newLayer, state, state.layerData[i]),\n        layerData = _calculateLayerData5.layerData,\n        layer = _calculateLayerData5.layer;\n      newLayers.push(layer);\n      newLayerData.push(layerData);\n    } else {\n      newLayers.push(oldLayer);\n      newLayerData.push(state.layerData[i]);\n    }\n  });\n  var newState = _objectSpread(_objectSpread({}, state), {}, {\n    layers: newLayers,\n    layerData: newLayerData\n  });\n  return newState;\n}\nfunction updateAnimationDomain(state) {\n  // merge all animatable layer domain and update global config\n  var animatableLayers = state.layers.filter(function (l) {\n    return l.config.isVisible && l.config.animation && l.config.animation.enabled && Array.isArray(l.animationDomain);\n  });\n  if (!animatableLayers.length) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      animationConfig: _objectSpread(_objectSpread({}, state.animationConfig), {}, {\n        domain: null,\n        defaultTimeFormat: null\n      })\n    });\n  }\n  var mergedDomain = animatableLayers.reduce(function (accu, layer) {\n    return [Math.min(accu[0], layer.animationDomain[0]), Math.max(accu[1], layer.animationDomain[1])];\n  }, [Number(Infinity), -Infinity]);\n  var defaultTimeFormat = (0, _filterUtils.getTimeWidgetTitleFormatter)(mergedDomain);\n  return _objectSpread(_objectSpread({}, state), {}, {\n    animationConfig: _objectSpread(_objectSpread({}, state.animationConfig), {}, {\n      currentTime: (0, _filterUtils.isInRange)(state.animationConfig.currentTime, mergedDomain) ? state.animationConfig.currentTime : mergedDomain[0],\n      domain: mergedDomain,\n      defaultTimeFormat: defaultTimeFormat\n    })\n  });\n}\n/**\n * Update the status of the editor\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').setEditorModeUpdater}\n */\n\nvar setEditorModeUpdater = function setEditorModeUpdater(state, _ref21) {\n  var mode = _ref21.mode;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    editor: _objectSpread(_objectSpread({}, state.editor), {}, {\n      mode: mode,\n      selectedFeature: null\n    })\n  });\n}; // const featureToFilterValue = (feature) => ({...feature, id: feature.id});\n\n/**\n * Update editor features\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').setFeaturesUpdater}\n */\n\nexports.setEditorModeUpdater = setEditorModeUpdater;\nfunction setFeaturesUpdater(state, _ref22) {\n  var _ref22$features = _ref22.features,\n    features = _ref22$features === void 0 ? [] : _ref22$features;\n  var lastFeature = features.length && features[features.length - 1];\n  var newState = _objectSpread(_objectSpread({}, state), {}, {\n    editor: _objectSpread(_objectSpread({}, state.editor), {}, {\n      // only save none filter features to editor\n      features: features.filter(function (f) {\n        return !(0, _filterUtils.getFilterIdInFeature)(f);\n      }),\n      mode: lastFeature && lastFeature.properties.isClosed ? _defaultSettings.EDITOR_MODES.EDIT : state.editor.mode\n    })\n  }); // Retrieve existing feature\n\n  var selectedFeature = state.editor.selectedFeature; // If no feature is selected we can simply return since no operations\n\n  if (!selectedFeature) {\n    return newState;\n  } // TODO: check if the feature has changed\n\n  var feature = features.find(function (f) {\n    return f.id === selectedFeature.id;\n  }); // if feature is part of a filter\n\n  var filterId = feature && (0, _filterUtils.getFilterIdInFeature)(feature);\n  if (filterId && feature) {\n    var featureValue = (0, _filterUtils.featureToFilterValue)(feature, filterId);\n    var filterIdx = state.filters.findIndex(function (fil) {\n      return fil.id === filterId;\n    });\n    return setFilterUpdater(newState, {\n      idx: filterIdx,\n      prop: 'value',\n      value: featureValue\n    });\n  }\n  return newState;\n}\n/**\n * Set the current selected feature\n * @memberof uiStateUpdaters\n * @type {typeof import('./vis-state-updaters').setSelectedFeatureUpdater}\n */\n\nvar setSelectedFeatureUpdater = function setSelectedFeatureUpdater(state, _ref23) {\n  var feature = _ref23.feature;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    editor: _objectSpread(_objectSpread({}, state.editor), {}, {\n      selectedFeature: feature\n    })\n  });\n};\n/**\n * Delete existing feature from filters\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').deleteFeatureUpdater}\n */\n\nexports.setSelectedFeatureUpdater = setSelectedFeatureUpdater;\nfunction deleteFeatureUpdater(state, _ref24) {\n  var feature = _ref24.feature;\n  if (!feature) {\n    return state;\n  }\n  var newState = _objectSpread(_objectSpread({}, state), {}, {\n    editor: _objectSpread(_objectSpread({}, state.editor), {}, {\n      selectedFeature: null\n    })\n  });\n  if ((0, _filterUtils.getFilterIdInFeature)(feature)) {\n    var filterIdx = newState.filters.findIndex(function (f) {\n      return f.id === (0, _filterUtils.getFilterIdInFeature)(feature);\n    });\n    return filterIdx > -1 ? removeFilterUpdater(newState, {\n      idx: filterIdx\n    }) : newState;\n  } // modify editor object\n\n  var newEditor = _objectSpread(_objectSpread({}, state.editor), {}, {\n    features: state.editor.features.filter(function (f) {\n      return f.id !== feature.id;\n    }),\n    selectedFeature: null\n  });\n  return _objectSpread(_objectSpread({}, state), {}, {\n    editor: newEditor\n  });\n}\n/**\n * Toggle feature as layer filter\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').setPolygonFilterLayerUpdater}\n */\n\nfunction setPolygonFilterLayerUpdater(state, payload) {\n  var layer = payload.layer,\n    feature = payload.feature;\n  var filterId = (0, _filterUtils.getFilterIdInFeature)(feature); // let newFilter = null;\n\n  var filterIdx;\n  var newLayerId = [layer.id];\n  var newState = state; // If polygon filter already exists, we need to find out if the current layer is already included\n\n  if (filterId) {\n    filterIdx = state.filters.findIndex(function (f) {\n      return f.id === filterId;\n    });\n    if (!state.filters[filterIdx]) {\n      // what if filter doesn't exist?... not possible.\n      // because features in the editor is passed in from filters and editors.\n      // but we will move this feature back to editor just in case\n      var noneFilterFeature = _objectSpread(_objectSpread({}, feature), {}, {\n        properties: _objectSpread(_objectSpread({}, feature.properties), {}, {\n          filterId: null\n        })\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        editor: _objectSpread(_objectSpread({}, state.editor), {}, {\n          features: [].concat((0, _toConsumableArray2[\"default\"])(state.editor.features), [noneFilterFeature]),\n          selectedFeature: noneFilterFeature\n        })\n      });\n    }\n    var filter = state.filters[filterIdx];\n    var _filter$layerId = filter.layerId,\n      layerId = _filter$layerId === void 0 ? [] : _filter$layerId;\n    var isLayerIncluded = layerId.includes(layer.id);\n    newLayerId = isLayerIncluded ?\n    // if layer is included, remove it\n    layerId.filter(function (l) {\n      return l !== layer.id;\n    }) : [].concat((0, _toConsumableArray2[\"default\"])(layerId), [layer.id]);\n  } else {\n    // if we haven't create the polygon filter, create it\n    var newFilter = (0, _filterUtils.generatePolygonFilter)([], feature);\n    filterIdx = state.filters.length; // add feature, remove feature from eidtor\n\n    newState = _objectSpread(_objectSpread({}, state), {}, {\n      filters: [].concat((0, _toConsumableArray2[\"default\"])(state.filters), [newFilter]),\n      editor: _objectSpread(_objectSpread({}, state.editor), {}, {\n        features: state.editor.features.filter(function (f) {\n          return f.id !== feature.id;\n        }),\n        selectedFeature: newFilter.value\n      })\n    });\n  }\n  return setFilterUpdater(newState, {\n    idx: filterIdx,\n    prop: 'layerId',\n    value: newLayerId\n  });\n}\n/**\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').sortTableColumnUpdater}\n * @public\n */\n\nfunction sortTableColumnUpdater(state, _ref25) {\n  var dataId = _ref25.dataId,\n    column = _ref25.column,\n    mode = _ref25.mode;\n  var dataset = state.datasets[dataId];\n  if (!dataset) {\n    return state;\n  }\n  var sortMode = mode;\n  if (!sortMode) {\n    var currentMode = (0, _lodash3[\"default\"])(dataset, ['sortColumn', column]); // @ts-ignore - should be fixable in a TS file\n\n    sortMode = currentMode ? Object.keys(_defaultSettings.SORT_ORDER).find(function (m) {\n      return m !== currentMode;\n    }) : _defaultSettings.SORT_ORDER.ASCENDING;\n  }\n  var sorted = (0, _keplerTable.sortDatasetByColumn)(dataset, column, sortMode);\n  return (0, _utils.set)(['datasets', dataId], sorted, state);\n}\n/**\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').pinTableColumnUpdater}\n * @public\n */\n\nfunction pinTableColumnUpdater(state, _ref26) {\n  var dataId = _ref26.dataId,\n    column = _ref26.column;\n  var dataset = state.datasets[dataId];\n  if (!dataset) {\n    return state;\n  }\n  var field = dataset.fields.find(function (f) {\n    return f.name === column;\n  });\n  if (!field) {\n    return state;\n  }\n  var pinnedColumns;\n  if (Array.isArray(dataset.pinnedColumns) && dataset.pinnedColumns.includes(field.name)) {\n    // unpin it\n    pinnedColumns = dataset.pinnedColumns.filter(function (co) {\n      return co !== field.name;\n    });\n  } else {\n    pinnedColumns = (dataset.pinnedColumns || []).concat(field.name);\n  }\n  return (0, _utils.set)(['datasets', dataId, 'pinnedColumns'], pinnedColumns, state);\n}\n/**\n * Copy column content as strings\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').copyTableColumnUpdater}\n * @public\n */\n\nfunction copyTableColumnUpdater(state, _ref27) {\n  var dataId = _ref27.dataId,\n    column = _ref27.column;\n  var dataset = state.datasets[dataId];\n  if (!dataset) {\n    return state;\n  }\n  var fieldIdx = dataset.fields.findIndex(function (f) {\n    return f.name === column;\n  });\n  if (fieldIdx < 0) {\n    return state;\n  }\n  var type = dataset.fields[fieldIdx].type;\n  var text = dataset.dataContainer.map(function (row) {\n    return (0, _dataUtils.parseFieldValue)(row.valueAt(fieldIdx), type);\n  }, true).join('\\n');\n  (0, _copyToClipboard[\"default\"])(text);\n  return state;\n}\n/**\n * Update editor\n * @type {typeof import('./vis-state-updaters').toggleEditorVisibilityUpdater}\n */\n\nfunction toggleEditorVisibilityUpdater(state) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    editor: _objectSpread(_objectSpread({}, state.editor), {}, {\n      visible: !state.editor.visible\n    })\n  });\n}\nfunction setFilterAnimationTimeConfigUpdater(state, _ref28) {\n  var idx = _ref28.idx,\n    config = _ref28.config;\n  var oldFilter = state.filters[idx];\n  if (!oldFilter) {\n    _window.console.error(\"filters.\".concat(idx, \" is undefined\"));\n    return state;\n  }\n  if (oldFilter.type !== _defaultSettings.FILTER_TYPES.timeRange) {\n    _window.console.error(\"setFilterAnimationTimeConfig can only be called to update a time filter. check filter.type === 'timeRange'\");\n    return state;\n  }\n  var updates = checkTimeConfigArgs(config);\n  return (0, _composerHelpers.pick_)('filters')((0, _composerHelpers.swap_)((0, _composerHelpers.merge_)(updates)(oldFilter)))(state);\n}\nfunction checkTimeConfigArgs(config) {\n  var allowed = ['timeFormat', 'timezone'];\n  return Object.keys(config).reduce(function (accu, prop) {\n    if (!allowed.includes(prop)) {\n      _window.console.error(\"setLayerAnimationTimeConfig takes timeFormat and/or timezone as options, found \".concat(prop));\n      return accu;\n    } // here we are NOT checking if timezone or timeFormat input is valid\n\n    accu[prop] = config[prop];\n    return accu;\n  }, {});\n}\n/**\n * Update editor\n * @type {typeof import('./vis-state-updaters').setLayerAnimationTimeConfigUpdater}\n */\n\nfunction setLayerAnimationTimeConfigUpdater(state, _ref29) {\n  var config = _ref29.config;\n  if (!config) {\n    return state;\n  }\n  var updates = checkTimeConfigArgs(config);\n  return (0, _composerHelpers.pick_)('animationConfig')((0, _composerHelpers.merge_)(updates))(state);\n}","map":{"version":3,"sources":["../../src/reducers/vis-state-updaters.js"],"names":["visStateUpdaters","DEFAULT_ANIMATION_CONFIG","domain","currentTime","speed","isAnimating","timeFormat","timezone","defaultTimeFormat","DEFAULT_EDITOR","mode","EDITOR_MODES","DRAW_POLYGON","features","selectedFeature","visible","INITIAL_VIS_STATE","mapInfo","title","description","layers","layerData","layerToBeMerged","layerOrder","filters","filterToBeMerged","datasets","editingDataset","undefined","interactionConfig","interactionToBeMerged","layerBlending","hoverInfo","clicked","mousePos","splitMaps","splitMapsToBeMerged","layerClasses","LayerClasses","animationConfig","editor","fileLoading","fileLoadingProgress","loaders","loadOptions","mergers","VIS_STATE_MERGERS","schema","KeplerGLSchema","updateStateWithLayerAndData","state","layer","idx","map","lyr","i","d","updateStateOnLayerVisibilityChange","newState","length","config","isVisible","animation","enabled","updateAnimationDomain","layerConfigChangeUpdater","action","oldLayer","findIndex","l","id","props","Object","keys","newConfig","dataId","restConfig","stateWithDataId","layerDataIdChangeUpdater","nextLayer","find","newLayer","updateLayerConfig","shouldCalculateLayerData","oldLayerData","updateLayerDataResult","addOrRemoveTextLabels","newFields","textLabel","newTextLabel","slice","currentFields","tl","field","name","filter","addFields","includes","f","deleteFields","fd","DEFAULT_TEXT_LABEL","af","updateTextLabelPropAndValue","prop","value","hasOwnProperty","splice","layerTextLabelChangeUpdater","validateExistingLayerWithData","dataset","loadedLayer","allowEmptyColumn","isValidToSave","validated","type","isConfigActive","updateLayerDomain","layerTypeChangeUpdater","newType","oldId","Console","error","assignConfigToLayer","visConfigSettings","oldLayerMap","otherLayers","settings","layerVisualChannelChangeUpdater","channel","updateLayerVisualChannel","layerVisConfigChangeUpdater","newVisConfig","visConfig","setFilterAnimationTimeUpdater","setFilterUpdater","setFilterAnimationWindowUpdater","animationWindow","valueIndex","oldFilter","newFilter","datasetIds","FILTER_UPDATER_PROPS","datasetId","updatedFilter","newDataset","mergeDomain","gpu","layerId","layerIdDifference","layerDataIds","lid","newDataIds","enlargedFilter","enlarged","datasetIdsToFilter","LIMITED_FILTER_EFFECT_PROPS","filteredDatasets","updateAllLayerDomainData","setFilterPlotUpdater","newProp","plotType","addFilterUpdater","layerColorUIChangeUpdater","oldVixConfig","updateLayerColorUI","toggleFilterAnimationUpdater","toggleLayerAnimationUpdater","toggleLayerAnimationControlUpdater","hideControl","updateFilterAnimationSpeedUpdater","setLayerAnimationTimeUpdater","updateLayerAnimationSpeedUpdater","enlargeFilterUpdater","toggleFilterFeatureUpdater","assign","removeFilterUpdater","newFilters","newEditor","addLayerUpdater","newLayerData","warn","result","defaultDataset","Layer","removeLayerUpdater","layerToRemove","newMaps","pid","isLayerHovered","duplicateLayerUpdater","original","originalLayerOrderIdx","newLabel","label","postfix","LAYER_ID_LENGTH","nextState","newLayerOrderIdx","newLayerOrder","reorderLayerUpdater","order","removeDatasetUpdater","datasetKey","newDatasets","indexes","reduce","listOfIndexes","index","push","currentState","indexCounter","currentIndex","tooltip","fields","fieldsToShow","updateLayerBlendingUpdater","showDatasetTableUpdater","resetMapConfigUpdater","initialState","receiveMapConfigUpdater","payload","options","visState","keepExistingConfig","mergedState","merger","merge","layerHoverUpdater","info","interactionConfigChangeUpdater","contradict","forEach","k","layerClickUpdater","coordinate","pinned","picked","mapClickUpdater","mouseMoveUpdater","evt","values","some","mousePosition","point","lngLat","toggleSplitMapUpdater","closeSpecificMapAtIndex","toggleLayerForMapUpdater","mapIndex","sm","updateVisDataUpdater","newDataEntries","accu","rest","dataEmpty","previousState","toMergeProp","toMerge","newLayers","autoCreateLayers","addDefaultLayers","tooltipFields","Array","isArray","addDefaultTooltips","updatedState","renameDatasetUpdater","existing","indexToRetrieve","mapLayers","loadFilesUpdater","files","onFinish","loadFilesSuccess","from","initialFileLoadingProgress","fileCache","filesToLoad","loadNextFileUpdater","loadFileStepSuccessUpdater","fileName","stateWithProgress","updateFileLoadingProgressUpdater","progress","percent","message","stateWithCache","loadNextFile","file","remainingFilesToLoad","makeLoadFileTask","bimap","gen","content","err","processFileContentUpdater","parseProgress","prevProgress","nextFileBatchUpdater","accumulated","next","done","loadFilesErrUpdater","applyCPUFilterUpdater","dataIds","setMapInfoUpdater","empty","defaultLayers","foundLayers","concat","_","merged","fixedDomain","animatableLayers","animationDomain","mergedDomain","Math","min","max","Number","Infinity","setEditorModeUpdater","setFeaturesUpdater","lastFeature","properties","isClosed","EDIT","feature","filterId","featureValue","filterIdx","fil","setSelectedFeatureUpdater","deleteFeatureUpdater","setPolygonFilterLayerUpdater","newLayerId","noneFilterFeature","isLayerIncluded","sortTableColumnUpdater","column","sortMode","currentMode","SORT_ORDER","m","ASCENDING","sorted","pinTableColumnUpdater","pinnedColumns","co","copyTableColumnUpdater","fieldIdx","text","dataContainer","row","valueAt","join","toggleEditorVisibilityUpdater","setFilterAnimationTimeConfigUpdater","FILTER_TYPES","timeRange","updates","checkTimeConfigArgs","allowed","setLayerAnimationTimeConfigUpdater"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {console as Console} from 'global/window';\nimport {disableStackCapturing, withTask} from 'react-palm/tasks';\nimport cloneDeep from 'lodash.clonedeep';\nimport uniq from 'lodash.uniq';\nimport get from 'lodash.get';\nimport xor from 'lodash.xor';\nimport copy from 'copy-to-clipboard';\nimport {parseFieldValue} from 'utils/data-utils';\n// Tasks\nimport {LOAD_FILE_TASK, UNWRAP_TASK, PROCESS_FILE_DATA, DELAY_TASK} from 'tasks/tasks';\n// Actions\nimport {\n  loadFilesErr,\n  loadFilesSuccess,\n  loadFileStepSuccess,\n  loadNextFile,\n  nextFileBatch\n} from 'actions/vis-state-actions';\n// Utils\nimport {findFieldsToShow, getDefaultInteraction} from 'utils/interaction-utils';\nimport {\n  applyFilterFieldName,\n  applyFiltersToDatasets,\n  featureToFilterValue,\n  FILTER_UPDATER_PROPS,\n  filterDatasetCPU,\n  generatePolygonFilter,\n  getDefaultFilter,\n  getDefaultFilterPlotType,\n  getFilterIdInFeature,\n  getFilterPlot,\n  getTimeWidgetTitleFormatter,\n  isInRange,\n  LIMITED_FILTER_EFFECT_PROPS,\n  updateFilterDataId\n} from 'utils/filter-utils';\nimport {assignGpuChannel, setFilterGpuMode} from 'utils/gpu-filter-utils';\nimport {createNewDataEntry} from 'utils/dataset-utils';\nimport {sortDatasetByColumn} from 'utils/table-utils/kepler-table';\nimport {set, toArray, arrayInsert, generateHashId} from 'utils/utils';\n\nimport {calculateLayerData, findDefaultLayer} from 'utils/layer-utils';\n\nimport {\n  isValidMerger,\n  VIS_STATE_MERGERS,\n  validateLayerWithData,\n  createLayerFromConfig,\n  serializeLayer\n} from './vis-state-merger';\n\nimport {\n  addNewLayersToSplitMap,\n  computeSplitMapLayers,\n  removeLayerFromSplitMaps\n} from 'utils/split-map-utils';\n\nimport {Layer, LayerClasses, LAYER_ID_LENGTH} from 'layers';\nimport {DEFAULT_TEXT_LABEL} from 'layers/layer-factory';\nimport {EDITOR_MODES, SORT_ORDER, FILTER_TYPES} from 'constants/default-settings';\nimport {pick_, merge_, swap_} from './composer-helpers';\nimport {processFileContent} from 'actions/vis-state-actions';\n\nimport KeplerGLSchema from 'schemas';\n\n// type imports\n/** @typedef {import('./vis-state-updaters').Field} Field */\n/** @typedef {import('./vis-state-updaters').Filter} Filter */\n/** @typedef {import('./vis-state-updaters').KeplerTable} KeplerTable */\n/** @typedef {import('./vis-state-updaters').VisState} VisState */\n/** @typedef {import('./vis-state-updaters').Datasets} Datasets */\n/** @typedef {import('./vis-state-updaters').AnimationConfig} AnimationConfig */\n/** @typedef {import('./vis-state-updaters').Editor} Editor */\n\n// react-palm\n// disable capture exception for react-palm call to withTask\ndisableStackCapturing();\n\n/**\n * Updaters for `visState` reducer. Can be used in your root reducer to directly modify kepler.gl's state.\n * Read more about [Using updaters](../advanced-usage/using-updaters.md)\n *\n * @public\n * @example\n *\n * import keplerGlReducer, {visStateUpdaters} from 'kepler.gl/reducers';\n * // Root Reducer\n * const reducers = combineReducers({\n *  keplerGl: keplerGlReducer,\n *  app: appReducer\n * });\n *\n * const composedReducer = (state, action) => {\n *  switch (action.type) {\n *    case 'CLICK_BUTTON':\n *      return {\n *        ...state,\n *        keplerGl: {\n *          ...state.keplerGl,\n *          foo: {\n *             ...state.keplerGl.foo,\n *             visState: visStateUpdaters.enlargeFilterUpdater(\n *               state.keplerGl.foo.visState,\n *               {idx: 0}\n *             )\n *          }\n *        }\n *      };\n *  }\n *  return reducers(state, action);\n * };\n *\n * export default composedReducer;\n */\n/* eslint-disable no-unused-vars */\n// @ts-ignore\nconst visStateUpdaters = null;\n/* eslint-enable no-unused-vars */\n\n/** @type {AnimationConfig} */\nexport const DEFAULT_ANIMATION_CONFIG = {\n  domain: null,\n  currentTime: null,\n  speed: 1,\n  isAnimating: false,\n  timeFormat: null,\n  timezone: null,\n  defaultTimeFormat: null\n};\n\n/** @type {Editor} */\nexport const DEFAULT_EDITOR = {\n  mode: EDITOR_MODES.DRAW_POLYGON,\n  features: [],\n  selectedFeature: null,\n  visible: true\n};\n\n/**\n * Default initial `visState`\n * @memberof visStateUpdaters\n * @constant\n * @type {VisState}\n * @public\n */\nexport const INITIAL_VIS_STATE = {\n  // map info\n  mapInfo: {\n    title: '',\n    description: ''\n  },\n  // layers\n  layers: [],\n  layerData: [],\n  layerToBeMerged: [],\n  layerOrder: [],\n\n  // filters\n  filters: [],\n  filterToBeMerged: [],\n\n  // a collection of multiple dataset\n  datasets: {},\n  editingDataset: undefined,\n\n  interactionConfig: getDefaultInteraction(),\n  interactionToBeMerged: undefined,\n\n  layerBlending: 'normal',\n  hoverInfo: undefined,\n  clicked: undefined,\n  mousePos: {},\n\n  // this is used when user split maps\n  splitMaps: [\n    // this will contain a list of objects to\n    // describe the state of layer availability and visibility for each map\n    // [\n    //   {\n    //      layers: {layer_id: true | false}\n    //   }\n    // ]\n  ],\n  splitMapsToBeMerged: [],\n\n  // defaults layer classes\n  layerClasses: LayerClasses,\n\n  // default animation\n  // time in unix timestamp (milliseconds) (the number of seconds since the Unix Epoch)\n  animationConfig: DEFAULT_ANIMATION_CONFIG,\n\n  editor: DEFAULT_EDITOR,\n\n  fileLoading: false,\n  fileLoadingProgress: {},\n\n  loaders: [],\n  loadOptions: {},\n\n  // visStateMergers\n  mergers: VIS_STATE_MERGERS,\n\n  // kepler schemas\n  schema: KeplerGLSchema\n};\n\n/**\n * Update state with updated layer and layerData\n * @type {typeof import('./vis-state-updaters').updateStateWithLayerAndData}\n *\n */\nexport function updateStateWithLayerAndData(state, {layerData, layer, idx}) {\n  return {\n    ...state,\n    layers: state.layers.map((lyr, i) => (i === idx ? layer : lyr)),\n    layerData: layerData\n      ? state.layerData.map((d, i) => (i === idx ? layerData : d))\n      : state.layerData\n  };\n}\n\nexport function updateStateOnLayerVisibilityChange(state, layer) {\n  let newState = state;\n  if (state.splitMaps.length) {\n    newState = {\n      ...state,\n      splitMaps: layer.config.isVisible\n        ? addNewLayersToSplitMap(state.splitMaps, layer)\n        : removeLayerFromSplitMaps(state.splitMaps, layer)\n    };\n  }\n\n  if (layer.config.animation.enabled) {\n    newState = updateAnimationDomain(state);\n  }\n\n  return newState;\n}\n\n/**\n * Update layer base config: dataId, label, column, isVisible\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').layerConfigChangeUpdater}\n * @returns nextState\n */\nexport function layerConfigChangeUpdater(state, action) {\n  const {oldLayer} = action;\n  const idx = state.layers.findIndex(l => l.id === oldLayer.id);\n  const props = Object.keys(action.newConfig);\n  if (typeof action.newConfig.dataId === 'string') {\n    const {dataId, ...restConfig} = action.newConfig;\n    const stateWithDataId = layerDataIdChangeUpdater(state, {\n      oldLayer,\n      newConfig: {dataId}\n    });\n    const nextLayer = stateWithDataId.layers.find(l => l.id === oldLayer.id);\n    return nextLayer && Object.keys(restConfig).length\n      ? layerConfigChangeUpdater(stateWithDataId, {oldLayer: nextLayer, newConfig: restConfig})\n      : stateWithDataId;\n  }\n\n  let newLayer = oldLayer.updateLayerConfig(action.newConfig);\n\n  let layerData;\n\n  // let newLayer;\n  if (newLayer.shouldCalculateLayerData(props)) {\n    const oldLayerData = state.layerData[idx];\n    const updateLayerDataResult = calculateLayerData(newLayer, state, oldLayerData);\n\n    layerData = updateLayerDataResult.layerData;\n    newLayer = updateLayerDataResult.layer;\n  }\n\n  let newState = state;\n  if ('isVisible' in action.newConfig) {\n    newState = updateStateOnLayerVisibilityChange(state, newLayer);\n  }\n\n  return updateStateWithLayerAndData(newState, {\n    layer: newLayer,\n    layerData,\n    idx\n  });\n}\n\nfunction addOrRemoveTextLabels(newFields, textLabel) {\n  let newTextLabel = textLabel.slice();\n\n  const currentFields = textLabel.map(tl => tl.field && tl.field.name).filter(d => d);\n\n  const addFields = newFields.filter(f => !currentFields.includes(f.name));\n  const deleteFields = currentFields.filter(f => !newFields.find(fd => fd.name === f));\n\n  // delete\n  newTextLabel = newTextLabel.filter(tl => tl.field && !deleteFields.includes(tl.field.name));\n  newTextLabel = !newTextLabel.length ? [DEFAULT_TEXT_LABEL] : newTextLabel;\n\n  // add\n  newTextLabel = [\n    ...newTextLabel.filter(tl => tl.field),\n    ...addFields.map(af => ({\n      ...DEFAULT_TEXT_LABEL,\n      field: af\n    }))\n  ];\n\n  return newTextLabel;\n}\n\nfunction updateTextLabelPropAndValue(idx, prop, value, textLabel) {\n  if (!textLabel[idx].hasOwnProperty(prop)) {\n    return textLabel;\n  }\n\n  let newTextLabel = textLabel.slice();\n\n  if (prop && (value || textLabel.length === 1)) {\n    newTextLabel = textLabel.map((tl, i) => (i === idx ? {...tl, [prop]: value} : tl));\n  } else if (prop === 'field' && value === null && textLabel.length > 1) {\n    // remove label when field value is set to null\n    newTextLabel.splice(idx, 1);\n  }\n\n  return newTextLabel;\n}\n\n/**\n * Update layer base config: dataId, label, column, isVisible\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').layerTextLabelChangeUpdater}\n * @returns nextState\n */\nexport function layerTextLabelChangeUpdater(state, action) {\n  const {oldLayer, idx, prop, value} = action;\n  const {textLabel} = oldLayer.config;\n\n  let newTextLabel = textLabel.slice();\n  if (!textLabel[idx] && idx === textLabel.length) {\n    // if idx is set to length, add empty text label\n    newTextLabel = [...textLabel, DEFAULT_TEXT_LABEL];\n  }\n\n  if (idx === 'all' && prop === 'fields') {\n    newTextLabel = addOrRemoveTextLabels(value, textLabel);\n  } else {\n    newTextLabel = updateTextLabelPropAndValue(idx, prop, value, newTextLabel);\n  }\n  // update text label prop and value\n  return layerConfigChangeUpdater(state, {\n    oldLayer,\n    newConfig: {textLabel: newTextLabel}\n  });\n}\n\nfunction validateExistingLayerWithData(dataset, layerClasses, layer) {\n  const loadedLayer = serializeLayer(layer);\n  return validateLayerWithData(dataset, loadedLayer, layerClasses, {\n    allowEmptyColumn: true\n  });\n}\n\n/**\n * Update layer config dataId\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').layerDataIdChangeUpdater}\n * @returns nextState\n */\nexport function layerDataIdChangeUpdater(state, action) {\n  const {oldLayer, newConfig} = action;\n  const {dataId} = newConfig;\n\n  if (!oldLayer || !state.datasets[dataId]) {\n    return state;\n  }\n  const idx = state.layers.findIndex(l => l.id === oldLayer.id);\n\n  let newLayer = oldLayer.updateLayerConfig({dataId});\n  // this may happen when a layer is new (type: null and no columns) but it's not ready to be saved\n  if (newLayer.isValidToSave()) {\n    const validated = validateExistingLayerWithData(\n      state.datasets[dataId],\n      state.layerClasses,\n      newLayer\n    );\n    // if cant validate it with data create a new one\n    if (!validated) {\n      newLayer = new state.layerClasses[oldLayer.type]({dataId, id: oldLayer.id});\n    } else {\n      newLayer = validated;\n    }\n  }\n\n  newLayer = newLayer.updateLayerConfig({\n    isVisible: oldLayer.config.isVisible,\n    isConfigActive: true\n  });\n\n  newLayer.updateLayerDomain(state.datasets);\n  const {layerData, layer} = calculateLayerData(newLayer, state, undefined);\n\n  return updateStateWithLayerAndData(state, {layerData, layer, idx});\n}\n\n/**\n * Update layer type. Previews layer config will be copied if applicable.\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').layerTypeChangeUpdater}\n * @public\n */\nexport function layerTypeChangeUpdater(state, action) {\n  const {oldLayer, newType} = action;\n  if (!oldLayer) {\n    return state;\n  }\n  const oldId = oldLayer.id;\n  const idx = state.layers.findIndex(l => l.id === oldId);\n\n  if (!state.layerClasses[newType]) {\n    Console.error(`${newType} is not a valid layer type`);\n    return state;\n  }\n\n  // get a mint layer, with new id and type\n  // because deck.gl uses id to match between new and old layer.\n  // If type has changed but id is the same, it will break\n  const newLayer = new state.layerClasses[newType]();\n\n  newLayer.assignConfigToLayer(oldLayer.config, oldLayer.visConfigSettings);\n\n  newLayer.updateLayerDomain(state.datasets);\n  const {layerData, layer} = calculateLayerData(newLayer, state);\n  let newState = updateStateWithLayerAndData(state, {layerData, layer, idx});\n\n  if (layer.config.animation.enabled || oldLayer.config.animation.enabled) {\n    newState = updateAnimationDomain(newState);\n  }\n\n  // update splitMap layer id\n  if (state.splitMaps.length) {\n    newState = {\n      ...newState,\n      splitMaps: newState.splitMaps.map(settings => {\n        const {[oldId]: oldLayerMap, ...otherLayers} = settings.layers;\n        return oldId in settings.layers\n          ? {\n              ...settings,\n              layers: {\n                ...otherLayers,\n                [layer.id]: oldLayerMap\n              }\n            }\n          : settings;\n      })\n    };\n  }\n\n  return newState;\n}\n\n/**\n * Update layer visual channel\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').layerVisualChannelChangeUpdater}\n * @returns {Object} nextState\n * @public\n */\nexport function layerVisualChannelChangeUpdater(state, action) {\n  const {oldLayer, newConfig, channel} = action;\n  if (!oldLayer.config.dataId) {\n    return state;\n  }\n  const dataset = state.datasets[oldLayer.config.dataId];\n\n  const idx = state.layers.findIndex(l => l.id === oldLayer.id);\n  const newLayer = oldLayer.updateLayerConfig(newConfig);\n\n  newLayer.updateLayerVisualChannel(dataset, channel);\n\n  const oldLayerData = state.layerData[idx];\n  const {layerData, layer} = calculateLayerData(newLayer, state, oldLayerData);\n\n  return updateStateWithLayerAndData(state, {layerData, layer, idx});\n}\n\n/**\n * Update layer `visConfig`\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').layerVisConfigChangeUpdater}\n * @public\n */\nexport function layerVisConfigChangeUpdater(state, action) {\n  const {oldLayer} = action;\n  const idx = state.layers.findIndex(l => l.id === oldLayer.id);\n  const props = Object.keys(action.newVisConfig);\n  const newVisConfig = {\n    ...oldLayer.config.visConfig,\n    ...action.newVisConfig\n  };\n\n  const newLayer = oldLayer.updateLayerConfig({visConfig: newVisConfig});\n\n  if (newLayer.shouldCalculateLayerData(props)) {\n    const oldLayerData = state.layerData[idx];\n    const {layerData, layer} = calculateLayerData(newLayer, state, oldLayerData);\n    return updateStateWithLayerAndData(state, {layerData, layer, idx});\n  }\n\n  return updateStateWithLayerAndData(state, {layer: newLayer, idx});\n}\n\n/**\n * Update filter property\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').setFilterAnimationTimeUpdater}\n * @public\n */\nexport function setFilterAnimationTimeUpdater(state, action) {\n  return setFilterUpdater(state, action);\n}\n\n/**\n * Update filter animation window\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').setFilterAnimationWindowUpdater}\n * @public\n */\nexport function setFilterAnimationWindowUpdater(state, {id, animationWindow}) {\n  return {\n    ...state,\n    filters: state.filters.map(f =>\n      f.id === id\n        ? {\n            ...f,\n            animationWindow\n          }\n        : f\n    )\n  };\n}\n/**\n * Update filter property\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').setFilterUpdater}\n * @public\n */\nexport function setFilterUpdater(state, action) {\n  const {idx, prop, value, valueIndex = 0} = action;\n  const oldFilter = state.filters[idx];\n\n  if (!oldFilter) {\n    Console.error(`filters.${idx} is undefined`);\n    return state;\n  }\n  let newFilter = set([prop], value, oldFilter);\n  let newState = state;\n\n  const {dataId} = newFilter;\n\n  // Ensuring backward compatibility\n  let datasetIds = toArray(dataId);\n\n  switch (prop) {\n    // TODO: Next PR for UI if we update dataId, we need to consider two cases:\n    // 1. dataId is empty: create a default filter\n    // 2. Add a new dataset id\n    case FILTER_UPDATER_PROPS.dataId:\n      // if trying to update filter dataId. create an empty new filter\n      newFilter = updateFilterDataId(dataId);\n      break;\n\n    case FILTER_UPDATER_PROPS.name:\n      // we are supporting the current functionality\n      // TODO: Next PR for UI filter name will only update filter name but it won't have side effects\n      // we are gonna use pair of datasets and fieldIdx to update the filter\n      const datasetId = newFilter.dataId[valueIndex];\n      const {filter: updatedFilter, dataset: newDataset} = applyFilterFieldName(\n        newFilter,\n        state.datasets[datasetId],\n        value,\n        valueIndex,\n        {mergeDomain: false}\n      );\n      if (!updatedFilter) {\n        return state;\n      }\n\n      newFilter = updatedFilter;\n\n      if (newFilter.gpu) {\n        newFilter = setFilterGpuMode(newFilter, state.filters);\n        newFilter = assignGpuChannel(newFilter, state.filters);\n      }\n\n      newState = set(['datasets', datasetId], newDataset, state);\n\n      // only filter the current dataset\n      break;\n    case FILTER_UPDATER_PROPS.layerId:\n      // We need to update only datasetId/s if we have added/removed layers\n      // - check for layerId changes (XOR works because of string values)\n      // if no differences between layerIds, don't do any filtering\n      // @ts-ignore\n      const layerIdDifference = xor(newFilter.layerId, oldFilter.layerId);\n\n      const layerDataIds = uniq(\n        layerIdDifference\n          .map(lid =>\n            get(\n              state.layers.find(l => l.id === lid),\n              ['config', 'dataId']\n            )\n          )\n          .filter(d => d)\n      );\n\n      // only filter datasetsIds\n      datasetIds = layerDataIds;\n\n      // Update newFilter dataIds\n      const newDataIds = uniq(\n        newFilter.layerId\n          .map(lid =>\n            get(\n              state.layers.find(l => l.id === lid),\n              ['config', 'dataId']\n            )\n          )\n          .filter(d => d)\n      );\n\n      newFilter = {\n        ...newFilter,\n        dataId: newDataIds\n      };\n\n      break;\n    default:\n      break;\n  }\n\n  const enlargedFilter = state.filters.find(f => f.enlarged);\n\n  if (enlargedFilter && enlargedFilter.id !== newFilter.id) {\n    // there should be only one enlarged filter\n    newFilter.enlarged = false;\n  }\n\n  // save new filters to newState\n  newState = set(['filters', idx], newFilter, newState);\n\n  // if we are currently setting a prop that only requires to filter the current\n  // dataset we will pass only the current dataset to applyFiltersToDatasets and\n  // updateAllLayerDomainData otherwise we pass the all list of datasets as defined in dataId\n  const datasetIdsToFilter = LIMITED_FILTER_EFFECT_PROPS[prop]\n    ? [datasetIds[valueIndex]]\n    : datasetIds;\n\n  // filter data\n  const filteredDatasets = applyFiltersToDatasets(\n    datasetIdsToFilter,\n    newState.datasets,\n    newState.filters,\n    newState.layers\n  );\n\n  newState = set(['datasets'], filteredDatasets, newState);\n  // dataId is an array\n  // pass only the dataset we need to update\n  newState = updateAllLayerDomainData(newState, datasetIdsToFilter, newFilter);\n\n  return newState;\n}\n\n/**\n * Set the property of a filter plot\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').setFilterPlotUpdater}\n * @public\n */\nexport const setFilterPlotUpdater = (state, {idx, newProp, valueIndex = 0}) => {\n  let newFilter = {...state.filters[idx], ...newProp};\n  const prop = Object.keys(newProp)[0];\n  if (prop === 'yAxis') {\n    const plotType = getDefaultFilterPlotType(newFilter);\n    // TODO: plot is not supported in multi dataset filter for now\n    if (plotType) {\n      newFilter = {\n        ...newFilter,\n        ...getFilterPlot({...newFilter, plotType}, state.datasets[newFilter.dataId[valueIndex]]),\n        plotType\n      };\n    }\n  }\n\n  return {\n    ...state,\n    filters: state.filters.map((f, i) => (i === idx ? newFilter : f))\n  };\n};\n\n/**\n * Add a new filter\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').addFilterUpdater}\n * @public\n */\nexport const addFilterUpdater = (state, action) =>\n  !action.dataId\n    ? state\n    : {\n        ...state,\n        filters: [...state.filters, getDefaultFilter(action.dataId)]\n      };\n\n/**\n * Set layer color palette ui state\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').layerColorUIChangeUpdater}\n */\nexport const layerColorUIChangeUpdater = (state, {oldLayer, prop, newConfig}) => {\n  const oldVixConfig = oldLayer.config.visConfig[prop];\n  const newLayer = oldLayer.updateLayerColorUI(prop, newConfig);\n  const newVisConfig = newLayer.config.visConfig[prop];\n  if (oldVixConfig !== newVisConfig) {\n    return layerVisConfigChangeUpdater(state, {\n      oldLayer,\n      newVisConfig: {\n        [prop]: newVisConfig\n      }\n    });\n  }\n  return {\n    ...state,\n    layers: state.layers.map(l => (l.id === oldLayer.id ? newLayer : l))\n  };\n};\n\n/**\n * Start and end filter animation\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').toggleFilterAnimationUpdater}\n * @public\n */\nexport const toggleFilterAnimationUpdater = (state, action) => ({\n  ...state,\n  filters: state.filters.map((f, i) => (i === action.idx ? {...f, isAnimating: !f.isAnimating} : f))\n});\n\n/**\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').toggleLayerAnimationUpdater}\n * @public\n */\nexport const toggleLayerAnimationUpdater = state => ({\n  ...state,\n  animationConfig: {\n    ...state.animationConfig,\n    isAnimating: !state.animationConfig.isAnimating\n  }\n});\n\n/**\n * Hide and show layer animation control\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').toggleLayerAnimationControlUpdater}\n * @public\n */\nexport const toggleLayerAnimationControlUpdater = state => ({\n  ...state,\n  animationConfig: {\n    ...state.animationConfig,\n    hideControl: !state.animationConfig.hideControl\n  }\n});\n\n/**\n * Change filter animation speed\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').updateFilterAnimationSpeedUpdater}\n * @public\n */\nexport const updateFilterAnimationSpeedUpdater = (state, action) => ({\n  ...state,\n  filters: state.filters.map((f, i) => (i === action.idx ? {...f, speed: action.speed} : f))\n});\n\n/**\n * Reset animation config current time to a specified value\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').setLayerAnimationTimeUpdater}\n * @public\n *\n */\nexport const setLayerAnimationTimeUpdater = (state, {value}) => ({\n  ...state,\n  animationConfig: {\n    ...state.animationConfig,\n    currentTime: value\n  }\n});\n\n/**\n * Update animation speed with the vertical speed slider\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').updateLayerAnimationSpeedUpdater}\n * @public\n *\n */\nexport const updateLayerAnimationSpeedUpdater = (state, {speed}) => {\n  return {\n    ...state,\n    animationConfig: {\n      ...state.animationConfig,\n      speed\n    }\n  };\n};\n\n/**\n * Show larger time filter at bottom for time playback (apply to time filter only)\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').enlargeFilterUpdater}\n * @public\n */\nexport const enlargeFilterUpdater = (state, action) => {\n  return {\n    ...state,\n    filters: state.filters.map((f, i) =>\n      i === action.idx\n        ? {\n            ...f,\n            enlarged: !f.enlarged\n          }\n        : f\n    )\n  };\n};\n\n/**\n * Toggles filter feature visibility\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').toggleFilterFeatureUpdater}\n */\nexport const toggleFilterFeatureUpdater = (state, action) => {\n  const filter = state.filters[action.idx];\n  const isVisible = get(filter, ['value', 'properties', 'isVisible']);\n  const newFilter = {\n    ...filter,\n    value: featureToFilterValue(filter.value, filter.id, {\n      isVisible: !isVisible\n    })\n  };\n\n  return {\n    ...state,\n    filters: Object.assign([...state.filters], {[action.idx]: newFilter})\n  };\n};\n\n/**\n * Remove a filter\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').removeFilterUpdater}\n * @public\n */\nexport const removeFilterUpdater = (state, action) => {\n  const {idx} = action;\n  const {dataId, id} = state.filters[idx];\n\n  const newFilters = [\n    ...state.filters.slice(0, idx),\n    ...state.filters.slice(idx + 1, state.filters.length)\n  ];\n\n  const filteredDatasets = applyFiltersToDatasets(dataId, state.datasets, newFilters, state.layers);\n  const newEditor =\n    getFilterIdInFeature(state.editor.selectedFeature) === id\n      ? {\n          ...state.editor,\n          selectedFeature: null\n        }\n      : state.editor;\n\n  let newState = set(['filters'], newFilters, state);\n  newState = set(['datasets'], filteredDatasets, newState);\n  newState = set(['editor'], newEditor, newState);\n\n  return updateAllLayerDomainData(newState, dataId, undefined);\n};\n\n/**\n * Add a new layer\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').addLayerUpdater}\n * @public\n */\nexport const addLayerUpdater = (state, action) => {\n  let newLayer;\n  let newLayerData;\n  if (action.config) {\n    newLayer = createLayerFromConfig(state, action.config);\n    if (!newLayer) {\n      Console.warn(\n        'Failed to create layer from config, it usually means the config is not be in correct format',\n        action.config\n      );\n      return state;\n    }\n\n    const result = calculateLayerData(newLayer, state);\n    newLayer = result.layer;\n    newLayerData = result.layerData;\n  } else {\n    // create an empty layer with the first available dataset\n    const defaultDataset = Object.keys(state.datasets)[0];\n    newLayer = new Layer({\n      isVisible: true,\n      isConfigActive: true,\n      dataId: defaultDataset\n    });\n    newLayerData = {};\n  }\n  return {\n    ...state,\n    layers: [...state.layers, newLayer],\n    layerData: [...state.layerData, newLayerData],\n    layerOrder: [...state.layerOrder, state.layerOrder.length],\n    splitMaps: addNewLayersToSplitMap(state.splitMaps, newLayer)\n  };\n};\n\n/**\n * remove layer\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').removeLayerUpdater}\n * @public\n */\nexport const removeLayerUpdater = (state, {idx}) => {\n  const {layers, layerData, clicked, hoverInfo} = state;\n  const layerToRemove = state.layers[idx];\n  const newMaps = removeLayerFromSplitMaps(state.splitMaps, layerToRemove);\n\n  const newState = {\n    ...state,\n    layers: [...layers.slice(0, idx), ...layers.slice(idx + 1, layers.length)],\n    layerData: [...layerData.slice(0, idx), ...layerData.slice(idx + 1, layerData.length)],\n    layerOrder: state.layerOrder.filter(i => i !== idx).map(pid => (pid > idx ? pid - 1 : pid)),\n    clicked: layerToRemove.isLayerHovered(clicked) ? undefined : clicked,\n    hoverInfo: layerToRemove.isLayerHovered(hoverInfo) ? undefined : hoverInfo,\n    splitMaps: newMaps\n    // TODO: update filters, create helper to remove layer form filter (remove layerid and dataid) if mapped\n  };\n\n  return updateAnimationDomain(newState);\n};\n\n/**\n * duplicate layer\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').duplicateLayerUpdater}\n * @public\n */\nexport const duplicateLayerUpdater = (state, {idx}) => {\n  const {layers} = state;\n  const original = state.layers[idx];\n  const originalLayerOrderIdx = state.layerOrder.findIndex(i => i === idx);\n\n  if (!original) {\n    Console.warn(`layer.${idx} is undefined`);\n    return state;\n  }\n  let newLabel = `Copy of ${original.config.label}`;\n  let postfix = 0;\n  // eslint-disable-next-line no-loop-func\n  while (layers.find(l => l.config.label === newLabel)) {\n    newLabel = `Copy of ${original.config.label} ${++postfix}`;\n  }\n\n  // collect layer config from original\n  const loadedLayer = serializeLayer(original);\n\n  // assign new id and label to copied layer\n  if (!loadedLayer.config) {\n    return state;\n  }\n  loadedLayer.config.label = newLabel;\n  loadedLayer.id = generateHashId(LAYER_ID_LENGTH);\n\n  // add layer to state\n  let nextState = addLayerUpdater(state, {config: loadedLayer});\n\n  // new added layer are at the end, move it to be on top of original layer\n  const newLayerOrderIdx = nextState.layerOrder.length - 1;\n  const newLayerOrder = arrayInsert(\n    nextState.layerOrder.slice(0, newLayerOrderIdx),\n    originalLayerOrderIdx,\n    newLayerOrderIdx\n  );\n\n  nextState = {\n    ...nextState,\n    layerOrder: newLayerOrder\n  };\n\n  return updateAnimationDomain(nextState);\n};\n\n/**\n * Reorder layer\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').reorderLayerUpdater}\n * @public\n */\nexport const reorderLayerUpdater = (state, {order}) => ({\n  ...state,\n  layerOrder: order\n});\n\n/**\n * Remove a dataset and all layers, filters, tooltip configs that based on it\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').removeDatasetUpdater}\n * @public\n */\nexport const removeDatasetUpdater = (state, action) => {\n  // extract dataset key\n  const {dataId: datasetKey} = action;\n  const {datasets} = state;\n\n  // check if dataset is present\n  if (!datasets[datasetKey]) {\n    return state;\n  }\n\n  /* eslint-disable no-unused-vars */\n  const {\n    layers,\n    datasets: {[datasetKey]: dataset, ...newDatasets}\n  } = state;\n  /* eslint-enable no-unused-vars */\n\n  const indexes = layers.reduce((listOfIndexes, layer, index) => {\n    if (layer.config.dataId === datasetKey) {\n      // @ts-ignore\n      listOfIndexes.push(index);\n    }\n    return listOfIndexes;\n  }, []);\n\n  // remove layers and datasets\n  const {newState} = indexes.reduce(\n    ({newState: currentState, indexCounter}, idx) => {\n      const currentIndex = idx - indexCounter;\n      currentState = removeLayerUpdater(currentState, {idx: currentIndex});\n      indexCounter++;\n      return {newState: currentState, indexCounter};\n    },\n    {newState: {...state, datasets: newDatasets}, indexCounter: 0}\n  );\n\n  // remove filters\n  const filters = state.filters.filter(filter => !filter.dataId.includes(datasetKey));\n\n  // update interactionConfig\n  let {interactionConfig} = state;\n  const {tooltip} = interactionConfig;\n  if (tooltip) {\n    const {config} = tooltip;\n    /* eslint-disable no-unused-vars */\n    const {[datasetKey]: fields, ...fieldsToShow} = config.fieldsToShow;\n    /* eslint-enable no-unused-vars */\n    interactionConfig = {\n      ...interactionConfig,\n      tooltip: {...tooltip, config: {...config, fieldsToShow}}\n    };\n  }\n\n  return {...newState, filters, interactionConfig};\n};\n\n/**\n * update layer blending mode\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').updateLayerBlendingUpdater}\n * @public\n */\nexport const updateLayerBlendingUpdater = (state, action) => ({\n  ...state,\n  layerBlending: action.mode\n});\n\n/**\n * Display dataset table in a modal\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').showDatasetTableUpdater}\n * @public\n */\nexport const showDatasetTableUpdater = (state, action) => {\n  return {\n    ...state,\n    editingDataset: action.dataId\n  };\n};\n\n/**\n * reset visState to initial State\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').resetMapConfigUpdater}\n * @public\n */\nexport const resetMapConfigUpdater = state => ({\n  ...INITIAL_VIS_STATE,\n  ...state.initialState,\n  initialState: state.initialState\n});\n\n/**\n * Propagate `visState` reducer with a new configuration. Current config will be override.\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').receiveMapConfigUpdater}\n * @public\n */\nexport const receiveMapConfigUpdater = (state, {payload: {config = {}, options = {}}}) => {\n  if (!config.visState) {\n    return state;\n  }\n\n  const {keepExistingConfig} = options;\n\n  // reset config if keepExistingConfig is falsy\n  let mergedState = !keepExistingConfig ? resetMapConfigUpdater(state) : state;\n  for (const merger of state.mergers) {\n    if (isValidMerger(merger) && config.visState[merger.prop]) {\n      mergedState = merger.merge(mergedState, config.visState[merger.prop], true);\n    }\n  }\n\n  return mergedState;\n};\n\n/**\n * Trigger layer hover event with hovered object\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').layerHoverUpdater}\n * @public\n */\nexport const layerHoverUpdater = (state, action) => ({\n  ...state,\n  hoverInfo: action.info\n});\n\n/* eslint-enable max-statements */\n\n/**\n * Update `interactionConfig`\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').interactionConfigChangeUpdater}\n * @public\n */\nexport function interactionConfigChangeUpdater(state, action) {\n  const {config} = action;\n\n  const interactionConfig = {\n    ...state.interactionConfig,\n    ...{[config.id]: config}\n  };\n\n  // Don't enable tooltip and brush at the same time\n  // but coordinates can be shown at all time\n  const contradict = ['brush', 'tooltip'];\n\n  if (\n    contradict.includes(config.id) &&\n    config.enabled &&\n    !state.interactionConfig[config.id].enabled\n  ) {\n    // only enable one interaction at a time\n    contradict.forEach(k => {\n      if (k !== config.id) {\n        interactionConfig[k] = {...interactionConfig[k], enabled: false};\n      }\n    });\n  }\n\n  const newState = {\n    ...state,\n    interactionConfig\n  };\n\n  if (config.id === 'geocoder' && !config.enabled) {\n    return removeDatasetUpdater(newState, {dataId: 'geocoder_dataset'});\n  }\n\n  return newState;\n}\n\n/**\n * Trigger layer click event with clicked object\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').layerClickUpdater}\n * @public\n */\nexport const layerClickUpdater = (state, action) => ({\n  ...state,\n  mousePos: state.interactionConfig.coordinate.enabled\n    ? {\n        ...state.mousePos,\n        pinned: state.mousePos.pinned ? null : cloneDeep(state.mousePos)\n      }\n    : state.mousePos,\n  clicked: action.info && action.info.picked ? action.info : null\n});\n\n/**\n * Trigger map click event, unselect clicked object\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').mapClickUpdater}\n * @public\n */\nexport const mapClickUpdater = state => {\n  return {\n    ...state,\n    clicked: null\n  };\n};\n\n/**\n * Trigger map move event\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').mouseMoveUpdater}\n * @public\n */\nexport const mouseMoveUpdater = (state, {evt}) => {\n  if (Object.values(state.interactionConfig).some(config => config.enabled)) {\n    return {\n      ...state,\n      mousePos: {\n        ...state.mousePos,\n        mousePosition: [...evt.point],\n        coordinate: [...evt.lngLat]\n      }\n    };\n  }\n\n  return state;\n};\n/**\n * Toggle visibility of a layer for a split map\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').toggleSplitMapUpdater}\n * @public\n */\nexport const toggleSplitMapUpdater = (state, action) =>\n  state.splitMaps && state.splitMaps.length === 0\n    ? {\n        ...state,\n        // maybe we should use an array to store state for a single map as well\n        // if current maps length is equal to 0 it means that we are about to split the view\n        splitMaps: computeSplitMapLayers(state.layers)\n      }\n    : closeSpecificMapAtIndex(state, action);\n\n/**\n * Toggle visibility of a layer in a split map\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').toggleLayerForMapUpdater}\n * @public\n */\nexport const toggleLayerForMapUpdater = (state, {mapIndex, layerId}) => {\n  const {splitMaps} = state;\n\n  return {\n    ...state,\n    splitMaps: splitMaps.map((sm, i) =>\n      i === mapIndex\n        ? {\n            ...splitMaps[i],\n            layers: {\n              ...splitMaps[i].layers,\n              // if layerId not in layers, set it to visible\n              [layerId]: !splitMaps[i].layers[layerId]\n            }\n          }\n        : sm\n    )\n  };\n};\n\n/**\n * Add new dataset to `visState`, with option to load a map config along with the datasets\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').updateVisDataUpdater}\n * @public\n */\n/* eslint-disable max-statements */\n// eslint-disable-next-line complexity\nexport const updateVisDataUpdater = (state, action) => {\n  // datasets can be a single data entries or an array of multiple data entries\n  const {config, options} = action;\n  const datasets = toArray(action.datasets);\n\n  const newDataEntries = datasets.reduce(\n    (accu, {info = {}, ...rest} = {}) => ({\n      ...accu,\n      ...(createNewDataEntry({info, ...rest}, state.datasets) || {})\n    }),\n    {}\n  );\n\n  const dataEmpty = Object.keys(newDataEntries).length < 1;\n\n  // apply config if passed from action\n  const previousState = config\n    ? receiveMapConfigUpdater(state, {\n        payload: {config, options}\n      })\n    : state;\n\n  let mergedState = {\n    ...previousState,\n    datasets: {\n      ...previousState.datasets,\n      ...newDataEntries\n    }\n  };\n\n  // merge state with config to be merged\n  for (const merger of mergedState.mergers) {\n    if (isValidMerger(merger) && merger.toMergeProp && mergedState[merger.toMergeProp]) {\n      const toMerge = mergedState[merger.toMergeProp];\n      mergedState[merger.toMergeProp] = INITIAL_VIS_STATE[merger.toMergeProp];\n      mergedState = merger.merge(mergedState, toMerge);\n    }\n  }\n\n  let newLayers = !dataEmpty\n    ? mergedState.layers.filter(l => l.config.dataId && l.config.dataId in newDataEntries)\n    : [];\n\n  if (!newLayers.length && (options || {}).autoCreateLayers !== false) {\n    // no layer merged, find defaults\n    const result = addDefaultLayers(mergedState, newDataEntries);\n    mergedState = result.state;\n    newLayers = result.newLayers;\n  }\n\n  if (mergedState.splitMaps.length) {\n    // if map is split, add new layers to splitMaps\n    newLayers = mergedState.layers.filter(\n      l => l.config.dataId && l.config.dataId in newDataEntries\n    );\n    mergedState = {\n      ...mergedState,\n      splitMaps: addNewLayersToSplitMap(mergedState.splitMaps, newLayers)\n    };\n  }\n\n  // if no tooltips merged add default tooltips\n  Object.keys(newDataEntries).forEach(dataId => {\n    const tooltipFields = mergedState.interactionConfig.tooltip.config.fieldsToShow[dataId];\n    if (!Array.isArray(tooltipFields) || !tooltipFields.length) {\n      mergedState = addDefaultTooltips(mergedState, newDataEntries[dataId]);\n    }\n  });\n\n  let updatedState = updateAllLayerDomainData(\n    mergedState,\n    dataEmpty ? Object.keys(mergedState.datasets) : Object.keys(newDataEntries),\n    undefined\n  );\n\n  // register layer animation domain,\n  // need to be called after layer data is calculated\n  updatedState = updateAnimationDomain(updatedState);\n\n  return updatedState;\n};\n/* eslint-enable max-statements */\n\n/**\n * Rename an existing dataset in `visState`\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').renameDatasetUpdater}\n * @public\n */\nexport function renameDatasetUpdater(state, action) {\n  const {dataId, label} = action;\n  const {datasets} = state;\n  const existing = datasets[dataId];\n  // @ts-ignore\n  return existing\n    ? {\n        ...state,\n        datasets: {\n          ...datasets,\n          [dataId]: {\n            ...existing,\n            label\n          }\n        }\n      }\n    : // No-op if the dataset doesn't exist\n      state;\n}\n\n/**\n * When a user clicks on the specific map closing icon\n * the application will close the selected map\n * and will merge the remaining one with the global state\n * TODO: i think in the future this action should be called merge map layers with global settings\n * @param {Object} state `visState`\n * @param {Object} action action\n * @returns {Object} nextState\n */\nexport function closeSpecificMapAtIndex(state, action) {\n  // retrieve layers meta data from the remaining map that we need to keep\n  const indexToRetrieve = 1 - action.payload;\n  const mapLayers = state.splitMaps[indexToRetrieve].layers;\n  const {layers} = state;\n\n  // update layer visibility\n  const newLayers = layers.map(layer =>\n    !mapLayers[layer.id] && layer.config.isVisible\n      ? layer.updateLayerConfig({\n          // if layer.id is not in mapLayers, it should be inVisible\n          isVisible: false\n        })\n      : layer\n  );\n\n  // delete map\n  return {\n    ...state,\n    layers: newLayers,\n    splitMaps: []\n  };\n}\n\n/**\n * Trigger file loading dispatch `addDataToMap` if succeed, or `loadFilesErr` if failed\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').loadFilesUpdater}\n * @public\n */\nexport const loadFilesUpdater = (state, action) => {\n  const {files, onFinish = loadFilesSuccess} = action;\n  if (!files.length) {\n    return state;\n  }\n\n  const fileLoadingProgress = Array.from(files).reduce(\n    (accu, f, i) => merge_(initialFileLoadingProgress(f, i))(accu),\n    {}\n  );\n\n  const fileLoading = {\n    fileCache: [],\n    filesToLoad: files,\n    onFinish\n  };\n\n  const nextState = merge_({fileLoadingProgress, fileLoading})(state);\n\n  return loadNextFileUpdater(nextState);\n};\n\n/**\n * Sucessfully loaded one file, move on to the next one\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').loadFileStepSuccessUpdater}\n * @public\n */\nexport function loadFileStepSuccessUpdater(state, action) {\n  if (!state.fileLoading) {\n    return state;\n  }\n  const {fileName, fileCache} = action;\n  const {filesToLoad, onFinish} = state.fileLoading;\n  const stateWithProgress = updateFileLoadingProgressUpdater(state, {\n    fileName,\n    progress: {percent: 1, message: 'Done'}\n  });\n\n  // save processed file to fileCache\n  const stateWithCache = pick_('fileLoading')(merge_({fileCache}))(stateWithProgress);\n\n  return withTask(\n    stateWithCache,\n    DELAY_TASK(200).map(filesToLoad.length ? loadNextFile : () => onFinish(fileCache))\n  );\n}\n\n// withTask<T>(state: T, task: any): T\n\n/**\n *\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').loadNextFileUpdater}\n * @public\n */\nexport function loadNextFileUpdater(state) {\n  if (!state.fileLoading) {\n    return state;\n  }\n  const {filesToLoad} = state.fileLoading;\n  const [file, ...remainingFilesToLoad] = filesToLoad;\n\n  // save filesToLoad to state\n  const nextState = pick_('fileLoading')(merge_({filesToLoad: remainingFilesToLoad}))(state);\n\n  const stateWithProgress = updateFileLoadingProgressUpdater(nextState, {\n    fileName: file.name,\n    progress: {percent: 0, message: 'loading...'}\n  });\n\n  const {loaders, loadOptions} = state;\n  return withTask(\n    stateWithProgress,\n    makeLoadFileTask(file, nextState.fileLoading.fileCache, loaders, loadOptions)\n  );\n}\n\nexport function makeLoadFileTask(file, fileCache, loaders = [], loadOptions = {}) {\n  return LOAD_FILE_TASK({file, fileCache, loaders, loadOptions}).bimap(\n    // prettier ignore\n    // success\n    gen =>\n      nextFileBatch({\n        gen,\n        fileName: file.name,\n        onFinish: result =>\n          processFileContent({\n            content: result,\n            fileCache\n          })\n      }),\n\n    // error\n    err => loadFilesErr(file.name, err)\n  );\n}\n\n/**\n *\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').processFileContentUpdater}\n * @public\n */\nexport function processFileContentUpdater(state, action) {\n  const {content, fileCache} = action.payload;\n\n  const stateWithProgress = updateFileLoadingProgressUpdater(state, {\n    fileName: content.fileName,\n    progress: {percent: 1, message: 'processing...'}\n  });\n\n  return withTask(\n    stateWithProgress,\n    PROCESS_FILE_DATA({content, fileCache}).bimap(\n      result => loadFileStepSuccess({fileName: content.fileName, fileCache: result}),\n      err => loadFilesErr(content.fileName, err)\n    )\n  );\n}\n\nexport function parseProgress(prevProgress = {}, progress) {\n  // This happens when receiving query metadata or other cases we don't\n  // have an update for the user.\n  if (!progress || !progress.percent) {\n    return {};\n  }\n\n  return {\n    percent: progress.percent\n  };\n}\n\n/**\n * gets called with payload = AsyncGenerator<???>\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').nextFileBatchUpdater}\n * @public\n */\nexport const nextFileBatchUpdater = (\n  state,\n  {payload: {gen, fileName, progress, accumulated, onFinish}}\n) => {\n  const stateWithProgress = updateFileLoadingProgressUpdater(state, {\n    fileName,\n    progress: parseProgress(state.fileLoadingProgress[fileName], progress)\n  });\n  return withTask(\n    stateWithProgress,\n    UNWRAP_TASK(gen.next()).bimap(\n      ({value, done}) => {\n        return done\n          ? onFinish(accumulated)\n          : nextFileBatch({\n              gen,\n              fileName,\n              progress: value.progress,\n              accumulated: value,\n              onFinish\n            });\n      },\n      err => loadFilesErr(fileName, err)\n    )\n  );\n};\n\n/**\n * Trigger loading file error\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').loadFilesErrUpdater}\n * @public\n */\nexport const loadFilesErrUpdater = (state, {error, fileName}) => {\n  // update ui with error message\n  Console.warn(error);\n  if (!state.fileLoading) {\n    return state;\n  }\n  const {filesToLoad, onFinish, fileCache} = state.fileLoading;\n\n  const nextState = updateFileLoadingProgressUpdater(state, {\n    fileName,\n    progress: {error}\n  });\n\n  // kick off next file or finish\n  return withTask(\n    nextState,\n    DELAY_TASK(200).map(filesToLoad.length ? loadNextFile : () => onFinish(fileCache))\n  );\n};\n\n/**\n * When select dataset for export, apply cpu filter to selected dataset\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').applyCPUFilterUpdater}\n * @public\n */\nexport const applyCPUFilterUpdater = (state, {dataId}) => {\n  // apply cpuFilter\n  const dataIds = toArray(dataId);\n\n  return dataIds.reduce((accu, id) => filterDatasetCPU(accu, id), state);\n};\n\n/**\n * User input to update the info of the map\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').setMapInfoUpdater}\n * @public\n */\nexport const setMapInfoUpdater = (state, action) => ({\n  ...state,\n  mapInfo: {\n    ...state.mapInfo,\n    ...action.info\n  }\n});\n/**\n * Helper function to update All layer domain and layer data of state\n * @type {typeof import('./vis-state-updaters').addDefaultLayers}\n */\nexport function addDefaultLayers(state, datasets) {\n  /** @type {Layer[]} */\n  const empty = [];\n  const defaultLayers = Object.values(datasets).reduce((accu, dataset) => {\n    const foundLayers = findDefaultLayer(dataset, state.layerClasses);\n    return foundLayers && foundLayers.length ? accu.concat(foundLayers) : accu;\n  }, empty);\n\n  return {\n    state: {\n      ...state,\n      layers: [...state.layers, ...defaultLayers],\n      layerOrder: [\n        // put new layers on top of old ones\n        ...defaultLayers.map((_, i) => state.layers.length + i),\n        ...state.layerOrder\n      ]\n    },\n    newLayers: defaultLayers\n  };\n}\n\n/**\n * helper function to find default tooltips\n * @param {Object} state\n * @param {Object} dataset\n * @returns {Object} nextState\n */\nexport function addDefaultTooltips(state, dataset) {\n  const tooltipFields = findFieldsToShow(dataset);\n  const merged = {\n    ...state.interactionConfig.tooltip.config.fieldsToShow,\n    ...tooltipFields\n  };\n\n  return set(['interactionConfig', 'tooltip', 'config', 'fieldsToShow'], merged, state);\n}\n\nexport function initialFileLoadingProgress(file, index) {\n  const fileName = file.name || `Untitled File ${index}`;\n  return {\n    [fileName]: {\n      // percent of current file\n      percent: 0,\n      message: '',\n      fileName,\n      error: null\n    }\n  };\n}\n\nexport function updateFileLoadingProgressUpdater(state, {fileName, progress}) {\n  return pick_('fileLoadingProgress')(pick_(fileName)(merge_(progress)))(state);\n}\n/**\n * Helper function to update layer domains for an array of datasets\n * @type {typeof import('./vis-state-updaters').updateAllLayerDomainData}\n */\nexport function updateAllLayerDomainData(state, dataId, updatedFilter) {\n  const dataIds = typeof dataId === 'string' ? [dataId] : dataId;\n  const newLayers = [];\n  const newLayerData = [];\n\n  state.layers.forEach((oldLayer, i) => {\n    if (oldLayer.config.dataId && dataIds.includes(oldLayer.config.dataId)) {\n      // No need to recalculate layer domain if filter has fixed domain\n      const newLayer =\n        updatedFilter && updatedFilter.fixedDomain\n          ? oldLayer\n          : oldLayer.updateLayerDomain(state.datasets, updatedFilter);\n\n      const {layerData, layer} = calculateLayerData(newLayer, state, state.layerData[i]);\n\n      newLayers.push(layer);\n      newLayerData.push(layerData);\n    } else {\n      newLayers.push(oldLayer);\n      newLayerData.push(state.layerData[i]);\n    }\n  });\n\n  const newState = {\n    ...state,\n    layers: newLayers,\n    layerData: newLayerData\n  };\n\n  return newState;\n}\n\nexport function updateAnimationDomain(state) {\n  // merge all animatable layer domain and update global config\n  const animatableLayers = state.layers.filter(\n    l =>\n      l.config.isVisible &&\n      l.config.animation &&\n      l.config.animation.enabled &&\n      Array.isArray(l.animationDomain)\n  );\n\n  if (!animatableLayers.length) {\n    return {\n      ...state,\n      animationConfig: {\n        ...state.animationConfig,\n        domain: null,\n        defaultTimeFormat: null\n      }\n    };\n  }\n\n  const mergedDomain = animatableLayers.reduce(\n    (accu, layer) => [\n      Math.min(accu[0], layer.animationDomain[0]),\n      Math.max(accu[1], layer.animationDomain[1])\n    ],\n    [Number(Infinity), -Infinity]\n  );\n  const defaultTimeFormat = getTimeWidgetTitleFormatter(mergedDomain);\n\n  return {\n    ...state,\n    animationConfig: {\n      ...state.animationConfig,\n      currentTime: isInRange(state.animationConfig.currentTime, mergedDomain)\n        ? state.animationConfig.currentTime\n        : mergedDomain[0],\n      domain: mergedDomain,\n      defaultTimeFormat\n    }\n  };\n}\n\n/**\n * Update the status of the editor\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').setEditorModeUpdater}\n */\nexport const setEditorModeUpdater = (state, {mode}) => ({\n  ...state,\n  editor: {\n    ...state.editor,\n    mode,\n    selectedFeature: null\n  }\n});\n\n// const featureToFilterValue = (feature) => ({...feature, id: feature.id});\n/**\n * Update editor features\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').setFeaturesUpdater}\n */\nexport function setFeaturesUpdater(state, {features = []}) {\n  const lastFeature = features.length && features[features.length - 1];\n\n  const newState = {\n    ...state,\n    editor: {\n      ...state.editor,\n      // only save none filter features to editor\n      features: features.filter(f => !getFilterIdInFeature(f)),\n      mode: lastFeature && lastFeature.properties.isClosed ? EDITOR_MODES.EDIT : state.editor.mode\n    }\n  };\n\n  // Retrieve existing feature\n  const {selectedFeature} = state.editor;\n\n  // If no feature is selected we can simply return since no operations\n  if (!selectedFeature) {\n    return newState;\n  }\n\n  // TODO: check if the feature has changed\n  const feature = features.find(f => f.id === selectedFeature.id);\n\n  // if feature is part of a filter\n  const filterId = feature && getFilterIdInFeature(feature);\n  if (filterId && feature) {\n    const featureValue = featureToFilterValue(feature, filterId);\n    const filterIdx = state.filters.findIndex(fil => fil.id === filterId);\n    return setFilterUpdater(newState, {\n      idx: filterIdx,\n      prop: 'value',\n      value: featureValue\n    });\n  }\n\n  return newState;\n}\n\n/**\n * Set the current selected feature\n * @memberof uiStateUpdaters\n * @type {typeof import('./vis-state-updaters').setSelectedFeatureUpdater}\n */\nexport const setSelectedFeatureUpdater = (state, {feature}) => ({\n  ...state,\n  editor: {\n    ...state.editor,\n    selectedFeature: feature\n  }\n});\n\n/**\n * Delete existing feature from filters\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').deleteFeatureUpdater}\n */\nexport function deleteFeatureUpdater(state, {feature}) {\n  if (!feature) {\n    return state;\n  }\n\n  const newState = {\n    ...state,\n    editor: {\n      ...state.editor,\n      selectedFeature: null\n    }\n  };\n\n  if (getFilterIdInFeature(feature)) {\n    const filterIdx = newState.filters.findIndex(f => f.id === getFilterIdInFeature(feature));\n\n    return filterIdx > -1 ? removeFilterUpdater(newState, {idx: filterIdx}) : newState;\n  }\n\n  // modify editor object\n  const newEditor = {\n    ...state.editor,\n    features: state.editor.features.filter(f => f.id !== feature.id),\n    selectedFeature: null\n  };\n\n  return {\n    ...state,\n    editor: newEditor\n  };\n}\n\n/**\n * Toggle feature as layer filter\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').setPolygonFilterLayerUpdater}\n */\nexport function setPolygonFilterLayerUpdater(state, payload) {\n  const {layer, feature} = payload;\n  const filterId = getFilterIdInFeature(feature);\n\n  // let newFilter = null;\n  let filterIdx;\n  let newLayerId = [layer.id];\n  let newState = state;\n  // If polygon filter already exists, we need to find out if the current layer is already included\n  if (filterId) {\n    filterIdx = state.filters.findIndex(f => f.id === filterId);\n\n    if (!state.filters[filterIdx]) {\n      // what if filter doesn't exist?... not possible.\n      // because features in the editor is passed in from filters and editors.\n      // but we will move this feature back to editor just in case\n      const noneFilterFeature = {\n        ...feature,\n        properties: {\n          ...feature.properties,\n          filterId: null\n        }\n      };\n\n      return {\n        ...state,\n        editor: {\n          ...state.editor,\n          features: [...state.editor.features, noneFilterFeature],\n          selectedFeature: noneFilterFeature\n        }\n      };\n    }\n    const filter = state.filters[filterIdx];\n    const {layerId = []} = filter;\n    const isLayerIncluded = layerId.includes(layer.id);\n\n    newLayerId = isLayerIncluded\n      ? // if layer is included, remove it\n        layerId.filter(l => l !== layer.id)\n      : [...layerId, layer.id];\n  } else {\n    // if we haven't create the polygon filter, create it\n    const newFilter = generatePolygonFilter([], feature);\n    filterIdx = state.filters.length;\n\n    // add feature, remove feature from eidtor\n    newState = {\n      ...state,\n      filters: [...state.filters, newFilter],\n      editor: {\n        ...state.editor,\n        features: state.editor.features.filter(f => f.id !== feature.id),\n        selectedFeature: newFilter.value\n      }\n    };\n  }\n\n  return setFilterUpdater(newState, {\n    idx: filterIdx,\n    prop: 'layerId',\n    value: newLayerId\n  });\n}\n\n/**\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').sortTableColumnUpdater}\n * @public\n */\nexport function sortTableColumnUpdater(state, {dataId, column, mode}) {\n  const dataset = state.datasets[dataId];\n  if (!dataset) {\n    return state;\n  }\n  let sortMode = mode;\n  if (!sortMode) {\n    const currentMode = get(dataset, ['sortColumn', column]);\n    // @ts-ignore - should be fixable in a TS file\n    sortMode = currentMode\n      ? Object.keys(SORT_ORDER).find(m => m !== currentMode)\n      : SORT_ORDER.ASCENDING;\n  }\n\n  const sorted = sortDatasetByColumn(dataset, column, sortMode);\n  return set(['datasets', dataId], sorted, state);\n}\n\n/**\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').pinTableColumnUpdater}\n * @public\n */\nexport function pinTableColumnUpdater(state, {dataId, column}) {\n  const dataset = state.datasets[dataId];\n  if (!dataset) {\n    return state;\n  }\n  const field = dataset.fields.find(f => f.name === column);\n  if (!field) {\n    return state;\n  }\n\n  let pinnedColumns;\n  if (Array.isArray(dataset.pinnedColumns) && dataset.pinnedColumns.includes(field.name)) {\n    // unpin it\n    pinnedColumns = dataset.pinnedColumns.filter(co => co !== field.name);\n  } else {\n    pinnedColumns = (dataset.pinnedColumns || []).concat(field.name);\n  }\n\n  return set(['datasets', dataId, 'pinnedColumns'], pinnedColumns, state);\n}\n\n/**\n * Copy column content as strings\n * @memberof visStateUpdaters\n * @type {typeof import('./vis-state-updaters').copyTableColumnUpdater}\n * @public\n */\nexport function copyTableColumnUpdater(state, {dataId, column}) {\n  const dataset = state.datasets[dataId];\n  if (!dataset) {\n    return state;\n  }\n  const fieldIdx = dataset.fields.findIndex(f => f.name === column);\n  if (fieldIdx < 0) {\n    return state;\n  }\n  const {type} = dataset.fields[fieldIdx];\n  const text = dataset.dataContainer\n    .map(row => parseFieldValue(row.valueAt(fieldIdx), type), true)\n    .join('\\n');\n\n  copy(text);\n\n  return state;\n}\n\n/**\n * Update editor\n * @type {typeof import('./vis-state-updaters').toggleEditorVisibilityUpdater}\n */\nexport function toggleEditorVisibilityUpdater(state) {\n  return {\n    ...state,\n    editor: {\n      ...state.editor,\n      visible: !state.editor.visible\n    }\n  };\n}\n\nexport function setFilterAnimationTimeConfigUpdater(state, {idx, config}) {\n  const oldFilter = state.filters[idx];\n  if (!oldFilter) {\n    Console.error(`filters.${idx} is undefined`);\n    return state;\n  }\n  if (oldFilter.type !== FILTER_TYPES.timeRange) {\n    Console.error(\n      `setFilterAnimationTimeConfig can only be called to update a time filter. check filter.type === 'timeRange'`\n    );\n    return state;\n  }\n\n  const updates = checkTimeConfigArgs(config);\n\n  return pick_('filters')(swap_(merge_(updates)(oldFilter)))(state);\n}\n\nfunction checkTimeConfigArgs(config) {\n  const allowed = ['timeFormat', 'timezone'];\n  return Object.keys(config).reduce((accu, prop) => {\n    if (!allowed.includes(prop)) {\n      Console.error(\n        `setLayerAnimationTimeConfig takes timeFormat and/or timezone as options, found ${prop}`\n      );\n      return accu;\n    }\n\n    // here we are NOT checking if timezone or timeFormat input is valid\n    accu[prop] = config[prop];\n    return accu;\n  }, {});\n}\n/**\n * Update editor\n * @type {typeof import('./vis-state-updaters').setLayerAnimationTimeConfigUpdater}\n */\nexport function setLayerAnimationTimeConfigUpdater(state, {config}) {\n  if (!config) {\n    return state;\n  }\n  const updates = checkTimeConfigArgs(config);\n  return pick_('animationConfig')(merge_(updates))(state);\n}\n"]},"metadata":{},"sourceType":"script"}