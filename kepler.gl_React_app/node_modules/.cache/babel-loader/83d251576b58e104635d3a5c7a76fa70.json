{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { assert, validateLoaderVersion } from '@loaders.gl/loader-utils';\nimport { isLoaderObject } from '../loader-utils/normalize-loader';\nimport { normalizeOptions } from '../loader-utils/option-utils';\nimport { getArrayBufferOrStringFromData } from '../loader-utils/get-data';\nimport { getLoaders, getLoaderContext } from '../loader-utils/context-utils';\nimport parseWithWorker, { canParseWithWorker } from '../loader-utils/parse-with-worker';\nimport { getResourceUrlAndType } from '../utils/resource-utils';\nimport { selectLoader } from './select-loader';\nexport function parse(_x, _x2, _x3, _x4) {\n  return _parse.apply(this, arguments);\n}\nfunction _parse() {\n  _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, loaders, options, context) {\n    var _getResourceUrlAndTyp, url, candidateLoaders, loader;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            assert(!context || typeof context !== 'string', 'parse no longer accepts final url');\n            if (loaders && !Array.isArray(loaders) && !isLoaderObject(loaders)) {\n              context = options;\n              options = loaders;\n              loaders = null;\n            }\n            _context.next = 4;\n            return data;\n          case 4:\n            data = _context.sent;\n            options = options || {};\n            _getResourceUrlAndTyp = getResourceUrlAndType(data), url = _getResourceUrlAndTyp.url;\n            candidateLoaders = getLoaders(loaders, context);\n            _context.next = 10;\n            return selectLoader(data, candidateLoaders, options);\n          case 10:\n            loader = _context.sent;\n            if (loader) {\n              _context.next = 13;\n              break;\n            }\n            return _context.abrupt(\"return\", null);\n          case 13:\n            options = normalizeOptions(options, loader, candidateLoaders, url);\n            context = getLoaderContext({\n              url: url,\n              parse: parse,\n              loaders: candidateLoaders\n            }, options, context);\n            _context.next = 17;\n            return parseWithLoader(loader, data, options, context);\n          case 17:\n            return _context.abrupt(\"return\", _context.sent);\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parse.apply(this, arguments);\n}\nfunction parseWithLoader(_x5, _x6, _x7, _x8) {\n  return _parseWithLoader.apply(this, arguments);\n}\nfunction _parseWithLoader() {\n  _parseWithLoader = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(loader, data, options, context) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            validateLoaderVersion(loader);\n            _context2.next = 3;\n            return getArrayBufferOrStringFromData(data, loader);\n          case 3:\n            data = _context2.sent;\n            if (!(loader.parseTextSync && typeof data === 'string')) {\n              _context2.next = 7;\n              break;\n            }\n            options.dataType = 'text';\n            return _context2.abrupt(\"return\", loader.parseTextSync(data, options, context, loader));\n          case 7:\n            if (!canParseWithWorker(loader, data, options, context)) {\n              _context2.next = 11;\n              break;\n            }\n            _context2.next = 10;\n            return parseWithWorker(loader, data, options, context);\n          case 10:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 11:\n            if (!(loader.parseText && typeof data === 'string')) {\n              _context2.next = 15;\n              break;\n            }\n            _context2.next = 14;\n            return loader.parseText(data, options, context, loader);\n          case 14:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 15:\n            if (!loader.parse) {\n              _context2.next = 19;\n              break;\n            }\n            _context2.next = 18;\n            return loader.parse(data, options, context, loader);\n          case 18:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 19:\n            assert(!loader.parseSync);\n            return _context2.abrupt(\"return\", assert(false));\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _parseWithLoader.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/api/parse.js"],"names":["assert","validateLoaderVersion","isLoaderObject","normalizeOptions","getArrayBufferOrStringFromData","getLoaders","getLoaderContext","parseWithWorker","canParseWithWorker","getResourceUrlAndType","selectLoader","parse","data","loaders","options","context","Array","isArray","url","candidateLoaders","loader","parseWithLoader","parseTextSync","dataType","parseText","parseSync"],"mappings":"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","sourcesContent":["import {assert, validateLoaderVersion} from '@loaders.gl/loader-utils';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {normalizeOptions} from '../loader-utils/option-utils';\nimport {getArrayBufferOrStringFromData} from '../loader-utils/get-data';\nimport {getLoaders, getLoaderContext} from '../loader-utils/context-utils';\nimport parseWithWorker, {canParseWithWorker} from '../loader-utils/parse-with-worker';\nimport {getResourceUrlAndType} from '../utils/resource-utils';\nimport {selectLoader} from './select-loader';\n\nexport async function parse(data, loaders, options, context) {\n  assert(!context || typeof context !== 'string', 'parse no longer accepts final url');\n\n  // Signature: parse(data, options, context | url)\n  // Uses registered loaders\n  if (loaders && !Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  data = await data; // Resolve any promise\n  options = options || {};\n\n  // Extract a url for auto detection\n  const {url} = getResourceUrlAndType(data);\n\n  // Chooses a loader (and normalizes it)\n  // Also use any loaders in the context, new loaders take priority\n  const candidateLoaders = getLoaders(loaders, context);\n  const loader = await selectLoader(data, candidateLoaders, options);\n  // Note: if nothrow option was set, it is possible that no loader was found, if so just return null\n  if (!loader) {\n    return null;\n  }\n\n  // Normalize options\n  options = normalizeOptions(options, loader, candidateLoaders, url);\n\n  // Get a context (if already present, will be unchanged)\n  context = getLoaderContext({url, parse, loaders: candidateLoaders}, options, context);\n\n  return await parseWithLoader(loader, data, options, context);\n}\n\n// TODO: support progress and abort\n// TODO - should accept loader.parseAsyncIterator and concatenate.\nasync function parseWithLoader(loader, data, options, context) {\n  validateLoaderVersion(loader);\n\n  data = await getArrayBufferOrStringFromData(data, loader);\n\n  // First check for synchronous text parser, wrap results in promises\n  if (loader.parseTextSync && typeof data === 'string') {\n    options.dataType = 'text';\n    return loader.parseTextSync(data, options, context, loader);\n  }\n\n  // If we have a workerUrl and the loader can parse the given options efficiently in a worker\n  if (canParseWithWorker(loader, data, options, context)) {\n    return await parseWithWorker(loader, data, options, context);\n  }\n\n  // Check for asynchronous parser\n  if (loader.parseText && typeof data === 'string') {\n    return await loader.parseText(data, options, context, loader);\n  }\n\n  if (loader.parse) {\n    return await loader.parse(data, options, context, loader);\n  }\n\n  // This should not happen, all sync loaders should also offer `parse` function\n  assert(!loader.parseSync);\n\n  // TBD - If asynchronous parser not available, return null\n  return assert(false);\n}\n"]},"metadata":{},"sourceType":"module"}