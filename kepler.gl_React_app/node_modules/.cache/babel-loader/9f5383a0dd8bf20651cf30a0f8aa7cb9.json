{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nexport function geojsonToBinary(features) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var firstPassData = firstPass(features);\n  return secondPass(features, firstPassData, {\n    coordLength: options.coordLength || firstPassData.coordLength || 2,\n    numericPropKeys: options.numericPropKeys || firstPassData.numericPropKeys,\n    PositionDataType: options.PositionDataType || Float32Array\n  });\n}\nexport var TEST_EXPORTS = {\n  firstPass: firstPass,\n  secondPass: secondPass\n};\nfunction firstPass(features) {\n  var pointPositionsCount = 0;\n  var pointFeaturesCount = 0;\n  var linePositionsCount = 0;\n  var linePathsCount = 0;\n  var lineFeaturesCount = 0;\n  var polygonPositionsCount = 0;\n  var polygonObjectsCount = 0;\n  var polygonRingsCount = 0;\n  var polygonFeaturesCount = 0;\n  var coordLengths = new Set();\n  var numericPropKeys = {};\n  var _iterator = _createForOfIteratorHelper(features),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var feature = _step.value;\n      var geometry = feature.geometry;\n      switch (geometry.type) {\n        case 'Point':\n          pointFeaturesCount++;\n          pointPositionsCount++;\n          coordLengths.add(geometry.coordinates.length);\n          break;\n        case 'MultiPoint':\n          pointFeaturesCount++;\n          pointPositionsCount += geometry.coordinates.length;\n          var _iterator2 = _createForOfIteratorHelper(geometry.coordinates),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var point = _step2.value;\n              coordLengths.add(point.length);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n          break;\n        case 'LineString':\n          lineFeaturesCount++;\n          linePositionsCount += geometry.coordinates.length;\n          linePathsCount++;\n          var _iterator3 = _createForOfIteratorHelper(geometry.coordinates),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var coord = _step3.value;\n              coordLengths.add(coord.length);\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n          break;\n        case 'MultiLineString':\n          lineFeaturesCount++;\n          var _iterator4 = _createForOfIteratorHelper(geometry.coordinates),\n            _step4;\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var line = _step4.value;\n              linePositionsCount += line.length;\n              linePathsCount++;\n              var _iterator5 = _createForOfIteratorHelper(line),\n                _step5;\n              try {\n                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                  var _coord = _step5.value;\n                  coordLengths.add(_coord.length);\n                }\n              } catch (err) {\n                _iterator5.e(err);\n              } finally {\n                _iterator5.f();\n              }\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n          break;\n        case 'Polygon':\n          polygonFeaturesCount++;\n          polygonObjectsCount++;\n          polygonRingsCount += geometry.coordinates.length;\n          polygonPositionsCount += flatten(geometry.coordinates).length;\n          var _iterator6 = _createForOfIteratorHelper(flatten(geometry.coordinates)),\n            _step6;\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var _coord2 = _step6.value;\n              coordLengths.add(_coord2.length);\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n          break;\n        case 'MultiPolygon':\n          polygonFeaturesCount++;\n          var _iterator7 = _createForOfIteratorHelper(geometry.coordinates),\n            _step7;\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var polygon = _step7.value;\n              polygonObjectsCount++;\n              polygonRingsCount += polygon.length;\n              polygonPositionsCount += flatten(polygon).length;\n              var _iterator8 = _createForOfIteratorHelper(flatten(polygon)),\n                _step8;\n              try {\n                for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                  var _coord3 = _step8.value;\n                  coordLengths.add(_coord3.length);\n                }\n              } catch (err) {\n                _iterator8.e(err);\n              } finally {\n                _iterator8.f();\n              }\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n          break;\n        default:\n          throw new Error(\"Unsupported geometry type: \".concat(geometry.type));\n      }\n      if (feature.properties) {\n        for (var key in feature.properties) {\n          var val = feature.properties[key];\n          numericPropKeys[key] = numericPropKeys[key] || numericPropKeys[key] === undefined ? isNumeric(val) : numericPropKeys[key];\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return {\n    pointPositionsCount: pointPositionsCount,\n    pointFeaturesCount: pointFeaturesCount,\n    linePositionsCount: linePositionsCount,\n    linePathsCount: linePathsCount,\n    lineFeaturesCount: lineFeaturesCount,\n    coordLength: coordLengths.size > 0 && Math.max.apply(Math, _toConsumableArray(coordLengths)),\n    polygonPositionsCount: polygonPositionsCount,\n    polygonObjectsCount: polygonObjectsCount,\n    polygonRingsCount: polygonRingsCount,\n    polygonFeaturesCount: polygonFeaturesCount,\n    numericPropKeys: Object.keys(numericPropKeys).filter(function (k) {\n      return numericPropKeys[k];\n    })\n  };\n}\nfunction secondPass(features) {\n  var firstPassData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var pointPositionsCount = firstPassData.pointPositionsCount,\n    pointFeaturesCount = firstPassData.pointFeaturesCount,\n    linePositionsCount = firstPassData.linePositionsCount,\n    linePathsCount = firstPassData.linePathsCount,\n    lineFeaturesCount = firstPassData.lineFeaturesCount,\n    polygonPositionsCount = firstPassData.polygonPositionsCount,\n    polygonObjectsCount = firstPassData.polygonObjectsCount,\n    polygonRingsCount = firstPassData.polygonRingsCount,\n    polygonFeaturesCount = firstPassData.polygonFeaturesCount;\n  var coordLength = options.coordLength,\n    numericPropKeys = options.numericPropKeys,\n    _options$PositionData = options.PositionDataType,\n    PositionDataType = _options$PositionData === void 0 ? Float32Array : _options$PositionData;\n  var GlobalFeatureIdsDataType = features.length > 65535 ? Uint32Array : Uint16Array;\n  var points = {\n    positions: new PositionDataType(pointPositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(pointPositionsCount),\n    featureIds: pointFeaturesCount > 65535 ? new Uint32Array(pointPositionsCount) : new Uint16Array(pointPositionsCount),\n    numericProps: {},\n    properties: []\n  };\n  var lines = {\n    pathIndices: linePositionsCount > 65535 ? new Uint32Array(linePathsCount + 1) : new Uint16Array(linePathsCount + 1),\n    positions: new PositionDataType(linePositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(linePositionsCount),\n    featureIds: lineFeaturesCount > 65535 ? new Uint32Array(linePositionsCount) : new Uint16Array(linePositionsCount),\n    numericProps: {},\n    properties: []\n  };\n  var polygons = {\n    polygonIndices: polygonPositionsCount > 65535 ? new Uint32Array(polygonObjectsCount + 1) : new Uint16Array(polygonObjectsCount + 1),\n    primitivePolygonIndices: polygonPositionsCount > 65535 ? new Uint32Array(polygonRingsCount + 1) : new Uint16Array(polygonRingsCount + 1),\n    positions: new PositionDataType(polygonPositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(polygonPositionsCount),\n    featureIds: polygonFeaturesCount > 65535 ? new Uint32Array(polygonPositionsCount) : new Uint16Array(polygonPositionsCount),\n    numericProps: {},\n    properties: []\n  };\n  for (var _i = 0, _arr = [points, lines, polygons]; _i < _arr.length; _i++) {\n    var object = _arr[_i];\n    var _iterator9 = _createForOfIteratorHelper(numericPropKeys),\n      _step9;\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var propName = _step9.value;\n        object.numericProps[propName] = new Float32Array(object.positions.length / coordLength);\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n  }\n  lines.pathIndices[linePathsCount] = linePositionsCount;\n  polygons.polygonIndices[polygonObjectsCount] = polygonPositionsCount;\n  polygons.primitivePolygonIndices[polygonRingsCount] = polygonPositionsCount;\n  var indexMap = {\n    pointPosition: 0,\n    pointFeature: 0,\n    linePosition: 0,\n    linePath: 0,\n    lineFeature: 0,\n    polygonPosition: 0,\n    polygonObject: 0,\n    polygonRing: 0,\n    polygonFeature: 0,\n    feature: 0\n  };\n  var _iterator10 = _createForOfIteratorHelper(features),\n    _step10;\n  try {\n    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n      var feature = _step10.value;\n      var geometry = feature.geometry;\n      var properties = feature.properties || {};\n      switch (geometry.type) {\n        case 'Point':\n          handlePoint(geometry.coordinates, points, indexMap, coordLength, properties);\n          points.properties.push(keepStringProperties(properties, numericPropKeys));\n          indexMap.pointFeature++;\n          break;\n        case 'MultiPoint':\n          handleMultiPoint(geometry.coordinates, points, indexMap, coordLength, properties);\n          points.properties.push(keepStringProperties(properties, numericPropKeys));\n          indexMap.pointFeature++;\n          break;\n        case 'LineString':\n          handleLineString(geometry.coordinates, lines, indexMap, coordLength, properties);\n          lines.properties.push(keepStringProperties(properties, numericPropKeys));\n          indexMap.lineFeature++;\n          break;\n        case 'MultiLineString':\n          handleMultiLineString(geometry.coordinates, lines, indexMap, coordLength, properties);\n          lines.properties.push(keepStringProperties(properties, numericPropKeys));\n          indexMap.lineFeature++;\n          break;\n        case 'Polygon':\n          handlePolygon(geometry.coordinates, polygons, indexMap, coordLength, properties);\n          polygons.properties.push(keepStringProperties(properties, numericPropKeys));\n          indexMap.polygonFeature++;\n          break;\n        case 'MultiPolygon':\n          handleMultiPolygon(geometry.coordinates, polygons, indexMap, coordLength, properties);\n          polygons.properties.push(keepStringProperties(properties, numericPropKeys));\n          indexMap.polygonFeature++;\n          break;\n        default:\n          throw new Error('Invalid geometry type');\n      }\n      indexMap.feature++;\n    }\n  } catch (err) {\n    _iterator10.e(err);\n  } finally {\n    _iterator10.f();\n  }\n  return makeAccessorObjects(points, lines, polygons, coordLength);\n}\nfunction handlePoint(coords, points, indexMap, coordLength, properties) {\n  points.positions.set(coords, indexMap.pointPosition * coordLength);\n  points.globalFeatureIds[indexMap.pointPosition] = indexMap.feature;\n  points.featureIds[indexMap.pointPosition] = indexMap.pointFeature;\n  fillNumericProperties(points, properties, indexMap.pointPosition, 1);\n  indexMap.pointPosition++;\n}\nfunction handleMultiPoint(coords, points, indexMap, coordLength, properties) {\n  var _iterator11 = _createForOfIteratorHelper(coords),\n    _step11;\n  try {\n    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n      var point = _step11.value;\n      handlePoint(point, points, indexMap, coordLength, properties);\n    }\n  } catch (err) {\n    _iterator11.e(err);\n  } finally {\n    _iterator11.f();\n  }\n}\nfunction handleLineString(coords, lines, indexMap, coordLength, properties) {\n  lines.pathIndices[indexMap.linePath] = indexMap.linePosition;\n  indexMap.linePath++;\n  fillCoords(lines.positions, coords, indexMap.linePosition, coordLength);\n  var nPositions = coords.length;\n  fillNumericProperties(lines, properties, indexMap.linePosition, nPositions);\n  lines.globalFeatureIds.set(new Uint32Array(nPositions).fill(indexMap.feature), indexMap.linePosition);\n  lines.featureIds.set(new Uint32Array(nPositions).fill(indexMap.lineFeature), indexMap.linePosition);\n  indexMap.linePosition += nPositions;\n}\nfunction handleMultiLineString(coords, lines, indexMap, coordLength, properties) {\n  var _iterator12 = _createForOfIteratorHelper(coords),\n    _step12;\n  try {\n    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n      var line = _step12.value;\n      handleLineString(line, lines, indexMap, coordLength, properties);\n    }\n  } catch (err) {\n    _iterator12.e(err);\n  } finally {\n    _iterator12.f();\n  }\n}\nfunction handlePolygon(coords, polygons, indexMap, coordLength, properties) {\n  polygons.polygonIndices[indexMap.polygonObject] = indexMap.polygonPosition;\n  indexMap.polygonObject++;\n  var _iterator13 = _createForOfIteratorHelper(coords),\n    _step13;\n  try {\n    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n      var ring = _step13.value;\n      polygons.primitivePolygonIndices[indexMap.polygonRing] = indexMap.polygonPosition;\n      indexMap.polygonRing++;\n      fillCoords(polygons.positions, ring, indexMap.polygonPosition, coordLength);\n      var nPositions = ring.length;\n      fillNumericProperties(polygons, properties, indexMap.polygonPosition, nPositions);\n      polygons.globalFeatureIds.set(new Uint32Array(nPositions).fill(indexMap.feature), indexMap.polygonPosition);\n      polygons.featureIds.set(new Uint32Array(nPositions).fill(indexMap.polygonFeature), indexMap.polygonPosition);\n      indexMap.polygonPosition += nPositions;\n    }\n  } catch (err) {\n    _iterator13.e(err);\n  } finally {\n    _iterator13.f();\n  }\n}\nfunction handleMultiPolygon(coords, polygons, indexMap, coordLength, properties) {\n  var _iterator14 = _createForOfIteratorHelper(coords),\n    _step14;\n  try {\n    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n      var polygon = _step14.value;\n      handlePolygon(polygon, polygons, indexMap, coordLength, properties);\n    }\n  } catch (err) {\n    _iterator14.e(err);\n  } finally {\n    _iterator14.f();\n  }\n}\nfunction makeAccessorObjects(points, lines, polygons, coordLength) {\n  var returnObj = {\n    points: {\n      positions: {\n        value: points.positions,\n        size: coordLength\n      },\n      globalFeatureIds: {\n        value: points.globalFeatureIds,\n        size: 1\n      },\n      featureIds: {\n        value: points.featureIds,\n        size: 1\n      },\n      numericProps: points.numericProps,\n      properties: points.properties\n    },\n    lines: {\n      pathIndices: {\n        value: lines.pathIndices,\n        size: 1\n      },\n      positions: {\n        value: lines.positions,\n        size: coordLength\n      },\n      globalFeatureIds: {\n        value: lines.globalFeatureIds,\n        size: 1\n      },\n      featureIds: {\n        value: lines.featureIds,\n        size: 1\n      },\n      numericProps: lines.numericProps,\n      properties: lines.properties\n    },\n    polygons: {\n      polygonIndices: {\n        value: polygons.polygonIndices,\n        size: 1\n      },\n      primitivePolygonIndices: {\n        value: polygons.primitivePolygonIndices,\n        size: 1\n      },\n      positions: {\n        value: polygons.positions,\n        size: coordLength\n      },\n      globalFeatureIds: {\n        value: polygons.globalFeatureIds,\n        size: 1\n      },\n      featureIds: {\n        value: polygons.featureIds,\n        size: 1\n      },\n      numericProps: polygons.numericProps,\n      properties: polygons.properties\n    }\n  };\n  for (var geomType in returnObj) {\n    for (var numericProp in returnObj[geomType].numericProps) {\n      returnObj[geomType].numericProps[numericProp] = {\n        value: returnObj[geomType].numericProps[numericProp],\n        size: 1\n      };\n    }\n  }\n  return returnObj;\n}\nfunction fillNumericProperties(object, properties, index, length) {\n  for (var numericPropName in object.numericProps) {\n    if (numericPropName in properties) {\n      object.numericProps[numericPropName].set(new Array(length).fill(properties[numericPropName]), index);\n    }\n  }\n}\nfunction keepStringProperties(properties, numericKeys) {\n  var props = {};\n  for (var key in properties) {\n    if (!numericKeys.includes(key)) {\n      props[key] = properties[key];\n    }\n  }\n  return props;\n}\nfunction fillCoords(array, coords, startVertex, coordLength) {\n  var index = startVertex * coordLength;\n  var _iterator15 = _createForOfIteratorHelper(coords),\n    _step15;\n  try {\n    for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n      var coord = _step15.value;\n      array.set(coord, index);\n      index += coordLength;\n    }\n  } catch (err) {\n    _iterator15.e(err);\n  } finally {\n    _iterator15.f();\n  }\n}\nfunction flatten(arrays) {\n  var _ref;\n  return (_ref = []).concat.apply(_ref, _toConsumableArray(arrays));\n}\nfunction isNumeric(x) {\n  return Number.isFinite(x);\n}","map":{"version":3,"sources":["../../../src/lib/geojson-to-binary.js"],"names":["geojsonToBinary","features","options","firstPassData","firstPass","secondPass","coordLength","numericPropKeys","PositionDataType","Float32Array","TEST_EXPORTS","pointPositionsCount","pointFeaturesCount","linePositionsCount","linePathsCount","lineFeaturesCount","polygonPositionsCount","polygonObjectsCount","polygonRingsCount","polygonFeaturesCount","coordLengths","Set","feature","geometry","type","add","coordinates","length","point","coord","line","flatten","polygon","Error","properties","key","val","undefined","isNumeric","size","Math","max","keys","filter","k","GlobalFeatureIdsDataType","Uint32Array","Uint16Array","points","positions","globalFeatureIds","featureIds","numericProps","lines","pathIndices","polygons","polygonIndices","primitivePolygonIndices","object","propName","indexMap","pointPosition","pointFeature","linePosition","linePath","lineFeature","polygonPosition","polygonObject","polygonRing","polygonFeature","handlePoint","push","keepStringProperties","handleMultiPoint","handleLineString","handleMultiLineString","handlePolygon","handleMultiPolygon","makeAccessorObjects","coords","set","fillNumericProperties","fillCoords","nPositions","fill","ring","returnObj","value","geomType","numericProp","index","numericPropName","Array","numericKeys","props","includes","array","startVertex","arrays","concat","x","Number","isFinite"],"mappings":"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","sourcesContent":["// Convert GeoJSON features to flat binary arrays\n// @ts-nocheck\n\nexport function geojsonToBinary(features, options = {}) {\n  const firstPassData = firstPass(features);\n  return secondPass(features, firstPassData, {\n    coordLength: options.coordLength || firstPassData.coordLength || 2,\n    numericPropKeys: options.numericPropKeys || firstPassData.numericPropKeys,\n    PositionDataType: options.PositionDataType || Float32Array\n  });\n}\n\nexport const TEST_EXPORTS = {\n  firstPass,\n  secondPass\n};\n\n// Initial scan over GeoJSON features\n// Counts number of coordinates of each geometry type and keeps track of the max coordinate\n// dimensions\n// eslint-disable-next-line complexity, max-statements\nfunction firstPass(features) {\n  // Counts the number of _positions_, so [x, y, z] counts as one\n  let pointPositionsCount = 0;\n  let pointFeaturesCount = 0;\n  let linePositionsCount = 0;\n  let linePathsCount = 0;\n  let lineFeaturesCount = 0;\n  let polygonPositionsCount = 0;\n  let polygonObjectsCount = 0;\n  let polygonRingsCount = 0;\n  let polygonFeaturesCount = 0;\n  const coordLengths = new Set();\n  const numericPropKeys = {};\n\n  for (const feature of features) {\n    const geometry = feature.geometry;\n    switch (geometry.type) {\n      case 'Point':\n        pointFeaturesCount++;\n        pointPositionsCount++;\n        coordLengths.add(geometry.coordinates.length);\n        break;\n      case 'MultiPoint':\n        pointFeaturesCount++;\n        pointPositionsCount += geometry.coordinates.length;\n        for (const point of geometry.coordinates) {\n          coordLengths.add(point.length);\n        }\n        break;\n      case 'LineString':\n        lineFeaturesCount++;\n        linePositionsCount += geometry.coordinates.length;\n        linePathsCount++;\n\n        for (const coord of geometry.coordinates) {\n          coordLengths.add(coord.length);\n        }\n        break;\n      case 'MultiLineString':\n        lineFeaturesCount++;\n        for (const line of geometry.coordinates) {\n          linePositionsCount += line.length;\n          linePathsCount++;\n\n          // eslint-disable-next-line max-depth\n          for (const coord of line) {\n            coordLengths.add(coord.length);\n          }\n        }\n        break;\n      case 'Polygon':\n        polygonFeaturesCount++;\n        polygonObjectsCount++;\n        polygonRingsCount += geometry.coordinates.length;\n        polygonPositionsCount += flatten(geometry.coordinates).length;\n\n        for (const coord of flatten(geometry.coordinates)) {\n          coordLengths.add(coord.length);\n        }\n        break;\n      case 'MultiPolygon':\n        polygonFeaturesCount++;\n        for (const polygon of geometry.coordinates) {\n          polygonObjectsCount++;\n          polygonRingsCount += polygon.length;\n          polygonPositionsCount += flatten(polygon).length;\n\n          // eslint-disable-next-line max-depth\n          for (const coord of flatten(polygon)) {\n            coordLengths.add(coord.length);\n          }\n        }\n        break;\n      default:\n        throw new Error(`Unsupported geometry type: ${geometry.type}`);\n    }\n\n    if (feature.properties) {\n      for (const key in feature.properties) {\n        const val = feature.properties[key];\n\n        // If property has not been seen before, or if property has been numeric\n        // in all previous features, check if numeric in this feature\n        // If not numeric, false is stored to prevent rechecking in the future\n        numericPropKeys[key] =\n          numericPropKeys[key] || numericPropKeys[key] === undefined\n            ? isNumeric(val)\n            : numericPropKeys[key];\n      }\n    }\n  }\n\n  return {\n    pointPositionsCount,\n    pointFeaturesCount,\n    linePositionsCount,\n    linePathsCount,\n    lineFeaturesCount,\n    coordLength: coordLengths.size > 0 && Math.max(...coordLengths),\n    polygonPositionsCount,\n    polygonObjectsCount,\n    polygonRingsCount,\n    polygonFeaturesCount,\n    // Array of keys whose values are always numeric\n    numericPropKeys: Object.keys(numericPropKeys).filter(k => numericPropKeys[k])\n  };\n}\n\n// Second scan over GeoJSON features\n// Fills coordinates into pre-allocated typed arrays\n// eslint-disable-next-line complexity\nfunction secondPass(features, firstPassData = {}, options = {}) {\n  const {\n    pointPositionsCount,\n    pointFeaturesCount,\n    linePositionsCount,\n    linePathsCount,\n    lineFeaturesCount,\n    polygonPositionsCount,\n    polygonObjectsCount,\n    polygonRingsCount,\n    polygonFeaturesCount\n  } = firstPassData;\n  const {coordLength, numericPropKeys, PositionDataType = Float32Array} = options;\n  const GlobalFeatureIdsDataType = features.length > 65535 ? Uint32Array : Uint16Array;\n  const points = {\n    positions: new PositionDataType(pointPositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(pointPositionsCount),\n    featureIds:\n      pointFeaturesCount > 65535\n        ? new Uint32Array(pointPositionsCount)\n        : new Uint16Array(pointPositionsCount),\n    numericProps: {},\n    properties: []\n  };\n  const lines = {\n    pathIndices:\n      linePositionsCount > 65535\n        ? new Uint32Array(linePathsCount + 1)\n        : new Uint16Array(linePathsCount + 1),\n    positions: new PositionDataType(linePositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(linePositionsCount),\n    featureIds:\n      lineFeaturesCount > 65535\n        ? new Uint32Array(linePositionsCount)\n        : new Uint16Array(linePositionsCount),\n    numericProps: {},\n    properties: []\n  };\n  const polygons = {\n    polygonIndices:\n      polygonPositionsCount > 65535\n        ? new Uint32Array(polygonObjectsCount + 1)\n        : new Uint16Array(polygonObjectsCount + 1),\n    primitivePolygonIndices:\n      polygonPositionsCount > 65535\n        ? new Uint32Array(polygonRingsCount + 1)\n        : new Uint16Array(polygonRingsCount + 1),\n    positions: new PositionDataType(polygonPositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(polygonPositionsCount),\n    featureIds:\n      polygonFeaturesCount > 65535\n        ? new Uint32Array(polygonPositionsCount)\n        : new Uint16Array(polygonPositionsCount),\n    numericProps: {},\n    properties: []\n  };\n\n  // Instantiate numeric properties arrays; one value per vertex\n  for (const object of [points, lines, polygons]) {\n    for (const propName of numericPropKeys) {\n      // If property has been numeric in all previous features in which the property existed, check\n      // if numeric in this feature\n      object.numericProps[propName] = new Float32Array(object.positions.length / coordLength);\n    }\n  }\n\n  // Set last element of path/polygon indices as positions length\n  lines.pathIndices[linePathsCount] = linePositionsCount;\n  polygons.polygonIndices[polygonObjectsCount] = polygonPositionsCount;\n  polygons.primitivePolygonIndices[polygonRingsCount] = polygonPositionsCount;\n\n  const indexMap = {\n    pointPosition: 0,\n    pointFeature: 0,\n    linePosition: 0,\n    linePath: 0,\n    lineFeature: 0,\n    polygonPosition: 0,\n    polygonObject: 0,\n    polygonRing: 0,\n    polygonFeature: 0,\n    feature: 0\n  };\n\n  for (const feature of features) {\n    const geometry = feature.geometry;\n    const properties = feature.properties || {};\n\n    switch (geometry.type) {\n      case 'Point':\n        handlePoint(geometry.coordinates, points, indexMap, coordLength, properties);\n        points.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.pointFeature++;\n        break;\n      case 'MultiPoint':\n        handleMultiPoint(geometry.coordinates, points, indexMap, coordLength, properties);\n        points.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.pointFeature++;\n        break;\n      case 'LineString':\n        handleLineString(geometry.coordinates, lines, indexMap, coordLength, properties);\n        lines.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.lineFeature++;\n        break;\n      case 'MultiLineString':\n        handleMultiLineString(geometry.coordinates, lines, indexMap, coordLength, properties);\n        lines.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.lineFeature++;\n        break;\n      case 'Polygon':\n        handlePolygon(geometry.coordinates, polygons, indexMap, coordLength, properties);\n        polygons.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.polygonFeature++;\n        break;\n      case 'MultiPolygon':\n        handleMultiPolygon(geometry.coordinates, polygons, indexMap, coordLength, properties);\n        polygons.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.polygonFeature++;\n        break;\n      default:\n        throw new Error('Invalid geometry type');\n    }\n\n    indexMap.feature++;\n  }\n\n  // Wrap each array in an accessor object with value and size keys\n  return makeAccessorObjects(points, lines, polygons, coordLength);\n}\n\n// Fills Point coordinates into points object of arrays\nfunction handlePoint(coords, points, indexMap, coordLength, properties) {\n  points.positions.set(coords, indexMap.pointPosition * coordLength);\n  points.globalFeatureIds[indexMap.pointPosition] = indexMap.feature;\n  points.featureIds[indexMap.pointPosition] = indexMap.pointFeature;\n\n  fillNumericProperties(points, properties, indexMap.pointPosition, 1);\n  indexMap.pointPosition++;\n}\n\n// Fills MultiPoint coordinates into points object of arrays\nfunction handleMultiPoint(coords, points, indexMap, coordLength, properties) {\n  for (const point of coords) {\n    handlePoint(point, points, indexMap, coordLength, properties);\n  }\n}\n\n// Fills LineString coordinates into lines object of arrays\nfunction handleLineString(coords, lines, indexMap, coordLength, properties) {\n  lines.pathIndices[indexMap.linePath] = indexMap.linePosition;\n  indexMap.linePath++;\n\n  fillCoords(lines.positions, coords, indexMap.linePosition, coordLength);\n\n  const nPositions = coords.length;\n  fillNumericProperties(lines, properties, indexMap.linePosition, nPositions);\n\n  lines.globalFeatureIds.set(\n    new Uint32Array(nPositions).fill(indexMap.feature),\n    indexMap.linePosition\n  );\n  lines.featureIds.set(\n    new Uint32Array(nPositions).fill(indexMap.lineFeature),\n    indexMap.linePosition\n  );\n  indexMap.linePosition += nPositions;\n}\n\n// Fills MultiLineString coordinates into lines object of arrays\nfunction handleMultiLineString(coords, lines, indexMap, coordLength, properties) {\n  for (const line of coords) {\n    handleLineString(line, lines, indexMap, coordLength, properties);\n  }\n}\n\n// Fills Polygon coordinates into polygons object of arrays\nfunction handlePolygon(coords, polygons, indexMap, coordLength, properties) {\n  polygons.polygonIndices[indexMap.polygonObject] = indexMap.polygonPosition;\n  indexMap.polygonObject++;\n\n  for (const ring of coords) {\n    polygons.primitivePolygonIndices[indexMap.polygonRing] = indexMap.polygonPosition;\n    indexMap.polygonRing++;\n\n    fillCoords(polygons.positions, ring, indexMap.polygonPosition, coordLength);\n\n    const nPositions = ring.length;\n    fillNumericProperties(polygons, properties, indexMap.polygonPosition, nPositions);\n\n    polygons.globalFeatureIds.set(\n      new Uint32Array(nPositions).fill(indexMap.feature),\n      indexMap.polygonPosition\n    );\n    polygons.featureIds.set(\n      new Uint32Array(nPositions).fill(indexMap.polygonFeature),\n      indexMap.polygonPosition\n    );\n    indexMap.polygonPosition += nPositions;\n  }\n}\n\n// Fills MultiPolygon coordinates into polygons object of arrays\nfunction handleMultiPolygon(coords, polygons, indexMap, coordLength, properties) {\n  for (const polygon of coords) {\n    handlePolygon(polygon, polygons, indexMap, coordLength, properties);\n  }\n}\n\n// Wrap each array in an accessor object with value and size keys\nfunction makeAccessorObjects(points, lines, polygons, coordLength) {\n  const returnObj = {\n    points: {\n      positions: {value: points.positions, size: coordLength},\n      globalFeatureIds: {value: points.globalFeatureIds, size: 1},\n      featureIds: {value: points.featureIds, size: 1},\n      numericProps: points.numericProps,\n      properties: points.properties\n    },\n    lines: {\n      pathIndices: {value: lines.pathIndices, size: 1},\n      positions: {value: lines.positions, size: coordLength},\n      globalFeatureIds: {value: lines.globalFeatureIds, size: 1},\n      featureIds: {value: lines.featureIds, size: 1},\n      numericProps: lines.numericProps,\n      properties: lines.properties\n    },\n    polygons: {\n      polygonIndices: {value: polygons.polygonIndices, size: 1},\n      primitivePolygonIndices: {value: polygons.primitivePolygonIndices, size: 1},\n      positions: {value: polygons.positions, size: coordLength},\n      globalFeatureIds: {value: polygons.globalFeatureIds, size: 1},\n      featureIds: {value: polygons.featureIds, size: 1},\n      numericProps: polygons.numericProps,\n      properties: polygons.properties\n    }\n  };\n\n  for (const geomType in returnObj) {\n    for (const numericProp in returnObj[geomType].numericProps) {\n      returnObj[geomType].numericProps[numericProp] = {\n        value: returnObj[geomType].numericProps[numericProp],\n        size: 1\n      };\n    }\n  }\n  return returnObj;\n}\n\n// Add numeric properties to object\nfunction fillNumericProperties(object, properties, index, length) {\n  for (const numericPropName in object.numericProps) {\n    if (numericPropName in properties) {\n      object.numericProps[numericPropName].set(\n        new Array(length).fill(properties[numericPropName]),\n        index\n      );\n    }\n  }\n}\n\n// Keep string properties in object\nfunction keepStringProperties(properties, numericKeys) {\n  const props = {};\n  for (const key in properties) {\n    if (!numericKeys.includes(key)) {\n      props[key] = properties[key];\n    }\n  }\n  return props;\n}\n\n// coords is expected to be a list of arrays, each with length 2-3\nfunction fillCoords(array, coords, startVertex, coordLength) {\n  let index = startVertex * coordLength;\n  for (const coord of coords) {\n    array.set(coord, index);\n    index += coordLength;\n  }\n}\n\nfunction flatten(arrays) {\n  return [].concat(...arrays);\n}\n\nfunction isNumeric(x) {\n  return Number.isFinite(x);\n}\n"]},"metadata":{},"sourceType":"module"}