{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { h3SetToMultiPolygon } from 'h3-js';\nimport { CompositeLayer, createIterable } from '@deck.gl/core';\nimport { PolygonLayer } from '@deck.gl/layers';\nvar defaultProps = Object.assign({\n  getHexagons: {\n    type: 'accessor',\n    value: function value(d) {\n      return d.hexagons;\n    }\n  }\n}, PolygonLayer.defaultProps);\nvar H3ClusterLayer = function (_CompositeLayer) {\n  _inherits(H3ClusterLayer, _CompositeLayer);\n  function H3ClusterLayer() {\n    _classCallCheck(this, H3ClusterLayer);\n    return _possibleConstructorReturn(this, _getPrototypeOf(H3ClusterLayer).apply(this, arguments));\n  }\n  _createClass(H3ClusterLayer, [{\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n        oldProps = _ref.oldProps,\n        changeFlags = _ref.changeFlags;\n      if (changeFlags.dataChanged || changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagons) {\n        var data = props.data,\n          getHexagons = props.getHexagons;\n        var polygons = [];\n        var _createIterable = createIterable(data),\n          iterable = _createIterable.iterable,\n          objectInfo = _createIterable.objectInfo;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n        try {\n          for (var _iterator = iterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var object = _step.value;\n            objectInfo.index++;\n            var hexagons = getHexagons(object, objectInfo);\n            var multiPolygon = h3SetToMultiPolygon(hexagons, true);\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n            try {\n              for (var _iterator2 = multiPolygon[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var polygon = _step2.value;\n                polygons.push(this.getSubLayerRow({\n                  polygon: polygon\n                }, object, objectInfo.index));\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n                  _iterator2[\"return\"]();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n        this.setState({\n          polygons: polygons\n        });\n      }\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props = this.props,\n        elevationScale = _this$props.elevationScale,\n        extruded = _this$props.extruded,\n        wireframe = _this$props.wireframe,\n        filled = _this$props.filled,\n        stroked = _this$props.stroked,\n        lineWidthScale = _this$props.lineWidthScale,\n        lineWidthMinPixels = _this$props.lineWidthMinPixels,\n        lineWidthMaxPixels = _this$props.lineWidthMaxPixels,\n        lineJointRounded = _this$props.lineJointRounded,\n        lineMiterLimit = _this$props.lineMiterLimit,\n        lineDashJustified = _this$props.lineDashJustified,\n        material = _this$props.material,\n        getFillColor = _this$props.getFillColor,\n        getLineColor = _this$props.getLineColor,\n        getLineWidth = _this$props.getLineWidth,\n        getLineDashArray = _this$props.getLineDashArray,\n        getElevation = _this$props.getElevation,\n        updateTriggers = _this$props.updateTriggers;\n      var SubLayerClass = this.getSubLayerClass('cluster-region', PolygonLayer);\n      return new SubLayerClass({\n        filled: filled,\n        wireframe: wireframe,\n        extruded: extruded,\n        elevationScale: elevationScale,\n        stroked: stroked,\n        lineWidthScale: lineWidthScale,\n        lineWidthMinPixels: lineWidthMinPixels,\n        lineWidthMaxPixels: lineWidthMaxPixels,\n        lineJointRounded: lineJointRounded,\n        lineMiterLimit: lineMiterLimit,\n        lineDashJustified: lineDashJustified,\n        material: material,\n        getFillColor: this.getSubLayerAccessor(getFillColor),\n        getLineColor: this.getSubLayerAccessor(getLineColor),\n        getLineWidth: this.getSubLayerAccessor(getLineWidth),\n        getLineDashArray: this.getSubLayerAccessor(getLineDashArray),\n        getElevation: this.getSubLayerAccessor(getElevation)\n      }, this.getSubLayerProps({\n        id: 'cluster-region',\n        updateTriggers: updateTriggers\n      }), {\n        data: this.state.polygons,\n        getPolygon: function getPolygon(d) {\n          return d.polygon;\n        }\n      });\n    }\n  }]);\n  return H3ClusterLayer;\n}(CompositeLayer);\nexport { H3ClusterLayer as default };\nH3ClusterLayer.defaultProps = defaultProps;\nH3ClusterLayer.layerName = 'H3ClusterLayer';","map":{"version":3,"sources":["../../../src/h3-layers/h3-cluster-layer.js"],"names":["h3SetToMultiPolygon","CompositeLayer","createIterable","PolygonLayer","defaultProps","assign","getHexagons","type","value","d","hexagons","H3ClusterLayer","props","oldProps","changeFlags","dataChanged","updateTriggers","data","polygons","iterable","objectInfo","object","index","multiPolygon","polygon","push","getSubLayerRow","setState","elevationScale","extruded","wireframe","filled","stroked","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","lineJointRounded","lineMiterLimit","lineDashJustified","material","getFillColor","getLineColor","getLineWidth","getLineDashArray","getElevation","SubLayerClass","getSubLayerClass","getSubLayerAccessor","getSubLayerProps","id","state","getPolygon","layerName"],"mappings":"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","sourcesContent":["import {h3SetToMultiPolygon} from 'h3-js';\n\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport {PolygonLayer} from '@deck.gl/layers';\n\nconst defaultProps = Object.assign(\n  {\n    getHexagons: {type: 'accessor', value: d => d.hexagons}\n  },\n  PolygonLayer.defaultProps\n);\n\nexport default class H3ClusterLayer extends CompositeLayer {\n  updateState({props, oldProps, changeFlags}) {\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagons)\n    ) {\n      const {data, getHexagons} = props;\n      const polygons = [];\n\n      const {iterable, objectInfo} = createIterable(data);\n      for (const object of iterable) {\n        objectInfo.index++;\n        const hexagons = getHexagons(object, objectInfo);\n        const multiPolygon = h3SetToMultiPolygon(hexagons, true);\n\n        for (const polygon of multiPolygon) {\n          polygons.push(this.getSubLayerRow({polygon}, object, objectInfo.index));\n        }\n      }\n\n      this.setState({polygons});\n    }\n  }\n\n  renderLayers() {\n    const {\n      elevationScale,\n      extruded,\n      wireframe,\n      filled,\n      stroked,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      material,\n\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      updateTriggers\n    } = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('cluster-region', PolygonLayer);\n\n    return new SubLayerClass(\n      {\n        filled,\n        wireframe,\n\n        extruded,\n        elevationScale,\n\n        stroked,\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels,\n        lineJointRounded,\n        lineMiterLimit,\n        lineDashJustified,\n\n        material,\n\n        getFillColor: this.getSubLayerAccessor(getFillColor),\n        getLineColor: this.getSubLayerAccessor(getLineColor),\n        getLineWidth: this.getSubLayerAccessor(getLineWidth),\n        getLineDashArray: this.getSubLayerAccessor(getLineDashArray),\n        getElevation: this.getSubLayerAccessor(getElevation)\n      },\n      this.getSubLayerProps({\n        id: 'cluster-region',\n        updateTriggers\n      }),\n      {\n        data: this.state.polygons,\n        getPolygon: d => d.polygon\n      }\n    );\n  }\n}\n\nH3ClusterLayer.defaultProps = defaultProps;\nH3ClusterLayer.layerName = 'H3ClusterLayer';\n"]},"metadata":{},"sourceType":"module"}