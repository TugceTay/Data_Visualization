{"ast":null,"code":"export default class Martini {\n  constructor() {\n    let gridSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 257;\n    this.gridSize = gridSize;\n    const tileSize = gridSize - 1;\n    if (tileSize & tileSize - 1) throw new Error(`Expected grid size to be 2^n+1, got ${gridSize}.`);\n    this.numTriangles = tileSize * tileSize * 2 - 2;\n    this.numParentTriangles = this.numTriangles - tileSize * tileSize;\n    this.indices = new Uint32Array(this.gridSize * this.gridSize);\n\n    // coordinates for all possible triangles in an RTIN tile\n    this.coords = new Uint16Array(this.numTriangles * 4);\n\n    // get triangle coordinates from its index in an implicit binary tree\n    for (let i = 0; i < this.numTriangles; i++) {\n      let id = i + 2;\n      let ax = 0,\n        ay = 0,\n        bx = 0,\n        by = 0,\n        cx = 0,\n        cy = 0;\n      if (id & 1) {\n        bx = by = cx = tileSize; // bottom-left triangle\n      } else {\n        ax = ay = cy = tileSize; // top-right triangle\n      }\n\n      while ((id >>= 1) > 1) {\n        const mx = ax + bx >> 1;\n        const my = ay + by >> 1;\n        if (id & 1) {\n          // left half\n          bx = ax;\n          by = ay;\n          ax = cx;\n          ay = cy;\n        } else {\n          // right half\n          ax = bx;\n          ay = by;\n          bx = cx;\n          by = cy;\n        }\n        cx = mx;\n        cy = my;\n      }\n      const k = i * 4;\n      this.coords[k + 0] = ax;\n      this.coords[k + 1] = ay;\n      this.coords[k + 2] = bx;\n      this.coords[k + 3] = by;\n    }\n  }\n  createTile(terrain) {\n    return new Tile(terrain, this);\n  }\n}\nclass Tile {\n  constructor(terrain, martini) {\n    const size = martini.gridSize;\n    if (terrain.length !== size * size) throw new Error(`Expected terrain data of length ${size * size} (${size} x ${size}), got ${terrain.length}.`);\n    this.terrain = terrain;\n    this.martini = martini;\n    this.errors = new Float32Array(terrain.length);\n    this.update();\n  }\n  update() {\n    const {\n      numTriangles,\n      numParentTriangles,\n      coords,\n      gridSize: size\n    } = this.martini;\n    const {\n      terrain,\n      errors\n    } = this;\n\n    // iterate over all possible triangles, starting from the smallest level\n    for (let i = numTriangles - 1; i >= 0; i--) {\n      const k = i * 4;\n      const ax = coords[k + 0];\n      const ay = coords[k + 1];\n      const bx = coords[k + 2];\n      const by = coords[k + 3];\n      const mx = ax + bx >> 1;\n      const my = ay + by >> 1;\n      const cx = mx + my - ay;\n      const cy = my + ax - mx;\n\n      // calculate error in the middle of the long edge of the triangle\n      const interpolatedHeight = (terrain[ay * size + ax] + terrain[by * size + bx]) / 2;\n      const middleIndex = my * size + mx;\n      const middleError = Math.abs(interpolatedHeight - terrain[middleIndex]);\n      errors[middleIndex] = Math.max(errors[middleIndex], middleError);\n      if (i < numParentTriangles) {\n        // bigger triangles; accumulate error with children\n        const leftChildIndex = (ay + cy >> 1) * size + (ax + cx >> 1);\n        const rightChildIndex = (by + cy >> 1) * size + (bx + cx >> 1);\n        errors[middleIndex] = Math.max(errors[middleIndex], errors[leftChildIndex], errors[rightChildIndex]);\n      }\n    }\n  }\n  getMesh() {\n    let maxError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const {\n      gridSize: size,\n      indices\n    } = this.martini;\n    const {\n      errors\n    } = this;\n    let numVertices = 0;\n    let numTriangles = 0;\n    const max = size - 1;\n\n    // use an index grid to keep track of vertices that were already used to avoid duplication\n    indices.fill(0);\n\n    // retrieve mesh in two stages that both traverse the error map:\n    // - countElements: find used vertices (and assign each an index), and count triangles (for minimum allocation)\n    // - processTriangle: fill the allocated vertices & triangles typed arrays\n\n    function countElements(ax, ay, bx, by, cx, cy) {\n      const mx = ax + bx >> 1;\n      const my = ay + by >> 1;\n      if (Math.abs(ax - cx) + Math.abs(ay - cy) > 1 && errors[my * size + mx] > maxError) {\n        countElements(cx, cy, ax, ay, mx, my);\n        countElements(bx, by, cx, cy, mx, my);\n      } else {\n        indices[ay * size + ax] = indices[ay * size + ax] || ++numVertices;\n        indices[by * size + bx] = indices[by * size + bx] || ++numVertices;\n        indices[cy * size + cx] = indices[cy * size + cx] || ++numVertices;\n        numTriangles++;\n      }\n    }\n    countElements(0, 0, max, max, max, 0);\n    countElements(max, max, 0, 0, 0, max);\n    const vertices = new Uint16Array(numVertices * 2);\n    const triangles = new Uint32Array(numTriangles * 3);\n    let triIndex = 0;\n    function processTriangle(ax, ay, bx, by, cx, cy) {\n      const mx = ax + bx >> 1;\n      const my = ay + by >> 1;\n      if (Math.abs(ax - cx) + Math.abs(ay - cy) > 1 && errors[my * size + mx] > maxError) {\n        // triangle doesn't approximate the surface well enough; drill down further\n        processTriangle(cx, cy, ax, ay, mx, my);\n        processTriangle(bx, by, cx, cy, mx, my);\n      } else {\n        // add a triangle\n        const a = indices[ay * size + ax] - 1;\n        const b = indices[by * size + bx] - 1;\n        const c = indices[cy * size + cx] - 1;\n        vertices[2 * a] = ax;\n        vertices[2 * a + 1] = ay;\n        vertices[2 * b] = bx;\n        vertices[2 * b + 1] = by;\n        vertices[2 * c] = cx;\n        vertices[2 * c + 1] = cy;\n        triangles[triIndex++] = a;\n        triangles[triIndex++] = b;\n        triangles[triIndex++] = c;\n      }\n    }\n    processTriangle(0, 0, max, max, max, 0);\n    processTriangle(max, max, 0, 0, 0, max);\n    return {\n      vertices,\n      triangles\n    };\n  }\n}","map":{"version":3,"names":["Martini","constructor","gridSize","tileSize","Error","numTriangles","numParentTriangles","indices","Uint32Array","coords","Uint16Array","i","id","ax","ay","bx","by","cx","cy","mx","my","k","createTile","terrain","Tile","martini","size","length","errors","Float32Array","update","interpolatedHeight","middleIndex","middleError","Math","abs","max","leftChildIndex","rightChildIndex","getMesh","maxError","numVertices","fill","countElements","vertices","triangles","triIndex","processTriangle","a","b","c"],"sources":["C:/Users/tugcetay/Documents/github/Data_visualization/kepler.gl_React_app/node_modules/@mapbox/martini/index.js"],"sourcesContent":["\nexport default class Martini {\n    constructor(gridSize = 257) {\n        this.gridSize = gridSize;\n        const tileSize = gridSize - 1;\n        if (tileSize & (tileSize - 1)) throw new Error(\n            `Expected grid size to be 2^n+1, got ${gridSize}.`);\n\n        this.numTriangles = tileSize * tileSize * 2 - 2;\n        this.numParentTriangles = this.numTriangles - tileSize * tileSize;\n\n        this.indices = new Uint32Array(this.gridSize * this.gridSize);\n\n        // coordinates for all possible triangles in an RTIN tile\n        this.coords = new Uint16Array(this.numTriangles * 4);\n\n        // get triangle coordinates from its index in an implicit binary tree\n        for (let i = 0; i < this.numTriangles; i++) {\n            let id = i + 2;\n            let ax = 0, ay = 0, bx = 0, by = 0, cx = 0, cy = 0;\n            if (id & 1) {\n                bx = by = cx = tileSize; // bottom-left triangle\n            } else {\n                ax = ay = cy = tileSize; // top-right triangle\n            }\n            while ((id >>= 1) > 1) {\n                const mx = (ax + bx) >> 1;\n                const my = (ay + by) >> 1;\n\n                if (id & 1) { // left half\n                    bx = ax; by = ay;\n                    ax = cx; ay = cy;\n                } else { // right half\n                    ax = bx; ay = by;\n                    bx = cx; by = cy;\n                }\n                cx = mx; cy = my;\n            }\n            const k = i * 4;\n            this.coords[k + 0] = ax;\n            this.coords[k + 1] = ay;\n            this.coords[k + 2] = bx;\n            this.coords[k + 3] = by;\n        }\n    }\n\n    createTile(terrain) {\n        return new Tile(terrain, this);\n    }\n}\n\nclass Tile {\n    constructor(terrain, martini) {\n        const size = martini.gridSize;\n        if (terrain.length !== size * size) throw new Error(\n            `Expected terrain data of length ${size * size} (${size} x ${size}), got ${terrain.length}.`);\n\n        this.terrain = terrain;\n        this.martini = martini;\n        this.errors = new Float32Array(terrain.length);\n        this.update();\n    }\n\n    update() {\n        const {numTriangles, numParentTriangles, coords, gridSize: size} = this.martini;\n        const {terrain, errors} = this;\n\n        // iterate over all possible triangles, starting from the smallest level\n        for (let i = numTriangles - 1; i >= 0; i--) {\n            const k = i * 4;\n            const ax = coords[k + 0];\n            const ay = coords[k + 1];\n            const bx = coords[k + 2];\n            const by = coords[k + 3];\n            const mx = (ax + bx) >> 1;\n            const my = (ay + by) >> 1;\n            const cx = mx + my - ay;\n            const cy = my + ax - mx;\n\n            // calculate error in the middle of the long edge of the triangle\n            const interpolatedHeight = (terrain[ay * size + ax] + terrain[by * size + bx]) / 2;\n            const middleIndex = my * size + mx;\n            const middleError = Math.abs(interpolatedHeight - terrain[middleIndex]);\n\n            errors[middleIndex] = Math.max(errors[middleIndex], middleError);\n\n            if (i < numParentTriangles) { // bigger triangles; accumulate error with children\n                const leftChildIndex = ((ay + cy) >> 1) * size + ((ax + cx) >> 1);\n                const rightChildIndex = ((by + cy) >> 1) * size + ((bx + cx) >> 1);\n                errors[middleIndex] = Math.max(errors[middleIndex], errors[leftChildIndex], errors[rightChildIndex]);\n            }\n        }\n    }\n\n    getMesh(maxError = 0) {\n        const {gridSize: size, indices} = this.martini;\n        const {errors} = this;\n        let numVertices = 0;\n        let numTriangles = 0;\n        const max = size - 1;\n\n        // use an index grid to keep track of vertices that were already used to avoid duplication\n        indices.fill(0);\n\n        // retrieve mesh in two stages that both traverse the error map:\n        // - countElements: find used vertices (and assign each an index), and count triangles (for minimum allocation)\n        // - processTriangle: fill the allocated vertices & triangles typed arrays\n\n        function countElements(ax, ay, bx, by, cx, cy) {\n            const mx = (ax + bx) >> 1;\n            const my = (ay + by) >> 1;\n\n            if (Math.abs(ax - cx) + Math.abs(ay - cy) > 1 && errors[my * size + mx] > maxError) {\n                countElements(cx, cy, ax, ay, mx, my);\n                countElements(bx, by, cx, cy, mx, my);\n            } else {\n                indices[ay * size + ax] = indices[ay * size + ax] || ++numVertices;\n                indices[by * size + bx] = indices[by * size + bx] || ++numVertices;\n                indices[cy * size + cx] = indices[cy * size + cx] || ++numVertices;\n                numTriangles++;\n            }\n        }\n        countElements(0, 0, max, max, max, 0);\n        countElements(max, max, 0, 0, 0, max);\n\n        const vertices = new Uint16Array(numVertices * 2);\n        const triangles = new Uint32Array(numTriangles * 3);\n        let triIndex = 0;\n\n        function processTriangle(ax, ay, bx, by, cx, cy) {\n            const mx = (ax + bx) >> 1;\n            const my = (ay + by) >> 1;\n\n            if (Math.abs(ax - cx) + Math.abs(ay - cy) > 1 && errors[my * size + mx] > maxError) {\n                // triangle doesn't approximate the surface well enough; drill down further\n                processTriangle(cx, cy, ax, ay, mx, my);\n                processTriangle(bx, by, cx, cy, mx, my);\n\n            } else {\n                // add a triangle\n                const a = indices[ay * size + ax] - 1;\n                const b = indices[by * size + bx] - 1;\n                const c = indices[cy * size + cx] - 1;\n\n                vertices[2 * a] = ax;\n                vertices[2 * a + 1] = ay;\n\n                vertices[2 * b] = bx;\n                vertices[2 * b + 1] = by;\n\n                vertices[2 * c] = cx;\n                vertices[2 * c + 1] = cy;\n\n                triangles[triIndex++] = a;\n                triangles[triIndex++] = b;\n                triangles[triIndex++] = c;\n            }\n        }\n        processTriangle(0, 0, max, max, max, 0);\n        processTriangle(max, max, 0, 0, 0, max);\n\n        return {vertices, triangles};\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}