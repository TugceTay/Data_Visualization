{"ast":null,"code":"import earcut from 'earcut';\nfunction validate(polygon) {\n  polygon = polygon && polygon.positions || polygon;\n  if (!Array.isArray(polygon) && !ArrayBuffer.isView(polygon)) {\n    throw new Error('invalid polygon');\n  }\n}\nfunction isSimple(polygon) {\n  return polygon.length >= 1 && polygon[0].length >= 2 && Number.isFinite(polygon[0][0]);\n}\nfunction isNestedRingClosed(simplePolygon) {\n  var p0 = simplePolygon[0];\n  var p1 = simplePolygon[simplePolygon.length - 1];\n  return p0[0] === p1[0] && p0[1] === p1[1] && p0[2] === p1[2];\n}\nfunction isFlatRingClosed(positions, size, startIndex, endIndex) {\n  for (var i = 0; i < size; i++) {\n    if (positions[startIndex + i] !== positions[endIndex - size + i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction copyNestedRing(target, targetStartIndex, simplePolygon, size) {\n  var targetIndex = targetStartIndex;\n  var len = simplePolygon.length;\n  for (var i = 0; i < len; i++) {\n    for (var j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[i][j] || 0;\n    }\n  }\n  if (!isNestedRingClosed(simplePolygon)) {\n    for (var _j = 0; _j < size; _j++) {\n      target[targetIndex++] = simplePolygon[0][_j] || 0;\n    }\n  }\n  return targetIndex;\n}\nfunction copyFlatRing(target, targetStartIndex, positions, size) {\n  var srcStartIndex = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  var srcEndIndex = arguments.length > 5 ? arguments[5] : undefined;\n  srcEndIndex = srcEndIndex || positions.length;\n  var srcLength = srcEndIndex - srcStartIndex;\n  if (srcLength <= 0) {\n    return targetStartIndex;\n  }\n  var targetIndex = targetStartIndex;\n  for (var i = 0; i < srcLength; i++) {\n    target[targetIndex++] = positions[srcStartIndex + i];\n  }\n  if (!isFlatRingClosed(positions, size, srcStartIndex, srcEndIndex)) {\n    for (var _i = 0; _i < size; _i++) {\n      target[targetIndex++] = positions[srcStartIndex + _i];\n    }\n  }\n  return targetIndex;\n}\nexport function normalize(polygon, positionSize) {\n  validate(polygon);\n  var positions = [];\n  var holeIndices = [];\n  if (polygon.positions) {\n    var _polygon = polygon,\n      srcPositions = _polygon.positions,\n      srcHoleIndices = _polygon.holeIndices;\n    if (srcHoleIndices) {\n      var targetIndex = 0;\n      for (var i = 0; i <= srcHoleIndices.length; i++) {\n        targetIndex = copyFlatRing(positions, targetIndex, srcPositions, positionSize, srcHoleIndices[i - 1], srcHoleIndices[i]);\n        holeIndices.push(targetIndex);\n      }\n      holeIndices.pop();\n      return {\n        positions: positions,\n        holeIndices: holeIndices\n      };\n    }\n    polygon = srcPositions;\n  }\n  if (Number.isFinite(polygon[0])) {\n    copyFlatRing(positions, 0, polygon, positionSize);\n    return positions;\n  }\n  if (!isSimple(polygon)) {\n    var _targetIndex = 0;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n    try {\n      for (var _iterator = polygon[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var simplePolygon = _step.value;\n        _targetIndex = copyNestedRing(positions, _targetIndex, simplePolygon, positionSize);\n        holeIndices.push(_targetIndex);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n          _iterator[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n    holeIndices.pop();\n    return {\n      positions: positions,\n      holeIndices: holeIndices\n    };\n  }\n  copyNestedRing(positions, 0, polygon, positionSize);\n  return positions;\n}\nexport function getSurfaceIndices(normalizedPolygon, positionSize, preproject) {\n  var holeIndices = null;\n  if (normalizedPolygon.holeIndices) {\n    holeIndices = normalizedPolygon.holeIndices.map(function (positionIndex) {\n      return positionIndex / positionSize;\n    });\n  }\n  var positions = normalizedPolygon.positions || normalizedPolygon;\n  if (preproject) {\n    var n = positions.length;\n    positions = positions.slice();\n    var p = [];\n    for (var i = 0; i < n; i += positionSize) {\n      p[0] = positions[i];\n      p[1] = positions[i + 1];\n      var xy = preproject(p);\n      positions[i] = xy[0];\n      positions[i + 1] = xy[1];\n    }\n  }\n  return earcut(positions, holeIndices, positionSize);\n}","map":{"version":3,"sources":["../../../src/solid-polygon-layer/polygon.js"],"names":["earcut","validate","polygon","positions","Array","isArray","ArrayBuffer","isView","Error","isSimple","length","Number","isFinite","isNestedRingClosed","simplePolygon","p0","p1","isFlatRingClosed","size","startIndex","endIndex","i","copyNestedRing","target","targetStartIndex","targetIndex","len","j","copyFlatRing","srcStartIndex","srcEndIndex","srcLength","normalize","positionSize","holeIndices","srcPositions","srcHoleIndices","push","pop","getSurfaceIndices","normalizedPolygon","preproject","map","positionIndex","n","slice","p","xy"],"mappings":"AAqBA,OAAOA,MAAP,MAAmB,QAAnB;AAcA,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;EACzBA,OAAO,GAAIA,OAAO,IAAIA,OAAO,CAACC,SAApB,IAAkCD,OAA5CA;EACA,IAAI,CAACE,KAAK,CAACC,OAAND,CAAcF,OAAdE,CAAD,IAA2B,CAACE,WAAW,CAACC,MAAZD,CAAmBJ,OAAnBI,CAAhC,EAA6D;IAC3D,MAAM,IAAIE,KAAJ,CAAU,iBAAV,CAAN;EACD;AACF;AAOD,SAASC,QAAT,CAAkBP,OAAlB,EAA2B;EACzB,OAAOA,OAAO,CAACQ,MAARR,IAAkB,CAAlBA,IAAuBA,OAAO,CAAC,CAAD,CAAPA,CAAWQ,MAAXR,IAAqB,CAA5CA,IAAiDS,MAAM,CAACC,QAAPD,CAAgBT,OAAO,CAAC,CAAD,CAAPA,CAAW,CAAXA,CAAhBS,CAAxD;AACD;AAOD,SAASE,kBAAT,CAA4BC,aAA5B,EAA2C;EAEzC,IAAMC,EAAE,GAAGD,aAAa,CAAC,CAAD,CAAxB;EACA,IAAME,EAAE,GAAGF,aAAa,CAACA,aAAa,CAACJ,MAAdI,GAAuB,CAAxB,CAAxB;EAEA,OAAOC,EAAE,CAAC,CAAD,CAAFA,KAAUC,EAAE,CAAC,CAAD,CAAZD,IAAmBA,EAAE,CAAC,CAAD,CAAFA,KAAUC,EAAE,CAAC,CAAD,CAA/BD,IAAsCA,EAAE,CAAC,CAAD,CAAFA,KAAUC,EAAE,CAAC,CAAD,CAAzD;AACD;AAUD,SAASC,gBAAT,CAA0Bd,SAA1B,EAAqCe,IAArC,EAA2CC,UAA3C,EAAuDC,QAAvD,EAAiE;EAC/D,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAApB,EAA0BG,CAAC,EAA3B,EAA+B;IAC7B,IAAIlB,SAAS,CAACgB,UAAU,GAAGE,CAAd,CAATlB,KAA8BA,SAAS,CAACiB,QAAQ,GAAGF,IAAXE,GAAkBC,CAAnB,CAA3C,EAAkE;MAChE,OAAO,KAAP;IACD;EACF;EACD,OAAO,IAAP;AACD;AAUD,SAASC,cAAT,CAAwBC,MAAxB,EAAgCC,gBAAhC,EAAkDV,aAAlD,EAAiEI,IAAjE,EAAuE;EACrE,IAAIO,WAAW,GAAGD,gBAAlB;EACA,IAAME,GAAG,GAAGZ,aAAa,CAACJ,MAA1B;EACA,KAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,GAApB,EAAyBL,CAAC,EAA1B,EAA8B;IAC5B,KAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,IAApB,EAA0BS,CAAC,EAA3B,EAA+B;MAC7BJ,MAAM,CAACE,WAAW,EAAZ,CAANF,GAAwBT,aAAa,CAACO,CAAD,CAAbP,CAAiBa,CAAjBb,CAAAA,IAAuB,CAA/CS;IACD;EACF;EAED,IAAI,CAACV,kBAAkB,CAACC,aAAD,CAAvB,EAAwC;IACtC,KAAK,IAAIa,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGT,IAApB,EAA0BS,EAAC,EAA3B,EAA+B;MAC7BJ,MAAM,CAACE,WAAW,EAAZ,CAANF,GAAwBT,aAAa,CAAC,CAAD,CAAbA,CAAiBa,EAAjBb,CAAAA,IAAuB,CAA/CS;IACD;EACF;EACD,OAAOE,WAAP;AACD;AAYD,SAASG,YAAT,CAAsBL,MAAtB,EAA8BC,gBAA9B,EAAgDrB,SAAhD,EAA2De,IAA3D,EAAiG;EAAA,IAAhCW,aAAgC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAhB,CAAgB;EAAA,IAAbC,WAAa,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA;EAC/FA,WAAW,GAAGA,WAAW,IAAI3B,SAAS,CAACO,MAAvCoB;EACA,IAAMC,SAAS,GAAGD,WAAW,GAAGD,aAAhC;EACA,IAAIE,SAAS,IAAI,CAAjB,EAAoB;IAClB,OAAOP,gBAAP;EACD;EACD,IAAIC,WAAW,GAAGD,gBAAlB;EAEA,KAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGU,SAApB,EAA+BV,CAAC,EAAhC,EAAoC;IAClCE,MAAM,CAACE,WAAW,EAAZ,CAANF,GAAwBpB,SAAS,CAAC0B,aAAa,GAAGR,CAAjB,CAAjCE;EACD;EAED,IAAI,CAACN,gBAAgB,CAACd,SAAD,EAAYe,IAAZ,EAAkBW,aAAlB,EAAiCC,WAAjC,CAArB,EAAoE;IAClE,KAAK,IAAIT,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGH,IAApB,EAA0BG,EAAC,EAA3B,EAA+B;MAC7BE,MAAM,CAACE,WAAW,EAAZ,CAANF,GAAwBpB,SAAS,CAAC0B,aAAa,GAAGR,EAAjB,CAAjCE;IACD;EACF;EACD,OAAOE,WAAP;AACD;AAWD,OAAO,SAASO,SAAT,CAAmB9B,OAAnB,EAA4B+B,YAA5B,EAA0C;EAC/ChC,QAAQ,CAACC,OAAD,CAARD;EAEA,IAAME,SAAS,GAAG,EAAlB;EACA,IAAM+B,WAAW,GAAG,EAApB;EAEA,IAAIhC,OAAO,CAACC,SAAZ,EAAuB;IAAA,IAAA,QAAA,GAE0CD,OAF1C;MAEHiC,YAFG,GAAA,QAAA,CAEdhC,SAFc;MAEwBiC,cAFxB,GAAA,QAAA,CAEWF,WAFX;IAIrB,IAAIE,cAAJ,EAAoB;MAClB,IAAIX,WAAW,GAAG,CAAlB;MAIA,KAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIe,cAAc,CAAC1B,MAApC,EAA4CW,CAAC,EAA7C,EAAiD;QAC/CI,WAAW,GAAGG,YAAY,CACxBzB,SADwB,EAExBsB,WAFwB,EAGxBU,YAHwB,EAIxBF,YAJwB,EAKxBG,cAAc,CAACf,CAAC,GAAG,CAAL,CALU,EAMxBe,cAAc,CAACf,CAAD,CANU,CAA1BI;QAQAS,WAAW,CAACG,IAAZH,CAAiBT,WAAjBS,CAAAA;MACD;MAEDA,WAAW,CAACI,GAAZJ,EAAAA;MAEA,OAAO;QAAC/B,SAAS,EAATA,SAAD;QAAY+B,WAAW,EAAXA;MAAZ,CAAP;IACD;IACDhC,OAAO,GAAGiC,YAAVjC;EACD;EACD,IAAIS,MAAM,CAACC,QAAPD,CAAgBT,OAAO,CAAC,CAAD,CAAvBS,CAAJ,EAAiC;IAE/BiB,YAAY,CAACzB,SAAD,EAAY,CAAZ,EAAeD,OAAf,EAAwB+B,YAAxB,CAAZL;IACA,OAAOzB,SAAP;EACD;EACD,IAAI,CAACM,QAAQ,CAACP,OAAD,CAAb,EAAwB;IAEtB,IAAIuB,YAAW,GAAG,CAAlB;IAFsB,IAAA,yBAAA,GAAA,IAAA;IAAA,IAAA,iBAAA,GAAA,KAAA;IAAA,IAAA,cAAA,GAAA,SAAA;IAAA,IAAA;MAItB,KAAA,IAAA,SAAA,GAA4BvB,OAA5B,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA,EAAA,yBAAA,GAAA,CAAA,KAAA,GAAA,SAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,yBAAA,GAAA,IAAA,EAAqC;QAAA,IAA1BY,aAA0B,GAAA,KAAA,CAAA,KAAA;QACnCW,YAAW,GAAGH,cAAc,CAACnB,SAAD,EAAYsB,YAAZ,EAAyBX,aAAzB,EAAwCmB,YAAxC,CAA5BR;QACAS,WAAW,CAACG,IAAZH,CAAiBT,YAAjBS,CAAAA;MACD;IAPqB,CAAA,CAAA,OAAA,GAAA,EAAA;MAAA,iBAAA,GAAA,IAAA;MAAA,cAAA,GAAA,GAAA;IAAA,CAAA,SAAA;MAAA,IAAA;QAAA,IAAA,CAAA,yBAAA,IAAA,SAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;UAAA,SAAA,CAAA,QAAA,CAAA,EAAA;QAAA;MAAA,CAAA,SAAA;QAAA,IAAA,iBAAA,EAAA;UAAA,MAAA,cAAA;QAAA;MAAA;IAAA;IAStBA,WAAW,CAACI,GAAZJ,EAAAA;IAEA,OAAO;MAAC/B,SAAS,EAATA,SAAD;MAAY+B,WAAW,EAAXA;IAAZ,CAAP;EACD;EAEDZ,cAAc,CAACnB,SAAD,EAAY,CAAZ,EAAeD,OAAf,EAAwB+B,YAAxB,CAAdX;EACA,OAAOnB,SAAP;AACD;AASD,OAAO,SAASoC,iBAAT,CAA2BC,iBAA3B,EAA8CP,YAA9C,EAA4DQ,UAA5D,EAAwE;EAC7E,IAAIP,WAAW,GAAG,IAAlB;EAEA,IAAIM,iBAAiB,CAACN,WAAtB,EAAmC;IACjCA,WAAW,GAAG,iBAAiB,CAACA,WAAlB,CAA8BQ,GAA9B,CAAkC,UAAA,aAAa,EAAA;MAAA,OAAIC,aAAa,GAAGV,YAApB;IAAA,CAA/C,CAAdC;EACD;EACD,IAAI/B,SAAS,GAAGqC,iBAAiB,CAACrC,SAAlBqC,IAA+BA,iBAA/C;EAEA,IAAIC,UAAJ,EAAgB;IAEd,IAAMG,CAAC,GAAGzC,SAAS,CAACO,MAApB;IAEAP,SAAS,GAAGA,SAAS,CAAC0C,KAAV1C,EAAZA;IACA,IAAM2C,CAAC,GAAG,EAAV;IACA,KAAK,IAAIzB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuB,CAApB,EAAuBvB,CAAC,IAAIY,YAA5B,EAA0C;MACxCa,CAAC,CAAC,CAAD,CAADA,GAAO3C,SAAS,CAACkB,CAAD,CAAhByB;MACAA,CAAC,CAAC,CAAD,CAADA,GAAO3C,SAAS,CAACkB,CAAC,GAAG,CAAL,CAAhByB;MACA,IAAMC,EAAE,GAAGN,UAAU,CAACK,CAAD,CAArB;MACA3C,SAAS,CAACkB,CAAD,CAATlB,GAAe4C,EAAE,CAAC,CAAD,CAAjB5C;MACAA,SAAS,CAACkB,CAAC,GAAG,CAAL,CAATlB,GAAmB4C,EAAE,CAAC,CAAD,CAArB5C;IACD;EACF;EAGD,OAAOH,MAAM,CAACG,SAAD,EAAY+B,WAAZ,EAAyBD,YAAzB,CAAb;AACD","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable max-params */\nimport earcut from 'earcut';\n\n// 4 data formats are supported:\n// Simple Polygon: an array of points\n// Complex Polygon: an array of array of points (array of rings)\n//   with the first ring representing the outer hull and other rings representing holes\n// Simple Flat: an array of numbers (flattened \"simple polygon\")\n// Complex Flat: {position: array<number>, holeIndices: array<number>}\n//   (flattened \"complex polygon\")\n\n/**\n * Ensure a polygon is valid format\n * @param {Array|Object} polygon\n */\nfunction validate(polygon) {\n  polygon = (polygon && polygon.positions) || polygon;\n  if (!Array.isArray(polygon) && !ArrayBuffer.isView(polygon)) {\n    throw new Error('invalid polygon');\n  }\n}\n\n/**\n * Check if a polygon is simple or complex\n * @param {Array} polygon - either a complex or simple polygon\n * @return {Boolean} - true if the polygon is a simple polygon (i.e. not an array of polygons)\n */\nfunction isSimple(polygon) {\n  return polygon.length >= 1 && polygon[0].length >= 2 && Number.isFinite(polygon[0][0]);\n}\n\n/**\n * Check if a simple polygon is a closed ring\n * @param {Array} simplePolygon - array of points\n * @return {Boolean} - true if the simple polygon is a closed ring\n */\nfunction isNestedRingClosed(simplePolygon) {\n  // check if first and last vertex are the same\n  const p0 = simplePolygon[0];\n  const p1 = simplePolygon[simplePolygon.length - 1];\n\n  return p0[0] === p1[0] && p0[1] === p1[1] && p0[2] === p1[2];\n}\n\n/**\n * Check if a simple flat array is a closed ring\n * @param {Array} positions - array of numbers\n * @param {Number} size - size of a position, 2 (xy) or 3 (xyz)\n * @param {Number} startIndex - start index of the path in the positions array\n * @param {Number} endIndex - end index of the path in the positions array\n * @return {Boolean} - true if the simple flat array is a closed ring\n */\nfunction isFlatRingClosed(positions, size, startIndex, endIndex) {\n  for (let i = 0; i < size; i++) {\n    if (positions[startIndex + i] !== positions[endIndex - size + i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Copy a simple polygon coordinates into a flat array, closes the ring if needed.\n * @param {Float64Array} target - destination\n * @param {Number} targetStartIndex - index in the destination to start copying into\n * @param {Array} simplePolygon - array of points\n * @param {Number} size - size of a position, 2 (xy) or 3 (xyz)\n * @returns {Number} - the index of the write head in the destination\n */\nfunction copyNestedRing(target, targetStartIndex, simplePolygon, size) {\n  let targetIndex = targetStartIndex;\n  const len = simplePolygon.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[i][j] || 0;\n    }\n  }\n\n  if (!isNestedRingClosed(simplePolygon)) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[0][j] || 0;\n    }\n  }\n  return targetIndex;\n}\n\n/**\n * Copy a simple flat array into another flat array, closes the ring if needed.\n * @param {Float64Array} target - destination\n * @param {Number} targetStartIndex - index in the destination to start copying into\n * @param {Array} positions - array of numbers\n * @param {Number} size - size of a position, 2 (xy) or 3 (xyz)\n * @param {Number} [srcStartIndex] - start index of the path in the positions array\n * @param {Number} [srcEndIndex] - end index of the path in the positions array\n * @returns {Number} - the index of the write head in the destination\n */\nfunction copyFlatRing(target, targetStartIndex, positions, size, srcStartIndex = 0, srcEndIndex) {\n  srcEndIndex = srcEndIndex || positions.length;\n  const srcLength = srcEndIndex - srcStartIndex;\n  if (srcLength <= 0) {\n    return targetStartIndex;\n  }\n  let targetIndex = targetStartIndex;\n\n  for (let i = 0; i < srcLength; i++) {\n    target[targetIndex++] = positions[srcStartIndex + i];\n  }\n\n  if (!isFlatRingClosed(positions, size, srcStartIndex, srcEndIndex)) {\n    for (let i = 0; i < size; i++) {\n      target[targetIndex++] = positions[srcStartIndex + i];\n    }\n  }\n  return targetIndex;\n}\n\n/**\n * Normalize any polygon representation into the \"complex flat\" format\n * @param {Array|Object} polygon\n * @param {Number} positionSize - size of a position, 2 (xy) or 3 (xyz)\n * @param {Number} [vertexCount] - pre-computed vertex count in the polygon.\n *   If provided, will skip counting.\n * @return {Object} - {positions: <Float64Array>, holeIndices: <Array|null>}\n */\n/* eslint-disable max-statements */\nexport function normalize(polygon, positionSize) {\n  validate(polygon);\n\n  const positions = [];\n  const holeIndices = [];\n\n  if (polygon.positions) {\n    // complex flat\n    const {positions: srcPositions, holeIndices: srcHoleIndices} = polygon;\n\n    if (srcHoleIndices) {\n      let targetIndex = 0;\n      // split the positions array into `holeIndices.length + 1` rings\n      // holeIndices[-1] falls back to 0\n      // holeIndices[holeIndices.length] falls back to positions.length\n      for (let i = 0; i <= srcHoleIndices.length; i++) {\n        targetIndex = copyFlatRing(\n          positions,\n          targetIndex,\n          srcPositions,\n          positionSize,\n          srcHoleIndices[i - 1],\n          srcHoleIndices[i]\n        );\n        holeIndices.push(targetIndex);\n      }\n      // The last one is not a starting index of a hole, remove\n      holeIndices.pop();\n\n      return {positions, holeIndices};\n    }\n    polygon = srcPositions;\n  }\n  if (Number.isFinite(polygon[0])) {\n    // simple flat\n    copyFlatRing(positions, 0, polygon, positionSize);\n    return positions;\n  }\n  if (!isSimple(polygon)) {\n    // complex polygon\n    let targetIndex = 0;\n\n    for (const simplePolygon of polygon) {\n      targetIndex = copyNestedRing(positions, targetIndex, simplePolygon, positionSize);\n      holeIndices.push(targetIndex);\n    }\n    // The last one is not a starting index of a hole, remove\n    holeIndices.pop();\n    // last index points to the end of the array, remove it\n    return {positions, holeIndices};\n  }\n  // simple polygon\n  copyNestedRing(positions, 0, polygon, positionSize);\n  return positions;\n}\n/* eslint-enable max-statements */\n\n/*\n * Get vertex indices for drawing polygon mesh\n * @param {Object} normalizedPolygon - {positions, holeIndices}\n * @param {Number} positionSize - size of a position, 2 (xy) or 3 (xyz)\n * @returns {Array} array of indices\n */\nexport function getSurfaceIndices(normalizedPolygon, positionSize, preproject) {\n  let holeIndices = null;\n\n  if (normalizedPolygon.holeIndices) {\n    holeIndices = normalizedPolygon.holeIndices.map(positionIndex => positionIndex / positionSize);\n  }\n  let positions = normalizedPolygon.positions || normalizedPolygon;\n\n  if (preproject) {\n    // When tesselating lnglat coordinates, project them to the common space for accuracy\n    const n = positions.length;\n    // Clone the array\n    positions = positions.slice();\n    const p = [];\n    for (let i = 0; i < n; i += positionSize) {\n      p[0] = positions[i];\n      p[1] = positions[i + 1];\n      const xy = preproject(p);\n      positions[i] = xy[0];\n      positions[i + 1] = xy[1];\n    }\n  }\n\n  // Let earcut triangulate the polygon\n  return earcut(positions, holeIndices, positionSize);\n}\n"]},"metadata":{},"sourceType":"module"}