{"ast":null,"code":"import { global, isBrowser } from '../utils/globals';\nvar _parseImageNode = global._parseImageNode;\nvar IMAGE_SUPPORTED = typeof Image !== 'undefined';\nvar IMAGE_BITMAP_SUPPORTED = typeof ImageBitmap !== 'undefined';\nvar NODE_IMAGE_SUPPORTED = Boolean(_parseImageNode);\nvar DATA_SUPPORTED = isBrowser ? true : NODE_IMAGE_SUPPORTED;\nexport function isImageTypeSupported(type) {\n  switch (type) {\n    case 'auto':\n      return IMAGE_BITMAP_SUPPORTED || IMAGE_SUPPORTED || DATA_SUPPORTED;\n    case 'imagebitmap':\n      return IMAGE_BITMAP_SUPPORTED;\n    case 'image':\n      return IMAGE_SUPPORTED;\n    case 'data':\n      return DATA_SUPPORTED;\n    case 'html':\n      return IMAGE_SUPPORTED;\n    case 'ndarray':\n      return DATA_SUPPORTED;\n    default:\n      throw new Error(\"@loaders.gl/images: image \".concat(type, \" not supported in this environment\"));\n  }\n}\nexport function getDefaultImageType() {\n  if (IMAGE_BITMAP_SUPPORTED) {\n    return 'imagebitmap';\n  }\n  if (IMAGE_SUPPORTED) {\n    return 'image';\n  }\n  if (DATA_SUPPORTED) {\n    return 'data';\n  }\n  throw new Error(\"Install '@loaders.gl/polyfills' to parse images under Node.js\");\n}","map":{"version":3,"sources":["../../../../src/lib/category-api/image-type.js"],"names":["global","isBrowser","_parseImageNode","IMAGE_SUPPORTED","Image","IMAGE_BITMAP_SUPPORTED","ImageBitmap","NODE_IMAGE_SUPPORTED","Boolean","DATA_SUPPORTED","isImageTypeSupported","type","Error","getDefaultImageType"],"mappings":"AACA,SAAQA,MAAR,EAAgBC,SAAhB,QAAgC,kBAAhC;IAGOC,e,GAAmBF,M,CAAnBE,e;AAEP,IAAMC,eAAe,GAAG,OAAOC,KAAP,KAAiB,WAAzC;AACA,IAAMC,sBAAsB,GAAG,OAAOC,WAAP,KAAuB,WAAtD;AACA,IAAMC,oBAAoB,GAAGC,OAAO,CAACN,eAAD,CAApC;AACA,IAAMO,cAAc,GAAGR,SAAS,GAAG,IAAH,GAAUM,oBAA1C;AAGA,OAAO,SAASG,oBAAT,CAA8BC,IAA9B,EAAoC;EACzC,QAAQA,IAAR;IACE,KAAK,MAAL;MAEE,OAAON,sBAAsB,IAAIF,eAA1BE,IAA6CI,cAApD;IAEF,KAAK,aAAL;MACE,OAAOJ,sBAAP;IACF,KAAK,OAAL;MACE,OAAOF,eAAP;IACF,KAAK,MAAL;MACE,OAAOM,cAAP;IAGF,KAAK,MAAL;MACE,OAAON,eAAP;IACF,KAAK,SAAL;MACE,OAAOM,cAAP;IAEF;MACE,MAAM,IAAIG,KAAJ,CAAA,4BAAA,CAAA,MAAA,CAAuCD,IAAvC,EAAA,oCAAA,CAAA,CAAN;EAAA;AAEL;AAGD,OAAO,SAASE,mBAAT,GAA+B;EACpC,IAAIR,sBAAJ,EAA4B;IAC1B,OAAO,aAAP;EACD;EACD,IAAIF,eAAJ,EAAqB;IACnB,OAAO,OAAP;EACD;EACD,IAAIM,cAAJ,EAAoB;IAClB,OAAO,MAAP;EACD;EAGD,MAAM,IAAIG,KAAJ,CAAA,+DAAA,CAAN;AACD","sourcesContent":["/* global ImageBitmap, Image */\nimport {global, isBrowser} from '../utils/globals';\n\n// @ts-ignore TS2339: Property does not exist on type\nconst {_parseImageNode} = global;\n\nconst IMAGE_SUPPORTED = typeof Image !== 'undefined'; // NOTE: \"false\" positives if jsdom is installed\nconst IMAGE_BITMAP_SUPPORTED = typeof ImageBitmap !== 'undefined';\nconst NODE_IMAGE_SUPPORTED = Boolean(_parseImageNode);\nconst DATA_SUPPORTED = isBrowser ? true : NODE_IMAGE_SUPPORTED;\n\n// Checks if a loaders.gl image type is supported\nexport function isImageTypeSupported(type) {\n  switch (type) {\n    case 'auto':\n      // Should only ever be false in Node.js, if polyfills have not been installed...\n      return IMAGE_BITMAP_SUPPORTED || IMAGE_SUPPORTED || DATA_SUPPORTED;\n\n    case 'imagebitmap':\n      return IMAGE_BITMAP_SUPPORTED;\n    case 'image':\n      return IMAGE_SUPPORTED;\n    case 'data':\n      return DATA_SUPPORTED;\n\n    // DEPRECATED types\n    case 'html':\n      return IMAGE_SUPPORTED;\n    case 'ndarray':\n      return DATA_SUPPORTED;\n\n    default:\n      throw new Error(`@loaders.gl/images: image ${type} not supported in this environment`);\n  }\n}\n\n// Returns the best loaders.gl image type supported on current run-time environment\nexport function getDefaultImageType() {\n  if (IMAGE_BITMAP_SUPPORTED) {\n    return 'imagebitmap';\n  }\n  if (IMAGE_SUPPORTED) {\n    return 'image';\n  }\n  if (DATA_SUPPORTED) {\n    return 'data';\n  }\n\n  // This should only happen in Node.js\n  throw new Error(`Install '@loaders.gl/polyfills' to parse images under Node.js`);\n}\n"]},"metadata":{},"sourceType":"module"}