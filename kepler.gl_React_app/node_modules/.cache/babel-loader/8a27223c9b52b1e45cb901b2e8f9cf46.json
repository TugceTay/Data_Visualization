{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _styledComponents = require(\"../../common/styled-components\");\nvar _polygonFilter = _interopRequireDefault(require(\"../polygon-filter\"));\nvar _panelHeaderAction = _interopRequireDefault(require(\"../../side-panel/panel-header-action\"));\nvar _icons = require(\"../../common/icons\");\nvar _filterPanelHeader = _interopRequireDefault(require(\"../../side-panel/filter-panel/filter-panel-header\"));\nvar _components = require(\"../components\");\nvar _lodash = _interopRequireDefault(require(\"lodash.get\"));\n\n// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nPolygonFilterPanelFactory.deps = [_filterPanelHeader[\"default\"], _polygonFilter[\"default\"], _panelHeaderAction[\"default\"]];\nfunction PolygonFilterPanelFactory(FilterPanelHeader, PolygonFilter, PanelHeaderAction) {\n  /** @type {import('./filter-panel-types').FilterPanelComponent} */\n  var PolygonFilterPanel = /*#__PURE__*/_react[\"default\"].memo(function (_ref) {\n    var idx = _ref.idx,\n      datasets = _ref.datasets,\n      layers = _ref.layers,\n      allAvailableFields = _ref.allAvailableFields,\n      filter = _ref.filter,\n      removeFilter = _ref.removeFilter,\n      setFilter = _ref.setFilter,\n      toggleFilterFeature = _ref.toggleFilterFeature;\n    var filterDatasets = (0, _react.useMemo)(function () {\n      return filter.dataId.map(function (d) {\n        return datasets[d];\n      });\n    }, [filter, datasets]);\n    var onSetLayers = (0, _react.useCallback)(function (value) {\n      return setFilter(idx, 'layerId', value);\n    }, [setFilter, idx]);\n    var isVisible = (0, _lodash[\"default\"])(filter, ['value', 'properties', 'isVisible'], true);\n    var featureType = (0, _lodash[\"default\"])(filter, ['value', 'properties', 'renderType'], true);\n    return /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n      className: \"polygon-filter-panel\"\n    }, /*#__PURE__*/_react[\"default\"].createElement(FilterPanelHeader, {\n      datasets: filterDatasets,\n      allAvailableFields: allAvailableFields,\n      idx: idx,\n      filter: filter,\n      removeFilter: removeFilter\n    }, /*#__PURE__*/_react[\"default\"].createElement(_components.StyledFilterPanel, null, \"Geo - \", featureType), /*#__PURE__*/_react[\"default\"].createElement(PanelHeaderAction, {\n      id: filter.id,\n      onClick: toggleFilterFeature,\n      tooltip: isVisible ? 'tooltip.hideFeature' : 'tooltip.showFeature',\n      IconComponent: isVisible ? _icons.EyeSeen : _icons.EyeUnseen,\n      active: isVisible\n    })), /*#__PURE__*/_react[\"default\"].createElement(_styledComponents.StyledFilterContent, {\n      className: \"filter-panel__content\"\n    }, /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n      className: \"filter-panel__filter\"\n    }, /*#__PURE__*/_react[\"default\"].createElement(PolygonFilter, {\n      filter: filter,\n      layers: layers,\n      setLayers: onSetLayers,\n      toggleFilterFeature: toggleFilterFeature\n    }))));\n  });\n  PolygonFilterPanel.displayName = 'PolygonFilterPanel';\n  return PolygonFilterPanel;\n}\nvar _default = PolygonFilterPanelFactory;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../../../../src/components/filters/filter-panels/polygon-filter-panel.js"],"names":["PolygonFilterPanelFactory","deps","FilterPanelHeaderFactory","PolygonFilterFactory","PanelHeaderActionFactory","FilterPanelHeader","PolygonFilter","PanelHeaderAction","PolygonFilterPanel","memo","idx","datasets","layers","allAvailableFields","filter","removeFilter","setFilter","toggleFilterFeature","filterDatasets","dataId","map","d","onSetLayers","value","isVisible","featureType","id","EyeSeen","EyeUnseen","displayName"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport React, {useMemo, useCallback} from 'react';\nimport {StyledFilterContent} from 'components/common/styled-components';\nimport PolygonFilterFactory from 'components/filters/polygon-filter';\nimport PanelHeaderActionFactory from 'components/side-panel/panel-header-action';\nimport {EyeSeen, EyeUnseen} from 'components/common/icons';\n\nimport FilterPanelHeaderFactory from 'components/side-panel/filter-panel/filter-panel-header';\nimport {StyledFilterPanel} from '../components';\n\nimport get from 'lodash.get';\n\nPolygonFilterPanelFactory.deps = [\n  FilterPanelHeaderFactory,\n  PolygonFilterFactory,\n  PanelHeaderActionFactory\n];\n\nfunction PolygonFilterPanelFactory(FilterPanelHeader, PolygonFilter, PanelHeaderAction) {\n  /** @type {import('./filter-panel-types').FilterPanelComponent} */\n  const PolygonFilterPanel = React.memo(\n    ({\n      idx,\n      datasets,\n      layers,\n      allAvailableFields,\n      filter,\n      removeFilter,\n      setFilter,\n      toggleFilterFeature\n    }) => {\n      const filterDatasets = useMemo(() => filter.dataId.map(d => datasets[d]), [filter, datasets]);\n\n      const onSetLayers = useCallback(value => setFilter(idx, 'layerId', value), [setFilter, idx]);\n\n      const isVisible = get(filter, ['value', 'properties', 'isVisible'], true);\n      const featureType = get(filter, ['value', 'properties', 'renderType'], true);\n\n      return (\n        <div className=\"polygon-filter-panel\">\n          <FilterPanelHeader\n            datasets={filterDatasets}\n            allAvailableFields={allAvailableFields}\n            idx={idx}\n            filter={filter}\n            removeFilter={removeFilter}\n          >\n            <StyledFilterPanel>Geo - {featureType}</StyledFilterPanel>\n            <PanelHeaderAction\n              id={filter.id}\n              onClick={toggleFilterFeature}\n              tooltip={isVisible ? 'tooltip.hideFeature' : 'tooltip.showFeature'}\n              IconComponent={isVisible ? EyeSeen : EyeUnseen}\n              active={isVisible}\n            />\n          </FilterPanelHeader>\n          <StyledFilterContent className=\"filter-panel__content\">\n            <div className=\"filter-panel__filter\">\n              <PolygonFilter\n                filter={filter}\n                layers={layers}\n                setLayers={onSetLayers}\n                toggleFilterFeature={toggleFilterFeature}\n              />\n            </div>\n          </StyledFilterContent>\n        </div>\n      );\n    }\n  );\n\n  PolygonFilterPanel.displayName = 'PolygonFilterPanel';\n\n  return PolygonFilterPanel;\n}\n\nexport default PolygonFilterPanelFactory;\n"]},"metadata":{},"sourceType":"script"}