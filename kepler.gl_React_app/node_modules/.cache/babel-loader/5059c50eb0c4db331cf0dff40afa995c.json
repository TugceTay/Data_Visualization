{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport Tiles3DLoader from './tiles-3d-loader';\nimport { getIonTilesetMetadata } from './lib/ion/ion';\nfunction preload(_x) {\n  return _preload.apply(this, arguments);\n}\nfunction _preload() {\n  _preload = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(url) {\n    var options,\n      _options,\n      accessToken,\n      assetId,\n      matched,\n      _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n            options = options['cesium-ion'] || {};\n            _options = options, accessToken = _options.accessToken;\n            assetId = options.assetId;\n            if (!Number.isFinite(assetId)) {\n              matched = url.match(/\\/([0-9]+)\\/tileset.json/);\n              assetId = matched && matched[1];\n            }\n            return _context2.abrupt(\"return\", getIonTilesetMetadata(accessToken, assetId));\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _preload.apply(this, arguments);\n}\nvar CesiumIonLoader = _objectSpread(_objectSpread({}, Tiles3DLoader), {}, {\n  id: 'cesium-ion',\n  name: 'Cesium Ion',\n  preload: preload,\n  parse: function () {\n    var _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, options, context, loader) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options['3d-tiles'] = options['cesium-ion'];\n              options.loader = CesiumIonLoader;\n              return _context.abrupt(\"return\", Tiles3DLoader.parse(data, options, context));\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    function parse(_x2, _x3, _x4, _x5) {\n      return _parse.apply(this, arguments);\n    }\n    return parse;\n  }(),\n  options: {\n    'cesium-ion': _objectSpread(_objectSpread({}, Tiles3DLoader.options['3d-tiles']), {}, {\n      accessToken: null\n    })\n  }\n});\nexport default CesiumIonLoader;","map":{"version":3,"sources":["../../src/cesium-ion-loader.js"],"names":["Tiles3DLoader","getIonTilesetMetadata","preload","url","options","accessToken","assetId","Number","isFinite","matched","match","CesiumIonLoader","id","name","parse","data","context","loader"],"mappings":"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","sourcesContent":["import Tiles3DLoader from './tiles-3d-loader';\nimport {getIonTilesetMetadata} from './lib/ion/ion';\n\nasync function preload(url, options = {}) {\n  options = options['cesium-ion'] || {};\n  const {accessToken} = options;\n  let assetId = options.assetId;\n  if (!Number.isFinite(assetId)) {\n    const matched = url.match(/\\/([0-9]+)\\/tileset.json/);\n    assetId = matched && matched[1];\n  }\n  return getIonTilesetMetadata(accessToken, assetId);\n}\n\nconst CesiumIonLoader = {\n  ...Tiles3DLoader,\n  id: 'cesium-ion',\n  name: 'Cesium Ion',\n  preload,\n  parse: async (data, options, context, loader) => {\n    options['3d-tiles'] = options['cesium-ion'];\n    options.loader = CesiumIonLoader;\n    return Tiles3DLoader.parse(data, options, context); // , loader);\n  },\n  options: {\n    'cesium-ion': {\n      ...Tiles3DLoader.options['3d-tiles'],\n      accessToken: null\n    }\n  }\n};\n\nexport default CesiumIonLoader;\n"]},"metadata":{},"sourceType":"module"}