{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport Viewport from '../viewports/viewport';\nimport { parsePosition, getPosition } from '../utils/positions';\nimport { deepEqual } from '../utils/deep-equal';\nimport assert from '../utils/assert';\nvar View = function () {\n  function View() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, View);\n    var _props$id = props.id,\n      id = _props$id === void 0 ? null : _props$id,\n      _props$x = props.x,\n      x = _props$x === void 0 ? 0 : _props$x,\n      _props$y = props.y,\n      y = _props$y === void 0 ? 0 : _props$y,\n      _props$width = props.width,\n      width = _props$width === void 0 ? '100%' : _props$width,\n      _props$height = props.height,\n      height = _props$height === void 0 ? '100%' : _props$height,\n      _props$projectionMatr = props.projectionMatrix,\n      projectionMatrix = _props$projectionMatr === void 0 ? null : _props$projectionMatr,\n      _props$fovy = props.fovy,\n      fovy = _props$fovy === void 0 ? 50 : _props$fovy,\n      _props$near = props.near,\n      near = _props$near === void 0 ? 0.1 : _props$near,\n      _props$far = props.far,\n      far = _props$far === void 0 ? 1000 : _props$far,\n      _props$modelMatrix = props.modelMatrix,\n      modelMatrix = _props$modelMatrix === void 0 ? null : _props$modelMatrix,\n      _props$viewportInstan = props.viewportInstance,\n      viewportInstance = _props$viewportInstan === void 0 ? null : _props$viewportInstan,\n      _props$type = props.type,\n      type = _props$type === void 0 ? Viewport : _props$type;\n    assert(!viewportInstance || viewportInstance instanceof Viewport);\n    this.viewportInstance = viewportInstance;\n    this.id = id || this.constructor.displayName || 'view';\n    this.type = type;\n    this.props = Object.assign({}, props, {\n      id: this.id,\n      projectionMatrix: projectionMatrix,\n      fovy: fovy,\n      near: near,\n      far: far,\n      modelMatrix: modelMatrix\n    });\n    this._parseDimensions({\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    });\n    this.equals = this.equals.bind(this);\n    Object.seal(this);\n  }\n  _createClass(View, [{\n    key: \"equals\",\n    value: function equals(view) {\n      if (this === view) {\n        return true;\n      }\n      if (this.viewportInstance) {\n        return view.viewportInstance && this.viewportInstance.equals(view.viewportInstance);\n      }\n      var viewChanged = deepEqual(this.props, view.props);\n      return viewChanged;\n    }\n  }, {\n    key: \"makeViewport\",\n    value: function makeViewport(_ref) {\n      var width = _ref.width,\n        height = _ref.height,\n        viewState = _ref.viewState;\n      if (this.viewportInstance) {\n        return this.viewportInstance;\n      }\n      viewState = this.filterViewState(viewState);\n      var viewportDimensions = this.getDimensions({\n        width: width,\n        height: height\n      });\n      var props = _objectSpread({}, viewState, {}, this.props, {}, viewportDimensions);\n      return this._getViewport(props);\n    }\n  }, {\n    key: \"getViewStateId\",\n    value: function getViewStateId() {\n      switch (_typeof(this.props.viewState)) {\n        case 'string':\n          return this.props.viewState;\n        case 'object':\n          return this.props.viewState && this.props.viewState.id;\n        default:\n          return this.id;\n      }\n    }\n  }, {\n    key: \"filterViewState\",\n    value: function filterViewState(viewState) {\n      if (this.props.viewState && _typeof(this.props.viewState) === 'object') {\n        if (!this.props.viewState.id) {\n          return this.props.viewState;\n        }\n        var newViewState = Object.assign({}, viewState);\n        for (var key in this.props.viewState) {\n          if (key !== 'id') {\n            newViewState[key] = this.props.viewState[key];\n          }\n        }\n        return newViewState;\n      }\n      return viewState;\n    }\n  }, {\n    key: \"getDimensions\",\n    value: function getDimensions(_ref2) {\n      var width = _ref2.width,\n        height = _ref2.height;\n      return {\n        x: getPosition(this._x, width),\n        y: getPosition(this._y, height),\n        width: getPosition(this._width, width),\n        height: getPosition(this._height, height)\n      };\n    }\n  }, {\n    key: \"_getControllerProps\",\n    value: function _getControllerProps(defaultOpts) {\n      var opts = this.props.controller;\n      if (!opts) {\n        return null;\n      }\n      if (opts === true) {\n        return defaultOpts;\n      }\n      if (typeof opts === 'function') {\n        opts = {\n          type: opts\n        };\n      }\n      return Object.assign({}, defaultOpts, opts);\n    }\n  }, {\n    key: \"_getViewport\",\n    value: function _getViewport(props) {\n      var ViewportType = this.type;\n      return new ViewportType(props);\n    }\n  }, {\n    key: \"_parseDimensions\",\n    value: function _parseDimensions(_ref3) {\n      var x = _ref3.x,\n        y = _ref3.y,\n        width = _ref3.width,\n        height = _ref3.height;\n      this._x = parsePosition(x);\n      this._y = parsePosition(y);\n      this._width = parsePosition(width);\n      this._height = parsePosition(height);\n    }\n  }]);\n  return View;\n}();\nexport { View as default };","map":{"version":3,"sources":["../../../src/views/view.js"],"names":["Viewport","parsePosition","getPosition","deepEqual","assert","View","props","id","x","y","width","height","projectionMatrix","fovy","near","far","modelMatrix","viewportInstance","type","constructor","displayName","assign","_parseDimensions","equals","bind","Object","seal","view","viewChanged","viewState","filterViewState","viewportDimensions","getDimensions","_getViewport","newViewState","key","_x","_y","_width","_height","defaultOpts","opts","controller","ViewportType"],"mappings":"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","sourcesContent":["import Viewport from '../viewports/viewport';\nimport {parsePosition, getPosition} from '../utils/positions';\nimport {deepEqual} from '../utils/deep-equal';\nimport assert from '../utils/assert';\n\nexport default class View {\n  constructor(props = {}) {\n    const {\n      id = null,\n\n      // Window width/height in pixels (for pixel projection)\n      x = 0,\n      y = 0,\n      width = '100%',\n      height = '100%',\n\n      // Viewport Options\n      projectionMatrix = null, // Projection matrix\n      fovy = 50, // Perspective projection parameters, used if projectionMatrix not supplied\n      near = 0.1, // Distance of near clipping plane\n      far = 1000, // Distance of far clipping plane\n      modelMatrix = null, // A model matrix to be applied to position, to match the layer props API\n\n      // A View can be a wrapper for a viewport instance\n      viewportInstance = null,\n\n      // Internal: Viewport Type\n      type = Viewport // TODO - default to WebMercator?\n    } = props;\n\n    assert(!viewportInstance || viewportInstance instanceof Viewport);\n    this.viewportInstance = viewportInstance;\n\n    // Id\n    this.id = id || this.constructor.displayName || 'view';\n    this.type = type;\n\n    this.props = Object.assign({}, props, {\n      id: this.id,\n      projectionMatrix,\n      fovy,\n      near,\n      far,\n      modelMatrix\n    });\n\n    // Extents\n    this._parseDimensions({x, y, width, height});\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n\n    Object.seal(this);\n  }\n\n  equals(view) {\n    if (this === view) {\n      return true;\n    }\n\n    // if `viewportInstance` is set, it is the only prop that is used\n    // Delegate to `Viewport.equals`\n    if (this.viewportInstance) {\n      return view.viewportInstance && this.viewportInstance.equals(view.viewportInstance);\n    }\n\n    const viewChanged = deepEqual(this.props, view.props);\n\n    return viewChanged;\n  }\n\n  // Build a `Viewport` from a view descriptor\n  // TODO - add support for autosizing viewports using width and height\n  makeViewport({width, height, viewState}) {\n    if (this.viewportInstance) {\n      return this.viewportInstance;\n    }\n\n    viewState = this.filterViewState(viewState);\n\n    // Resolve relative viewport dimensions\n    const viewportDimensions = this.getDimensions({width, height});\n    const props = {...viewState, ...this.props, ...viewportDimensions};\n    return this._getViewport(props);\n  }\n\n  getViewStateId() {\n    switch (typeof this.props.viewState) {\n      case 'string':\n        // if View.viewState is a string, return it\n        return this.props.viewState;\n\n      case 'object':\n        // If it is an object, return its id component\n        return this.props.viewState && this.props.viewState.id;\n\n      default:\n        return this.id;\n    }\n  }\n\n  // Allows view to override (or completely define) viewState\n  filterViewState(viewState) {\n    if (this.props.viewState && typeof this.props.viewState === 'object') {\n      // If we have specified an id, then intent is to override,\n      // If not, completely specify the view state\n      if (!this.props.viewState.id) {\n        return this.props.viewState;\n      }\n\n      // Merge in all props from View's viewState, except id\n      const newViewState = Object.assign({}, viewState);\n      for (const key in this.props.viewState) {\n        if (key !== 'id') {\n          newViewState[key] = this.props.viewState[key];\n        }\n      }\n      return newViewState;\n    }\n\n    return viewState;\n  }\n\n  // Resolve relative viewport dimensions into actual dimensions (y='50%', width=800 => y=400)\n  getDimensions({width, height}) {\n    return {\n      x: getPosition(this._x, width),\n      y: getPosition(this._y, height),\n      width: getPosition(this._width, width),\n      height: getPosition(this._height, height)\n    };\n  }\n\n  // Used by sub classes to resolve controller props\n  _getControllerProps(defaultOpts) {\n    let opts = this.props.controller;\n\n    if (!opts) {\n      return null;\n    }\n    if (opts === true) {\n      return defaultOpts;\n    }\n    if (typeof opts === 'function') {\n      opts = {type: opts};\n    }\n    return Object.assign({}, defaultOpts, opts);\n  }\n\n  // Overridable method\n  _getViewport(props) {\n    // Get the type of the viewport\n    const {type: ViewportType} = this;\n    return new ViewportType(props);\n  }\n\n  // Parse relative viewport dimension descriptors (e.g {y: '50%', height: '50%'})\n  _parseDimensions({x, y, width, height}) {\n    this._x = parsePosition(x);\n    this._y = parsePosition(y);\n    this._width = parsePosition(width);\n    this._height = parsePosition(height);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}