{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { Timeline } from '@luma.gl/core';\nimport Layer from './layer';\nimport { LIFECYCLE } from '../lifecycle/constants';\nimport log from '../utils/log';\nimport debug from '../debug';\nimport { flatten } from '../utils/flatten';\nimport { Stats } from 'probe.gl';\nimport ResourceManager from './resource/resource-manager';\nimport Viewport from '../viewports/viewport';\nimport { createProgramManager } from '../shaderlib';\nvar TRACE_SET_LAYERS = 'layerManager.setLayers';\nvar TRACE_ACTIVATE_VIEWPORT = 'layerManager.activateViewport';\nvar INITIAL_CONTEXT = Object.seal({\n  layerManager: null,\n  resourceManager: null,\n  deck: null,\n  gl: null,\n  stats: null,\n  shaderCache: null,\n  pickingFBO: null,\n  mousePosition: null,\n  userData: {}\n});\nvar layerName = function layerName(layer) {\n  return layer instanceof Layer ? \"\".concat(layer) : !layer ? 'null' : 'invalid';\n};\nvar LayerManager = function () {\n  function LayerManager(gl) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      deck = _ref.deck,\n      stats = _ref.stats,\n      viewport = _ref.viewport,\n      timeline = _ref.timeline;\n    _classCallCheck(this, LayerManager);\n    this.lastRenderedLayers = [];\n    this.layers = [];\n    this.resourceManager = new ResourceManager({\n      gl: gl,\n      protocol: 'deck://'\n    });\n    this.context = Object.assign({}, INITIAL_CONTEXT, {\n      layerManager: this,\n      gl: gl,\n      deck: deck,\n      programManager: gl && createProgramManager(gl),\n      stats: stats || new Stats({\n        id: 'deck.gl'\n      }),\n      viewport: viewport || new Viewport({\n        id: 'DEFAULT-INITIAL-VIEWPORT'\n      }),\n      timeline: timeline || new Timeline(),\n      resourceManager: this.resourceManager\n    });\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = false;\n    this._debug = false;\n    this._onError = null;\n    this.activateViewport = this.activateViewport.bind(this);\n    Object.seal(this);\n  }\n  _createClass(LayerManager, [{\n    key: \"finalize\",\n    value: function finalize() {\n      this.resourceManager.finalize();\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n      try {\n        for (var _iterator = this.layers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var layer = _step.value;\n          this._finalizeLayer(layer);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"needsRedraw\",\n    value: function needsRedraw() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        clearRedrawFlags: false\n      };\n      var redraw = this._needsRedraw;\n      if (opts.clearRedrawFlags) {\n        this._needsRedraw = false;\n      }\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n      try {\n        for (var _iterator2 = this.layers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var layer = _step2.value;\n          var layerNeedsRedraw = layer.getNeedsRedraw(opts);\n          redraw = redraw || layerNeedsRedraw;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n      return redraw;\n    }\n  }, {\n    key: \"needsUpdate\",\n    value: function needsUpdate() {\n      return this._needsUpdate;\n    }\n  }, {\n    key: \"setNeedsRedraw\",\n    value: function setNeedsRedraw(reason) {\n      this._needsRedraw = this._needsRedraw || reason;\n    }\n  }, {\n    key: \"setNeedsUpdate\",\n    value: function setNeedsUpdate(reason) {\n      this._needsUpdate = this._needsUpdate || reason;\n    }\n  }, {\n    key: \"getLayers\",\n    value: function getLayers() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref2$layerIds = _ref2.layerIds,\n        layerIds = _ref2$layerIds === void 0 ? null : _ref2$layerIds;\n      return layerIds ? this.layers.filter(function (layer) {\n        return layerIds.find(function (layerId) {\n          return layer.id.indexOf(layerId) === 0;\n        });\n      }) : this.layers;\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      if ('debug' in props) {\n        this._debug = props.debug;\n      }\n      if ('userData' in props) {\n        this.context.userData = props.userData;\n      }\n      if ('layers' in props) {\n        this.setLayers(props.layers);\n      }\n      if ('onError' in props) {\n        this._onError = props.onError;\n      }\n    }\n  }, {\n    key: \"setLayers\",\n    value: function setLayers(newLayers) {\n      var forceUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var shouldUpdate = forceUpdate || newLayers !== this.lastRenderedLayers;\n      debug(TRACE_SET_LAYERS, this, shouldUpdate, newLayers);\n      if (!shouldUpdate) {\n        return this;\n      }\n      this.lastRenderedLayers = newLayers;\n      newLayers = flatten(newLayers, Boolean);\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n      try {\n        for (var _iterator3 = newLayers[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var layer = _step3.value;\n          layer.context = this.context;\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3[\"return\"] != null) {\n            _iterator3[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n      this._updateLayers(this.layers, newLayers);\n      return this;\n    }\n  }, {\n    key: \"updateLayers\",\n    value: function updateLayers() {\n      var reason = this.needsUpdate();\n      if (reason) {\n        this.setNeedsRedraw(\"updating layers: \".concat(reason));\n        var forceUpdate = true;\n        this.setLayers(this.lastRenderedLayers, forceUpdate);\n      }\n    }\n  }, {\n    key: \"activateViewport\",\n    value: function activateViewport(viewport) {\n      debug(TRACE_ACTIVATE_VIEWPORT, this, viewport);\n      if (viewport) {\n        this.context.viewport = viewport;\n      }\n      return this;\n    }\n  }, {\n    key: \"_handleError\",\n    value: function _handleError(stage, error, layer) {\n      if (this._onError) {\n        this._onError(error, layer);\n      } else {\n        log.error(\"error during \".concat(stage, \" of \").concat(layerName(layer)), error)();\n      }\n    }\n  }, {\n    key: \"_updateLayers\",\n    value: function _updateLayers(oldLayers, newLayers) {\n      var oldLayerMap = {};\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n      try {\n        for (var _iterator4 = oldLayers[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var oldLayer = _step4.value;\n          if (oldLayerMap[oldLayer.id]) {\n            log.warn(\"Multiple old layers with same id \".concat(layerName(oldLayer)))();\n          } else {\n            oldLayerMap[oldLayer.id] = oldLayer;\n          }\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4[\"return\"] != null) {\n            _iterator4[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n      var generatedLayers = [];\n      this._updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers);\n      this._finalizeOldLayers(oldLayerMap);\n      var needsUpdate = false;\n      for (var _i = 0, _generatedLayers = generatedLayers; _i < _generatedLayers.length; _i++) {\n        var layer = _generatedLayers[_i];\n        if (layer.hasUniformTransition()) {\n          needsUpdate = true;\n          break;\n        }\n      }\n      this._needsUpdate = needsUpdate;\n      this.layers = generatedLayers;\n    }\n  }, {\n    key: \"_updateSublayersRecursively\",\n    value: function _updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers) {\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n      try {\n        for (var _iterator5 = newLayers[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var newLayer = _step5.value;\n          newLayer.context = this.context;\n          var oldLayer = oldLayerMap[newLayer.id];\n          if (oldLayer === null) {\n            log.warn(\"Multiple new layers with same id \".concat(layerName(newLayer)))();\n          }\n          oldLayerMap[newLayer.id] = null;\n          var sublayers = null;\n          try {\n            if (this._debug && oldLayer !== newLayer) {\n              newLayer.validateProps();\n            }\n            if (!oldLayer) {\n              this._initializeLayer(newLayer);\n            } else {\n              this._transferLayerState(oldLayer, newLayer);\n              this._updateLayer(newLayer);\n            }\n            generatedLayers.push(newLayer);\n            sublayers = newLayer.isComposite && newLayer.getSubLayers();\n          } catch (err) {\n            this._handleError('matching', err, newLayer);\n          }\n          if (sublayers) {\n            this._updateSublayersRecursively(sublayers, oldLayerMap, generatedLayers);\n          }\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5[\"return\"] != null) {\n            _iterator5[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_finalizeOldLayers\",\n    value: function _finalizeOldLayers(oldLayerMap) {\n      for (var layerId in oldLayerMap) {\n        var layer = oldLayerMap[layerId];\n        if (layer) {\n          this._finalizeLayer(layer);\n        }\n      }\n    }\n  }, {\n    key: \"_initializeLayer\",\n    value: function _initializeLayer(layer) {\n      try {\n        layer._initialize();\n        layer.lifecycle = LIFECYCLE.INITIALIZED;\n      } catch (err) {\n        this._handleError('initialization', err, layer);\n      }\n    }\n  }, {\n    key: \"_transferLayerState\",\n    value: function _transferLayerState(oldLayer, newLayer) {\n      newLayer._transferState(oldLayer);\n      newLayer.lifecycle = LIFECYCLE.MATCHED;\n      if (newLayer !== oldLayer) {\n        oldLayer.lifecycle = LIFECYCLE.AWAITING_GC;\n      }\n    }\n  }, {\n    key: \"_updateLayer\",\n    value: function _updateLayer(layer) {\n      try {\n        layer._update();\n      } catch (err) {\n        this._handleError('update', err, layer);\n      }\n    }\n  }, {\n    key: \"_finalizeLayer\",\n    value: function _finalizeLayer(layer) {\n      this._needsRedraw = this._needsRedraw || \"finalized \".concat(layerName(layer));\n      layer.lifecycle = LIFECYCLE.AWAITING_FINALIZATION;\n      try {\n        layer._finalize();\n        layer.lifecycle = LIFECYCLE.FINALIZED;\n      } catch (err) {\n        this._handleError('finalization', err, layer);\n      }\n    }\n  }]);\n  return LayerManager;\n}();\nexport { LayerManager as default };","map":{"version":3,"sources":["../../../src/lib/layer-manager.js"],"names":["Timeline","Layer","LIFECYCLE","log","debug","flatten","Stats","ResourceManager","Viewport","createProgramManager","TRACE_SET_LAYERS","TRACE_ACTIVATE_VIEWPORT","INITIAL_CONTEXT","seal","layerManager","resourceManager","deck","gl","stats","shaderCache","pickingFBO","mousePosition","userData","layerName","layer","LayerManager","viewport","timeline","lastRenderedLayers","layers","protocol","context","assign","programManager","id","_needsRedraw","_needsUpdate","_debug","_onError","activateViewport","bind","Object","finalize","_finalizeLayer","opts","clearRedrawFlags","redraw","layerNeedsRedraw","getNeedsRedraw","reason","layerIds","filter","find","indexOf","layerId","props","setLayers","onError","newLayers","forceUpdate","shouldUpdate","Boolean","_updateLayers","needsUpdate","setNeedsRedraw","stage","error","oldLayers","oldLayerMap","oldLayer","warn","generatedLayers","_updateSublayersRecursively","_finalizeOldLayers","hasUniformTransition","newLayer","sublayers","validateProps","_initializeLayer","_transferLayerState","_updateLayer","push","isComposite","getSubLayers","err","_handleError","_initialize","lifecycle","INITIALIZED","_transferState","MATCHED","AWAITING_GC","_update","AWAITING_FINALIZATION","_finalize","FINALIZED"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Timeline} from '@luma.gl/core';\nimport Layer from './layer';\nimport {LIFECYCLE} from '../lifecycle/constants';\nimport log from '../utils/log';\nimport debug from '../debug';\nimport {flatten} from '../utils/flatten';\nimport {Stats} from 'probe.gl';\nimport ResourceManager from './resource/resource-manager';\n\nimport Viewport from '../viewports/viewport';\nimport {createProgramManager} from '../shaderlib';\n\nconst TRACE_SET_LAYERS = 'layerManager.setLayers';\nconst TRACE_ACTIVATE_VIEWPORT = 'layerManager.activateViewport';\n\n// CONTEXT IS EXPOSED TO LAYERS\nconst INITIAL_CONTEXT = Object.seal({\n  layerManager: null,\n  resourceManager: null,\n  deck: null,\n  gl: null,\n\n  // General resources\n  stats: null, // for tracking lifecycle performance\n\n  // GL Resources\n  shaderCache: null,\n  pickingFBO: null, // Screen-size framebuffer that layers can reuse\n\n  mousePosition: null,\n\n  userData: {} // Place for any custom app `context`\n});\n\nconst layerName = layer => (layer instanceof Layer ? `${layer}` : !layer ? 'null' : 'invalid');\n\nexport default class LayerManager {\n  // eslint-disable-next-line\n  constructor(gl, {deck, stats, viewport, timeline} = {}) {\n    // Currently deck.gl expects the DeckGL.layers array to be different\n    // whenever React rerenders. If the same layers array is used, the\n    // LayerManager's diffing algorithm will generate a fatal error and\n    // break the rendering.\n\n    // `this.lastRenderedLayers` stores the UNFILTERED layers sent\n    // down to LayerManager, so that `layers` reference can be compared.\n    // If it's the same across two React render calls, the diffing logic\n    // will be skipped.\n    this.lastRenderedLayers = [];\n    this.layers = [];\n    this.resourceManager = new ResourceManager({gl, protocol: 'deck://'});\n\n    this.context = Object.assign({}, INITIAL_CONTEXT, {\n      layerManager: this,\n      gl,\n      deck,\n      // Enabling luma.gl Program caching using private API (_cachePrograms)\n      programManager: gl && createProgramManager(gl),\n      stats: stats || new Stats({id: 'deck.gl'}),\n      // Make sure context.viewport is not empty on the first layer initialization\n      viewport: viewport || new Viewport({id: 'DEFAULT-INITIAL-VIEWPORT'}), // Current viewport, exposed to layers for project* function\n      timeline: timeline || new Timeline(),\n      resourceManager: this.resourceManager\n    });\n\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = false;\n    this._debug = false;\n    this._onError = null;\n\n    this.activateViewport = this.activateViewport.bind(this);\n\n    Object.seal(this);\n  }\n\n  // Method to call when the layer manager is not needed anymore.\n  finalize() {\n    this.resourceManager.finalize();\n    // Finalize all layers\n    for (const layer of this.layers) {\n      this._finalizeLayer(layer);\n    }\n  }\n\n  // Check if a redraw is needed\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    let redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    // This layers list doesn't include sublayers, relying on composite layers\n    for (const layer of this.layers) {\n      // Call every layer to clear their flags\n      const layerNeedsRedraw = layer.getNeedsRedraw(opts);\n      redraw = redraw || layerNeedsRedraw;\n    }\n\n    return redraw;\n  }\n\n  // Check if a deep update of all layers is needed\n  needsUpdate() {\n    return this._needsUpdate;\n  }\n\n  // Layers will be redrawn (in next animation frame)\n  setNeedsRedraw(reason) {\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n  }\n\n  // Gets an (optionally) filtered list of layers\n  getLayers({layerIds = null} = {}) {\n    // Filtering by layerId compares beginning of strings, so that sublayers will be included\n    // Dependes on the convention of adding suffixes to the parent's layer name\n    return layerIds\n      ? this.layers.filter(layer => layerIds.find(layerId => layer.id.indexOf(layerId) === 0))\n      : this.layers;\n  }\n\n  // Set props needed for layer rendering and picking.\n  setProps(props) {\n    if ('debug' in props) {\n      this._debug = props.debug;\n    }\n\n    // A way for apps to add data to context that can be accessed in layers\n    if ('userData' in props) {\n      this.context.userData = props.userData;\n    }\n\n    // TODO - For now we set layers before viewports to preserve changeFlags\n    if ('layers' in props) {\n      this.setLayers(props.layers);\n    }\n\n    if ('onError' in props) {\n      this._onError = props.onError;\n    }\n  }\n\n  // Supply a new layer list, initiating sublayer generation and layer matching\n  setLayers(newLayers, forceUpdate = false) {\n    // TODO - something is generating state updates that cause rerender of the same\n    const shouldUpdate = forceUpdate || newLayers !== this.lastRenderedLayers;\n    debug(TRACE_SET_LAYERS, this, shouldUpdate, newLayers);\n\n    if (!shouldUpdate) {\n      return this;\n    }\n    this.lastRenderedLayers = newLayers;\n\n    newLayers = flatten(newLayers, Boolean);\n\n    for (const layer of newLayers) {\n      layer.context = this.context;\n    }\n\n    this._updateLayers(this.layers, newLayers);\n\n    return this;\n  }\n\n  // Update layers from last cycle if `setNeedsUpdate()` has been called\n  updateLayers() {\n    // NOTE: For now, even if only some layer has changed, we update all layers\n    // to ensure that layer id maps etc remain consistent even if different\n    // sublayers are rendered\n    const reason = this.needsUpdate();\n    if (reason) {\n      this.setNeedsRedraw(`updating layers: ${reason}`);\n      // Force a full update\n      const forceUpdate = true;\n      this.setLayers(this.lastRenderedLayers, forceUpdate);\n    }\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  // Make a viewport \"current\" in layer context, updating viewportChanged flags\n  activateViewport(viewport) {\n    debug(TRACE_ACTIVATE_VIEWPORT, this, viewport);\n    if (viewport) {\n      this.context.viewport = viewport;\n    }\n    return this;\n  }\n\n  _handleError(stage, error, layer) {\n    if (this._onError) {\n      this._onError(error, layer);\n    } else {\n      log.error(`error during ${stage} of ${layerName(layer)}`, error)();\n    }\n  }\n\n  // Match all layers, checking for caught errors\n  // To avoid having an exception in one layer disrupt other layers\n  // TODO - mark layers with exceptions as bad and remove from rendering cycle?\n  _updateLayers(oldLayers, newLayers) {\n    // Create old layer map\n    const oldLayerMap = {};\n    for (const oldLayer of oldLayers) {\n      if (oldLayerMap[oldLayer.id]) {\n        log.warn(`Multiple old layers with same id ${layerName(oldLayer)}`)();\n      } else {\n        oldLayerMap[oldLayer.id] = oldLayer;\n      }\n    }\n\n    // Allocate array for generated layers\n    const generatedLayers = [];\n\n    // Match sublayers\n    this._updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers);\n\n    // Finalize unmatched layers\n    this._finalizeOldLayers(oldLayerMap);\n\n    let needsUpdate = false;\n    for (const layer of generatedLayers) {\n      if (layer.hasUniformTransition()) {\n        needsUpdate = true;\n        break;\n      }\n    }\n\n    this._needsUpdate = needsUpdate;\n    this.layers = generatedLayers;\n  }\n\n  /* eslint-disable complexity,max-statements */\n  // Note: adds generated layers to `generatedLayers` array parameter\n  _updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers) {\n    for (const newLayer of newLayers) {\n      newLayer.context = this.context;\n\n      // Given a new coming layer, find its matching old layer (if any)\n      const oldLayer = oldLayerMap[newLayer.id];\n      if (oldLayer === null) {\n        // null, rather than undefined, means this id was originally there\n        log.warn(`Multiple new layers with same id ${layerName(newLayer)}`)();\n      }\n      // Remove the old layer from candidates, as it has been matched with this layer\n      oldLayerMap[newLayer.id] = null;\n\n      let sublayers = null;\n\n      // We must not generate exceptions until after layer matching is complete\n      try {\n        if (this._debug && oldLayer !== newLayer) {\n          newLayer.validateProps();\n        }\n\n        if (!oldLayer) {\n          this._initializeLayer(newLayer);\n        } else {\n          this._transferLayerState(oldLayer, newLayer);\n          this._updateLayer(newLayer);\n        }\n        generatedLayers.push(newLayer);\n\n        // Call layer lifecycle method: render sublayers\n        sublayers = newLayer.isComposite && newLayer.getSubLayers();\n        // End layer lifecycle method: render sublayers\n      } catch (err) {\n        this._handleError('matching', err, newLayer); // Record first exception\n      }\n\n      if (sublayers) {\n        this._updateSublayersRecursively(sublayers, oldLayerMap, generatedLayers);\n      }\n    }\n  }\n  /* eslint-enable complexity,max-statements */\n\n  // Finalize any old layers that were not matched\n  _finalizeOldLayers(oldLayerMap) {\n    for (const layerId in oldLayerMap) {\n      const layer = oldLayerMap[layerId];\n      if (layer) {\n        this._finalizeLayer(layer);\n      }\n    }\n  }\n\n  // EXCEPTION SAFE LAYER ACCESS\n\n  // Initializes a single layer, calling layer methods\n  _initializeLayer(layer) {\n    try {\n      layer._initialize();\n      layer.lifecycle = LIFECYCLE.INITIALIZED;\n    } catch (err) {\n      this._handleError('initialization', err, layer);\n      // TODO - what should the lifecycle state be here? LIFECYCLE.INITIALIZATION_FAILED?\n    }\n  }\n\n  _transferLayerState(oldLayer, newLayer) {\n    newLayer._transferState(oldLayer);\n    newLayer.lifecycle = LIFECYCLE.MATCHED;\n\n    if (newLayer !== oldLayer) {\n      oldLayer.lifecycle = LIFECYCLE.AWAITING_GC;\n    }\n  }\n\n  // Updates a single layer, cleaning all flags\n  _updateLayer(layer) {\n    try {\n      layer._update();\n    } catch (err) {\n      this._handleError('update', err, layer);\n    }\n  }\n\n  // Finalizes a single layer\n  _finalizeLayer(layer) {\n    this._needsRedraw = this._needsRedraw || `finalized ${layerName(layer)}`;\n\n    layer.lifecycle = LIFECYCLE.AWAITING_FINALIZATION;\n\n    try {\n      layer._finalize();\n      layer.lifecycle = LIFECYCLE.FINALIZED;\n    } catch (err) {\n      this._handleError('finalization', err, layer);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}