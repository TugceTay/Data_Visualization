{"ast":null,"code":"import { Buffer, copyToTexture, cloneTextureFrom } from '@luma.gl/webgl';\nimport { Transform } from '@luma.gl/engine';\nimport { HISTOPYRAMID_BUILD_VS_UTILS, HISTOPYRAMID_TRAVERSAL_UTILS, HISTOPYRAMID_BASE_BUILD_VS, HISTOPYRAMID_BUILD_VS, HISTOPYRAMID_TRAVERSAL_VS } from './histopyramid-shaders';\nfunction nextPowerOfTwo(x) {\n  const p = Math.ceil(Math.log2(x));\n  return Math.pow(2, p);\n}\nconst channelToIndexMap = {\n  r: 0,\n  x: 0,\n  g: 1,\n  y: 1,\n  b: 2,\n  z: 2,\n  a: 3,\n  w: 3\n};\nexport function buildHistopyramidBaseLevel(gl, opts) {\n  const {\n    texture,\n    channel = 'r',\n    _readData = false\n  } = opts;\n  let {\n    width,\n    height\n  } = texture;\n  width = nextPowerOfTwo(width);\n  height = nextPowerOfTwo(height);\n  const size = (width > height ? width : height) / 2;\n  const baseTexture = cloneTextureFrom(texture, {\n    width: size,\n    height: size\n  });\n  const transform = new Transform(gl, {\n    _sourceTextures: {\n      inTexture: texture\n    },\n    _targetTexture: baseTexture,\n    _targetTextureVarying: 'outTexture',\n    vs: \"\".concat(HISTOPYRAMID_BUILD_VS_UTILS).concat(HISTOPYRAMID_BASE_BUILD_VS),\n    elementCount: baseTexture.width * baseTexture.height\n  });\n  transform.run({\n    uniforms: {\n      channel: channelToIndexMap[channel] || 0,\n      padingPixelValue: [0, 0, 0, 0]\n    }\n  });\n  let textureData;\n  if (_readData || size === 1) {\n    textureData = transform.getData({\n      packed: true\n    });\n  }\n  const flatPyramidSize = size * 2;\n  const flatPyramidTexture = cloneTextureFrom(texture, {\n    width: flatPyramidSize,\n    height: flatPyramidSize,\n    parameters: {\n      [10240]: 9728,\n      [10241]: 9728\n    }\n  });\n  const framebuffer = transform.getFramebuffer();\n  copyToTexture(framebuffer, flatPyramidTexture, {\n    targetX: 0,\n    width: size,\n    height: size\n  });\n  return {\n    textureData,\n    baseTexture,\n    flatPyramidTexture\n  };\n}\nexport function getHistoPyramid(gl, opts) {\n  const {\n    textureData,\n    baseTexture,\n    flatPyramidTexture\n  } = buildHistopyramidBaseLevel(gl, opts);\n  const {\n    width\n  } = baseTexture;\n  const levelCount = Math.log2(width) + 1;\n  const pyramidTextures = [baseTexture];\n  let topLevelData = textureData;\n  if (levelCount > 1) {\n    for (let i = 1; i < levelCount; i++) {\n      const size = width / Math.pow(2, i);\n      pyramidTextures.push(cloneTextureFrom(baseTexture, {\n        width: size,\n        height: size\n      }));\n    }\n    const transform = new Transform(gl, {\n      _sourceTextures: {\n        inTexture: pyramidTextures[0]\n      },\n      _targetTexture: pyramidTextures[1],\n      _targetTextureVarying: 'outTexture',\n      vs: \"\".concat(HISTOPYRAMID_BUILD_VS_UTILS).concat(HISTOPYRAMID_BUILD_VS),\n      elementCount: pyramidTextures[1].width * pyramidTextures[1].height\n    });\n    let flatOffset = width;\n    for (let i = 1; i < levelCount; i++) {\n      const outSize = [pyramidTextures[i].width, pyramidTextures[i].height];\n      transform.update({\n        _sourceTextures: {\n          inTexture: pyramidTextures[i - 1]\n        },\n        _targetTexture: pyramidTextures[i],\n        elementCount: pyramidTextures[i].width * pyramidTextures[i].height\n      });\n      transform.run();\n      const framebuffer = transform.getFramebuffer();\n      copyToTexture(framebuffer, flatPyramidTexture, {\n        targetX: flatOffset,\n        width: outSize[0],\n        height: outSize[1]\n      });\n      flatOffset += outSize[0];\n    }\n    topLevelData = transform.getData();\n  }\n  return {\n    pyramidTextures,\n    flatPyramidTexture,\n    levelCount,\n    topLevelData\n  };\n}\nexport function histoPyramidGenerateIndices(gl, opts) {\n  const {\n    flatPyramidTexture,\n    levelCount,\n    topLevelData\n  } = getHistoPyramid(gl, opts);\n  const keyIndexCount = topLevelData[0] + topLevelData[1] + topLevelData[2] + topLevelData[3];\n  const keyIndex = new Buffer(gl, new Float32Array(keyIndexCount).map((_, index) => index));\n  const locationAndIndex = new Buffer(gl, keyIndexCount * 4 * 4);\n  const transform = new Transform(gl, {\n    sourceBuffers: {\n      keyIndex\n    },\n    _sourceTextures: {\n      flatPyramidTexture\n    },\n    feedbackBuffers: {\n      locationAndIndex\n    },\n    varyings: ['locationAndIndex'],\n    vs: \"\".concat(HISTOPYRAMID_TRAVERSAL_UTILS).concat(HISTOPYRAMID_TRAVERSAL_VS),\n    elementCount: keyIndexCount\n  });\n  transform.run({\n    uniforms: {\n      numLevels: levelCount\n    }\n  });\n  return {\n    locationAndIndexBuffer: locationAndIndex\n  };\n}","map":{"version":3,"sources":["../../../../src/gpgpu/histopyramid/histopyramid.js"],"names":["Buffer","copyToTexture","cloneTextureFrom","Transform","HISTOPYRAMID_BUILD_VS_UTILS","HISTOPYRAMID_TRAVERSAL_UTILS","HISTOPYRAMID_BASE_BUILD_VS","HISTOPYRAMID_BUILD_VS","HISTOPYRAMID_TRAVERSAL_VS","nextPowerOfTwo","x","p","Math","ceil","log2","pow","channelToIndexMap","r","g","y","b","z","a","w","buildHistopyramidBaseLevel","gl","opts","texture","channel","_readData","width","height","size","baseTexture","transform","_sourceTextures","inTexture","_targetTexture","_targetTextureVarying","vs","elementCount","run","uniforms","padingPixelValue","textureData","getData","packed","flatPyramidSize","flatPyramidTexture","parameters","framebuffer","getFramebuffer","targetX","getHistoPyramid","levelCount","pyramidTextures","topLevelData","i","push","flatOffset","outSize","update","histoPyramidGenerateIndices","keyIndexCount","keyIndex","Float32Array","map","_","index","locationAndIndex","sourceBuffers","feedbackBuffers","varyings","numLevels","locationAndIndexBuffer"],"mappings":"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","sourcesContent":["import {Buffer, copyToTexture, cloneTextureFrom} from '@luma.gl/webgl';\nimport {Transform} from '@luma.gl/engine';\nimport GL from '@luma.gl/constants';\nimport {\n  HISTOPYRAMID_BUILD_VS_UTILS,\n  HISTOPYRAMID_TRAVERSAL_UTILS,\n  HISTOPYRAMID_BASE_BUILD_VS,\n  HISTOPYRAMID_BUILD_VS,\n  HISTOPYRAMID_TRAVERSAL_VS\n} from './histopyramid-shaders';\n\n// Following methods implement Histopyramid operations as described in 'High‐speed marching cubes using histopyramids' by Dyken C, Ziegler G, Theobalt C and Seidel H\n// Link to the paper: http://olmozavala.com/Custom/OpenGL/Tutorials/OpenGL4_Examples/MarchingCubes_Dyken/Dyken_et_al-2008-Computer_Graphics_Forum.pdf\n\n// TODO: enable to assert on texture dimension\n// function isPowerOfTwo(x) {\n//     return ((x !== 0) && !(x & (x - 1)));\n// }\n\nfunction nextPowerOfTwo(x) {\n  const p = Math.ceil(Math.log2(x));\n  return Math.pow(2, p);\n}\n\nconst channelToIndexMap = {\n  r: 0,\n  x: 0,\n  g: 1,\n  y: 1,\n  b: 2,\n  z: 2,\n  a: 3,\n  w: 3\n};\n\n// returns a base level texture that packs given weight into a texture\n// each 2X2 region is mapped into RGBA channels of single pixel\n// returned texture is a squred power of two sized texture\n// R -> lower left, G -> lower right B -> upper left A -> upper right\nexport function buildHistopyramidBaseLevel(gl, opts) {\n  const {texture, channel = 'r', _readData = false} = opts;\n  let {width, height} = texture;\n  width = nextPowerOfTwo(width);\n  height = nextPowerOfTwo(height);\n  // Use sqaured next power of two size, then use half of it since we are packing 2X2 group into a single RGBA pixel\n  const size = (width > height ? width : height) / 2;\n  const baseTexture = cloneTextureFrom(texture, {\n    width: size,\n    height: size\n  });\n\n  // build individual pyramid textures\n  const transform = new Transform(gl, {\n    _sourceTextures: {\n      inTexture: texture\n    },\n    _targetTexture: baseTexture,\n    _targetTextureVarying: 'outTexture',\n    vs: `${HISTOPYRAMID_BUILD_VS_UTILS}${HISTOPYRAMID_BASE_BUILD_VS}`,\n    elementCount: baseTexture.width * baseTexture.height\n  });\n  transform.run({\n    uniforms: {\n      channel: channelToIndexMap[channel] || 0,\n      padingPixelValue: [0, 0, 0, 0]\n    }\n  });\n  // _readData is debug only option\n  let textureData;\n  // when base textuer size is 1X1, there are no more level to be generated\n  // so read the texture data to be provided as base level data.\n  if (_readData || size === 1) {\n    textureData = transform.getData({packed: true});\n  }\n  const flatPyramidSize = size * 2;\n  const flatPyramidTexture = cloneTextureFrom(texture, {\n    width: flatPyramidSize,\n    height: flatPyramidSize,\n    parameters: {\n      [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n      [GL.TEXTURE_MIN_FILTER]: GL.NEAREST\n    }\n  });\n  const framebuffer = transform.getFramebuffer();\n  copyToTexture(framebuffer, flatPyramidTexture, {\n    targetX: 0,\n    width: size,\n    height: size\n  });\n\n  return {textureData, baseTexture, flatPyramidTexture};\n}\n\n// builds histopyramid for a given texture and returns individual levels and flatended pyramid texture\n// Returns object\n// * pyramidTextures: Array with all individual mip levels\n// * flatPyramidTexture: Texture with all mip levels laid out horizontally\nexport function getHistoPyramid(gl, opts) {\n  const {textureData, baseTexture, flatPyramidTexture} = buildHistopyramidBaseLevel(gl, opts);\n  const {width} = baseTexture;\n  // assert(width === height && isPowerOfTwo(width));\n  const levelCount = Math.log2(width) + 1;\n  const pyramidTextures = [baseTexture];\n\n  let topLevelData = textureData;\n  if (levelCount > 1) {\n    // build empty textures for rest of the pyramid\n    for (let i = 1; i < levelCount; i++) {\n      const size = width / Math.pow(2, i);\n      pyramidTextures.push(\n        cloneTextureFrom(baseTexture, {\n          width: size,\n          height: size\n        })\n      );\n    }\n\n    // build individual pyramid textures\n    const transform = new Transform(gl, {\n      _sourceTextures: {\n        inTexture: pyramidTextures[0]\n      },\n      _targetTexture: pyramidTextures[1],\n      _targetTextureVarying: 'outTexture',\n      vs: `${HISTOPYRAMID_BUILD_VS_UTILS}${HISTOPYRAMID_BUILD_VS}`,\n      elementCount: pyramidTextures[1].width * pyramidTextures[1].height\n    });\n\n    let flatOffset = width;\n    for (let i = 1; i < levelCount; i++) {\n      const outSize = [pyramidTextures[i].width, pyramidTextures[i].height];\n      transform.update({\n        _sourceTextures: {inTexture: pyramidTextures[i - 1]},\n        _targetTexture: pyramidTextures[i],\n        elementCount: pyramidTextures[i].width * pyramidTextures[i].height\n      });\n      transform.run();\n\n      // copy the result to the flaten pyramid texture\n      const framebuffer = transform.getFramebuffer();\n      copyToTexture(framebuffer, flatPyramidTexture, {\n        targetX: flatOffset,\n        width: outSize[0],\n        height: outSize[1]\n      });\n\n      flatOffset += outSize[0];\n    }\n    topLevelData = transform.getData();\n  }\n\n  return {pyramidTextures, flatPyramidTexture, levelCount, topLevelData};\n}\n\n// builds and traverses a histopyramid for a given texture and returns pixel locations and local-key index for each non zero weight in input texture\n// Returns object\n// *locationAndIndexBuffer : Buffer contains one vec4 for each non zero weight. XY represent loation, Z represents local-key index and W represent key-index\nexport function histoPyramidGenerateIndices(gl, opts) {\n  const {flatPyramidTexture, levelCount, topLevelData} = getHistoPyramid(gl, opts);\n\n  const keyIndexCount = topLevelData[0] + topLevelData[1] + topLevelData[2] + topLevelData[3];\n  const keyIndex = new Buffer(gl, new Float32Array(keyIndexCount).map((_, index) => index));\n  const locationAndIndex = new Buffer(gl, keyIndexCount * 4 * 4); // 4 floats for each key index\n\n  const transform = new Transform(gl, {\n    sourceBuffers: {\n      keyIndex\n    },\n    _sourceTextures: {\n      flatPyramidTexture\n    },\n    feedbackBuffers: {\n      locationAndIndex\n    },\n    varyings: ['locationAndIndex'],\n    vs: `${HISTOPYRAMID_TRAVERSAL_UTILS}${HISTOPYRAMID_TRAVERSAL_VS}`,\n    elementCount: keyIndexCount\n  });\n  transform.run({\n    uniforms: {\n      numLevels: levelCount\n    }\n  });\n\n  return {locationAndIndexBuffer: locationAndIndex};\n}\n"]},"metadata":{},"sourceType":"module"}