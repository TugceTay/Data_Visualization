{"ast":null,"code":"import ShaderModule from './shader-module';\nimport { assert } from '../utils';\nexport function resolveModules(modules) {\n  return getShaderDependencies(instantiateModules(modules));\n}\nfunction getShaderDependencies(modules) {\n  const moduleMap = {};\n  const moduleDepth = {};\n  getDependencyGraph({\n    modules,\n    level: 0,\n    moduleMap,\n    moduleDepth\n  });\n  return Object.keys(moduleDepth).sort((a, b) => moduleDepth[b] - moduleDepth[a]).map(name => moduleMap[name]);\n}\nfunction getDependencyGraph(_ref) {\n  let {\n    modules,\n    level,\n    moduleMap,\n    moduleDepth\n  } = _ref;\n  if (level >= 5) {\n    throw new Error('Possible loop in shader dependency graph');\n  }\n  for (const module of modules) {\n    moduleMap[module.name] = module;\n    if (moduleDepth[module.name] === undefined || moduleDepth[module.name] < level) {\n      moduleDepth[module.name] = level;\n    }\n  }\n  for (const module of modules) {\n    if (module.dependencies) {\n      getDependencyGraph({\n        modules: module.dependencies,\n        level: level + 1,\n        moduleMap,\n        moduleDepth\n      });\n    }\n  }\n}\nfunction instantiateModules(modules, seen) {\n  return modules.map(module => {\n    if (module instanceof ShaderModule) {\n      return module;\n    }\n    assert(typeof module !== 'string', \"Shader module use by name is deprecated. Import shader module '\".concat(module, \"' and use it directly.\"));\n    assert(module.name, 'shader module has no name');\n    module = new ShaderModule(module);\n    module.dependencies = instantiateModules(module.dependencies);\n    return module;\n  });\n}\nexport const TEST_EXPORTS = {\n  getShaderDependencies,\n  getDependencyGraph\n};","map":{"version":3,"sources":["../../../src/lib/resolve-modules.js"],"names":["ShaderModule","assert","resolveModules","modules","getShaderDependencies","instantiateModules","moduleMap","moduleDepth","getDependencyGraph","level","Object","keys","sort","a","b","map","name","Error","module","undefined","dependencies","seen","TEST_EXPORTS"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,iBAAzB;AACA,SAAQC,MAAR,QAAqB,UAArB;AAGA,OAAO,SAASC,cAAT,CAAwBC,OAAxB,EAAiC;EACtC,OAAOC,qBAAqB,CAACC,kBAAkB,CAACF,OAAD,CAAnB,CAA5B;AACD;AAcD,SAASC,qBAAT,CAA+BD,OAA/B,EAAwC;EACtC,MAAMG,SAAS,GAAG,CAAA,CAAlB;EACA,MAAMC,WAAW,GAAG,CAAA,CAApB;EACAC,kBAAkB,CAAC;IAACL,OAAD;IAAUM,KAAK,EAAE,CAAjB;IAAoBH,SAApB;IAA+BC;EAA/B,CAAD,CAAlBC;EAGA,OAAOE,MAAM,CAACC,IAAPD,CAAYH,WAAZG,CAAAA,CACJE,IADIF,CACC,CAACG,CAAD,EAAIC,CAAJ,KAAUP,WAAW,CAACO,CAAD,CAAXP,GAAiBA,WAAW,CAACM,CAAD,CADvCH,CAAAA,CAEJK,GAFIL,CAEAM,IAAI,IAAIV,SAAS,CAACU,IAAD,CAFjBN,CAAP;AAGD;AAcD,SAASF,kBAAT,CAAA,IAAA,EAAsE;EAAA,IAA1C;IAACL,OAAD;IAAUM,KAAV;IAAiBH,SAAjB;IAA4BC;EAA5B,CAA0C,GAAA,IAAA;EACpE,IAAIE,KAAK,IAAI,CAAb,EAAgB;IACd,MAAM,IAAIQ,KAAJ,CAAU,0CAAV,CAAN;EACD;EAGD,KAAK,MAAMC,MAAX,IAAqBf,OAArB,EAA8B;IAC5BG,SAAS,CAACY,MAAM,CAACF,IAAR,CAATV,GAAyBY,MAAzBZ;IACA,IAAIC,WAAW,CAACW,MAAM,CAACF,IAAR,CAAXT,KAA6BY,SAA7BZ,IAA0CA,WAAW,CAACW,MAAM,CAACF,IAAR,CAAXT,GAA2BE,KAAzE,EAAgF;MAC9EF,WAAW,CAACW,MAAM,CAACF,IAAR,CAAXT,GAA2BE,KAA3BF;IACD;EACF;EAGD,KAAK,MAAMW,MAAX,IAAqBf,OAArB,EAA8B;IAC5B,IAAIe,MAAM,CAACE,YAAX,EAAyB;MACvBZ,kBAAkB,CAAC;QAACL,OAAO,EAAEe,MAAM,CAACE,YAAjB;QAA+BX,KAAK,EAAEA,KAAK,GAAG,CAA9C;QAAiDH,SAAjD;QAA4DC;MAA5D,CAAD,CAAlBC;IACD;EACF;AACF;AAED,SAASH,kBAAT,CAA4BF,OAA5B,EAAqCkB,IAArC,EAA2C;EACzC,OAAO,OAAO,CAACN,GAAR,CAAYG,MAAM,IAAI;IAC3B,IAAIA,MAAM,YAAYlB,YAAtB,EAAoC;MAClC,OAAOkB,MAAP;IACD;IAEDjB,MAAM,CACJ,OAAOiB,MAAP,KAAkB,QADd,EAAA,iEAAA,CAAA,MAAA,CAE8DA,MAF9D,EAAA,wBAAA,CAAA,CAANjB;IAIAA,MAAM,CAACiB,MAAM,CAACF,IAAR,EAAc,2BAAd,CAANf;IAEAiB,MAAM,GAAG,IAAIlB,YAAJ,CAAiBkB,MAAjB,CAATA;IACAA,MAAM,CAACE,YAAPF,GAAsBb,kBAAkB,CAACa,MAAM,CAACE,YAAR,CAAxCF;IAEA,OAAOA,MAAP;EACD,CAfM,CAAP;AAgBD;AAED,OAAO,MAAMI,YAAY,GAAG;EAC1BlB,qBAD0B;EAE1BI;AAF0B,CAArB","sourcesContent":["import ShaderModule from './shader-module';\nimport {assert} from '../utils';\n\n// Instantiate shader modules and any dependencies resolve dependencies\nexport function resolveModules(modules) {\n  return getShaderDependencies(instantiateModules(modules));\n}\n\n/**\n * Takes a list of shader module names and returns a new list of\n * shader module names that includes all dependencies, sorted so\n * that modules that are dependencies of other modules come first.\n *\n * If the shader glsl code from the returned modules is concatenated\n * in the reverse order, it is guaranteed that all functions be resolved and\n * that all function and variable definitions come before use.\n *\n * @param {String[]} modules - Array of modules (inline modules or module names)\n * @return {String[]} - Array of modules\n */\nfunction getShaderDependencies(modules) {\n  const moduleMap = {};\n  const moduleDepth = {};\n  getDependencyGraph({modules, level: 0, moduleMap, moduleDepth});\n\n  // Return a reverse sort so that dependencies come before the modules that use them\n  return Object.keys(moduleDepth)\n    .sort((a, b) => moduleDepth[b] - moduleDepth[a])\n    .map(name => moduleMap[name]);\n}\n\n/**\n * Recursively checks module dpendencies to calculate dependency\n * level of each module.\n *\n * @param {object} options\n * @param {object[]} options.modules - Array of modules\n * @param {number} options.level - Current level\n * @param {object} options.moduleMap -\n * @param {object} options.moduleDepth - Current level\n * @return {object} - Map of module name to its level\n */\n// Adds another level of dependencies to the result map\nfunction getDependencyGraph({modules, level, moduleMap, moduleDepth}) {\n  if (level >= 5) {\n    throw new Error('Possible loop in shader dependency graph');\n  }\n\n  // Update level on all current modules\n  for (const module of modules) {\n    moduleMap[module.name] = module;\n    if (moduleDepth[module.name] === undefined || moduleDepth[module.name] < level) {\n      moduleDepth[module.name] = level;\n    }\n  }\n\n  // Recurse\n  for (const module of modules) {\n    if (module.dependencies) {\n      getDependencyGraph({modules: module.dependencies, level: level + 1, moduleMap, moduleDepth});\n    }\n  }\n}\n\nfunction instantiateModules(modules, seen) {\n  return modules.map(module => {\n    if (module instanceof ShaderModule) {\n      return module;\n    }\n\n    assert(\n      typeof module !== 'string',\n      `Shader module use by name is deprecated. Import shader module '${module}' and use it directly.`\n    );\n    assert(module.name, 'shader module has no name');\n\n    module = new ShaderModule(module);\n    module.dependencies = instantiateModules(module.dependencies);\n\n    return module;\n  });\n}\n\nexport const TEST_EXPORTS = {\n  getShaderDependencies,\n  getDependencyGraph\n};\n"]},"metadata":{},"sourceType":"module"}