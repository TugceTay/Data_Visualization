{"ast":null,"code":"import { registerLoaders } from '@loaders.gl/core';\nimport { ImageLoader } from '@loaders.gl/images';\nimport { global } from 'probe.gl/env';\nimport log from '../utils/log';\nimport { register } from '../debug';\nimport jsonLoader from '../utils/json-loader';\nvar version = typeof \"8.2.0\" !== 'undefined' ? \"8.2.0\" : global.DECK_VERSION || 'untranspiled source';\nvar existingVersion = global.deck && global.deck.VERSION;\nif (existingVersion && existingVersion !== version) {\n  throw new Error(\"deck.gl - multiple versions detected: \".concat(existingVersion, \" vs \").concat(version));\n}\nif (!existingVersion) {\n  if (process.env.NODE_ENV !== 'production') {\n    log.log(0, \"deck.gl \".concat(version, \" - set deck.log.level=1 (or higher) to trace attribute updates\"))();\n  }\n  global.deck = Object.assign(global.deck || {}, {\n    VERSION: version,\n    version: version,\n    log: log,\n    _registerLoggers: register\n  });\n  registerLoaders([jsonLoader, ImageLoader]);\n}\nexport default global.deck;","map":{"version":3,"sources":["../../../src/lib/init.js"],"names":["registerLoaders","ImageLoader","global","log","register","jsonLoader","version","DECK_VERSION","existingVersion","deck","VERSION","Error","process","env","NODE_ENV","assign","_registerLoggers"],"mappings":"AAoBA,SAAQA,eAAR,QAA8B,kBAA9B;AACA,SAAQC,WAAR,QAA0B,oBAA1B;AAEA,SAAQC,MAAR,QAAqB,cAArB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,SAAQC,QAAR,QAAuB,UAAvB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AAKA,IAAMC,OAAO,GACX,OAAA,OAAA,KAAuB,WAAvB,GAAA,OAAA,GAAmDJ,MAAM,CAACK,YAAPL,IAAuB,qBAD5E;AAIA,IAAMM,eAAe,GAAGN,MAAM,CAACO,IAAPP,IAAeA,MAAM,CAACO,IAAPP,CAAYQ,OAAnD;AAEA,IAAIF,eAAe,IAAIA,eAAe,KAAKF,OAA3C,EAAoD;EAClD,MAAM,IAAIK,KAAJ,CAAA,wCAAA,CAAA,MAAA,CAAmDH,eAAnD,EAAA,MAAA,CAAA,CAAA,MAAA,CAAyEF,OAAzE,CAAA,CAAN;AACD;AAED,IAAI,CAACE,eAAL,EAAsB;EAEpB,IAAII,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAA7B,EAA2C;IACzCT,GAAG,CAACA,GAAJA,CACE,CADFA,EAAAA,UAAAA,CAAAA,MAAAA,CAEaG,OAFbH,EAAAA,gEAAAA,CAAAA,CAAAA,EAAAA;EAID;EAEDD,MAAM,CAACO,IAAPP,GAAc,MAAM,CAACa,MAAP,CAAcb,MAAM,CAACO,IAAPP,IAAe,CAAA,CAA7B,EAAiC;IAC7CQ,OAAO,EAAEJ,OADoC;IAE7CA,OAAO,EAAPA,OAF6C;IAG7CH,GAAG,EAAHA,GAH6C;IAK7Ca,gBAAgB,EAAEZ;EAL2B,CAAjC,CAAdF;EAQAF,eAAe,CAAC,CAACK,UAAD,EAAaJ,WAAb,CAAD,CAAfD;AACD;AAED,eAAeE,MAAM,CAACO,IAAtB","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {registerLoaders} from '@loaders.gl/core';\nimport {ImageLoader} from '@loaders.gl/images';\n\nimport {global} from 'probe.gl/env';\nimport log from '../utils/log';\nimport {register} from '../debug';\nimport jsonLoader from '../utils/json-loader';\n\n// Version detection using babel plugin\n// Fallback for tests and SSR since global variable is defined by Webpack.\n/* global __VERSION__ */\nconst version =\n  typeof __VERSION__ !== 'undefined' ? __VERSION__ : global.DECK_VERSION || 'untranspiled source';\n\n// Note: a `deck` object not created by deck.gl may exist in the global scope\nconst existingVersion = global.deck && global.deck.VERSION;\n\nif (existingVersion && existingVersion !== version) {\n  throw new Error(`deck.gl - multiple versions detected: ${existingVersion} vs ${version}`);\n}\n\nif (!existingVersion) {\n  // eslint-disable-next-line\n  if (process.env.NODE_ENV !== 'production') {\n    log.log(\n      0,\n      `deck.gl ${version} - set deck.log.level=1 (or higher) to trace attribute updates`\n    )();\n  }\n\n  global.deck = Object.assign(global.deck || {}, {\n    VERSION: version,\n    version,\n    log,\n    // experimental\n    _registerLoggers: register\n  });\n\n  registerLoaders([jsonLoader, ImageLoader]);\n}\n\nexport default global.deck;\n"]},"metadata":{},"sourceType":"module"}