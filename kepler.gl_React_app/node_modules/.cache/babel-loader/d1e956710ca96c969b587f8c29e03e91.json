{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport TransitionInterpolator from './transition-interpolator';\nimport { lerp } from 'math.gl';\nimport { flyToViewport, getFlyToDuration } from '@math.gl/web-mercator';\nvar LINEARLY_INTERPOLATED_PROPS = ['bearing', 'pitch'];\nvar DEFAULT_OPTS = {\n  speed: 1.2,\n  curve: 1.414\n};\nvar FlyToInterpolator = function (_TransitionInterpolat) {\n  _inherits(FlyToInterpolator, _TransitionInterpolat);\n  function FlyToInterpolator() {\n    var _this;\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, FlyToInterpolator);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FlyToInterpolator).call(this, {\n      compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'],\n      extract: ['width', 'height', 'longitude', 'latitude', 'zoom', 'bearing', 'pitch'],\n      required: ['width', 'height', 'latitude', 'longitude', 'zoom']\n    }));\n    _this.props = Object.assign({}, DEFAULT_OPTS, props);\n    return _this;\n  }\n  _createClass(FlyToInterpolator, [{\n    key: \"interpolateProps\",\n    value: function interpolateProps(startProps, endProps, t) {\n      var viewport = flyToViewport(startProps, endProps, t, this.props);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n      try {\n        for (var _iterator = LINEARLY_INTERPOLATED_PROPS[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var key = _step.value;\n          viewport[key] = lerp(startProps[key] || 0, endProps[key] || 0, t);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n      return viewport;\n    }\n  }, {\n    key: \"getDuration\",\n    value: function getDuration(startProps, endProps) {\n      var transitionDuration = endProps.transitionDuration;\n      if (transitionDuration === 'auto') {\n        transitionDuration = getFlyToDuration(startProps, endProps, this.props);\n      }\n      return transitionDuration;\n    }\n  }]);\n  return FlyToInterpolator;\n}(TransitionInterpolator);\nexport { FlyToInterpolator as default };","map":{"version":3,"sources":["../../../src/transitions/viewport-fly-to-interpolator.js"],"names":["TransitionInterpolator","lerp","flyToViewport","getFlyToDuration","LINEARLY_INTERPOLATED_PROPS","DEFAULT_OPTS","speed","curve","FlyToInterpolator","props","compare","extract","required","Object","assign","startProps","endProps","t","viewport","key","transitionDuration"],"mappings":";;;;;AAAA,OAAOA,sBAAP,MAAmC,2BAAnC;AACA,SAAQC,IAAR,QAAmB,SAAnB;AAEA,SAAQC,aAAR,EAAuBC,gBAAvB,QAA8C,uBAA9C;AAEA,IAAMC,2BAA2B,GAAG,CAAC,SAAD,EAAY,OAAZ,CAApC;AACA,IAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,GADY;EAEnBC,KAAK,EAAE;AAFY,CAArB;IAaqBC,iB;;EAQnB,SAAA,iBAAA,GAAwB;IAAA,IAAA,KAAA;IAAA,IAAZC,KAAY,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,CAAA,CAAI;IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,CAAA;IACtB,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,iBAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAM;MACJC,OAAO,EAAE,CAAC,WAAD,EAAc,UAAd,EAA0B,MAA1B,EAAkC,SAAlC,EAA6C,OAA7C,CADL;MAEJC,OAAO,EAAE,CAAC,OAAD,EAAU,QAAV,EAAoB,WAApB,EAAiC,UAAjC,EAA6C,MAA7C,EAAqD,SAArD,EAAgE,OAAhE,CAFL;MAGJC,QAAQ,EAAE,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,EAAgC,WAAhC,EAA6C,MAA7C;IAHN,CAAN,CAAA,CAAA;IAKA,KAAA,CAAKH,KAAL,GAAaI,MAAM,CAACC,MAAPD,CAAc,CAAA,CAAdA,EAAkBR,YAAlBQ,EAAgCJ,KAAhCI,CAAb;IANsB,OAAA,KAAA;EAOvB;;;qCAEgBE,U,EAAYC,Q,EAAUC,C,EAAG;MACxC,IAAMC,QAAQ,GAAGhB,aAAa,CAACa,UAAD,EAAaC,QAAb,EAAuBC,CAAvB,EAA0B,IAAA,CAAKR,KAA/B,CAA9B;MADwC,IAAA,yBAAA,GAAA,IAAA;MAAA,IAAA,iBAAA,GAAA,KAAA;MAAA,IAAA,cAAA,GAAA,SAAA;MAAA,IAAA;QAQxC,KAAA,IAAA,SAAA,GAAkBL,2BAAlB,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA,EAAA,yBAAA,GAAA,CAAA,KAAA,GAAA,SAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,yBAAA,GAAA,IAAA,EAA+C;UAAA,IAApCe,GAAoC,GAAA,KAAA,CAAA,KAAA;UAC7CD,QAAQ,CAACC,GAAD,CAARD,GAAgBjB,IAAI,CAACc,UAAU,CAACI,GAAD,CAAVJ,IAAmB,CAApB,EAAuBC,QAAQ,CAACG,GAAD,CAARH,IAAiB,CAAxC,EAA2CC,CAA3C,CAApBC;QACD;MAVuC,CAAA,CAAA,OAAA,GAAA,EAAA;QAAA,iBAAA,GAAA,IAAA;QAAA,cAAA,GAAA,GAAA;MAAA,CAAA,SAAA;QAAA,IAAA;UAAA,IAAA,CAAA,yBAAA,IAAA,SAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;YAAA,SAAA,CAAA,QAAA,CAAA,EAAA;UAAA;QAAA,CAAA,SAAA;UAAA,IAAA,iBAAA,EAAA;YAAA,MAAA,cAAA;UAAA;QAAA;MAAA;MAYxC,OAAOA,QAAP;IACD;;;gCAGWH,U,EAAYC,Q,EAAU;MAAA,IAC3BI,kBAD2B,GACLJ,QADK,CAC3BI,kBAD2B;MAEhC,IAAIA,kBAAkB,KAAK,MAA3B,EAAmC;QAEjCA,kBAAkB,GAAGjB,gBAAgB,CAACY,UAAD,EAAaC,QAAb,EAAuB,IAAA,CAAKP,KAA5B,CAArCW;MACD;MACD,OAAOA,kBAAP;IACD;;;EAxC4CpB,sB;SAA1BQ,iB","sourcesContent":["import TransitionInterpolator from './transition-interpolator';\nimport {lerp} from 'math.gl';\n\nimport {flyToViewport, getFlyToDuration} from '@math.gl/web-mercator';\n\nconst LINEARLY_INTERPOLATED_PROPS = ['bearing', 'pitch'];\nconst DEFAULT_OPTS = {\n  speed: 1.2,\n  curve: 1.414\n  // screenSpeed and maxDuration are used only if specified\n};\n\n/**\n * This class adapts mapbox-gl-js Map#flyTo animation so it can be used in\n * react/redux architecture.\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n */\nexport default class FlyToInterpolator extends TransitionInterpolator {\n  /**\n   * @param props {Object}\n    - `props.curve` (Number, optional, default: 1.414) - The zooming \"curve\" that will occur along the flight path.\n    - `props.speed` (Number, optional, default: 1.2) - The average speed of the animation defined in relation to `options.curve`, it linearly affects the duration, higher speed returns smaller durations and vice versa.\n    - `props.screenSpeed` (Number, optional) - The average speed of the animation measured in screenfuls per second. Similar to `opts.speed` it linearly affects the duration,  when specified `opts.speed` is ignored.\n    - `props.maxDuration` (Number, optional) - Maximum duration in milliseconds, if calculated duration exceeds this value, `0` is returned.\n   */\n  constructor(props = {}) {\n    super({\n      compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'],\n      extract: ['width', 'height', 'longitude', 'latitude', 'zoom', 'bearing', 'pitch'],\n      required: ['width', 'height', 'latitude', 'longitude', 'zoom']\n    });\n    this.props = Object.assign({}, DEFAULT_OPTS, props);\n  }\n\n  interpolateProps(startProps, endProps, t) {\n    const viewport = flyToViewport(startProps, endProps, t, this.props);\n\n    // Linearly interpolate 'bearing' and 'pitch'.\n    // If pitch/bearing are not supplied, they are interpreted as zeros in viewport calculation\n    // (fallback defined in WebMercatorViewport)\n    // Because there is no guarantee that the current controller's ViewState normalizes\n    // these props, safe guard is needed to avoid generating NaNs\n    for (const key of LINEARLY_INTERPOLATED_PROPS) {\n      viewport[key] = lerp(startProps[key] || 0, endProps[key] || 0, t);\n    }\n\n    return viewport;\n  }\n\n  // computes the transition duration\n  getDuration(startProps, endProps) {\n    let {transitionDuration} = endProps;\n    if (transitionDuration === 'auto') {\n      // auto calculate duration based on start and end props\n      transitionDuration = getFlyToDuration(startProps, endProps, this.props);\n    }\n    return transitionDuration;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}