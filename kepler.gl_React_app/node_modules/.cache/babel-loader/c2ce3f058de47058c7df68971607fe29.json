{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _asyncIterator from \"@babel/runtime/helpers/esm/asyncIterator\";\nimport { concatenateArrayBuffers } from '../binary-utils/array-buffer-utils';\nimport assert from '../env-utils/assert';\nexport function forEach(_x, _x2) {\n  return _forEach.apply(this, arguments);\n}\nfunction _forEach() {\n  _forEach = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(iterator, visitor) {\n    var _yield$iterator$next, done, value, cancel;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!true) {\n              _context.next = 14;\n              break;\n            }\n            _context.next = 3;\n            return iterator.next();\n          case 3:\n            _yield$iterator$next = _context.sent;\n            done = _yield$iterator$next.done;\n            value = _yield$iterator$next.value;\n            if (!done) {\n              _context.next = 9;\n              break;\n            }\n            iterator[\"return\"]();\n            return _context.abrupt(\"return\");\n          case 9:\n            cancel = visitor(value);\n            if (!cancel) {\n              _context.next = 12;\n              break;\n            }\n            return _context.abrupt(\"return\");\n          case 12:\n            _context.next = 0;\n            break;\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _forEach.apply(this, arguments);\n}\nexport function concatenateChunksAsync(_x3) {\n  return _concatenateChunksAsync.apply(this, arguments);\n}\nfunction _concatenateChunksAsync() {\n  _concatenateChunksAsync = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(asyncIterator) {\n    var arrayBuffers, strings, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            arrayBuffers = [];\n            strings = [];\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context2.prev = 4;\n            _iterator = _asyncIterator(asyncIterator);\n          case 6:\n            _context2.next = 8;\n            return _iterator.next();\n          case 8:\n            _step = _context2.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context2.next = 12;\n            return _step.value;\n          case 12:\n            _value = _context2.sent;\n            if (_iteratorNormalCompletion) {\n              _context2.next = 19;\n              break;\n            }\n            chunk = _value;\n            if (typeof chunk === 'string') {\n              strings.push(chunk);\n            } else {\n              arrayBuffers.push(chunk);\n            }\n          case 16:\n            _iteratorNormalCompletion = true;\n            _context2.next = 6;\n            break;\n          case 19:\n            _context2.next = 25;\n            break;\n          case 21:\n            _context2.prev = 21;\n            _context2.t0 = _context2[\"catch\"](4);\n            _didIteratorError = true;\n            _iteratorError = _context2.t0;\n          case 25:\n            _context2.prev = 25;\n            _context2.prev = 26;\n            if (!(!_iteratorNormalCompletion && _iterator[\"return\"] != null)) {\n              _context2.next = 30;\n              break;\n            }\n            _context2.next = 30;\n            return _iterator[\"return\"]();\n          case 30:\n            _context2.prev = 30;\n            if (!_didIteratorError) {\n              _context2.next = 33;\n              break;\n            }\n            throw _iteratorError;\n          case 33:\n            return _context2.finish(30);\n          case 34:\n            return _context2.finish(25);\n          case 35:\n            if (!(strings.length > 0)) {\n              _context2.next = 38;\n              break;\n            }\n            assert(arrayBuffers.length === 0);\n            return _context2.abrupt(\"return\", strings.join(''));\n          case 38:\n            return _context2.abrupt(\"return\", concatenateArrayBuffers.apply(void 0, arrayBuffers));\n          case 39:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[4, 21, 25, 35], [26,, 30, 34]]);\n  }));\n  return _concatenateChunksAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/iterator-utils/async-iteration.js"],"names":["concatenateArrayBuffers","assert","forEach","iterator","visitor","done","value","next","cancel","concatenateChunksAsync","asyncIterator","arrayBuffers","strings","chunk","push","length","join"],"mappings":"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","sourcesContent":["import {concatenateArrayBuffers} from '../binary-utils/array-buffer-utils';\nimport assert from '../env-utils/assert';\n\n// GENERAL UTILITIES\n\n/**\n * Iterate over async iterator, without resetting iterator if end is not reached\n * - forEach intentionally does not reset iterator if exiting loop prematurely\n *   so that iteration can continue in a second loop\n * - It is recommended to use a standard for-await as last loop to ensure\n *   iterator gets properly reset\n *\n * TODO - optimize using sync iteration if argument is an Iterable?\n *\n * @param iterator\n * @param visitor\n */\nexport async function forEach(iterator, visitor) {\n  // eslint-disable-next-line\n  while (true) {\n    const {done, value} = await iterator.next();\n    if (done) {\n      iterator.return();\n      return;\n    }\n    const cancel = visitor(value);\n    if (cancel) {\n      return;\n    }\n  }\n}\n\n// Breaking big data into iterable chunks, concatenating iterable chunks into big data objects\n\n/**\n * Concatenates all data chunks yielded by an (async) iterator\n * Supports strings and ArrayBuffers\n *\n * This function can e.g. be used to enable atomic parsers to work on (async) iterator inputs\n */\nexport async function concatenateChunksAsync(asyncIterator) {\n  /** @type {ArrayBuffer[]} */\n  const arrayBuffers = [];\n  /** @type {string[]} */\n  const strings = [];\n  for await (const chunk of asyncIterator) {\n    if (typeof chunk === 'string') {\n      strings.push(chunk);\n    } else {\n      arrayBuffers.push(chunk);\n    }\n  }\n\n  if (strings.length > 0) {\n    assert(arrayBuffers.length === 0);\n    return strings.join('');\n  }\n\n  return concatenateArrayBuffers(...arrayBuffers);\n}\n"]},"metadata":{},"sourceType":"module"}