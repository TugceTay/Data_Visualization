{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { CompositeLayer } from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport GPUGridLayer from '../gpu-grid-layer/gpu-grid-layer';\nimport CPUGridLayer from '../cpu-grid-layer/cpu-grid-layer';\nvar defaultProps = Object.assign({}, GPUGridLayer.defaultProps, CPUGridLayer.defaultProps, {\n  gpuAggregation: false\n});\nvar GridLayer = function (_CompositeLayer) {\n  _inherits(GridLayer, _CompositeLayer);\n  function GridLayer() {\n    _classCallCheck(this, GridLayer);\n    return _possibleConstructorReturn(this, _getPrototypeOf(GridLayer).apply(this, arguments));\n  }\n  _createClass(GridLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        useGPUAggregation: true\n      };\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var oldProps = _ref.oldProps,\n        props = _ref.props,\n        changeFlags = _ref.changeFlags;\n      var newState = {};\n      newState.useGPUAggregation = this.canUseGPUAggregation(props);\n      this.setState(newState);\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props = this.props,\n        data = _this$props.data,\n        updateTriggers = _this$props.updateTriggers;\n      var id = this.state.useGPUAggregation ? 'GPU' : 'CPU';\n      var LayerType = this.state.useGPUAggregation ? this.getSubLayerClass('GPU', GPUGridLayer) : this.getSubLayerClass('CPU', CPUGridLayer);\n      return new LayerType(this.props, this.getSubLayerProps({\n        id: id,\n        updateTriggers: updateTriggers\n      }), {\n        data: data\n      });\n    }\n  }, {\n    key: \"canUseGPUAggregation\",\n    value: function canUseGPUAggregation(props) {\n      var gpuAggregation = props.gpuAggregation,\n        lowerPercentile = props.lowerPercentile,\n        upperPercentile = props.upperPercentile,\n        getColorValue = props.getColorValue,\n        getElevationValue = props.getElevationValue,\n        colorScaleType = props.colorScaleType;\n      if (!gpuAggregation) {\n        return false;\n      }\n      if (!GPUGridAggregator.isSupported(this.context.gl)) {\n        return false;\n      }\n      if (lowerPercentile !== 0 || upperPercentile !== 100) {\n        return false;\n      }\n      if (getColorValue !== null || getElevationValue !== null) {\n        return false;\n      }\n      if (colorScaleType === 'quantile' || colorScaleType === 'ordinal') {\n        return false;\n      }\n      return true;\n    }\n  }]);\n  return GridLayer;\n}(CompositeLayer);\nexport { GridLayer as default };\nGridLayer.layerName = 'GridLayer';\nGridLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/grid-layer/grid-layer.js"],"names":["CompositeLayer","GPUGridAggregator","GPUGridLayer","CPUGridLayer","defaultProps","assign","gpuAggregation","GridLayer","state","useGPUAggregation","oldProps","props","changeFlags","newState","canUseGPUAggregation","setState","data","updateTriggers","id","LayerType","getSubLayerClass","getSubLayerProps","lowerPercentile","upperPercentile","getColorValue","getElevationValue","colorScaleType","isSupported","context","gl","layerName"],"mappings":";;;;;AAAA,SAAQA,cAAR,QAA6B,eAA7B;AACA,OAAOC,iBAAP,MAA8B,mDAA9B;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AAEA,IAAMC,YAAY,GAAG,MAAM,CAACC,MAAP,CAAc,CAAA,CAAd,EAAkBH,YAAY,CAACE,YAA/B,EAA6CD,YAAY,CAACC,YAA1D,EAAwE;EAC3FE,cAAc,EAAE;AAD2E,CAAxE,CAArB;IAIqBC,S;;;;;;;;sCACD;MAChB,IAAA,CAAKC,KAAL,GAAa;QACXC,iBAAiB,EAAE;MADR,CAAb;IAGD;;;sCAE2C;MAAA,IAA/BC,QAA+B,GAAA,IAAA,CAA/BA,QAA+B;QAArBC,KAAqB,GAAA,IAAA,CAArBA,KAAqB;QAAdC,WAAc,GAAA,IAAA,CAAdA,WAAc;MAC1C,IAAMC,QAAQ,GAAG,CAAA,CAAjB;MACAA,QAAQ,CAACJ,iBAATI,GAA6B,IAAA,CAAKC,oBAAL,CAA0BH,KAA1B,CAA7BE;MACA,IAAA,CAAKE,QAAL,CAAcF,QAAd,CAAA;IACD;;;mCAEc;MAAA,IAAA,WAAA,GACkB,IAAA,CAAKF,KADvB;QACNK,IADM,GAAA,WAAA,CACNA,IADM;QACAC,cADA,GAAA,WAAA,CACAA,cADA;MAEb,IAAMC,EAAE,GAAG,IAAA,CAAKV,KAAL,CAAWC,iBAAX,GAA+B,KAA/B,GAAuC,KAAlD;MACA,IAAMU,SAAS,GAAG,IAAA,CAAKX,KAAL,CAAWC,iBAAX,GACd,IAAA,CAAKW,gBAAL,CAAsB,KAAtB,EAA6BlB,YAA7B,CADc,GAEd,IAAA,CAAKkB,gBAAL,CAAsB,KAAtB,EAA6BjB,YAA7B,CAFJ;MAGA,OAAO,IAAIgB,SAAJ,CACL,IAAA,CAAKR,KADA,EAEL,IAAA,CAAKU,gBAAL,CAAsB;QACpBH,EAAE,EAAFA,EADoB;QAEpBD,cAAc,EAAdA;MAFoB,CAAtB,CAFK,EAML;QACED,IAAI,EAAJA;MADF,CANK,CAAP;IAUD;;;yCAIoBL,K,EAAO;MAAA,IAExBL,cAFwB,GAQtBK,KARsB,CAExBL,cAFwB;QAGxBgB,eAHwB,GAQtBX,KARsB,CAGxBW,eAHwB;QAIxBC,eAJwB,GAQtBZ,KARsB,CAIxBY,eAJwB;QAKxBC,aALwB,GAQtBb,KARsB,CAKxBa,aALwB;QAMxBC,iBANwB,GAQtBd,KARsB,CAMxBc,iBANwB;QAOxBC,cAPwB,GAQtBf,KARsB,CAOxBe,cAPwB;MAS1B,IAAI,CAACpB,cAAL,EAAqB;QAEnB,OAAO,KAAP;MACD;MACD,IAAI,CAACL,iBAAiB,CAAC0B,WAAlB1B,CAA8B,IAAA,CAAK2B,OAAL,CAAaC,EAA3C5B,CAAL,EAAqD;QACnD,OAAO,KAAP;MACD;MACD,IAAIqB,eAAe,KAAK,CAApBA,IAAyBC,eAAe,KAAK,GAAjD,EAAsD;QAEpD,OAAO,KAAP;MACD;MACD,IAAIC,aAAa,KAAK,IAAlBA,IAA0BC,iBAAiB,KAAK,IAApD,EAA0D;QAExD,OAAO,KAAP;MACD;MACD,IAAIC,cAAc,KAAK,UAAnBA,IAAiCA,cAAc,KAAK,SAAxD,EAAmE;QAEjE,OAAO,KAAP;MACD;MACD,OAAO,IAAP;IACD;;;EA9DoC1B,c;SAAlBO,S;AAiErBA,SAAS,CAACuB,SAAVvB,GAAsB,WAAtBA;AACAA,SAAS,CAACH,YAAVG,GAAyBH,YAAzBG","sourcesContent":["import {CompositeLayer} from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport GPUGridLayer from '../gpu-grid-layer/gpu-grid-layer';\nimport CPUGridLayer from '../cpu-grid-layer/cpu-grid-layer';\n\nconst defaultProps = Object.assign({}, GPUGridLayer.defaultProps, CPUGridLayer.defaultProps, {\n  gpuAggregation: false\n});\n\nexport default class GridLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      useGPUAggregation: true\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const newState = {};\n    newState.useGPUAggregation = this.canUseGPUAggregation(props);\n    this.setState(newState);\n  }\n\n  renderLayers() {\n    const {data, updateTriggers} = this.props;\n    const id = this.state.useGPUAggregation ? 'GPU' : 'CPU';\n    const LayerType = this.state.useGPUAggregation\n      ? this.getSubLayerClass('GPU', GPUGridLayer)\n      : this.getSubLayerClass('CPU', CPUGridLayer);\n    return new LayerType(\n      this.props,\n      this.getSubLayerProps({\n        id,\n        updateTriggers\n      }),\n      {\n        data\n      }\n    );\n  }\n\n  // Private methods\n\n  canUseGPUAggregation(props) {\n    const {\n      gpuAggregation,\n      lowerPercentile,\n      upperPercentile,\n      getColorValue,\n      getElevationValue,\n      colorScaleType\n    } = props;\n    if (!gpuAggregation) {\n      // cpu aggregation is requested\n      return false;\n    }\n    if (!GPUGridAggregator.isSupported(this.context.gl)) {\n      return false;\n    }\n    if (lowerPercentile !== 0 || upperPercentile !== 100) {\n      // percentile calculations requires sorting not supported on GPU\n      return false;\n    }\n    if (getColorValue !== null || getElevationValue !== null) {\n      // accessor for custom color or elevation calculation is specified\n      return false;\n    }\n    if (colorScaleType === 'quantile' || colorScaleType === 'ordinal') {\n      // quantile and ordinal scales are not supported on GPU\n      return false;\n    }\n    return true;\n  }\n}\n\nGridLayer.layerName = 'GridLayer';\nGridLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}