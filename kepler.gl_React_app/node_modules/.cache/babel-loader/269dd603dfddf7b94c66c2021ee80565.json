{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { assert } from '@loaders.gl/loader-utils';\nimport { createTypedArrayFromAccessor } from './helpers/tile-3d-accessor-utils';\nimport { initializeHierarchy, traverseHierarchy } from './tile-3d-batch-table-hierarchy';\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\nvar clone = function clone(x, y) {\n  return x;\n};\nvar IGNORED_PROPERTY_FIELDS = {\n  HIERARCHY: true,\n  extensions: true,\n  extras: true\n};\nvar Tile3DBatchTableParser = function () {\n  function Tile3DBatchTableParser(json, binary, featureCount) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    _classCallCheck(this, Tile3DBatchTableParser);\n    assert(featureCount >= 0);\n    this.json = json || {};\n    this.binary = binary;\n    this.featureCount = featureCount;\n    this._extensions = this.json && this.json.extensions || {};\n    this._properties = {};\n    for (var propertyName in this.json) {\n      if (!IGNORED_PROPERTY_FIELDS[propertyName]) {\n        this._properties[propertyName] = this.json[propertyName];\n      }\n    }\n    this._binaryProperties = this._initializeBinaryProperties();\n    if (options['3DTILES_batch_table_hierarchy']) {\n      this._hierarchy = initializeHierarchy(this, this.json, this.binary);\n    }\n  }\n  _createClass(Tile3DBatchTableParser, [{\n    key: \"getExtension\",\n    value: function getExtension(extensionName) {\n      return this.json && this.json.extensions && this.json.extensions[extensionName];\n    }\n  }, {\n    key: \"memorySizeInBytes\",\n    value: function memorySizeInBytes() {\n      return 0;\n    }\n  }, {\n    key: \"isClass\",\n    value: function isClass(batchId, className) {\n      this._checkBatchId(batchId);\n      assert(typeof className === 'string', className);\n      if (this._hierarchy) {\n        var result = traverseHierarchy(this._hierarchy, batchId, function (hierarchy, instanceIndex) {\n          var classId = hierarchy.classIds[instanceIndex];\n          var instanceClass = hierarchy.classes[classId];\n          return instanceClass.name === className;\n        });\n        return defined(result);\n      }\n      return false;\n    }\n  }, {\n    key: \"isExactClass\",\n    value: function isExactClass(batchId, className) {\n      assert(typeof className === 'string', className);\n      return this.getExactClassName(batchId) === className;\n    }\n  }, {\n    key: \"getExactClassName\",\n    value: function getExactClassName(batchId) {\n      this._checkBatchId(batchId);\n      if (this._hierarchy) {\n        var classId = this._hierarchy.classIds[batchId];\n        var instanceClass = this._hierarchy.classes[classId];\n        return instanceClass.name;\n      }\n      return undefined;\n    }\n  }, {\n    key: \"hasProperty\",\n    value: function hasProperty(batchId, name) {\n      this._checkBatchId(batchId);\n      assert(typeof name === 'string', name);\n      return defined(this._properties[name]) || this._hasPropertyInHierarchy(batchId, name);\n    }\n  }, {\n    key: \"getPropertyNames\",\n    value: function getPropertyNames(batchId, results) {\n      var _results;\n      this._checkBatchId(batchId);\n      results = defined(results) ? results : [];\n      results.length = 0;\n      var propertyNames = Object.keys(this._properties);\n      (_results = results).push.apply(_results, _toConsumableArray(propertyNames));\n      if (this._hierarchy) {\n        this._getPropertyNamesInHierarchy(batchId, results);\n      }\n      return results;\n    }\n  }, {\n    key: \"getProperty\",\n    value: function getProperty(batchId, name) {\n      this._checkBatchId(batchId);\n      assert(typeof name === 'string', name);\n      if (this._binaryProperties) {\n        var binaryProperty = this._binaryProperties[name];\n        if (defined(binaryProperty)) {\n          return this._getBinaryProperty(binaryProperty, batchId);\n        }\n      }\n      var propertyValues = this._properties[name];\n      if (defined(propertyValues)) {\n        return clone(propertyValues[batchId], true);\n      }\n      if (this._hierarchy) {\n        var hierarchyProperty = this._getHierarchyProperty(batchId, name);\n        if (defined(hierarchyProperty)) {\n          return hierarchyProperty;\n        }\n      }\n      return undefined;\n    }\n  }, {\n    key: \"setProperty\",\n    value: function setProperty(batchId, name, value) {\n      var featureCount = this.featureCount;\n      this._checkBatchId(batchId);\n      assert(typeof name === 'string', name);\n      if (this._binaryProperties) {\n        var binaryProperty = this._binaryProperties[name];\n        if (binaryProperty) {\n          this._setBinaryProperty(binaryProperty, batchId, value);\n          return;\n        }\n      }\n      if (this._hierarchy) {\n        if (this._setHierarchyProperty(this, batchId, name, value)) {\n          return;\n        }\n      }\n      var propertyValues = this._properties[name];\n      if (!defined(propertyValues)) {\n        this._properties[name] = new Array(featureCount);\n        propertyValues = this._properties[name];\n      }\n      propertyValues[batchId] = clone(value, true);\n    }\n  }, {\n    key: \"_checkBatchId\",\n    value: function _checkBatchId(batchId) {\n      var valid = batchId >= 0 && batchId < this.featureCount;\n      if (!valid) {\n        throw new Error(\"batchId not in range [0, featureCount - 1].\");\n      }\n    }\n  }, {\n    key: \"_getBinaryProperty\",\n    value: function _getBinaryProperty(binaryProperty, index) {\n      return binaryProperty.unpack(binaryProperty.typedArray, index);\n    }\n  }, {\n    key: \"_setBinaryProperty\",\n    value: function _setBinaryProperty(binaryProperty, index, value) {\n      binaryProperty.pack(value, binaryProperty.typedArray, index);\n    }\n  }, {\n    key: \"_initializeBinaryProperties\",\n    value: function _initializeBinaryProperties() {\n      var binaryProperties = null;\n      for (var name in this._properties) {\n        var property = this._properties[name];\n        var binaryProperty = this._initializeBinaryProperty(name, property);\n        if (binaryProperty) {\n          binaryProperties = binaryProperties || {};\n          binaryProperties[name] = binaryProperty;\n        }\n      }\n      return binaryProperties;\n    }\n  }, {\n    key: \"_initializeBinaryProperty\",\n    value: function _initializeBinaryProperty(name, property) {\n      if ('byteOffset' in property) {\n        var tile3DAccessor = property;\n        assert(this.binary, \"Property \".concat(name, \" requires a batch table binary.\"));\n        assert(tile3DAccessor.type, \"Property \".concat(name, \" requires a type.\"));\n        var accessor = createTypedArrayFromAccessor(tile3DAccessor, this.binary.buffer, this.binary.byteOffset | 0, this.featureCount);\n        return {\n          typedArray: accessor.values,\n          componentCount: accessor.size,\n          unpack: accessor.unpacker,\n          pack: accessor.packer\n        };\n      }\n      return null;\n    }\n  }, {\n    key: \"_hasPropertyInHierarchy\",\n    value: function _hasPropertyInHierarchy(batchId, name) {\n      if (!this._hierarchy) {\n        return false;\n      }\n      var result = traverseHierarchy(this._hierarchy, batchId, function (hierarchy, instanceIndex) {\n        var classId = hierarchy.classIds[instanceIndex];\n        var instances = hierarchy.classes[classId].instances;\n        return defined(instances[name]);\n      });\n      return defined(result);\n    }\n  }, {\n    key: \"_getPropertyNamesInHierarchy\",\n    value: function _getPropertyNamesInHierarchy(batchId, results) {\n      traverseHierarchy(this._hierarchy, batchId, function (hierarchy, instanceIndex) {\n        var classId = hierarchy.classIds[instanceIndex];\n        var instances = hierarchy.classes[classId].instances;\n        for (var name in instances) {\n          if (instances.hasOwnProperty(name)) {\n            if (results.indexOf(name) === -1) {\n              results.push(name);\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"_getHierarchyProperty\",\n    value: function _getHierarchyProperty(batchId, name) {\n      var _this = this;\n      return traverseHierarchy(this._hierarchy, batchId, function (hierarchy, instanceIndex) {\n        var classId = hierarchy.classIds[instanceIndex];\n        var instanceClass = hierarchy.classes[classId];\n        var indexInClass = hierarchy.classIndexes[instanceIndex];\n        var propertyValues = instanceClass.instances[name];\n        if (defined(propertyValues)) {\n          if (defined(propertyValues.typedArray)) {\n            return _this._getBinaryProperty(propertyValues, indexInClass);\n          }\n          return clone(propertyValues[indexInClass], true);\n        }\n        return null;\n      });\n    }\n  }, {\n    key: \"_setHierarchyProperty\",\n    value: function _setHierarchyProperty(batchTable, batchId, name, value) {\n      var _this2 = this;\n      var result = traverseHierarchy(this._hierarchy, batchId, function (hierarchy, instanceIndex) {\n        var classId = hierarchy.classIds[instanceIndex];\n        var instanceClass = hierarchy.classes[classId];\n        var indexInClass = hierarchy.classIndexes[instanceIndex];\n        var propertyValues = instanceClass.instances[name];\n        if (defined(propertyValues)) {\n          assert(instanceIndex === batchId, \"Inherited property \\\"\".concat(name, \"\\\" is read-only.\"));\n          if (defined(propertyValues.typedArray)) {\n            _this2._setBinaryProperty(propertyValues, indexInClass, value);\n          } else {\n            propertyValues[indexInClass] = clone(value, true);\n          }\n          return true;\n        }\n        return false;\n      });\n      return defined(result);\n    }\n  }]);\n  return Tile3DBatchTableParser;\n}();\nexport { Tile3DBatchTableParser as default };","map":{"version":3,"sources":["../../../../src/lib/classes/tile-3d-batch-table.js"],"names":["assert","createTypedArrayFromAccessor","initializeHierarchy","traverseHierarchy","defined","x","undefined","clone","y","IGNORED_PROPERTY_FIELDS","HIERARCHY","extensions","extras","Tile3DBatchTableParser","json","binary","featureCount","options","_extensions","_properties","propertyName","_binaryProperties","_initializeBinaryProperties","_hierarchy","extensionName","batchId","className","_checkBatchId","result","hierarchy","instanceIndex","classId","classIds","instanceClass","classes","name","getExactClassName","_hasPropertyInHierarchy","results","length","propertyNames","Object","keys","push","_getPropertyNamesInHierarchy","binaryProperty","_getBinaryProperty","propertyValues","hierarchyProperty","_getHierarchyProperty","value","_setBinaryProperty","_setHierarchyProperty","Array","valid","Error","index","unpack","typedArray","pack","binaryProperties","property","_initializeBinaryProperty","tile3DAccessor","type","accessor","buffer","byteOffset","values","componentCount","size","unpacker","packer","instances","hasOwnProperty","indexOf","indexInClass","classIndexes","batchTable"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {assert} from '@loaders.gl/loader-utils';\n\nimport {createTypedArrayFromAccessor} from './helpers/tile-3d-accessor-utils';\nimport {initializeHierarchy, traverseHierarchy} from './tile-3d-batch-table-hierarchy';\n\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\n\nconst clone = (x, y) => x;\n\n// These top level fields in the batch table json are not properties\nconst IGNORED_PROPERTY_FIELDS = {\n  HIERARCHY: true, // Deprecated HIERARCHY property\n  extensions: true,\n  extras: true\n};\n\n// The size of this array equals the maximum instance count among all loaded tiles, which has the potential to be large.\nexport default class Tile3DBatchTableParser {\n  constructor(json, binary, featureCount, options = {}) {\n    assert(featureCount >= 0);\n    this.json = json || {};\n    this.binary = binary;\n    this.featureCount = featureCount;\n\n    this._extensions = (this.json && this.json.extensions) || {};\n\n    // Copy all top-level property fields from the json object, ignoring special fields\n    this._properties = {};\n    for (const propertyName in this.json) {\n      if (!IGNORED_PROPERTY_FIELDS[propertyName]) {\n        this._properties[propertyName] = this.json[propertyName];\n      }\n    }\n\n    this._binaryProperties = this._initializeBinaryProperties();\n\n    // TODO: hierarchy support is only partially implemented and not tested\n    if (options['3DTILES_batch_table_hierarchy']) {\n      this._hierarchy = initializeHierarchy(this, this.json, this.binary);\n    }\n  }\n\n  getExtension(extensionName) {\n    return this.json && this.json.extensions && this.json.extensions[extensionName];\n  }\n\n  memorySizeInBytes() {\n    return 0;\n  }\n\n  isClass(batchId, className) {\n    this._checkBatchId(batchId);\n    assert(typeof className === 'string', className);\n\n    // extension: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      // PERFORMANCE_IDEA : cache results in the ancestor classes\n      //   to speed up this check if this area becomes a hotspot\n      // PERFORMANCE_IDEA : treat class names as integers for faster comparisons\n      const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n        const classId = hierarchy.classIds[instanceIndex];\n        const instanceClass = hierarchy.classes[classId];\n        return instanceClass.name === className;\n      });\n      return defined(result);\n    }\n\n    return false;\n  }\n\n  isExactClass(batchId, className) {\n    assert(typeof className === 'string', className);\n\n    return this.getExactClassName(batchId) === className;\n  }\n\n  getExactClassName(batchId) {\n    this._checkBatchId(batchId);\n\n    // extension: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      const classId = this._hierarchy.classIds[batchId];\n      const instanceClass = this._hierarchy.classes[classId];\n      return instanceClass.name;\n    }\n\n    return undefined;\n  }\n\n  hasProperty(batchId, name) {\n    this._checkBatchId(batchId);\n    assert(typeof name === 'string', name);\n\n    return defined(this._properties[name]) || this._hasPropertyInHierarchy(batchId, name);\n  }\n\n  getPropertyNames(batchId, results) {\n    this._checkBatchId(batchId);\n\n    results = defined(results) ? results : [];\n    results.length = 0;\n\n    const propertyNames = Object.keys(this._properties);\n    results.push(...propertyNames);\n\n    if (this._hierarchy) {\n      this._getPropertyNamesInHierarchy(batchId, results);\n    }\n\n    return results;\n  }\n\n  getProperty(batchId, name) {\n    this._checkBatchId(batchId);\n    assert(typeof name === 'string', name);\n\n    if (this._binaryProperties) {\n      const binaryProperty = this._binaryProperties[name];\n      if (defined(binaryProperty)) {\n        return this._getBinaryProperty(binaryProperty, batchId);\n      }\n    }\n\n    const propertyValues = this._properties[name];\n    if (defined(propertyValues)) {\n      return clone(propertyValues[batchId], true);\n    }\n\n    // EXTENSION: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      const hierarchyProperty = this._getHierarchyProperty(batchId, name);\n      if (defined(hierarchyProperty)) {\n        return hierarchyProperty;\n      }\n    }\n\n    return undefined;\n  }\n\n  setProperty(batchId, name, value) {\n    const featureCount = this.featureCount;\n\n    this._checkBatchId(batchId);\n    assert(typeof name === 'string', name);\n\n    if (this._binaryProperties) {\n      const binaryProperty = this._binaryProperties[name];\n      if (binaryProperty) {\n        this._setBinaryProperty(binaryProperty, batchId, value);\n        return;\n      }\n    }\n\n    // EXTENSION: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      if (this._setHierarchyProperty(this, batchId, name, value)) {\n        return;\n      }\n    }\n\n    let propertyValues = this._properties[name];\n    if (!defined(propertyValues)) {\n      // Property does not exist. Create it.\n      this._properties[name] = new Array(featureCount);\n      propertyValues = this._properties[name];\n    }\n\n    propertyValues[batchId] = clone(value, true);\n  }\n\n  // PRIVATE METHODS\n\n  _checkBatchId(batchId) {\n    const valid = batchId >= 0 && batchId < this.featureCount;\n    if (!valid) {\n      throw new Error(`batchId not in range [0, featureCount - 1].`);\n    }\n  }\n\n  _getBinaryProperty(binaryProperty, index) {\n    return binaryProperty.unpack(binaryProperty.typedArray, index);\n  }\n\n  _setBinaryProperty(binaryProperty, index, value) {\n    binaryProperty.pack(value, binaryProperty.typedArray, index);\n  }\n\n  _initializeBinaryProperties() {\n    let binaryProperties = null;\n    for (const name in this._properties) {\n      const property = this._properties[name];\n      const binaryProperty = this._initializeBinaryProperty(name, property);\n      // Store any information needed to access the binary data, including the typed array,\n      // componentCount (e.g. a VEC4 would be 4), and the type used to pack and unpack (e.g. Cartesian4).\n      if (binaryProperty) {\n        binaryProperties = binaryProperties || {};\n        binaryProperties[name] = binaryProperty;\n      }\n    }\n    return binaryProperties;\n  }\n\n  _initializeBinaryProperty(name, property) {\n    if ('byteOffset' in property) {\n      // This is a binary property\n      const tile3DAccessor = property;\n\n      assert(this.binary, `Property ${name} requires a batch table binary.`);\n      assert(tile3DAccessor.type, `Property ${name} requires a type.`);\n\n      const accessor = createTypedArrayFromAccessor(\n        tile3DAccessor,\n        this.binary.buffer,\n        this.binary.byteOffset | 0,\n        this.featureCount\n      );\n\n      // Store any information needed to access the binary data, including the typed array,\n      // componentCount (e.g. a VEC4 would be 4), and the type used to pack and unpack (e.g. Cartesian4).\n      return {\n        typedArray: accessor.values,\n        componentCount: accessor.size,\n        unpack: accessor.unpacker,\n        pack: accessor.packer\n      };\n    }\n\n    return null;\n  }\n\n  //  EXTENSION SUPPORT: 3DTILES_batch_table_hierarchy\n\n  _hasPropertyInHierarchy(batchId, name) {\n    if (!this._hierarchy) {\n      return false;\n    }\n\n    const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instances = hierarchy.classes[classId].instances;\n      return defined(instances[name]);\n    });\n\n    return defined(result);\n  }\n\n  _getPropertyNamesInHierarchy(batchId, results) {\n    traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instances = hierarchy.classes[classId].instances;\n      for (const name in instances) {\n        if (instances.hasOwnProperty(name)) {\n          if (results.indexOf(name) === -1) {\n            results.push(name);\n          }\n        }\n      }\n    });\n  }\n\n  _getHierarchyProperty(batchId, name) {\n    return traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instanceClass = hierarchy.classes[classId];\n      const indexInClass = hierarchy.classIndexes[instanceIndex];\n      const propertyValues = instanceClass.instances[name];\n      if (defined(propertyValues)) {\n        if (defined(propertyValues.typedArray)) {\n          return this._getBinaryProperty(propertyValues, indexInClass);\n        }\n        return clone(propertyValues[indexInClass], true);\n      }\n      return null;\n    });\n  }\n\n  _setHierarchyProperty(batchTable, batchId, name, value) {\n    const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instanceClass = hierarchy.classes[classId];\n      const indexInClass = hierarchy.classIndexes[instanceIndex];\n      const propertyValues = instanceClass.instances[name];\n      if (defined(propertyValues)) {\n        assert(instanceIndex === batchId, `Inherited property \"${name}\" is read-only.`);\n        if (defined(propertyValues.typedArray)) {\n          this._setBinaryProperty(propertyValues, indexInClass, value);\n        } else {\n          propertyValues[indexInClass] = clone(value, true);\n        }\n        return true;\n      }\n      return false;\n    });\n    return defined(result);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}