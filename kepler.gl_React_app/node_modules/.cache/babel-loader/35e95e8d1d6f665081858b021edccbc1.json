{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport parseImage from '../parsers/parse-image';\nimport { getImageUrls } from './load-image';\nimport { deepLoad } from './deep-load';\nvar GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;\nvar GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;\nvar GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;\nvar GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;\nvar GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;\nvar GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851a;\nvar CUBE_FACES = [{\n  face: GL_TEXTURE_CUBE_MAP_POSITIVE_X,\n  direction: 'right',\n  axis: 'x',\n  sign: 'positive'\n}, {\n  face: GL_TEXTURE_CUBE_MAP_NEGATIVE_X,\n  direction: 'left',\n  axis: 'x',\n  sign: 'negative'\n}, {\n  face: GL_TEXTURE_CUBE_MAP_POSITIVE_Y,\n  direction: 'top',\n  axis: 'y',\n  sign: 'positive'\n}, {\n  face: GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,\n  direction: 'bottom',\n  axis: 'y',\n  sign: 'negative'\n}, {\n  face: GL_TEXTURE_CUBE_MAP_POSITIVE_Z,\n  direction: 'front',\n  axis: 'z',\n  sign: 'positive'\n}, {\n  face: GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,\n  direction: 'back',\n  axis: 'z',\n  sign: 'negative'\n}];\nexport function getImageCubeUrls(_x, _x2) {\n  return _getImageCubeUrls.apply(this, arguments);\n}\nfunction _getImageCubeUrls() {\n  _getImageCubeUrls = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(getUrl, options) {\n    var urls, promises, index, _loop, face;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            urls = {};\n            promises = [];\n            index = 0;\n            _loop = function _loop(face) {\n              var faceValues = CUBE_FACES[index];\n              var promise = getImageUrls(getUrl, options, _objectSpread(_objectSpread({}, faceValues), {}, {\n                index: index++\n              })).then(function (url) {\n                urls[face] = url;\n              });\n              promises.push(promise);\n            };\n            for (face in CUBE_FACES) {\n              _loop(face);\n            }\n            _context.next = 7;\n            return Promise.all(promises);\n          case 7:\n            return _context.abrupt(\"return\", urls);\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getImageCubeUrls.apply(this, arguments);\n}\nexport function loadImageCube(_x3) {\n  return _loadImageCube.apply(this, arguments);\n}\nfunction _loadImageCube() {\n  _loadImageCube = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(getUrl) {\n    var options,\n      urls,\n      _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n            _context2.next = 3;\n            return getImageCubeUrls(getUrl, options);\n          case 3:\n            urls = _context2.sent;\n            _context2.next = 6;\n            return deepLoad(urls, parseImage, options);\n          case 6:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _loadImageCube.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/texture-api/load-image-cube.js"],"names":["parseImage","getImageUrls","deepLoad","GL_TEXTURE_CUBE_MAP_POSITIVE_X","GL_TEXTURE_CUBE_MAP_NEGATIVE_X","GL_TEXTURE_CUBE_MAP_POSITIVE_Y","GL_TEXTURE_CUBE_MAP_NEGATIVE_Y","GL_TEXTURE_CUBE_MAP_POSITIVE_Z","GL_TEXTURE_CUBE_MAP_NEGATIVE_Z","CUBE_FACES","face","direction","axis","sign","getImageCubeUrls","getUrl","options","urls","promises","index","faceValues","promise","then","url","push","Promise","all","loadImageCube"],"mappings":"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","sourcesContent":["import parseImage from '../parsers/parse-image';\nimport {getImageUrls} from './load-image';\nimport {deepLoad} from './deep-load';\n\n// Returned map will be have keys corresponding to GL cubemap constants\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851a;\n\nconst CUBE_FACES = [\n  {face: GL_TEXTURE_CUBE_MAP_POSITIVE_X, direction: 'right', axis: 'x', sign: 'positive'},\n  {face: GL_TEXTURE_CUBE_MAP_NEGATIVE_X, direction: 'left', axis: 'x', sign: 'negative'},\n  {face: GL_TEXTURE_CUBE_MAP_POSITIVE_Y, direction: 'top', axis: 'y', sign: 'positive'},\n  {face: GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, direction: 'bottom', axis: 'y', sign: 'negative'},\n  {face: GL_TEXTURE_CUBE_MAP_POSITIVE_Z, direction: 'front', axis: 'z', sign: 'positive'},\n  {face: GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, direction: 'back', axis: 'z', sign: 'negative'}\n];\n\n// Returns an object with six key-value pairs containing the urls (or url mip arrays)\n// for each cube face\nexport async function getImageCubeUrls(getUrl, options) {\n  // Calculate URLs\n  const urls = {};\n  const promises = [];\n\n  let index = 0;\n  for (const face in CUBE_FACES) {\n    const faceValues = CUBE_FACES[index];\n    const promise = getImageUrls(getUrl, options, {...faceValues, index: index++}).then(url => {\n      urls[face] = url;\n    });\n    promises.push(promise);\n  }\n\n  await Promise.all(promises);\n\n  return urls;\n}\n\n// Returns an object with six key-value pairs containing the images (or image mip arrays)\n// for each cube face\nexport async function loadImageCube(getUrl, options = {}) {\n  const urls = await getImageCubeUrls(getUrl, options);\n  return await deepLoad(urls, parseImage, options);\n}\n"]},"metadata":{},"sourceType":"module"}