{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport assert from '../utils/assert';\nimport { isImageTypeSupported, getDefaultImageType } from '../category-api/image-type';\nimport { getImageData } from '../category-api/parsed-image-api';\nimport parseToImage from './parse-to-image';\nimport parseToImageBitmap from './parse-to-image-bitmap';\nimport parseToNodeImage from './parse-to-node-image';\nexport default function parseImage(_x, _x2, _x3) {\n  return _parseImage.apply(this, arguments);\n}\nfunction _parseImage() {\n  _parseImage = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer, options, context) {\n    var imageOptions, imageType, _ref, url, loadType, image;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = options || {};\n            imageOptions = options.image || {};\n            imageType = imageOptions.type || 'auto';\n            _ref = context || {}, url = _ref.url;\n            loadType = getLoadableImageType(imageType);\n            _context.t0 = loadType;\n            _context.next = _context.t0 === 'imagebitmap' ? 8 : _context.t0 === 'image' ? 12 : _context.t0 === 'data' ? 16 : 20;\n            break;\n          case 8:\n            _context.next = 10;\n            return parseToImageBitmap(arrayBuffer, options, url);\n          case 10:\n            image = _context.sent;\n            return _context.abrupt(\"break\", 21);\n          case 12:\n            _context.next = 14;\n            return parseToImage(arrayBuffer, options, url);\n          case 14:\n            image = _context.sent;\n            return _context.abrupt(\"break\", 21);\n          case 16:\n            _context.next = 18;\n            return parseToNodeImage(arrayBuffer, options);\n          case 18:\n            image = _context.sent;\n            return _context.abrupt(\"break\", 21);\n          case 20:\n            assert(false);\n          case 21:\n            if (imageType === 'data') {\n              image = getImageData(image);\n            }\n            return _context.abrupt(\"return\", image);\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseImage.apply(this, arguments);\n}\nfunction getLoadableImageType(type) {\n  switch (type) {\n    case 'auto':\n    case 'data':\n      return getDefaultImageType();\n    default:\n      isImageTypeSupported(type);\n      return type;\n  }\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-image.js"],"names":["assert","isImageTypeSupported","getDefaultImageType","getImageData","parseToImage","parseToImageBitmap","parseToNodeImage","parseImage","arrayBuffer","options","context","imageOptions","image","imageType","type","url","loadType","getLoadableImageType"],"mappings":"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","sourcesContent":["import assert from '../utils/assert';\nimport {isImageTypeSupported, getDefaultImageType} from '../category-api/image-type';\nimport {getImageData} from '../category-api/parsed-image-api';\nimport parseToImage from './parse-to-image';\nimport parseToImageBitmap from './parse-to-image-bitmap';\nimport parseToNodeImage from './parse-to-node-image';\n\n// Parse to platform defined image type (data on node, ImageBitmap or HTMLImage on browser)\n// eslint-disable-next-line complexity\nexport default async function parseImage(arrayBuffer, options, context) {\n  options = options || {};\n  const imageOptions = options.image || {};\n\n  // The user can request a specific output format via `options.image.type`\n  const imageType = imageOptions.type || 'auto';\n\n  const {url} = context || {};\n\n  // Note: For options.image.type === `data`, we may still need to load as `image` or `imagebitmap`\n  const loadType = getLoadableImageType(imageType);\n\n  let image;\n  switch (loadType) {\n    case 'imagebitmap':\n      image = await parseToImageBitmap(arrayBuffer, options, url);\n      break;\n    case 'image':\n      image = await parseToImage(arrayBuffer, options, url);\n      break;\n    case 'data':\n      // Node.js loads imagedata directly\n      image = await parseToNodeImage(arrayBuffer, options);\n      break;\n    default:\n      assert(false);\n  }\n\n  // Browser: if options.image.type === 'data', we can now extract data from the loaded image\n  if (imageType === 'data') {\n    image = getImageData(image);\n  }\n\n  return image;\n}\n\n// Get a loadable image type from image type\nfunction getLoadableImageType(type) {\n  switch (type) {\n    case 'auto':\n    case 'data':\n      // Browser: For image data we need still need to load using an image format\n      // Node: the default image type is `data`.\n      return getDefaultImageType();\n    default:\n      // Throw an error if not supported\n      isImageTypeSupported(type);\n      return type;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}