{"ast":null,"code":"function formatArrayValue(v, opts) {\n  const {\n    maxElts = 16,\n    size = 1\n  } = opts;\n  let string = '[';\n  for (let i = 0; i < v.length && i < maxElts; ++i) {\n    if (i > 0) {\n      string += \",\".concat(i % size === 0 ? ' ' : '');\n    }\n    string += formatValue(v[i], opts);\n  }\n  const terminator = v.length > maxElts ? '...' : ']';\n  return \"\".concat(string).concat(terminator);\n}\nexport function formatValue(v) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const EPSILON = 1e-16;\n  const {\n    isInteger = false\n  } = opts;\n  if (Array.isArray(v) || ArrayBuffer.isView(v)) {\n    return formatArrayValue(v, opts);\n  }\n  if (!Number.isFinite(v)) {\n    return String(v);\n  }\n  if (Math.abs(v) < EPSILON) {\n    return isInteger ? '0' : '0.';\n  }\n  if (isInteger) {\n    return v.toFixed(0);\n  }\n  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {\n    return v.toFixed(0);\n  }\n  const string = v.toPrecision(2);\n  const decimal = string.indexOf('.0');\n  return decimal === string.length - 2 ? string.slice(0, -1) : string;\n}","map":{"version":3,"sources":["../../../src/utils/format-value.js"],"names":["formatArrayValue","v","opts","maxElts","size","string","i","length","formatValue","terminator","EPSILON","isInteger","Array","isArray","ArrayBuffer","isView","Number","isFinite","String","Math","abs","toFixed","toPrecision","decimal","indexOf","slice"],"mappings":"AAEA,SAASA,gBAAT,CAA0BC,CAA1B,EAA6BC,IAA7B,EAAmC;EACjC,MAAM;IAACC,OAAO,GAAG,EAAX;IAAeC,IAAI,GAAG;EAAtB,CAAA,GAA2BF,IAAjC;EACA,IAAIG,MAAM,GAAG,GAAb;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,CAAC,CAACM,MAAND,IAAgBA,CAAC,GAAGH,OAApC,EAA6C,EAAEG,CAA/C,EAAkD;IAChD,IAAIA,CAAC,GAAG,CAAR,EAAW;MACTD,MAAM,IAAA,GAAA,CAAA,MAAA,CAAQC,CAAC,GAAGF,IAAJE,KAAa,CAAbA,GAAiB,GAAjBA,GAAuB,EAA/B,CAAND;IACD;IACDA,MAAM,IAAIG,WAAW,CAACP,CAAC,CAACK,CAAD,CAAF,EAAOJ,IAAP,CAArBG;EACD;EACD,MAAMI,UAAU,GAAGR,CAAC,CAACM,MAAFN,GAAWE,OAAXF,GAAqB,KAArBA,GAA6B,GAAhD;EACA,OAAA,EAAA,CAAA,MAAA,CAAUI,MAAV,CAAA,CAAA,MAAA,CAAmBI,UAAnB,CAAA;AACD;AAED,OAAO,SAASD,WAAT,CAAqBP,CAArB,EAAmC;EAAA,IAAXC,IAAW,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,CAAA,CAAI;EACxC,MAAMQ,OAAO,GAAG,KAAhB;EACA,MAAM;IAACC,SAAS,GAAG;EAAb,CAAA,GAAsBT,IAA5B;EACA,IAAIU,KAAK,CAACC,OAAND,CAAcX,CAAdW,CAAAA,IAAoBE,WAAW,CAACC,MAAZD,CAAmBb,CAAnBa,CAAxB,EAA+C;IAC7C,OAAOd,gBAAgB,CAACC,CAAD,EAAIC,IAAJ,CAAvB;EACD;EACD,IAAI,CAACc,MAAM,CAACC,QAAPD,CAAgBf,CAAhBe,CAAL,EAAyB;IACvB,OAAOE,MAAM,CAACjB,CAAD,CAAb;EACD;EACD,IAAIkB,IAAI,CAACC,GAALD,CAASlB,CAATkB,CAAAA,GAAcT,OAAlB,EAA2B;IACzB,OAAOC,SAAS,GAAG,GAAH,GAAS,IAAzB;EACD;EACD,IAAIA,SAAJ,EAAe;IACb,OAAOV,CAAC,CAACoB,OAAFpB,CAAU,CAAVA,CAAP;EACD;EACD,IAAIkB,IAAI,CAACC,GAALD,CAASlB,CAATkB,CAAAA,GAAc,GAAdA,IAAqBA,IAAI,CAACC,GAALD,CAASlB,CAATkB,CAAAA,GAAc,KAAvC,EAA8C;IAC5C,OAAOlB,CAAC,CAACoB,OAAFpB,CAAU,CAAVA,CAAP;EACD;EACD,MAAMI,MAAM,GAAGJ,CAAC,CAACqB,WAAFrB,CAAc,CAAdA,CAAf;EACA,MAAMsB,OAAO,GAAGlB,MAAM,CAACmB,OAAPnB,CAAe,IAAfA,CAAhB;EACA,OAAOkB,OAAO,KAAKlB,MAAM,CAACE,MAAPF,GAAgB,CAA5BkB,GAAgClB,MAAM,CAACoB,KAAPpB,CAAa,CAAbA,EAAgB,CAAC,CAAjBA,CAAhCkB,GAAsDlB,MAA7D;AACD","sourcesContent":["// TODO / DEPRECATED - delete when confident that probe.gl logging implements all opts\n/* eslint-disable no-console */\nfunction formatArrayValue(v, opts) {\n  const {maxElts = 16, size = 1} = opts;\n  let string = '[';\n  for (let i = 0; i < v.length && i < maxElts; ++i) {\n    if (i > 0) {\n      string += `,${i % size === 0 ? ' ' : ''}`;\n    }\n    string += formatValue(v[i], opts);\n  }\n  const terminator = v.length > maxElts ? '...' : ']';\n  return `${string}${terminator}`;\n}\n\nexport function formatValue(v, opts = {}) {\n  const EPSILON = 1e-16;\n  const {isInteger = false} = opts;\n  if (Array.isArray(v) || ArrayBuffer.isView(v)) {\n    return formatArrayValue(v, opts);\n  }\n  if (!Number.isFinite(v)) {\n    return String(v);\n  }\n  if (Math.abs(v) < EPSILON) {\n    return isInteger ? '0' : '0.';\n  }\n  if (isInteger) {\n    return v.toFixed(0);\n  }\n  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {\n    return v.toFixed(0);\n  }\n  const string = v.toPrecision(2);\n  const decimal = string.indexOf('.0');\n  return decimal === string.length - 2 ? string.slice(0, -1) : string;\n}\n"]},"metadata":{},"sourceType":"module"}