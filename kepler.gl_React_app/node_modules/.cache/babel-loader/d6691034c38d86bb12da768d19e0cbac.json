{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _awaitAsyncGenerator from \"@babel/runtime/helpers/esm/awaitAsyncGenerator\";\nimport _wrapAsyncGenerator from \"@babel/runtime/helpers/esm/wrapAsyncGenerator\";\nimport _asyncIterator from \"@babel/runtime/helpers/esm/asyncIterator\";\nexport function makeTextDecoderIterator(_x, _x2) {\n  return _makeTextDecoderIterator.apply(this, arguments);\n}\nfunction _makeTextDecoderIterator() {\n  _makeTextDecoderIterator = _wrapAsyncGenerator(_regeneratorRuntime.mark(function _callee(arrayBufferIterator, options) {\n    var textDecoder, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, arrayBuffer;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            textDecoder = new TextDecoder(options);\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 3;\n            _iterator = _asyncIterator(arrayBufferIterator);\n          case 5:\n            _context.next = 7;\n            return _awaitAsyncGenerator(_iterator.next());\n          case 7:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 11;\n            return _awaitAsyncGenerator(_step.value);\n          case 11:\n            _value = _context.sent;\n            if (_iteratorNormalCompletion) {\n              _context.next = 19;\n              break;\n            }\n            arrayBuffer = _value;\n            _context.next = 16;\n            return typeof arrayBuffer === 'string' ? arrayBuffer : textDecoder.decode(arrayBuffer, {\n              stream: true\n            });\n          case 16:\n            _iteratorNormalCompletion = true;\n            _context.next = 5;\n            break;\n          case 19:\n            _context.next = 25;\n            break;\n          case 21:\n            _context.prev = 21;\n            _context.t0 = _context[\"catch\"](3);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n          case 25:\n            _context.prev = 25;\n            _context.prev = 26;\n            if (!(!_iteratorNormalCompletion && _iterator[\"return\"] != null)) {\n              _context.next = 30;\n              break;\n            }\n            _context.next = 30;\n            return _awaitAsyncGenerator(_iterator[\"return\"]());\n          case 30:\n            _context.prev = 30;\n            if (!_didIteratorError) {\n              _context.next = 33;\n              break;\n            }\n            throw _iteratorError;\n          case 33:\n            return _context.finish(30);\n          case 34:\n            return _context.finish(25);\n          case 35:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 21, 25, 35], [26,, 30, 34]]);\n  }));\n  return _makeTextDecoderIterator.apply(this, arguments);\n}\nexport function makeTextEncoderIterator(_x3, _x4) {\n  return _makeTextEncoderIterator.apply(this, arguments);\n}\nfunction _makeTextEncoderIterator() {\n  _makeTextEncoderIterator = _wrapAsyncGenerator(_regeneratorRuntime.mark(function _callee2(textIterator, options) {\n    var textEncoder, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, text;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            textEncoder = new TextEncoder();\n            _iteratorNormalCompletion2 = true;\n            _didIteratorError2 = false;\n            _context2.prev = 3;\n            _iterator2 = _asyncIterator(textIterator);\n          case 5:\n            _context2.next = 7;\n            return _awaitAsyncGenerator(_iterator2.next());\n          case 7:\n            _step2 = _context2.sent;\n            _iteratorNormalCompletion2 = _step2.done;\n            _context2.next = 11;\n            return _awaitAsyncGenerator(_step2.value);\n          case 11:\n            _value2 = _context2.sent;\n            if (_iteratorNormalCompletion2) {\n              _context2.next = 19;\n              break;\n            }\n            text = _value2;\n            _context2.next = 16;\n            return typeof text === 'string' ? textEncoder.encode(text) : text;\n          case 16:\n            _iteratorNormalCompletion2 = true;\n            _context2.next = 5;\n            break;\n          case 19:\n            _context2.next = 25;\n            break;\n          case 21:\n            _context2.prev = 21;\n            _context2.t0 = _context2[\"catch\"](3);\n            _didIteratorError2 = true;\n            _iteratorError2 = _context2.t0;\n          case 25:\n            _context2.prev = 25;\n            _context2.prev = 26;\n            if (!(!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null)) {\n              _context2.next = 30;\n              break;\n            }\n            _context2.next = 30;\n            return _awaitAsyncGenerator(_iterator2[\"return\"]());\n          case 30:\n            _context2.prev = 30;\n            if (!_didIteratorError2) {\n              _context2.next = 33;\n              break;\n            }\n            throw _iteratorError2;\n          case 33:\n            return _context2.finish(30);\n          case 34:\n            return _context2.finish(25);\n          case 35:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 21, 25, 35], [26,, 30, 34]]);\n  }));\n  return _makeTextEncoderIterator.apply(this, arguments);\n}\nexport function makeLineIterator(_x5) {\n  return _makeLineIterator.apply(this, arguments);\n}\nfunction _makeLineIterator() {\n  _makeLineIterator = _wrapAsyncGenerator(_regeneratorRuntime.mark(function _callee3(textIterator) {\n    var previous, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _value3, textChunk, eolIndex, line;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            previous = '';\n            _iteratorNormalCompletion3 = true;\n            _didIteratorError3 = false;\n            _context3.prev = 3;\n            _iterator3 = _asyncIterator(textIterator);\n          case 5:\n            _context3.next = 7;\n            return _awaitAsyncGenerator(_iterator3.next());\n          case 7:\n            _step3 = _context3.sent;\n            _iteratorNormalCompletion3 = _step3.done;\n            _context3.next = 11;\n            return _awaitAsyncGenerator(_step3.value);\n          case 11:\n            _value3 = _context3.sent;\n            if (_iteratorNormalCompletion3) {\n              _context3.next = 26;\n              break;\n            }\n            textChunk = _value3;\n            previous += textChunk;\n            eolIndex = void 0;\n          case 16:\n            if (!((eolIndex = previous.indexOf('\\n')) >= 0)) {\n              _context3.next = 23;\n              break;\n            }\n            line = previous.slice(0, eolIndex + 1);\n            previous = previous.slice(eolIndex + 1);\n            _context3.next = 21;\n            return line;\n          case 21:\n            _context3.next = 16;\n            break;\n          case 23:\n            _iteratorNormalCompletion3 = true;\n            _context3.next = 5;\n            break;\n          case 26:\n            _context3.next = 32;\n            break;\n          case 28:\n            _context3.prev = 28;\n            _context3.t0 = _context3[\"catch\"](3);\n            _didIteratorError3 = true;\n            _iteratorError3 = _context3.t0;\n          case 32:\n            _context3.prev = 32;\n            _context3.prev = 33;\n            if (!(!_iteratorNormalCompletion3 && _iterator3[\"return\"] != null)) {\n              _context3.next = 37;\n              break;\n            }\n            _context3.next = 37;\n            return _awaitAsyncGenerator(_iterator3[\"return\"]());\n          case 37:\n            _context3.prev = 37;\n            if (!_didIteratorError3) {\n              _context3.next = 40;\n              break;\n            }\n            throw _iteratorError3;\n          case 40:\n            return _context3.finish(37);\n          case 41:\n            return _context3.finish(32);\n          case 42:\n            if (!(previous.length > 0)) {\n              _context3.next = 45;\n              break;\n            }\n            _context3.next = 45;\n            return previous;\n          case 45:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[3, 28, 32, 42], [33,, 37, 41]]);\n  }));\n  return _makeLineIterator.apply(this, arguments);\n}\nexport function makeNumberedLineIterator(_x6) {\n  return _makeNumberedLineIterator.apply(this, arguments);\n}\nfunction _makeNumberedLineIterator() {\n  _makeNumberedLineIterator = _wrapAsyncGenerator(_regeneratorRuntime.mark(function _callee4(lineIterator) {\n    var counter, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _value4, line;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            counter = 1;\n            _iteratorNormalCompletion4 = true;\n            _didIteratorError4 = false;\n            _context4.prev = 3;\n            _iterator4 = _asyncIterator(lineIterator);\n          case 5:\n            _context4.next = 7;\n            return _awaitAsyncGenerator(_iterator4.next());\n          case 7:\n            _step4 = _context4.sent;\n            _iteratorNormalCompletion4 = _step4.done;\n            _context4.next = 11;\n            return _awaitAsyncGenerator(_step4.value);\n          case 11:\n            _value4 = _context4.sent;\n            if (_iteratorNormalCompletion4) {\n              _context4.next = 20;\n              break;\n            }\n            line = _value4;\n            _context4.next = 16;\n            return {\n              counter: counter,\n              line: line\n            };\n          case 16:\n            counter++;\n          case 17:\n            _iteratorNormalCompletion4 = true;\n            _context4.next = 5;\n            break;\n          case 20:\n            _context4.next = 26;\n            break;\n          case 22:\n            _context4.prev = 22;\n            _context4.t0 = _context4[\"catch\"](3);\n            _didIteratorError4 = true;\n            _iteratorError4 = _context4.t0;\n          case 26:\n            _context4.prev = 26;\n            _context4.prev = 27;\n            if (!(!_iteratorNormalCompletion4 && _iterator4[\"return\"] != null)) {\n              _context4.next = 31;\n              break;\n            }\n            _context4.next = 31;\n            return _awaitAsyncGenerator(_iterator4[\"return\"]());\n          case 31:\n            _context4.prev = 31;\n            if (!_didIteratorError4) {\n              _context4.next = 34;\n              break;\n            }\n            throw _iteratorError4;\n          case 34:\n            return _context4.finish(31);\n          case 35:\n            return _context4.finish(26);\n          case 36:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[3, 22, 26, 36], [27,, 31, 35]]);\n  }));\n  return _makeNumberedLineIterator.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/iterator-utils/text-iterators.js"],"names":["makeTextDecoderIterator","arrayBufferIterator","options","textDecoder","TextDecoder","arrayBuffer","decode","stream","makeTextEncoderIterator","textIterator","textEncoder","TextEncoder","text","encode","makeLineIterator","previous","textChunk","eolIndex","indexOf","line","slice","length","makeNumberedLineIterator","lineIterator","counter"],"mappings":";;;;AAKA,OAAA,SAAuBA,uBAAvB,CAAA,EAAA,EAAA,GAAA,EAAA;EAAA,OAAA,wBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;0EAAO,SAAA,OAAA,CAAwCC,mBAAxC,EAA6DC,OAA7D,EAAA;IAAA,IAAA,WAAA,EAAA,yBAAA,EAAA,iBAAA,EAAA,cAAA,EAAA,SAAA,EAAA,KAAA,EAAA,MAAA,EAAA,WAAA;IAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YACCC,WADD,GACe,IAAIC,WAAJ,CAAgBF,OAAhB,CADf;YAAA,yBAAA,GAAA,IAAA;YAAA,iBAAA,GAAA,KAAA;YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;YAAA,SAAA,GAAA,cAAA,CAE2BD,mBAF3B,CAAA;UAAA,KAAA,CAAA;YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OAAA,oBAAA,CAAA,SAAA,CAAA,IAAA,EAAA,CAAA;UAAA,KAAA,CAAA;YAAA,KAAA,GAAA,QAAA,CAAA,IAAA;YAAA,yBAAA,GAAA,KAAA,CAAA,IAAA;YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;YAAA,OAAA,oBAAA,CAAA,KAAA,CAAA,KAAA,CAAA;UAAA,KAAA,EAAA;YAAA,MAAA,GAAA,QAAA,CAAA,IAAA;YAAA,IAAA,yBAAA,EAAA;cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;YAEYI,WAFZ,GAAA,MAAA;YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;YAGH,OAAM,OAAOA,WAAP,KAAuB,QAAvB,GACFA,WADE,GAEF,WAAW,CAACC,MAAZ,CAAmBD,WAAnB,EAAgC;cAACE,MAAM,EAAE;YAAT,CAAhC,CAFJ;UAHG,KAAA,EAAA;YAAA,yBAAA,GAAA,IAAA;YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;YAAA;UAAA,KAAA,EAAA;YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;YAAA;UAAA,KAAA,EAAA;YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;YAAA,QAAA,CAAA,EAAA,GAAA,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;YAAA,iBAAA,GAAA,IAAA;YAAA,cAAA,GAAA,QAAA,CAAA,EAAA;UAAA,KAAA,EAAA;YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;YAAA,IAAA,EAAA,CAAA,yBAAA,IAAA,SAAA,CAAA,QAAA,CAAA,IAAA,IAAA,CAAA,EAAA;cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;YAAA,OAAA,oBAAA,CAAA,SAAA,CAAA,QAAA,CAAA,EAAA,CAAA;UAAA,KAAA,EAAA;YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;YAAA,IAAA,CAAA,iBAAA,EAAA;cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;YAAA,MAAA,cAAA;UAAA,KAAA,EAAA;YAAA,OAAA,QAAA,CAAA,MAAA,CAAA,EAAA,CAAA;UAAA,KAAA,EAAA;YAAA,OAAA,QAAA,CAAA,MAAA,CAAA,EAAA,CAAA;UAAA,KAAA,EAAA;UAAA,KAAA,KAAA;YAAA,OAAA,QAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,OAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,EAAA,CAAA,CAAA,CAAA;EAAA,C;;;AAcP,OAAA,SAAuBC,uBAAvB,CAAA,GAAA,EAAA,GAAA,EAAA;EAAA,OAAA,wBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;0EAAO,SAAA,QAAA,CAAwCC,YAAxC,EAAsDP,OAAtD,EAAA;IAAA,IAAA,WAAA,EAAA,0BAAA,EAAA,kBAAA,EAAA,eAAA,EAAA,UAAA,EAAA,MAAA,EAAA,OAAA,EAAA,IAAA;IAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YACCQ,WADD,GACe,IAAIC,WAAJ,EADf;YAAA,0BAAA,GAAA,IAAA;YAAA,kBAAA,GAAA,KAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA,UAAA,GAAA,cAAA,CAEoBF,YAFpB,CAAA;UAAA,KAAA,CAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OAAA,oBAAA,CAAA,UAAA,CAAA,IAAA,EAAA,CAAA;UAAA,KAAA,CAAA;YAAA,MAAA,GAAA,SAAA,CAAA,IAAA;YAAA,0BAAA,GAAA,MAAA,CAAA,IAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,OAAA,oBAAA,CAAA,MAAA,CAAA,KAAA,CAAA;UAAA,KAAA,EAAA;YAAA,OAAA,GAAA,SAAA,CAAA,IAAA;YAAA,IAAA,0BAAA,EAAA;cAAA,SAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;YAEYG,IAFZ,GAAA,OAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAGH,OAAM,OAAOA,IAAP,KAAgB,QAAhB,GAA2BF,WAAW,CAACG,MAAZH,CAAmBE,IAAnBF,CAA3B,GAAsDE,IAA5D;UAHG,KAAA,EAAA;YAAA,0BAAA,GAAA,IAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA;UAAA,KAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA;UAAA,KAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,SAAA,CAAA,EAAA,GAAA,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;YAAA,kBAAA,GAAA,IAAA;YAAA,eAAA,GAAA,SAAA,CAAA,EAAA;UAAA,KAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,IAAA,EAAA,CAAA,0BAAA,IAAA,UAAA,CAAA,QAAA,CAAA,IAAA,IAAA,CAAA,EAAA;cAAA,SAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,OAAA,oBAAA,CAAA,UAAA,CAAA,QAAA,CAAA,EAAA,CAAA;UAAA,KAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,IAAA,CAAA,kBAAA,EAAA;cAAA,SAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;YAAA,MAAA,eAAA;UAAA,KAAA,EAAA;YAAA,OAAA,SAAA,CAAA,MAAA,CAAA,EAAA,CAAA;UAAA,KAAA,EAAA;YAAA,OAAA,SAAA,CAAA,MAAA,CAAA,EAAA,CAAA;UAAA,KAAA,EAAA;UAAA,KAAA,KAAA;YAAA,OAAA,SAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,EAAA,CAAA,CAAA,CAAA;EAAA,C;;;AAaP,OAAA,SAAuBE,gBAAvB,CAAA,GAAA,EAAA;EAAA,OAAA,iBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;mEAAO,SAAA,QAAA,CAAiCL,YAAjC,EAAA;IAAA,IAAA,QAAA,EAAA,0BAAA,EAAA,kBAAA,EAAA,eAAA,EAAA,UAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,IAAA;IAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YACDM,QADC,GACU,EADV;YAAA,0BAAA,GAAA,IAAA;YAAA,kBAAA,GAAA,KAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA,UAAA,GAAA,cAAA,CAEyBN,YAFzB,CAAA;UAAA,KAAA,CAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OAAA,oBAAA,CAAA,UAAA,CAAA,IAAA,EAAA,CAAA;UAAA,KAAA,CAAA;YAAA,MAAA,GAAA,SAAA,CAAA,IAAA;YAAA,0BAAA,GAAA,MAAA,CAAA,IAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,OAAA,oBAAA,CAAA,MAAA,CAAA,KAAA,CAAA;UAAA,KAAA,EAAA;YAAA,OAAA,GAAA,SAAA,CAAA,IAAA;YAAA,IAAA,0BAAA,EAAA;cAAA,SAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;YAEYO,SAFZ,GAAA,OAAA;YAGHD,QAAQ,IAAIC,SAAZD;YACIE,QAJD,GAAA,KAAA,CAAA;UAAA,KAAA,EAAA;YAAA,IAAA,EAKI,CAACA,QAAQ,GAAGF,QAAQ,CAACG,OAATH,CAAiB,IAAjBA,CAAZ,KAAuC,CAL3C,CAAA,EAAA;cAAA,SAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;YAOKI,IAPL,GAOYJ,QAAQ,CAACK,KAATL,CAAe,CAAfA,EAAkBE,QAAQ,GAAG,CAA7BF,CAPZ;YAQDA,QAAQ,GAAGA,QAAQ,CAACK,KAATL,CAAeE,QAAQ,GAAG,CAA1BF,CAAXA;YARC,SAAA,CAAA,IAAA,GAAA,EAAA;YASD,OAAMI,IAAN;UATC,KAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA;UAAA,KAAA,EAAA;YAAA,0BAAA,GAAA,IAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA;UAAA,KAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA;UAAA,KAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,SAAA,CAAA,EAAA,GAAA,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;YAAA,kBAAA,GAAA,IAAA;YAAA,eAAA,GAAA,SAAA,CAAA,EAAA;UAAA,KAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,IAAA,EAAA,CAAA,0BAAA,IAAA,UAAA,CAAA,QAAA,CAAA,IAAA,IAAA,CAAA,EAAA;cAAA,SAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,OAAA,oBAAA,CAAA,UAAA,CAAA,QAAA,CAAA,EAAA,CAAA;UAAA,KAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,IAAA,CAAA,kBAAA,EAAA;cAAA,SAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;YAAA,MAAA,eAAA;UAAA,KAAA,EAAA;YAAA,OAAA,SAAA,CAAA,MAAA,CAAA,EAAA,CAAA;UAAA,KAAA,EAAA;YAAA,OAAA,SAAA,CAAA,MAAA,CAAA,EAAA,CAAA;UAAA,KAAA,EAAA;YAAA,IAAA,EAaDJ,QAAQ,CAACM,MAATN,GAAkB,CAbjB,CAAA,EAAA;cAAA,SAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAcH,OAAMA,QAAN;UAdG,KAAA,EAAA;UAAA,KAAA,KAAA;YAAA,OAAA,SAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,EAAA,CAAA,CAAA,CAAA;EAAA,C;;;AAwBP,OAAA,SAAuBO,wBAAvB,CAAA,GAAA,EAAA;EAAA,OAAA,yBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;2EAAO,SAAA,QAAA,CAAyCC,YAAzC,EAAA;IAAA,IAAA,OAAA,EAAA,0BAAA,EAAA,kBAAA,EAAA,eAAA,EAAA,UAAA,EAAA,MAAA,EAAA,OAAA,EAAA,IAAA;IAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;MAAA,OAAA,CAAA,EAAA;QAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;UAAA,KAAA,CAAA;YACDC,OADC,GACS,CADT;YAAA,0BAAA,GAAA,IAAA;YAAA,kBAAA,GAAA,KAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA,UAAA,GAAA,cAAA,CAEoBD,YAFpB,CAAA;UAAA,KAAA,CAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA,OAAA,oBAAA,CAAA,UAAA,CAAA,IAAA,EAAA,CAAA;UAAA,KAAA,CAAA;YAAA,MAAA,GAAA,SAAA,CAAA,IAAA;YAAA,0BAAA,GAAA,MAAA,CAAA,IAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,OAAA,oBAAA,CAAA,MAAA,CAAA,KAAA,CAAA;UAAA,KAAA,EAAA;YAAA,OAAA,GAAA,SAAA,CAAA,IAAA;YAAA,IAAA,0BAAA,EAAA;cAAA,SAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;YAEYJ,IAFZ,GAAA,OAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAGH,OAAM;cAACK,OAAO,EAAPA,OAAD;cAAUL,IAAI,EAAJA;YAAV,CAAN;UAHG,KAAA,EAAA;YAIHK,OAAO,EAAA;UAJJ,KAAA,EAAA;YAAA,0BAAA,GAAA,IAAA;YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;YAAA;UAAA,KAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA;UAAA,KAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,SAAA,CAAA,EAAA,GAAA,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;YAAA,kBAAA,GAAA,IAAA;YAAA,eAAA,GAAA,SAAA,CAAA,EAAA;UAAA,KAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,IAAA,EAAA,CAAA,0BAAA,IAAA,UAAA,CAAA,QAAA,CAAA,IAAA,IAAA,CAAA,EAAA;cAAA,SAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,OAAA,oBAAA,CAAA,UAAA,CAAA,QAAA,CAAA,EAAA,CAAA;UAAA,KAAA,EAAA;YAAA,SAAA,CAAA,IAAA,GAAA,EAAA;YAAA,IAAA,CAAA,kBAAA,EAAA;cAAA,SAAA,CAAA,IAAA,GAAA,EAAA;cAAA;YAAA;YAAA,MAAA,eAAA;UAAA,KAAA,EAAA;YAAA,OAAA,SAAA,CAAA,MAAA,CAAA,EAAA,CAAA;UAAA,KAAA,EAAA;YAAA,OAAA,SAAA,CAAA,MAAA,CAAA,EAAA,CAAA;UAAA,KAAA,EAAA;UAAA,KAAA,KAAA;YAAA,OAAA,SAAA,CAAA,IAAA,EAAA;QAAA;MAAA;IAAA,CAAA,EAAA,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,EAAA,CAAA,CAAA,CAAA;EAAA,C","sourcesContent":["// TextDecoder iterators\n// TextDecoder will keep any partial undecoded bytes between calls to `decode`\n\n/* global TextDecoder, TextEncoder */\n\nexport async function* makeTextDecoderIterator(arrayBufferIterator, options) {\n  const textDecoder = new TextDecoder(options);\n  for await (const arrayBuffer of arrayBufferIterator) {\n    yield typeof arrayBuffer === 'string'\n      ? arrayBuffer\n      : textDecoder.decode(arrayBuffer, {stream: true});\n  }\n}\n\n// TextEncoder iterator\n// TODO - this is not useful unless min chunk size is given\n// TextEncoder will keep any partial undecoded bytes between calls to `encode`\n// If iterator does not yield strings, assume arrayBuffer and return unencoded\n\nexport async function* makeTextEncoderIterator(textIterator, options) {\n  const textEncoder = new TextEncoder();\n  for await (const text of textIterator) {\n    yield typeof text === 'string' ? textEncoder.encode(text) : text;\n  }\n}\n\n/**\n * @param textIterator async iterable yielding strings\n * @returns an async iterable over lines\n * See http://2ality.com/2018/04/async-iter-nodejs.html\n */\n\nexport async function* makeLineIterator(textIterator) {\n  let previous = '';\n  for await (const textChunk of textIterator) {\n    previous += textChunk;\n    let eolIndex;\n    while ((eolIndex = previous.indexOf('\\n')) >= 0) {\n      // line includes the EOL\n      const line = previous.slice(0, eolIndex + 1);\n      previous = previous.slice(eolIndex + 1);\n      yield line;\n    }\n  }\n\n  if (previous.length > 0) {\n    yield previous;\n  }\n}\n\n/**\n * @param lineIterator async iterable yielding lines\n * @returns async iterable yielding numbered lines\n *\n * See http://2ality.com/2018/04/async-iter-nodejs.html\n */\nexport async function* makeNumberedLineIterator(lineIterator) {\n  let counter = 1;\n  for await (const line of lineIterator) {\n    yield {counter, line};\n    counter++;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}