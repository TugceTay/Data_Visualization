{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nexport default function parseJSONSync(jsonText, options) {\n  try {\n    var json = JSON.parse(jsonText);\n    if (options.json.table) {\n      return getFirstArray(json) || json;\n    }\n    return json;\n  } catch (error) {\n    throw new Error('JSONLoader: failed to parse JSON');\n  }\n}\nfunction getFirstArray(json) {\n  if (Array.isArray(json)) {\n    return json;\n  }\n  if (json && _typeof(json) === 'object') {\n    for (var _i = 0, _Object$values = Object.values(json); _i < _Object$values.length; _i++) {\n      var value = _Object$values[_i];\n      var array = getFirstArray(value);\n      if (array) {\n        return array;\n      }\n    }\n  }\n  return null;\n}","map":{"version":3,"sources":["../../../src/lib/parse-json.js"],"names":["parseJSONSync","jsonText","options","json","JSON","parse","table","getFirstArray","error","Error","Array","isArray","value","Object","values","array"],"mappings":";AAAA,eAAe,SAASA,aAAT,CAAuBC,QAAvB,EAAiCC,OAAjC,EAA0C;EACvD,IAAI;IACF,IAAMC,IAAI,GAAGC,IAAI,CAACC,KAALD,CAAWH,QAAXG,CAAb;IACA,IAAIF,OAAO,CAACC,IAARD,CAAaI,KAAjB,EAAwB;MACtB,OAAOC,aAAa,CAACJ,IAAD,CAAbI,IAAuBJ,IAA9B;IACD;IACD,OAAOA,IAAP;EACD,CAND,CAME,OAAOK,KAAP,EAAc;IACd,MAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;EACD;AACF;AAED,SAASF,aAAT,CAAuBJ,IAAvB,EAA6B;EAC3B,IAAIO,KAAK,CAACC,OAAND,CAAcP,IAAdO,CAAJ,EAAyB;IACvB,OAAOP,IAAP;EACD;EACD,IAAIA,IAAI,IAAI,OAAA,CAAOA,IAAP,CAAA,KAAgB,QAA5B,EAAsC;IACpC,KAAA,IAAA,EAAA,GAAA,CAAA,EAAA,cAAA,GAAoBU,MAAM,CAACC,MAAPD,CAAcV,IAAdU,CAApB,EAAA,EAAA,GAAA,cAAA,CAAA,MAAA,EAAA,EAAA,EAAA,EAAyC;MAApC,IAAMD,KAAK,GAAA,cAAA,CAAA,EAAA,CAAX;MACH,IAAMG,KAAK,GAAGR,aAAa,CAACK,KAAD,CAA3B;MACA,IAAIG,KAAJ,EAAW;QACT,OAAOA,KAAP;MACD;IACF;EACF;EACD,OAAO,IAAP;AACD","sourcesContent":["export default function parseJSONSync(jsonText, options) {\n  try {\n    const json = JSON.parse(jsonText);\n    if (options.json.table) {\n      return getFirstArray(json) || json;\n    }\n    return json;\n  } catch (error) {\n    throw new Error('JSONLoader: failed to parse JSON');\n  }\n}\n\nfunction getFirstArray(json) {\n  if (Array.isArray(json)) {\n    return json;\n  }\n  if (json && typeof json === 'object') {\n    for (const value of Object.values(json)) {\n      const array = getFirstArray(value);\n      if (array) {\n        return array;\n      }\n    }\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}