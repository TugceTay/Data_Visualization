{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nvar defaultGetValue = function defaultGetValue(points) {\n  return points.length;\n};\nimport { clamp, getQuantileDomain, getOrdinalDomain } from './scale-utils';\nvar MAX_32_BIT_FLOAT = 3.402823466e38;\nvar defaultGetPoints = function defaultGetPoints(bin) {\n  return bin.points;\n};\nvar defaultGetIndex = function defaultGetIndex(bin) {\n  return bin.index;\n};\nvar ascending = function ascending(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n};\nvar defaultProps = {\n  getValue: defaultGetValue,\n  getPoints: defaultGetPoints,\n  getIndex: defaultGetIndex,\n  filterData: null\n};\nvar BinSorter = function () {\n  function BinSorter() {\n    var bins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultProps;\n    _classCallCheck(this, BinSorter);\n    this.aggregatedBins = this.getAggregatedBins(bins, props);\n    this._updateMinMaxValues();\n    this.binMap = this.getBinMap();\n  }\n  _createClass(BinSorter, [{\n    key: \"getAggregatedBins\",\n    value: function getAggregatedBins(bins, props) {\n      var _props$getValue = props.getValue,\n        getValue = _props$getValue === void 0 ? defaultGetValue : _props$getValue,\n        _props$getPoints = props.getPoints,\n        getPoints = _props$getPoints === void 0 ? defaultGetPoints : _props$getPoints,\n        _props$getIndex = props.getIndex,\n        getIndex = _props$getIndex === void 0 ? defaultGetIndex : _props$getIndex,\n        filterData = props.filterData;\n      var hasFilter = typeof filterData === 'function';\n      var binCount = bins.length;\n      var aggregatedBins = [];\n      var index = 0;\n      for (var binIndex = 0; binIndex < binCount; binIndex++) {\n        var bin = bins[binIndex];\n        var points = getPoints(bin);\n        var i = getIndex(bin);\n        var filteredPoints = hasFilter ? points.filter(filterData) : points;\n        bin.filteredPoints = hasFilter ? filteredPoints : null;\n        var value = filteredPoints.length ? getValue(filteredPoints) : null;\n        if (value !== null && value !== undefined) {\n          aggregatedBins[index] = {\n            i: Number.isFinite(i) ? i : binIndex,\n            value: value,\n            counts: filteredPoints.length\n          };\n          index++;\n        }\n      }\n      return aggregatedBins;\n    }\n  }, {\n    key: \"_percentileToIndex\",\n    value: function _percentileToIndex(percentileRange) {\n      var len = this.sortedBins.length;\n      if (len < 2) {\n        return [0, 0];\n      }\n      var _percentileRange$map = percentileRange.map(function (n) {\n          return clamp(n, 0, 100);\n        }),\n        _percentileRange$map2 = _slicedToArray(_percentileRange$map, 2),\n        lower = _percentileRange$map2[0],\n        upper = _percentileRange$map2[1];\n      var lowerIdx = Math.ceil(lower / 100 * (len - 1));\n      var upperIdx = Math.floor(upper / 100 * (len - 1));\n      return [lowerIdx, upperIdx];\n    }\n  }, {\n    key: \"getBinMap\",\n    value: function getBinMap() {\n      var binMap = {};\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n      try {\n        for (var _iterator = this.aggregatedBins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var bin = _step.value;\n          binMap[bin.i] = bin;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n      return binMap;\n    }\n  }, {\n    key: \"_updateMinMaxValues\",\n    value: function _updateMinMaxValues() {\n      var maxCount = 0;\n      var maxValue = 0;\n      var minValue = MAX_32_BIT_FLOAT;\n      var totalCount = 0;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n      try {\n        for (var _iterator2 = this.aggregatedBins[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var x = _step2.value;\n          maxCount = maxCount > x.counts ? maxCount : x.counts;\n          maxValue = maxValue > x.value ? maxValue : x.value;\n          minValue = minValue < x.value ? minValue : x.value;\n          totalCount += x.counts;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n      this.maxCount = maxCount;\n      this.maxValue = maxValue;\n      this.minValue = minValue;\n      this.totalCount = totalCount;\n    }\n  }, {\n    key: \"getValueRange\",\n    value: function getValueRange(percentileRange) {\n      if (!this.sortedBins) {\n        this.sortedBins = this.aggregatedBins.sort(function (a, b) {\n          return ascending(a.value, b.value);\n        });\n      }\n      if (!this.sortedBins.length) {\n        return [];\n      }\n      var lowerIdx = 0;\n      var upperIdx = this.sortedBins.length - 1;\n      if (Array.isArray(percentileRange)) {\n        var idxRange = this._percentileToIndex(percentileRange);\n        lowerIdx = idxRange[0];\n        upperIdx = idxRange[1];\n      }\n      return [this.sortedBins[lowerIdx].value, this.sortedBins[upperIdx].value];\n    }\n  }, {\n    key: \"getValueDomainByScale\",\n    value: function getValueDomainByScale(scale) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [],\n        _ref2 = _slicedToArray(_ref, 2),\n        _ref2$ = _ref2[0],\n        lower = _ref2$ === void 0 ? 0 : _ref2$,\n        _ref2$2 = _ref2[1],\n        upper = _ref2$2 === void 0 ? 100 : _ref2$2;\n      if (!this.sortedBins) {\n        this.sortedBins = this.aggregatedBins.sort(function (a, b) {\n          return ascending(a.value, b.value);\n        });\n      }\n      if (!this.sortedBins.length) {\n        return [];\n      }\n      var indexEdge = this._percentileToIndex([lower, upper]);\n      return this._getScaleDomain(scale, indexEdge);\n    }\n  }, {\n    key: \"_getScaleDomain\",\n    value: function _getScaleDomain(scaleType, _ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n        lowerIdx = _ref4[0],\n        upperIdx = _ref4[1];\n      var bins = this.sortedBins;\n      switch (scaleType) {\n        case 'quantize':\n        case 'linear':\n          return [bins[lowerIdx].value, bins[upperIdx].value];\n        case 'quantile':\n          return getQuantileDomain(bins.slice(lowerIdx, upperIdx + 1), function (d) {\n            return d.value;\n          });\n        case 'ordinal':\n          return getOrdinalDomain(bins, function (d) {\n            return d.value;\n          });\n        default:\n          return [bins[lowerIdx].value, bins[upperIdx].value];\n      }\n    }\n  }]);\n  return BinSorter;\n}();\nexport { BinSorter as default };","map":{"version":3,"sources":["../../../src/utils/bin-sorter.js"],"names":["defaultGetValue","points","length","clamp","getQuantileDomain","getOrdinalDomain","MAX_32_BIT_FLOAT","defaultGetPoints","bin","defaultGetIndex","index","ascending","a","b","NaN","defaultProps","getValue","getPoints","getIndex","filterData","BinSorter","bins","props","aggregatedBins","getAggregatedBins","_updateMinMaxValues","binMap","getBinMap","hasFilter","binCount","binIndex","i","filteredPoints","filter","value","undefined","Number","isFinite","counts","percentileRange","len","sortedBins","lower","upper","map","n","lowerIdx","Math","ceil","upperIdx","floor","maxCount","maxValue","minValue","totalCount","x","sort","Array","isArray","idxRange","_percentileToIndex","scale","indexEdge","_getScaleDomain","scaleType","slice","d"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// getValue takes an array of points returns a value to sort the bins on.\n// by default it returns the number of points\n// this is where to pass in a function to color the bins by\n// avg/mean/max of specific value of the point\nconst defaultGetValue = points => points.length;\n\nimport {clamp, getQuantileDomain, getOrdinalDomain} from './scale-utils';\n\nconst MAX_32_BIT_FLOAT = 3.402823466e38;\n\n// access array of points in each bin\nconst defaultGetPoints = bin => bin.points;\n// access index of each bin\nconst defaultGetIndex = bin => bin.index;\n\n// d3-scending\nconst ascending = (a, b) => (a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN);\n\nconst defaultProps = {\n  getValue: defaultGetValue,\n  getPoints: defaultGetPoints,\n  getIndex: defaultGetIndex,\n  filterData: null\n};\n\nexport default class BinSorter {\n  constructor(bins = [], props = defaultProps) {\n    this.aggregatedBins = this.getAggregatedBins(bins, props);\n    this._updateMinMaxValues();\n    this.binMap = this.getBinMap();\n  }\n\n  /**\n   * Get an array of object with aggregated values and index of bins\n   * Array object will be sorted by value optionally.\n   * @param {Array} bins\n   * @param {Function} getValue\n   * @return {Array} array of values and index lookup\n   */\n  getAggregatedBins(bins, props) {\n    const {\n      getValue = defaultGetValue,\n      getPoints = defaultGetPoints,\n      getIndex = defaultGetIndex,\n      filterData\n    } = props;\n\n    const hasFilter = typeof filterData === 'function';\n    const binCount = bins.length;\n    const aggregatedBins = [];\n    let index = 0;\n\n    for (let binIndex = 0; binIndex < binCount; binIndex++) {\n      const bin = bins[binIndex];\n      const points = getPoints(bin);\n      const i = getIndex(bin);\n\n      const filteredPoints = hasFilter ? points.filter(filterData) : points;\n\n      bin.filteredPoints = hasFilter ? filteredPoints : null;\n\n      const value = filteredPoints.length ? getValue(filteredPoints) : null;\n\n      if (value !== null && value !== undefined) {\n        // filter bins if value is null or undefined\n        aggregatedBins[index] = {\n          i: Number.isFinite(i) ? i : binIndex,\n          value,\n          counts: filteredPoints.length\n        };\n        index++;\n      }\n    }\n    return aggregatedBins;\n  }\n\n  _percentileToIndex(percentileRange) {\n    const len = this.sortedBins.length;\n    if (len < 2) {\n      return [0, 0];\n    }\n\n    const [lower, upper] = percentileRange.map(n => clamp(n, 0, 100));\n\n    const lowerIdx = Math.ceil((lower / 100) * (len - 1));\n    const upperIdx = Math.floor((upper / 100) * (len - 1));\n\n    return [lowerIdx, upperIdx];\n  }\n\n  /**\n   * Get a mapping from cell/hexagon index to sorted bin\n   * This is used to retrieve bin value for color calculation\n   * @return {Object} bin index to aggregatedBins\n   */\n  getBinMap() {\n    const binMap = {};\n    for (const bin of this.aggregatedBins) {\n      binMap[bin.i] = bin;\n    }\n    return binMap;\n  }\n\n  // Private\n\n  /**\n   * Get ths max count of all bins\n   * @return {Number | Boolean} max count\n   */\n  _updateMinMaxValues() {\n    let maxCount = 0;\n    let maxValue = 0;\n    let minValue = MAX_32_BIT_FLOAT;\n    let totalCount = 0;\n    for (const x of this.aggregatedBins) {\n      maxCount = maxCount > x.counts ? maxCount : x.counts;\n      maxValue = maxValue > x.value ? maxValue : x.value;\n      minValue = minValue < x.value ? minValue : x.value;\n      totalCount += x.counts;\n    }\n    this.maxCount = maxCount;\n    this.maxValue = maxValue;\n    this.minValue = minValue;\n    this.totalCount = totalCount;\n  }\n\n  /**\n   * Get range of values of all bins\n   * @param {Number[]} range\n   * @param {Number} range[0] - lower bound\n   * @param {Number} range[1] - upper bound\n   * @return {Array} array of new value range\n   */\n  getValueRange(percentileRange) {\n    if (!this.sortedBins) {\n      this.sortedBins = this.aggregatedBins.sort((a, b) => ascending(a.value, b.value));\n    }\n    if (!this.sortedBins.length) {\n      return [];\n    }\n    let lowerIdx = 0;\n    let upperIdx = this.sortedBins.length - 1;\n\n    if (Array.isArray(percentileRange)) {\n      const idxRange = this._percentileToIndex(percentileRange);\n      lowerIdx = idxRange[0];\n      upperIdx = idxRange[1];\n    }\n\n    return [this.sortedBins[lowerIdx].value, this.sortedBins[upperIdx].value];\n  }\n\n  getValueDomainByScale(scale, [lower = 0, upper = 100] = []) {\n    if (!this.sortedBins) {\n      this.sortedBins = this.aggregatedBins.sort((a, b) => ascending(a.value, b.value));\n    }\n    if (!this.sortedBins.length) {\n      return [];\n    }\n    const indexEdge = this._percentileToIndex([lower, upper]);\n\n    return this._getScaleDomain(scale, indexEdge);\n  }\n\n  _getScaleDomain(scaleType, [lowerIdx, upperIdx]) {\n    const bins = this.sortedBins;\n\n    switch (scaleType) {\n      case 'quantize':\n      case 'linear':\n        return [bins[lowerIdx].value, bins[upperIdx].value];\n\n      case 'quantile':\n        return getQuantileDomain(bins.slice(lowerIdx, upperIdx + 1), d => d.value);\n\n      case 'ordinal':\n        return getOrdinalDomain(bins, d => d.value);\n\n      default:\n        return [bins[lowerIdx].value, bins[upperIdx].value];\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}